uint64_t karo::AsyncRequestManagerTemplate<altitude::TileId,karo::AsyncRequestManagerNoArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unsigned int *v27;
  std::__shared_weak_count *v28;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4)
    a4 = *(_DWORD *)(a1 + 88) + 1;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v27, a1, v8, v8 + 16);
      v10 = v27;
      v11 = *(_DWORD *)(v8 + 20);
      v12 = *(_DWORD *)(v8 + 24);
      v13 = *(_BYTE *)(v8 + 28);
      v14 = atomic_load(v27 + 4);
      if (v14 != v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
      v10[45] = a4;
      v10[46] = v12;
      *((_BYTE *)v10 + 176) = v13;
      v15 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v15 >= *(_QWORD *)(a3 + 16))
      {
        v22 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v27, (uint64_t)v28);
      }
      else
      {
        *v15 = &off_1E42C2D08;
        v16 = v27;
        v15[1] = v27;
        v17 = (uint64_t)v28;
        v15[2] = v28;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          v16 = (unsigned int *)v15[1];
        }
        if (v16)
        {
          v20 = v16 + 32;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        v22 = v15 + 3;
        *(_QWORD *)(a3 + 8) = v15 + 3;
      }
      *(_QWORD *)(a3 + 8) = v22;
      v23 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v8 += 32;
    }
    while (v8 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19FAE35D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileId,karo::AsyncRequestManagerNoArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v28;
  std::__shared_weak_count *v29;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3)
    a3 = *(_DWORD *)(a1 + 88) + 1;
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v28, a1, a2, a7);
  v16 = v28;
  v17 = atomic_load(v28 + 4);
  if (v17 != (_DWORD)a4)
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v28 + 24))(v28, a4);
  v16[45] = a3;
  v16[46] = a5;
  *((_BYTE *)v16 + 176) = a6;
  v18 = v28;
  v19 = v29;
  *a8 = &off_1E42C2D08;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v18)
  {
    v22 = v18 + 32;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v24 = v29;
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19FAE3738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileId,karo::AsyncRequestManagerNoArgs>::waitOnRequest(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v6 = *(uint64_t **)(a1 + 72);
  if (!v6)
  {
LABEL_23:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    return 0;
  }
  v8 = *a2;
  v7 = a2[1];
  v9 = (uint64_t *)(a1 + 72);
  v11 = a2[2];
  v10 = a2[3];
  do
  {
    v12 = *((_DWORD *)v6 + 8);
    if (v12 < v8)
    {
LABEL_3:
      ++v6;
      goto LABEL_4;
    }
    if (v12 > v8)
      goto LABEL_11;
    v13 = *((_DWORD *)v6 + 9);
    if (v13 < v7)
      goto LABEL_3;
    if (v13 > v7)
      goto LABEL_11;
    v14 = *((_DWORD *)v6 + 10);
    if (v14 < v11)
      goto LABEL_3;
    if (v14 <= v11)
    {
      if (*((_DWORD *)v6 + 11) < v10)
        ++v6;
      else
        v9 = v6;
    }
    else
    {
LABEL_11:
      v9 = v6;
    }
LABEL_4:
    v6 = (uint64_t *)*v6;
  }
  while (v6);
  if (v9 == (uint64_t *)(a1 + 72))
    goto LABEL_23;
  v15 = *((_DWORD *)v9 + 8);
  if (v8 < v15)
    goto LABEL_23;
  if (v8 <= v15)
  {
    v16 = *((_DWORD *)v9 + 9);
    if (v7 < v16)
      goto LABEL_23;
    if (v7 <= v16)
    {
      v17 = *((_DWORD *)v9 + 10);
      if (v11 < v17 || v11 <= v17 && v10 < *((_DWORD *)v9 + 11))
        goto LABEL_23;
    }
  }
  v21 = v9[6];
  v20 = (std::__shared_weak_count *)v9[7];
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  if (v21)
  {
    karo::Job::waitToFinish((karo::Job *)v21, a3);
    pthread_mutex_lock(*(pthread_mutex_t **)(v21 + 152));
    v18 = *(_DWORD *)(v21 + 160) & 1;
    pthread_mutex_unlock(*(pthread_mutex_t **)(v21 + 152));
    if (!v20)
      return v18;
LABEL_32:
    v24 = (unint64_t *)&v20->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    v18 = 0;
    if (v20)
      goto LABEL_32;
  }
  return v18;
}

void sub_19FAE3904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<altitude::TileId,karo::AsyncRequestManagerNoArgs>::getRequest(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t **v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  std::__shared_weak_count *v50;

  *a3 = 0;
  a3[1] = 0;
  v7 = (uint64_t **)(a1 + 72);
  v6 = *(uint64_t **)(a1 + 72);
  if (!v6)
    goto LABEL_17;
  v9 = *a2;
  v8 = a2[1];
  v10 = (uint64_t **)(a1 + 72);
  v12 = a2[2];
  v11 = a2[3];
  do
  {
    v13 = *((_DWORD *)v6 + 8);
    if (v13 < v9)
    {
LABEL_3:
      ++v6;
      goto LABEL_4;
    }
    if (v13 > v9)
      goto LABEL_7;
    v14 = *((_DWORD *)v6 + 9);
    if (v14 < v8)
      goto LABEL_3;
    if (v14 > v8)
      goto LABEL_7;
    v15 = *((_DWORD *)v6 + 10);
    if (v15 < v12)
      goto LABEL_3;
    if (v15 > v12)
    {
LABEL_7:
      v10 = (uint64_t **)v6;
    }
    else if (*((_DWORD *)v6 + 11) < v11)
    {
      ++v6;
    }
    else
    {
      v10 = (uint64_t **)v6;
    }
LABEL_4:
    v6 = (uint64_t *)*v6;
  }
  while (v6);
  if (v10 != v7)
  {
    v16 = *((_DWORD *)v10 + 8);
    if (v9 >= v16)
    {
      if (v9 > v16
        || (v47 = *((_DWORD *)v10 + 9), v8 >= v47)
        && (v8 > v47 || (v48 = *((_DWORD *)v10 + 10), v12 >= v48) && (v12 > v48 || v11 >= *((_DWORD *)v10 + 11))))
      {
        v31 = v10[6];
        v30 = v10[7];
        if (v30)
        {
          v32 = (unint64_t *)(v30 + 1);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        *a3 = (uint64_t)v31;
        a3[1] = (uint64_t)v30;
        return;
      }
    }
  }
LABEL_17:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned int *))(*(_QWORD *)a1 + 64))(&v49, a1, a2);
  v18 = v49;
  v17 = v50;
  *a3 = v49;
  a3[1] = (uint64_t)v17;
  v19 = *v7;
  v20 = v7;
  if (*v7)
  {
    v21 = *a2;
    v22 = a2[1];
    v23 = a2[2];
    v24 = a2[3];
    while (1)
    {
      v20 = v19;
      v25 = *((_DWORD *)v19 + 8);
      if (v21 < v25)
        goto LABEL_19;
      if (v21 > v25)
        goto LABEL_22;
      v26 = *((_DWORD *)v20 + 9);
      if (v22 < v26)
        goto LABEL_19;
      if (v22 > v26)
        goto LABEL_22;
      v27 = *((_DWORD *)v20 + 10);
      if (v23 < v27)
        goto LABEL_19;
      if (v23 > v27)
        goto LABEL_22;
      v28 = *((_DWORD *)v20 + 11);
      if (v24 < v28)
      {
LABEL_19:
        v19 = (uint64_t *)*v20;
        v7 = (uint64_t **)v20;
        if (!*v20)
          break;
      }
      else
      {
        if (v28 >= v24)
        {
          v29 = v20;
          goto LABEL_39;
        }
LABEL_22:
        v19 = (uint64_t *)v20[1];
        if (!v19)
        {
          v7 = (uint64_t **)(v20 + 1);
          break;
        }
      }
    }
  }
  v29 = operator new(0x40uLL);
  *((_OWORD *)v29 + 2) = *(_OWORD *)a2;
  *((_QWORD *)v29 + 6) = 0;
  *((_QWORD *)v29 + 7) = 0;
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  *((_QWORD *)v29 + 2) = v20;
  *v7 = (uint64_t *)v29;
  v34 = **(_QWORD **)(a1 + 64);
  v35 = (uint64_t *)v29;
  if (v34)
  {
    *(_QWORD *)(a1 + 64) = v34;
    v35 = *v7;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v35);
  ++*(_QWORD *)(a1 + 80);
LABEL_39:
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)v29 + 7);
  *((_QWORD *)v29 + 6) = v18;
  *((_QWORD *)v29 + 7) = v17;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = *(_QWORD *)(a1 + 48);
  if (v41)
  {
    v42 = *a3;
    v43 = (std::__shared_weak_count *)a3[1];
    v49 = v42;
    v50 = v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
      karo::JobManager::queueJob(v41, &v49);
      do
        v46 = __ldaxr(v44);
      while (__stlxr(v46 - 1, v44));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    else
    {
      karo::JobManager::queueJob(v41, &v49);
    }
  }
}

void sub_19FAE3BFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t altitude::SkeletonRequestManager::request(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4, a5, a6, 0);
}

void std::__shared_ptr_pointer<altitude::SkeletonLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::SkeletonLoadJob>,std::allocator<altitude::SkeletonLoadJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::SkeletonLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::SkeletonLoadJob>,std::allocator<altitude::SkeletonLoadJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void altitude::SkeletonLoadJob::~SkeletonLoadJob(altitude::SkeletonLoadJob *this)
{
  altitude::SkeletonLoadJob::~SkeletonLoadJob(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E42C45E0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 37));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  karo::Job::~Job(this);
}

void altitude::SkeletonLoadJob::jobStep(altitude::SkeletonLoadJob *this)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD **v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int32x2_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  int v55;
  _QWORD **v56;
  uint64_t *v57;
  uint64_t *v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  int32x2_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  int v72;
  _QWORD **v73;
  uint64_t *v74;
  int32x2_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  int v80;
  _QWORD **v81;
  uint64_t *v82;
  uint64_t *v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *p_shared_owners;
  unint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t *v120;
  char *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t *v124;
  char *v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  NSObject *v145;
  NSObject *v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  _QWORD v149[2];
  _QWORD v150[2];
  __int128 v151;
  __int128 v152;
  int v153;
  _BYTE v154[32];
  std::__shared_weak_count *v155;
  uint8_t buf[8];
  uint64_t v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 30);
  if (v2 && *((_QWORD *)this + 32))
    goto LABEL_7;
  v3 = *((_OWORD *)this + 13);
  v151 = *((_OWORD *)this + 12);
  v152 = v3;
  v153 = *(_DWORD *)(*((_QWORD *)this + 1) + 88);
  if (!v2)
  {
    atomic_load((unsigned int *)this + 4);
    (*(void (**)(_BYTE *__return_ptr, _QWORD, __int128 *))(**((_QWORD **)this + 34) + 104))(v154, *((_QWORD *)this + 34), &v151);
    v87 = *(_QWORD *)v154;
    if (*(_QWORD *)v154)
    {
      v88 = *(_QWORD *)&v154[8];
      if (*(_QWORD *)&v154[8])
      {
        v89 = (unint64_t *)(*(_QWORD *)&v154[8] + 8);
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
      }
      v91 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
      *((_QWORD *)this + 30) = v87;
      *((_QWORD *)this + 31) = v88;
      if (v91)
      {
        p_shared_owners = (unint64_t *)&v91->__shared_owners_;
        do
          v93 = __ldaxr(p_shared_owners);
        while (__stlxr(v93 - 1, p_shared_owners));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      karo::Job::removeSubJob((pthread_mutex_t **)this, 0);
    }
    else if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v154[16]))
    {
      v137 = v155;
      v150[0] = *(_QWORD *)&v154[24];
      v150[1] = v155;
      if (v155)
      {
        v138 = (unint64_t *)&v155->__shared_owners_;
        do
          v139 = __ldxr(v138);
        while (__stxr(v139 + 1, v138));
        karo::Job::addBlockingSubJob((uint64_t *)this, v150, 0, 0);
        do
          v140 = __ldaxr(v138);
        while (__stlxr(v140 - 1, v138));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
      else
      {
        karo::Job::addBlockingSubJob((uint64_t *)this, v150, 0, 0);
      }
    }
    else
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v145 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19F029000, v145, OS_LOG_TYPE_ERROR, "Failed to load Traffic file", buf, 2u);
      }

      (*(void (**)(altitude::SkeletonLoadJob *))(*(_QWORD *)this + 16))(this);
    }
    *(_QWORD *)&v154[16] = &off_1E42C2D08;
    if (*(_QWORD *)&v154[24])
    {
      v94 = (unsigned int *)(*(_QWORD *)&v154[24] + 128);
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
    }
    v96 = v155;
    if (v155)
    {
      v97 = (unint64_t *)&v155->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    v99 = *(std::__shared_weak_count **)&v154[8];
    if (*(_QWORD *)&v154[8])
    {
      v100 = (unint64_t *)(*(_QWORD *)&v154[8] + 8);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
  }
  if (!*((_QWORD *)this + 32))
  {
    v102 = *((_QWORD *)this + 35);
    v103 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
    v104 = atomic_load((unsigned int *)this + 4);
    (*(void (**)(_BYTE *__return_ptr, uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)v102 + 104))(v154, v102, (char *)this + 192, v103, v104);
    v105 = *(_QWORD *)v154;
    if (*(_QWORD *)v154)
    {
      v106 = *(_QWORD *)&v154[8];
      if (*(_QWORD *)&v154[8])
      {
        v107 = (unint64_t *)(*(_QWORD *)&v154[8] + 8);
        do
          v108 = __ldxr(v107);
        while (__stxr(v108 + 1, v107));
      }
      v109 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
      *((_QWORD *)this + 32) = v105;
      *((_QWORD *)this + 33) = v106;
      if (v109)
      {
        v110 = (unint64_t *)&v109->__shared_owners_;
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      karo::Job::removeSubJob((pthread_mutex_t **)this, 1);
    }
    else if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v154[16]))
    {
      v141 = v155;
      v149[0] = *(_QWORD *)&v154[24];
      v149[1] = v155;
      if (v155)
      {
        v142 = (unint64_t *)&v155->__shared_owners_;
        do
          v143 = __ldxr(v142);
        while (__stxr(v143 + 1, v142));
        karo::Job::addBlockingSubJob((uint64_t *)this, v149, 1, 0);
        do
          v144 = __ldaxr(v142);
        while (__stlxr(v144 - 1, v142));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
        }
      }
      else
      {
        karo::Job::addBlockingSubJob((uint64_t *)this, v149, 1, 0);
      }
    }
    else
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v146 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19F029000, v146, OS_LOG_TYPE_ERROR, "Failed to load DTM file", buf, 2u);
      }

      (*(void (**)(altitude::SkeletonLoadJob *))(*(_QWORD *)this + 16))(this);
    }
    *(_QWORD *)&v154[16] = &off_1E42C2D08;
    if (*(_QWORD *)&v154[24])
    {
      v112 = (unsigned int *)(*(_QWORD *)&v154[24] + 128);
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
    }
    v114 = v155;
    if (v155)
    {
      v115 = (unint64_t *)&v155->__shared_owners_;
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    v117 = *(std::__shared_weak_count **)&v154[8];
    if (*(_QWORD *)&v154[8])
    {
      v118 = (unint64_t *)(*(_QWORD *)&v154[8] + 8);
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
  }
  if (*((_QWORD *)this + 30) && *((_QWORD *)this + 32))
  {
LABEL_7:
    v4 = operator new();
    v5 = *((_DWORD *)this + 52);
    v6 = *((unsigned int *)this + 54) | ((unint64_t)*((unsigned int *)this + 53) << 32);
    *(_QWORD *)v4 = off_1E42C56E0;
    *(_DWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = v6;
    *(_DWORD *)(v4 + 32) = v5;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    v7 = (_QWORD *)operator new();
    *v7 = &off_1E42E8AD0;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v4;
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
    *((_QWORD *)this + 28) = v4;
    *((_QWORD *)this + 29) = v7;
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *((_QWORD *)this + 28);
    v12 = *((_QWORD *)this + 30);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v16 = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = *(std::__shared_weak_count **)(v11 + 64);
    *(_QWORD *)(v11 + 56) = v12;
    *(_QWORD *)(v11 + 64) = v13;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v13)
    {
      v21 = (unint64_t *)&v13->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v23 = *((_QWORD *)this + 28);
    v24 = *((_QWORD *)this + 32);
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      v28 = (unint64_t *)&v25->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = *(std::__shared_weak_count **)(v23 + 88);
    *(_QWORD *)(v23 + 80) = v24;
    *(_QWORD *)(v23 + 88) = v25;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if (v25)
    {
      v33 = (unint64_t *)&v25->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v35 = *((_QWORD *)this + 1);
    *(_DWORD *)(*((_QWORD *)this + 28) + 8) = *(_DWORD *)(v35 + 88);
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v35 + 8) + 112) + 8) + 24))(&v148);
    *(_QWORD *)v154 = &off_1E42D86C0;
    *(_QWORD *)&v154[8] = this;
    *(_QWORD *)&v154[24] = v154;
    v151 = 0uLL;
    (*(void (**)(uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v148 + 16))(v148, v154, &v151);
    v36 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
    if (*((_QWORD *)&v151 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = *(_QWORD **)&v154[24];
    if (*(_BYTE **)&v154[24] == v154)
    {
      v40 = 4;
      v39 = v154;
    }
    else
    {
      if (!*(_QWORD *)&v154[24])
      {
LABEL_52:
        v41 = *((_QWORD *)this + 32);
        if (!v41)
          goto LABEL_54;
        v42 = *((_QWORD *)this + 35);
        v151 = 0uLL;
        v152 = *(_OWORD *)(v41 + 136);
        (*(void (**)(_BYTE *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v42 + 144))(v154, v42, &v151);
        *(_DWORD *)&v154[4] = *(_DWORD *)(*((_QWORD *)this + 32) + 152);
        *(_DWORD *)&v154[12] = altitude::GeoResourceManager::getVersionForGEOType(*((_QWORD *)this + 1), *(unsigned int *)v154, *(unsigned int *)&v154[4]);
        v43 = (_QWORD **)((char *)this + 288);
        v44 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 288, &v151, (unsigned int *)v154);
        if (!*v44)
        {
          v120 = v44;
          v121 = (char *)operator new(0x40uLL);
          *(_OWORD *)(v121 + 28) = *(_OWORD *)v154;
          *(_OWORD *)(v121 + 44) = *(_OWORD *)&v154[16];
          v122 = v151;
          *(_QWORD *)v121 = 0;
          *((_QWORD *)v121 + 1) = 0;
          *((_QWORD *)v121 + 2) = v122;
          *v120 = (uint64_t)v121;
          v123 = (_QWORD *)**v43;
          if (v123)
          {
            *v43 = v123;
            v121 = (char *)*v120;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 37), (uint64_t *)v121);
          ++*((_QWORD *)this + 38);
          v45 = *((_QWORD *)this + 30);
          if (!v45)
            goto LABEL_136;
        }
        else
        {
LABEL_54:
          v45 = *((_QWORD *)this + 30);
          if (!v45)
          {
LABEL_136:
            pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
            v132 = (*((_DWORD *)this + 40) & 2) == 0;
            pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
            *((_BYTE *)this + 188) = v132;
            pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
            *((_DWORD *)this + 40) |= 1u;
            pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
            if (v148)
            {
              v133 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v148 + 24))(v148);
              v134 = v148;
              v148 = 0;
              *(_QWORD *)v154 = v134;
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v133 + 48))(v133, v154);
              v135 = *(_QWORD *)v154;
              *(_QWORD *)v154 = 0;
              if (v135)
                (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
              v136 = v148;
              v148 = 0;
              if (v136)
                (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
            }
            return;
          }
        }
        v47 = *(_QWORD *)(v45 + 80);
        v46 = *(std::__shared_weak_count **)(v45 + 88);
        v147 = v46;
        if (v46)
        {
          v48 = (unint64_t *)&v46->__shared_owners_;
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
        if (v47)
        {
          v50 = *(int32x2_t *)(v47 + 36);
          v51 = *(_DWORD *)(v47 + 32);
          v52 = *((_QWORD *)this + 1);
          *(_DWORD *)v154 = 20;
          memset(&v154[4], 0, 28);
          *(_QWORD *)buf = altitude::TileKey::getGEOTileKey((unsigned int *)v154, v52);
          v157 = v53;
          objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          v55 = objc_msgSend(v54, "versionForTileKey:", buf);

          v56 = (_QWORD **)((char *)this + 288);
          *(_QWORD *)&v151 = 20;
          DWORD2(v151) = 0;
          HIDWORD(v151) = v55;
          *(int32x2_t *)&v152 = vrev64_s32(v50);
          *((_QWORD *)&v152 + 1) = v51;
          v57 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 288, v154, (unsigned int *)&v151);
          if (!*v57)
          {
            v58 = v57;
            v59 = (char *)operator new(0x40uLL);
            *(_OWORD *)(v59 + 28) = v151;
            *(_OWORD *)(v59 + 44) = v152;
            v60 = *(_QWORD *)v154;
            *(_QWORD *)v59 = 0;
            *((_QWORD *)v59 + 1) = 0;
            *((_QWORD *)v59 + 2) = v60;
            *v58 = (uint64_t)v59;
            v61 = (_QWORD *)**v56;
            if (v61)
            {
              *v56 = v61;
              v59 = (char *)*v58;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 37), (uint64_t *)v59);
            ++*((_QWORD *)this + 38);
          }
        }
        v62 = *((_QWORD *)this + 30);
        v63 = *(_QWORD *)(v62 + 48);
        v64 = *(std::__shared_weak_count **)(v62 + 56);
        if (v64)
        {
          v65 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        if (!v63)
          goto LABEL_68;
        v67 = *(int32x2_t *)(v63 + 60);
        v68 = *(_DWORD *)(v63 + 56);
        v69 = *((_QWORD *)this + 1);
        *(_DWORD *)v154 = 12;
        memset(&v154[4], 0, 28);
        *(_QWORD *)buf = altitude::TileKey::getGEOTileKey((unsigned int *)v154, v69);
        v157 = v70;
        objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        v72 = objc_msgSend(v71, "versionForTileKey:", buf);

        v73 = (_QWORD **)((char *)this + 288);
        *(_QWORD *)&v151 = 12;
        DWORD2(v151) = 0;
        HIDWORD(v151) = v72;
        *(int32x2_t *)&v152 = vrev64_s32(v67);
        *((_QWORD *)&v152 + 1) = v68;
        v74 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 288, v154, (unsigned int *)&v151);
        if (!*v74)
        {
          v124 = v74;
          v125 = (char *)operator new(0x40uLL);
          *(_OWORD *)(v125 + 28) = v151;
          *(_OWORD *)(v125 + 44) = v152;
          v126 = *(_QWORD *)v154;
          *(_QWORD *)v125 = 0;
          *((_QWORD *)v125 + 1) = 0;
          *((_QWORD *)v125 + 2) = v126;
          *v124 = (uint64_t)v125;
          v127 = (_QWORD *)**v73;
          if (v127)
          {
            *v73 = v127;
            v125 = (char *)*v124;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 37), (uint64_t *)v125);
          ++*((_QWORD *)this + 38);
          if (!v47)
            goto LABEL_126;
        }
        else
        {
LABEL_68:
          if (!v47)
          {
LABEL_126:
            if (v64)
            {
              v128 = (unint64_t *)&v64->__shared_owners_;
              do
                v129 = __ldaxr(v128);
              while (__stlxr(v129 - 1, v128));
              if (!v129)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
              }
            }
            if (v147)
            {
              v130 = (unint64_t *)&v147->__shared_owners_;
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                std::__shared_weak_count::__release_weak(v147);
              }
            }
            goto LABEL_136;
          }
        }
        v75 = *(int32x2_t *)(v47 + 36);
        v76 = *(_DWORD *)(v47 + 32);
        v77 = *((_QWORD *)this + 1);
        *(_DWORD *)v154 = 22;
        memset(&v154[4], 0, 28);
        *(_QWORD *)buf = altitude::TileKey::getGEOTileKey((unsigned int *)v154, v77);
        v157 = v78;
        objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        v80 = objc_msgSend(v79, "versionForTileKey:", buf);

        v81 = (_QWORD **)((char *)this + 288);
        *(_QWORD *)&v151 = 22;
        DWORD2(v151) = 0;
        HIDWORD(v151) = v80;
        *(int32x2_t *)&v152 = vrev64_s32(v75);
        *((_QWORD *)&v152 + 1) = v76;
        v82 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 288, v154, (unsigned int *)&v151);
        if (!*v82)
        {
          v83 = v82;
          v84 = (char *)operator new(0x40uLL);
          *(_OWORD *)(v84 + 28) = v151;
          *(_OWORD *)(v84 + 44) = v152;
          v85 = *(_QWORD *)v154;
          *(_QWORD *)v84 = 0;
          *((_QWORD *)v84 + 1) = 0;
          *((_QWORD *)v84 + 2) = v85;
          *v83 = (uint64_t)v84;
          v86 = (_QWORD *)**v81;
          if (v86)
          {
            *v81 = v86;
            v84 = (char *)*v83;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 37), (uint64_t *)v84);
          ++*((_QWORD *)this + 38);
        }
        goto LABEL_126;
      }
      v40 = 5;
    }
    (*(void (**)(void))(*v39 + 8 * v40))();
    goto LABEL_52;
  }
}

void sub_19FAE4968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  std::pair<std::shared_ptr<altitude::GEOTileDataPrivate>,karo::AsyncRequestManager::RequestHandle>::~pair((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19FAE497C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  std::pair<std::shared_ptr<altitude::GEOTileDataPrivate>,karo::AsyncRequestManager::RequestHandle>::~pair((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19FAE4990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  ggl::Loader::~Loader((ggl::Loader *)va2);
  _Unwind_Resume(a1);
}

void sub_19FAE49F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  _Unwind_Resume(a1);
}

uint64_t altitude::SkeletonLoadJob::succeeded(altitude::SkeletonLoadJob *this)
{
  return *((unsigned __int8 *)this + 188);
}

void std::__function::__func<altitude::SkeletonLoadJob::jobStep(void)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<altitude::SkeletonLoadJob::jobStep(void)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<altitude::SkeletonLoadJob::jobStep(void)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<altitude::SkeletonLoadJob::jobStep(void)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D86C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<altitude::SkeletonLoadJob::jobStep(void)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<altitude::SkeletonLoadJob::jobStep(void)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D86C0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<altitude::SkeletonLoadJob::jobStep(void)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<altitude::SkeletonLoadJob::jobStep(void)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, ResourceAccessor **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  _BYTE *v51;
  _BYTE *v52;
  int64_t v53;
  char *v54;
  size_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v64;
  char *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  int v83;
  double v84;
  double v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v96;
  float v97;
  float v98;
  float v99;
  float v100;
  _QWORD *v101;
  unsigned int v102;
  uint64_t v103;
  float *v104;
  uint64_t v105;
  uint64_t v106;
  float v107;
  BOOL v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  float v115;
  float v116;
  float v117;
  float *v118;
  uint64_t v119;
  uint64_t v120;
  float v121;
  float v122;
  _BOOL4 v124;
  float v125;
  uint64_t v126;
  uint64_t v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  unint64_t v136;
  uint64_t v137;
  __int128 *v138;
  unint64_t v139;
  char *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  __int128 v145;
  char *v146;
  char *v147;
  __int128 v148;
  char *v149;
  void *v150;
  double v151;
  double v152;
  double v153;
  unint64_t v154;
  double *v155;
  double *v156;
  float v157;
  double *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  float v162;
  float v163;
  char *v164;
  float v165;
  float v166;
  float v167;
  float v168;
  double *v169;
  double *v170;
  __int128 v171;
  char *v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v178;
  float v179;
  double v180;
  double v181;
  double v182;
  unint64_t v183;
  double *v184;
  double *v185;
  unint64_t v186;
  double *v187;
  double v188;
  double *v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  float v193;
  float v194;
  float v195;
  char *v196;
  double v197;
  double v198;
  double v199;
  double *v200;
  double *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  float v205;
  char *v206;
  double *v207;
  double *v208;
  __int128 v209;
  float v210;
  double *v211;
  double *v212;
  __int128 v213;
  float v214;
  float v215;
  double v216;
  double v217;
  double v218;
  float v219;
  float v220;
  float v221;
  double *v222;
  double *v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  float v227;
  char *v228;
  double *v229;
  double *v230;
  __int128 v231;
  float v232;
  float v233;
  char *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t *v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t *v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  uint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  uint64_t v262;
  std::__shared_weak_count *v263;
  uint64_t v264;
  std::__shared_weak_count *v265;
  uint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  _QWORD *v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t i;
  uint64_t *v295;
  uint64_t *v296;
  BOOL v297;
  uint64_t v298;
  double v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t *v302;
  double v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  float64x2_t v308;
  float64x2_t v309;
  BOOL v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t *v317;
  uint64_t v318;
  double *v319;
  double v320;
  uint64_t v321;
  double v322;
  double v323;
  int v324;
  double v325;
  long double v326;
  long double v327;
  double v328;
  long double v329;
  double v330;
  __double2 v331;
  double v332;
  __double2 v333;
  double v334;
  uint64_t v335;
  uint64_t v336;
  __int128 v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t v340;
  char *v341;
  char *v342;
  _BYTE *v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  char *v348;
  char *v349;
  char *v350;
  int v351;
  char *v352;
  std::__shared_weak_count *v353;
  uint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  uint64_t v358;
  int v359;
  int v360;
  int v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  int v365;
  int v366;
  uint64_t v367;
  int v368;
  int v369;
  unsigned int v370;
  unsigned int v371;
  int v372;
  int v373;
  uint64_t v374;
  _BYTE *v375;
  int v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t *v384;
  unint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  double v389;
  uint64_t v390;
  int64x2_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unsigned __int8 v395;
  uint64_t v396;
  float v397;
  double v398;
  NSObject *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  double v404;
  double v405;
  double v406;
  double v407;
  double v408;
  double v409;
  double v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  double *v414;
  unint64_t v415;
  double v416;
  double v417;
  unint64_t v418;
  double *v419;
  double v420;
  double v421;
  double v422;
  double v423;
  double v424;
  double v425;
  double v426;
  double v427;
  BOOL v428;
  double *v429;
  double v430;
  double v431;
  double v432;
  uint64_t v433;
  double *v434;
  double v435;
  double v436;
  double v437;
  double v438;
  double v439;
  double v440;
  double v441;
  BOOL v442;
  uint64_t v443;
  double *v444;
  double v445;
  double v446;
  double v447;
  double v448;
  double v449;
  double v450;
  BOOL v451;
  ResourceAccessor *v452;
  uint64_t v453;
  uint64_t *v454;
  uint64_t *v455;
  _QWORD *v456;
  uint64_t v457;
  _QWORD *v458;
  _QWORD *v459;
  _QWORD *v460;
  float v461;
  uint64_t v462;
  unint64_t v463;
  double v464;
  uint64_t v465;
  uint64_t v466;
  float64x2_t v467;
  uint64_t v468;
  unint64_t v469;
  int8x16_t v470;
  int8x16_t v471;
  int8x16_t *v472;
  float64x2_t v473;
  unint64_t v474;
  float64x2_t v475;
  const double *i64;
  int8x16_t v477;
  int8x16_t v478;
  int8x16_t v479;
  int8x16_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  unint64_t v488;
  _OWORD *v489;
  double v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  uint64_t v494;
  uint64_t v495;
  float v496;
  uint64_t v497;
  uint64_t v498;
  _QWORD *v499;
  int v500;
  uint64_t v501;
  ResourceAccessor *v502;
  uint64_t *v503;
  int v504;
  int v505;
  double v506;
  int v507;
  uint64_t v508;
  _QWORD *v509;
  unsigned int v510;
  double v511;
  double v512;
  double v513;
  float v514;
  uint64_t v515;
  uint64_t v516;
  float v517;
  float v518;
  float v519;
  float v520;
  float v521;
  float v522;
  uint64_t v523;
  float v524;
  __int128 v525;
  __int128 v526;
  char *v527;
  float v528;
  void *__p;
  char *v530;
  uint64_t v531;
  uint64_t v532[2];
  uint64_t v533;
  std::__shared_weak_count *v534;
  uint64_t v535;
  std::__shared_weak_count *v536;
  uint64_t v537;
  std::__shared_weak_count *v538;
  _QWORD *v539;
  std::__shared_weak_count *v540;
  float64x2x3_t v541;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 224);
  v509 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8) + 40) + 24);
  v4 = *(uint64_t **)(v3 + 56);
  v501 = v3;
  v502 = *a2;
  v5 = *(_DWORD *)(v3 + 32);
  pthread_mutex_lock((pthread_mutex_t *)v4[2]);
  v7 = v4[3];
  v6 = v4[4];
  v503 = v4;
  v500 = v5;
  if (v7 != v6)
  {
    while (*(_DWORD *)v7 != v5)
    {
      v7 += 24;
      if (v7 == v6)
        goto LABEL_25;
    }
    v8 = *(std::__shared_weak_count **)(v7 + 16);
    if (v8)
    {
      v9 = std::__shared_weak_count::lock(v8);
      v10 = v9;
      if (v9 && *(_QWORD *)(v7 + 8))
      {
        *(_QWORD *)&v11 = *(_QWORD *)(v7 + 8);
        *((_QWORD *)&v11 + 1) = v9;
        v526 = v11;
        v12 = v503;
        goto LABEL_408;
      }
    }
    else
    {
      v10 = 0;
    }
    v13 = v7 + 24;
    v14 = v503[4];
    if (v7 + 24 != v14)
    {
      do
      {
        *(_DWORD *)v7 = *(_DWORD *)(v7 + 24);
        v17 = *(_OWORD *)(v7 + 32);
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        v18 = *(std::__shared_weak_count **)(v7 + 16);
        *(_OWORD *)(v7 + 8) = v17;
        if (v18)
          std::__shared_weak_count::__release_weak(v18);
        v15 = v7 + 24;
        v16 = v7 + 48;
        v7 += 24;
      }
      while (v16 != v14);
      v13 = v503[4];
      v7 = v15;
    }
    while (v13 != v7)
    {
      v19 = *(std::__shared_weak_count **)(v13 - 8);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      v13 -= 24;
    }
    v503[4] = v7;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
LABEL_25:
  v22 = operator new();
  v23 = *v503;
  v24 = *((_DWORD *)v503 + 2);
  *(_QWORD *)v22 = 850045863;
  *(_QWORD *)(v22 + 128) = 0;
  *(_QWORD *)(v22 + 160) = 0;
  *(_QWORD *)(v22 + 168) = 0;
  *(_OWORD *)(v22 + 8) = 0u;
  *(_OWORD *)(v22 + 24) = 0u;
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 56) = 0u;
  *(_OWORD *)(v22 + 72) = 0u;
  *(_OWORD *)(v22 + 88) = 0u;
  *(_QWORD *)(v22 + 104) = 0;
  *(_QWORD *)(v22 + 112) = v23;
  *(_DWORD *)(v22 + 120) = v24;
  v25 = (_QWORD *)operator new();
  *v25 = &off_1E42E8948;
  v25[1] = 0;
  v25[2] = 0;
  v25[3] = v22;
  v499 = v25;
  *(_QWORD *)(v22 + 128) = v503;
  v27 = v503[12];
  v26 = v503[13];
  if (v26)
  {
    v28 = (unint64_t *)(v26 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = *(std::__shared_weak_count **)(v22 + 168);
  *(_QWORD *)(v22 + 160) = v27;
  *(_QWORD *)(v22 + 168) = v26;
  v516 = v22;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *(_DWORD *)(v22 + 124) = v500;
  v33 = (1 << (2 * (v500 - *(_BYTE *)(v22 + 120))));
  v34 = *(_QWORD *)(v22 + 64);
  v35 = *(_QWORD *)(v22 + 72);
  v36 = 0x8E38E38E38E38E39 * ((v35 - v34) >> 3);
  v37 = v33 - v36;
  if (v33 > v36)
  {
    v38 = *(_QWORD *)(v22 + 80);
    if (0x8E38E38E38E38E39 * ((v38 - v35) >> 3) < v37)
    {
      v39 = 0x8E38E38E38E38E39 * ((v38 - v34) >> 3);
      v40 = 2 * v39;
      if (2 * v39 <= v33)
        v40 = (1 << (2 * (v500 - *(_BYTE *)(v22 + 120))));
      if (v39 >= 0x1C71C71C71C71C7)
        v41 = 0x38E38E38E38E38ELL;
      else
        v41 = v40;
      if (v41 > 0x38E38E38E38E38ELL)
        goto LABEL_506;
      v42 = (char *)operator new(72 * v41);
      v43 = 72 * v36;
      v44 = &v42[72 * v36];
      v45 = &v42[72 * v33];
      do
      {
        v46 = &v42[v43];
        *(_QWORD *)v46 = 0;
        *((_QWORD *)v46 + 1) = 0;
        v46[24] = 0;
        *((_QWORD *)v46 + 2) = 0;
        *((_OWORD *)v46 + 2) = 0uLL;
        *((_OWORD *)v46 + 3) = 0uLL;
        v43 += 72;
        *((_QWORD *)v46 + 8) = 0;
      }
      while (v46 + 72 != v45);
      v47 = &v42[72 * v41];
      v48 = *(char **)(v22 + 64);
      v49 = *(char **)(v22 + 72);
      if (v49 == v48)
      {
        *(_QWORD *)(v22 + 64) = v44;
        *(_QWORD *)(v22 + 72) = v45;
        *(_QWORD *)(v22 + 80) = v47;
        if (!v49)
          goto LABEL_83;
        goto LABEL_82;
      }
      v527 = v47;
      do
      {
        v50 = *(_OWORD *)(v49 - 72);
        *(_OWORD *)(v44 - 63) = *(_OWORD *)(v49 - 63);
        *(_OWORD *)(v44 - 72) = v50;
        *((_QWORD *)v44 - 4) = 0;
        *((_QWORD *)v44 - 3) = 0;
        *((_QWORD *)v44 - 5) = 0;
        v52 = (_BYTE *)*((_QWORD *)v49 - 5);
        v51 = (_BYTE *)*((_QWORD *)v49 - 4);
        v53 = v51 - v52;
        if (v51 != v52)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v53 >> 3) > 0xAAAAAAAAAAAAAAALL)
            abort();
          v54 = (char *)operator new(v53);
          *((_QWORD *)v44 - 5) = v54;
          *((_QWORD *)v44 - 4) = v54;
          *((_QWORD *)v44 - 3) = &v54[8 * (v53 >> 3)];
          v55 = 24 * ((v53 - 24) / 0x18uLL) + 24;
          memcpy(v54, v52, v55);
          *((_QWORD *)v44 - 4) = &v54[v55];
        }
        *((_QWORD *)v44 - 2) = *((_QWORD *)v49 - 2);
        v56 = *((_QWORD *)v49 - 1);
        *((_QWORD *)v44 - 1) = v56;
        if (v56)
        {
          v57 = (unint64_t *)(v56 + 8);
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        v44 -= 72;
        v49 -= 72;
      }
      while (v49 != v48);
      v65 = *(char **)(v22 + 64);
      v49 = *(char **)(v22 + 72);
      *(_QWORD *)(v22 + 64) = v44;
      *(_QWORD *)(v22 + 72) = v45;
      *(_QWORD *)(v22 + 80) = v527;
      if (v49 == v65)
      {
LABEL_81:
        if (!v49)
        {
LABEL_83:
          v59 = *(_QWORD *)(v22 + 72);
          goto LABEL_84;
        }
LABEL_82:
        operator delete(v49);
        goto LABEL_83;
      }
      while (1)
      {
        v67 = (std::__shared_weak_count *)*((_QWORD *)v49 - 1);
        if (v67)
        {
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
            break;
        }
        v66 = (void *)*((_QWORD *)v49 - 5);
        if (v66)
          goto LABEL_72;
LABEL_73:
        v49 -= 72;
        if (v49 == v65)
        {
          v49 = v65;
          goto LABEL_81;
        }
      }
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
      v66 = (void *)*((_QWORD *)v49 - 5);
      if (!v66)
        goto LABEL_73;
LABEL_72:
      *((_QWORD *)v49 - 4) = v66;
      operator delete(v66);
      goto LABEL_73;
    }
    v59 = v35 + 72 * v37;
    do
    {
      *(_QWORD *)v35 = 0;
      *(_QWORD *)(v35 + 8) = 0;
      *(_BYTE *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 16) = 0;
      *(_OWORD *)(v35 + 32) = 0uLL;
      *(_OWORD *)(v35 + 48) = 0uLL;
      *(_QWORD *)(v35 + 64) = 0;
      v35 += 72;
    }
    while (v35 != v59);
    goto LABEL_67;
  }
  if (v33 >= v36)
  {
    v59 = *(_QWORD *)(v22 + 72);
    goto LABEL_84;
  }
  v59 = v34 + 72 * v33;
  if (v35 != v59)
  {
    while (1)
    {
      v60 = v59;
      v61 = *(std::__shared_weak_count **)(v35 - 8);
      if (v61)
      {
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
          break;
      }
      v64 = *(void **)(v35 - 40);
      if (v64)
        goto LABEL_62;
LABEL_56:
      v35 -= 72;
      v59 = v60;
      if (v35 == v60)
        goto LABEL_55;
    }
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
    v64 = *(void **)(v35 - 40);
    if (!v64)
      goto LABEL_56;
LABEL_62:
    *(_QWORD *)(v35 - 32) = v64;
    operator delete(v64);
    goto LABEL_56;
  }
LABEL_55:
  v22 = v516;
LABEL_67:
  *(_QWORD *)(v22 + 72) = v59;
LABEL_84:
  v70 = *(_QWORD *)(v22 + 64);
  v71 = v59;
  if (v59 != v70)
  {
    v72 = 0;
    v73 = v516;
    do
    {
      v75 = *(_QWORD *)(v73 + 160);
      v74 = *(_QWORD *)(v73 + 168);
      if (v74)
      {
        v76 = (unint64_t *)(v74 + 8);
        do
          v77 = __ldxr(v76);
        while (__stxr(v77 + 1, v76));
      }
      *(_QWORD *)(v70 + 72 * v72 + 56) = v75;
      v78 = v70 + 72 * v72;
      v79 = *(std::__shared_weak_count **)(v78 + 64);
      *(_QWORD *)(v78 + 64) = v74;
      if (v79)
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v73 = v516;
      v70 = *(_QWORD *)(v516 + 64);
      *(_QWORD *)(v70 + 72 * v72 + 16) = v72;
      ++v72;
    }
    while (0x8E38E38E38E38E39 * ((*(_QWORD *)(v516 + 72) - v70) >> 3) != v72);
    v59 = *(_QWORD *)(v516 + 72);
    v71 = *(_QWORD *)(v516 + 64);
  }
  __p = 0;
  v530 = 0;
  v531 = 0;
  v508 = v59;
  if (v71 == v59)
    goto LABEL_283;
  v510 = 0;
  v83 = *(_DWORD *)(v516 + 120);
  v82 = *(_DWORD *)(v516 + 124);
  v507 = v82 - v83;
  v84 = 1.0;
  v85 = 1.0 / (double)(1 << (v82 - v83));
  v506 = v85;
  v86 = *(_QWORD *)(v516 + 128);
  v504 = 2 * v82 - 2 * v83 - 2;
  v505 = v83 - v82;
  v515 = v86;
  while (2)
  {
    if (v507)
    {
      v87 = 0;
      LODWORD(v88) = 0;
      v89 = v504;
      v90 = v505;
      v91 = v510;
      do
      {
        v92 = v91 >> v89;
        v91 -= v91 >> v89 << v89;
        v93 = v92 >> 1;
        v94 = v92 & 1 | (2 * v87);
        v88 = v93 + 2 * (_DWORD)v88;
        v89 -= 2;
        v87 = v94;
      }
      while (!__CFADD__(v90++, 1));
      v96 = v94 | (v88 << 32);
    }
    else
    {
      v96 = 0;
    }
    v97 = v506 * (double)(int)v96;
    v528 = v97;
    v98 = v506 * (double)SHIDWORD(v96);
    v99 = v506 * (double)((int)v96 + 1);
    v524 = v99;
    v100 = v506 * (double)(HIDWORD(v96) + 1);
    v101 = *(_QWORD **)(v86 + 184);
    v539 = v101;
    v102 = *(_DWORD *)(v86 + 192);
    LODWORD(v540) = v102;
    v521 = v100;
    v522 = v98;
LABEL_106:
    if (v101 != *(_QWORD **)(v86 + 200) || v102 != *(_DWORD *)(v86 + 208))
    {
      v103 = *v101;
      v105 = *v101 + 80 * v102 + 16;
      v104 = *(float **)v105;
      v106 = *(_QWORD *)(v105 + 8) - *(_QWORD *)v105;
      if ((unint64_t)v106 < 0x10)
        goto LABEL_271;
      v109 = v104
          && ((v107 = v104[1], v107 > v98) ? (v108 = v107 < v100) : (v108 = 0), v108)
          && *v104 < v524
          && *v104 > v528;
      v110 = 0;
      v111 = v106 >> 3;
      v112 = v103 + 80 * v102;
      if (*(_QWORD *)(v112 + 40) == *(_QWORD *)(v112 + 48))
        v113 = 0;
      else
        v113 = *(_QWORD *)(v112 + 40);
      v523 = v106 >> 3;
      v114 = 1;
      while (1)
      {
        v117 = v113 ? *(float *)(v113 + 4 * v110) : -3.4028e38;
        v118 = &v104[2 * v110];
        v119 = *(unsigned int *)v118;
        v120 = *((unsigned int *)v118 + 1);
        v121 = *v118;
        v122 = v118[1];
        if (v122 > v98 && v122 < v100)
        {
          v124 = v121 < v524 && v121 > v528;
          if (!v110)
          {
LABEL_139:
            v115 = *(float *)&v85;
            v116 = *(float *)&v84;
            goto LABEL_140;
          }
        }
        else
        {
          v124 = 0;
          if (!v110)
            goto LABEL_139;
        }
        if (v113)
          v125 = *(float *)(v113 - 4 + 4 * v110);
        else
          v125 = -3.4028e38;
        v127 = *((unsigned int *)v118 - 2);
        v126 = *((unsigned int *)v118 - 1);
        if ((v119 | (v120 << 32)) == (v127 | (v126 << 32)))
        {
          v115 = *(float *)&v85;
          v116 = *(float *)&v84;
          goto LABEL_123;
        }
        v128 = *(float *)&v127;
        v129 = *(float *)&v126;
        v130 = v121 - *(float *)&v127;
        v131 = v122 - *(float *)&v126;
        v132 = 1.0 / sqrtf((float)(v130 * v130) + (float)(v131 * v131));
        v115 = v132 * (float)(v121 - *(float *)&v127);
        v116 = v132 * (float)(v122 - *(float *)&v126);
        if (!v109)
          break;
        if ((v114 & 1) != 0)
        {
          *(float *)&v84 = v132 * (float)(v122 - *(float *)&v126);
          *(float *)&v85 = v132 * (float)(v121 - *(float *)&v127);
        }
        if ((float)((float)((float)(*(float *)&v85 + v115) * (float)(*(float *)&v85 + v115))
                   + (float)((float)(*(float *)&v84 + v116) * (float)(*(float *)&v84 + v116))) < 2.0)
        {
          v517 = v132 * (float)(v122 - *(float *)&v126);
          v519 = v132 * (float)(v121 - *(float *)&v127);
          v133 = v125;
          v134 = *(float *)&v127;
          v135 = v117;
          altitude::FlyoverTrafficTile::append((void **)v71, (uint64_t)&v539, (uint64_t **)&__p, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v516 + 72) - *(_QWORD *)(v516 + 64)) >> 3));
          v137 = *(_QWORD *)(v71 + 32);
          v136 = *(_QWORD *)(v71 + 40);
          v100 = v521;
          v98 = v522;
          v111 = v523;
          v117 = v135;
          v128 = v134;
          v116 = v517;
          v115 = v519;
          v125 = v133;
          if (v137 != v136)
          {
            v138 = (__int128 *)(v136 - 24);
            v139 = *(_QWORD *)(v71 + 48);
            if (v136 >= v139)
            {
              v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v136 - v137) >> 3) + 1;
              if (v141 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_505;
              v142 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v139 - v137) >> 3);
              if (2 * v142 > v141)
                v141 = 2 * v142;
              if (v142 >= 0x555555555555555)
                v143 = 0xAAAAAAAAAAAAAAALL;
              else
                v143 = v141;
              if (v143)
              {
                if (v143 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_506;
                v144 = (char *)operator new(24 * v143);
                v117 = v135;
                v128 = v134;
                v125 = v133;
              }
              else
              {
                v144 = 0;
              }
              v145 = *v138;
              v146 = &v144[8 * ((uint64_t)(v136 - v137) >> 3)];
              *((_QWORD *)v146 + 2) = *(_QWORD *)(v136 - 8);
              *(_OWORD *)v146 = v145;
              v147 = v146;
              do
              {
                v148 = *(_OWORD *)(v136 - 24);
                *((_QWORD *)v147 - 1) = *(_QWORD *)(v136 - 8);
                *(_OWORD *)(v147 - 24) = v148;
                v147 -= 24;
                v136 -= 24;
              }
              while (v136 != v137);
              v149 = &v144[24 * v143];
              v150 = *(void **)(v71 + 32);
              v140 = v146 + 24;
              *(_QWORD *)(v71 + 32) = v147;
              *(_QWORD *)(v71 + 40) = v146 + 24;
              *(_QWORD *)(v71 + 48) = v149;
              if (v150)
              {
                operator delete(v150);
                v125 = v133;
                v128 = v134;
                v117 = v135;
              }
              v100 = v521;
              v98 = v522;
              v111 = v523;
              v116 = v517;
              v115 = v519;
            }
            else
            {
              *(_OWORD *)v136 = *v138;
              *(_QWORD *)(v136 + 16) = *(_QWORD *)(v136 - 8);
              v140 = (char *)(v136 + 24);
            }
            *(_QWORD *)(v71 + 40) = v140;
          }
        }
        if (!v124)
          break;
        v114 = 0;
LABEL_170:
        v151 = v121;
        v152 = v122;
        v153 = v117;
        v155 = *(double **)(v71 + 40);
        v154 = *(_QWORD *)(v71 + 48);
        if ((unint64_t)v155 >= v154)
        {
          v158 = *(double **)(v71 + 32);
          v159 = 0xAAAAAAAAAAAAAAABLL * (v155 - v158) + 1;
          if (v159 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_505;
          v160 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v154 - (_QWORD)v158) >> 3);
          if (2 * v160 > v159)
            v159 = 2 * v160;
          if (v160 >= 0x555555555555555)
            v161 = 0xAAAAAAAAAAAAAAALL;
          else
            v161 = v159;
          if (v161)
          {
            if (v161 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_506;
            v162 = v116;
            v163 = v115;
            v164 = (char *)operator new(24 * v161);
          }
          else
          {
            v162 = v116;
            v163 = v115;
            v164 = 0;
          }
          v169 = (double *)&v164[8 * (v155 - v158)];
          *v169 = v151;
          v169[1] = v152;
          v169[2] = v153;
          v170 = v169;
          if (v155 != v158)
          {
            do
            {
              v171 = *(_OWORD *)(v155 - 3);
              *(v170 - 1) = *(v155 - 1);
              *(_OWORD *)(v170 - 3) = v171;
              v170 -= 3;
              v155 -= 3;
            }
            while (v155 != v158);
            v155 = *(double **)(v71 + 32);
          }
          v172 = &v164[24 * v161];
          v156 = v169 + 3;
          *(_QWORD *)(v71 + 32) = v170;
          *(_QWORD *)(v71 + 40) = v169 + 3;
          *(_QWORD *)(v71 + 48) = v172;
          if (v155)
            operator delete(v155);
          v100 = v521;
          v98 = v522;
          v111 = v523;
          v115 = v163;
          v116 = v162;
        }
        else
        {
          *v155 = v151;
          v155[1] = v152;
          v156 = v155 + 3;
          v155[2] = v153;
        }
        *(_QWORD *)(v71 + 40) = v156;
        v109 = 1;
LABEL_123:
        if (++v110 == v111)
        {
          if (v124)
          {
            v232 = v115;
            v233 = v116;
            altitude::FlyoverTrafficTile::append((void **)v71, (uint64_t)&v539, (uint64_t **)&__p, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v516 + 72) - *(_QWORD *)(v516 + 64)) >> 3));
            v100 = v521;
            v98 = v522;
            *(float *)&v85 = v232;
            *(float *)&v84 = v233;
            v86 = v515;
          }
          else
          {
LABEL_270:
            *(float *)&v85 = v115;
            *(float *)&v84 = v116;
            v86 = v515;
          }
LABEL_271:
          LODWORD(v540) = (_DWORD)v540 + 1;
          v102 = v540;
          v101 = v539;
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v101[1] - *v101) >> 4) == v540)
          {
            v102 = 0;
            v101 = 0;
            LODWORD(v540) = 0;
            v539 = 0;
          }
          goto LABEL_106;
        }
LABEL_124:
        v104 = *(float **)(*v539 + 80 * v540 + 16);
        *(float *)&v84 = v116;
        *(float *)&v85 = v115;
      }
      v114 = 0;
      if (fabsf(v131) >= 0.00000001)
      {
        v165 = (float)(1.0 / v131) * (float)(v98 - v129);
        v166 = (float)(1.0 / v131) * (float)(v100 - v129);
        v167 = fminf(v165, v166);
        if (v167 <= 1.0)
        {
          v168 = fmaxf(v165, v166);
          if (v168 >= 0.0)
          {
            v157 = fmaxf(v167, 0.0);
            if (v168 >= 1.0)
LABEL_188:
              v168 = 1.0;
            if (fabsf(v130) >= 0.00000001)
            {
              v173 = (float)(1.0 / v130) * (float)(v528 - v128);
              v174 = (float)(1.0 / v130) * (float)(v524 - v128);
              v175 = fmaxf(v173, v174);
              v176 = fminf(v173, v174);
              if (v176 > v168 || v175 < v157)
              {
                v114 = 0;
                goto LABEL_140;
              }
              v157 = fmaxf(v176, v157);
              if (v175 < v168)
                v168 = v175;
            }
            else
            {
              v114 = 0;
              if (v128 < v528 || v128 > v524)
                goto LABEL_140;
            }
            v178 = v128 + (float)(v157 * v130);
            v179 = v129 + (float)(v157 * v131);
            if (v124)
            {
              v180 = v178;
              v181 = v179;
              v182 = (float)(v157 * v117) + (1.0 - v157) * v125;
              v184 = *(double **)(v71 + 40);
              v183 = *(_QWORD *)(v71 + 48);
              if ((unint64_t)v184 >= v183)
              {
                v189 = *(double **)(v71 + 32);
                v190 = 0xAAAAAAAAAAAAAAABLL * (v184 - v189) + 1;
                if (v190 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_505;
                v191 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v183 - (_QWORD)v189) >> 3);
                if (2 * v191 > v190)
                  v190 = 2 * v191;
                if (v191 >= 0x555555555555555)
                  v192 = 0xAAAAAAAAAAAAAAALL;
                else
                  v192 = v190;
                if (v192)
                {
                  if (v192 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_506;
                  v193 = v116;
                  v194 = v115;
                  v195 = v117;
                  v196 = (char *)operator new(24 * v192);
                  v117 = v195;
                }
                else
                {
                  v193 = v116;
                  v194 = v115;
                  v196 = 0;
                }
                v207 = (double *)&v196[8 * (v184 - v189)];
                *v207 = v180;
                v207[1] = v181;
                v207[2] = v182;
                v208 = v207;
                if (v184 != v189)
                {
                  do
                  {
                    v209 = *(_OWORD *)(v184 - 3);
                    *(v208 - 1) = *(v184 - 1);
                    *(_OWORD *)(v208 - 3) = v209;
                    v208 -= 3;
                    v184 -= 3;
                  }
                  while (v184 != v189);
                  v184 = *(double **)(v71 + 32);
                }
                v185 = v207 + 3;
                *(_QWORD *)(v71 + 32) = v208;
                *(_QWORD *)(v71 + 40) = v207 + 3;
                *(_QWORD *)(v71 + 48) = &v196[24 * v192];
                if (v184)
                {
                  v210 = v117;
                  operator delete(v184);
                  v117 = v210;
                }
                v100 = v521;
                v98 = v522;
                v111 = v523;
                v115 = v194;
                v116 = v193;
              }
              else
              {
                *v184 = v180;
                v184[1] = v181;
                v185 = v184 + 3;
                v184[2] = v182;
              }
              v114 = 0;
              *(_QWORD *)(v71 + 40) = v185;
            }
            else
            {
              v187 = *(double **)(v71 + 40);
              v186 = *(_QWORD *)(v71 + 48);
              if (v109)
              {
                v188 = v125;
              }
              else
              {
                v197 = v178;
                v198 = v179;
                v188 = v125;
                v199 = (float)(v157 * v117) + (1.0 - v157) * v125;
                if ((unint64_t)v187 >= v186)
                {
                  v201 = *(double **)(v71 + 32);
                  v202 = 0xAAAAAAAAAAAAAAABLL * (v187 - v201) + 1;
                  if (v202 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_505;
                  v513 = v125;
                  v203 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v186 - (_QWORD)v201) >> 3);
                  if (2 * v203 > v202)
                    v202 = 2 * v203;
                  if (v203 >= 0x555555555555555)
                    v204 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v204 = v202;
                  v514 = v117;
                  v518 = v116;
                  v520 = v115;
                  if (v204)
                  {
                    v511 = v199;
                    v512 = v178;
                    if (v204 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_506;
                    v205 = v128;
                    v206 = (char *)operator new(24 * v204);
                    v117 = v514;
                    v128 = v205;
                    v199 = v511;
                    v197 = v512;
                  }
                  else
                  {
                    v206 = 0;
                  }
                  v211 = (double *)&v206[8 * (v187 - v201)];
                  *v211 = v197;
                  v211[1] = v198;
                  v211[2] = v199;
                  v212 = v211;
                  if (v187 != v201)
                  {
                    do
                    {
                      v213 = *(_OWORD *)(v187 - 3);
                      *(v212 - 1) = *(v187 - 1);
                      *(_OWORD *)(v212 - 3) = v213;
                      v212 -= 3;
                      v187 -= 3;
                    }
                    while (v187 != v201);
                    v187 = *(double **)(v71 + 32);
                  }
                  v200 = v211 + 3;
                  *(_QWORD *)(v71 + 32) = v212;
                  *(_QWORD *)(v71 + 40) = v211 + 3;
                  *(_QWORD *)(v71 + 48) = &v206[24 * v204];
                  if (v187)
                  {
                    v214 = v128;
                    operator delete(v187);
                    v128 = v214;
                    v117 = v514;
                  }
                  v116 = v518;
                  v115 = v520;
                  v188 = v513;
                }
                else
                {
                  *v187 = v197;
                  v187[1] = v198;
                  v200 = v187 + 3;
                  v187[2] = v199;
                }
                *(_QWORD *)(v71 + 40) = v200;
                v186 = *(_QWORD *)(v71 + 48);
                v187 = v200;
              }
              v215 = v129 + (float)(v168 * v131);
              v216 = (float)(v128 + (float)(v168 * v130));
              v217 = v215;
              v218 = (float)(v168 * v117) + (1.0 - v168) * v188;
              if ((unint64_t)v187 >= v186)
              {
                v223 = *(double **)(v71 + 32);
                v224 = 0xAAAAAAAAAAAAAAABLL * (v187 - v223) + 1;
                if (v224 > 0xAAAAAAAAAAAAAAALL)
LABEL_505:
                  abort();
                v225 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v186 - (_QWORD)v223) >> 3);
                if (2 * v225 > v224)
                  v224 = 2 * v225;
                if (v225 >= 0x555555555555555)
                  v226 = 0xAAAAAAAAAAAAAAALL;
                else
                  v226 = v224;
                if (v226)
                {
                  if (v226 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_506;
                  v219 = v116;
                  v220 = v115;
                  v227 = v117;
                  v228 = (char *)operator new(24 * v226);
                  v117 = v227;
                }
                else
                {
                  v219 = v116;
                  v220 = v115;
                  v228 = 0;
                }
                v229 = (double *)&v228[8 * (v187 - v223)];
                *v229 = v216;
                v229[1] = v217;
                v229[2] = v218;
                v230 = v229;
                if (v187 != v223)
                {
                  do
                  {
                    v231 = *(_OWORD *)(v187 - 3);
                    *(v230 - 1) = *(v187 - 1);
                    *(_OWORD *)(v230 - 3) = v231;
                    v230 -= 3;
                    v187 -= 3;
                  }
                  while (v187 != v223);
                  v187 = *(double **)(v71 + 32);
                }
                v221 = v117;
                v222 = v229 + 3;
                *(_QWORD *)(v71 + 32) = v230;
                *(_QWORD *)(v71 + 40) = v229 + 3;
                *(_QWORD *)(v71 + 48) = &v228[24 * v226];
                if (v187)
                  operator delete(v187);
              }
              else
              {
                v219 = v116;
                v220 = v115;
                v221 = v117;
                *v187 = v216;
                v187[1] = v217;
                v222 = v187 + 3;
                v187[2] = v218;
              }
              *(_QWORD *)(v71 + 40) = v222;
              altitude::FlyoverTrafficTile::append((void **)v71, (uint64_t)&v539, (uint64_t **)&__p, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v516 + 72) - *(_QWORD *)(v516 + 64)) >> 3));
              v114 = 0;
              v100 = v521;
              v98 = v522;
              v111 = v523;
              v117 = v221;
              v115 = v220;
              v116 = v219;
            }
          }
        }
      }
      else if (v129 >= v98 && v129 <= v100)
      {
        v157 = 0.0;
        goto LABEL_188;
      }
LABEL_140:
      if (!v124)
      {
        if (++v110 == v111)
          goto LABEL_270;
        v109 = 0;
        goto LABEL_124;
      }
      goto LABEL_170;
    }
    ++v510;
    v71 += 72;
    if (v71 != v508)
      continue;
    break;
  }
  v234 = (char *)__p;
  v235 = v530;
  if (__p != v530)
  {
    v236 = *(_QWORD *)(v516 + 64);
    do
    {
      v237 = *(_QWORD *)(*(_QWORD *)v234 + 248);
      v238 = *(_QWORD *)(*(_QWORD *)v234 + 256);
      v239 = v238 - v237;
      if (v238 != v237)
      {
        v240 = 0;
        v241 = v239 >> 3;
        do
        {
          v242 = *(_QWORD *)(v237 + 8 * v240);
          v243 = *(uint64_t **)(v242 + 176);
          v244 = *(uint64_t **)(v242 + 184);
          if (v243 != v244)
          {
            v245 = *(_QWORD *)(v236 + 72 * v240 + 32);
            do
            {
              v246 = *v243++;
              *(_QWORD *)(v246 + 56) = v245 + 24 * *(_QWORD *)(v246 + 56);
            }
            while (v243 != v244);
          }
          ++v240;
        }
        while (v240 != v241);
      }
      v234 += 8;
    }
    while (v234 != v235);
  }
LABEL_283:
  v247 = operator new();
  md::FlyoverTrafficLayer::FlyoverTrafficLayer(v247, (uint64_t)&__p);
  v248 = v516;
  v249 = *(_QWORD *)(v516 + 88);
  *(_QWORD *)(v516 + 88) = v247;
  if (v249)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
    v247 = *(_QWORD *)(v516 + 88);
  }
  *(_QWORD *)(v247 + 56) = v509[8];
  v250 = *(_QWORD *)(v516 + 88);
  v251 = *(uint64_t **)(v250 + 8);
  v252 = *(uint64_t **)(v250 + 16);
  if (v251 == v252)
    goto LABEL_384;
  do
  {
    v253 = *v251;
    if (*(_QWORD *)(*v251 + 48))
      goto LABEL_287;
    v255 = v509[10];
    v254 = (std::__shared_weak_count *)v509[11];
    if (v254)
    {
      v256 = (unint64_t *)&v254->__shared_owners_;
      do
        v257 = __ldxr(v256);
      while (__stxr(v257 + 1, v256));
    }
    v258 = (std::__shared_weak_count *)v509[15];
    v539 = (_QWORD *)v509[14];
    v540 = v258;
    if (v258)
    {
      v259 = (unint64_t *)&v258->__shared_owners_;
      do
        v260 = __ldxr(v259);
      while (__stxr(v260 + 1, v259));
    }
    v261 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v261->__shared_owners_ = 0;
    v261->__shared_weak_owners_ = 0;
    v261->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1558;
    v262 = ggl::BufferData::BufferData((uint64_t)&v261[1], qword_1EE560AC0, 2, 1, 6, 1);
    v261[9].__shared_owners_ = (uint64_t)ggl::FlyoverTraffic::Displacement::reflection(void)::reflection;
    v261[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8FD0;
    v537 = v262;
    v538 = v261;
    v263 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v263->__shared_owners_ = 0;
    v263->__shared_weak_owners_ = 0;
    v263->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E15C8;
    v264 = ggl::BufferData::BufferData((uint64_t)&v263[1], qword_1EE560B00, 2, 1, 6, 1);
    v263[9].__shared_owners_ = (uint64_t)ggl::FlyoverTraffic::Pattern::reflection(void)::reflection;
    v263[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9030;
    v535 = v264;
    v536 = v263;
    v265 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v265->__shared_owners_ = 0;
    v265->__shared_weak_owners_ = 0;
    v265->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1590;
    v266 = ggl::BufferData::BufferData((uint64_t)&v265[1], qword_1EE560B80, 2, 1, 6, 1);
    v265[9].__shared_owners_ = (uint64_t)ggl::FlyoverTraffic::Style::reflection(void)::reflection;
    v265[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8FF0;
    v533 = v266;
    v534 = v265;
    v267 = (std::__shared_weak_count *)v509[17];
    v532[0] = v509[16];
    v532[1] = (uint64_t)v267;
    if (v267)
    {
      v268 = (unint64_t *)&v267->__shared_owners_;
      do
        v269 = __ldxr(v268);
      while (__stxr(v269 + 1, v268));
    }
    v270 = (_QWORD *)operator new();
    *(_QWORD *)(v253 + 48) = ggl::FlyoverTraffic::DefaultPipelineSetup::DefaultPipelineSetup(v270, v255, v254, (uint64_t *)&v539, &v537, &v535, &v533, v532);
    if (!v267)
      goto LABEL_302;
    v271 = (unint64_t *)&v267->__shared_owners_;
    do
      v272 = __ldaxr(v271);
    while (__stlxr(v272 - 1, v271));
    if (!v272)
    {
      ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
      std::__shared_weak_count::__release_weak(v267);
      v273 = v534;
      if (!v534)
        goto LABEL_308;
    }
    else
    {
LABEL_302:
      v273 = v534;
      if (!v534)
        goto LABEL_308;
    }
    v274 = (unint64_t *)&v273->__shared_owners_;
    do
      v275 = __ldaxr(v274);
    while (__stlxr(v275 - 1, v274));
    if (!v275)
    {
      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
      std::__shared_weak_count::__release_weak(v273);
    }
LABEL_308:
    v276 = v536;
    if (!v536)
      goto LABEL_312;
    v277 = (unint64_t *)&v536->__shared_owners_;
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
      v279 = v538;
      if (!v538)
        goto LABEL_318;
    }
    else
    {
LABEL_312:
      v279 = v538;
      if (!v538)
        goto LABEL_318;
    }
    v280 = (unint64_t *)&v279->__shared_owners_;
    do
      v281 = __ldaxr(v280);
    while (__stlxr(v281 - 1, v280));
    if (!v281)
    {
      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
      std::__shared_weak_count::__release_weak(v279);
    }
LABEL_318:
    v282 = v540;
    if (!v540)
      goto LABEL_322;
    v283 = (unint64_t *)&v540->__shared_owners_;
    do
      v284 = __ldaxr(v283);
    while (__stlxr(v284 - 1, v283));
    if (!v284)
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
      if (!v254)
        goto LABEL_287;
    }
    else
    {
LABEL_322:
      if (!v254)
        goto LABEL_287;
    }
    v285 = (unint64_t *)&v254->__shared_owners_;
    do
      v286 = __ldaxr(v285);
    while (__stlxr(v286 - 1, v285));
    if (!v286)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
    }
LABEL_287:
    ++v251;
  }
  while (v251 != v252);
  v248 = v516;
  v287 = *(_QWORD *)(v516 + 88);
  v288 = *(_QWORD *)(v287 + 8);
  v289 = *(_QWORD *)(v287 + 16);
  if (v288 == v289)
    goto LABEL_384;
  v290 = v288;
  do
  {
    v291 = *(_QWORD *)(*(_QWORD *)v290 + 248);
    v292 = *(_QWORD *)(*(_QWORD *)v290 + 256);
    v293 = v291;
    for (i = v291; i != v292; i += 8)
    {
      v295 = *(uint64_t **)(*(_QWORD *)i + 176);
      v296 = *(uint64_t **)(*(_QWORD *)i + 184);
      if (v295 != v296)
      {
        v297 = v293 == v292;
        v293 = v292;
        if (!v297)
        {
          do
          {
            v298 = *(_QWORD *)(*v295 + 48) - 1;
            v299 = 1.79769313e308;
            v300 = v291;
            do
            {
              v301 = *(uint64_t **)(*(_QWORD *)v300 + 176);
              v302 = *(uint64_t **)(*(_QWORD *)v300 + 184);
              while (v301 != v302)
              {
                v304 = *v295;
                v305 = *v301;
                if (*v295 != *v301)
                {
                  v306 = *(_QWORD *)(v304 + 56) + 24 * v298;
                  v307 = *(_QWORD *)(v305 + 56);
                  v308 = vsubq_f64(*(float64x2_t *)(v306 + 8), *(float64x2_t *)(v307 + 8));
                  v309 = vmulq_f64(v308, v308);
                  v303 = v309.f64[0]
                       + (*(double *)v306 - *(double *)v307) * (*(double *)v306 - *(double *)v307)
                       + v309.f64[1];
                  v310 = v303 < 0.000025 && v303 < v299;
                  if (v310 && v303 < *(double *)(v305 + 96))
                  {
                    v311 = *v301;
                    while (v311 != v304)
                    {
                      v311 = *(_QWORD *)(v311 + 104);
                      if (!v311)
                      {
                        *(double *)(v305 + 96) = v303;
                        v312 = *(_QWORD *)(v304 + 104);
                        if (v312)
                        {
                          *(_QWORD *)(v312 + 96) = 0x7FEFFFFFFFFFFFFFLL;
                          *(_QWORD *)(v312 + 112) = 0;
                        }
                        v313 = *(_QWORD *)(v305 + 112);
                        if (v313)
                        {
                          *(_QWORD *)(v313 + 96) = 0x7FEFFFFFFFFFFFFFLL;
                          *(_QWORD *)(v313 + 104) = 0;
                        }
                        *(_QWORD *)(v304 + 104) = v305;
                        *(_QWORD *)(v305 + 112) = v304;
                        goto LABEL_345;
                      }
                    }
                  }
                }
                v303 = v299;
LABEL_345:
                ++v301;
                v299 = v303;
              }
              v300 += 8;
            }
            while (v300 != v292);
            ++v295;
          }
          while (v295 != v296);
          v293 = v291;
        }
      }
    }
    v290 += 8;
  }
  while (v290 != v289);
  while (2)
  {
    v314 = *(_QWORD *)(*(_QWORD *)v288 + 248);
    v315 = *(_QWORD *)(*(_QWORD *)v288 + 256);
LABEL_366:
    if (v314 != v315)
    {
      v316 = *(uint64_t **)(*(_QWORD *)v314 + 176);
      v317 = *(uint64_t **)(*(_QWORD *)v314 + 184);
      while (1)
      {
        if (v316 == v317)
        {
          v314 += 8;
          goto LABEL_366;
        }
        v318 = *v316;
        if (*(_QWORD *)(*v316 + 112)
          || (v319 = *(double **)(v318 + 56), *v319 >= 0.005)
          && *v319 <= 0.995
          && (v320 = v319[1], v320 >= 0.005)
          && v320 <= 0.995)
        {
          if (*(_QWORD *)(v318 + 104))
            goto LABEL_369;
        }
        else
        {
          *(_DWORD *)(v318 + 120) |= 1u;
          if (*(_QWORD *)(v318 + 104))
            goto LABEL_369;
        }
        v321 = *(_QWORD *)(v318 + 56) + 24 * *(_QWORD *)(v318 + 48);
        v322 = *(double *)(v321 - 24);
        if (v322 < 0.005 || v322 > 0.995 || (v323 = *(double *)(v321 - 16), v323 < 0.005) || v323 > 0.995)
          *(_DWORD *)(v318 + 120) |= 2u;
LABEL_369:
        ++v316;
      }
    }
    v288 += 8;
    if (v288 != v289)
      continue;
    break;
  }
LABEL_384:
  v324 = *(_DWORD *)(v248 + 120);
  v325 = 6.28318531 / (double)(1 << v324);
  v326 = v325 * ((double)*(int *)(v248 + 112) + 0.5);
  v327 = exp(((double)((-1 << v324) + *(_DWORD *)(v248 + 116) + (1 << v324)) + 0.5) * v325 + -3.14159265);
  v328 = atan(v327) * 2.0 + -1.57079633;
  v329 = fmod(v326, 6.28318531);
  v330 = fmod(v329 + 6.28318531, 6.28318531) + -3.14159265;
  v331 = __sincos_stret(v328);
  v332 = 6378137.0 / sqrt(v331.__sinval * v331.__sinval * -0.00669437999 + 1.0);
  v333 = __sincos_stret(v330);
  v334 = v332 * v331.__cosval * v333.__cosval;
  *(double *)(v248 + 136) = v334;
  *(double *)(v248 + 144) = v332 * v331.__cosval * v333.__sinval;
  *(double *)(v248 + 152) = v331.__sinval * 0.99330562 * v332;
  v335 = *(_QWORD *)(v248 + 88);
  *(double *)(v335 + 208) = v334;
  *(_QWORD *)(v335 + 216) = *(_QWORD *)(v248 + 144);
  *(_QWORD *)(v335 + 224) = *(_QWORD *)(v248 + 152);
  if (__p)
    operator delete(__p);
  v336 = v248;
  *((_QWORD *)&v337 + 1) = v499;
  v526 = v337;
  *(_QWORD *)&v337 = v248;
  v338 = v499 + 2;
  do
    v339 = __ldxr(v338);
  while (__stxr(v339 + 1, v338));
  v341 = (char *)v503[4];
  v340 = v503[5];
  if ((unint64_t)v341 < v340)
  {
    *(_DWORD *)v341 = v500;
    v342 = v341 + 24;
    *((_QWORD *)v341 + 1) = v516;
    *((_QWORD *)v341 + 2) = v499;
    goto LABEL_407;
  }
  v343 = (_BYTE *)v503[3];
  v344 = 0xAAAAAAAAAAAAAAABLL * ((v341 - v343) >> 3) + 1;
  if (v344 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v525 = v337;
  v345 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v340 - (_QWORD)v343) >> 3);
  if (2 * v345 > v344)
    v344 = 2 * v345;
  if (v345 >= 0x555555555555555)
    v346 = 0xAAAAAAAAAAAAAAALL;
  else
    v346 = v344;
  if (v346 > 0xAAAAAAAAAAAAAAALL)
LABEL_506:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v347 = 24 * v346;
  v348 = (char *)operator new(24 * v346);
  v349 = &v348[8 * ((v341 - v343) >> 3)];
  v350 = &v348[v347];
  *(_DWORD *)v349 = v500;
  *(_OWORD *)(v349 + 8) = v525;
  v342 = v349 + 24;
  if (v341 == v343)
  {
    v503[3] = (uint64_t)v349;
    v503[4] = (uint64_t)v342;
    v503[5] = (uint64_t)v350;
  }
  else
  {
    do
    {
      v351 = *((_DWORD *)v341 - 6);
      v341 -= 24;
      *((_DWORD *)v349 - 6) = v351;
      v349 -= 24;
      *(_OWORD *)(v349 + 8) = *(_OWORD *)(v341 + 8);
      *((_QWORD *)v341 + 1) = 0;
      *((_QWORD *)v341 + 2) = 0;
    }
    while (v341 != v343);
    v341 = (char *)v503[3];
    v352 = (char *)v503[4];
    v503[3] = (uint64_t)v349;
    v503[4] = (uint64_t)v342;
    v503[5] = (uint64_t)v350;
    while (v352 != v341)
    {
      v353 = (std::__shared_weak_count *)*((_QWORD *)v352 - 1);
      if (v353)
        std::__shared_weak_count::__release_weak(v353);
      v352 -= 24;
    }
  }
  if (v341)
    operator delete(v341);
LABEL_407:
  v12 = v503;
  v503[4] = (uint64_t)v342;
LABEL_408:
  pthread_mutex_unlock((pthread_mutex_t *)v12[2]);
  v354 = v501;
  v355 = *(std::__shared_weak_count **)(v501 + 48);
  *(_OWORD *)(v501 + 40) = v526;
  if (v355)
  {
    v356 = (unint64_t *)&v355->__shared_owners_;
    do
      v357 = __ldaxr(v356);
    while (__stlxr(v357 - 1, v356));
    if (!v357)
    {
      ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
      std::__shared_weak_count::__release_weak(v355);
      v354 = v501;
    }
  }
  v358 = *(_QWORD *)(v354 + 40);
  v359 = *(_DWORD *)(v354 + 32);
  v360 = *(_DWORD *)(v358 + 120);
  v361 = v359 - v360;
  if (v359 == v360)
  {
    v362 = 0;
    v368 = 0;
    v367 = *(_QWORD *)(v358 + 64);
  }
  else
  {
    v362 = 0;
    v363 = *(_DWORD *)(v354 + 28) - (*(_DWORD *)(v358 + 116) << v361);
    v364 = *(_DWORD *)(v354 + 24) - (*(_DWORD *)(v358 + 112) << v361);
    v365 = ~v360 + v359;
    v366 = 2 * v365;
    do
    {
      v362 += (v364 >> v365 << v366) + (2 << v366) * (v363 >> v365);
      v364 -= v364 >> v365 << v365;
      v363 -= v363 >> v365 << v365;
      --v365;
      v366 -= 2;
    }
    while (v365 != -1);
    v367 = *(_QWORD *)(v358 + 64);
    v368 = 0;
    if (v361)
    {
      v369 = *(_DWORD *)(v358 + 112);
      v370 = *(_DWORD *)(v354 + 28) - (*(_DWORD *)(v358 + 116) << v361);
      v371 = *(_DWORD *)(v354 + 24) - (v369 << v361);
      v372 = ~v360 + v359;
      v373 = 2 * v372;
      do
      {
        v368 += (v371 >> v372 << v373) + (2 << v373) * (v370 >> v372);
        v371 -= v371 >> v372 << v372;
        v370 -= v370 >> v372 << v372;
        --v372;
        v373 -= 2;
      }
      while (v372 != -1);
    }
  }
  v374 = v367 + 72 * v362;
  v376 = *(unsigned __int8 *)(v374 + 24);
  v375 = (_BYTE *)(v374 + 24);
  if (v376)
    return;
  *v375 = 1;
  v377 = operator new();
  v378 = v501;
  v379 = v377;
  v380 = *(uint64_t **)(v501 + 56);
  v381 = *v380;
  LODWORD(v380) = *((_DWORD *)v380 + 2);
  *(_QWORD *)v377 = off_1E42C4D10;
  *(_QWORD *)(v377 + 8) = v381;
  *(_DWORD *)(v377 + 16) = (_DWORD)v380;
  *(_OWORD *)(v377 + 24) = 0u;
  *(_OWORD *)(v377 + 40) = 0u;
  *(_QWORD *)(v377 + 88) = 0;
  *(_WORD *)(v377 + 96) = 257;
  v382 = *(_QWORD *)(v501 + 80);
  v383 = *(_QWORD *)(v501 + 88);
  if (v383)
  {
    v384 = (unint64_t *)(v383 + 8);
    do
      v385 = __ldxr(v384);
    while (__stxr(v385 + 1, v384));
    v386 = *(std::__shared_weak_count **)(v377 + 48);
    *(_QWORD *)(v377 + 40) = v382;
    *(_QWORD *)(v377 + 48) = v383;
    if (v386)
    {
      v387 = (unint64_t *)&v386->__shared_owners_;
      do
        v388 = __ldaxr(v387);
      while (__stlxr(v388 - 1, v387));
      if (!v388)
      {
        ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
        std::__shared_weak_count::__release_weak(v386);
        v378 = v501;
      }
    }
  }
  else
  {
    *(_QWORD *)(v377 + 40) = v382;
    *(_QWORD *)(v377 + 48) = 0;
  }
  v389 = 1.0 / (double)(1 << *(_DWORD *)(v379 + 16));
  v390 = *(_QWORD *)(v379 + 8);
  v391.i64[0] = (int)v390;
  v391.i64[1] = SHIDWORD(v390);
  *(float64x2_t *)(v379 + 104) = vmulq_n_f64(vcvtq_f64_s64(v391), v389);
  *(double *)(v379 + 120) = v389;
  *(double *)(v379 + 128) = v389;
  *(_QWORD *)(v378 + 72) = v379;
  (*(void (**)(uint64_t, float))(*(_QWORD *)v379 + 48))(v379, 1.0);
  v392 = v367 + 72 * v362;
  v393 = *(_QWORD *)(v392 + 32);
  v394 = *(_QWORD *)(v392 + 40);
  if (v393 == v394)
  {
    v395 = 0;
    v396 = v501;
  }
  else
  {
    v395 = 0;
    v396 = v501;
    do
    {
      v397 = *(double *)(v393 + 16);
      v398 = v397;
      v395 |= v398 <= -3.40282337e38;
      (*(void (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(v501 + 72) + 16))(*(_QWORD *)(v501 + 72), v393, v398 > -3.40282337e38);
      v393 += 24;
    }
    while (v393 != v394);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v396 + 72) + 8))(*(_QWORD *)(v396 + 72)))
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v399 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v399, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_19F029000, v399, OS_LOG_TYPE_ERROR, "Failed to get height for road points", (uint8_t *)&__p, 2u);
    }

    return;
  }
  v400 = *(_QWORD *)(v396 + 40);
  if (((*(_DWORD *)(v396 + 32) > 13) & v395) == 1)
  {
    v401 = *(_QWORD *)(v400 + 88);
    v402 = *(_QWORD *)(v401 + 8);
    v403 = *(_QWORD *)(v401 + 16);
    if (v402 != v403)
    {
      v404 = *(double *)(v400 + 136);
      v405 = *(double *)(v400 + 144);
      v406 = *(double *)(v400 + 152);
      v407 = 1.0 / sqrt(v404 * v404 + v405 * v405 + v406 * v406);
      v408 = v407 * v404;
      v409 = v407 * v405;
      v410 = v407 * v406;
      do
      {
        v411 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v402 + 248) + 8 * v368);
        v412 = *(_QWORD *)(v411 + 176);
        v413 = *(_QWORD *)(v411 + 184);
        while (v412 != v413)
        {
          v415 = *(_QWORD *)(*(_QWORD *)v412 + 48);
          v414 = *(double **)(*(_QWORD *)v412 + 56);
          if (v415 >= 2)
          {
            v417 = v414[1];
            v416 = v414[2];
            v418 = v415 - 1;
            v419 = v414 + 5;
            v420 = *v414;
            do
            {
              v421 = v420;
              v422 = v417;
              v423 = v416;
              v420 = *(v419 - 2);
              v417 = *(v419 - 1);
              v416 = *v419;
              v424 = *v419 - v423;
              v425 = v408 * (v420 - v421) + v409 * (v417 - v422) + v410 * v424;
              v426 = sqrt((v420 - v421 - v425 * v408) * (v420 - v421 - v425 * v408)+ (v417 - v422 - v425 * v409) * (v417 - v422 - v425 * v409)+ (v424 - v425 * v410) * (v424 - v425 * v410));
              if (v426 >= 0.01)
              {
                v427 = v425 / v426;
                v428 = v427 <= 0.7 || v425 <= 4.0;
                if (!v428 && v427 > 0.0)
                {
                  v420 = v420 - v425 * v408;
                  v417 = v417 - v425 * v409;
                  v416 = v416 - v425 * v410;
                  *(v419 - 2) = v420;
                  *(v419 - 1) = v417;
                  *v419 = v416;
                }
              }
              v419 += 3;
              --v418;
            }
            while (v418);
          }
          if ((int)v415 >= 2)
          {
            v429 = &v414[3 * v415];
            v431 = *(v429 - 2);
            v430 = *(v429 - 1);
            v432 = *(v429 - 3);
            v433 = (v415 - 2);
            v434 = &v414[3 * v433];
            v436 = *v434;
            v435 = v434[1];
            v437 = v434[2];
            v438 = *v434 - v432;
            v439 = v408 * v438 + v409 * (v435 - v431) + v410 * (v437 - v430);
            v440 = sqrt((v438 - v439 * v408) * (v438 - v439 * v408)+ (v435 - v431 - v439 * v409) * (v435 - v431 - v439 * v409)+ (v437 - v430 - v439 * v410) * (v437 - v430 - v439 * v410));
            if (v440 >= 0.01)
            {
              v441 = v439 / v440;
              v442 = v441 <= 0.7 || v439 <= 4.0;
              if (!v442 && v441 > 0.0)
              {
                v436 = v436 - v439 * v408;
                v435 = v435 - v439 * v409;
                v437 = v437 - v439 * v410;
                *v434 = v436;
                v434[1] = v435;
                v434[2] = v437;
              }
            }
            v443 = 3 * v433;
            while (v443 * 8)
            {
              v444 = &v414[v443];
              v445 = v414[v443 - 3];
              v446 = v414[v443 - 2];
              v447 = v414[v443 - 1];
              v448 = v408 * (v445 - v436) + v409 * (v446 - v435) + v410 * (v447 - v437);
              v449 = sqrt((v445 - v436 - v448 * v408) * (v445 - v436 - v448 * v408)+ (v446 - v435 - v448 * v409) * (v446 - v435 - v448 * v409)+ (v447 - v437 - v448 * v410) * (v447 - v437 - v448 * v410));
              if (v449 >= 0.01)
              {
                v450 = v448 / v449;
                v451 = v450 <= 0.7 || v448 <= 4.0;
                if (!v451 && v450 > 0.0)
                {
                  v445 = v445 - v448 * v408;
                  v446 = v446 - v448 * v409;
                  v447 = v447 - v448 * v410;
                  *(v444 - 3) = v445;
                  *(v444 - 2) = v446;
                  *(v444 - 1) = v447;
                }
              }
              v443 -= 3;
              v437 = v447;
              v435 = v446;
              v436 = v445;
            }
          }
          v412 += 8;
        }
        v402 += 8;
      }
      while (v402 != v403);
    }
  }
  std::mutex::lock((std::mutex *)v400);
  v452 = v502;
  v453 = *(_QWORD *)(*(_QWORD *)(v501 + 40) + 88);
  v454 = *(uint64_t **)(v453 + 8);
  v455 = *(uint64_t **)(v453 + 16);
  if (v454 == v455)
    goto LABEL_502;
  v456 = *(_QWORD **)(v453 + 8);
  while (2)
  {
    v457 = *(_QWORD *)(*(_QWORD *)(*v456 + 248) + 8 * v368);
    v458 = *(_QWORD **)(v457 + 176);
    v459 = *(_QWORD **)(v457 + 184);
    if (v458 == v459)
      goto LABEL_480;
    v460 = v458;
    while (2)
    {
      v462 = *v460;
      v463 = *(_QWORD *)(*v460 + 48);
      v464 = 0.0;
      if (v463 >= 2)
      {
        v465 = *(_QWORD *)(v462 + 56);
        v466 = *(uint64_t *)v465;
        v467 = *(float64x2_t *)(v465 + 8);
        if (v463 > 4)
        {
          v469 = (v463 - 1) & 0xFFFFFFFFFFFFFFFCLL;
          v470 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v467.f64[0], 0);
          v471 = (int8x16_t)vdupq_lane_s64(v466, 0);
          v472 = (int8x16_t *)(v465 + 72);
          v473 = 0uLL;
          v474 = v469;
          v475 = 0uLL;
          do
          {
            i64 = (const double *)v472[-3].i64;
            v541 = vld3q_f64(i64);
            v478 = v472[1];
            v477 = v472[2];
            v479 = *v472;
            v472 += 6;
            v480.i64[0] = v479.i64[0];
            v481 = (float64x2_t)vextq_s8(v479, v477, 8uLL);
            v480.i64[1] = v478.i64[1];
            *(_QWORD *)&v482.f64[0] = v478.i64[0];
            *(_QWORD *)&v482.f64[1] = v477.i64[1];
            v483 = vsubq_f64(v541.val[0], (float64x2_t)vextq_s8(v471, (int8x16_t)v541.val[0], 8uLL));
            v484 = vsubq_f64((float64x2_t)v480, (float64x2_t)vextq_s8((int8x16_t)v541.val[0], v480, 8uLL));
            v485 = vsubq_f64(v541.val[1], (float64x2_t)vextq_s8(v470, (int8x16_t)v541.val[1], 8uLL));
            v486 = vsubq_f64(v481, (float64x2_t)vextq_s8((int8x16_t)v541.val[1], (int8x16_t)v481, 8uLL));
            v487 = vsubq_f64(v541.val[2], (float64x2_t)vextq_s8((int8x16_t)v467, (int8x16_t)v541.val[2], 8uLL));
            v541.val[0] = vsubq_f64(v482, (float64x2_t)vextq_s8((int8x16_t)v541.val[2], (int8x16_t)v482, 8uLL));
            v473 = vaddq_f64(vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v483, v483), v485, v485), v487, v487)), v473);
            v475 = vaddq_f64(vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v484, v484), v486, v486), v541.val[0], v541.val[0])), v475);
            v467 = v482;
            v470 = (int8x16_t)v481;
            v471 = v480;
            v474 -= 4;
          }
          while (v474);
          v464 = vaddvq_f64(vaddq_f64(v475, v473));
          if (v463 - 1 != v469)
          {
            v466 = vextq_s8(v478, v478, 8uLL).u64[0];
            v468 = v469 | 1;
            v477.i64[1] = vextq_s8(v477, v477, 8uLL).u64[0];
            v467 = (float64x2_t)v477;
            goto LABEL_491;
          }
        }
        else
        {
          v468 = 1;
LABEL_491:
          v488 = v463 - v468;
          v489 = (_OWORD *)(v465 + 24 * v468 + 8);
          do
          {
            v490 = *((double *)v489 - 1);
            v491 = *(float64x2_t *)v489;
            v489 = (_OWORD *)((char *)v489 + 24);
            v492 = vsubq_f64(v491, v467);
            v493 = vmulq_f64(v492, v492);
            v464 = sqrt(v493.f64[0] + (v490 - *(double *)&v466) * (v490 - *(double *)&v466) + v493.f64[1]) + v464;
            *(double *)&v466 = v490;
            v467 = v491;
            --v488;
          }
          while (v488);
        }
      }
      v461 = v464;
      *(float *)(v462 + 128) = v461;
      *(_BYTE *)(v462 + 84) = 1;
      if (++v460 != v459)
        continue;
      break;
    }
    do
    {
      v494 = *v458;
      do
      {
        v495 = v494;
        v494 = *(_QWORD *)(v494 + 112);
      }
      while (v494);
      v496 = 0.0;
      v497 = v495;
      do
      {
        *(float *)(v497 + 124) = v496;
        v496 = *(float *)(v497 + 128) + v496;
        v497 = *(_QWORD *)(v497 + 104);
      }
      while (v497);
      do
      {
        *(float *)(v495 + 132) = v496;
        v495 = *(_QWORD *)(v495 + 104);
      }
      while (v495);
      ++v458;
    }
    while (v458 != v459);
LABEL_480:
    if (++v456 != v455)
      continue;
    break;
  }
  do
  {
    v498 = *v454++;
    md::Ribbons::RibbonSection<md::FlyoverTrafficDrawables>::computeMesh(*(_QWORD **)(*(_QWORD *)(v498 + 248) + 8 * v368), (float64x2_t *)v453, (uint64_t)v452);
    v452 = v502;
  }
  while (v454 != v455);
LABEL_502:
  md::FlyoverTrafficLayer::rewriteBoundsAttributes(v453, v452);
  std::mutex::unlock((std::mutex *)v400);
}

void sub_19FAE6EB0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FAE6EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p)
{
  uint64_t v35;

  MEMORY[0x1A1AF4E00](v35, 0x10A1C40E260AA06);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<altitude::TrafficTilePrivate *,std::shared_ptr<altitude::TrafficTilePrivate>::__shared_ptr_default_delete<altitude::TrafficTilePrivate,altitude::TrafficTilePrivate>,std::allocator<altitude::TrafficTilePrivate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::TrafficTilePrivate *,std::shared_ptr<altitude::TrafficTilePrivate>::__shared_ptr_default_delete<altitude::TrafficTilePrivate,altitude::TrafficTilePrivate>,std::allocator<altitude::TrafficTilePrivate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

void sub_19FAE72B8(_Unwind_Exception *a1)
{
  karo::AsyncRequestManager *v1;

  std::__tree<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::__map_value_compare<karo::media::C3mmFileIndex,std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::less<karo::media::C3mmFileIndex>,true>,std::allocator<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>>>::destroy(*((_QWORD **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

void altitude::SkeletonRequestManager::disable(pthread_mutex_t **this)
{
  altitude::SkeletonRequestManager *v2;
  uint64_t **v3;
  std::__shared_weak_count *v4;
  unsigned int *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  unint64_t *v20;
  unint64_t v21;
  altitude::SkeletonRequestManager *v22;
  altitude::SkeletonRequestManager *v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;

  v28 = 0;
  v29 = 0;
  v27 = &v28;
  pthread_mutex_lock(this[5]);
  v2 = (altitude::SkeletonRequestManager *)this[8];
  if (v2 != (altitude::SkeletonRequestManager *)(this + 9))
  {
    do
    {
      v5 = (unsigned int *)*((_QWORD *)v2 + 6);
      v4 = (std::__shared_weak_count *)*((_QWORD *)v2 + 7);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
      v8 = v28;
      v9 = &v28;
      v10 = &v28;
      if (!v28)
      {
LABEL_23:
        v19 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v19 + 28) = *((_OWORD *)v5 + 13);
        *(_QWORD *)v19 = 0;
        *((_QWORD *)v19 + 1) = 0;
        *((_QWORD *)v19 + 2) = v10;
        *v9 = (uint64_t *)v19;
        if (*v27)
        {
          v27 = (uint64_t **)*v27;
          v19 = (char *)*v9;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v28, (uint64_t *)v19);
        ++v29;
        if (v4)
          goto LABEL_26;
        goto LABEL_29;
      }
      v11 = v5[52];
      v12 = v5[53];
      v13 = v5[54];
      v14 = v5[55];
      while (1)
      {
        while (1)
        {
          v10 = (uint64_t **)v8;
          v15 = *((_DWORD *)v8 + 7);
          if (v11 < v15)
            goto LABEL_10;
          if (v11 <= v15)
            break;
LABEL_13:
          v8 = v10[1];
          if (!v8)
          {
            v9 = v10 + 1;
            goto LABEL_23;
          }
        }
        v16 = *((_DWORD *)v10 + 8);
        if (v12 >= v16)
        {
          if (v12 > v16)
            goto LABEL_13;
          v17 = *((_DWORD *)v10 + 9);
          if (v13 >= v17)
          {
            if (v13 > v17)
              goto LABEL_13;
            v18 = *((_DWORD *)v10 + 10);
            if (v14 >= v18)
              break;
          }
        }
LABEL_10:
        v8 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_23;
      }
      if (v18 < v14)
        goto LABEL_13;
      if (!v4)
        goto LABEL_29;
LABEL_26:
      v20 = (unint64_t *)&v4->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (v21)
      {
LABEL_29:
        v22 = (altitude::SkeletonRequestManager *)*((_QWORD *)v2 + 1);
        if (v22)
        {
          do
          {
LABEL_30:
            v23 = v22;
            v22 = *(altitude::SkeletonRequestManager **)v22;
          }
          while (v22);
          goto LABEL_4;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
        v22 = (altitude::SkeletonRequestManager *)*((_QWORD *)v2 + 1);
        if (v22)
          goto LABEL_30;
      }
      do
      {
        v23 = (altitude::SkeletonRequestManager *)*((_QWORD *)v2 + 2);
        v24 = *(_QWORD *)v23 == (_QWORD)v2;
        v2 = v23;
      }
      while (!v24);
LABEL_4:
      v2 = v23;
    }
    while (v23 != (altitude::SkeletonRequestManager *)(this + 9));
  }
  pthread_mutex_unlock(this[5]);
  v3 = v27;
  if (v27 != &v28)
  {
    do
    {
      (*(void (**)(pthread_mutex_t **, uint64_t))&(*this)->__opaque[40])(this, (uint64_t)v3 + 28);
      v25 = v3[1];
      if (v25)
      {
        do
        {
          v26 = (uint64_t **)v25;
          v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (uint64_t **)v3[2];
          v24 = *v26 == (uint64_t *)v3;
          v3 = v26;
        }
        while (!v24);
      }
      v3 = v26;
    }
    while (v26 != &v28);
  }
  *((_BYTE *)this + 92) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v28);
}

void sub_19FAE752C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a13);
  _Unwind_Resume(a1);
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep altitude::SkeletonRequestManager::update(altitude::SkeletonRequestManager *this, int a2)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result;
  double v5;
  uint64_t v6;

  result = std::chrono::steady_clock::now().__d_.__rep_;
  v5 = (double)(result - *((_QWORD *)this + 18)) * 0.000000001;
  if (v5 > *((double *)this + 19) + 180.0)
  {
    *((double *)this + 19) = v5;
    *((_DWORD *)this + 40) = a2;
    v6 = *((_QWORD *)this + 17);
    *(_DWORD *)(v6 + 200) = a2;
    *(_DWORD *)(*(_QWORD *)(v6 + 160) + 168) = a2;
    return objc_msgSend(**(id **)(*((_QWORD *)this + 15) + 96), "purgeExpired:", 180.0);
  }
  return result;
}

void altitude::SkeletonRequestManager::setStyleManager(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  uint64_t v16;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[13];
  a1[12] = a2;
  a1[13] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    a2 = a1[12];
    a3 = a1[13];
  }
  v9 = a1[17];
  if (a3)
  {
    v10 = (unint64_t *)(a3 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *(std::__shared_weak_count **)(v9 + 192);
  *(_QWORD *)(v9 + 184) = a2;
  *(_QWORD *)(v9 + 192) = a3;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(_DWORD *)(a1[4] + 88);
  v16 = a1[17];
  *(_DWORD *)(v16 + 200) = v15;
  *(_DWORD *)(*(_QWORD *)(v16 + 160) + 168) = v15;
}

void md::RasterTileResourceDecoder::~RasterTileResourceDecoder(md::RasterTileResourceDecoder *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::RasterTileResourceDecoder::decode(const gdc::ResourceKey *a1@<X1>, const gdc::RawResourceSourceData *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  const __CFData *v11;
  CGImageSourceRef v12;
  CGImage *ImageAtIndex;
  unint64_t v14;
  unint64_t Width;
  size_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  uint64_t v19;
  vImagePixelCount v20;
  vImagePixelCount v21;
  char v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t v25;
  int16x8_t *v26;
  size_t v27;
  uint64_t *v28;
  CGContext *v29;
  CGFloat MinX;
  CGFloat MaxY;
  unint64_t v32;
  unint64_t v33;
  int16x8_t *v34;
  unint64_t v35;
  unsigned __int128 v36;
  unint64_t v37;
  __int16 *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  unint64_t *v44;
  unint64_t v45;
  vImagePixelCount v46;
  vImagePixelCount v47;
  size_t height;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  vImage_Buffer buf;
  vImage_CGImageFormat format;
  CGRect v53;
  CGRect v54;
  CGRect v55;

  if (!*((_BYTE *)a2 + 16))
    goto LABEL_13;
  v6 = *(_QWORD *)a2;
  if (!gdc::DataObject::length(*(id **)a2))
    goto LABEL_13;
  v7 = gdc::DataObject::length((id *)v6);
  v8 = *(void **)(v6 + 16);
  if (v7 == 4)
  {
    objc_msgSend(objc_retainAutorelease(v8), "bytes");
    v9 = operator new(0xC0uLL);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = &off_1E42DBDD8;
    v10 = gdc::Resource::Resource((uint64_t)(v9 + 3), (uint64_t)a1);
    v9[21] = 0;
    v9[22] = 0;
    *((_BYTE *)v9 + 184) = 1;
    *a3 = v10;
    a3[1] = (uint64_t)v9;
    return;
  }
  v11 = v8;
  v12 = CGImageSourceCreateWithData(v11, 0);

  if (!v12)
    goto LABEL_13;
  if (!CGImageSourceGetCount(v12))
  {
    CFRelease(v12);
    goto LABEL_13;
  }
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v12, 0, 0);
  CFRelease(v12);
  if (!ImageAtIndex)
  {
LABEL_13:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v14 = *((unsigned __int16 *)a1 + 1);
  Width = CGImageGetWidth(ImageAtIndex);
  v16 = CGImageGetHeight(ImageAtIndex);
  v17 = (std::__shared_weak_count *)operator new(0x60uLL);
  v17->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  height = v16;
  v49 = ggl::TextureData2D::TextureData2D((uint64_t)&v17[1], Width, v16, 1u, 24, 0);
  v50 = v17;
  v19 = ((uint64_t (*)(_QWORD *, _QWORD))v17[1].__on_zero_shared)(v49, 0);
  v20 = CGImageGetWidth(ImageAtIndex);
  v21 = CGImageGetHeight(ImageAtIndex);
  v22 = (v14 > 0x34) | (0x7FFFFFFFFFFEFuLL >> v14);
  *(_QWORD *)&format.bitsPerComponent = 0x1000000005;
  if ((v22 & 1) != 0)
  {
    if (_colorSpace(BOOL)::onceTokenSRGB != -1)
    {
      v46 = v21;
      dispatch_once(&_colorSpace(BOOL)::onceTokenSRGB, &__block_literal_global_18129);
      v21 = v46;
    }
    v23 = &_colorSpace(BOOL)::colorspaceSRGB;
  }
  else
  {
    if (_colorSpace(BOOL)::onceTokenLinear != -1)
    {
      v47 = v21;
      dispatch_once(&_colorSpace(BOOL)::onceTokenLinear, &__block_literal_global_1);
      v21 = v47;
    }
    v23 = &_colorSpace(BOOL)::colorspaceLinear;
  }
  format.colorSpace = (CGColorSpaceRef)*v23;
  format.bitmapInfo = 4096;
  memset(&format.version, 0, 20);
  buf.data = (void *)(v19 + 2 * (v21 - 1) * v20);
  buf.height = v21;
  buf.width = v20;
  buf.rowBytes = -2 * v20;
  if (!vImageBuffer_InitWithCGImage(&buf, &format, 0, ImageAtIndex, 0x200u))
    goto LABEL_38;
  v24 = (std::__shared_weak_count *)operator new(0x60uLL);
  v24->__shared_weak_owners_ = 0;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  v24->__shared_owners_ = 0;
  v49 = ggl::TextureData2D::TextureData2D((uint64_t)&v24[1], Width, height, 1u, 27, 0);
  v50 = v24;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  v26 = (int16x8_t *)(*(uint64_t (**)(_QWORD *, _QWORD))(*v49 + 16))(v49, 0);
  if ((v22 & 1) != 0)
  {
    v27 = height;
    if (_colorSpace(BOOL)::onceTokenSRGB != -1)
      dispatch_once(&_colorSpace(BOOL)::onceTokenSRGB, &__block_literal_global_18129);
    v28 = &_colorSpace(BOOL)::colorspaceSRGB;
  }
  else
  {
    v27 = height;
    if (_colorSpace(BOOL)::onceTokenLinear != -1)
      dispatch_once(&_colorSpace(BOOL)::onceTokenLinear, &__block_literal_global_1);
    v28 = &_colorSpace(BOOL)::colorspaceLinear;
  }
  v29 = CGBitmapContextCreate(v26, Width, v27, 5uLL, 2 * Width, (CGColorSpaceRef)*v28, 0x1006u);
  v53.origin.x = 0.0;
  v53.origin.y = 0.0;
  v53.size.width = (double)Width;
  v53.size.height = (double)v27;
  MinX = CGRectGetMinX(v53);
  v54.origin.x = 0.0;
  v54.origin.y = 0.0;
  v54.size.width = (double)Width;
  v54.size.height = (double)v27;
  MaxY = CGRectGetMaxY(v54);
  CGContextTranslateCTM(v29, MinX, MaxY);
  CGContextScaleCTM(v29, 1.0, -1.0);
  CGContextSetBlendMode(v29, kCGBlendModeCopy);
  CGContextSetAlpha(v29, 1.0);
  v55.origin.x = *(CGFloat *)MEMORY[0x1E0C9D538];
  v55.origin.y = *(CGFloat *)(MEMORY[0x1E0C9D538] + 8);
  v55.size.width = (double)Width;
  v55.size.height = (double)v27;
  CGContextDrawImage(v29, v55, ImageAtIndex);
  CGContextRelease(v29);
  v32 = v27 * Width;
  if (!(v27 * Width))
    goto LABEL_38;
  if (v32 > 0xF)
  {
    v33 = v32 & 0xFFFFFFFFFFFFFFF0;
    v34 = v26 + 1;
    v35 = v32 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v36 = *(_OWORD *)&vaddq_s16(*v34, *v34) | __PAIR128__(0x1000100010001, 0x1000100010001);
      v34[-1] = (int16x8_t)(*(_OWORD *)&vaddq_s16(v34[-1], v34[-1]) | __PAIR128__(0x1000100010001, 0x1000100010001));
      *v34 = (int16x8_t)v36;
      v34 += 2;
      v35 -= 16;
    }
    while (v35);
    if (v32 == v33)
      goto LABEL_38;
  }
  else
  {
    v33 = 0;
  }
  v37 = v32 - v33;
  v38 = &v26->i16[v33];
  do
  {
    *v38 = (2 * *v38) | 1;
    ++v38;
    --v37;
  }
  while (v37);
LABEL_38:
  CGImageRelease(ImageAtIndex);
  if (v49)
  {
    v39 = operator new(0xC0uLL);
    v39[1] = 0;
    v39[2] = 0;
    *v39 = &off_1E42DBDD8;
    v40 = gdc::Resource::Resource((uint64_t)(v39 + 3), (uint64_t)a1);
    v39[21] = v49;
    v39[22] = v50;
    if (v50)
    {
      v41 = (unint64_t *)&v50->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    *((_BYTE *)v39 + 184) = 0;
    *(_QWORD *)&v43 = v40;
    *((_QWORD *)&v43 + 1) = v39;
    *(_OWORD *)a3 = v43;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  if (v50)
  {
    v44 = (unint64_t *)&v50->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
}

void sub_19FAE7C44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

CGColorSpaceRef ___ZL11_colorSpaceb_block_invoke_2()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateDeviceRGB();
  _colorSpace(BOOL)::colorspaceLinear = (uint64_t)result;
  return result;
}

CGColorSpaceRef ___ZL11_colorSpaceb_block_invoke()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA00]);
  _colorSpace(BOOL)::colorspaceSRGB = (uint64_t)result;
  return result;
}

void sub_19FAE7DA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FAE7E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

void sub_19FAE7F04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FAE7FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  void *v10;

  if (a10)
    std::__shared_weak_count::__release_weak(a10);

  _Unwind_Resume(a1);
}

void sub_19FAE80AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FAE81D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, char a12)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  a9.super_class = (Class)VKImage;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FAE859C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FAE868C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CFDictionaryRef ___ZL19_imageSourceOptionsv_block_invoke()
{
  void *v0;
  void *v1;
  CFDictionaryRef result;
  void *values[3];
  void *keys[4];

  keys[3] = *(void **)MEMORY[0x1E0C80C00];
  v0 = (void *)*MEMORY[0x1E0CBD288];
  keys[0] = *(void **)MEMORY[0x1E0CBD240];
  keys[1] = v0;
  keys[2] = *(void **)MEMORY[0x1E0CBD2A8];
  v1 = (void *)*MEMORY[0x1E0C9AE50];
  values[0] = *(void **)MEMORY[0x1E0C9AE40];
  values[1] = v1;
  values[2] = CFSTR("public.png");
  result = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  _imageSourceOptions(void)::options = (uint64_t)result;
  return result;
}

void std::__shared_ptr_emplace<ggl::TextureData2D,geo::StdAllocator<ggl::TextureData2D,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEF80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::TextureData2D,geo::StdAllocator<ggl::TextureData2D,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEF80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::TextureData2D,geo::StdAllocator<ggl::TextureData2D,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::TextureData2D,geo::StdAllocator<ggl::TextureData2D,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 104);
}

uint64_t md::ImageLabelPart::setLabel(md::ImageLabelPart *this, md::Label *a2)
{
  uint64_t result;

  *((_QWORD *)this + 2) = a2;
  result = (*(uint64_t (**)(md::ImageLabelPart *, char *))(*(_QWORD *)this + 24))(this, (char *)a2 + 376);
  *((_BYTE *)this + 630) = *(_BYTE *)(*((_QWORD *)this + 2) + 1221);
  return result;
}

float md::ImageLabelPart::updateForDisplay(md::ImageLabelPart *this)
{
  uint64_t v1;
  float result;

  *((_DWORD *)this + 153) = *((_DWORD *)this + 147);
  v1 = *(_QWORD *)((char *)this + 572);
  result = *((float *)this + 145);
  *((float *)this + 151) = result;
  *(_QWORD *)((char *)this + 596) = v1;
  *((_BYTE *)this + 617) = *((_BYTE *)this + 593);
  *((_BYTE *)this + 556) = *((_BYTE *)this + 633) + 4 * *((_BYTE *)this + 594);
  return result;
}

uint64_t md::ImageLabelPart::setContentType(uint64_t result, int a2)
{
  *(_BYTE *)(result + 562) = a2;
  *(_BYTE *)(result + 632) = (a2 - 1) < 4;
  return result;
}

BOOL md::ImageLabelPart::isVisuallySimilar(md::ImageLabelPart *this, const md::LabelPart *a2)
{
  if (*((float *)this + 143) != *((float *)a2 + 143))
    return 0;
  if (*((float *)this + 144) == *((float *)a2 + 144))
    return *((float *)this + 145) == *((float *)a2 + 145);
  return 0;
}

uint64_t md::ImageLabelPart::debugString@<X0>(md::ImageLabelPart *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  const void **v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v21;
  _QWORD v22[2];
  _QWORD v23[3];
  uint64_t v24;
  unint64_t v25;
  void *__p[2];
  __int128 v27;
  int v28;
  uint64_t v29[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v29[0] = MEMORY[0x1E0DE4FE0] + 64;
  v21 = v7;
  *(_QWORD *)((char *)&v22[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v22[-1] + *(_QWORD *)(v21 - 24));
  std::ios_base::init(v9, v22);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v21 = v4 + 24;
  v29[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v22[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  v28 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Icon:", 5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v21, (uint64_t)" layer=", 7);
  std::ostream::operator<<();
  v11 = v21;
  *(_DWORD *)((char *)v22 + *(_QWORD *)(v21 - 24)) = *(_DWORD *)((_BYTE *)v22 + *(_QWORD *)(v21 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v22[1] + *(_QWORD *)(v11 - 24)) = 1;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v21, (uint64_t)" alpha=", 7);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v21, (uint64_t)" bright=", 8);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v21, (uint64_t)" sat=", 5);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v21, (uint64_t)" scale=", 7);
  std::ostream::operator<<();
  v12 = v21;
  *(_DWORD *)((char *)v22 + *(_QWORD *)(v21 - 24)) = *(_DWORD *)((_BYTE *)v22 + *(_QWORD *)(v21 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v22[1] + *(_QWORD *)(v12 - 24)) = 0;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v21, (uint64_t)" pad=", 5);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v21, (uint64_t)" opad=", 6);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v21, (uint64_t)" ovlp=", 6);
  std::ostream::operator<<();
  if (*((_BYTE *)this + 272))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v21, (uint64_t)" ovlpGroups=", 12);
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v21, (uint64_t)"\n", 1);
  if ((v28 & 0x10) != 0)
  {
    v14 = *((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1) < v25)
    {
      *((_QWORD *)&v27 + 1) = v25;
      v14 = v25;
    }
    v15 = (const void **)&v24;
  }
  else
  {
    if ((v28 & 8) == 0)
    {
      v13 = 0;
      a2[23] = 0;
      goto LABEL_18;
    }
    v15 = (const void **)v23;
    v14 = v23[2];
  }
  v16 = *v15;
  v13 = v14 - (_QWORD)*v15;
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v13 >= 0x17)
  {
    v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v17 = v13 | 7;
    v18 = v17 + 1;
    v19 = operator new(v17 + 1);
    *((_QWORD *)a2 + 1) = v13;
    *((_QWORD *)a2 + 2) = v18 | 0x8000000000000000;
    *(_QWORD *)a2 = v19;
    a2 = v19;
    goto LABEL_17;
  }
  a2[23] = v13;
  if (v13)
LABEL_17:
    memmove(a2, v16, v13);
LABEL_18:
  a2[v13] = 0;
  v21 = *v6;
  *(_QWORD *)((char *)&v22[-1] + *(_QWORD *)(v21 - 24)) = v6[3];
  v22[0] = v10 + 16;
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v29);
}

void sub_19FAE8CBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

void sub_19FAE8CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::ImageLabelPart::populateDebugNode(md::ImageLabelPart *this, gdc::DebugTreeNode *a2)
{
  char *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  _QWORD v9[7];
  int v10;
  _BYTE v11[16];
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[16];
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BYTE v23[16];
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _BYTE v29[16];
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  char v36;

  v36 = 14;
  strcpy((char *)&v35, "ImageLabelPart");
  v3 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, &v35);
  v4 = *((float *)this + 138);
  v36 = 5;
  strcpy((char *)&v35, "Alpha");
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v34 = 2;
  v30 = v4;
  gdc::DebugTreeNode::addProperty((uint64_t)v3, (uint64_t)&v35, (uint64_t)v29);
  v5 = *((float *)this + 149);
  v36 = 10;
  strcpy((char *)&v35, "Brightness");
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v28 = 2;
  v24 = v5;
  gdc::DebugTreeNode::addProperty((uint64_t)v3, (uint64_t)&v35, (uint64_t)v23);
  v6 = *((float *)this + 151);
  v36 = 10;
  strcpy((char *)&v35, "Saturation");
  v20 = 0;
  v21 = 0;
  v19 = 0;
  v22 = 2;
  v18 = v6;
  gdc::DebugTreeNode::addProperty((uint64_t)v3, (uint64_t)&v35, (uint64_t)v17);
  v7 = *((float *)this + 155);
  v36 = 7;
  strcpy((char *)&v35, "Padding");
  v14 = 0;
  v15 = 0;
  v13 = 0;
  v16 = 2;
  v12 = v7;
  gdc::DebugTreeNode::addProperty((uint64_t)v3, (uint64_t)&v35, (uint64_t)v11);
  v8 = *((char *)this + 594);
  v36 = 5;
  strcpy((char *)&v35, "Layer");
  v10 = 0;
  memset(&v9[4], 0, 24);
  v9[0] = v8;
  gdc::DebugTreeNode::addProperty((uint64_t)v3, (uint64_t)&v35, (uint64_t)v9);
}

void std::__function::__func<md::ita::PrepareMeshRenderableBounds::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>)::$_1,std::allocator<md::ita::PrepareMeshRenderableBounds::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::PrepareMeshRenderableBounds::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>)::$_1,std::allocator<md::ita::PrepareMeshRenderableBounds::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427BD60;
  return result;
}

void std::__function::__func<md::ita::PrepareMeshRenderableBounds::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>)::$_1,std::allocator<md::ita::PrepareMeshRenderableBounds::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427BD60;
}

double std::__function::__func<md::ita::PrepareMeshRenderableBounds::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>)::$_1,std::allocator<md::ita::PrepareMeshRenderableBounds::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  double result;
  _BYTE v8[24];

  *(float *)&v8[8] = *a5 + (float)(*(float *)(a6 + 8) * *a4);
  *(_QWORD *)&v8[12] = *(_QWORD *)(a6 + 12);
  *(float *)&v8[20] = *a5 + (float)(*(float *)(a6 + 20) * *a4);
  *(_OWORD *)a7 = *(_OWORD *)v8;
  result = *(double *)&v8[16];
  *(_QWORD *)(a7 + 16) = *(_QWORD *)&v8[16];
  return result;
}

void std::__function::__func<md::ita::PrepareMeshRenderableBounds::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>)::$_0,std::allocator<md::ita::PrepareMeshRenderableBounds::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::PrepareMeshRenderableBounds::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>)::$_0,std::allocator<md::ita::PrepareMeshRenderableBounds::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427BD18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ita::PrepareMeshRenderableBounds::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>)::$_0,std::allocator<md::ita::PrepareMeshRenderableBounds::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427BD18;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::ita::PrepareMeshRenderableBounds::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>)::$_0,std::allocator<md::ita::PrepareMeshRenderableBounds::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &)>::operator()(uint64_t a1, int32x4_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, float32x2_t *a7, float32x4_t *a8)
{
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  float32x4_t v27;
  uint64_t v28;

  v11 = *a6;
  v12 = **(_QWORD ***)(a1 + 8);
  v27.i64[0] = v11;
  v13 = v12[417];
  if (v11 >= (unint64_t)((v12[418] - v13) >> 3)
    || ((v14 = *(_QWORD *)(v13 + 8 * v11)) != 0 ? (v15 = HIDWORD(v11) == HIDWORD(v14)) : (v15 = 0),
        !v15
     || ((v20 = v12[420], v21 = *(_QWORD *)(v13 + 8 * v11), v20 + 24 * v14 != v12[421])
       ? (v22 = v20 == 0)
       : (v22 = 1),
         v22)))
  {
    v16 = 0;
    v17 = 0;
  }
  else
  {
    v23 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>> const&>,std::tuple<>>((uint64_t)(v12 + 409), v11, &v27);
    ++v23[3];
    v24 = v20 + 24 * v21;
    v16 = *(_QWORD *)(v24 + 8);
    v17 = *(std::__shared_weak_count **)(v24 + 16);
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
    }
  }
  md::GeometryLogic::scaleGeocentricBoundsWithNormal(&v27, a7, a4, a4 + 24, v16, a2);
  *a8 = v27;
  a8[1].i64[0] = v28;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_19FAE9110(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::ita::PrepareBoundsScaleAndAdjust::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>)::$_0,std::allocator<md::ita::PrepareBoundsScaleAndAdjust::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::PrepareBoundsScaleAndAdjust::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>)::$_0,std::allocator<md::ita::PrepareBoundsScaleAndAdjust::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E427BCD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::ita::PrepareBoundsScaleAndAdjust::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>)::$_0,std::allocator<md::ita::PrepareBoundsScaleAndAdjust::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427BCD0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::PrepareBoundsScaleAndAdjust::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>)::$_0,std::allocator<md::ita::PrepareBoundsScaleAndAdjust::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&)>::operator()(uint64_t a1, uint64_t a2, float *a3, _DWORD *a4, unint64_t *a5)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  char v22;
  char **v23;
  char *v24;

  v8 = **(_QWORD **)(a1 + 8);
  v24 = (char *)*a5;
  v9 = *(_DWORD *)(*(_QWORD *)(v8 + 3336) + 8 * v24);
  v10 = *(_QWORD *)(v8 + 3360);
  v11 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>> const&>,std::tuple<>>(v8 + 3272, (unint64_t)v24, &v24);
  ++v11[3];
  v12 = v10 + 24 * v9;
  v14 = *(_QWORD *)(v12 + 8);
  v13 = *(std::__shared_weak_count **)(v12 + 16);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  if ((*(_BYTE *)(v14 + 16) & 2) == 0)
  {
    v17 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v17 != -1)
    {
      v24 = &v22;
      v23 = &v24;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  v18 = *(_QWORD *)(v14 + 72);
  v19 = *(_DWORD *)(v18 + 40);
  *a3 = (float)(**(float **)(a1 + 16) * **(float **)(a1 + 24)) * *(float *)(v18 + 340);
  *a4 = v19;
  if (v13)
  {
    v20 = (unint64_t *)&v13->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_19FAE94A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FAE94B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FAE97F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FAE9B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      _Unwind_Resume(exception_object);
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
  _Unwind_Resume(exception_object);
}

void sub_19FAEA77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  void *v28;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v30 = a28;
  if (a28 == &a25)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  v32 = a24;
  if (a24 == &a21)
  {
    v33 = 4;
    v32 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_11:

  _Unwind_Resume(a1);
}

void sub_19FAEAA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)VKClassicGlobeCanvas;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FAEB1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;
  void *v27;

  std::ostringstream::~ostringstream((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_19FAEB6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FAEB8C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FAEBAC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FAEBD18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FAEBF18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FAEC3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32,char a33,uint64_t a34,uint64_t a35,char *a36)
{
  void *v36;
  void *v37;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;

  v39 = a36;
  if (a36 == &a33)
  {
    v40 = 4;
    v39 = &a33;
  }
  else
  {
    if (!a36)
      goto LABEL_6;
    v40 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
LABEL_6:
  v41 = a32;
  if (a32 == &a29)
  {
    v42 = 4;
    v41 = &a29;
  }
  else
  {
    if (!a32)
      goto LABEL_11;
    v42 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
LABEL_11:
  -[VKClassicGlobeCanvas startFlyoverTourAnimation:animateToStart:labelChanged:stateChange:]::$_1::~$_1((uint64_t)&a11);
  geo::_retain_ptr<void({block_pointer} {__strong})(NSString *),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(&a19);

  geo::_retain_ptr<void({block_pointer} {__strong})(VKFlyoverTourState),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(&a22);
  _Unwind_Resume(a1);
}

void sub_19FAECDA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FAED298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FAEDE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_QWORD *a27)
{
  std::__tree<std::__value_type<unsigned int,std::map<unsigned int,std::set<altitude::SimpleTileKey>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::map<unsigned int,std::set<altitude::SimpleTileKey>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::map<unsigned int,std::set<altitude::SimpleTileKey>>>>>::destroy(a27);

  _Unwind_Resume(a1);
}

void sub_19FAEDEBC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FAEE1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  void *v11;

  if (a11)
    std::__shared_weak_count::__release_weak(a11);

  _Unwind_Resume(a1);
}

void sub_19FAEE4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::mutex *v14;
  void *v15;

  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_19FAEE658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  void *v11;
  void *v12;

  if (a11)
    std::__shared_weak_count::__release_weak(a11);

  _Unwind_Resume(a1);
}

void sub_19FAEE7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  void *v11;
  void *v12;

  if (a11)
    std::__shared_weak_count::__release_weak(a11);

  _Unwind_Resume(a1);
}

void sub_19FAEEA4C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19FAEF280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FAEF6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28,char a29)
{
  char *v29;
  char *v31;
  uint64_t v32;

  std::unique_ptr<std::vector<gm::LineSegment<float,2>>>::~unique_ptr[abi:nn180100](&a18);
  v31 = a28;
  if (a28 == v29)
  {
    v32 = 4;
    v31 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_6:
  gdc::LogicExecutionGraphBuilder::~LogicExecutionGraphBuilder((gdc::LogicExecutionGraphBuilder *)&a29);
  _Unwind_Resume(a1);
}

void sub_19FAEFAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v27;

  std::unordered_map<std::string,double>::~unordered_map[abi:nn180100]((uint64_t)&a22);
  v27 = *(void **)(v25 - 128);
  if (v27)
    operator delete(v27);

  _Unwind_Resume(a1);
}

void sub_19FAEFC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19FAEFD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19FAEFFC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FAF0078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FAF00F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FAF0490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FAF059C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19FAF06C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void gdc::LogicExecutionGraphBuilder::~LogicExecutionGraphBuilder(gdc::LogicExecutionGraphBuilder *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (char *)this + 112;
  v3 = (char *)*((_QWORD *)this + 17);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  std::__tree<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,std::__map_value_compare<gdc::ContextTypeWrapper,std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,gdc::ContextTypeWrapperCompare,true>,std::allocator<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>>>::destroy(*((_QWORD **)this + 12));
  std::__tree<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,std::__map_value_compare<gdc::ContextTypeWrapper,std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,gdc::ContextTypeWrapperCompare,true>,std::allocator<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>>>::destroy(*((_QWORD **)this + 9));
  v5 = (_QWORD *)*((_QWORD *)this + 5);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    operator delete(v7);
  std::__tree<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,std::__map_value_compare<gdc::LogicExecutionNode,std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,gdc::LogicExecutionNodeCompare,true>,std::allocator<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>>>::destroy(*((_QWORD **)this + 1));
}

_QWORD *geo::_retain_ptr<void({block_pointer} {__strong})(VKFlyoverTourState),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  *a1 = &off_1E42B55B0;
  a1[1] = 0;
  v3 = MEMORY[0x1A1AF5730](*(_QWORD *)(a2 + 8));
  if (v3)
  {
    v4 = (void *)v3;
    v5 = (void *)MEMORY[0x1A1AF5730]();

  }
  else
  {
    v5 = 0;
  }
  v6 = MEMORY[0x1A1AF5730](v5);
  v7 = (void *)a1[1];
  a1[1] = v6;

  return a1;
}

_QWORD *geo::_retain_ptr<void({block_pointer} {__strong})(NSString *),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  *a1 = &off_1E42B55D0;
  a1[1] = 0;
  v3 = MEMORY[0x1A1AF5730](*(_QWORD *)(a2 + 8));
  if (v3)
  {
    v4 = (void *)v3;
    v5 = (void *)MEMORY[0x1A1AF5730]();

  }
  else
  {
    v5 = 0;
  }
  v6 = MEMORY[0x1A1AF5730](v5);
  v7 = (void *)a1[1];
  a1[1] = v6;

  return a1;
}

_QWORD *geo::_retain_ptr<void({block_pointer} {__strong})(VKFlyoverTourState),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E42B55B0;
  if (a1[1])
  {

    v2 = (void *)a1[1];
  }
  else
  {
    v2 = 0;
  }

  return a1;
}

_QWORD *geo::_retain_ptr<void({block_pointer} {__strong})(NSString *),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E42B55D0;
  if (a1[1])
  {

    v2 = (void *)a1[1];
  }
  else
  {
    v2 = 0;
  }

  return a1;
}

void ___ZZ90__VKClassicGlobeCanvas_startFlyoverTourAnimation_animateToStart_labelChanged_stateChange__ENK3__1clEPK12GEOPDFlyover_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void (**v7)(id, uint64_t);

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(void **)(*(_QWORD *)(a1 + 40) + 672);
    v4 = *(unsigned __int8 *)(a1 + 96);
    v7 = (void (**)(id, uint64_t))MEMORY[0x1A1AF5730](*(_QWORD *)(a1 + 80));
    v5 = (void *)MEMORY[0x1A1AF5730](*(_QWORD *)(a1 + 56));
    objc_msgSend(v3, "flyoverTourAnimation:animateToStart:labelChanged:stateChange:", v2, v4, v7, v5);

  }
  else
  {
    v6 = (void *)MEMORY[0x1A1AF5730](*(_QWORD *)(a1 + 56));

    if (!v6)
      return;
    v7 = (void (**)(id, uint64_t))MEMORY[0x1A1AF5730](*(_QWORD *)(a1 + 56));
    v7[2](v7, 6);
  }

}

void sub_19FAF0E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_48c152_ZTSN3geo11_retain_ptrIU8__strongU13block_pointerFv18VKFlyoverTourStateENS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE72c142_ZTSN3geo11_retain_ptrIU8__strongU13block_pointerFvP8NSStringENS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE(uint64_t a1, uint64_t a2)
{
  geo::_retain_ptr<void({block_pointer} {__strong})(VKFlyoverTourState),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr((_QWORD *)(a1 + 48), a2 + 48);
  return geo::_retain_ptr<void({block_pointer} {__strong})(NSString *),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr((_QWORD *)(a1 + 72), a2 + 72);
}

void __destroy_helper_block_ea8_48c152_ZTSN3geo11_retain_ptrIU8__strongU13block_pointerFv18VKFlyoverTourStateENS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE72c142_ZTSN3geo11_retain_ptrIU8__strongU13block_pointerFvP8NSStringENS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE(_QWORD *a1)
{
  void *v2;
  void *v3;

  a1[9] = &off_1E42B55D0;
  if (a1[10])
  {

    v2 = (void *)a1[10];
  }
  else
  {
    v2 = 0;
  }

  a1[6] = &off_1E42B55B0;
  v3 = (void *)a1[7];
  if (v3)
  {

    v3 = (void *)a1[7];
  }

}

void geo::_retain_ptr<void({block_pointer} {__strong})(NSString *),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E42B55D0;
  if (a1[1])
  {

    v2 = (void *)a1[1];
  }
  else
  {
    v2 = 0;
  }

  JUMPOUT(0x1A1AF4E00);
}

void geo::_retain_ptr<void({block_pointer} {__strong})(VKFlyoverTourState),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E42B55B0;
  if (a1[1])
  {

    v2 = (void *)a1[1];
  }
  else
  {
    v2 = 0;
  }

  JUMPOUT(0x1A1AF4E00);
}

void sub_19FAF1214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FAF1340(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void md::mun::MetadataResource::~MetadataResource(md::mun::MetadataResource *this)
{
  md::mun::MetadataResource::~MetadataResource(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;

  *(_QWORD *)this = &off_1E42ABB18;
  v2 = *((_QWORD *)this + 27);
  if (v2)
  {
    v3 = *((_QWORD *)this + 28);
    v4 = (void *)*((_QWORD *)this + 27);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 80);
        if (v5 != *(void **)(v3 - 64))
          free(v5);
        if (*(_BYTE *)(v3 - 120))
          *(_BYTE *)(v3 - 120) = 0;
        if (*(_BYTE *)(v3 - 160))
          *(_BYTE *)(v3 - 160) = 0;
        v3 -= 168;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 27);
    }
    *((_QWORD *)this + 28) = v2;
    operator delete(v4);
  }
  v6 = (_QWORD *)*((_QWORD *)this + 24);
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = (void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v8)
    operator delete(v8);
  v9 = *((_QWORD *)this + 19);
  if (v9)
  {
    v10 = *((_QWORD *)this + 20);
    v11 = (void *)*((_QWORD *)this + 19);
    if (v10 != v9)
    {
      do
      {
        v12 = v10 - 1864;
        v13 = *(_QWORD **)(v10 - 1776);
        v14 = *(_QWORD **)(v10 - 1768);
        if (v13 != v14)
        {
          do
          {
            v15 = (void *)v13[31];
            if (v15 != (void *)v13[33])
              free(v15);
            v13 += 36;
          }
          while (v13 != v14);
          v13 = *(_QWORD **)(v10 - 1776);
        }
        if (v13 != *(_QWORD **)(v10 - 1760))
          free(v13);
        v10 -= 1864;
      }
      while (v12 != v9);
      v11 = (void *)*((_QWORD *)this + 19);
    }
    *((_QWORD *)this + 20) = v9;
    operator delete(v11);
  }
  v16 = (void *)*((_QWORD *)this + 2);
  if (v16 != *((void **)this + 4))
    free(v16);
}

void md::ConfigValue<GEOConfigKeyString,std::string>::_update(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  int v10;
  char v11;
  __int128 *v12;
  size_t v13;
  id v14;
  __int128 __dst;
  int64_t v16;

  GEOConfigGetString();
  v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v2 = objc_msgSend(v14, "UTF8String");
  if (v2)
    v3 = (const char *)v2;
  else
    v3 = "";
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v16 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v16) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_11:
    memmove(p_dst, v3, v5);
  *((_BYTE *)p_dst + v5) = 0;
  v9 = (void **)(a1 + 16);
  v10 = *(char *)(a1 + 39);
  v11 = HIBYTE(v16);
  if ((v10 & 0x80000000) == 0)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      *(_OWORD *)v9 = __dst;
      v9[2] = (void *)v16;
      goto LABEL_25;
    }
    std::string::__assign_no_alias<true>(v9, (void *)__dst, *((size_t *)&__dst + 1));
LABEL_24:
    operator delete((void *)__dst);
    goto LABEL_25;
  }
  if (v16 >= 0)
    v12 = &__dst;
  else
    v12 = (__int128 *)__dst;
  if (v16 >= 0)
    v13 = HIBYTE(v16);
  else
    v13 = *((_QWORD *)&__dst + 1);
  std::string::__assign_no_alias<false>(v9, v12, v13);
  if (v11 < 0)
    goto LABEL_24;
LABEL_25:

}

void sub_19FAF1654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void md::ARVIOLocationProvider::~ARVIOLocationProvider(md::ARVIOLocationProvider *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::ARVIOLocationProvider::update(uint64_t a1, uint64_t a2, void *a3, double *a4, uint64_t *a5)
{
  id v8;
  float v9;
  float v10;
  float32x2_t v11;
  float v12;
  double v13;
  float v14;
  double v15;
  float v16;
  double v17;
  float v18;
  double v19;
  float v20;
  float v21;
  double v22;
  float v23;
  double v24;
  float v25;
  double v26;
  float v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  BOOL v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v56;
  double v57;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  int v87;
  double *v88;
  double v89;
  double v90;
  __double2 v91;
  double v92;
  double v93;
  __double2 v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  float64x2_t v100;
  double v101;
  long double v102;
  long double v103;
  long double v104;
  double v105;
  double v106;
  double v107;
  __double2 v108;
  double v109;
  __double2 v110;
  double v111;
  double v112;
  double v113;
  id v114;
  float64x2_t v115;
  double v116;
  float64x2_t v117;
  double v118;
  float64x2_t v119;
  double v120;
  double v121[3];

  v114 = a3;
  objc_msgSend(v114, "camera");
  v8 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "transform");
  v13 = v9;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = v20;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v29 = v10;
  v30 = v22 + v9;
  v31 = v30 + v10;
  if (v31 <= 0.0)
  {
    if (v9 <= v21 || v9 <= v10)
    {
      v38 = v21 <= v10;
      v39 = sqrt(v29 + 1.0 - v30);
      v40 = 1.0 / (v39 + v39);
      v41 = (v26 + v17) * v40;
      v42 = v28 + v24;
      v43 = v42 * v40;
      v44 = v39 * 0.5;
      v45 = (v15 - v19) * v40;
      v46 = sqrt(v22 + 1.0 - (v29 + v13));
      v47 = 1.0 / (v46 + v46);
      v48 = (v19 + v15) * v47;
      v34 = v46 * 0.5;
      v49 = v42 * v47;
      v36 = (v26 - v17) * v47;
      if (v38)
        v33 = v41;
      else
        v33 = v48;
      if (v38)
      {
        v34 = v43;
        v35 = v44;
      }
      else
      {
        v35 = v49;
      }
      if (v38)
        v36 = v45;
    }
    else
    {
      v50 = sqrt(v13 + 1.0 - (v29 + v22));
      v51 = v50 + v50;
      v33 = v50 * 0.5;
      v52 = v19 + v15;
      v53 = 1.0 / v51;
      v34 = v52 * (1.0 / v51);
      v35 = (v26 + v17) * v53;
      v36 = (v24 - v28) * v53;
    }
  }
  else
  {
    v32 = 0.5 / sqrt(v31 + 1.0);
    v33 = v32 * (v24 - v28);
    v34 = v32 * (v26 - v17);
    v35 = v32 * (v15 - v19);
    v36 = 0.25 / v32;
  }
  v54 = v12;
  _Q3 = vcvtq_f64_f32(v11);
  v57 = a4[2];
  v56 = a4[3];
  _D18 = *a4;
  v59 = a4[1];
  v60 = v33 * v56 + *a4 * v36 + v59 * v35 - v57 * v34;
  v61 = v59 * v36 - (*a4 * v35 - v34 * v56) + v57 * v33;
  v62 = v35 * v56 + *a4 * v34 - v59 * v33 + v57 * v36;
  v63 = -(*a4 * v33 + v59 * v34 + v57 * v35 - v36 * v56);
  v64 = vmuld_lane_f64(v57, _Q3, 1);
  v65 = vmlad_n_f64(-(*a4 * v54), v57, _Q3.f64[0]);
  __asm { FMLA            D21, D18, V3.D[1] }
  v71 = -(v64 - v59 * v54) - (v64 - v59 * v54);
  v72 = v65 + v65;
  v73 = _D21 + _D21;
  _Q3.f64[0] = _Q3.f64[0] + v71 * v56 + v73 * v59 - v72 * v57;
  v74 = _Q3.f64[1] + v71 * v57 + v72 * v56 - v73 * *a4;
  v75 = v54 - v71 * v59 + v72 * *a4 + v73 * v56;
  *(double *)(a1 + 80) = v61;
  *(double *)(a1 + 88) = v62;
  *(double *)(a1 + 96) = v63;
  *(float64_t *)(a1 + 48) = _Q3.f64[0];
  *(double *)(a1 + 56) = v74;
  *(double *)(a1 + 64) = v75;
  *(double *)(a1 + 72) = v60;
  v76 = *a5;
  v77 = a5[1];
  v112 = v74;
  v113 = _Q3.f64[0];
  v111 = v75;
  if (*a5 == v77)
  {
    v80 = 0.0;
    v79 = 0.0;
    v78 = 0.0;
  }
  else
  {
    v78 = 0.0;
    v79 = 0.0;
    v80 = 0.0;
    do
    {
      if (v76)
      {
        v87 = *(_DWORD *)(v76 + 16);
        if (v87 == 1)
          v88 = (double *)v76;
        else
          v88 = 0;
        if (v87)
        {
          if (v88)
            v78 = *v88 * 10.0;
        }
        else
        {
          v81 = *(float *)(v76 + 8) - *(float *)v76;
          v82 = *(float *)(v76 + 12) - *(float *)(v76 + 4);
          v83 = 1.0 / sqrtf((float)(v81 * v81) + (float)(v82 * v82));
          v84 = v83 * v81;
          v85 = v83 * v82;
          if (fabsf(v85) > 0.85)
            v84 = 0.0;
          v86 = v85 * 0.75;
          if (fabsf(v84) <= 0.85)
            v79 = v86;
          else
            v79 = 0.0;
          v80 = v84 * 0.75;
        }
      }
      v76 += 24;
    }
    while (v76 != v77);
  }
  v89 = *(double *)(a1 + 32) * 0.0174532925;
  v90 = *(double *)(a1 + 40);
  v91 = __sincos_stret(*(double *)(a1 + 24) * 0.0174532925);
  v92 = 6378137.0 / sqrt(1.0 - v91.__sinval * v91.__sinval * 0.00669437999);
  v93 = (v92 + v90) * v91.__cosval;
  v94 = __sincos_stret(v89);
  v95 = v93 * v94.__cosval;
  v96 = v93 * v94.__sinval;
  v121[0] = v95;
  v121[1] = v96;
  v97 = (v90 + v92 * 0.99330562) * v91.__sinval;
  v121[2] = v97;
  gdc::CameraFrame<geo::Radians,double>::createLocalEcefBasis(v115.f64, v121);
  v98 = *(double *)(a1 + 120) + v120 * v79 + v116 * v80;
  v99 = v118;
  v100 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(a1 + 104), v119, v79), v115, v80), v117, v78);
  *(float64x2_t *)(a1 + 104) = v100;
  v101 = v98 + v99 * v78;
  *(double *)(a1 + 120) = v101;
  v102 = v95 + v100.f64[0] + v113;
  v103 = v96 + v100.f64[1] + v112;
  v104 = v97 + v101 + v111;
  v105 = sqrt(v102 * v102 + v103 * v103);
  v106 = atan2(v104, v105 * 0.996647189);
  v107 = atan2(v103, v102);
  v108 = __sincos_stret(v106);
  v109 = atan2(v104 + v108.__sinval * v108.__sinval * 42841.3115 * v108.__sinval, v105 + v108.__cosval * v108.__cosval * -42697.6727 * v108.__cosval);
  v110 = __sincos_stret(v109);
  *(double *)(a1 + 128) = v109 * 57.2957795;
  *(double *)(a1 + 136) = v107 * 57.2957795;
  *(double *)(a1 + 144) = v105 / v110.__cosval - 6378137.0 / sqrt(1.0 - v110.__sinval * v110.__sinval * 0.00669437999);

}

void sub_19FAF1B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t md::ARVIOLocationProvider::location(md::ARVIOLocationProvider *this)
{
  return (uint64_t)this + 128;
}

void md::LayerDataLogic::~LayerDataLogic(md::LayerDataLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::LayerDataLogic,md::LayerDataLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _BYTE v4[2];

  if (*(_QWORD *)(a3 + 8) == 0x7851AF310F49C988 && *(_QWORD *)(a3 + 32))
    return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 160))(result, a2, v4);
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t md::Logic<md::LayerDataLogic,md::LayerDataLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::LayerDataLogic,md::LayerDataLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void _ZNSt3__110__function6__funcIZN2md14LayerDataLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__1NS_9allocatorISH_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md14LayerDataLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CBD50;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md14LayerDataLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CBD50;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md14LayerDataLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__1NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled((os_log_t)GEOGetVectorKitPerformanceLog_log))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v2, "LayerDataLogic", (const char *)&unk_1A0189141, v4, 2u);
    }
  }
}

void _ZNSt3__110__function6__funcIZN2md14LayerDataLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__0NS_9allocatorISH_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md14LayerDataLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__0NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CBD08;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md14LayerDataLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__0NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CBD08;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md14LayerDataLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__0NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled((os_log_t)GEOGetVectorKitPerformanceLog_log))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "LayerDataLogic", (const char *)&unk_1A0189141, v4, 2u);
    }
  }
}

void _ZNSt3__110__function6__funcIZN2md14LayerDataLogic28runAfterLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__1NS_9allocatorISH_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md14LayerDataLogic28runAfterLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CBDE0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md14LayerDataLogic28runAfterLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CBDE0;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md14LayerDataLogic28runAfterLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__1NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled((os_log_t)GEOGetVectorKitPerformanceLog_log))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v2, "LayerDataLogicAfterVariableRate", (const char *)&unk_1A0189141, v4, 2u);
    }
  }
}

void _ZNSt3__110__function6__funcIZN2md14LayerDataLogic28runAfterLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__0NS_9allocatorISH_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md14LayerDataLogic28runAfterLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__0NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CBD98;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md14LayerDataLogic28runAfterLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__0NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CBD98;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md14LayerDataLogic28runAfterLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__0NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled((os_log_t)GEOGetVectorKitPerformanceLog_log))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "LayerDataLogicAfterVariableRate", (const char *)&unk_1A0189141, v4, 2u);
    }
  }
}

void _ZNSt3__110__function6__funcIZN2md14LayerDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__1NS_9allocatorISH_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md14LayerDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CBE70;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md14LayerDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__0NS_9allocatorISH_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md14LayerDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__0NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CBE28;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md14LayerDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_21LayerDataLogicContextEE3__0NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CBE28;
  a2[1] = v2;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::LayerDataLogicContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1130;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x20C4093837F09);
  return a1;
}

void gdc::ManagedObjectHolder<md::LayerDataLogicContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1130;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x20C4093837F09);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::LayerDataLogicContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t pwin_jpg::generate_huf_nodes(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  char v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  int v24;
  _DWORD *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD **v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _OWORD *v33;
  int64x2_t v34;
  int64x2_t *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD **v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _OWORD *v45;
  int64x2_t v46;
  int64x2_t *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD **v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  _OWORD *v57;
  int64x2_t v58;
  int64x2_t *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD **v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  _OWORD *v69;
  int64x2_t v70;
  int64x2_t *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;

  v2 = 0;
  v3 = 0;
  LODWORD(v4) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_DWORD *)a2 = 1;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  do
  {
    v5 = v2 + 1;
    if (*(_BYTE *)(result + v2))
    {
      v6 = 0;
      v4 = (int)v4;
      v7 = 15 - v2;
      if (-(int)v2 < -3 || (_DWORD)v2 == 3)
        v8 = -3;
      else
        v8 = -(int)v2;
      v9 = v8 + 3;
      v10 = 1 << (v8 + 3);
      if (v10 <= 1)
        v11 = 1;
      else
        v11 = v10;
      v12 = 4 - v2;
      if (4 - (int)v2 < -3 || (_DWORD)v2 == 7)
        v12 = -3;
      v13 = v12 + 3;
      v14 = 1 << (v12 + 3);
      if (v14 <= 1)
        v15 = 1;
      else
        v15 = v14;
      v16 = 8 - v2;
      if (8 - (int)v2 < -3 || (_DWORD)v2 == 11)
        v16 = -3;
      v17 = v16 + 3;
      v18 = 1 << (v16 + 3);
      if (v18 <= 1)
        v19 = 1;
      else
        v19 = v18;
      v20 = 12 - v2;
      if (12 - (int)v2 <= -3)
        v20 = -3;
      v77 = v20 + 3;
      LODWORD(v21) = 1 << (v20 + 3);
      if ((int)v21 <= 1)
        v21 = 1;
      else
        v21 = v21;
      v76 = v21;
      v75 = v21 & 0x7FFFFFFC;
      do
      {
        v23 = v3;
        v24 = *(unsigned __int8 *)(result + v4 + 16);
        v25 = (_DWORD *)(a2 + 12 * *(unsigned __int8 *)(result + v4 + 16) + 73736);
        *v25 = v5;
        v25[1] = v23;
        v25[2] = v24;
        v26 = v23 << v7;
        v27 = (unsigned __int16)(v23 << v7) >> 12;
        v28 = a2 + 8 + 8 * v27;
        v30 = *(_QWORD *)(v28 + 16);
        v29 = (_DWORD **)(v28 + 16);
        if (!v30)
        {
          v31 = (*(_DWORD *)a2)++;
          v32 = a2 + 144 * v31;
          *(_OWORD *)(v32 + 8) = 0uLL;
          v33 = (_OWORD *)(v32 + 8);
          v33[1] = 0uLL;
          v33[2] = 0uLL;
          v33[3] = 0uLL;
          v33[4] = 0uLL;
          v33[5] = 0uLL;
          v33[6] = 0uLL;
          v33[7] = 0uLL;
          v33[8] = 0uLL;
          if (v9 != 31)
          {
            if (v11 < 4)
              goto LABEL_36;
            v34 = vdupq_n_s64((unint64_t)v33);
            v35 = (int64x2_t *)(a2 + 40 + 8 * v27);
            v36 = v11 & 0x7FFFFFFC;
            do
            {
              v35[-1] = v34;
              *v35 = v34;
              v35 += 2;
              v36 -= 4;
            }
            while (v36);
            if ((v11 & 0x7FFFFFFC) == 0)
            {
LABEL_36:
              v37 = (_QWORD *)(a2 + 24 + 8 * v27);
              v38 = v11;
              do
              {
                *v37++ = v33;
                --v38;
              }
              while (v38);
            }
          }
        }
        v22 = *v29;
        if (v2 >= 4)
        {
          v39 = (v26 >> 8) & 0xF;
          v40 = &v22[2 * v39];
          v42 = *((_QWORD *)v40 + 2);
          v41 = (_DWORD **)(v40 + 4);
          if (!v42)
          {
            v43 = (*(_DWORD *)a2)++;
            v44 = a2 + 144 * v43;
            *(_OWORD *)(v44 + 8) = 0uLL;
            v45 = (_OWORD *)(v44 + 8);
            v45[1] = 0uLL;
            v45[2] = 0uLL;
            v45[3] = 0uLL;
            v45[4] = 0uLL;
            v45[5] = 0uLL;
            v45[6] = 0uLL;
            v45[7] = 0uLL;
            v45[8] = 0uLL;
            if (v13 != 31)
            {
              if (v15 < 4)
                goto LABEL_45;
              v46 = vdupq_n_s64((unint64_t)v45);
              v47 = (int64x2_t *)&v22[2 * v39 + 8];
              v48 = v15 & 0x7FFFFFFC;
              do
              {
                v47[-1] = v46;
                *v47 = v46;
                v47 += 2;
                v48 -= 4;
              }
              while (v48);
              if ((v15 & 0x7FFFFFFC) == 0)
              {
LABEL_45:
                v49 = &v22[2 * v39 + 4];
                v50 = v15;
                do
                {
                  *v49++ = v45;
                  --v50;
                }
                while (v50);
              }
            }
          }
          v22 = *v41;
          if (v2 >= 8)
          {
            v51 = v26 >> 4;
            v52 = &v22[2 * v51];
            v54 = *((_QWORD *)v52 + 2);
            v53 = (_DWORD **)(v52 + 4);
            if (!v54)
            {
              v55 = (*(_DWORD *)a2)++;
              v56 = a2 + 144 * v55;
              *(_OWORD *)(v56 + 8) = 0uLL;
              v57 = (_OWORD *)(v56 + 8);
              v57[1] = 0uLL;
              v57[2] = 0uLL;
              v57[3] = 0uLL;
              v57[4] = 0uLL;
              v57[5] = 0uLL;
              v57[6] = 0uLL;
              v57[7] = 0uLL;
              v57[8] = 0uLL;
              if (v17 != 31)
              {
                if (v19 < 4)
                  goto LABEL_54;
                v58 = vdupq_n_s64((unint64_t)v57);
                v59 = (int64x2_t *)&v22[2 * v51 + 8];
                v60 = v19 & 0x7FFFFFFC;
                do
                {
                  v59[-1] = v58;
                  *v59 = v58;
                  v59 += 2;
                  v60 -= 4;
                }
                while (v60);
                if ((v19 & 0x7FFFFFFC) == 0)
                {
LABEL_54:
                  v61 = &v22[2 * v51 + 4];
                  v62 = v19;
                  do
                  {
                    *v61++ = v57;
                    --v62;
                  }
                  while (v62);
                }
              }
            }
            v22 = *v53;
            if (v2 >= 0xC)
            {
              v63 = v26 & 0xF;
              v64 = &v22[2 * v63];
              v66 = *((_QWORD *)v64 + 2);
              v65 = (_DWORD **)(v64 + 4);
              if (!v66)
              {
                v67 = (*(_DWORD *)a2)++;
                v68 = a2 + 144 * v67;
                *(_OWORD *)(v68 + 8) = 0uLL;
                v69 = (_OWORD *)(v68 + 8);
                v69[1] = 0uLL;
                v69[2] = 0uLL;
                v69[3] = 0uLL;
                v69[4] = 0uLL;
                v69[5] = 0uLL;
                v69[6] = 0uLL;
                v69[7] = 0uLL;
                v69[8] = 0uLL;
                if (v77 != 31)
                {
                  if (v76 < 4)
                    goto LABEL_63;
                  v70 = vdupq_n_s64((unint64_t)v69);
                  v71 = (int64x2_t *)&v22[2 * v63 + 8];
                  v72 = v75;
                  do
                  {
                    v71[-1] = v70;
                    *v71 = v70;
                    v71 += 2;
                    v72 -= 4;
                  }
                  while (v72);
                  if (!v75)
                  {
LABEL_63:
                    v73 = &v22[2 * v63 + 4];
                    v74 = v76;
                    do
                    {
                      *v73++ = v69;
                      --v74;
                    }
                    while (v74);
                  }
                }
              }
              v22 = *v65;
            }
          }
        }
        v3 = v23 + 1;
        ++v4;
        *v22 = v5;
        v22[1] = v23;
        v22[2] = v24;
        ++v6;
      }
      while (v6 < *(unsigned __int8 *)(result + v2));
    }
    v3 *= 2;
    ++v2;
  }
  while (v5 != 16);
  return result;
}

uint64_t pwin_jpg::p_info_mem_jpg(pwin_jpg *this, unsigned __int8 *a2, int *a3, int *a4, int *a5)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;

  if (((_DWORD)a2 + 4) < 2)
    return 0xFFFFFFFFLL;
  v6 = 0;
  if (*(unsigned __int8 *)this == 255 && *((unsigned __int8 *)this + 1) == 216)
  {
    v7 = (_DWORD)a2 + 5;
    v8 = 2;
    while (1)
    {
      do
      {
LABEL_6:
        v9 = v8;
        v10 = v8 + 1;
        if ((_DWORD)v10 == v7)
          return 0xFFFFFFFFLL;
        if (*((unsigned __int8 *)this + v9) != 255)
        {
          printf("Error SECTION_MARKER expected %x\n", *((unsigned __int8 *)this + v9));
          return 0;
        }
        v11 = v9 + 2;
        if ((_DWORD)v9 + 2 == v7)
          return 0xFFFFFFFFLL;
        v12 = *((unsigned __int8 *)this + v10);
        v8 = v9 + 2;
      }
      while (v12 == 216);
      if (v12 == 192)
        break;
      v8 = (_DWORD)a2 + 5;
      if ((_DWORD)v9 + 3 != v7)
      {
        v8 = (_DWORD)a2 + 5;
        if ((_DWORD)v9 + 4 != v7)
        {
          v13 = *((unsigned __int8 *)this + v9 + 3);
          v8 = v9 + 4;
          if ((v13 & 0xFFFF00FF | (*((unsigned __int8 *)this + v11) << 8)) >= 3)
          {
            v14 = (*((unsigned __int8 *)this + v11) << 8) + v13;
            v8 = v14 + v11;
            v15 = (_DWORD)a2 - v9;
            v16 = v14 - 2;
            while (v15)
            {
              --v15;
              if (!--v16)
                goto LABEL_6;
            }
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
    if ((_DWORD)v9 == (_DWORD)a2 + 2)
      v17 = (_DWORD)a2 + 5;
    else
      v17 = v9 + 4;
    v18 = v17 + 1;
    if ((_DWORD)v18 == v7)
      return 0xFFFFFFFFLL;
    v19 = v17 + 2;
    if (v17 + 2 == v7 || (v20 = v17 + 3, v20 == v7))
    {
      v21 = -1;
      v20 = (_DWORD)a2 + 5;
    }
    else
    {
      v21 = (*((unsigned __int8 *)this + v18) << 8) | *((unsigned __int8 *)this + v19);
    }
    *a4 = v21;
    v22 = v20 + 1;
    v23 = -1;
    if ((_DWORD)v22 != v7 && v20 != (_DWORD)a2 + 3)
      v23 = *((unsigned __int8 *)this + v22) | (*((unsigned __int8 *)this + v20) << 8);
    *a3 = v23;
    return 1;
  }
  return v6;
}

void md::FlyoverRouteOverlayCache::onPolylineSelectedInGroup(id *this, VKPolylineGroupOverlay *a2, VKPolylineOverlay *a3)
{
  VKPolylineOverlay *v4;
  id v5;
  VKPolylineOverlay *v6;
  uint64_t (**v7)();
  VKPolylineOverlay *v8;

  v4 = a3;
  objc_msgSend(this[3], "clearLineSelection");
  v5 = this[3];
  v6 = v4;
  v7 = &off_1E42B4CF0;
  v8 = v6;
  objc_msgSend(v5, "setSelected:selected:", &v7, 1);
  v7 = &off_1E42B4CF0;

}

void sub_19FAF2940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void md::FlyoverRouteOverlayCache::onPolylineSkippedInGroup(id *this, VKPolylineGroupOverlay *a2, VKPolylineOverlay *a3)
{
  VKPolylineOverlay *v4;
  id v5;
  VKPolylineOverlay *v6;
  uint64_t (**v7)();
  VKPolylineOverlay *v8;

  v4 = a3;
  objc_msgSend(this[3], "clearLineSkip");
  v5 = this[3];
  v6 = v4;
  v7 = &off_1E42B4CF0;
  v8 = v6;
  objc_msgSend(v5, "setSkipped:skipped:", &v7, 1);
  v7 = &off_1E42B4CF0;

}

void sub_19FAF29EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void md::FlyoverRouteOverlayCache::~FlyoverRouteOverlayCache(md::FlyoverRouteOverlayCache *this)
{
  *(_QWORD *)this = off_1E42A07F0;
  *((_QWORD *)this + 5) = &off_1E42B5190;

  *((_QWORD *)this + 2) = &off_1E42B4EF0;
}

{
  *(_QWORD *)this = off_1E42A07F0;
  *((_QWORD *)this + 5) = &off_1E42B5190;

  *((_QWORD *)this + 2) = &off_1E42B4EF0;
  JUMPOUT(0x1A1AF4E00);
}

id md::FlyoverRouteOverlayCache::polylineForRoute(id *this, GEOComposedRoute *a2)
{
  GEOComposedRoute *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  id v7;
  char isKindOfClass;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  GEOComposedRoute *v16;
  BOOL v17;
  GEOComposedRoute *v18;
  BOOL v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  id v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (_QWORD *)objc_msgSend(this[3], "persistentOverlays");
  v5 = v4 + 1;
  v6 = (_QWORD *)*v4;
  if ((_QWORD *)*v4 == v4 + 1)
  {
LABEL_19:
    v23 = 0;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = (id)v6[4];
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v9 = v7;
    v10 = v9;
    if ((isKindOfClass & 1) != 0)
    {
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      objc_msgSend(v9, "polylines", 0);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      if (v12)
      {
        v13 = *(_QWORD *)v26;
        while (2)
        {
          for (i = 0; i != v12; ++i)
          {
            if (*(_QWORD *)v26 != v13)
              objc_enumerationMutation(v11);
            v15 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
            objc_msgSend(v15, "composedRoute");
            v16 = (GEOComposedRoute *)objc_claimAutoreleasedReturnValue();
            v17 = v16 == v3;

            if (v17)
            {
              v23 = v15;

              goto LABEL_21;
            }
          }
          v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
          if (v12)
            continue;
          break;
        }
      }

      goto LABEL_13;
    }
    objc_msgSend(v9, "composedRoute");
    v18 = (GEOComposedRoute *)objc_claimAutoreleasedReturnValue();
    v19 = v18 == v3;

    if (v19)
      break;
LABEL_13:

    v20 = (_QWORD *)v6[1];
    if (v20)
    {
      do
      {
        v21 = v20;
        v20 = (_QWORD *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = (_QWORD *)v6[2];
        v22 = *v21 == (_QWORD)v6;
        v6 = v21;
      }
      while (!v22);
    }
    v6 = v21;
    if (v21 == v5)
      goto LABEL_19;
  }
  v23 = v10;
LABEL_21:

LABEL_22:
  return v23;
}

void sub_19FAF2CD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t md::FlyoverRouteOverlayCache::hasPolylineOverlay(id *this, VKPolylineOverlay *a2)
{
  VKPolylineOverlay *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  VKPolylineOverlay *v7;
  VKPolylineOverlay *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  VKPolylineOverlay **v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (_QWORD *)objc_msgSend(this[3], "persistentOverlays");
  v5 = v4 + 1;
  v6 = (_QWORD *)*v4;
  if ((_QWORD *)*v4 == v4 + 1)
  {
LABEL_24:
    v17 = 0;
    goto LABEL_27;
  }
  while (1)
  {
    v7 = (VKPolylineOverlay *)(id)v6[4];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      break;
    if (v7 == v3)
    {
      v8 = v3;
      goto LABEL_26;
    }
LABEL_18:

    v14 = (_QWORD *)v6[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = (_QWORD *)v6[2];
        v16 = *v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
    }
    v6 = v15;
    if (v15 == v5)
      goto LABEL_24;
  }
  v8 = v7;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  -[VKPolylineOverlay polylines](v8, "polylines", 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (!v10)
  {
LABEL_16:

    goto LABEL_18;
  }
  v11 = *(_QWORD *)v20;
LABEL_5:
  if (*(_QWORD *)v20 == v11)
  {
    v12 = (VKPolylineOverlay **)*((_QWORD *)&v19 + 1);
    while (*v12 != v3)
    {
      ++v12;
      if (!--v10)
        goto LABEL_15;
    }
  }
  else
  {
    v13 = 0;
    while (1)
    {
      if (*(_QWORD *)v20 != v11)
        objc_enumerationMutation(v9);
      if (*(VKPolylineOverlay **)(*((_QWORD *)&v19 + 1) + 8 * v13) == v3)
        break;
      if (v10 == ++v13)
      {
LABEL_15:
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
        if (v10)
          goto LABEL_5;
        goto LABEL_16;
      }
    }
  }

LABEL_26:
  v17 = 1;
LABEL_27:

  return v17;
}

void sub_19FAF2F18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t md::FlyoverRouteOverlayCache::routeLineHalfWidthAtZ(id *this, VKPolylineOverlay *a2, float a3)
{
  return objc_msgSend(this[3], "halfWidthForLine:styleZ:", a2);
}

uint64_t md::FlyoverRouteOverlayCache::isStandard(md::FlyoverRouteOverlayCache *this)
{
  return 0;
}

BOOL md::FlyoverRouteOverlayCache::addOverlay(uint64_t a1, void *a2, int a3)
{
  id v5;
  void *v6;

  v5 = a2;
  if (v5)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      objc_msgSend(*(id *)(a1 + 8), "startObserving:", v5);
    v6 = *(void **)(a1 + 24);
    if (a3)
      objc_msgSend(v6, "addPersistentOverlay:", v5);
    else
      objc_msgSend(v6, "addNonPersistentOverlay:", v5);
  }

  return v5 != 0;
}

void sub_19FAF2FFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::FlyoverRouteOverlayCache::removeOverlay(uint64_t a1, void *a2, int a3)
{
  id v5;
  void *v6;

  v5 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    objc_msgSend(*(id *)(a1 + 8), "stopObserving:", v5);
  v6 = *(void **)(a1 + 24);
  if (a3)
    objc_msgSend(v6, "removePersistentOverlay:", v5);
  else
    objc_msgSend(v6, "removeNonPersistentOverlay:", v5);

  return 1;
}

void sub_19FAF3090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::FlyoverRouteOverlayCache::update(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  id v12;
  void *v13;
  char v14;
  char v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  id v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v25;
  char *v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  int64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  id v54;
  void *v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  BOOL v59;
  _QWORD *v60;
  char *v61;
  int64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  int64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  void *v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  id *v86;
  id v87;
  void *v88;
  _QWORD *v89;
  unsigned int v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  char *v94;
  char *v95;
  unint64_t v96;

  v5 = a2 + 1;
  v6 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v12 = (id)v6[4];
      v13 = (void *)a1[3];
      if ((_DWORD)a3)
        v14 = objc_msgSend(v13, "hasPersistentOverlay:", v12);
      else
        v14 = objc_msgSend(v13, "hasNonPersistentOverlay:", v12);
      v15 = v14;

      if ((v15 & 1) == 0)
        (*(void (**)(_QWORD *, id, uint64_t))(*a1 + 88))(a1, v12, a3);

      v16 = (_QWORD *)v6[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v6[2];
          v18 = *v17 == (_QWORD)v6;
          v6 = v17;
        }
        while (!v18);
      }
      v6 = v17;
    }
    while (v17 != v5);
  }
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v7 = (void *)a1[3];
  v93 = v5;
  v90 = a3;
  v89 = a1;
  if ((a3 & 1) == 0)
  {
    v51 = (_QWORD *)objc_msgSend(v7, "nonPersistentOverlays");
    v52 = v51 + 1;
    v53 = (_QWORD *)*v51;
    if ((_QWORD *)*v51 == v51 + 1)
      goto LABEL_121;
    v11 = 0;
    v92 = v51 + 1;
    while (1)
    {
      v54 = (id)v53[4];
      v55 = v54;
      v56 = (_QWORD *)*v5;
      if (*v5)
      {
        v57 = v5;
        do
        {
          v58 = v56[4];
          v59 = v58 >= (unint64_t)v54;
          if (v58 >= (unint64_t)v54)
            v60 = v56;
          else
            v60 = v56 + 1;
          if (v59)
            v57 = v56;
          v56 = (_QWORD *)*v60;
        }
        while (*v60);
        if (v57 != v5 && (unint64_t)v54 >= v57[4])
          goto LABEL_104;
      }
      if ((unint64_t)v11 >= v96)
        break;
      *(_QWORD *)v11 = v54;
      v61 = v11 + 8;
LABEL_103:
      v95 = v61;
      v11 = v61;
LABEL_104:

      v76 = (_QWORD *)v53[1];
      if (v76)
      {
        do
        {
          v77 = v76;
          v76 = (_QWORD *)*v76;
        }
        while (v76);
      }
      else
      {
        do
        {
          v77 = (_QWORD *)v53[2];
          v18 = *v77 == (_QWORD)v53;
          v53 = v77;
        }
        while (!v18);
      }
      v53 = v77;
      if (v77 == v52)
        goto LABEL_122;
    }
    v62 = v11 - v94;
    v63 = (v11 - v94) >> 3;
    v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 61)
      abort();
    v65 = v96 - (_QWORD)v94;
    if ((uint64_t)(v96 - (_QWORD)v94) >> 2 > v64)
      v64 = v65 >> 2;
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
      v66 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v66 = v64;
    if (v66)
    {
      if (v66 >> 61)
LABEL_131:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v67 = (char *)operator new(8 * v66);
    }
    else
    {
      v67 = 0;
    }
    v68 = &v67[8 * v63];
    v69 = &v67[8 * v66];
    *(_QWORD *)v68 = v55;
    v61 = v68 + 8;
    v70 = v11 - v94;
    if (v11 == v94)
    {
      v94 = &v67[8 * v63];
      v96 = (unint64_t)v69;
      goto LABEL_111;
    }
    v71 = v70 - 8;
    if ((unint64_t)(v70 - 8) <= 0x137
      || (v78 = v71 & 0xFFFFFFFFFFFFFFF8, &v11[-(v71 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
      || &v67[v62 - 8 - v78] > &v67[v62 - 8]
      || (v79 = v71 >> 3, &v11[-8 * v79 - 8] < v68) && &v67[v62 - v78 - 8] < v11)
    {
      v72 = v11;
    }
    else
    {
      v80 = v79 + 1;
      v72 = &v11[-8 * (v80 & 0x3FFFFFFFFFFFFFFCLL)];
      v81 = &v67[8 * v63 - 16];
      v82 = v11 - 32;
      v83 = v80 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v85 = *(_OWORD *)v82;
        v84 = *((_OWORD *)v82 + 1);
        *(_OWORD *)v82 = 0uLL;
        *((_OWORD *)v82 + 1) = 0uLL;
        v82 -= 32;
        *((_OWORD *)v81 - 1) = v85;
        *(_OWORD *)v81 = v84;
        v81 -= 32;
        v83 -= 4;
      }
      while (v83);
      v68 -= 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
      if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_98:
        v11 = v94;
        v74 = v95;
        v94 = v68;
        v96 = (unint64_t)v69;
        if (v95 != v11)
        {
          v52 = v92;
          v5 = v93;
          do
          {
            v75 = (void *)*((_QWORD *)v74 - 1);
            v74 -= 8;

          }
          while (v74 != v11);
          if (!v11)
            goto LABEL_103;
LABEL_102:
          operator delete(v11);
          goto LABEL_103;
        }
LABEL_111:
        v52 = v92;
        v5 = v93;
        if (!v11)
          goto LABEL_103;
        goto LABEL_102;
      }
    }
    do
    {
      v73 = *((_QWORD *)v72 - 1);
      v72 -= 8;
      *(_QWORD *)v72 = 0;
      *((_QWORD *)v68 - 1) = v73;
      v68 -= 8;
    }
    while (v72 != v94);
    goto LABEL_98;
  }
  v8 = (_QWORD *)objc_msgSend(v7, "persistentOverlays");
  v9 = v8 + 1;
  v10 = (_QWORD *)*v8;
  if ((_QWORD *)*v8 != v8 + 1)
  {
    v11 = 0;
    v91 = v8 + 1;
    while (1)
    {
      v19 = (id)v10[4];
      v20 = v19;
      v21 = (_QWORD *)*v5;
      if (*v5)
      {
        v22 = v5;
        do
        {
          v23 = v21[4];
          v24 = v23 >= (unint64_t)v19;
          if (v23 >= (unint64_t)v19)
            v25 = v21;
          else
            v25 = v21 + 1;
          if (v24)
            v22 = v21;
          v21 = (_QWORD *)*v25;
        }
        while (*v25);
        if (v22 != v5 && (unint64_t)v19 >= v22[4])
          goto LABEL_51;
      }
      if ((unint64_t)v11 >= v96)
        break;
      *(_QWORD *)v11 = v19;
      v26 = v11 + 8;
LABEL_50:
      v95 = v26;
      v11 = v26;
LABEL_51:

      v41 = (_QWORD *)v10[1];
      if (v41)
      {
        do
        {
          v42 = v41;
          v41 = (_QWORD *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = (_QWORD *)v10[2];
          v18 = *v42 == (_QWORD)v10;
          v10 = v42;
        }
        while (!v18);
      }
      v10 = v42;
      if (v42 == v9)
        goto LABEL_122;
    }
    v27 = v11 - v94;
    v28 = (v11 - v94) >> 3;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 61)
      abort();
    v30 = v96 - (_QWORD)v94;
    if ((uint64_t)(v96 - (_QWORD)v94) >> 2 > v29)
      v29 = v30 >> 2;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
    {
      if (v31 >> 61)
        goto LABEL_131;
      v32 = (char *)operator new(8 * v31);
    }
    else
    {
      v32 = 0;
    }
    v33 = &v32[8 * v28];
    v34 = &v32[8 * v31];
    *(_QWORD *)v33 = v20;
    v26 = v33 + 8;
    v35 = v11 - v94;
    if (v11 == v94)
    {
      v94 = &v32[8 * v28];
      v96 = (unint64_t)v34;
      goto LABEL_58;
    }
    v36 = v35 - 8;
    if ((unint64_t)(v35 - 8) <= 0x137
      || (v43 = v36 & 0xFFFFFFFFFFFFFFF8, &v11[-(v36 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
      || &v32[v27 - 8 - v43] > &v32[v27 - 8]
      || (v44 = v36 >> 3, &v11[-8 * v44 - 8] < v33) && &v32[v27 - v43 - 8] < v11)
    {
      v37 = v11;
    }
    else
    {
      v45 = v44 + 1;
      v37 = &v11[-8 * (v45 & 0x3FFFFFFFFFFFFFFCLL)];
      v46 = &v32[8 * v28 - 16];
      v47 = v11 - 32;
      v48 = v45 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v50 = *(_OWORD *)v47;
        v49 = *((_OWORD *)v47 + 1);
        *(_OWORD *)v47 = 0uLL;
        *((_OWORD *)v47 + 1) = 0uLL;
        v47 -= 32;
        *((_OWORD *)v46 - 1) = v50;
        *(_OWORD *)v46 = v49;
        v46 -= 32;
        v48 -= 4;
      }
      while (v48);
      v33 -= 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
      if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_45:
        v11 = v94;
        v39 = v95;
        v94 = v33;
        v96 = (unint64_t)v34;
        if (v95 != v11)
        {
          v9 = v91;
          v5 = v93;
          do
          {
            v40 = (void *)*((_QWORD *)v39 - 1);
            v39 -= 8;

          }
          while (v39 != v11);
          if (!v11)
            goto LABEL_50;
LABEL_49:
          operator delete(v11);
          goto LABEL_50;
        }
LABEL_58:
        v9 = v91;
        v5 = v93;
        if (!v11)
          goto LABEL_50;
        goto LABEL_49;
      }
    }
    do
    {
      v38 = *((_QWORD *)v37 - 1);
      v37 -= 8;
      *(_QWORD *)v37 = 0;
      *((_QWORD *)v33 - 1) = v38;
      v33 -= 8;
    }
    while (v37 != v94);
    goto LABEL_45;
  }
LABEL_121:
  v11 = 0;
LABEL_122:
  if (v94 == v11)
  {
    if (v11)
LABEL_129:
      operator delete(v94);
  }
  else
  {
    v86 = (id *)v94;
    do
    {
      v87 = *v86;
      (*(void (**)(_QWORD *, id, _QWORD))(*v89 + 96))(v89, v87, v90);

      ++v86;
    }
    while (v86 != (id *)v11);
    if (v94)
    {
      do
      {
        v88 = (void *)*((_QWORD *)v11 - 1);
        v11 -= 8;

      }
      while (v11 != v94);
      goto LABEL_129;
    }
  }
}

void sub_19FAF36D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<VKTransitLineMarker * {__strong}>::~vector[abi:nn180100]((void **)va);
  _Unwind_Resume(a1);
}

uint64_t md::FlyoverRouteOverlayCache::overlaysInView(id *this)
{
  return objc_msgSend(this[3], "overlays");
}

uint64_t md::FlyoverRouteOverlayCache::persistentOverlays(id *this)
{
  return objc_msgSend(this[3], "persistentOverlays");
}

float md::FlyoverRouteOverlayCache::animationCompletionPercentage(md::FlyoverRouteOverlayCache *this, VKPolylineOverlay *a2)
{
  return 1.0;
}

uint64_t geo::_retain_ptr<VKGlobeLineContainer * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4EF0;

  return a1;
}

void geo::_retain_ptr<VKGlobeLineContainer * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4EF0;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<GlobeLineContainerDelegate * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5190;

  return a1;
}

void geo::_retain_ptr<GlobeLineContainerDelegate * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5190;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::TransitNode::debugString@<X0>(md::TransitNode *this@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  size_t v21;
  unint64_t v22;
  const void **v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *__p[2];
  char v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  unint64_t v35;
  void *v36[2];
  __int128 v37;
  int v38;
  uint64_t v39[19];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v39[0] = MEMORY[0x1E0DE4FE0] + 64;
  v31 = v9;
  *(uint64_t *)((char *)&v31 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v31 + *(_QWORD *)(v31 - 24));
  std::ios_base::init(v11, &v32);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v31 = v6 + 24;
  v39[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v32 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v36 = 0u;
  v37 = 0u;
  v38 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"\n <node>", 8);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)" drawAsXfer:", 12);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)" nodeIconType:", 14);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)", nodeType:", 11);
  v15 = (*(uint64_t (**)(md::TransitNode *))(*(_QWORD *)this + 56))(this);
  if (v15 == 2)
  {
    v16 = 6;
    v30 = 6;
    LODWORD(__p[0]) = 1752199759;
    v17 = 28257;
    goto LABEL_7;
  }
  if (v15 == 1)
  {
    v16 = 6;
    v30 = 6;
    LODWORD(__p[0]) = 1701994832;
    v17 = 29806;
LABEL_7:
    WORD2(__p[0]) = v17;
    BYTE6(__p[0]) = 0;
    goto LABEL_9;
  }
  if (v15)
  {
    v16 = 0;
    v30 = 0;
    LOBYTE(__p[0]) = 0;
  }
  else
  {
    v16 = 9;
    v30 = 9;
    strcpy((char *)__p, "Connected");
  }
LABEL_9:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)", tileZ:", 8);
  std::ostream::operator<<();
  if (v30 < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"\n   isActive:", 13);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)" isSelected:", 12);
  std::ostream::operator<<();
  if (a2)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"\n  TransitLineIDs:", 18);
    v19 = *((_QWORD *)this + 4);
    for (i = *((_QWORD *)this + 5); v19 != i; v19 += 8)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"\n   ", 4);
      std::ostream::operator<<();
    }
  }
  if ((v38 & 0x10) != 0)
  {
    v22 = *((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1) < v35)
    {
      *((_QWORD *)&v37 + 1) = v35;
      v22 = v35;
    }
    v23 = (const void **)&v34;
  }
  else
  {
    if ((v38 & 8) == 0)
    {
      v21 = 0;
      a3[23] = 0;
      goto LABEL_29;
    }
    v23 = (const void **)v33;
    v22 = v33[2];
  }
  v24 = *v23;
  v21 = v22 - (_QWORD)*v23;
  if (v21 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v21 >= 0x17)
  {
    v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v25 = v21 | 7;
    v26 = v25 + 1;
    v27 = operator new(v25 + 1);
    *((_QWORD *)a3 + 1) = v21;
    *((_QWORD *)a3 + 2) = v26 | 0x8000000000000000;
    *(_QWORD *)a3 = v27;
    a3 = v27;
    goto LABEL_28;
  }
  a3[23] = v21;
  if (v21)
LABEL_28:
    memmove(a3, v24, v21);
LABEL_29:
  a3[v21] = 0;
  v31 = *v8;
  *(uint64_t *)((char *)&v31 + *(_QWORD *)(v31 - 24)) = v8[3];
  v32 = v12 + 16;
  if (SBYTE7(v37) < 0)
    operator delete(v36[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v39);
}

void sub_19FAF3BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t md::TransitNode::parentID(md::TransitNode *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 256);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t md::TransitNode::initializeExternalIcon()
{
  return 0;
}

uint64_t md::TransitNode::updateExternalIcon(md::TransitNode *this, md::TransitNodeExternalIcon *a2)
{
  return 0;
}

void md::TransitOrphanNode::~TransitOrphanNode(md::TransitOrphanNode *this)
{
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E42939D0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1060C4067290D6BLL);
  *(_QWORD *)this = off_1E428C980;
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E42939D0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1060C4067290D6BLL);
  *(_QWORD *)this = off_1E428C980;
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

BOOL md::TransitOrphanNode::initializeExternalIcon(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  unsigned __int32 v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float v18;
  float v19;
  float v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  __int32 *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  __int32 *v30;
  __int32 *v31;
  float32x4_t v32;
  __int32 *v33;
  __int32 v34;
  float32x4_t v35;
  float v36;

  v6 = *(char *)(a1 + 60);
  *(_BYTE *)(a2 + 260) = *(_BYTE *)(a1 + 60);
  *(_BYTE *)(a2 + 70) = v6 != 2;
  *(_DWORD *)(a2 + 244) = *((_DWORD *)a3 + 8);
  v7 = md::TransitNodeTextureAtlas::infoForIcon(a4, v6, a3[1], *a3, 0);
  v8 = v7;
  if (v7)
  {
    md::TransitNodeExternalIcon::setDotTextureRect((float32x4_t *)a2, (__int8 *)v7, v7 + 8, (float *)(v7 + 24));
    v9 = *(_QWORD *)(a2 + 104);
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a2 + 112) - v9) >> 2);
    if (*(_QWORD *)(a2 + 112) == v9)
    {
      std::vector<md::TransitNodeExternalIcon::DotInfo>::__append((char **)(a2 + 104), 1 - v10);
      v9 = *(_QWORD *)(a2 + 104);
    }
    else if (v10 >= 2)
    {
      *(_QWORD *)(a2 + 112) = v9 + 20;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 320))
    {
      *(_DWORD *)(v9 + 8) = -1;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 32);
      if (v11 == *(_QWORD *)(a1 + 40))
      {
        v13 = -13224394;
      }
      else
      {
        v12 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)(*(_QWORD *)(*(_QWORD *)v11 + 64) + 32), (float32x4_t)vdupq_n_s32(0x437F0000u)));
        *(int16x4_t *)v12.i8 = vmovn_s32((int32x4_t)v12);
        v13 = vmovn_s16(v12).u32[0];
      }
      *(_DWORD *)(v9 + 8) = v13;
    }
    if (*(_BYTE *)(a2 + 260) == 2)
    {
      v14 = (float)(*(_DWORD *)(a2 + 248) + *(_DWORD *)(a2 + 252) / 2);
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 104);
      v16 = *(_QWORD *)(a2 + 112);
      if (v15 == v16)
      {
        v14 = (float)(*(_DWORD *)(a2 + 256) / 2);
        v20 = 0.0;
      }
      else
      {
        v17 = v16 - v15 - 20;
        if (v17 > 0x9F)
        {
          v21 = v17 / 0x14 + 1;
          v22 = v21 & 7;
          if ((v21 & 7) == 0)
            v22 = 8;
          v23 = v21 - v22;
          v24 = 20 * v23;
          v25 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
          v26 = (__int32 *)(v15 + 92);
          v27.i64[0] = 0x80000000800000;
          v27.i64[1] = 0x80000000800000;
          v28 = v25;
          v29.i64[0] = 0x80000000800000;
          v29.i64[1] = 0x80000000800000;
          do
          {
            v30 = v26 + 5;
            v31 = v26 + 10;
            v32.i32[0] = *(v26 - 20);
            v32.i32[1] = *(v26 - 15);
            v33 = v26 + 15;
            v32.i32[2] = *(v26 - 10);
            v32.i32[3] = *(v26 - 5);
            v34 = *v26;
            v26 += 40;
            v35.i32[0] = v34;
            v35.i32[1] = *v30;
            v35.i32[2] = *v31;
            v35.i32[3] = *v33;
            v27 = vmaxnmq_f32(v27, v32);
            v29 = vmaxnmq_f32(v29, v35);
            v25 = vminnmq_f32(v32, v25);
            v28 = vminnmq_f32(v35, v28);
            v23 -= 8;
          }
          while (v23);
          v15 += v24;
          v18 = vmaxnmvq_f32(vmaxnmq_f32(v27, v29));
          v19 = vminnmvq_f32(vminnmq_f32(v25, v28));
        }
        else
        {
          v18 = -3.4028e38;
          v19 = 3.4028e38;
        }
        do
        {
          v36 = *(float *)(v15 + 12);
          v18 = fmaxf(v18, v36);
          v19 = fminf(v36, v19);
          v15 += 20;
        }
        while (v15 != v16);
        v20 = (float)(v19 + v18) * 0.5;
        v14 = (float)(v18 - v20) + (float)(*(_DWORD *)(a2 + 256) / 2);
      }
      *(float32x2_t *)(a2 + 48) = vmul_n_f32(*(float32x2_t *)(a2 + 220), v20);
    }
    *(_BYTE *)(a2 + 64) = 1;
    *(float *)(a2 + 44) = v14;
  }
  return v8 != 0;
}

uint64_t md::TransitOrphanNode::transitNodeType(md::TransitOrphanNode *this)
{
  return 2;
}

void std::vector<md::TransitNodeExternalIcon::DotInfo>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v19;

  v5 = a1[1];
  v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v12 = 20 * ((20 * a2 - 20) / 0x14) + 20;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0xCCCCCCCCCCCCCCCLL)
      abort();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x666666666666666)
      v10 = 0xCCCCCCCCCCCCCCCLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xCCCCCCCCCCCCCCCLL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = (char *)operator new(20 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[20 * v7];
    v14 = &v11[20 * v10];
    v15 = 20 * ((20 * a2 - 20) / 0x14) + 20;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17];
        *(_QWORD *)(v18 - 20) = *(_QWORD *)&v5[v17 - 20];
        *((_DWORD *)v18 - 3) = *(_DWORD *)&v5[v17 - 12];
        v19 = *(_DWORD *)&v5[v17 - 8];
        *(v18 - 4) = v5[v17 - 4];
        *((_DWORD *)v18 - 2) = v19;
        v17 -= 20;
      }
      while (&v5[v17] != v6);
      v13 += v17;
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void md::TransitConnectedNode::~TransitConnectedNode(md::TransitConnectedNode *this)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E429A5A0;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E428C980;
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E429A5A0;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E428C980;
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::TransitConnectedNode::debugString@<X0>(md::TransitConnectedNode *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  md::TransitLine *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int ShouldDrawToEndPoint;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  md::TransitLine *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  id v45;
  const char *v46;
  size_t v47;
  _BYTE *v48;
  size_t v49;
  unint64_t v50;
  const void **v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  _QWORD *v58;
  int v59;
  int v60;
  void *__p[2];
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[3];
  uint64_t v66;
  unint64_t v67;
  void *v68[2];
  __int128 v69;
  int v70;
  uint64_t v71[20];

  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v71[0] = MEMORY[0x1E0DE4FE0] + 64;
  v63 = v7;
  *(uint64_t *)((char *)&v63 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v63 + *(_QWORD *)(v63 - 24));
  std::ios_base::init(v9, &v64);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v63 = v5 + 24;
  v71[0] = v6;
  std::streambuf::basic_streambuf();
  v64 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v68 = 0u;
  v69 = 0u;
  v70 = 16;
  md::TransitNode::debugString(this, a2, __p);
  if ((v62 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v62 & 0x80u) == 0)
    v11 = v62;
  else
    v11 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v63, (uint64_t)v10, v11);
  if ((char)v62 < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v63, (uint64_t)" dots:", 6);
  std::ostream::operator<<();
  v12 = (_QWORD *)*((_QWORD *)this + 12);
  if (v12 && a2)
  {
    objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("\n <junction>"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (_QWORD *)v12[3];
    if (v14 == v12 + 4)
    {
      v15 = 0;
    }
    else
    {
      v15 = 0;
      do
      {
        v16 = v14[4];
        v59 = v15;
        objc_msgSend(v13, "appendFormat:", CFSTR("\n   IncomingLink[%i]"), v15);
        v17 = *(_QWORD *)(v16 + 80);
        v18 = *(_QWORD *)(v16 + 88);
        if (v17 != v18)
        {
          v19 = 0;
          do
          {
            v20 = *(md::TransitLine **)(*(_QWORD *)v17 + 8);
            v21 = *(_QWORD *)(*((_QWORD *)v20 + 2) + 40);
            v22 = md::TransitLine::debugSystemName(v20);
            v23 = *(_QWORD *)v17 + 8;
            v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v23 + 16) + 16);
            if (!*(_QWORD *)v17)
              v23 = 0;
            ShouldDrawToEndPoint = geo::codec::transitLinkGetShouldDrawToEndPoint(**(_QWORD **)(v23 + 8), *(unsigned int *)(v23 + 36));
            if (*(_QWORD *)v17)
              v26 = *(_QWORD *)v17 + 8;
            else
              v26 = 0;
            objc_msgSend(v13, "appendFormat:", CFSTR("\n    line[uid:%llu,%i,%s,%s] draw[TO:%i, from:%i]"), v21, v19, v22, v24, ShouldDrawToEndPoint, geo::codec::transitLinkGetShouldDrawFromEndPoint(**(_QWORD ***)(v26 + 8), *(unsigned int *)(v26 + 36)));
            v19 = (v19 + 1);
            v17 += 8;
          }
          while (v17 != v18);
        }
        v27 = (_QWORD *)v14[1];
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (_QWORD *)v14[2];
            v29 = *v28 == (_QWORD)v14;
            v14 = v28;
          }
          while (!v29);
        }
        v15 = (v59 + 1);
        v14 = v28;
      }
      while (v28 != v12 + 4);
    }
    v30 = (_QWORD *)v12[6];
    v58 = v12 + 7;
    if (v30 != v12 + 7)
    {
      v31 = v15;
      do
      {
        v32 = v30[4];
        v60 = v31;
        objc_msgSend(v13, "appendFormat:", CFSTR("\n   OutgoingLink[%i]"), v31);
        v33 = *(_QWORD *)(v32 + 80);
        v34 = *(_QWORD *)(v32 + 88);
        if (v33 != v34)
        {
          v35 = 0;
          do
          {
            v36 = *(md::TransitLine **)(*(_QWORD *)v33 + 8);
            v37 = *(_QWORD *)(*((_QWORD *)v36 + 2) + 40);
            v38 = md::TransitLine::debugSystemName(v36);
            v39 = *(_QWORD *)v33 + 8;
            v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v39 + 16) + 16);
            if (!*(_QWORD *)v33)
              v39 = 0;
            v41 = geo::codec::transitLinkGetShouldDrawToEndPoint(**(_QWORD **)(v39 + 8), *(unsigned int *)(v39 + 36));
            if (*(_QWORD *)v33)
              v42 = *(_QWORD *)v33 + 8;
            else
              v42 = 0;
            objc_msgSend(v13, "appendFormat:", CFSTR("\n    line[uid:%llu,%i,%s,%s] draw[to:%i, FROM:%i]"), v37, v35, v38, v40, v41, geo::codec::transitLinkGetShouldDrawFromEndPoint(**(_QWORD ***)(v42 + 8), *(unsigned int *)(v42 + 36)));
            v35 = (v35 + 1);
            v33 += 8;
          }
          while (v33 != v34);
        }
        v43 = (_QWORD *)v30[1];
        if (v43)
        {
          do
          {
            v44 = v43;
            v43 = (_QWORD *)*v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            v44 = (_QWORD *)v30[2];
            v29 = *v44 == (_QWORD)v30;
            v30 = v44;
          }
          while (!v29);
        }
        v31 = (v60 + 1);
        v30 = v44;
      }
      while (v44 != v58);
    }
    v45 = objc_retainAutorelease(v13);
    v46 = (const char *)objc_msgSend(v45, "UTF8String");
    v47 = strlen(v46);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v63, (uint64_t)v46, v47);

  }
  if ((v70 & 0x10) != 0)
  {
    v50 = *((_QWORD *)&v69 + 1);
    v48 = (_BYTE *)a3;
    if (*((_QWORD *)&v69 + 1) < v67)
    {
      *((_QWORD *)&v69 + 1) = v67;
      v50 = v67;
    }
    v51 = (const void **)&v66;
  }
  else
  {
    v48 = (_BYTE *)a3;
    if ((v70 & 8) == 0)
    {
      v49 = 0;
      *(_BYTE *)(a3 + 23) = 0;
      goto LABEL_62;
    }
    v51 = (const void **)v65;
    v50 = v65[2];
  }
  v52 = *v51;
  v49 = v50 - (_QWORD)*v51;
  if (v49 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v49 >= 0x17)
  {
    v53 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v53 = v49 | 7;
    v54 = v53 + 1;
    v55 = operator new(v53 + 1);
    *(_QWORD *)(a3 + 8) = v49;
    *(_QWORD *)(a3 + 16) = v54 | 0x8000000000000000;
    *(_QWORD *)a3 = v55;
    v48 = v55;
    goto LABEL_61;
  }
  v48[23] = v49;
  if (v49)
LABEL_61:
    memmove(v48, v52, v49);
LABEL_62:
  v48[v49] = 0;
  v63 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v63 + *(_QWORD *)(v63 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v64 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v69) < 0)
    operator delete(v68[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v71);
}

void sub_19FAF4880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  void *v28;

  std::ostringstream::~ostringstream((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t md::TransitConnectedNode::initializeExternalIcon(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  int v8;
  float v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  __int8 v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  int v30;
  int v31;
  int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  char v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  BOOL v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  float v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  int v70;
  int16x8_t v71;
  float v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  float32x4_t v77;
  __int32 *v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  __int32 *v82;
  __int32 *v83;
  float32x4_t v84;
  __int32 *v85;
  __int32 v86;
  float32x4_t v87;
  float v88;
  float32x4_t v89;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 320))
  {
    if (*(_BYTE *)(a1 + 136))
    {
      v8 = *(_DWORD *)(a1 + 124);
      if (*(_DWORD *)(a1 + 132) == v8)
      {
        v9 = *(float *)(a1 + 120);
      }
      else
      {
        *(_DWORD *)(a1 + 132) = v8;
        v11 = *(_QWORD **)(a1 + 96);
        v12 = (_QWORD *)v11[3];
        v9 = 0.0;
        if (v12 != v11 + 4)
        {
          do
          {
            v40 = (_QWORD *)v12[1];
            v41 = v12;
            if (v40)
            {
              do
              {
                v42 = v40;
                v40 = (_QWORD *)*v40;
              }
              while (v40);
            }
            else
            {
              do
              {
                v42 = (_QWORD *)v41[2];
                v43 = *v42 == (_QWORD)v41;
                v41 = v42;
              }
              while (!v43);
            }
            v9 = fmaxf(v9, *(float *)(v12[4] + 152));
            v12 = v42;
          }
          while (v42 != v11 + 4);
        }
        v13 = (_QWORD *)v11[6];
        v14 = v11 + 7;
        if (v13 != v14)
        {
          do
          {
            v44 = (_QWORD *)v13[1];
            v45 = v13;
            if (v44)
            {
              do
              {
                v46 = v44;
                v44 = (_QWORD *)*v44;
              }
              while (v44);
            }
            else
            {
              do
              {
                v46 = (_QWORD *)v45[2];
                v43 = *v46 == (_QWORD)v45;
                v45 = v46;
              }
              while (!v43);
            }
            v9 = fmaxf(v9, *(float *)(v13[4] + 152));
            v13 = v46;
          }
          while (v46 != v14);
        }
        *(float *)(a1 + 120) = v9;
      }
      if (v9 < 3.0)
        v10 = 1;
      else
        v10 = 2;
    }
    else
    {
      v10 = 1;
    }
    *(_BYTE *)(a1 + 60) = v10;
  }
  else
  {
    v10 = *(unsigned __int8 *)(a1 + 60);
  }
  *(_BYTE *)(a2 + 260) = v10;
  *(_BYTE *)(a2 + 70) = v10 != 2;
  *(_DWORD *)(a2 + 240) = *(_DWORD *)(a1 + 128);
  result = md::TransitNodeTextureAtlas::infoForIcon(a4, (char)v10, a3[1], *a3, 0);
  if (result)
  {
    v16 = (_QWORD *)(result + 8);
    if (*(_BYTE *)(a1 + 60) == 2)
    {
      v17 = *(_DWORD *)(result + 32);
      v18 = *(_DWORD *)(result + 8);
      v19 = __OFSUB__(v18, v17);
      v20 = v18 - v17;
      if (v20 < 0 != v19)
        ++v20;
      v21 = v20 >> 1;
      v22 = *(_BYTE *)result;
      v23 = *(_BYTE *)(result + 4);
      *(_BYTE *)(a2 + 192) = *(_BYTE *)result;
      *(_BYTE *)(a2 + 193) = v23;
      v24 = v21 + v22;
      *(_BYTE *)(a2 + 194) = v21 + v22;
      *(_BYTE *)(a2 + 195) = v23;
      v25 = *(_BYTE *)(result + 12) + v23;
      *(_BYTE *)(a2 + 196) = v21 + v22;
      *(_BYTE *)(a2 + 197) = v25;
      v26 = *(_BYTE *)(result + 12) + v23;
      *(_BYTE *)(a2 + 198) = v22;
      *(_BYTE *)(a2 + 199) = v26;
      v27 = v21 + v17;
      v28 = v22 + v27;
      *(_BYTE *)(a2 + 200) = v28;
      *(_BYTE *)(a2 + 201) = v23;
      v29 = v24 + v27;
      *(_BYTE *)(a2 + 202) = v29;
      *(_BYTE *)(a2 + 203) = v23;
      *(_BYTE *)(a2 + 204) = v29;
      *(_BYTE *)(a2 + 205) = v25;
      *(_BYTE *)(a2 + 206) = v28;
      *(_BYTE *)(a2 + 207) = v26;
      v30 = *(_DWORD *)(result + 12);
      if (v30 >= 0)
        v31 = *(_DWORD *)(result + 12);
      else
        v31 = v30 + 1;
      v32 = v31 >> 1;
      v33 = (float)-v32;
      v34 = (float)(v30 - v32);
      *(float *)(a2 + 132) = v33;
      *(float *)(a2 + 140) = v33;
      *(float *)(a2 + 148) = v34;
      *(float *)(a2 + 156) = v34;
      *(float *)(a2 + 164) = v33;
      *(float *)(a2 + 172) = v33;
      *(float *)(a2 + 180) = v34;
      *(float *)(a2 + 188) = v34;
      *(_DWORD *)(a2 + 248) = v21;
      v35 = *(float *)(a2 + 244);
      if (v35 != 1.0)
      {
        *(_DWORD *)(a2 + 248) = (int)(float)(v35 * (float)v21);
        v36 = v35 * v33;
        *(float *)(a2 + 132) = v36;
        *(float *)(a2 + 140) = v36;
        v37 = v35 * v34;
        *(float *)(a2 + 148) = v37;
        *(float *)(a2 + 156) = v37;
        *(float *)(a2 + 164) = v36;
        *(float *)(a2 + 172) = v36;
        *(float *)(a2 + 180) = v37;
        *(float *)(a2 + 188) = v37;
      }
      v38 = md::TransitNodeTextureAtlas::infoForIcon(a4, *(char *)(a1 + 60), a3[1], *a3, 1);
      if (v38 && *v16 == *(_QWORD *)(v38 + 8))
      {
        *(_BYTE *)(a2 + 262) = 1;
        *(_DWORD *)(a2 + 228) = *(_DWORD *)(v38 + 16);
        *(_DWORD *)(a2 + 232) = *(_DWORD *)(v38 + 20);
        v39 = *(_BYTE *)(v38 + 4) - *(_BYTE *)(a2 + 193);
        *(_BYTE *)(a2 + 208) = *(_BYTE *)v38 - *(_BYTE *)(a2 + 192);
        *(_BYTE *)(a2 + 209) = v39;
      }
    }
    else
    {
      md::TransitNodeExternalIcon::setDotTextureRect((float32x4_t *)a2, (__int8 *)result, (uint64_t)v16, (float *)(result + 24));
    }
    v47 = *(unsigned __int8 *)(a1 + 60);
    if (*(_BYTE *)(a1 + 60))
    {
      if (v47 != 1)
      {
        if (v47 != 2)
          return 1;
        *(_DWORD *)(a2 + 212) = *(_DWORD *)(a1 + 104);
        *(_DWORD *)(a2 + 216) = *(_DWORD *)(a1 + 108);
LABEL_45:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2);
        return 1;
      }
      v53 = *(_QWORD *)(a2 + 104);
      v54 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a2 + 112) - v53) >> 2);
      if (*(_QWORD *)(a2 + 112) == v53)
      {
        std::vector<md::TransitNodeExternalIcon::DotInfo>::__append((char **)(a2 + 104), 1 - v54);
        v53 = *(_QWORD *)(a2 + 104);
      }
      else if (v54 >= 2)
      {
        *(_QWORD *)(a2 + 112) = v53 + 20;
      }
      *(_DWORD *)(v53 + 8) = -1;
      if (*(_BYTE *)(a2 + 260) == 2)
      {
        v55 = (float)(*(_DWORD *)(a2 + 248) + *(_DWORD *)(a2 + 252) / 2);
      }
      else
      {
        v56 = *(_QWORD *)(a2 + 104);
        v57 = *(_QWORD *)(a2 + 112);
        if (v56 == v57)
        {
          v55 = (float)(*(_DWORD *)(a2 + 256) / 2);
          v72 = 0.0;
        }
        else
        {
          v58 = v57 - v56 - 20;
          if (v58 > 0x9F)
          {
            v73 = v58 / 0x14 + 1;
            v74 = v73 & 7;
            if ((v73 & 7) == 0)
              v74 = 8;
            v75 = v73 - v74;
            v76 = 20 * v75;
            v77 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
            v78 = (__int32 *)(v56 + 92);
            v79.i64[0] = 0x80000000800000;
            v79.i64[1] = 0x80000000800000;
            v80 = v77;
            v81.i64[0] = 0x80000000800000;
            v81.i64[1] = 0x80000000800000;
            do
            {
              v82 = v78 + 5;
              v83 = v78 + 10;
              v84.i32[0] = *(v78 - 20);
              v84.i32[1] = *(v78 - 15);
              v85 = v78 + 15;
              v84.i32[2] = *(v78 - 10);
              v84.i32[3] = *(v78 - 5);
              v86 = *v78;
              v78 += 40;
              v87.i32[0] = v86;
              v87.i32[1] = *v82;
              v87.i32[2] = *v83;
              v87.i32[3] = *v85;
              v79 = vmaxnmq_f32(v79, v84);
              v81 = vmaxnmq_f32(v81, v87);
              v77 = vminnmq_f32(v84, v77);
              v80 = vminnmq_f32(v87, v80);
              v75 -= 8;
            }
            while (v75);
            v56 += v76;
            v59 = vmaxnmvq_f32(vmaxnmq_f32(v79, v81));
            v60 = vminnmvq_f32(vminnmq_f32(v77, v80));
          }
          else
          {
            v59 = -3.4028e38;
            v60 = 3.4028e38;
          }
          do
          {
            v88 = *(float *)(v56 + 12);
            v59 = fmaxf(v59, v88);
            v60 = fminf(v88, v60);
            v56 += 20;
          }
          while (v56 != v57);
          v72 = (float)(v60 + v59) * 0.5;
          v55 = (float)(v59 - v72) + (float)(*(_DWORD *)(a2 + 256) / 2);
        }
        *(float32x2_t *)(a2 + 48) = vmul_n_f32(*(float32x2_t *)(a2 + 220), v72);
      }
      result = 1;
      *(_BYTE *)(a2 + 64) = 1;
      *(float *)(a2 + 44) = v55;
    }
    else
    {
      v48 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
      if (v48)
      {
        v49 = v48 / 24;
        v51 = (_QWORD *)(a2 + 104);
        v50 = *(_QWORD *)(a2 + 104);
        *(_DWORD *)(a2 + 220) = *(_DWORD *)(a1 + 112);
        *(_DWORD *)(a2 + 224) = *(_DWORD *)(a1 + 116);
        v52 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a2 + 112) - v50) >> 2);
        if (v49 <= v52)
        {
          if (v49 < v52)
            *(_QWORD *)(a2 + 112) = v50 + 20 * v49;
        }
        else
        {
          std::vector<md::TransitNodeExternalIcon::DotInfo>::__append((char **)(a2 + 104), v49 - v52);
        }
        v61 = 0;
        if (v49 <= 1)
          v62 = 1;
        else
          v62 = v49;
        v63 = 16;
        v89 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        do
        {
          v64 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 72) + v63);
          if (v64)
          {
            v65 = *(_QWORD *)v64;
            v66 = v64[52];
            v67 = *(_QWORD *)(*(_QWORD *)v64 + 64);
            md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary(*(uint64_t **)v64, v66);
            v68 = v67 + 184 * v66;
            v70 = *(unsigned __int8 *)(v68 + 177);
            v69 = (_BYTE *)(v68 + 177);
            if (v70)
            {
              md::TransitLine::_resolveStyle(v65, *(_DWORD *)(v65 + 60), *(_QWORD *)(v67 + 184 * v66), *(std::__shared_weak_count **)(v67 + 184 * v66 + 8), v67 + 184 * v66 + 16);
              *v69 = 0;
            }
            v71 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)(v67 + 184 * v66 + 32), v89));
            *(int16x4_t *)v71.i8 = vmovn_s32((int32x4_t)v71);
            *(_DWORD *)(*v51 + v61 + 8) = vmovn_s16(v71).u32[0];
            LOBYTE(v64) = *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a1 + 72) + v63) + 88);
          }
          else
          {
            *(_DWORD *)(*v51 + v61 + 8) = -13224394;
          }
          *(_BYTE *)(*v51 + v61 + 16) = (_BYTE)v64;
          v61 += 20;
          v63 += 24;
          --v62;
        }
        while (v62);
        goto LABEL_45;
      }
      return 0;
    }
  }
  return result;
}

BOOL md::TransitConnectedNode::updateExternalIcon(md::TransitConnectedNode *this, md::TransitNodeExternalIcon *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float32x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  _BOOL8 result;
  float v14;
  unint64_t v15;
  float v16;
  float *v17;
  float v18;
  float v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  float v24;
  int v25;
  int v26;
  int v27;
  float v28;
  float v29;
  float v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  BOOL v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;

  if (*((_BYTE *)this + 64) != 1)
    return 0;
  v4 = *((unsigned __int8 *)a2 + 260);
  if (v4 != *((unsigned __int8 *)this + 60))
    return 1;
  v5 = *((_DWORD *)this + 31);
  if (*((_DWORD *)a2 + 59) == v5)
    return 0;
  *((_DWORD *)a2 + 59) = v5;
  switch(v4)
  {
    case 2:
      if (*((_DWORD *)this + 33) == v5)
      {
        v18 = *((float *)this + 30);
      }
      else
      {
        *((_DWORD *)this + 33) = v5;
        v20 = (_QWORD *)*((_QWORD *)this + 12);
        v21 = (_QWORD *)v20[3];
        v18 = 0.0;
        if (v21 != v20 + 4)
        {
          do
          {
            v31 = (_QWORD *)v21[1];
            v32 = v21;
            if (v31)
            {
              do
              {
                v33 = v31;
                v31 = (_QWORD *)*v31;
              }
              while (v31);
            }
            else
            {
              do
              {
                v33 = (_QWORD *)v32[2];
                v34 = *v33 == (_QWORD)v32;
                v32 = v33;
              }
              while (!v34);
            }
            v18 = fmaxf(v18, *(float *)(v21[4] + 152));
            v21 = v33;
          }
          while (v33 != v20 + 4);
        }
        v22 = (_QWORD *)v20[6];
        v23 = v20 + 7;
        if (v22 != v23)
        {
          do
          {
            v35 = (_QWORD *)v22[1];
            v36 = v22;
            if (v35)
            {
              do
              {
                v37 = v35;
                v35 = (_QWORD *)*v35;
              }
              while (v35);
            }
            else
            {
              do
              {
                v37 = (_QWORD *)v36[2];
                v34 = *v37 == (_QWORD)v36;
                v36 = v37;
              }
              while (!v34);
            }
            v18 = fmaxf(v18, *(float *)(v22[4] + 152));
            v22 = v37;
          }
          while (v37 != v23);
        }
        *((float *)this + 30) = v18;
      }
      result = v18 < 2.0;
      v24 = *((float *)this + 14) * v18;
      *((_DWORD *)a2 + 63) = (int)v24;
      v25 = (int)v24 / 2;
      v26 = *((_DWORD *)a2 + 62);
      v27 = -(v26 + v25);
      v28 = (float)((int)v24 / -2);
      *((float *)a2 + 32) = (float)v27;
      *((float *)a2 + 34) = v28;
      *((float *)a2 + 36) = v28;
      *((float *)a2 + 38) = (float)v27;
      v29 = v28 + truncf(v24);
      *((float *)a2 + 40) = v29;
      v30 = v29 + (float)v26;
      *((float *)a2 + 42) = v30;
      *((float *)a2 + 44) = v30;
      *((float *)a2 + 46) = v29;
      *((_BYTE *)a2 + 64) = 1;
      *((float *)a2 + 11) = (float)(v26 + v25);
      break;
    case 1:
      if (!*((_BYTE *)this + 136))
        return 0;
      if (*((_DWORD *)this + 33) == v5)
      {
        v19 = *((float *)this + 30);
      }
      else
      {
        *((_DWORD *)this + 33) = v5;
        v38 = (_QWORD *)*((_QWORD *)this + 12);
        v39 = (_QWORD *)v38[3];
        v19 = 0.0;
        if (v39 != v38 + 4)
        {
          do
          {
            v42 = (_QWORD *)v39[1];
            v43 = v39;
            if (v42)
            {
              do
              {
                v44 = v42;
                v42 = (_QWORD *)*v42;
              }
              while (v42);
            }
            else
            {
              do
              {
                v44 = (_QWORD *)v43[2];
                v34 = *v44 == (_QWORD)v43;
                v43 = v44;
              }
              while (!v34);
            }
            v19 = fmaxf(v19, *(float *)(v39[4] + 152));
            v39 = v44;
          }
          while (v44 != v38 + 4);
        }
        v40 = (_QWORD *)v38[6];
        v41 = v38 + 7;
        if (v40 != v41)
        {
          do
          {
            v45 = (_QWORD *)v40[1];
            v46 = v40;
            if (v45)
            {
              do
              {
                v47 = v45;
                v45 = (_QWORD *)*v45;
              }
              while (v45);
            }
            else
            {
              do
              {
                v47 = (_QWORD *)v46[2];
                v34 = *v47 == (_QWORD)v46;
                v46 = v47;
              }
              while (!v34);
            }
            v19 = fmaxf(v19, *(float *)(v40[4] + 152));
            v40 = v47;
          }
          while (v47 != v41);
        }
        *((float *)this + 30) = v19;
      }
      return v19 > 4.0;
    case 0:
      if (*((_DWORD *)a2 + 60) == *((_DWORD *)this + 32))
      {
        v6 = *((_QWORD *)this + 9);
        v7 = *((_QWORD *)this + 10);
        v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3);
        v9 = (float32x2_t *)*((_QWORD *)a2 + 13);
        if (v8 == 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 14) - (_QWORD)v9) >> 2))
        {
          if (v7 != v6)
          {
            v10 = 0;
            v11 = *((_QWORD *)this + 12);
            v12 = (unint64_t *)(v6 + 16);
            do
            {
              v15 = *v12;
              v16 = 0.0;
              if (*v12 && v11 && !*(_BYTE *)(v15 + 55))
              {
                v17 = (float *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((_QWORD *)(v11 + 168), v15);
                if (v17)
                  v16 = v17[7];
              }
              *((float *)v12 - 2) = v16;
              v14 = *((float *)this + 14) * v16;
              v9[1].f32[1] = v14;
              *v9 = vmul_n_f32((float32x2_t)*(v12 - 2), v14);
              v9 = (float32x2_t *)((char *)v9 + 20);
              ++v10;
              v12 += 3;
            }
            while (v10 < v8);
          }
          md::TransitNodeExternalIcon::updateRadius((uint64_t)a2);
          return 0;
        }
      }
      return 1;
    default:
      return 0;
  }
  return result;
}

void md::TransitConnectedNode::didUpdateTransitLinks(md::TransitConnectedNode *this, int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  v2 = *((_DWORD *)this + 31);
  if ((v2 + 1) > 1)
    v3 = v2 + 1;
  else
    v3 = 1;
  *((_DWORD *)this + 31) = v3;
  if (a2)
  {
    v5 = *((_DWORD *)this + 32);
    if ((v5 + 1) > 1)
      v6 = v5 + 1;
    else
      v6 = 1;
    *((_DWORD *)this + 32) = v6;
    if (*((_BYTE *)this + 60) || (md::TransitConnectedNode::createDots(this), *((_BYTE *)this + 60)))
    {
      v7 = (_QWORD *)*((_QWORD *)this + 12);
      v8 = (_QWORD *)v7[3];
      if (v8 == v7 + 4)
      {
        v9 = 0;
      }
      else
      {
        v9 = 0;
        do
        {
          if (v9 <= (uint64_t)(*(_QWORD *)(v8[4] + 112) - *(_QWORD *)(v8[4] + 104)) >> 3)
            v9 = (uint64_t)(*(_QWORD *)(v8[4] + 112) - *(_QWORD *)(v8[4] + 104)) >> 3;
          v10 = (_QWORD *)v8[1];
          if (v10)
          {
            do
            {
              v11 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              v11 = (_QWORD *)v8[2];
              v12 = *v11 == (_QWORD)v8;
              v8 = v11;
            }
            while (!v12);
          }
          v8 = v11;
        }
        while (v11 != v7 + 4);
      }
      v13 = (_QWORD *)v7[6];
      v14 = v7 + 7;
      if (v13 != v14)
      {
        do
        {
          if (v9 <= (uint64_t)(*(_QWORD *)(v13[4] + 112) - *(_QWORD *)(v13[4] + 104)) >> 3)
            v9 = (uint64_t)(*(_QWORD *)(v13[4] + 112) - *(_QWORD *)(v13[4] + 104)) >> 3;
          v15 = (_QWORD *)v13[1];
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v13[2];
              v12 = *v16 == (_QWORD)v13;
              v13 = v16;
            }
            while (!v12);
          }
          v13 = v16;
        }
        while (v16 != v14);
      }
      if (v9 != 2)
      {
LABEL_24:
        if (v9 != 1)
        {
          if (!v9)
          {
            *((_BYTE *)this + 61) = 0;
            return;
          }
          if (v9 > 4)
            LOBYTE(v9) = 4;
          else
            LOBYTE(v9) = 3;
        }
      }
    }
    else
    {
      v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 3);
      if (v9 != 2)
        goto LABEL_24;
    }
    *((_BYTE *)this + 61) = v9;
  }
}

uint64_t md::TransitConnectedNode::transitNodeType(md::TransitConnectedNode *this)
{
  return 0;
}

void md::TransitConnectedNode::createDots(md::TransitConnectedNode *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  md::TransitConnectedNode *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  unsigned int *v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int8x8_t *v26;
  _QWORD *v27;
  unsigned int v28;
  _QWORD *i;
  float *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unint64_t v36;
  float *v37;
  float *v38;
  unsigned int v39;
  float *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  float *v45;
  char *v46;
  char *v47;
  __int128 v48;
  char *v49;
  _QWORD **v50;
  _QWORD *v51;
  _QWORD *v52;
  unsigned int v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _BYTE *v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  unsigned int *v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int8x8_t *v84;
  _QWORD *v85;
  unsigned int v86;
  _QWORD *j;
  float *v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  unint64_t v94;
  float *v95;
  float *v96;
  unsigned int v97;
  float *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  float *v103;
  char *v104;
  char *v105;
  __int128 v106;
  char *v107;
  _QWORD **v108;
  _QWORD *v109;
  _QWORD *v110;
  unsigned int v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _BYTE *v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  _DWORD *v129;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t **v138;
  uint64_t *v139;
  uint64_t v140;

  *((_QWORD *)this + 10) = *((_QWORD *)this + 9);
  v139 = 0;
  v140 = 0;
  v138 = &v139;
  v1 = *((_QWORD *)this + 4);
  v2 = *((_QWORD *)this + 5);
  while (v1 != v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 16) + 40);
    v4 = &v139;
    v5 = &v139;
    if (v139)
    {
      v6 = v139;
      while (1)
      {
        while (1)
        {
          v5 = (uint64_t **)v6;
          v7 = v6[4];
          if (v3 >= v7)
            break;
          v6 = *v5;
          v4 = v5;
          if (!*v5)
            goto LABEL_12;
        }
        if (v7 >= v3)
          break;
        v6 = v5[1];
        if (!v6)
        {
          v4 = v5 + 1;
          goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:
      v8 = (uint64_t *)operator new(0x28uLL);
      v8[4] = v3;
      *v8 = 0;
      v8[1] = 0;
      v8[2] = (uint64_t)v5;
      *v4 = v8;
      if (*v138)
      {
        v138 = (uint64_t **)*v138;
        v8 = *v4;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v139, v8);
      ++v140;
    }
    v1 += 8;
  }
  v136 = 0;
  v137 = 0;
  v135 = &v136;
  v9 = this;
  v10 = (_QWORD *)*((_QWORD *)this + 12);
  v11 = (_QWORD *)v10[3];
  v131 = v10 + 4;
  if (v11 == v10 + 4)
  {
    v12 = 0;
    goto LABEL_108;
  }
  v12 = 0;
  while (2)
  {
    v13 = (_QWORD *)v11[4];
    v14 = (_QWORD *)v13[10];
    v15 = (_QWORD *)v13[11];
    if (v14 == v15 || !v139)
      goto LABEL_19;
    while (2)
    {
      if (*v14)
        v19 = (unsigned int *)(*v14 + 8);
      else
        v19 = 0;
      v20 = v139;
      if (!v139)
        goto LABEL_28;
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 16) + 40);
      while (1)
      {
        v22 = v20[4];
        if (v21 < v22)
          goto LABEL_35;
        if (v22 >= v21)
          break;
        ++v20;
LABEL_35:
        v20 = (uint64_t *)*v20;
        if (!v20)
          goto LABEL_28;
      }
      v23 = v19[10];
      v24 = v13[13];
      if (v23 >= (v13[14] - v24) >> 3)
        v25 = 0;
      else
        v25 = *(_QWORD *)(v24 + 8 * v23);
      v26 = (int8x8_t *)*((_QWORD *)v9 + 12);
      v27 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(&v26[21], v25);
      if (v27)
      {
        v28 = *((_DWORD *)v27 + 6);
        if (!v25)
          goto LABEL_28;
      }
      else
      {
        v28 = 0;
        if (!v25)
          goto LABEL_28;
      }
      for (i = v136; i; i = (_QWORD *)*i)
      {
        v39 = *((_DWORD *)i + 7);
        if (v28 >= v39)
        {
          if (v39 >= v28)
            goto LABEL_28;
          ++i;
        }
      }
      if (!v12)
        v12 = v25;
      v30 = (float *)md::TransitJunction::normalForLineSegment(v26, v25);
      if (v30)
      {
        v133 = v12;
        v31 = *v30;
        v32 = v30[1];
        v33 = sqrtf((float)(v31 * v31) + (float)(v32 * v32));
        v34 = 0.0;
        v35 = 0.0;
        if (v33 > 0.01)
        {
          v34 = (float)-v31 / v33;
          v35 = (float)-v32 / v33;
        }
        v37 = (float *)*((_QWORD *)v9 + 10);
        v36 = *((_QWORD *)v9 + 11);
        if ((unint64_t)v37 >= v36)
        {
          v40 = (float *)*((_QWORD *)v9 + 9);
          v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v40) >> 3) + 1;
          if (v41 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)v40) >> 3);
          if (2 * v42 > v41)
            v41 = 2 * v42;
          if (v42 >= 0x555555555555555)
            v43 = 0xAAAAAAAAAAAAAAALL;
          else
            v43 = v41;
          if (v43 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_217;
          v44 = (char *)operator new(24 * v43);
          v45 = (float *)&v44[8 * (((char *)v37 - (char *)v40) >> 3)];
          *v45 = v34;
          v45[1] = v35;
          v45[2] = 0.0;
          *((_QWORD *)v45 + 2) = v25;
          if (v37 == v40)
          {
            v47 = &v44[8 * (((char *)v37 - (char *)v40) >> 3)];
          }
          else
          {
            v46 = &v44[8 * (((char *)v37 - (char *)v40) >> 3)];
            do
            {
              v47 = v46 - 24;
              v48 = *(_OWORD *)(v37 - 6);
              *((_QWORD *)v46 - 1) = *((_QWORD *)v37 - 1);
              *(_OWORD *)(v46 - 24) = v48;
              v37 -= 6;
              v46 -= 24;
            }
            while (v37 != v40);
          }
          v49 = &v44[24 * v43];
          v38 = v45 + 6;
          v9 = this;
          *((_QWORD *)this + 9) = v47;
          *((_QWORD *)this + 10) = v45 + 6;
          *((_QWORD *)this + 11) = v49;
          if (v40)
            operator delete(v40);
        }
        else
        {
          *v37 = v34;
          v37[1] = v35;
          v37[2] = 0.0;
          v38 = v37 + 6;
          *((_QWORD *)v37 + 2) = v25;
        }
        v50 = &v136;
        v12 = v133;
        *((_QWORD *)v9 + 10) = v38;
        v51 = v136;
        v52 = &v136;
        if (v136)
        {
          while (1)
          {
            while (1)
            {
              v50 = (_QWORD **)v51;
              v53 = *((_DWORD *)v51 + 7);
              if (v28 >= v53)
                break;
              v51 = *v50;
              v52 = v50;
              if (!*v50)
                goto LABEL_78;
            }
            if (v53 >= v28)
              break;
            v51 = v50[1];
            if (!v51)
            {
              v52 = v50 + 1;
              goto LABEL_78;
            }
          }
        }
        else
        {
LABEL_78:
          v54 = operator new(0x20uLL);
          *((_DWORD *)v54 + 7) = v28;
          *v54 = 0;
          v54[1] = 0;
          v54[2] = v50;
          *v52 = v54;
          if (*v135)
          {
            v135 = (_QWORD *)*v135;
            v54 = (_QWORD *)*v52;
          }
          v55 = v136;
          v18 = v54 == v136;
          *((_BYTE *)v54 + 24) = v54 == v136;
          if (!v18)
          {
            do
            {
              v56 = v54[2];
              if (*(_BYTE *)(v56 + 24))
                break;
              v57 = *(_QWORD **)(v56 + 16);
              v58 = *v57;
              if (*v57 == v56)
              {
                v61 = v57[1];
                if (!v61 || (v62 = *(unsigned __int8 *)(v61 + 24), v59 = (_BYTE *)(v61 + 24), v62))
                {
                  if (*(_QWORD **)v56 == v54)
                  {
                    v63 = (uint64_t *)v54[2];
                  }
                  else
                  {
                    v63 = *(uint64_t **)(v56 + 8);
                    v64 = *v63;
                    *(_QWORD *)(v56 + 8) = *v63;
                    if (v64)
                    {
                      *(_QWORD *)(v64 + 16) = v56;
                      v57 = *(_QWORD **)(v56 + 16);
                    }
                    v63[2] = (uint64_t)v57;
                    *(_QWORD *)(*(_QWORD *)(v56 + 16) + 8 * (**(_QWORD **)(v56 + 16) != v56)) = v63;
                    *v63 = v56;
                    *(_QWORD *)(v56 + 16) = v63;
                    v57 = (_QWORD *)v63[2];
                    v56 = *v57;
                  }
                  *((_BYTE *)v63 + 24) = 1;
                  *((_BYTE *)v57 + 24) = 0;
                  v67 = *(_QWORD *)(v56 + 8);
                  *v57 = v67;
                  if (v67)
                    *(_QWORD *)(v67 + 16) = v57;
                  *(_QWORD *)(v56 + 16) = v57[2];
                  *(_QWORD *)(v57[2] + 8 * (*(_QWORD *)v57[2] != (_QWORD)v57)) = v56;
                  *(_QWORD *)(v56 + 8) = v57;
                  goto LABEL_26;
                }
              }
              else if (!v58 || (v60 = *(unsigned __int8 *)(v58 + 24), v59 = (_BYTE *)(v58 + 24), v60))
              {
                if (*(_QWORD **)v56 == v54)
                {
                  v65 = v54[1];
                  *(_QWORD *)v56 = v65;
                  if (v65)
                  {
                    *(_QWORD *)(v65 + 16) = v56;
                    v57 = *(_QWORD **)(v56 + 16);
                  }
                  v54[2] = v57;
                  *(_QWORD *)(*(_QWORD *)(v56 + 16) + 8 * (**(_QWORD **)(v56 + 16) != v56)) = v54;
                  v54[1] = v56;
                  *(_QWORD *)(v56 + 16) = v54;
                  v57 = (_QWORD *)v54[2];
                }
                else
                {
                  v54 = (_QWORD *)v54[2];
                }
                *((_BYTE *)v54 + 24) = 1;
                *((_BYTE *)v57 + 24) = 0;
                v56 = v57[1];
                v66 = *(_QWORD **)v56;
                v57[1] = *(_QWORD *)v56;
                if (v66)
                  v66[2] = v57;
                *(_QWORD *)(v56 + 16) = v57[2];
                *(_QWORD *)(v57[2] + 8 * (*(_QWORD *)v57[2] != (_QWORD)v57)) = v56;
                *(_QWORD *)v56 = v57;
LABEL_26:
                v57[2] = v56;
                break;
              }
              *(_BYTE *)(v56 + 24) = 1;
              v54 = v57;
              *((_BYTE *)v57 + 24) = v57 == v55;
              *v59 = 1;
            }
            while (v57 != v55);
          }
          ++v137;
        }
      }
LABEL_28:
      if (++v14 != v15)
        continue;
      break;
    }
LABEL_19:
    v16 = (_QWORD *)v11[1];
    if (v16)
    {
      do
      {
        v17 = v16;
        v16 = (_QWORD *)*v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        v17 = (_QWORD *)v11[2];
        v18 = *v17 == (_QWORD)v11;
        v11 = v17;
      }
      while (!v18);
    }
    v11 = v17;
    if (v17 != v131)
      continue;
    break;
  }
  v10 = (_QWORD *)*((_QWORD *)v9 + 12);
LABEL_108:
  v68 = (_QWORD *)v10[6];
  v132 = v10 + 7;
  if (v68 != v10 + 7)
  {
    while (1)
    {
      v72 = (_QWORD *)v68[4];
      v73 = (_QWORD *)v72[10];
      v74 = (_QWORD *)v72[11];
      if (v73 != v74)
      {
        if (v139)
          break;
      }
LABEL_115:
      v75 = (_QWORD *)v68[1];
      if (v75)
      {
        do
        {
          v76 = v75;
          v75 = (_QWORD *)*v75;
        }
        while (v75);
      }
      else
      {
        do
        {
          v76 = (_QWORD *)v68[2];
          v18 = *v76 == (_QWORD)v68;
          v68 = v76;
        }
        while (!v18);
      }
      v68 = v76;
      if (v76 == v132)
        goto LABEL_109;
    }
LABEL_125:
    if (*v73)
      v77 = (unsigned int *)(*v73 + 8);
    else
      v77 = 0;
    v78 = v139;
    if (!v139)
      goto LABEL_124;
    v79 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v77 + 16) + 40);
    while (1)
    {
      v80 = v78[4];
      if (v79 >= v80)
      {
        if (v80 >= v79)
        {
          v81 = v77[10];
          v82 = v72[13];
          if (v81 >= (v72[14] - v82) >> 3)
            v83 = 0;
          else
            v83 = *(_QWORD *)(v82 + 8 * v81);
          v84 = (int8x8_t *)*((_QWORD *)v9 + 12);
          v85 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(&v84[21], v83);
          if (v85)
          {
            v86 = *((_DWORD *)v85 + 6);
            if (!v83)
              goto LABEL_124;
          }
          else
          {
            v86 = 0;
            if (!v83)
              goto LABEL_124;
          }
          for (j = v136; j; j = (_QWORD *)*j)
          {
            v97 = *((_DWORD *)j + 7);
            if (v86 >= v97)
            {
              if (v97 >= v86)
                goto LABEL_124;
              ++j;
            }
          }
          if (!v12)
            v12 = v83;
          v88 = (float *)md::TransitJunction::normalForLineSegment(v84, v83);
          if (!v88)
            goto LABEL_124;
          v134 = v12;
          v89 = *v88;
          v90 = v88[1];
          v91 = sqrtf((float)(v89 * v89) + (float)(v90 * v90));
          v92 = 0.0;
          v93 = 0.0;
          if (v91 > 0.01)
          {
            v93 = (float)-v89 / v91;
            v92 = (float)-v90 / v91;
          }
          v95 = (float *)*((_QWORD *)v9 + 10);
          v94 = *((_QWORD *)v9 + 11);
          if ((unint64_t)v95 >= v94)
          {
            v98 = (float *)*((_QWORD *)v9 + 9);
            v99 = 0xAAAAAAAAAAAAAAABLL * (((char *)v95 - (char *)v98) >> 3) + 1;
            if (v99 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - (_QWORD)v98) >> 3);
            if (2 * v100 > v99)
              v99 = 2 * v100;
            if (v100 >= 0x555555555555555)
              v101 = 0xAAAAAAAAAAAAAAALL;
            else
              v101 = v99;
            if (v101 <= 0xAAAAAAAAAAAAAAALL)
            {
              v102 = (char *)operator new(24 * v101);
              v103 = (float *)&v102[8 * (((char *)v95 - (char *)v98) >> 3)];
              *v103 = v93;
              v103[1] = v92;
              v103[2] = 0.0;
              *((_QWORD *)v103 + 2) = v83;
              if (v95 == v98)
              {
                v105 = &v102[8 * (((char *)v95 - (char *)v98) >> 3)];
              }
              else
              {
                v104 = &v102[8 * (((char *)v95 - (char *)v98) >> 3)];
                do
                {
                  v105 = v104 - 24;
                  v106 = *(_OWORD *)(v95 - 6);
                  *((_QWORD *)v104 - 1) = *((_QWORD *)v95 - 1);
                  *(_OWORD *)(v104 - 24) = v106;
                  v95 -= 6;
                  v104 -= 24;
                }
                while (v95 != v98);
              }
              v107 = &v102[24 * v101];
              v96 = v103 + 6;
              v9 = this;
              *((_QWORD *)this + 9) = v105;
              *((_QWORD *)this + 10) = v103 + 6;
              *((_QWORD *)this + 11) = v107;
              if (v98)
                operator delete(v98);
              goto LABEL_167;
            }
LABEL_217:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          *v95 = v93;
          v95[1] = v92;
          v95[2] = 0.0;
          v96 = v95 + 6;
          *((_QWORD *)v95 + 2) = v83;
LABEL_167:
          v108 = &v136;
          v12 = v134;
          *((_QWORD *)v9 + 10) = v96;
          v109 = v136;
          v110 = &v136;
          if (v136)
          {
            while (1)
            {
              while (1)
              {
                v108 = (_QWORD **)v109;
                v111 = *((_DWORD *)v109 + 7);
                if (v86 >= v111)
                  break;
                v109 = *v108;
                v110 = v108;
                if (!*v108)
                  goto LABEL_174;
              }
              if (v111 >= v86)
                break;
              v109 = v108[1];
              if (!v109)
              {
                v110 = v108 + 1;
                goto LABEL_174;
              }
            }
          }
          else
          {
LABEL_174:
            v112 = operator new(0x20uLL);
            *((_DWORD *)v112 + 7) = v86;
            *v112 = 0;
            v112[1] = 0;
            v112[2] = v108;
            *v110 = v112;
            if (*v135)
            {
              v135 = (_QWORD *)*v135;
              v112 = (_QWORD *)*v110;
            }
            v113 = v136;
            v18 = v112 == v136;
            *((_BYTE *)v112 + 24) = v112 == v136;
            if (!v18)
            {
              do
              {
                v114 = v112[2];
                if (*(_BYTE *)(v114 + 24))
                  break;
                v115 = *(_QWORD **)(v114 + 16);
                v116 = *v115;
                if (*v115 == v114)
                {
                  v119 = v115[1];
                  if (!v119 || (v120 = *(unsigned __int8 *)(v119 + 24), v117 = (_BYTE *)(v119 + 24), v120))
                  {
                    if (*(_QWORD **)v114 == v112)
                    {
                      v121 = (uint64_t *)v112[2];
                    }
                    else
                    {
                      v121 = *(uint64_t **)(v114 + 8);
                      v122 = *v121;
                      *(_QWORD *)(v114 + 8) = *v121;
                      if (v122)
                      {
                        *(_QWORD *)(v122 + 16) = v114;
                        v115 = *(_QWORD **)(v114 + 16);
                      }
                      v121[2] = (uint64_t)v115;
                      *(_QWORD *)(*(_QWORD *)(v114 + 16) + 8 * (**(_QWORD **)(v114 + 16) != v114)) = v121;
                      *v121 = v114;
                      *(_QWORD *)(v114 + 16) = v121;
                      v115 = (_QWORD *)v121[2];
                      v114 = *v115;
                    }
                    *((_BYTE *)v121 + 24) = 1;
                    *((_BYTE *)v115 + 24) = 0;
                    v125 = *(_QWORD *)(v114 + 8);
                    *v115 = v125;
                    if (v125)
                      *(_QWORD *)(v125 + 16) = v115;
                    *(_QWORD *)(v114 + 16) = v115[2];
                    *(_QWORD *)(v115[2] + 8 * (*(_QWORD *)v115[2] != (_QWORD)v115)) = v114;
                    *(_QWORD *)(v114 + 8) = v115;
                    goto LABEL_122;
                  }
                }
                else if (!v116 || (v118 = *(unsigned __int8 *)(v116 + 24), v117 = (_BYTE *)(v116 + 24), v118))
                {
                  if (*(_QWORD **)v114 == v112)
                  {
                    v123 = v112[1];
                    *(_QWORD *)v114 = v123;
                    if (v123)
                    {
                      *(_QWORD *)(v123 + 16) = v114;
                      v115 = *(_QWORD **)(v114 + 16);
                    }
                    v112[2] = v115;
                    *(_QWORD *)(*(_QWORD *)(v114 + 16) + 8 * (**(_QWORD **)(v114 + 16) != v114)) = v112;
                    v112[1] = v114;
                    *(_QWORD *)(v114 + 16) = v112;
                    v115 = (_QWORD *)v112[2];
                  }
                  else
                  {
                    v112 = (_QWORD *)v112[2];
                  }
                  *((_BYTE *)v112 + 24) = 1;
                  *((_BYTE *)v115 + 24) = 0;
                  v114 = v115[1];
                  v124 = *(_QWORD **)v114;
                  v115[1] = *(_QWORD *)v114;
                  if (v124)
                    v124[2] = v115;
                  *(_QWORD *)(v114 + 16) = v115[2];
                  *(_QWORD *)(v115[2] + 8 * (*(_QWORD *)v115[2] != (_QWORD)v115)) = v114;
                  *(_QWORD *)v114 = v115;
LABEL_122:
                  v115[2] = v114;
                  break;
                }
                *(_BYTE *)(v114 + 24) = 1;
                v112 = v115;
                *((_BYTE *)v115 + 24) = v115 == v113;
                *v117 = 1;
              }
              while (v115 != v113);
            }
            ++v137;
          }
LABEL_124:
          if (++v73 == v74)
            goto LABEL_115;
          goto LABEL_125;
        }
        ++v78;
      }
      v78 = (uint64_t *)*v78;
      if (!v78)
        goto LABEL_124;
    }
  }
LABEL_109:
  v69 = (_QWORD *)*((_QWORD *)v9 + 9);
  v70 = (_QWORD *)*((_QWORD *)v9 + 10);
  if (v69 == v70)
  {
    v71 = *((_QWORD *)v9 + 11);
    if ((unint64_t)v69 >= v71)
    {
      v126 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - (_QWORD)v69) >> 3);
      v127 = 2 * v126;
      if (2 * v126 <= 1)
        v127 = 1;
      if (v126 >= 0x555555555555555)
        v128 = 0xAAAAAAAAAAAAAAALL;
      else
        v128 = v127;
      if (v128 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_217;
      v129 = operator new(24 * v128);
      *(_QWORD *)v129 = 0;
      v129[2] = 0;
      *((_QWORD *)v129 + 2) = v12;
      v70 = v129 + 6;
      *((_QWORD *)v9 + 9) = v129;
      *((_QWORD *)v9 + 10) = v129 + 6;
      *((_QWORD *)v9 + 11) = &v129[6 * v128];
      if (v69)
        operator delete(v69);
    }
    else
    {
      *v69 = 0;
      *((_DWORD *)v69 + 2) = 0;
      v70 = v69 + 3;
      v69[2] = v12;
    }
    *((_QWORD *)v9 + 10) = v70;
    v69 = (_QWORD *)*((_QWORD *)v9 + 9);
  }
  *((_QWORD *)v9 + 14) = 0;
  if (v69 != v70)
  {
    while (!*v69)
    {
      v69 += 3;
      if (v69 == v70)
        goto LABEL_216;
    }
    *((_DWORD *)v9 + 28) = *(_DWORD *)v69;
    *((_DWORD *)v9 + 29) = *((_DWORD *)v69 + 1);
  }
LABEL_216:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v136);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v139);
}

void sub_19FAF6080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a16);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a19);
  _Unwind_Resume(a1);
}

uint64_t md::TransitNode::TransitNode(uint64_t a1, uint64_t *a2, _QWORD *a3, float a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  geo::codec::VectorTile *v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  unsigned int i;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v51;
  void **v52;

  *(_QWORD *)a1 = off_1E428C980;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (a2)
  {
    *(_QWORD *)v8 = a2;
    v9 = (std::__shared_weak_count *)a2[1];
    if (v9 && (v9 = std::__shared_weak_count::lock(v9)) != 0)
      v10 = *a2;
    else
      v10 = 0;
    v11 = *(std::__shared_weak_count **)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v9;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(float *)(a1 + 56) = a4;
  *(_DWORD *)(a1 + 60) = 5;
  *(_BYTE *)(a1 + 64) = 0;
  v52 = (void **)(a1 + 32);
  v14 = *(geo::codec::VectorTile **)(a1 + 16);
  if (v14)
  {
    v51 = v8;
    *(_BYTE *)(a1 + 62) = *(_BYTE *)(geo::codec::VectorTile::key(v14) + 1) & 0x3F;
    v15 = *((unsigned __int16 *)a2 + 138);
    v16 = *(_BYTE **)(a1 + 32);
    if (v15 <= (uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)v16) >> 3)
    {
LABEL_23:
      for (i = 0; i < *(unsigned __int16 *)(*(_QWORD *)v8 + 276); ++i)
      {
        v31 = *(_QWORD *)(geo::codec::VectorTile::transitNodeLineIndices(*(geo::codec::VectorTile **)(a1 + 16))
                        + 8 * (*(_DWORD *)(*(_QWORD *)v8 + 288) + i));
        if (v31 < 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a3[1] - *a3) >> 3))
        {
          v32 = *a3 + 104 * v31;
          v34 = *(uint64_t **)(a1 + 40);
          v33 = *(_QWORD *)(a1 + 48);
          if ((unint64_t)v34 < v33)
          {
            *v34 = v32;
            v30 = v34 + 1;
          }
          else
          {
            v35 = (uint64_t *)*v52;
            v36 = (char *)v34 - (_BYTE *)*v52;
            v37 = v36 >> 3;
            v38 = (v36 >> 3) + 1;
            if (v38 >> 61)
              abort();
            v39 = v33 - (_QWORD)v35;
            if (v39 >> 2 > v38)
              v38 = v39 >> 2;
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
              v40 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v40 = v38;
            if (v40)
            {
              if (v40 >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v41 = operator new(8 * v40);
            }
            else
            {
              v41 = 0;
            }
            v42 = (uint64_t *)&v41[8 * v37];
            *v42 = v32;
            v30 = v42 + 1;
            if (v34 == v35)
            {
              v35 = v34;
            }
            else
            {
              v43 = (char *)(v34 - 1) - (char *)v35;
              if (v43 < 0x58)
                goto LABEL_58;
              if ((unint64_t)((char *)v34 - &v41[v36]) < 0x20)
                goto LABEL_58;
              v44 = (v43 >> 3) + 1;
              v45 = &v41[8 * v37 - 16];
              v46 = v34 - 2;
              v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v48 = *(_OWORD *)v46;
                *(v45 - 1) = *((_OWORD *)v46 - 1);
                *v45 = v48;
                v45 -= 2;
                v46 -= 4;
                v47 -= 4;
              }
              while (v47);
              v42 -= v44 & 0x3FFFFFFFFFFFFFFCLL;
              v34 -= v44 & 0x3FFFFFFFFFFFFFFCLL;
              if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_58:
                do
                {
                  v49 = *--v34;
                  *--v42 = v49;
                }
                while (v34 != v35);
                v35 = (uint64_t *)*v52;
              }
            }
            *(_QWORD *)(a1 + 32) = v42;
            *(_QWORD *)(a1 + 40) = v30;
            *(_QWORD *)(a1 + 48) = &v41[8 * v40];
            if (v35)
              operator delete(v35);
            v8 = v51;
          }
          *(_QWORD *)(a1 + 40) = v30;
        }
      }
      return a1;
    }
    v17 = *(_BYTE **)(a1 + 40);
    v18 = (char *)operator new(8 * v15);
    v19 = v17 - v16;
    v20 = &v18[(v17 - v16) & 0xFFFFFFFFFFFFFFF8];
    v21 = v20;
    if (v17 != v16)
    {
      if ((unint64_t)(v19 - 8) < 0x58)
      {
        v21 = &v18[(v17 - v16) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_20:
          v28 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *((_QWORD *)v21 - 1) = v28;
          v21 -= 8;
        }
        while (v17 != v16);
        goto LABEL_21;
      }
      v21 = &v18[(v17 - v16) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v17 - &v18[v19 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
        goto LABEL_20;
      v22 = v19 >> 3;
      v23 = ((unint64_t)(v19 - 8) >> 3) + 1;
      v24 = &v18[8 * v22 - 16];
      v25 = (__int128 *)(v17 - 16);
      v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v27 = *v25;
        *((_OWORD *)v24 - 1) = *(v25 - 1);
        *(_OWORD *)v24 = v27;
        v24 -= 32;
        v25 -= 2;
        v26 -= 4;
      }
      while (v26);
      v21 = &v20[-8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
      v17 -= 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_20;
    }
LABEL_21:
    *(_QWORD *)(a1 + 32) = v21;
    *(_QWORD *)(a1 + 40) = v20;
    *(_QWORD *)(a1 + 48) = &v18[8 * v15];
    if (v16)
      operator delete(v16);
    goto LABEL_23;
  }
  return a1;
}

void sub_19FAF648C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, md::components::Material *a9, void **a10)
{
  uint64_t v10;
  void *v12;

  v12 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 40) = v12;
    operator delete(v12);
  }
  md::components::Material::~Material(a9);
  _Unwind_Resume(a1);
}

void md::TransitNode::~TransitNode(md::TransitNode *this)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = off_1E428C980;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t md::TransitConnectedNode::TransitConnectedNode(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, float a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  float *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  float *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  float *v55;
  _QWORD *v56;
  _QWORD *v57;
  float v58;
  float v59;
  float v60;
  char v61;
  float v62;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;

  v6 = a1;
  v7 = md::TransitNode::TransitNode(a1, a2, a3, a5);
  *(_QWORD *)v7 = &off_1E429A5A0;
  *(_QWORD *)(v7 + 72) = 0;
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  *(_QWORD *)(v7 + 96) = a4;
  *(_DWORD *)(v7 + 120) = 0;
  *(_DWORD *)(v7 + 132) = 0;
  *(_QWORD *)(v7 + 124) = 0x100000001;
  *(_BYTE *)(v7 + 136) = 0;
  if (*(_BYTE *)(*(_QWORD *)(v7 + 8) + 320))
  {
    v8 = (_QWORD *)a4[3];
    v9 = a4 + 4;
    v70 = v8;
    v71 = v6;
    if (v8 == a4 + 4)
    {
      v11 = 0;
      v10 = 0;
      v13 = (_QWORD *)a4[6];
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = a4 + 7;
      do
      {
        v14 = (_QWORD *)v8[1];
        v15 = v14;
        v16 = v8;
        if (v14)
        {
          do
          {
            v17 = v15;
            v15 = (_QWORD *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v16[2];
            v18 = *v17 == (_QWORD)v16;
            v16 = v17;
          }
          while (!v18);
        }
        if (v17 != v9)
        {
          v19 = v8[4];
          do
          {
            v20 = v17[4];
            v21 = md::TransitJunction::normalForLinkPair(a4, v19, v20);
            if (v21
              && ((uint64_t)(*(_QWORD *)(v20 + 88) - *(_QWORD *)(v20 + 80)) >> 3)
               + ((uint64_t)(*(_QWORD *)(v19 + 88) - *(_QWORD *)(v19 + 80)) >> 3) > v11)
            {
              v11 = ((uint64_t)(*(_QWORD *)(v20 + 88) - *(_QWORD *)(v20 + 80)) >> 3)
                  + ((uint64_t)(*(_QWORD *)(v19 + 88) - *(_QWORD *)(v19 + 80)) >> 3);
              v10 = (float *)v21;
            }
            v22 = (_QWORD *)v17[1];
            if (v22)
            {
              do
              {
                v23 = v22;
                v22 = (_QWORD *)*v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                v23 = (_QWORD *)v17[2];
                v18 = *v23 == (_QWORD)v17;
                v17 = v23;
              }
              while (!v18);
            }
            v17 = v23;
          }
          while (v23 != v9);
        }
        v24 = (_QWORD *)a4[6];
        v72 = v24;
        if (v24 != v12)
        {
          v25 = v8[4];
          do
          {
            v26 = v24[4];
            v27 = md::TransitJunction::normalForLinkPair(a4, v25, v26);
            if (v27
              && ((uint64_t)(*(_QWORD *)(v26 + 88) - *(_QWORD *)(v26 + 80)) >> 3)
               + ((uint64_t)(*(_QWORD *)(v25 + 88) - *(_QWORD *)(v25 + 80)) >> 3) > v11)
            {
              v11 = ((uint64_t)(*(_QWORD *)(v26 + 88) - *(_QWORD *)(v26 + 80)) >> 3)
                  + ((uint64_t)(*(_QWORD *)(v25 + 88) - *(_QWORD *)(v25 + 80)) >> 3);
              v10 = (float *)v27;
            }
            v28 = (_QWORD *)v24[1];
            if (v28)
            {
              do
              {
                v29 = v28;
                v28 = (_QWORD *)*v28;
              }
              while (v28);
            }
            else
            {
              do
              {
                v29 = (_QWORD *)v24[2];
                v18 = *v29 == (_QWORD)v24;
                v24 = v29;
              }
              while (!v18);
            }
            v24 = v29;
          }
          while (v29 != v12);
        }
        if (v14)
        {
          do
          {
            v30 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v30 = (_QWORD *)v8[2];
            v18 = *v30 == (_QWORD)v8;
            v8 = v30;
          }
          while (!v18);
        }
        v8 = v30;
        v13 = v72;
      }
      while (v30 != v9);
    }
    v31 = a4 + 7;
    v73 = v13;
    if (v13 != a4 + 7)
    {
      do
      {
        v34 = (_QWORD *)v13[1];
        v35 = v34;
        v36 = v13;
        if (v34)
        {
          do
          {
            v37 = v35;
            v35 = (_QWORD *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            v37 = (_QWORD *)v36[2];
            v18 = *v37 == (_QWORD)v36;
            v36 = v37;
          }
          while (!v18);
        }
        if (v37 != v31)
        {
          v38 = v13[4];
          do
          {
            v39 = v37[4];
            v40 = md::TransitJunction::normalForLinkPair(a4, v38, v39);
            if (v40
              && ((uint64_t)(*(_QWORD *)(v39 + 88) - *(_QWORD *)(v39 + 80)) >> 3)
               + ((uint64_t)(*(_QWORD *)(v38 + 88) - *(_QWORD *)(v38 + 80)) >> 3) > v11)
            {
              v11 = ((uint64_t)(*(_QWORD *)(v39 + 88) - *(_QWORD *)(v39 + 80)) >> 3)
                  + ((uint64_t)(*(_QWORD *)(v38 + 88) - *(_QWORD *)(v38 + 80)) >> 3);
              v10 = (float *)v40;
            }
            v41 = (_QWORD *)v37[1];
            if (v41)
            {
              do
              {
                v42 = v41;
                v41 = (_QWORD *)*v41;
              }
              while (v41);
            }
            else
            {
              do
              {
                v42 = (_QWORD *)v37[2];
                v18 = *v42 == (_QWORD)v37;
                v37 = v42;
              }
              while (!v18);
            }
            v37 = v42;
          }
          while (v42 != v31);
        }
        if (v34)
        {
          do
          {
            v43 = v34;
            v34 = (_QWORD *)*v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            v43 = (_QWORD *)v13[2];
            v18 = *v43 == (_QWORD)v13;
            v13 = v43;
          }
          while (!v18);
        }
        v13 = v43;
      }
      while (v43 != v31);
    }
    if (v10)
    {
      v32 = v70;
      v6 = v71;
      *(_BYTE *)(v71 + 136) = 1;
      v33 = v73;
    }
    else
    {
      v32 = v70;
      v6 = v71;
      v33 = v73;
      v10 = 0;
      if (v70 != v9)
      {
        v44 = v70;
        do
        {
          v45 = (_QWORD *)v44[4];
          v46 = v45[8];
          if (*(_BYTE *)(v46 - 3))
          {
            v47 = (uint64_t)(v45[11] - v45[10]) >> 3;
            v48 = (float *)(v46 - 48);
            if (v47 > v11)
            {
              v11 = v47;
              v10 = v48;
            }
          }
          v49 = (_QWORD *)v44[1];
          if (v49)
          {
            do
            {
              v50 = v49;
              v49 = (_QWORD *)*v49;
            }
            while (v49);
          }
          else
          {
            do
            {
              v50 = (_QWORD *)v44[2];
              v18 = *v50 == (_QWORD)v44;
              v44 = v50;
            }
            while (!v18);
          }
          v44 = v50;
        }
        while (v50 != v9);
      }
      if (v73 != v31)
      {
        v51 = v73;
        do
        {
          v52 = (_QWORD *)v51[4];
          v53 = v52[7];
          if (*(_BYTE *)(v53 + 93))
          {
            v54 = (uint64_t)(v52[11] - v52[10]) >> 3;
            v55 = (float *)(v53 + 8);
            if (v54 > v11)
            {
              v11 = v54;
              v10 = v55;
            }
          }
          v56 = (_QWORD *)v51[1];
          if (v56)
          {
            do
            {
              v57 = v56;
              v56 = (_QWORD *)*v56;
            }
            while (v56);
          }
          else
          {
            do
            {
              v57 = (_QWORD *)v51[2];
              v18 = *v57 == (_QWORD)v51;
              v51 = v57;
            }
            while (!v18);
          }
          v51 = v57;
        }
        while (v57 != v31);
      }
      *(_BYTE *)(v71 + 136) = v10 != 0;
      if (!v10)
        goto LABEL_96;
    }
    v58 = *v10;
    v59 = v10[1];
    v60 = sqrtf((float)(v58 * v58) + (float)(v59 * v59));
    if (v60 >= 0.01)
    {
      *(float *)(v6 + 104) = v58 / v60;
      *(float *)(v6 + 108) = v59 / v60;
      *(_DWORD *)(v6 + 132) = 1;
      v62 = 0.0;
      if (v32 != v9)
      {
        do
        {
          v64 = (_QWORD *)v32[1];
          v65 = v32;
          if (v64)
          {
            do
            {
              v66 = v64;
              v64 = (_QWORD *)*v64;
            }
            while (v64);
          }
          else
          {
            do
            {
              v66 = (_QWORD *)v65[2];
              v18 = *v66 == (_QWORD)v65;
              v65 = v66;
            }
            while (!v18);
          }
          v62 = fmaxf(v62, *(float *)(v32[4] + 152));
          v32 = v66;
        }
        while (v66 != v9);
      }
      if (v33 != v31)
      {
        do
        {
          v67 = (_QWORD *)v33[1];
          v68 = v33;
          if (v67)
          {
            do
            {
              v69 = v67;
              v67 = (_QWORD *)*v67;
            }
            while (v67);
          }
          else
          {
            do
            {
              v69 = (_QWORD *)v68[2];
              v18 = *v69 == (_QWORD)v68;
              v68 = v69;
            }
            while (!v18);
          }
          v62 = fmaxf(v62, *(float *)(v33[4] + 152));
          v33 = v69;
        }
        while (v69 != v31);
      }
      *(float *)(v6 + 120) = v62;
      if (v62 < 3.0)
        v61 = 1;
      else
        v61 = 2;
      goto LABEL_102;
    }
    *(_QWORD *)(v6 + 104) = 1065353216;
    *(_BYTE *)(v6 + 136) = 0;
LABEL_96:
    v61 = 1;
LABEL_102:
    *(_BYTE *)(v6 + 60) = v61;
    return v6;
  }
  *(_BYTE *)(v6 + 60) = 0;
  md::TransitConnectedNode::createDots((md::TransitConnectedNode *)v6);
  return v6;
}

void sub_19FAF6AC4(_Unwind_Exception *a1)
{
  void **v1;
  md::TransitNode *v2;
  void *v4;

  v4 = *v1;
  if (*v1)
  {
    *((_QWORD *)v2 + 10) = v4;
    operator delete(v4);
  }
  md::TransitNode::~TransitNode(v2);
  _Unwind_Resume(a1);
}

void md::TransitParentNode::~TransitParentNode(md::TransitParentNode *this)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E429A5A0;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E428C980;
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E429A5A0;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E428C980;
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::TransitParentNode::parentID(md::TransitParentNode *this)
{
  return 0;
}

uint64_t md::TransitParentNode::transitNodeType(md::TransitParentNode *this)
{
  return 1;
}

void altitude::TextureMapLoadJob::~TextureMapLoadJob(altitude::TextureMapLoadJob *this)
{
  altitude::TextureMapLoadJob::~TextureMapLoadJob(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::mutex *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  CVPixelBufferRef *v43;
  CVPixelBufferRef *v44;

  *(_QWORD *)this = &off_1E42C5280;
  v2 = (void **)((char *)this + 288);
  v3 = *((_QWORD *)this + 36);
  v4 = *((_QWORD *)this + 37);
  while (v3 != v4)
  {
    v5 = *(_QWORD *)(v3 + 72);
    if (v5)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, v3);
    v3 += 80;
  }
  v6 = *((_QWORD *)this + 39);
  v7 = *((_QWORD *)this + 40);
  while (v6 != v7)
  {
    v8 = *(_QWORD *)(v6 + 72);
    if (v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, v6);
    v6 += 80;
  }
  if (*((_QWORD *)this + 36) == *((_QWORD *)this + 37))
  {
    v43 = (CVPixelBufferRef *)*((_QWORD *)this + 29);
    v44 = (CVPixelBufferRef *)*((_QWORD *)this + 30);
    while (v43 != v44)
    {
      if (*v43)
        CVPixelBufferRelease(*v43);
      ++v43;
    }
  }
  v9 = (std::mutex *)*((_QWORD *)this + 44);
  if (v9)
  {
    md::HardwareVideoDecodingSession::~HardwareVideoDecodingSession(v9);
    MEMORY[0x1A1AF4E00]();
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (_QWORD *)*((_QWORD *)this + 39);
  if (!v13)
    goto LABEL_34;
  v14 = (_QWORD *)*((_QWORD *)this + 40);
  v15 = (void *)*((_QWORD *)this + 39);
  if (v14 == v13)
    goto LABEL_33;
  v16 = v14 - 4;
  do
  {
    v18 = (_QWORD *)v16[3];
    if (v16 == v18)
    {
      v18 = v16;
      v19 = 4;
    }
    else
    {
      if (!v18)
        goto LABEL_28;
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_28:
    if (*((_BYTE *)v16 - 28))
      *((_BYTE *)v16 - 28) = 0;
    if (*((_BYTE *)v16 - 32))
      *((_BYTE *)v16 - 32) = 0;
    v17 = v16 - 6;
    v16 -= 10;
  }
  while (v17 != v13);
  v15 = (void *)*((_QWORD *)this + 39);
LABEL_33:
  *((_QWORD *)this + 40) = v13;
  operator delete(v15);
LABEL_34:
  v20 = (char *)*v2;
  if (!*v2)
    goto LABEL_49;
  v21 = (char *)*((_QWORD *)this + 37);
  v22 = *v2;
  if (v21 == v20)
    goto LABEL_48;
  v23 = v21 - 32;
  while (2)
  {
    v25 = (char *)*((_QWORD *)v23 + 3);
    if (v23 == v25)
    {
      v25 = v23;
      v26 = 4;
LABEL_42:
      (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
    }
    else if (v25)
    {
      v26 = 5;
      goto LABEL_42;
    }
    if (*(v23 - 28))
      *(v23 - 28) = 0;
    if (*(v23 - 32))
      *(v23 - 32) = 0;
    v24 = v23 - 48;
    v23 -= 80;
    if (v24 != v20)
      continue;
    break;
  }
  v22 = *v2;
LABEL_48:
  *((_QWORD *)this + 37) = v20;
  operator delete(v22);
LABEL_49:
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (void *)*((_QWORD *)this + 29);
  if (v33)
  {
    *((_QWORD *)this + 30) = v33;
    operator delete(v33);
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  karo::Job::~Job(this);
}

uint64_t altitude::TextureMapLoadJob::cancel(altitude::TextureMapLoadJob *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 24);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *((_QWORD *)this + 26);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return karo::Job::cancel(this);
}

void altitude::TextureMapLoadJob::jobStep(altitude::TextureMapLoadJob *this)
{
  CVPixelBufferRef *v2;
  CVPixelBufferRef *v3;
  unint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  void *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  CVPixelBufferRef *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  __CVBuffer *v37;
  void *BaseAddress;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  _BOOL4 v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  void *v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t *v78;
  int v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  __int128 v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  char *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  std::__shared_weak_count *v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  __int128 *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  __CVBuffer *v124;
  unsigned int Width;
  unsigned int Height;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  __int128 v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  uint64_t v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  _BYTE *v140;
  _BYTE *v141;
  int64_t v142;
  CVPixelBufferRef *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint32x2_t *v157;
  uint32x2_t v158;
  __int32 v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  unint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  BOOL v174;
  unint64_t v175;
  unint64_t v176;
  int v177;
  _QWORD *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  _QWORD v181[3];
  _QWORD *v182;
  _QWORD v183[4];
  _QWORD v184[4];
  _QWORD v185[4];
  __int128 v186;
  std::__shared_weak_count *v187;
  _QWORD v188[3];
  _QWORD v189[3];
  _QWORD *v190;
  uint64_t v191;

  v191 = *MEMORY[0x1E0C80C00];
  v2 = (CVPixelBufferRef *)*((_QWORD *)this + 29);
  v3 = (CVPixelBufferRef *)*((_QWORD *)this + 30);
  if (v3 != v2)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      if (!v2[v4])
      {
        (*(void (**)(altitude::TextureMapLoadJob *))(*(_QWORD *)this + 16))(this);
        return;
      }
      v4 = v5++;
    }
    while (v3 - v2 > v4);
  }
  v6 = *((unsigned __int8 *)this + 224);
  if (*((_BYTE *)this + 224))
  {
    if (!*((_QWORD *)this + 34))
    {
      v7 = *(_QWORD *)(**((_QWORD **)this + 1) + 848);
      v8 = *(_DWORD *)(*((_QWORD *)this + 22) + 8);
      v9 = operator new(0x68uLL);
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
      *(_QWORD *)v9 = &off_1E42E64F8;
      v10 = altitude::MipChain::MipChain((int *)v9 + 6, v7, v8);
      v11 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
      *((_QWORD *)this + 34) = v10;
      *((_QWORD *)this + 35) = v9;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = *((_QWORD *)this + 1);
      v175 = **(_QWORD **)(v14 + 72);
      v176 = *(_QWORD *)(*(_QWORD *)(v14 + 72) + 8);
      v15 = **(_DWORD **)(*((_QWORD *)this + 22) + 40);
      v16 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v16->__shared_owners_ = 0;
      v17 = (unint64_t *)&v16->__shared_owners_;
      v16->__shared_weak_owners_ = 0;
      v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6300;
      karo::Job::Job((uint64_t)&v16[1], v14);
      v16[8].__shared_owners_ = 0;
      v16[8].__shared_weak_owners_ = 0;
      v16[9].__vftable = 0;
      v19 = (_BYTE *)*((_QWORD *)this + 29);
      v18 = (_BYTE *)*((_QWORD *)this + 30);
      v20 = v18 - v19;
      if (v18 != v19)
      {
        if (v20 < 0)
          abort();
        v21 = (CVPixelBufferRef *)operator new(v18 - v19);
        v16[8].__shared_owners_ = (uint64_t)v21;
        v16[8].__shared_weak_owners_ = (uint64_t)v21;
        v22 = v20 >> 3;
        v16[9].__vftable = (std::__shared_weak_count_vtbl *)&v21[v22];
        memcpy(v21, v19, v20);
        v16[8].__shared_weak_owners_ = (uint64_t)&v21[v22];
        do
        {
          CVPixelBufferRetain(*v21++);
          --v22;
        }
        while (v22 * 8);
      }
      v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42C58F0;
      v24 = *((_QWORD *)this + 34);
      v23 = *((_QWORD *)this + 35);
      v16[9].__shared_owners_ = v24;
      v16[9].__shared_weak_owners_ = v23;
      if (v23)
      {
        v25 = (unint64_t *)(v23 + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
        v24 = *((_QWORD *)this + 34);
        v27 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
        LODWORD(v16[10].__vftable) = v15;
        v174 = v27 == 0;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
          v30 = *((_QWORD *)this + 1);
          do
            v31 = __ldxr(v28);
          while (__stxr(v31 + 1, v28));
          v32 = v27;
          goto LABEL_104;
        }
      }
      else
      {
        v27 = 0;
        LODWORD(v16[10].__vftable) = v15;
        v174 = 1;
      }
      v32 = 0;
      v30 = *((_QWORD *)this + 1);
LABEL_104:
      v102 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v102->__shared_owners_ = 0;
      v103 = (unint64_t *)&v102->__shared_owners_;
      v102->__shared_weak_owners_ = 0;
      v102->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6450;
      *(_QWORD *)&v186 = &off_1E42D8870;
      *((_QWORD *)&v186 + 1) = v24;
      v187 = v32;
      v188[0] = &v186;
      karo::Job::Job((uint64_t)&v102[1], v30);
      v102[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42C6868;
      if (v188[0])
      {
        if ((__int128 *)v188[0] == &v186)
        {
          v102[9].__shared_owners_ = (uint64_t)&v102[8].__shared_owners_;
          (*(void (**)(__int128 *))(v186 + 24))(&v186);
          v104 = v16 + 1;
        }
        else
        {
          v104 = v16 + 1;
          v102[9].__shared_owners_ = (*(uint64_t (**)(void))(*(_QWORD *)v188[0] + 16))();
        }
      }
      else
      {
        v104 = v16 + 1;
        v102[9].__shared_owners_ = 0;
      }
      v108 = (__int128 *)v188[0];
      if ((__int128 *)v188[0] == &v186)
      {
        v109 = 4;
        v108 = &v186;
      }
      else
      {
        if (!v188[0])
        {
          do
LABEL_126:
            v110 = __ldxr(v17);
          while (__stxr(v110 + 1, v17));
          *(_QWORD *)&v186 = v104;
          *((_QWORD *)&v186 + 1) = v16;
          do
            v111 = __ldxr(v17);
          while (__stxr(v111 + 1, v17));
          karo::Job::addBlockingSubJob((uint64_t *)&v102[1], &v186, -1, 1);
          do
            v112 = __ldaxr(v17);
          while (__stlxr(v112 - 1, v17));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
          do
            v113 = __ldaxr(v17);
          while (__stlxr(v113 - 1, v17));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
          *(_QWORD *)&v186 = v102 + 1;
          *((_QWORD *)&v186 + 1) = v102;
          do
            v114 = __ldxr(v103);
          while (__stxr(v114 + 1, v103));
          karo::Job::addBlockingSubJob((uint64_t *)this, &v186, -1, 1);
          do
            v115 = __ldaxr(v103);
          while (__stlxr(v115 - 1, v103));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
          v179 = (unint64_t)&v102[1];
          v180 = v102;
          do
            v116 = __ldxr(v103);
          while (__stxr(v116 + 1, v103));
          karo::JobManager::queueJob(v175, &v179);
          do
            v117 = __ldaxr(v103);
          while (__stlxr(v117 - 1, v103));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
          v179 = (unint64_t)v104;
          v180 = v16;
          do
            v118 = __ldxr(v17);
          while (__stxr(v118 + 1, v17));
          karo::JobManager::queueJob(v176, &v179);
          do
            v119 = __ldaxr(v17);
          while (__stlxr(v119 - 1, v17));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
          do
            v120 = __ldaxr(v103);
          while (__stlxr(v120 - 1, v103));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
          if (!v174)
          {
            v121 = (unint64_t *)&v27->__shared_owners_;
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          do
            v123 = __ldaxr(v17);
          while (__stlxr(v123 - 1, v17));
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
          return;
        }
        v109 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v108 + 8 * v109))();
      goto LABEL_126;
    }
    goto LABEL_27;
  }
  if (!*((_QWORD *)this + 32))
  {
    v91 = *((_QWORD *)this + 22);
    if (**(_DWORD **)(v91 + 40))
    {
      v92 = *(_QWORD *)(**((_QWORD **)this + 1) + 848);
      v93 = *(_DWORD *)(v91 + 8);
      v179 = 0x8000000080;
      LODWORD(v180) = v93;
      altitude::IOSurfacePool::acquireSurface(&v186, v92, &v179);
      v94 = v186;
      v186 = 0uLL;
      v95 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
      *((_OWORD *)this + 16) = v94;
      if (v95)
      {
        v96 = (unint64_t *)&v95->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      v98 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
      if (!*((_QWORD *)&v186 + 1))
        goto LABEL_179;
      v99 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
    }
    else
    {
      v124 = *v2;
      Width = CVPixelBufferGetWidth(*v2);
      Height = CVPixelBufferGetHeight(v124);
      v127 = *(_QWORD *)(**((_QWORD **)this + 1) + 848);
      v128 = Width >> 2;
      if (Width >> 2 <= 1)
        v128 = 1;
      v129 = Height >> 2;
      if (Height < 4)
        v129 = 1;
      v130 = *(_DWORD *)(*((_QWORD *)this + 22) + 8);
      v179 = __PAIR64__(v129, v128);
      LODWORD(v180) = v130;
      altitude::IOSurfacePool::acquireSurface(&v186, v127, &v179);
      v131 = v186;
      v186 = 0uLL;
      v132 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
      *((_OWORD *)this + 16) = v131;
      if (v132)
      {
        v133 = (unint64_t *)&v132->__shared_owners_;
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
      }
      v98 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
      if (!*((_QWORD *)&v186 + 1))
        goto LABEL_179;
      v135 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
      do
        v100 = __ldaxr(v135);
      while (__stlxr(v100 - 1, v135));
    }
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
LABEL_179:
    v136 = *((_QWORD *)this + 1);
    v137 = *(_QWORD *)(*(_QWORD *)(v136 + 72) + 8);
    v177 = **(_DWORD **)(*((_QWORD *)this + 22) + 40);
    v138 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v138->__shared_owners_ = 0;
    v139 = (unint64_t *)&v138->__shared_owners_;
    v138->__shared_weak_owners_ = 0;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6178;
    karo::Job::Job((uint64_t)&v138[1], v136);
    v138[8].__shared_owners_ = 0;
    v138[8].__shared_weak_owners_ = 0;
    v138[9].__vftable = 0;
    v141 = (_BYTE *)*((_QWORD *)this + 29);
    v140 = (_BYTE *)*((_QWORD *)this + 30);
    v142 = v140 - v141;
    if (v140 != v141)
    {
      if (v142 < 0)
        abort();
      v143 = (CVPixelBufferRef *)operator new(v140 - v141);
      v138[8].__shared_owners_ = (uint64_t)v143;
      v138[8].__shared_weak_owners_ = (uint64_t)v143;
      v144 = v142 >> 3;
      v138[9].__vftable = (std::__shared_weak_count_vtbl *)&v143[v144];
      memcpy(v143, v141, v142);
      v138[8].__shared_weak_owners_ = (uint64_t)&v143[v144];
      do
      {
        CVPixelBufferRetain(*v143++);
        --v144;
      }
      while (v144 * 8);
    }
    v138[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42C4A10;
    v145 = *((_QWORD *)this + 33);
    v138[9].__shared_owners_ = *((_QWORD *)this + 32);
    v138[9].__shared_weak_owners_ = v145;
    if (v145)
    {
      v146 = (unint64_t *)(v145 + 8);
      do
        v147 = __ldxr(v146);
      while (__stxr(v147 + 1, v146));
    }
    LODWORD(v138[10].__vftable) = v177;
    *(_QWORD *)&v186 = v138 + 1;
    *((_QWORD *)&v186 + 1) = v138;
    do
      v148 = __ldxr(v139);
    while (__stxr(v148 + 1, v139));
    karo::Job::addBlockingSubJob((uint64_t *)this, &v186, -1, 1);
    do
      v149 = __ldaxr(v139);
    while (__stlxr(v149 - 1, v139));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
    v179 = (unint64_t)&v138[1];
    v180 = v138;
    do
      v150 = __ldxr(v139);
    while (__stxr(v150 + 1, v139));
    karo::JobManager::queueJob(v137, &v179);
    do
      v151 = __ldaxr(v139);
    while (__stlxr(v151 - 1, v139));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
    do
      v152 = __ldaxr(v139);
    while (__stlxr(v152 - 1, v139));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
    return;
  }
LABEL_27:
  if (v3 == v2)
    goto LABEL_65;
  v33 = 0;
  v34 = 0;
  v178 = (_QWORD *)((char *)this + 288);
  do
  {
    v37 = v2[v33];
    CVPixelBufferLockBaseAddress(v37, 1uLL);
    BaseAddress = CVPixelBufferGetBaseAddress(v37);
    v39 = CVPixelBufferGetWidth(v37);
    v40 = CVPixelBufferGetHeight(v37);
    v41 = *((_QWORD *)this + 22);
    if (*(_DWORD *)(v41 + 8) == 14)
      v42 = 24;
    else
      v42 = 14;
    if (!*(_QWORD *)(v41 + 16))
    {
      v43 = **(_DWORD **)(v41 + 40) == 0;
      v44 = operator new();
      v45 = *((unsigned __int8 *)this + 224);
      *(_QWORD *)(v44 + 16) = 0;
      *(_QWORD *)(v44 + 24) = 0;
      *(_DWORD *)(v44 + 32) = 0;
      *(_QWORD *)(v44 + 56) = 0x100000001;
      *(_DWORD *)(v44 + 64) = 0;
      *(_DWORD *)(v44 + 68) = v42;
      *(_QWORD *)(v44 + 72) = 0x100000001;
      if (v45)
        v46 = 10;
      else
        v46 = 1;
      *(_QWORD *)(v44 + 88) = 0;
      *(_QWORD *)(v44 + 96) = 0;
      *(_QWORD *)(v44 + 80) = 0;
      *(_QWORD *)v44 = &off_1E42BE438;
      *(_QWORD *)(v44 + 8) = 0;
      *(_QWORD *)(v44 + 40) = &unk_1E42BE458;
      *(_QWORD *)(v44 + 48) = "";
      *(_DWORD *)(v44 + 104) = v46;
      *(_QWORD *)(v44 + 112) = 0;
      *(_QWORD *)(v44 + 120) = 0;
      *(_WORD *)(v44 + 128) = 0;
      *(_BYTE *)(v44 + 130) = 1;
      v47 = *((_QWORD *)this + 43);
      if (v43)
        v48 = v39;
      else
        v48 = 512;
      if (v43)
        v49 = v40;
      else
        v49 = 512;
      *(_QWORD *)(v44 + 136) = *((_QWORD *)this + 42);
      *(_QWORD *)(v44 + 144) = v47;
      if (v47)
      {
        v50 = (unint64_t *)(v47 + 8);
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      *(_DWORD *)(v44 + 80) = v48;
      *(_DWORD *)(v44 + 84) = v49;
      *(_QWORD *)(v41 + 16) = v44;
    }
    v52 = operator new();
    v53 = (v34 >> 1) * v39;
    v54 = ((int)(v34 << 31) >> 31) & v40;
    v55 = v53 | (v54 << 32);
    v56 = (v53 + v39) | ((unint64_t)(v54 + v40) << 32);
    v57 = ggl::TextureData2DNoCopy::TextureData2DNoCopy(v52, v39, v40, v42, (uint64_t)BaseAddress);
    v58 = *(_QWORD *)(*((_QWORD *)this + 22) + 16);
    v185[0] = &off_1E42D8708;
    v185[1] = v37;
    v185[3] = v185;
    *(_QWORD *)&v186 = v57;
    *((_QWORD *)&v186 + 1) = v58;
    LOBYTE(v187) = 0;
    BYTE4(v187) = 0;
    *(_QWORD *)((char *)v188 + 4) = v55;
    *(_QWORD *)((char *)&v188[1] + 4) = v56;
    v190 = v189;
    std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_0,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_0>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v185, v189);
    v59 = *((_QWORD *)this + 37);
    if (v59 >= *((_QWORD *)this + 38))
    {
      v61 = std::vector<ggl::Texture2DLoadItem>::__push_back_slow_path<ggl::Texture2DLoadItem const&>(v178, (uint64_t)&v186);
      goto LABEL_61;
    }
    *(_OWORD *)v59 = v186;
    *(_BYTE *)(v59 + 16) = 0;
    if ((_BYTE)v187)
    {
      *(_BYTE *)(v59 + 17) = BYTE1(v187);
      *(_BYTE *)(v59 + 16) = 1;
    }
    *(_BYTE *)(v59 + 20) = 0;
    if (BYTE4(v187))
    {
      *(_DWORD *)(v59 + 24) = v188[0];
      *(_BYTE *)(v59 + 20) = 1;
    }
    *(_OWORD *)(v59 + 28) = *(_OWORD *)((char *)v188 + 4);
    v60 = (uint64_t)v190;
    if (v190)
    {
      if (v190 == v189)
      {
        *(_QWORD *)(v59 + 72) = v59 + 48;
        (*(void (**)(_QWORD *))(*v190 + 24))(v190);
        goto LABEL_60;
      }
      v60 = (*(uint64_t (**)(void))(*v190 + 16))();
    }
    *(_QWORD *)(v59 + 72) = v60;
LABEL_60:
    v61 = (char *)(v59 + 80);
    *((_QWORD *)this + 37) = v59 + 80;
LABEL_61:
    *((_QWORD *)this + 37) = v61;
    v35 = v190;
    if (v190 == v189)
    {
      v35 = v189;
      v36 = 4;
LABEL_30:
      (*(void (**)(void))(*v35 + 8 * v36))();
      goto LABEL_31;
    }
    if (v190)
    {
      v36 = 5;
      goto LABEL_30;
    }
LABEL_31:
    v2 = (CVPixelBufferRef *)*((_QWORD *)this + 29);
    v33 = ++v34;
  }
  while (v34 < (unint64_t)((uint64_t)(*((_QWORD *)this + 30) - (_QWORD)v2) >> 3));
  v6 = *((unsigned __int8 *)this + 224);
LABEL_65:
  if (!v6)
  {
    v70 = *((_QWORD *)this + 32);
    v69 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 32) = 0;
    *((_QWORD *)this + 33) = 0;
    IOSurfaceLock(*(IOSurfaceRef *)(v70 + 16), 0, 0);
    v71 = IOSurfaceGetBaseAddress(*(IOSurfaceRef *)(v70 + 16));
    v72 = IOSurfaceGetWidth(*(IOSurfaceRef *)(v70 + 16));
    v73 = IOSurfaceGetHeight(*(IOSurfaceRef *)(v70 + 16));
    if (*(_DWORD *)(*((_QWORD *)this + 22) + 8) == 14)
      v74 = 24;
    else
      v74 = 14;
    v75 = operator new();
    v76 = v75;
    v77 = *((unsigned __int8 *)this + 224);
    *(_QWORD *)(v75 + 16) = 0;
    *(_QWORD *)(v75 + 24) = 0;
    *(_DWORD *)(v75 + 32) = 0;
    *(_QWORD *)(v75 + 56) = 0x100000001;
    *(_DWORD *)(v75 + 64) = 0;
    *(_DWORD *)(v75 + 68) = v74;
    *(_QWORD *)(v75 + 72) = 0x100000001;
    *(_QWORD *)(v75 + 80) = 0;
    v78 = (uint64_t *)(v75 + 80);
    if (v77)
      v79 = 8;
    else
      v79 = 1;
    *(_QWORD *)(v75 + 88) = 0;
    *(_QWORD *)(v75 + 96) = 0;
    *(_QWORD *)v75 = &off_1E42BE438;
    *(_QWORD *)(v75 + 8) = 0;
    *(_QWORD *)(v75 + 40) = &unk_1E42BE458;
    *(_QWORD *)(v75 + 48) = "";
    *(_DWORD *)(v75 + 104) = v79;
    *(_QWORD *)(v75 + 112) = 0;
    *(_QWORD *)(v75 + 120) = 0;
    *(_WORD *)(v75 + 128) = 0;
    *(_BYTE *)(v75 + 130) = 1;
    v80 = *((_QWORD *)this + 43);
    *(_QWORD *)(v75 + 136) = *((_QWORD *)this + 42);
    *(_QWORD *)(v75 + 144) = v80;
    if (v80)
    {
      v81 = (unint64_t *)(v80 + 8);
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
    *(_DWORD *)(v75 + 80) = v72;
    *(_DWORD *)(v75 + 84) = v73;
    v83 = operator new();
    v84 = ggl::TextureData2DNoCopy::TextureData2DNoCopy(v83, v72, v73, v74, (uint64_t)v71);
    v85 = *v78;
    if (v69)
    {
      v86 = (unint64_t *)&v69->__shared_owners_;
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
    }
    v181[0] = &off_1E42D87E0;
    v181[1] = v70;
    v181[2] = v69;
    v182 = v181;
    *(_QWORD *)&v186 = v84;
    *((_QWORD *)&v186 + 1) = v76;
    LOBYTE(v187) = 0;
    BYTE4(v187) = 0;
    *(_QWORD *)((char *)v188 + 4) = 0;
    *(_QWORD *)((char *)&v188[1] + 4) = v85;
    v88 = v189;
    v190 = v189;
    std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_3,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_3>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v181, v189);
    v89 = v182;
    if (v182 == v181)
    {
      v90 = 4;
      v89 = v181;
    }
    else
    {
      if (!v182)
        goto LABEL_110;
      v90 = 5;
    }
    (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_110:
    v105 = *((_QWORD *)this + 40);
    if (v105 >= *((_QWORD *)this + 41))
    {
      v107 = std::vector<ggl::Texture2DLoadItem>::__push_back_slow_path<ggl::Texture2DLoadItem const&>((_QWORD *)this + 39, (uint64_t)&v186);
      goto LABEL_233;
    }
    *(_OWORD *)v105 = v186;
    *(_BYTE *)(v105 + 16) = 0;
    if ((_BYTE)v187)
    {
      *(_BYTE *)(v105 + 17) = BYTE1(v187);
      *(_BYTE *)(v105 + 16) = 1;
    }
    *(_BYTE *)(v105 + 20) = 0;
    if (BYTE4(v187))
    {
      *(_DWORD *)(v105 + 24) = v188[0];
      *(_BYTE *)(v105 + 20) = 1;
    }
    *(_OWORD *)(v105 + 28) = *(_OWORD *)((char *)v188 + 4);
    v106 = (uint64_t)v190;
    if (v190)
    {
      if (v190 == v189)
      {
        *(_QWORD *)(v105 + 72) = v105 + 48;
        (*(void (**)(_QWORD *))(*v190 + 24))(v190);
        goto LABEL_232;
      }
      v106 = (*(uint64_t (**)(void))(*v190 + 16))();
    }
    *(_QWORD *)(v105 + 72) = v106;
LABEL_232:
    v107 = (char *)(v105 + 80);
    *((_QWORD *)this + 40) = v105 + 80;
LABEL_233:
    *((_QWORD *)this + 40) = v107;
    *(_QWORD *)(*((_QWORD *)this + 22) + 24) = v76;
    if (v190 == v189)
    {
      v171 = 4;
    }
    else
    {
      if (!v190)
      {
LABEL_238:
        if (v69)
        {
          v172 = (unint64_t *)&v69->__shared_owners_;
          do
            v173 = __ldaxr(v172);
          while (__stlxr(v173 - 1, v172));
          if (!v173)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        goto LABEL_243;
      }
      v171 = 5;
      v88 = v190;
    }
    (*(void (**)(_QWORD *))(*v88 + 8 * v171))(v88);
    goto LABEL_238;
  }
  v62 = *((_QWORD *)this + 34);
  v63 = *(_QWORD *)(v62 + 64);
  if (v63)
  {
    v64 = *(_QWORD *)(*((_QWORD *)this + 22) + 16);
    v65 = *(_QWORD *)(v64 + 80);
    v184[0] = &off_1E42D8750;
    v184[3] = v184;
    *(_QWORD *)&v186 = v63;
    *((_QWORD *)&v186 + 1) = v64;
    LOBYTE(v187) = 0;
    BYTE4(v187) = 0;
    *(_QWORD *)((char *)v188 + 4) = 0;
    *(_QWORD *)((char *)&v188[1] + 4) = v65;
    v66 = v189;
    v190 = v189;
    std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_1,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_1>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v184, v189);
    v67 = *((_QWORD *)this + 37);
    if (v67 >= *((_QWORD *)this + 38))
    {
      v101 = std::vector<ggl::Texture2DLoadItem>::__push_back_slow_path<ggl::Texture2DLoadItem const&>((_QWORD *)this + 36, (uint64_t)&v186);
    }
    else
    {
      *(_OWORD *)v67 = v186;
      *(_BYTE *)(v67 + 16) = 0;
      if ((_BYTE)v187)
      {
        *(_BYTE *)(v67 + 17) = BYTE1(v187);
        *(_BYTE *)(v67 + 16) = 1;
      }
      *(_BYTE *)(v67 + 20) = 0;
      if (BYTE4(v187))
      {
        *(_DWORD *)(v67 + 24) = v188[0];
        *(_BYTE *)(v67 + 20) = 1;
      }
      *(_OWORD *)(v67 + 28) = *(_OWORD *)((char *)v188 + 4);
      v68 = (uint64_t)v190;
      if (v190)
      {
        if (v190 != v189)
        {
          v68 = (*(uint64_t (**)(void))(*v190 + 16))();
          goto LABEL_75;
        }
        *(_QWORD *)(v67 + 72) = v67 + 48;
        (*(void (**)(_QWORD *))(*v190 + 24))(v190);
      }
      else
      {
LABEL_75:
        *(_QWORD *)(v67 + 72) = v68;
      }
      v101 = (char *)(v67 + 80);
      *((_QWORD *)this + 37) = v67 + 80;
    }
    *((_QWORD *)this + 37) = v101;
    if (v190 == v189)
    {
      v153 = 4;
LABEL_207:
      (*(void (**)(_QWORD *))(*v66 + 8 * v153))(v66);
    }
    else if (v190)
    {
      v153 = 5;
      v66 = v190;
      goto LABEL_207;
    }
    v62 = *((_QWORD *)this + 34);
  }
  if (*(_QWORD *)(v62 + 72))
  {
    v154 = *((_QWORD *)this + 22);
    v155 = operator new();
    v156 = *((_QWORD *)this + 22);
    v157 = *(uint32x2_t **)(v156 + 16);
    v158 = vshr_n_u32(v157[10], 2uLL);
    v159 = v157[13].i32[0];
    LODWORD(v157) = v157[8].i32[1];
    *(_QWORD *)(v155 + 16) = 0;
    *(_QWORD *)(v155 + 24) = 0;
    *(_DWORD *)(v155 + 32) = 0;
    *(_QWORD *)(v155 + 56) = 0x100000001;
    *(_DWORD *)(v155 + 64) = 0;
    *(_DWORD *)(v155 + 68) = (_DWORD)v157;
    *(_QWORD *)(v155 + 72) = 0x100000001;
    *(_QWORD *)(v155 + 88) = 0;
    *(_QWORD *)(v155 + 96) = 0;
    *(_QWORD *)(v155 + 80) = 0;
    *(_QWORD *)v155 = &off_1E42BE438;
    *(_QWORD *)(v155 + 8) = 0;
    *(_QWORD *)(v155 + 40) = &unk_1E42BE458;
    *(_QWORD *)(v155 + 48) = "";
    *(_DWORD *)(v155 + 104) = v159 - 2;
    *(_QWORD *)(v155 + 112) = 0;
    *(_QWORD *)(v155 + 120) = 0;
    *(_WORD *)(v155 + 128) = 0;
    *(_BYTE *)(v155 + 130) = 1;
    v160 = *((_QWORD *)this + 43);
    *(_QWORD *)(v155 + 136) = *((_QWORD *)this + 42);
    *(_QWORD *)(v155 + 144) = v160;
    if (v160)
    {
      v161 = (unint64_t *)(v160 + 8);
      do
        v162 = __ldxr(v161);
      while (__stxr(v162 + 1, v161));
      v156 = *((_QWORD *)this + 22);
    }
    *(uint32x2_t *)(v155 + 80) = v158;
    *(_QWORD *)(v154 + 24) = v155;
    v163 = *(_QWORD *)(*((_QWORD *)this + 34) + 72);
    v164 = *(_QWORD *)(v156 + 24);
    v165 = *(_QWORD *)(v164 + 80);
    v183[0] = &off_1E42D8798;
    v183[3] = v183;
    *(_QWORD *)&v186 = v163;
    *((_QWORD *)&v186 + 1) = v164;
    LOBYTE(v187) = 0;
    BYTE4(v187) = 0;
    *(_QWORD *)((char *)v188 + 4) = 0;
    *(_QWORD *)((char *)&v188[1] + 4) = v165;
    v166 = v189;
    v190 = v189;
    std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_2,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_2>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v183, v189);
    v167 = *((_QWORD *)this + 40);
    if (v167 >= *((_QWORD *)this + 41))
    {
      v169 = std::vector<ggl::Texture2DLoadItem>::__push_back_slow_path<ggl::Texture2DLoadItem const&>((_QWORD *)this + 39, (uint64_t)&v186);
    }
    else
    {
      *(_OWORD *)v167 = v186;
      *(_BYTE *)(v167 + 16) = 0;
      if ((_BYTE)v187)
      {
        *(_BYTE *)(v167 + 17) = BYTE1(v187);
        *(_BYTE *)(v167 + 16) = 1;
      }
      *(_BYTE *)(v167 + 20) = 0;
      if (BYTE4(v187))
      {
        *(_DWORD *)(v167 + 24) = v188[0];
        *(_BYTE *)(v167 + 20) = 1;
      }
      *(_OWORD *)(v167 + 28) = *(_OWORD *)((char *)v188 + 4);
      v168 = (uint64_t)v190;
      if (v190)
      {
        if (v190 != v189)
        {
          v168 = (*(uint64_t (**)(void))(*v190 + 16))();
          goto LABEL_222;
        }
        *(_QWORD *)(v167 + 72) = v167 + 48;
        (*(void (**)(_QWORD *))(*v190 + 24))(v190);
      }
      else
      {
LABEL_222:
        *(_QWORD *)(v167 + 72) = v168;
      }
      v169 = (char *)(v167 + 80);
      *((_QWORD *)this + 40) = v167 + 80;
    }
    *((_QWORD *)this + 40) = v169;
    if (v190 == v189)
    {
      v170 = 4;
LABEL_230:
      (*(void (**)(_QWORD *))(*v166 + 8 * v170))(v166);
    }
    else if (v190)
    {
      v170 = 5;
      v166 = v190;
      goto LABEL_230;
    }
  }
LABEL_243:
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
}

void sub_19FAF7E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12, karo::Job *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,_QWORD *a41)
{
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v46;
  unint64_t *p_shared_owners;
  unint64_t v48;

  if (*(_BYTE *)(v43 + 20))
    *(_BYTE *)(v43 + 20) = 0;
  if (*(_BYTE *)(v43 + 16))
    *(_BYTE *)(v43 + 16) = 0;
  *(_QWORD *)(v41 + 320) = v43;
  if (a41 == v44)
  {
    v46 = 4;
  }
  else
  {
    if (!a41)
      goto LABEL_10;
    v46 = 5;
    v44 = a41;
  }
  (*(void (**)(_QWORD *))(*v44 + 8 * v46))(v44);
LABEL_10:
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *altitude::MipChain::MipChain(int *a1, uint64_t a2, int a3)
{
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  _QWORD *v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int v35;
  _QWORD *v36;
  BOOL v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  __int128 *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint32x2_t *v57;
  uint32x2_t *v58;
  unsigned int v59;
  __int32 v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint32x2_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  __int128 *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  int *v82;
  uint64_t v83;
  int v84;
  __int128 v85;

  *a1 = a3;
  *(_OWORD *)(a1 + 2) = 0u;
  *(_OWORD *)(a1 + 6) = 0u;
  *(_OWORD *)(a1 + 10) = 0u;
  v83 = 0x10000000100;
  v84 = a3;
  altitude::IOSurfacePool::acquireSurface(&v85, a2, &v83);
  v6 = v85;
  v85 = 0uLL;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  v82 = a1;
  *(_OWORD *)(a1 + 2) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v83 = 0x8000000080;
  v84 = a3;
  altitude::IOSurfacePool::acquireSurface(&v85, a2, &v83);
  v13 = v85;
  v85 = 0uLL;
  v14 = (std::__shared_weak_count *)*((_QWORD *)a1 + 4);
  *(_OWORD *)(a1 + 6) = v13;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v83 = 0x4000000040;
  v84 = a3;
  altitude::IOSurfacePool::acquireSurface(&v85, a2, &v83);
  v20 = v85;
  v85 = 0uLL;
  v21 = (std::__shared_weak_count *)*((_QWORD *)a1 + 6);
  *(_OWORD *)(a1 + 10) = v20;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *a1;
  v28 = operator new();
  v29 = (_QWORD *)v28;
  if (v27 == 14)
    v30 = 24;
  else
    v30 = 14;
  *(_DWORD *)(v28 + 8) = 10;
  *(_DWORD *)(v28 + 12) = v30;
  *(_QWORD *)(v28 + 16) = 0x20000000200;
  *(_QWORD *)v28 = &off_1E42C6A18;
  *(_QWORD *)(v28 + 32) = 0;
  *(_QWORD *)(v28 + 40) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *((_QWORD *)a1 + 8) = v28;
  v31 = operator new(8uLL);
  *v31 = 0;
  v29[4] = v31 + 1;
  v29[5] = v31 + 1;
  v29[3] = v31;
  if (v27 == 14)
    v32 = 1;
  else
    v32 = 2;
  v33 = 0;
  v34 = a1;
  *((_QWORD *)a1 + 7) = malloc_type_malloc((87381 << v32), 0x1393D50CuLL);
  v35 = 512;
  do
  {
    v38 = (_QWORD *)v34[8];
    v39 = v34[7] + v33;
    v41 = (char *)v38[4];
    v40 = v38[5];
    if ((unint64_t)v41 < v40)
    {
      *(_QWORD *)v41 = v39;
      v36 = v41 + 8;
    }
    else
    {
      v42 = (char *)v38[3];
      v43 = (v41 - v42) >> 3;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 61)
        abort();
      v45 = v40 - (_QWORD)v42;
      if (v45 >> 2 > v44)
        v44 = v45 >> 2;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
        v46 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v46 = v44;
      if (v46)
      {
        if (v46 >> 61)
LABEL_91:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v47 = v46;
        v48 = (char *)operator new(8 * v46);
        v46 = v47;
      }
      else
      {
        v48 = 0;
      }
      v49 = &v48[8 * v43];
      *(_QWORD *)v49 = v39;
      v36 = v49 + 8;
      if (v41 != v42)
      {
        v50 = v41 - 8 - v42;
        if (v50 < 0x58)
          goto LABEL_95;
        if ((unint64_t)(v42 - v48) < 0x20)
          goto LABEL_95;
        v51 = (v50 >> 3) + 1;
        v52 = &v48[8 * v43 - 16];
        v53 = (__int128 *)(v41 - 16);
        v54 = v51 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v55 = *v53;
          *((_OWORD *)v52 - 1) = *(v53 - 1);
          *(_OWORD *)v52 = v55;
          v52 -= 32;
          v53 -= 2;
          v54 -= 4;
        }
        while (v54);
        v49 -= 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
        v41 -= 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
        if (v51 != (v51 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_95:
          do
          {
            v56 = *((_QWORD *)v41 - 1);
            v41 -= 8;
            *((_QWORD *)v49 - 1) = v56;
            v49 -= 8;
          }
          while (v41 != v42);
        }
        v41 = (char *)v38[3];
      }
      v38[3] = v49;
      v38[4] = v36;
      v38[5] = &v48[8 * v46];
      if (v41)
        operator delete(v41);
      v34 = v82;
    }
    v38[4] = v36;
    v33 += ((v35 >> 1) * (v35 >> 1)) << v32;
    v37 = v35 > 3;
    v35 >>= 1;
  }
  while (v37);
  if (v34[8])
  {
    v57 = (uint32x2_t *)operator new();
    v58 = (uint32x2_t *)v34[8];
    v59 = v58[1].u32[0];
    v60 = v58[1].i32[1];
    v57[1].i32[0] = v59 - 2;
    v57[1].i32[1] = v60;
    v57[2] = vshr_n_u32(v58[2], 2uLL);
    *v57 = (uint32x2_t)&off_1E42C6A18;
    v57[4] = 0;
    v57[5] = 0;
    v57[3] = 0;
    v34[9] = v57;
    if (v59 >= 3)
    {
      v61 = 2;
      do
      {
        v63 = (_QWORD *)v34[9];
        v64 = v58[3];
        v66 = (char *)v63[4];
        v65 = v63[5];
        if ((unint64_t)v66 < v65)
        {
          *(_QWORD *)v66 = *(_QWORD *)(*(_QWORD *)&v64 + 8 * v61);
          v62 = v66 + 8;
        }
        else
        {
          v67 = (char *)v63[3];
          v68 = (v66 - v67) >> 3;
          v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 61)
            abort();
          v70 = v65 - (_QWORD)v67;
          if (v70 >> 2 > v69)
            v69 = v70 >> 2;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
            v71 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v71 = v69;
          if (v71)
          {
            if (v71 >> 61)
              goto LABEL_91;
            v72 = (char *)operator new(8 * v71);
          }
          else
          {
            v72 = 0;
          }
          v73 = &v72[8 * v68];
          *(_QWORD *)v73 = *(_QWORD *)(*(_QWORD *)&v64 + 8 * v61);
          v62 = v73 + 8;
          if (v66 != v67)
          {
            v74 = v66 - 8 - v67;
            if (v74 < 0x58)
              goto LABEL_96;
            if ((unint64_t)(v67 - v72) < 0x20)
              goto LABEL_96;
            v75 = (v74 >> 3) + 1;
            v76 = &v72[8 * v68 - 16];
            v77 = (__int128 *)(v66 - 16);
            v78 = v75 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v79 = *v77;
              *((_OWORD *)v76 - 1) = *(v77 - 1);
              *(_OWORD *)v76 = v79;
              v76 -= 32;
              v77 -= 2;
              v78 -= 4;
            }
            while (v78);
            v73 -= 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
            v66 -= 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
            if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_96:
              do
              {
                v80 = *((_QWORD *)v66 - 1);
                v66 -= 8;
                *((_QWORD *)v73 - 1) = v80;
                v73 -= 8;
              }
              while (v66 != v67);
            }
            v66 = (char *)v63[3];
          }
          v63[3] = v73;
          v63[4] = v62;
          v63[5] = &v72[8 * v71];
          if (v66)
            operator delete(v66);
        }
        v63[4] = v62;
        ++v61;
        v34 = v82;
        v58 = (uint32x2_t *)*((_QWORD *)v82 + 8);
      }
      while (v61 < v58[1].u32[0]);
    }
  }
  return v34;
}

void sub_19FAF86F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a11);
  _Unwind_Resume(a1);
}

void altitude::IOSurfacePool::acquireSurface(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  __CFDictionary *Mutable;
  IOSurfaceRef v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  __int128 v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  CFNumberRef cf;
  std::mutex *v46;
  __int128 v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int valuePtr;

  v6 = (std::mutex *)(a2 + 24);
  std::mutex::lock((std::mutex *)(a2 + 24));
  v7 = *(_QWORD **)a2;
  v8 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v8)
  {
    while (1)
    {
      v9 = v7[1];
      if (v9)
      {
        if (!*(_QWORD *)(v9 + 8))
        {
          v10 = (_DWORD *)*v7;
          if (*(_DWORD *)*v7 == *a3 && v10[1] == a3[1] && v10[2] == a3[2])
            break;
        }
      }
      v7 += 2;
      if (v7 == v8)
        goto LABEL_10;
    }
    *a1 = v10;
    a1[1] = v9;
    goto LABEL_38;
  }
LABEL_10:
  v44 = a1;
  v46 = v6;
  v11 = operator new(0x30uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1E42E6108;
  v11[3] = *(_QWORD *)a3;
  v13 = a3[1];
  v12 = a3[2];
  *((_DWORD *)v11 + 8) = v12;
  v14 = *a3;
  v53 = v13;
  valuePtr = v14;
  v52 = 0;
  if (v12 == 4)
  {
    v52 = 1111970369;
    v15 = 4;
  }
  else
  {
    v15 = 0;
    if (v12 == 14)
    {
      v52 = 1278555701;
      v15 = 2;
    }
  }
  v50 = 1;
  v51 = v15 * v14;
  v48 = 1024;
  v49 = 1;
  v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  v17 = CFNumberCreate(0, kCFNumberIntType, &v53);
  v18 = CFNumberCreate(0, kCFNumberIntType, &v51);
  v19 = CFNumberCreate(0, kCFNumberIntType, &v52);
  cf = CFNumberCreate(0, kCFNumberIntType, &v50);
  v20 = CFNumberCreate(0, kCFNumberIntType, &v49);
  v21 = CFNumberCreate(0, kCFNumberIntType, &v48);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC1E0], v16);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC008], v17);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBBF08], v18);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC070], v19);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBBF10], v21);
  CFRelease(v16);
  CFRelease(v17);
  CFRelease(v18);
  CFRelease(v19);
  CFRelease(cf);
  CFRelease(v20);
  CFRelease(v21);
  v23 = IOSurfaceCreate(Mutable);
  CFRelease(Mutable);
  v11[5] = v23;
  *(_QWORD *)&v47 = v11 + 3;
  *((_QWORD *)&v47 + 1) = v11;
  v25 = *(_QWORD **)(a2 + 8);
  v24 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v25 >= v24)
  {
    v27 = *(_QWORD **)a2;
    v28 = ((uint64_t)v25 - *(_QWORD *)a2) >> 4;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 60)
      abort();
    v30 = v24 - (_QWORD)v27;
    if (v30 >> 3 > v29)
      v29 = v30 >> 3;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
      v31 = 0xFFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    v6 = v46;
    v26 = v44;
    if (v31 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v32 = (char *)operator new(16 * v31);
    v33 = &v32[16 * v28];
    *(_OWORD *)v33 = v47;
    v34 = v33 + 16;
    v35 = &v32[16 * v31];
    if (v25 == v27)
    {
      *(_QWORD *)a2 = v33;
      *(_QWORD *)(a2 + 8) = v34;
      *(_QWORD *)(a2 + 16) = v35;
    }
    else
    {
      do
      {
        v36 = *((_OWORD *)v25 - 1);
        v25 -= 2;
        *((_OWORD *)v33 - 1) = v36;
        v33 -= 16;
        *v25 = 0;
        v25[1] = 0;
      }
      while (v25 != v27);
      v25 = *(_QWORD **)a2;
      v37 = *(_QWORD **)(a2 + 8);
      *(_QWORD *)a2 = v33;
      *(_QWORD *)(a2 + 8) = v34;
      *(_QWORD *)(a2 + 16) = v35;
      while (v37 != v25)
      {
        v38 = (std::__shared_weak_count *)*(v37 - 1);
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v37 -= 2;
      }
    }
    if (v25)
      operator delete(v25);
    *(_QWORD *)(a2 + 8) = v34;
  }
  else
  {
    *v25 = v11 + 3;
    v25[1] = v11;
    *(_QWORD *)(a2 + 8) = v25 + 2;
    v6 = v46;
    v26 = v44;
  }
  v41 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(v41 - 8);
  *v26 = *(_QWORD *)(v41 - 16);
  v26[1] = v9;
  if (v9)
  {
LABEL_38:
    v42 = (unint64_t *)(v9 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  std::mutex::unlock(v6);
}

void sub_19FAF8B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

char *std::vector<ggl::Texture2DLoadItem>::__push_back_slow_path<ggl::Texture2DLoadItem const&>(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  _BYTE *v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v29;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333)
    abort();
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 4) > v3)
    v3 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[80 * v2];
  *((_QWORD *)&v29 + 1) = &v7[80 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v8[16] = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    v7[80 * v2 + 17] = *(_BYTE *)(a2 + 17);
    v8[16] = 1;
  }
  v9 = &v7[80 * v2];
  v9[20] = 0;
  v10 = v9 + 20;
  if (*(_BYTE *)(a2 + 20))
  {
    *(_DWORD *)&v7[80 * v2 + 24] = *(_DWORD *)(a2 + 24);
    *v10 = 1;
  }
  v11 = &v7[80 * v2];
  *(_OWORD *)(v11 + 28) = *(_OWORD *)(a2 + 28);
  v12 = *(_QWORD *)(a2 + 72);
  if (!v12)
    goto LABEL_18;
  if (v12 != a2 + 48)
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
LABEL_18:
    *(_QWORD *)&v7[80 * v2 + 72] = v12;
    v13 = &v7[80 * v2];
    goto LABEL_20;
  }
  *(_QWORD *)&v7[80 * v2 + 72] = v11 + 48;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  v13 = &v7[80 * v2];
LABEL_20:
  v14 = v13 + 80;
  *(_QWORD *)&v29 = v13 + 80;
  v16 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v8;
    a1[1] = v14;
    a1[2] = *((_QWORD *)&v29 + 1);
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = &v8[v17];
      v19 = &v15[v17];
      *((_OWORD *)v18 - 5) = *(_OWORD *)&v15[v17 - 80];
      *(v18 - 64) = 0;
      if (v15[v17 - 64])
      {
        *(v18 - 63) = *(v19 - 63);
        *(v18 - 64) = 1;
      }
      *(v18 - 60) = 0;
      if (*(v19 - 60))
      {
        *(_DWORD *)&v8[v17 - 56] = *(_DWORD *)&v15[v17 - 56];
        *(v18 - 60) = 1;
      }
      v20 = &v8[v17];
      v21 = &v15[v17];
      *(_OWORD *)&v8[v17 - 52] = *(_OWORD *)&v15[v17 - 52];
      v22 = *(char **)&v15[v17 - 8];
      if (v22)
      {
        if (v21 - 32 == v22)
        {
          *((_QWORD *)v20 - 1) = v20 - 32;
          (*(void (**)(_QWORD))(**((_QWORD **)v21 - 1) + 24))(*((_QWORD *)v21 - 1));
        }
        else
        {
          *((_QWORD *)v20 - 1) = v22;
          *((_QWORD *)v21 - 1) = 0;
        }
      }
      else
      {
        *((_QWORD *)v20 - 1) = 0;
      }
      v17 -= 80;
    }
    while (&v15[v17] != v16);
    v15 = (char *)*a1;
    v23 = (char *)a1[1];
    *a1 = &v8[v17];
    *(_OWORD *)(a1 + 1) = v29;
    v14 = (char *)v29;
    if (v23 != v15)
    {
      v24 = v23 - 32;
      while (1)
      {
        v26 = (char *)*((_QWORD *)v24 + 3);
        if (v24 == v26)
          break;
        if (v26)
        {
          v27 = 5;
LABEL_39:
          (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
        }
        if (*(v24 - 28))
          *(v24 - 28) = 0;
        if (*(v24 - 32))
          *(v24 - 32) = 0;
        v25 = v24 - 48;
        v24 -= 80;
        if (v25 == v15)
          goto LABEL_45;
      }
      v26 = v24;
      v27 = 4;
      goto LABEL_39;
    }
  }
LABEL_45:
  if (v15)
    operator delete(v15);
  return v14;
}

void sub_19FAF8ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _BYTE *v2;
  _BYTE *v3;
  va_list va;

  va_start(va, a2);
  if (*v3)
    *v3 = 0;
  if (*v2)
    *v2 = 0;
  std::__split_buffer<ggl::Texture2DLoadItem>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_3,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_3>,void ()(ggl::Texture2DLoadItem const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42D87E0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_3,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_3>,void ()(ggl::Texture2DLoadItem const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42D87E0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_3,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_3>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E42D87E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_3,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_3>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E42D87E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_3,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_3>,void ()(ggl::Texture2DLoadItem const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_3,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_3>,void ()(ggl::Texture2DLoadItem const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

uint64_t std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_3,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_3>,void ()(ggl::Texture2DLoadItem const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  IOSurfaceUnlock(*(IOSurfaceRef *)(*(_QWORD *)(a1 + 8) + 16), 0, 0);
  result = *a2;
  if (*a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_2,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_2>,void ()(ggl::Texture2DLoadItem const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_2,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_2>,void ()(ggl::Texture2DLoadItem const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D8798;
  return result;
}

void std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_2,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_2>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D8798;
}

void std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_1,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_1>,void ()(ggl::Texture2DLoadItem const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_1,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_1>,void ()(ggl::Texture2DLoadItem const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D8750;
  return result;
}

void std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_1,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_1>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D8750;
}

uint64_t std::__split_buffer<ggl::Texture2DLoadItem>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    v4 = *(_QWORD **)(i - 8);
    if (v4 == (_QWORD *)(i - 32))
    {
      v4 = (_QWORD *)(i - 32);
      v5 = 4;
    }
    else
    {
      if (!v4)
        goto LABEL_9;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_9:
    if (*(_BYTE *)(i - 60))
      *(_BYTE *)(i - 60) = 0;
    if (*(_BYTE *)(i - 64))
      *(_BYTE *)(i - 64) = 0;
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_0,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_0>,void ()(ggl::Texture2DLoadItem const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_0,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_0>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D8708;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_0,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_0>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D8708;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<altitude::TextureMapLoadJob::processImages(void)::$_0,std::allocator<altitude::TextureMapLoadJob::processImages(void)::$_0>,void ()(ggl::Texture2DLoadItem const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 8), 1uLL);
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 8));
  result = *a2;
  if (*a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void altitude::HwScalerThumbJob::~HwScalerThumbJob(altitude::HwScalerThumbJob *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  CVPixelBufferRef *v5;
  CVPixelBufferRef *v6;

  *(_QWORD *)this = &off_1E42C4A10;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (CVPixelBufferRef *)*((_QWORD *)this + 22);
  v6 = (CVPixelBufferRef *)*((_QWORD *)this + 23);
  if (v5 != v6)
  {
    do
      CVPixelBufferRelease(*v5++);
    while (v5 != v6);
    v5 = (CVPixelBufferRef *)*((_QWORD *)this + 22);
  }
  if (v5)
  {
    *((_QWORD *)this + 23) = v5;
    operator delete(v5);
  }
  karo::Job::~Job(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  CVPixelBufferRef *v5;
  CVPixelBufferRef *v6;

  *(_QWORD *)this = &off_1E42C4A10;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (CVPixelBufferRef *)*((_QWORD *)this + 22);
  v6 = (CVPixelBufferRef *)*((_QWORD *)this + 23);
  if (v5 != v6)
  {
    do
      CVPixelBufferRelease(*v5++);
    while (v5 != v6);
    v5 = (CVPixelBufferRef *)*((_QWORD *)this + 22);
  }
  if (v5)
  {
    *((_QWORD *)this + 23) = v5;
    operator delete(v5);
  }
  karo::Job::~Job(this);
  JUMPOUT(0x1A1AF4E00);
}

void sub_19FAF93F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 176);
  if (v3)
  {
    *(_QWORD *)(v1 + 184) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19FAF94C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 176);
  if (v3)
  {
    *(_QWORD *)(v1 + 184) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t altitude::HwScalerThumbJob::jobStep(altitude::HwScalerThumbJob *this)
{
  int v2;
  int v3;
  __IOSurface *v4;
  __IOSurface *v5;
  __IOSurface *v6;
  __IOSurface *IOSurface;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v13;
  unsigned int *(*v14)(uint64_t);
  void *v15;
  uint64_t v16;

  v2 = *((_DWORD *)this + 54);
  if (md::HardwareScaler::instance(md::HardwareScalerOperation,md::HardwareScalerFilterType)::onceToken != -1)
    dispatch_once(&md::HardwareScaler::instance(md::HardwareScalerOperation,md::HardwareScalerFilterType)::onceToken, &__block_literal_global_30111);
  *(_QWORD *)&v13 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v13 + 1) = 3221225472;
  v14 = ___ZN2md14HardwareScaler8instanceENS_23HardwareScalerOperationENS_24HardwareScalerFilterTypeE_block_invoke_3;
  v15 = &__block_descriptor_40_e5_v8__0l;
  v16 = 0x100000001;
  if (md::HardwareScaler::instance(md::HardwareScalerOperation,md::HardwareScalerFilterType)::once != -1)
    dispatch_once(&md::HardwareScaler::instance(md::HardwareScalerOperation,md::HardwareScalerFilterType)::once, &v13);
  v3 = md::HardwareScaler::instance(md::HardwareScalerOperation,md::HardwareScalerFilterType)::scaler;
  if (!v2)
  {
    IOSurface = CVPixelBufferGetIOSurface(**((CVPixelBufferRef **)this + 22));
    v8 = v3;
    goto LABEL_9;
  }
  if (v2 == 1)
  {
    v13 = xmmword_19FFB57F0;
    v4 = CVPixelBufferGetIOSurface(**((CVPixelBufferRef **)this + 22));
    md::HardwareScaler::scaleSync(v3, v4);
    v13 = xmmword_19FFB5800;
    v5 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(*((_QWORD *)this + 22) + 8));
    md::HardwareScaler::scaleSync(v3, v5);
    v13 = xmmword_19FFB5810;
    v6 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(*((_QWORD *)this + 22) + 16));
    md::HardwareScaler::scaleSync(v3, v6);
    v13 = xmmword_19FFB5820;
    IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(*((_QWORD *)this + 22) + 24));
    v8 = v3;
LABEL_9:
    md::HardwareScaler::scaleSync(v8, IOSurface);
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  return pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
}

void std::__shared_ptr_emplace<altitude::HwScalerThumbJob>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6178;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::HwScalerThumbJob>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6178;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::HwScalerThumbJob>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<altitude::PooledIOSurface>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::PooledIOSurface>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<altitude::PooledIOSurface>::__on_zero_shared(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

_QWORD *std::__function::__func<altitude::TextureMapLoadJob::mipmapIntoMipChain(void)::$_0,std::allocator<altitude::TextureMapLoadJob::mipmapIntoMipChain(void)::$_0>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42D8870;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<altitude::TextureMapLoadJob::mipmapIntoMipChain(void)::$_0,std::allocator<altitude::TextureMapLoadJob::mipmapIntoMipChain(void)::$_0>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42D8870;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<altitude::TextureMapLoadJob::mipmapIntoMipChain(void)::$_0,std::allocator<altitude::TextureMapLoadJob::mipmapIntoMipChain(void)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E42D8870;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<altitude::TextureMapLoadJob::mipmapIntoMipChain(void)::$_0,std::allocator<altitude::TextureMapLoadJob::mipmapIntoMipChain(void)::$_0>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E42D8870;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<altitude::TextureMapLoadJob::mipmapIntoMipChain(void)::$_0,std::allocator<altitude::TextureMapLoadJob::mipmapIntoMipChain(void)::$_0>,BOOL ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<altitude::TextureMapLoadJob::mipmapIntoMipChain(void)::$_0,std::allocator<altitude::TextureMapLoadJob::mipmapIntoMipChain(void)::$_0>,BOOL ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

uint64_t std::__function::__func<altitude::TextureMapLoadJob::mipmapIntoMipChain(void)::$_0,std::allocator<altitude::TextureMapLoadJob::mipmapIntoMipChain(void)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  altitude::MipChain *v2;

  altitude::MipChain::transferData(*(altitude::MipChain **)(a1 + 8));
  altitude::createCpuMipLevels(*(_QWORD *)(a1 + 8), v2);
  return 1;
}

void altitude::MipChain::transferData(altitude::MipChain *this)
{
  int v2;
  void *v3;
  void *BaseAddress;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  if (*(_DWORD *)this == 14)
    v2 = 2;
  else
    v2 = 4;
  IOSurfaceLock(*(IOSurfaceRef *)(*((_QWORD *)this + 1) + 16), 1u, 0);
  v3 = *(void **)(*(_QWORD *)(*((_QWORD *)this + 8) + 24) + 8);
  BaseAddress = IOSurfaceGetBaseAddress(*(IOSurfaceRef *)(*((_QWORD *)this + 1) + 16));
  memcpy(v3, BaseAddress, (v2 << 16));
  IOSurfaceUnlock(*(IOSurfaceRef *)(*((_QWORD *)this + 1) + 16), 1u, 0);
  IOSurfaceLock(*(IOSurfaceRef *)(*((_QWORD *)this + 3) + 16), 1u, 0);
  v5 = *(void **)(*(_QWORD *)(*((_QWORD *)this + 8) + 24) + 16);
  v6 = IOSurfaceGetBaseAddress(*(IOSurfaceRef *)(*((_QWORD *)this + 3) + 16));
  memcpy(v5, v6, (v2 << 14));
  IOSurfaceUnlock(*(IOSurfaceRef *)(*((_QWORD *)this + 3) + 16), 1u, 0);
  IOSurfaceLock(*(IOSurfaceRef *)(*((_QWORD *)this + 5) + 16), 1u, 0);
  v7 = *(void **)(*(_QWORD *)(*((_QWORD *)this + 8) + 24) + 24);
  v8 = IOSurfaceGetBaseAddress(*(IOSurfaceRef *)(*((_QWORD *)this + 5) + 16));
  memcpy(v7, v8, (v2 << 12));
  IOSurfaceUnlock(*(IOSurfaceRef *)(*((_QWORD *)this + 5) + 16), 1u, 0);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

uint64_t altitude::createCpuMipLevels(uint64_t this, altitude::MipChain *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  __int16 v25;
  int v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  const __int16 *v49;
  uint16x4_t v50;
  uint16x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint16x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  uint16x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  BOOL v86;
  BOOL v87;
  BOOL v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  BOOL v100;
  BOOL v101;
  BOOL v102;
  BOOL v103;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  const float *v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int16x8x2_t v116;
  float32x4x2_t v117;

  v2 = this;
  v3 = 3;
  v111 = (int8x16_t)vdupq_n_s32(0x3FC00u);
  v112 = (int8x16_t)vdupq_n_s32(0x3FC0000u);
  v114 = (int8x16_t)vdupq_n_s32(0x1F80u);
  v115 = (int8x16_t)vdupq_n_s32(0x7E0u);
  v113 = (int8x16_t)vdupq_n_s32(0x3E000u);
  do
  {
    v5 = 0x200u >> v3;
    if (*(_DWORD *)v2 == 4)
    {
      v62 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 64) + 16))(*(_QWORD *)(v2 + 64), v3);
      v4 = (v3 + 1);
      this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 64) + 16))(*(_QWORD *)(v2 + 64), v4);
      if (v3 > 8)
        goto LABEL_3;
      v63 = 0;
      v64 = 0;
      v65 = 0;
      v66 = 0x100u >> v3;
      if (v66 <= 1)
        v67 = 1;
      else
        v67 = v66;
      v68 = 2 * v5;
      v69 = v62 + 8 * v67;
      v70 = v69 - 4;
      v71 = 2 * (v67 - 1);
      v72.i64[0] = 0xFF000000FF000000;
      v72.i64[1] = 0xFF000000FF000000;
      v73.i64[0] = 0xFF000000FF0000;
      v73.i64[1] = 0xFF000000FF0000;
      v74.i64[0] = 0xFF000000FF00;
      v74.i64[1] = 0xFF000000FF00;
      v75.i64[0] = 0xFF000000FFLL;
      v75.i64[1] = 0xFF000000FFLL;
      v76.i64[0] = 0xFC000000FC000000;
      v76.i64[1] = 0xFC000000FC000000;
      while (1)
      {
        if (v67 >= 0xC)
        {
          v77 = 0;
          v85 = v68 * v65;
          v86 = __CFADD__(v66 * v65, v67 - 1);
          v87 = __CFADD__(v85, v71);
          v88 = __CFADD__(v68 * v65 + v5, v71);
          if (!__CFADD__(v5 + 1 + v68 * v65, v71) && !v88 && (v85 ^ 0xFFFFFFFE) >= v71 && !v86 && !v87)
          {
            v77 = 0;
            v89 = 4 * (v66 * v65);
            v90 = this + v89;
            v91 = this + 4 * v67 + v89;
            v92 = 4 * (v5 + 1 + v68 * (_DWORD)v65);
            v93 = v62 + v92;
            v94 = v70 + v92;
            v95 = 4 * (v68 * (_DWORD)v65 + v5);
            v96 = v62 + v95;
            v97 = 4 * (v68 * v65);
            v41 = v90 >= v70 + v95;
            v98 = v62 + v97;
            v99 = v69 + v97;
            v100 = v41 || v96 >= v91;
            v101 = !v100;
            v102 = v90 >= v99 || v98 >= v91;
            v103 = !v102;
            if ((v93 >= v91 || v90 >= v94) && !v101 && !v103)
            {
              v105 = v63;
              v106 = v64;
              v107 = v67 & 0x1FC;
              do
              {
                v108 = (const float *)(v62 + 4 * v105);
                v117 = vld2q_f32(v108);
                v109.i32[0] = *(_DWORD *)(v62 + 4 * (v5 + v105));
                v109.i32[1] = *(_DWORD *)(v62 + 4 * (v5 + v105 + 2));
                v109.i32[2] = *(_DWORD *)(v62 + 4 * (v5 + v105 + 4));
                v109.i32[3] = *(_DWORD *)(v62 + 4 * (v5 + v105 + 6));
                v110.i32[0] = *(_DWORD *)(v62 + 4 * (v5 + v105 + 1));
                v110.i32[1] = *(_DWORD *)(v62 + 4 * (v5 + v105 + 3));
                v110.i32[2] = *(_DWORD *)(v62 + 4 * (v5 + v105 + 5));
                v110.i32[3] = *(_DWORD *)(v62 + 4 * (v5 + v105 + 7));
                *(uint32x4_t *)(this + 4 * v106) = vshrq_n_u32((uint32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)v117.val[1], v75), (int32x4_t)vandq_s8((int8x16_t)v117.val[0], v75)), (int32x4_t)vandq_s8(v109, v75)), (int32x4_t)vandq_s8(v110, v75)), vandq_s8((int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)v117.val[1], v73), (int32x4_t)vandq_s8((int8x16_t)v117.val[0], v73)),
                                                                                        (int32x4_t)vandq_s8(v109, v73)),
                                                                                      (int32x4_t)vandq_s8(v110, v73)),
                                                                         v112)),
                                                                     vorrq_s8(vandq_s8((int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v117.val[1], (int32x4_t)vandq_s8((int8x16_t)v117.val[0], v72)), (int32x4_t)vandq_s8(v109, v72)), (int32x4_t)vandq_s8(v110, v72)), v76), vandq_s8((int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)v117.val[1], v74), (int32x4_t)vandq_s8((int8x16_t)v117.val[0], v74)), (int32x4_t)vandq_s8(v109, v74)), (int32x4_t)vandq_s8(v110, v74)), v111))), 2uLL);
                v106 += 4;
                v105 += 8;
                v107 -= 4;
              }
              while (v107);
              v77 = v67 & 0x1FC;
              if (v77 == v67)
                goto LABEL_60;
            }
          }
        }
        else
        {
          v77 = 0;
        }
        v78 = v67 - v77;
        v79 = v64 + v77;
        v80 = v63 + 2 * v77;
        do
        {
          v81 = *(_DWORD *)(v62 + 4 * v80);
          v82 = *(_DWORD *)(v62 + 4 * (v80 + 1));
          v83 = *(_DWORD *)(v62 + 4 * (v5 + v80));
          v84 = *(_DWORD *)(v62 + 4 * (v5 + v80 + 1));
          *(_DWORD *)(this + 4 * v79++) = ((v82
                                            + v81
                                            + v83
                                            + v84) | ((v82 & 0xFF0000)
                                                                     + (v81 & 0xFF0000)
                                                                     + (v83 & 0xFF0000)
                                                                     + (v84 & 0xFF0000)) & 0x3FC0000 | (v82 + (v81 & 0xFF000000) + (v83 & 0xFF000000) + (v84 & 0xFF000000)) & 0xFC000000 | ((v82 & 0xFF00) + (v81 & 0xFF00) + (v83 & 0xFF00) + (v84 & 0xFF00)) & 0x3FC00) >> 2;
          v80 += 2;
          --v78;
        }
        while (v78);
LABEL_60:
        ++v65;
        v64 += v66;
        v63 += v68;
        if (v65 == v66)
          goto LABEL_3;
      }
    }
    if (*(_DWORD *)v2 == 14)
    {
      v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 64) + 16))(*(_QWORD *)(v2 + 64), v3);
      v4 = (v3 + 1);
      this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 64) + 16))(*(_QWORD *)(v2 + 64), v4);
      v7.i64[0] = 0x1F0000001FLL;
      v7.i64[1] = 0x1F0000001FLL;
      v8.i64[0] = 0xF8000000F800;
      v8.i64[1] = 0xF8000000F800;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0x100u >> v3;
      v13 = v12 - 1;
      v14 = 2 * v5;
      v15 = v6 + 4 * v12;
      v16 = v15 - 2;
      v17 = 2 * (v12 - 1);
      while (1)
      {
        if (v3 <= 4)
        {
          v18 = 0;
          v26 = v14 * v11;
          v27 = __CFADD__(v12 * v11, (_DWORD)v13);
          v28 = __CFADD__(v26, v17);
          v29 = __CFADD__(v5 + v14 * v11, v17);
          if (!__CFADD__(v5 + 1 + v14 * v11, v17) && !v29 && (v26 ^ 0xFFFFFFFE) >= v17 && !v27 && !v28 && !(v13 >> 31))
          {
            v18 = 0;
            v30 = 2 * (v12 * v11);
            v31 = this + v30;
            v32 = this + 2 * v12 + v30;
            v33 = 2 * (v5 + 1 + v14 * (_DWORD)v11);
            v34 = v6 + v33;
            v35 = v16 + v33;
            v36 = 2 * (v5 + v14 * (_DWORD)v11);
            v37 = v6 + v36;
            v38 = 2 * (v14 * v11);
            v41 = v31 >= v16 + v36;
            v39 = v6 + v38;
            v40 = v15 + v38;
            v41 = v41 || v37 >= v32;
            v42 = !v41;
            v43 = v31 >= v40 || v39 >= v32;
            v44 = !v43;
            if ((v34 >= v32 || v31 >= v35) && !v42 && !v44)
            {
              v46 = v9;
              v47 = v10;
              v48 = v12 & 0x1F8;
              do
              {
                v49 = (const __int16 *)(v6 + 2 * v46);
                v116 = vld2q_s16(v49);
                v50.i16[0] = *(_WORD *)(v6 + 2 * (v5 + v46));
                v50.i16[1] = *(_WORD *)(v6 + 2 * (v5 + v46 + 2));
                v51.i16[0] = *(_WORD *)(v6 + 2 * (v5 + v46 + 8));
                v50.i16[2] = *(_WORD *)(v6 + 2 * (v5 + v46 + 4));
                v51.i16[1] = *(_WORD *)(v6 + 2 * (v5 + v46 + 10));
                v51.i16[2] = *(_WORD *)(v6 + 2 * (v5 + v46 + 12));
                v50.i16[3] = *(_WORD *)(v6 + 2 * (v5 + v46 + 6));
                v51.i16[3] = *(_WORD *)(v6 + 2 * (v5 + v46 + 14));
                v52 = (int8x16_t)vmovl_high_u16((uint16x8_t)v116.val[0]);
                v53 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v116.val[0].i8);
                v54.i16[0] = *(_WORD *)(v6 + 2 * (v5 + v46 + 9));
                v55 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v116.val[1].i8);
                v54.i16[1] = *(_WORD *)(v6 + 2 * (v5 + v46 + 11));
                v54.i16[2] = *(_WORD *)(v6 + 2 * (v5 + v46 + 13));
                v56 = (int8x16_t)vmovl_high_u16((uint16x8_t)v116.val[1]);
                v54.i16[3] = *(_WORD *)(v6 + 2 * (v5 + v46 + 15));
                v57.i16[0] = *(_WORD *)(v6 + 2 * (v5 + v46 + 1));
                v58 = (int8x16_t)vmovl_u16(v50);
                v57.i16[1] = *(_WORD *)(v6 + 2 * (v5 + v46 + 3));
                v57.i16[2] = *(_WORD *)(v6 + 2 * (v5 + v46 + 5));
                v59 = (int8x16_t)vmovl_u16(v51);
                v60 = (int8x16_t)vmovl_u16(v54);
                v57.i16[3] = *(_WORD *)(v6 + 2 * (v5 + v46 + 7));
                v61 = (int8x16_t)vmovl_u16(v57);
                *(int16x8_t *)(this + 2 * v47) = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v55, v115), (int32x4_t)vandq_s8(v53, v115)), (int32x4_t)vandq_s8(v58, v115)), (int32x4_t)vandq_s8(v61, v115)), v114), (int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v55, v7), (int32x4_t)vandq_s8(v53, v7)), (int32x4_t)vandq_s8(v58, v7)), (int32x4_t)vandq_s8(v61, v7))),
                                                                    vandq_s8((int8x16_t)vaddq_s32(vaddq_s32((int32x4_t)vaddw_u16((uint32x4_t)vandq_s8(v53, v8), *(uint16x4_t *)v116.val[1].i8), (int32x4_t)vandq_s8(v58, v8)), (int32x4_t)vandq_s8(v61, v8)), v113)), 2uLL), (int32x4_t)vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v56, v115), (int32x4_t)vandq_s8(v52, v115)), (int32x4_t)vandq_s8(v59, v115)), (int32x4_t)vandq_s8(v60, v115)),
                                                                      v114),
                                                                    (int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v56, v7), (int32x4_t)vandq_s8(v52, v7)), (int32x4_t)vandq_s8(v59, v7)), (int32x4_t)vandq_s8(v60, v7))), vandq_s8((int8x16_t)vaddq_s32(vaddq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vandq_s8(v52, v8), (uint16x8_t)v116.val[1]), (int32x4_t)vandq_s8(v59, v8)), (int32x4_t)vandq_s8(v60, v8)), v113)), 2uLL);
                v47 += 8;
                v46 += 16;
                v48 -= 8;
              }
              while (v48);
              v18 = v12 & 0x1F8;
              if (v18 == v12)
                goto LABEL_11;
            }
          }
        }
        else
        {
          v18 = 0;
        }
        v19 = v12 - v18;
        v20 = v10 + v18;
        v21 = v9 + 2 * v18;
        do
        {
          v22 = *(_WORD *)(v6 + 2 * v21);
          v23 = *(unsigned __int16 *)(v6 + 2 * (v21 + 1));
          v24 = *(_WORD *)(v6 + 2 * (v5 + v21));
          v25 = *(_WORD *)(v6 + 2 * (v5 + v21 + 1));
          *(_WORD *)(this + 2 * v20++) = (((v23 & 0x7E0) + (v22 & 0x7E0) + (v24 & 0x7E0) + (v25 & 0x7E0)) & 0x1F80 | ((v23 & 0x1F) + (v22 & 0x1F) + (v24 & 0x1F) + (v25 & 0x1F)) | ((v22 & 0xF800) + v23 + (v24 & 0xF800) + (v25 & 0xF800)) & 0x3E000u) >> 2;
          v21 += 2;
          --v19;
        }
        while (v19);
LABEL_11:
        ++v11;
        v10 += v12;
        v9 += v14;
        if (v11 == v12)
          goto LABEL_3;
      }
    }
    v4 = (v3 + 1);
LABEL_3:
    v3 = v4;
  }
  while ((_DWORD)v4 != 9);
  return this;
}

void std::__shared_ptr_emplace<altitude::util::GenericJob>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::util::GenericJob>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6450;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::util::GenericJob>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void altitude::HwScalerMipLevelsJob::~HwScalerMipLevelsJob(altitude::HwScalerMipLevelsJob *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  CVPixelBufferRef *v5;
  CVPixelBufferRef *v6;

  *(_QWORD *)this = &off_1E42C58F0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (CVPixelBufferRef *)*((_QWORD *)this + 22);
  v6 = (CVPixelBufferRef *)*((_QWORD *)this + 23);
  if (v5 != v6)
  {
    do
      CVPixelBufferRelease(*v5++);
    while (v5 != v6);
    v5 = (CVPixelBufferRef *)*((_QWORD *)this + 22);
  }
  if (v5)
  {
    *((_QWORD *)this + 23) = v5;
    operator delete(v5);
  }
  karo::Job::~Job(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  CVPixelBufferRef *v5;
  CVPixelBufferRef *v6;

  *(_QWORD *)this = &off_1E42C58F0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (CVPixelBufferRef *)*((_QWORD *)this + 22);
  v6 = (CVPixelBufferRef *)*((_QWORD *)this + 23);
  if (v5 != v6)
  {
    do
      CVPixelBufferRelease(*v5++);
    while (v5 != v6);
    v5 = (CVPixelBufferRef *)*((_QWORD *)this + 22);
  }
  if (v5)
  {
    *((_QWORD *)this + 23) = v5;
    operator delete(v5);
  }
  karo::Job::~Job(this);
  JUMPOUT(0x1A1AF4E00);
}

void sub_19FAFA418(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 176);
  if (v3)
  {
    *(_QWORD *)(v1 + 184) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19FAFA4E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 176);
  if (v3)
  {
    *(_QWORD *)(v1 + 184) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t altitude::HwScalerMipLevelsJob::jobStep(altitude::HwScalerMipLevelsJob *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  altitude::createHWScalerMipLevels((uint64_t)this + 176, *((_QWORD *)this + 25), *((_DWORD *)this + 54));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  return pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
}

uint64_t altitude::createHWScalerMipLevels(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  CVPixelBufferRef *v7;
  int v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  __IOSurface *IOSurface;
  __IOSurface *v13;
  uint64_t block;
  uint64_t v16;
  unsigned int *(*v17)(uint64_t);
  void *v18;
  uint64_t v19;

  if (md::HardwareScaler::instance(md::HardwareScalerOperation,md::HardwareScalerFilterType)::onceToken != -1)
    dispatch_once(&md::HardwareScaler::instance(md::HardwareScalerOperation,md::HardwareScalerFilterType)::onceToken, &__block_literal_global_30111);
  block = MEMORY[0x1E0C809B0];
  v16 = 3221225472;
  v17 = ___ZN2md14HardwareScaler8instanceENS_23HardwareScalerOperationENS_24HardwareScalerFilterTypeE_block_invoke_2;
  v18 = &__block_descriptor_40_e5_v8__0l;
  v19 = 0x100000000;
  if (md::HardwareScaler::instance(md::HardwareScalerOperation,md::HardwareScalerFilterType)::once != -1)
    dispatch_once(&md::HardwareScaler::instance(md::HardwareScalerOperation,md::HardwareScalerFilterType)::once, &block);
  v6 = md::HardwareScaler::instance(md::HardwareScalerOperation,md::HardwareScalerFilterType)::scaler;
  if (a3)
  {
    if (a3 == 1)
    {
      v7 = *(CVPixelBufferRef **)a1;
      if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v11 = 1;
        do
        {
          LODWORD(block) = v8 & 0xFFFFFF80;
          HIDWORD(block) = v9 & 0x80;
          LODWORD(v16) = (v8 & 0xFFFFFF80) + 128;
          HIDWORD(v16) = HIDWORD(block) + 128;
          IOSurface = CVPixelBufferGetIOSurface(v7[v10]);
          md::HardwareScaler::scaleSync(v6, IOSurface);
          v10 = v11;
          v7 = *(CVPixelBufferRef **)a1;
          ++v11;
          v9 += 128;
          v8 += 64;
        }
        while (v10 < (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
      }
    }
  }
  else
  {
    v13 = CVPixelBufferGetIOSurface(**(CVPixelBufferRef **)a1);
    md::HardwareScaler::scaleSync(v6, v13);
  }
  md::HardwareScaler::scaleSync(v6, *(IOSurfaceRef *)(*(_QWORD *)(a2 + 8) + 16));
  return md::HardwareScaler::scaleSync(v6, *(IOSurfaceRef *)(*(_QWORD *)(a2 + 24) + 16));
}

void std::__shared_ptr_emplace<altitude::HwScalerMipLevelsJob>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::HwScalerMipLevelsJob>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6300;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::HwScalerMipLevelsJob>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void altitude::MipChain::MipData::~MipData(altitude::MipChain::MipData *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E42C6A18;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E42C6A18;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::MipChain::MipData::mipData(altitude::MipChain::MipData *this, unsigned int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 8 * a2);
}

void std::__shared_ptr_emplace<altitude::MipChain>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E64F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::MipChain>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E64F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<altitude::MipChain>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  free(*(void **)(a1 + 80));
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 96);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  v10 = *(std::__shared_weak_count **)(a1 + 40);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_19FAFACAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 336);
  std::vector<ggl::Texture2DLoadItem>::~vector[abi:nn180100]((void **)(v1 + 312));
  std::vector<ggl::Texture2DLoadItem>::~vector[abi:nn180100](v2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 272);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 256);
  v4 = *(void **)(v1 + 232);
  if (v4)
  {
    *(_QWORD *)(v1 + 240) = v4;
    operator delete(v4);
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 208);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 192);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 176);
  karo::Job::~Job((karo::Job *)v1);
  _Unwind_Resume(a1);
}

void **std::vector<ggl::Texture2DLoadItem>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v2 = (char *)*a1;
  if (!*a1)
    return a1;
  v3 = (char *)a1[1];
  v4 = *a1;
  if (v3 == v2)
    goto LABEL_15;
  v5 = v3 - 32;
  do
  {
    v7 = (char *)*((_QWORD *)v5 + 3);
    if (v5 == v7)
    {
      v7 = v5;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_10;
      v8 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_10:
    if (*(v5 - 28))
      *(v5 - 28) = 0;
    if (*(v5 - 32))
      *(v5 - 32) = 0;
    v6 = v5 - 48;
    v5 -= 80;
  }
  while (v6 != v2);
  v4 = *a1;
LABEL_15:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

void altitude::TexturePager::~TexturePager(altitude::TexturePager *this)
{
  altitude::TexturePager::~TexturePager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  CVPixelBufferRef *v7;
  CVPixelBufferRef *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  std::unique_lock<std::mutex> __lk;
  std::mutex v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E42C3F80;
  altitude::TileManager::unregisterTileListener(*((_QWORD *)this + 2), (uint64_t)this);
  v28.__m_.__sig = 850045863;
  memset(v28.__m_.__opaque, 0, sizeof(v28.__m_.__opaque));
  __lk.__m_ = &v28;
  __lk.__owns_ = 1;
  std::mutex::lock(&v28);
  while (atomic_load((unsigned int *)this + 80))
    std::condition_variable::wait((std::condition_variable *)((char *)this + 328), &__lk);
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  std::mutex::~mutex(&v28);
  v3 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;

  v4 = *((_QWORD *)this + 5);
  v5 = *((_QWORD *)this + 6);
  while (v4 != v5)
  {
    v6 = *(_QWORD **)v4;
    v7 = *(CVPixelBufferRef **)(*(_QWORD *)v4 + 16);
    v8 = *(CVPixelBufferRef **)(*(_QWORD *)v4 + 24);
    if (v7 == v8)
      goto LABEL_16;
    do
    {
      if (*v7)
        CVPixelBufferRelease(*v7);
      ++v7;
    }
    while (v7 != v8);
    v6 = *(_QWORD **)v4;
    if (*(_QWORD *)v4)
    {
LABEL_16:
      v9 = (std::__shared_weak_count *)v6[8];
      if (!v9)
        goto LABEL_20;
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        v12 = (void *)v6[2];
        if (v12)
        {
LABEL_21:
          v6[3] = v12;
          operator delete(v12);
        }
      }
      else
      {
LABEL_20:
        v12 = (void *)v6[2];
        if (v12)
          goto LABEL_21;
      }
      MEMORY[0x1A1AF4E00](v6, 0x10A0C40358E639CLL);
    }
    v4 += 8;
  }
  v13 = *((_QWORD *)this + 15);
  v14 = *((_QWORD *)this + 16);
  if (v13 != v14)
  {
    do
    {
      v15 = *(_QWORD *)(v13 + 8);
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v13 += 16;
    }
    while (v13 != v14);
    v13 = *((_QWORD *)this + 15);
  }
  *((_QWORD *)this + 16) = v13;
  v16 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 328));
  std::mutex::~mutex((std::mutex *)this + 4);
  v23 = (void *)*((_QWORD *)this + 29);
  if (v23)
  {
    *((_QWORD *)this + 30) = v23;
    operator delete(v23);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 168));
  v24 = (void *)*((_QWORD *)this + 18);
  if (v24)
  {
    *((_QWORD *)this + 19) = v24;
    operator delete(v24);
  }
  v25 = (void *)*((_QWORD *)this + 15);
  if (v25)
  {
    *((_QWORD *)this + 16) = v25;
    operator delete(v25);
  }
  std::deque<altitude::TexturePager::PagedTextureData *>::~deque[abi:nn180100]((uint64_t)this + 64);
  v26 = (void *)*((_QWORD *)this + 5);
  if (v26)
  {
    *((_QWORD *)this + 6) = v26;
    operator delete(v26);
  }

}

void altitude::TexturePager::onTileComponentDataLoaded(altitude::TexturePager *this, altitude::TileComponent **a2, altitude::TileComponent *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  altitude::TextureMap *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  altitude::TextureMap **v15;
  altitude::TextureMap **v16;
  altitude::TextureMap *v17;
  uint64_t v18;
  uint64_t v19;
  altitude::TextureMap **v20;
  altitude::TextureMap **v21;
  altitude::TextureMap *v22;

  if (a2[41] == a3)
  {
    if (*((uint64_t **)a3 + 15) == a4)
    {
      v13 = a4[6];
      v14 = a4[7];
      while (v13 != v14)
      {
        v15 = *(altitude::TextureMap ***)(*(_QWORD *)v13 + 256);
        v16 = *(altitude::TextureMap ***)(*(_QWORD *)v13 + 264);
        while (v15 != v16)
        {
          v17 = *v15++;
          altitude::TexturePager::registerTextureMap(this, v17);
        }
        v13 += 8;
      }
    }
    else if (*((uint64_t **)a3 + 26) == a4)
    {
      v18 = a4[6];
      v19 = a4[7];
      while (v18 != v19)
      {
        v20 = *(altitude::TextureMap ***)(*(_QWORD *)v18 + 256);
        v21 = *(altitude::TextureMap ***)(*(_QWORD *)v18 + 264);
        while (v20 != v21)
        {
          v22 = *v20++;
          altitude::TexturePager::registerTextureMap(this, v22);
        }
        v18 += 8;
      }
    }
    else if ((uint64_t *)((char *)a3 + 152) == a4)
    {
      v5 = *a4;
      v6 = *((_QWORD *)a3 + 20);
      while (v5 != v6)
      {
        v7 = *(altitude::TextureMap **)v5;
        v8 = *(std::__shared_weak_count **)(v5 + 8);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        altitude::TexturePager::registerTextureMap(this, v7);
        if (v8)
        {
          v11 = (unint64_t *)&v8->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v5 += 16;
      }
    }
  }
}

void sub_19FAFAF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void altitude::TexturePager::onTileComponentDataRelease(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t **a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;

  if (*(_QWORD **)(a2 + 328) == a3)
  {
    if ((uint64_t **)a3[15] != a4 && (uint64_t **)a3[26] != a4)
    {
      if (a3 + 19 != a4)
        return;
      v5 = *a4;
      v6 = (uint64_t *)a3[20];
      while (1)
      {
        if (v5 == v6)
          return;
        v7 = *v5;
        v8 = (std::__shared_weak_count *)v5[1];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        if (v7)
        {
          v11 = *(_QWORD *)(v7 + 40);
          if (v11)
          {
            if (*(_DWORD *)v11 == 1)
            {
              v17 = v11 + 8;
              v16 = *(_QWORD **)(v11 + 8);
              if (*(_QWORD *)(v17 + 8) - (_QWORD)v16 != 64 || !*v16 || !v16[2] || !v16[4] || !v16[6])
                goto LABEL_32;
            }
            else
            {
              if (*(_DWORD *)v11)
                goto LABEL_32;
              v13 = v11 + 8;
              v12 = *(_QWORD **)(v11 + 8);
              if (*(_QWORD *)(v13 + 8) - (_QWORD)v12 != 16 || !*v12)
                goto LABEL_32;
            }
            v14 = *(_QWORD *)(a1 + 40);
            v15 = *(_QWORD *)(a1 + 48);
            if (v14 != v15)
            {
              while (**(_QWORD **)v14 != v7)
              {
                v14 += 8;
                if (v14 == v15)
                  goto LABEL_32;
              }
            }
            if (v14 != v15)
            {
              v18 = *(_QWORD **)v14;
              v19 = *(_DWORD *)(*(_QWORD *)v14 + 76);
              v20 = __OFSUB__(v19--, 1);
              *((_DWORD *)v18 + 19) = v19;
              if ((v19 < 0) ^ v20 | (v19 == 0))
                *v18 = 0;
            }
          }
        }
LABEL_32:
        if (v8)
        {
          v21 = (unint64_t *)&v8->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v5 += 2;
      }
    }
    v23 = a4[6];
    v24 = a4[7];
LABEL_39:
    if (v23 == v24)
      return;
    v25 = *(uint64_t **)(*v23 + 256);
    v26 = *(uint64_t **)(*v23 + 264);
    while (1)
    {
      if (v25 == v26)
      {
        ++v23;
        goto LABEL_39;
      }
      v27 = *v25;
      if (*v25)
      {
        v28 = *(_QWORD *)(v27 + 40);
        if (v28)
        {
          if (*(_DWORD *)v28 == 1)
          {
            v34 = v28 + 8;
            v33 = *(_QWORD **)(v28 + 8);
            if (*(_QWORD *)(v34 + 8) - (_QWORD)v33 != 64 || !*v33 || !v33[2] || !v33[4] || !v33[6])
              goto LABEL_41;
          }
          else
          {
            if (*(_DWORD *)v28)
              goto LABEL_41;
            v30 = v28 + 8;
            v29 = *(_QWORD **)(v28 + 8);
            if (*(_QWORD *)(v30 + 8) - (_QWORD)v29 != 16 || !*v29)
              goto LABEL_41;
          }
          v31 = *(_QWORD *)(a1 + 40);
          v32 = *(_QWORD *)(a1 + 48);
          if (v31 != v32)
          {
            while (**(_QWORD **)v31 != v27)
            {
              v31 += 8;
              if (v31 == v32)
                goto LABEL_41;
            }
          }
          if (v31 != v32)
          {
            v35 = *(_QWORD **)v31;
            v36 = *(_DWORD *)(*(_QWORD *)v31 + 76);
            v20 = __OFSUB__(v36--, 1);
            *((_DWORD *)v35 + 19) = v36;
            if ((v36 < 0) ^ v20 | (v36 == 0))
              *v35 = 0;
          }
        }
      }
LABEL_41:
      ++v25;
    }
  }
}

void altitude::TexturePager::registerTextureMap(altitude::TexturePager *this, altitude::TextureMap *a2)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t *v22;
  char *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  if (a2)
  {
    v3 = *((_QWORD *)a2 + 5);
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        v10 = v3 + 8;
        v9 = *(_QWORD **)(v3 + 8);
        if (*(_QWORD *)(v10 + 8) - (_QWORD)v9 != 64 || !*v9 || !v9[2] || !v9[4] || !v9[6])
          return;
      }
      else
      {
        if (*(_DWORD *)v3)
          return;
        v6 = v3 + 8;
        v5 = *(_QWORD **)(v3 + 8);
        if (*(_QWORD *)(v6 + 8) - (_QWORD)v5 != 16 || !*v5)
          return;
      }
      if (*((_QWORD *)a2 + 3))
      {
        v7 = *((_QWORD *)this + 5);
        v8 = *((_QWORD *)this + 6);
        if (v7 != v8)
        {
          while (**(altitude::TextureMap ***)v7 != a2)
          {
            v7 += 8;
            if (v7 == v8)
              goto LABEL_20;
          }
        }
        if (v7 == v8)
        {
LABEL_20:
          v11 = operator new();
          v12 = v11;
          *(_QWORD *)v11 = a2;
          *(_DWORD *)(v11 + 8) = 0;
          *(_QWORD *)(v11 + 56) = 0;
          *(_QWORD *)(v11 + 64) = 0;
          *(_QWORD *)(v11 + 24) = 0;
          *(_QWORD *)(v11 + 32) = 0;
          *(_QWORD *)(v11 + 16) = 0;
          *(_QWORD *)(v11 + 72) = 0x100000007;
          *(_BYTE *)(v11 + 40) = *(_DWORD *)(*((_QWORD *)a2 + 2) + 104) > 1u;
          v13 = **((_DWORD **)a2 + 5);
          *(_DWORD *)(v11 + 44) = *((_DWORD *)a2 + 2);
          *(_DWORD *)(v11 + 48) = v13;
          v15 = (uint64_t *)*((_QWORD *)this + 6);
          v14 = *((_QWORD *)this + 7);
          if ((unint64_t)v15 >= v14)
          {
            v16 = (uint64_t *)*((_QWORD *)this + 5);
            v17 = v15 - v16;
            v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 61)
              abort();
            v19 = v14 - (_QWORD)v16;
            if (v19 >> 2 > v18)
              v18 = v19 >> 2;
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
              v20 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v20 = v18;
            if (v20)
            {
              if (v20 >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v21 = operator new(8 * v20);
            }
            else
            {
              v21 = 0;
            }
            v22 = (uint64_t *)&v21[8 * v17];
            v23 = &v21[8 * v20];
            *v22 = v12;
            v24 = v22 + 1;
            if (v15 == v16)
            {
              v16 = v15;
            }
            else
            {
              v25 = (char *)v15 - (char *)v16 - 8;
              if (v25 < 0x58)
                goto LABEL_49;
              if ((unint64_t)((char *)v16 - v21) < 0x20)
                goto LABEL_49;
              v26 = (v25 >> 3) + 1;
              v27 = &v21[8 * v17 - 16];
              v28 = v15 - 2;
              v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v30 = *(_OWORD *)v28;
                *(v27 - 1) = *((_OWORD *)v28 - 1);
                *v27 = v30;
                v27 -= 2;
                v28 -= 4;
                v29 -= 4;
              }
              while (v29);
              v22 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
              v15 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
              if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_49:
                do
                {
                  v31 = *--v15;
                  *--v22 = v31;
                }
                while (v15 != v16);
                v16 = (uint64_t *)*((_QWORD *)this + 5);
              }
            }
            *((_QWORD *)this + 5) = v22;
            *((_QWORD *)this + 6) = v24;
            *((_QWORD *)this + 7) = v23;
            if (v16)
              operator delete(v16);
            *((_QWORD *)this + 6) = v24;
          }
          else
          {
            *v15 = v11;
            *((_QWORD *)this + 6) = v15 + 1;
          }
        }
        else
        {
          ++*(_DWORD *)(*(_QWORD *)v7 + 76);
        }
      }
    }
  }
}

void sub_19FAFB720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::mutex *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  std::mutex::~mutex((std::mutex *)&a12);
  v14 = *(_QWORD *)(v12 + 416);
  *(_QWORD *)(v12 + 416) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v12 + 400);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v12 + 384);
  std::condition_variable::~condition_variable((std::condition_variable *)(v12 + 328));
  std::mutex::~mutex((std::mutex *)(v12 + 256));
  v15 = *(void **)(v12 + 232);
  if (v15)
  {
    *(_QWORD *)(v12 + 240) = v15;
    operator delete(v15);
  }
  std::mutex::~mutex((std::mutex *)(v12 + 168));
  v16 = *(void **)(v12 + 144);
  if (v16)
  {
    *(_QWORD *)(v12 + 152) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(v12 + 120);
  if (v17)
  {
    *(_QWORD *)(v12 + 128) = v17;
    operator delete(v17);
  }
  std::deque<altitude::TexturePager::PagedTextureData *>::~deque[abi:nn180100](v12 + 64);
  v18 = *(void **)(v12 + 40);
  if (v18)
  {
    *(_QWORD *)(v12 + 48) = v18;
    operator delete(v18);
  }

  _Unwind_Resume(a1);
}

uint64_t std::deque<altitude::TexturePager::PagedTextureData *>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t ___ZN8altitude17TextureMapLoadJob16decodeH264ImagesERKNSt3__110shared_ptrINS_20TextureMapSourceDataEEE_block_invoke(uint64_t a1, __CVBuffer *a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t result;

  v6 = *(_QWORD **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 64);
  pthread_mutex_lock(*(pthread_mutex_t **)(v7 + 152));
  v8 = *(_DWORD *)(v7 + 160);
  result = pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 152));
  if ((v8 & 2) == 0)
  {
    if ((a3 - 1) >= 4)
    {
      if (!a3)
      {
        CVPixelBufferRetain(a2);
        *(_QWORD *)(v6[29] + 8 * *(unsigned int *)(a1 + 40)) = a2;
        return karo::Job::step(*(karo::Job **)(a1 + 64));
      }
    }
    else
    {
      karo::Job::step(*(karo::Job **)(a1 + 64));
      return (*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    }
  }
  return result;
}

uint64_t __copy_helper_block_ea8_32c109_ZTSKZN8altitude17TextureMapLoadJob16decodeH264ImagesERKNSt3__110shared_ptrINS_20TextureMapSourceDataEEEE3__0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = v2;
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 72) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void __destroy_helper_block_ea8_32c109_ZTSKZN8altitude17TextureMapLoadJob16decodeH264ImagesERKNSt3__110shared_ptrINS_20TextureMapSourceDataEEEE3__0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void altitude::H264ProxyJob::~H264ProxyJob(altitude::H264ProxyJob *this)
{
  karo::Job::~Job(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::H264ProxyJob::cancel(altitude::H264ProxyJob *this)
{
  std::mutex *v2;
  OpaqueVTDecompressionSession **i;

  v2 = (std::mutex *)*((_QWORD *)this + 22);
  if (v2)
  {
    std::mutex::lock(*((std::mutex **)this + 22));
    for (i = (OpaqueVTDecompressionSession **)&v2[1].__m_.__opaque[8];
          ;
          softLinkVTDecompressionSessionWaitForAsynchronousFrames(i[4]))
    {
      i = (OpaqueVTDecompressionSession **)*i;
      if (!i)
        break;
    }
    std::mutex::unlock(v2);
  }
  karo::Job::cancel(this);
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  return pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
}

void sub_19FAFBAE4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t altitude::H264ProxyJob::jobStep(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = this;
  v2 = (unsigned int *)(this + 188);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 + 1;
  }
  while (__stlxr(v4, v2));
  if (v4 == *(_DWORD *)(this + 184))
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(this + 152));
    *(_DWORD *)(v1 + 160) |= 1u;
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 152));
  }
  return this;
}

void std::__shared_ptr_emplace<altitude::H264ProxyJob>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5FB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::H264ProxyJob>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5FB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::H264ProxyJob>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::__function::__func<altitude::TextureMapLoadJob::decodeFigImages(std::shared_ptr<altitude::TextureMapSourceData> const&)::$_0,std::allocator<altitude::TextureMapLoadJob::decodeFigImages(std::shared_ptr<altitude::TextureMapSourceData> const&)::$_0>,void ()(unsigned long,md::HardwareFigDecodeResult,__CVBuffer *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42D8828;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void std::__function::__func<altitude::TextureMapLoadJob::decodeFigImages(std::shared_ptr<altitude::TextureMapSourceData> const&)::$_0,std::allocator<altitude::TextureMapLoadJob::decodeFigImages(std::shared_ptr<altitude::TextureMapSourceData> const&)::$_0>,void ()(unsigned long,md::HardwareFigDecodeResult,__CVBuffer *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42D8828;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<altitude::TextureMapLoadJob::decodeFigImages(std::shared_ptr<altitude::TextureMapSourceData> const&)::$_0,std::allocator<altitude::TextureMapLoadJob::decodeFigImages(std::shared_ptr<altitude::TextureMapSourceData> const&)::$_0>,void ()(unsigned long,md::HardwareFigDecodeResult,__CVBuffer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x38uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D8828;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  result[3] = *(_QWORD *)(a1 + 24);
  result[4] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a1 + 48);
  result[5] = *(_QWORD *)(a1 + 40);
  result[6] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t std::__function::__func<altitude::TextureMapLoadJob::decodeFigImages(std::shared_ptr<altitude::TextureMapSourceData> const&)::$_0,std::allocator<altitude::TextureMapLoadJob::decodeFigImages(std::shared_ptr<altitude::TextureMapSourceData> const&)::$_0>,void ()(unsigned long,md::HardwareFigDecodeResult,__CVBuffer *)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a2 = &off_1E42D8828;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 32) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(result + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void std::__function::__func<altitude::TextureMapLoadJob::decodeFigImages(std::shared_ptr<altitude::TextureMapSourceData> const&)::$_0,std::allocator<altitude::TextureMapLoadJob::decodeFigImages(std::shared_ptr<altitude::TextureMapSourceData> const&)::$_0>,void ()(unsigned long,md::HardwareFigDecodeResult,__CVBuffer *)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__function::__func<altitude::TextureMapLoadJob::decodeFigImages(std::shared_ptr<altitude::TextureMapSourceData> const&)::$_0,std::allocator<altitude::TextureMapLoadJob::decodeFigImages(std::shared_ptr<altitude::TextureMapSourceData> const&)::$_0>,void ()(unsigned long,md::HardwareFigDecodeResult,__CVBuffer *)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  operator delete(__p);
}

uint64_t std::__function::__func<altitude::TextureMapLoadJob::decodeFigImages(std::shared_ptr<altitude::TextureMapSourceData> const&)::$_0,std::allocator<altitude::TextureMapLoadJob::decodeFigImages(std::shared_ptr<altitude::TextureMapSourceData> const&)::$_0>,void ()(unsigned long,md::HardwareFigDecodeResult,__CVBuffer *)>::operator()(uint64_t a1, uint64_t a2, int *a3, __CVBuffer **a4)
{
  int v5;
  __CVBuffer *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  karo::Job *v12;
  uint64_t v13;
  karo::Job *v14;

  v5 = *a3;
  v6 = *a4;
  v7 = *(_QWORD **)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 40);
  pthread_mutex_lock(*(pthread_mutex_t **)(v8 + 152));
  v9 = *(_DWORD *)(v8 + 160) & 2;
  result = pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 152));
  if (v5 != 1 && v9 == 0)
  {
    if (v5)
    {
      v12 = *(karo::Job **)(a1 + 40);
      *((_QWORD *)v12 + *(unsigned int *)(a1 + 16) + 23) = 0;
      karo::Job::step(v12);
      return (*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
    else
    {
      CVPixelBufferRetain(v6);
      v13 = 8 * *(unsigned int *)(a1 + 16);
      *(_QWORD *)(v7[29] + v13) = v6;
      v14 = *(karo::Job **)(a1 + 40);
      *(_QWORD *)((char *)v14 + v13 + 184) = 0;
      return karo::Job::step(v14);
    }
  }
  return result;
}

void altitude::ProxyJob::~ProxyJob(altitude::ProxyJob *this)
{
  karo::Job::~Job(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::ProxyJob::cancel(pthread_mutex_t **this)
{
  unint64_t v2;
  unint64_t i;
  pthread_mutex_t **v4;
  unint64_t *v5;
  pthread_mutex_t *v6;
  unint64_t v7;
  uint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v2 = *((unsigned int *)this + 44);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = &this[i];
      v6 = v4[23];
      v5 = (unint64_t *)(v4 + 23);
      if (v6)
      {
        if (md::HardwareFigDecoder::instance(void)::once != -1)
          dispatch_once(&md::HardwareFigDecoder::instance(void)::once, &__block_literal_global_19093);
        v7 = *v5;
        v8 = *(_QWORD *)md::HardwareFigDecoder::instance(void)::_singleton;
        std::mutex::lock(*(std::mutex **)md::HardwareFigDecoder::instance(void)::_singleton);
        v9 = *(int8x8_t *)(v8 + 80);
        if (v9)
        {
          v10 = (uint8x8_t)vcnt_s8(v9);
          v10.i16[0] = vaddlv_u8(v10);
          if (v10.u32[0] > 1uLL)
          {
            v11 = v7;
            if (*(_QWORD *)&v9 <= v7)
              v11 = v7 % *(_QWORD *)&v9;
          }
          else
          {
            v11 = (*(_QWORD *)&v9 - 1) & v7;
          }
          v12 = *(uint64_t ***)(*(_QWORD *)(v8 + 72) + 8 * v11);
          if (v12)
          {
            v13 = *v12;
            if (*v12)
            {
              if (v10.u32[0] < 2uLL)
              {
                v14 = *(_QWORD *)&v9 - 1;
                while (1)
                {
                  v16 = v13[1];
                  if (v16 == v7)
                  {
                    if (v13[2] == v7)
                      goto LABEL_29;
                  }
                  else if ((v16 & v14) != v11)
                  {
                    goto LABEL_3;
                  }
                  v13 = (uint64_t *)*v13;
                  if (!v13)
                    goto LABEL_3;
                }
              }
              do
              {
                v15 = v13[1];
                if (v15 == v7)
                {
                  if (v13[2] == v7)
                  {
LABEL_29:
                    CMPhotoDecompressionContainerCancelAsyncRequest();
                    break;
                  }
                }
                else
                {
                  if (v15 >= *(_QWORD *)&v9)
                    v15 %= *(_QWORD *)&v9;
                  if (v15 != v11)
                    break;
                }
                v13 = (uint64_t *)*v13;
              }
              while (v13);
            }
          }
        }
LABEL_3:
        std::mutex::unlock((std::mutex *)v8);
        v2 = *((unsigned int *)this + 44);
      }
    }
  }
  karo::Job::cancel((karo::Job *)this);
  pthread_mutex_lock(this[19]);
  *((_DWORD *)this + 40) |= 1u;
  return pthread_mutex_unlock(this[19]);
}

void sub_19FAFC1D8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t altitude::ProxyJob::jobStep(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = this;
  v2 = (unsigned int *)(this + 216);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 + 1;
  }
  while (__stlxr(v4, v2));
  if (v4 == *(_DWORD *)(this + 176))
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(this + 152));
    *(_DWORD *)(v1 + 160) |= 1u;
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 152));
  }
  return this;
}

void std::__shared_ptr_emplace<altitude::ProxyJob>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::ProxyJob>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6530;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::ProxyJob>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *altitude::TextureMapLoadJob::TextureMapLoadJob(uint64_t a1, uint64_t a2, _QWORD *a3, char a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t *v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  opaqueCMFormatDescription *v99;
  __int128 v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v120;
  opaqueCMSampleBuffer *v121;
  uint64_t v122;
  uint64_t *v123;
  const void *v124;
  __int128 v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  _QWORD v128[3];
  _QWORD *v129;
  uint64_t *v130;
  unsigned int v131;
  __int128 v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v8 = karo::Job::Job(a1, a2);
  *(_QWORD *)v8 = &off_1E42C5280;
  *(_QWORD *)(v8 + 176) = *a3;
  v9 = a3[1];
  *(_QWORD *)(v8 + 184) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  v12 = (_QWORD *)(v8 + 192);
  *(_BYTE *)(v8 + 224) = a4;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_OWORD *)(v8 + 248) = 0u;
  *(_OWORD *)(v8 + 264) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_QWORD *)(v8 + 328) = 0;
  *(_QWORD *)(v8 + 336) = *a5;
  v13 = a5[1];
  *(_QWORD *)(v8 + 344) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(v8 + 352) = 0;
  v123 = (uint64_t *)v8;
  v16 = *(_QWORD *)(v8 + 176);
  v17 = *(_QWORD *)(v16 + 40);
  v18 = *(_DWORD *)(v17 + 4);
  if (v18 == 2)
    goto LABEL_10;
  if (v18 != 1)
  {
    if (v18)
      return v123;
LABEL_10:
    v20 = *(_QWORD *)(v17 + 8);
    v19 = *(_QWORD *)(v17 + 16);
    v21 = (v19 - v20) >> 4;
    v22 = *(_QWORD *)(v8 + 232);
    v23 = (*(_QWORD *)(v8 + 240) - v22) >> 3;
    if (v21 <= v23)
    {
      if (v21 < v23)
        *(_QWORD *)(v8 + 240) = v22 + 8 * v21;
    }
    else
    {
      std::vector<altitude::TextureMap *>::__append(v8 + 232, v21 - v23);
      v20 = *(_QWORD *)(v17 + 8);
      v19 = *(_QWORD *)(v17 + 16);
    }
    v37 = v123[1];
    v38 = operator new(0xF8uLL);
    v38[1] = 0;
    v38[2] = 0;
    *v38 = &off_1E42E6530;
    v39 = karo::Job::Job((uint64_t)(v38 + 3), v37);
    v38[3] = &off_1E42C6A40;
    *((_DWORD *)v38 + 50) = (unint64_t)(v19 - v20) >> 4;
    *((_OWORD *)v38 + 13) = 0u;
    *((_OWORD *)v38 + 14) = 0u;
    *((_DWORD *)v38 + 60) = 0;
    v40 = (std::__shared_weak_count *)v123[25];
    v123[24] = v39;
    v123[25] = (uint64_t)v38;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(p_shared_owners);
      while (__stlxr(v42 - 1, p_shared_owners));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
      v38 = (_QWORD *)v123[25];
      v126 = v123[24];
      v127 = (std::__shared_weak_count *)v38;
      if (!v38)
      {
LABEL_30:
        karo::Job::addBlockingSubJob(v123, &v126, -1, 0);
        v45 = v127;
        if (v127)
        {
          v46 = (unint64_t *)&v127->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v48 = (std::__shared_weak_count *)v123[25];
        v122 = v123[24];
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        v51 = *(_QWORD *)(v17 + 8);
        if (*(_QWORD *)(v17 + 16) != v51)
        {
          v52 = 0;
          v53 = 0;
          v54 = (unint64_t *)&v48->__shared_owners_;
          do
          {
            v55 = *(_OWORD *)(v51 + 16 * v52);
            v56 = *(std::__shared_weak_count **)(v51 + 16 * v52 + 8);
            if (v56)
            {
              v57 = (unint64_t *)&v56->__shared_owners_;
              do
                v58 = __ldxr(v57);
              while (__stxr(v58 + 1, v57));
            }
            v125 = v55;
            if (md::HardwareFigDecoder::instance(void)::once != -1)
            {
              dispatch_once(&md::HardwareFigDecoder::instance(void)::once, &__block_literal_global_19093);
              *(_QWORD *)&v55 = v125;
            }
            v59 = (uint64_t *)md::HardwareFigDecoder::instance(void)::_singleton;
            v60 = *(_QWORD *)(v55 + 8);
            v61 = *(_QWORD *)(v55 + 16);
            if (v56)
            {
              v62 = (unint64_t *)&v56->__shared_owners_;
              do
                v63 = __ldxr(v62);
              while (__stxr(v63 + 1, v62));
            }
            if (v48)
            {
              do
                v64 = __ldxr(v54);
              while (__stxr(v64 + 1, v54));
            }
            v129 = 0;
            v65 = (char *)operator new(0x38uLL);
            *(_QWORD *)v65 = &off_1E42D8828;
            *((_QWORD *)v65 + 1) = v123;
            *((_DWORD *)v65 + 4) = v53;
            *(_OWORD *)(v65 + 24) = v125;
            *((_QWORD *)v65 + 5) = v122;
            *((_QWORD *)v65 + 6) = v48;
            v129 = v65;
            v66 = md::HardwareFigDecoder::decodeAsync(*v59, v60, v61, v128);
            v67 = v129;
            if (v129 == v128)
            {
              v67 = v128;
              v68 = 4;
            }
            else
            {
              if (!v129)
                goto LABEL_56;
              v68 = 5;
            }
            (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_56:
            *(_QWORD *)(*v12 + 8 * v52 + 184) = v66;
            if (v56)
            {
              v69 = (unint64_t *)&v56->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            v51 = *(_QWORD *)(v17 + 8);
            v52 = ++v53;
          }
          while (v53 < (unint64_t)((*(_QWORD *)(v17 + 16) - v51) >> 4));
        }
        if (v48)
        {
          v71 = (unint64_t *)&v48->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            v73 = v48;
LABEL_124:
            std::__shared_weak_count::__release_weak(v73);
            return v123;
          }
        }
        return v123;
      }
    }
    else
    {
      v126 = v39;
      v127 = (std::__shared_weak_count *)v38;
    }
    v43 = v38 + 1;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
    goto LABEL_30;
  }
  v120 = v8 + 232;
  v24 = *(_DWORD *)(v16 + 8) != 14;
  v25 = operator new();
  *(_QWORD *)v25 = 850045863;
  *(_OWORD *)(v25 + 8) = 0u;
  *(_OWORD *)(v25 + 24) = 0u;
  *(_OWORD *)(v25 + 40) = 0u;
  *(_OWORD *)(v25 + 56) = 0u;
  *(_OWORD *)(v25 + 72) = 0u;
  *(_QWORD *)(v25 + 88) = 0;
  *(_DWORD *)(v25 + 96) = 1065353216;
  if (LoadVideoToolbox(void)::loadPredicate != -1)
    dispatch_once(&LoadVideoToolbox(void)::loadPredicate, &__block_literal_global_15551);
  if (LoadCoreMedia(void)::loadPredicate != -1)
    dispatch_once(&LoadCoreMedia(void)::loadPredicate, &__block_literal_global_5);
  v123[44] = v25;
  v26 = v123[22];
  v27 = *(_QWORD *)(v26 + 56);
  v124 = *(const void **)(v27 + 8);
  v121 = *(opaqueCMSampleBuffer **)(v27 + 16);
  v28 = *(_QWORD *)(v26 + 72);
  v29 = *(_QWORD *)(v28 + 8);
  v30 = *(_QWORD *)(v28 + 16);
  v31 = *(_QWORD *)(v16 + 40);
  v33 = *(_QWORD *)(v31 + 8);
  v32 = *(_QWORD *)(v31 + 16);
  v34 = (v32 - v33) >> 4;
  v35 = v123[29];
  v36 = (v123[30] - v35) >> 3;
  if (v34 <= v36)
  {
    if (v34 < v36)
      v123[30] = v35 + 8 * v34;
  }
  else
  {
    std::vector<altitude::TextureMap *>::__append(v120, v34 - v36);
    v33 = *(_QWORD *)(v31 + 8);
    v32 = *(_QWORD *)(v31 + 16);
  }
  v74 = v123[1];
  v75 = (std::__shared_weak_count *)operator new(0xD8uLL);
  v75->__shared_owners_ = 0;
  v75->__shared_weak_owners_ = 0;
  v75->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5FB8;
  v76 = v123[44];
  v77 = karo::Job::Job((uint64_t)&v75[1], v74);
  v75[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42C3F08;
  v75[8].__shared_owners_ = v76;
  v75[8].__shared_weak_owners_ = ((unint64_t)(v32 - v33) >> 4);
  v78 = (std::__shared_weak_count *)v123[27];
  v123[26] = v77;
  v123[27] = (uint64_t)v75;
  if (!v78)
  {
    v126 = v77;
    v127 = v75;
LABEL_76:
    v81 = (unint64_t *)&v75->__shared_owners_;
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
    goto LABEL_78;
  }
  v79 = (unint64_t *)&v78->__shared_owners_;
  do
    v80 = __ldaxr(v79);
  while (__stlxr(v80 - 1, v79));
  if (!v80)
  {
    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
    std::__shared_weak_count::__release_weak(v78);
  }
  v75 = (std::__shared_weak_count *)v123[27];
  v126 = v123[26];
  v127 = v75;
  if (v75)
    goto LABEL_76;
LABEL_78:
  karo::Job::addBlockingSubJob(v123, &v126, -1, 0);
  v83 = v127;
  if (v127)
  {
    v84 = (unint64_t *)&v127->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v123[26];
  v87 = (std::__shared_weak_count *)v123[27];
  if (v87)
  {
    v88 = (unint64_t *)&v87->__shared_owners_;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
  v90 = *(_QWORD *)(v31 + 8);
  if (*(_QWORD *)(v31 + 16) != v90)
  {
    v91 = 0;
    v92 = 0;
    v93 = 2 * v24;
    v94 = (unint64_t *)&v87->__shared_owners_;
    do
    {
      v95 = 16 * v91;
      v96 = v123[44];
      v97 = *(_QWORD *)(v90 + v95);
      v98 = *(void **)(v97 + 8);
      v99 = *(opaqueCMFormatDescription **)(v97 + 16);
      v128[0] = MEMORY[0x1E0C809B0];
      v128[1] = 3321888768;
      v128[2] = ___ZN8altitude17TextureMapLoadJob16decodeH264ImagesERKNSt3__110shared_ptrINS_20TextureMapSourceDataEEE_block_invoke;
      v129 = &__block_descriptor_80_ea8_32c109_ZTSKZN8altitude17TextureMapLoadJob16decodeH264ImagesERKNSt3__110shared_ptrINS_20TextureMapSourceDataEEEE3__0_e24_v20__0____CVBuffer__8i16l;
      v100 = *(_OWORD *)(v90 + v95);
      v101 = *(std::__shared_weak_count **)(v90 + v95 + 8);
      if (v101)
      {
        v102 = (unint64_t *)&v101->__shared_owners_;
        do
          v103 = __ldxr(v102);
        while (__stxr(v103 + 1, v102));
      }
      if (v87)
      {
        do
          v104 = __ldxr(v94);
        while (__stxr(v104 + 1, v94));
      }
      v130 = v123;
      v131 = v92;
      v132 = v100;
      if (v101)
      {
        v105 = (unint64_t *)&v101->__shared_owners_;
        do
          v106 = __ldxr(v105);
        while (__stxr(v106 + 1, v105));
      }
      v133 = v86;
      v134 = v87;
      if (v87)
      {
        do
          v107 = __ldxr(v94);
        while (__stxr(v107 + 1, v94));
      }
      md::HardwareVideoDecodingSession::decode(v96, v93, v124, v121, v29, v30, v98, v99, 1u, v128);
      if (!v87)
        goto LABEL_102;
      do
        v108 = __ldaxr(v94);
      while (__stlxr(v108 - 1, v94));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
        if (!v101)
          goto LABEL_108;
      }
      else
      {
LABEL_102:
        if (!v101)
          goto LABEL_108;
      }
      v109 = (unint64_t *)&v101->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
LABEL_108:
      v111 = v134;
      if (!v134)
        goto LABEL_112;
      v112 = (unint64_t *)&v134->__shared_owners_;
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
        v114 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
        if (*((_QWORD *)&v132 + 1))
        {
LABEL_113:
          v115 = (unint64_t *)&v114->__shared_owners_;
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 - 1, v115));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
      }
      else
      {
LABEL_112:
        v114 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
        if (*((_QWORD *)&v132 + 1))
          goto LABEL_113;
      }
      v90 = *(_QWORD *)(v31 + 8);
      v91 = ++v92;
    }
    while (v92 < (unint64_t)((*(_QWORD *)(v31 + 16) - v90) >> 4));
  }
  if (v87)
  {
    v117 = (unint64_t *)&v87->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      v73 = v87;
      goto LABEL_124;
    }
  }
  return v123;
}

void sub_19FAFCB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, karo::Job *a14, __int128 a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;

  v28 = (std::__shared_weak_count *)*((_QWORD *)a14 + 43);
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (_QWORD *)*((_QWORD *)a14 + 39);
  if (!v31)
    goto LABEL_21;
  v32 = (_QWORD *)*((_QWORD *)a14 + 40);
  v33 = (void *)*((_QWORD *)a14 + 39);
  if (v32 == v31)
    goto LABEL_20;
  v34 = v32 - 4;
  while (1)
  {
    v36 = (_QWORD *)v34[3];
    if (v34 == v36)
      break;
    if (v36)
    {
      v37 = 5;
LABEL_14:
      (*(void (**)(void))(*v36 + 8 * v37))();
    }
    if (*((_BYTE *)v34 - 28))
      *((_BYTE *)v34 - 28) = 0;
    if (*((_BYTE *)v34 - 32))
      *((_BYTE *)v34 - 32) = 0;
    v35 = v34 - 6;
    v34 -= 10;
    if (v35 == v31)
    {
      v33 = (void *)*((_QWORD *)a14 + 39);
LABEL_20:
      *((_QWORD *)a14 + 40) = v31;
      operator delete(v33);
LABEL_21:
      v38 = (_QWORD *)*((_QWORD *)a14 + 36);
      if (!v38)
        goto LABEL_36;
      v39 = (_QWORD *)*((_QWORD *)a14 + 37);
      v40 = (void *)*((_QWORD *)a14 + 36);
      if (v39 == v38)
        goto LABEL_35;
      v41 = v39 - 4;
      while (2)
      {
        v43 = (_QWORD *)v41[3];
        if (v41 == v43)
        {
          v43 = v41;
          v44 = 4;
LABEL_29:
          (*(void (**)(void))(*v43 + 8 * v44))();
        }
        else if (v43)
        {
          v44 = 5;
          goto LABEL_29;
        }
        if (*((_BYTE *)v41 - 28))
          *((_BYTE *)v41 - 28) = 0;
        if (*((_BYTE *)v41 - 32))
          *((_BYTE *)v41 - 32) = 0;
        v42 = v41 - 6;
        v41 -= 10;
        if (v42 == v38)
        {
          v40 = (void *)*((_QWORD *)a14 + 36);
LABEL_35:
          *((_QWORD *)a14 + 37) = v38;
          operator delete(v40);
LABEL_36:
          v45 = (std::__shared_weak_count *)*((_QWORD *)a14 + 35);
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v48 = (std::__shared_weak_count *)*((_QWORD *)a14 + 33);
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v51 = *a12;
          if (*a12)
          {
            *((_QWORD *)a14 + 30) = v51;
            operator delete(v51);
          }
          v52 = (std::__shared_weak_count *)*((_QWORD *)a14 + 27);
          if (v52)
          {
            v53 = (unint64_t *)&v52->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          v55 = (std::__shared_weak_count *)*((_QWORD *)a14 + 25);
          if (v55)
          {
            v56 = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          v58 = (std::__shared_weak_count *)*((_QWORD *)a14 + 23);
          if (v58)
          {
            v59 = (unint64_t *)&v58->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          karo::Job::~Job(a14);
          _Unwind_Resume(a1);
        }
        continue;
      }
    }
  }
  v36 = v34;
  v37 = 4;
  goto LABEL_14;
}

void altitude::TextureMapLoadJob::uploadTextures(altitude::TextureMapLoadJob *this, ResourceAccessor *a2, char a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  v6 = *((_QWORD *)this + 39);
  for (i = *((_QWORD *)this + 40); v6 != i; v6 += 80)
    (*((void (**)(ResourceAccessor *, uint64_t))a2->var0 + 3))(a2, v6);
  v8 = *((_QWORD *)this + 36);
  v9 = *((_QWORD *)this + 37);
  if ((a3 & 1) != 0)
  {
    if (v8 == v9)
      goto LABEL_12;
    do
    {
      (*((void (**)(ResourceAccessor *, uint64_t))a2->var0 + 3))(a2, v8);
      v8 += 80;
    }
    while (v8 != v9);
  }
  else
  {
    for (; v8 != v9; v8 += 80)
    {
      v17 = *(_QWORD *)(v8 + 72);
      if (v17)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 48))(v17, v8);
    }
    v10 = *(_QWORD *)(*((_QWORD *)this + 22) + 16);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if ((a3 & 1) == 0)
    *(_QWORD *)(*((_QWORD *)this + 22) + 16) = *(_QWORD *)(*((_QWORD *)this + 22) + 24);
LABEL_12:
  v12 = (_QWORD *)*((_QWORD *)this + 36);
  v11 = (_QWORD *)*((_QWORD *)this + 37);
  if (v11 != v12)
  {
    v13 = v11 - 4;
    while (1)
    {
      v15 = (_QWORD *)v13[3];
      if (v13 == v15)
        break;
      if (v15)
      {
        v16 = 5;
LABEL_19:
        (*(void (**)(void))(*v15 + 8 * v16))();
      }
      if (*((_BYTE *)v13 - 28))
        *((_BYTE *)v13 - 28) = 0;
      if (*((_BYTE *)v13 - 32))
        *((_BYTE *)v13 - 32) = 0;
      v14 = v13 - 6;
      v13 -= 10;
      if (v14 == v12)
        goto LABEL_27;
    }
    v15 = v13;
    v16 = 4;
    goto LABEL_19;
  }
LABEL_27:
  *((_QWORD *)this + 37) = v12;
  v19 = (_QWORD *)*((_QWORD *)this + 39);
  v18 = (_QWORD *)*((_QWORD *)this + 40);
  if (v18 != v19)
  {
    v20 = v18 - 4;
    while (1)
    {
      v22 = (_QWORD *)v20[3];
      if (v20 == v22)
        break;
      if (v22)
      {
        v23 = 5;
LABEL_34:
        (*(void (**)(void))(*v22 + 8 * v23))();
      }
      if (*((_BYTE *)v20 - 28))
        *((_BYTE *)v20 - 28) = 0;
      if (*((_BYTE *)v20 - 32))
        *((_BYTE *)v20 - 32) = 0;
      v21 = v20 - 6;
      v20 -= 10;
      if (v21 == v19)
        goto LABEL_39;
    }
    v22 = v20;
    v23 = 4;
    goto LABEL_34;
  }
LABEL_39:
  *((_QWORD *)this + 40) = v19;
  *((_QWORD *)this + 30) = *((_QWORD *)this + 29);
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void std::__shared_ptr_pointer<md::HardwareVideoDecodingSession *,std::shared_ptr<md::HardwareVideoDecodingSession>::__shared_ptr_default_delete<md::HardwareVideoDecodingSession,md::HardwareVideoDecodingSession>,std::allocator<md::HardwareVideoDecodingSession>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

std::mutex *std::__shared_ptr_pointer<md::HardwareVideoDecodingSession *,std::shared_ptr<md::HardwareVideoDecodingSession>::__shared_ptr_default_delete<md::HardwareVideoDecodingSession,md::HardwareVideoDecodingSession>,std::allocator<md::HardwareVideoDecodingSession>>::__on_zero_shared(uint64_t a1)
{
  std::mutex *result;

  result = *(std::mutex **)(a1 + 24);
  if (result)
  {
    md::HardwareVideoDecodingSession::~HardwareVideoDecodingSession(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void ___ZN8altitude12TexturePager25processTextureMipmapQueueEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  altitude::MipChain *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(v2 + 24);
  v5 = operator new(0x68uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_1E42E64F8;
  v6 = altitude::MipChain::MipChain((int *)v5 + 6, v4, *(_DWORD *)(v3 + 44));
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(std::__shared_weak_count **)(v7 + 64);
  *(_QWORD *)(v7 + 56) = v6;
  *(_QWORD *)(v7 + 64) = v5;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  altitude::createHWScalerMipLevels(*(_QWORD *)(a1 + 40) + 16, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 48));
  altitude::MipChain::transferData(*(altitude::MipChain **)(*(_QWORD *)(a1 + 40) + 56));
  altitude::createCpuMipLevels(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56), v11);
  atomic_store(5u, (unsigned int *)(*(_QWORD *)(a1 + 40) + 72));
  v12 = (unsigned int *)(v2 + 320);
  do
  {
    v13 = __ldaxr(v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v12));
  if (!v14)
    std::condition_variable::notify_all((std::condition_variable *)(v2 + 328));
}

void sub_19FAFD3C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c64_ZTSKZN8altitude12TexturePager25processTextureMipmapQueueEvE3__0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

void ___ZN8altitude12TexturePager25processTextureDecodeQueueEv_block_invoke(uint64_t a1, __CVBuffer *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  _QWORD *v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;

  v6 = *(_QWORD *)(a1 + 32);
  std::mutex::lock((std::mutex *)(v6 + 168));
  if ((a3 - 1) < 4)
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(_DWORD *)(a1 + 64);
    v10 = *(char **)(v6 + 152);
    v9 = *(_QWORD *)(v6 + 160);
    if ((unint64_t)v10 < v9)
    {
      *(_QWORD *)v10 = v7;
      *((_DWORD *)v10 + 2) = v8;
      v11 = v10 + 24;
      *((_QWORD *)v10 + 2) = 0;
LABEL_22:
      *(_QWORD *)(v6 + 152) = v11;
      goto LABEL_23;
    }
    v16 = *(_BYTE **)(v6 + 144);
    v17 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v16) >> 3) + 1;
    if (v17 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v16) >> 3);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x555555555555555)
      v19 = 0xAAAAAAAAAAAAAAALL;
    else
      v19 = v17;
    if (!v19)
    {
      v20 = 0;
      goto LABEL_17;
    }
    if (v19 <= 0xAAAAAAAAAAAAAAALL)
    {
      v20 = (char *)operator new(24 * v19);
LABEL_17:
      v21 = &v20[8 * ((v10 - v16) >> 3)];
      *(_QWORD *)v21 = v7;
      *((_DWORD *)v21 + 2) = v8;
      *((_QWORD *)v21 + 2) = 0;
      v11 = v21 + 24;
      if (v10 != v16)
      {
        do
        {
          v22 = *(_OWORD *)(v10 - 24);
          *((_QWORD *)v21 - 1) = *((_QWORD *)v10 - 1);
          *(_OWORD *)(v21 - 24) = v22;
          v21 -= 24;
          v10 -= 24;
        }
        while (v10 != v16);
        v10 = *(char **)(v6 + 144);
      }
      *(_QWORD *)(v6 + 144) = v21;
      *(_QWORD *)(v6 + 152) = v11;
      *(_QWORD *)(v6 + 160) = &v20[24 * v19];
      if (v10)
        operator delete(v10);
      goto LABEL_22;
    }
LABEL_45:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  if (!a3)
  {
    CVPixelBufferRetain(a2);
    v12 = *(_QWORD *)(a1 + 40);
    v13 = *(_DWORD *)(a1 + 64);
    v15 = *(_QWORD **)(v6 + 152);
    v14 = *(_QWORD *)(v6 + 160);
    if ((unint64_t)v15 >= v14)
    {
      v26 = *(_QWORD **)(v6 + 144);
      v27 = 0xAAAAAAAAAAAAAAABLL * (v15 - v26) + 1;
      if (v27 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v26) >> 3);
      if (2 * v28 > v27)
        v27 = 2 * v28;
      if (v28 >= 0x555555555555555)
        v29 = 0xAAAAAAAAAAAAAAALL;
      else
        v29 = v27;
      if (v29)
      {
        if (v29 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_45;
        v30 = (char *)operator new(24 * v29);
      }
      else
      {
        v30 = 0;
      }
      v31 = &v30[8 * (v15 - v26)];
      *(_QWORD *)v31 = v12;
      *((_DWORD *)v31 + 2) = v13;
      *((_QWORD *)v31 + 2) = a2;
      v32 = v31 + 24;
      if (v15 != v26)
      {
        do
        {
          v33 = *(_OWORD *)(v15 - 3);
          *((_QWORD *)v31 - 1) = *(v15 - 1);
          *(_OWORD *)(v31 - 24) = v33;
          v31 -= 24;
          v15 -= 3;
        }
        while (v15 != v26);
        v15 = *(_QWORD **)(v6 + 144);
      }
      *(_QWORD *)(v6 + 144) = v31;
      *(_QWORD *)(v6 + 152) = v32;
      *(_QWORD *)(v6 + 160) = &v30[24 * v29];
      if (v15)
        operator delete(v15);
      *(_QWORD *)(v6 + 152) = v32;
    }
    else
    {
      *v15 = v12;
      *((_DWORD *)v15 + 2) = v13;
      v15[2] = a2;
      *(_QWORD *)(v6 + 152) = v15 + 3;
    }
  }
LABEL_23:
  v23 = (unsigned int *)(v6 + 320);
  do
  {
    v24 = __ldaxr(v23);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v23));
  if (!v25)
    std::condition_variable::notify_all((std::condition_variable *)(v6 + 328));
  std::mutex::unlock((std::mutex *)(v6 + 168));
}

void sub_19FAFD698(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c64_ZTSKZN8altitude12TexturePager25processTextureDecodeQueueEvE3__1(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

void __destroy_helper_block_ea8_32c64_ZTSKZN8altitude12TexturePager25processTextureDecodeQueueEvE3__1(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *std::__function::__func<altitude::TexturePager::processTextureDecodeQueue(void)::$_0,std::allocator<altitude::TexturePager::processTextureDecodeQueue(void)::$_0>,void ()(unsigned long,md::HardwareFigDecodeResult,__CVBuffer *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42D85E8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<altitude::TexturePager::processTextureDecodeQueue(void)::$_0,std::allocator<altitude::TexturePager::processTextureDecodeQueue(void)::$_0>,void ()(unsigned long,md::HardwareFigDecodeResult,__CVBuffer *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42D85E8;
  v1 = (std::__shared_weak_count *)a1[4];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<altitude::TexturePager::processTextureDecodeQueue(void)::$_0,std::allocator<altitude::TexturePager::processTextureDecodeQueue(void)::$_0>,void ()(unsigned long,md::HardwareFigDecodeResult,__CVBuffer *)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_1E42D85E8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *((_DWORD *)result + 10) = *(_DWORD *)(a1 + 40);
  return result;
}

uint64_t std::__function::__func<altitude::TexturePager::processTextureDecodeQueue(void)::$_0,std::allocator<altitude::TexturePager::processTextureDecodeQueue(void)::$_0>,void ()(unsigned long,md::HardwareFigDecodeResult,__CVBuffer *)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E42D85E8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 32) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(result + 40);
  return result;
}

void std::__function::__func<altitude::TexturePager::processTextureDecodeQueue(void)::$_0,std::allocator<altitude::TexturePager::processTextureDecodeQueue(void)::$_0>,void ()(unsigned long,md::HardwareFigDecodeResult,__CVBuffer *)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<altitude::TexturePager::processTextureDecodeQueue(void)::$_0,std::allocator<altitude::TexturePager::processTextureDecodeQueue(void)::$_0>,void ()(unsigned long,md::HardwareFigDecodeResult,__CVBuffer *)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<altitude::TexturePager::processTextureDecodeQueue(void)::$_0,std::allocator<altitude::TexturePager::processTextureDecodeQueue(void)::$_0>,void ()(unsigned long,md::HardwareFigDecodeResult,__CVBuffer *)>::operator()(uint64_t a1, uint64_t a2, int *a3, __CVBuffer **a4)
{
  int v5;
  __CVBuffer *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;

  v5 = *a3;
  v6 = *a4;
  v7 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v7 + 168));
  if (!v5)
  {
    CVPixelBufferRetain(v6);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(a1 + 40);
    v16 = *(_QWORD **)(v7 + 152);
    v15 = *(_QWORD *)(v7 + 160);
    if ((unint64_t)v16 >= v15)
    {
      v23 = *(_QWORD **)(v7 + 144);
      v24 = 0xAAAAAAAAAAAAAAABLL * (v16 - v23) + 1;
      if (v24 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v23) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x555555555555555)
        v26 = 0xAAAAAAAAAAAAAAALL;
      else
        v26 = v24;
      if (v26)
      {
        if (v26 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_44;
        v27 = (char *)operator new(24 * v26);
      }
      else
      {
        v27 = 0;
      }
      v30 = &v27[8 * (v16 - v23)];
      *(_QWORD *)v30 = v13;
      *((_DWORD *)v30 + 2) = v14;
      *((_QWORD *)v30 + 2) = v6;
      v17 = v30 + 24;
      if (v16 != v23)
      {
        do
        {
          v31 = *(_OWORD *)(v16 - 3);
          *((_QWORD *)v30 - 1) = *(v16 - 1);
          *(_OWORD *)(v30 - 24) = v31;
          v30 -= 24;
          v16 -= 3;
        }
        while (v16 != v23);
        v16 = *(_QWORD **)(v7 + 144);
      }
      *(_QWORD *)(v7 + 144) = v30;
      *(_QWORD *)(v7 + 152) = v17;
      *(_QWORD *)(v7 + 160) = &v27[24 * v26];
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v16 = v13;
      *((_DWORD *)v16 + 2) = v14;
      v17 = v16 + 3;
      v16[2] = v6;
    }
    *(_QWORD *)(v7 + 152) = v17;
    goto LABEL_38;
  }
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 40);
  v11 = *(_QWORD **)(v7 + 152);
  v10 = *(_QWORD *)(v7 + 160);
  if ((unint64_t)v11 >= v10)
  {
    v18 = *(_QWORD **)(v7 + 144);
    v19 = 0xAAAAAAAAAAAAAAABLL * (v11 - v18) + 1;
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v18) >> 3);
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 >= 0x555555555555555)
      v21 = 0xAAAAAAAAAAAAAAALL;
    else
      v21 = v19;
    if (!v21)
    {
      v22 = 0;
      goto LABEL_25;
    }
    if (v21 <= 0xAAAAAAAAAAAAAAALL)
    {
      v22 = (char *)operator new(24 * v21);
LABEL_25:
      v28 = &v22[8 * (v11 - v18)];
      *(_QWORD *)v28 = v8;
      *((_DWORD *)v28 + 2) = v9;
      *((_QWORD *)v28 + 2) = 0;
      v12 = v28 + 24;
      if (v11 != v18)
      {
        do
        {
          v29 = *(_OWORD *)(v11 - 3);
          *((_QWORD *)v28 - 1) = *(v11 - 1);
          *(_OWORD *)(v28 - 24) = v29;
          v28 -= 24;
          v11 -= 3;
        }
        while (v11 != v18);
        v11 = *(_QWORD **)(v7 + 144);
      }
      *(_QWORD *)(v7 + 144) = v28;
      *(_QWORD *)(v7 + 152) = v12;
      *(_QWORD *)(v7 + 160) = &v22[24 * v21];
      if (v11)
        operator delete(v11);
      goto LABEL_30;
    }
LABEL_44:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  *v11 = v8;
  *((_DWORD *)v11 + 2) = v9;
  v12 = v11 + 3;
  v11[2] = 0;
LABEL_30:
  *(_QWORD *)(v7 + 152) = v12;
LABEL_38:
  v32 = (unsigned int *)(v7 + 320);
  do
  {
    v33 = __ldaxr(v32);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, v32));
  if (!v34)
    std::condition_variable::notify_all((std::condition_variable *)(v7 + 328));
  std::mutex::unlock((std::mutex *)(v7 + 168));
}

void sub_19FAFDC04(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void altitude::TexturePager::addPooledTexture(altitude::TexturePager *this, ggl::Texture2D *a2)
{
  int v3;
  uint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;

  v3 = *((_DWORD *)a2 + 20);
  if (v3 != *((_DWORD *)a2 + 21) || v3 != 256 && v3 != 512)
  {
    (*(void (**)(ggl::Texture2D *))(*(_QWORD *)a2 + 8))(a2);
    return;
  }
  v5 = (v3 << 16) | (*((_DWORD *)a2 + 26) << 8) | *((unsigned __int8 *)a2 + 68);
  v7 = (char *)*((_QWORD *)this + 15);
  v6 = (char *)*((_QWORD *)this + 16);
  v8 = (v6 - v7) >> 4;
  if (v8 < *((unsigned int *)this + 28))
  {
    v9 = *((_QWORD *)this + 17);
    if ((unint64_t)v6 >= v9)
    {
      v10 = v9 - (_QWORD)v7;
      if (v10 >> 3 <= v8 + 1)
        v11 = v8 + 1;
      else
        v11 = v10 >> 3;
      v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0;
      v13 = 0xFFFFFFFFFFFFFFFLL;
      if (!v12)
        v13 = v11;
      if (!(v13 >> 60))
      {
        v14 = 16 * v13;
        v15 = (char *)operator new(16 * v13);
        v16 = &v15[16 * v8];
        v17 = &v15[v14];
        *(_QWORD *)v16 = v5;
        *((_QWORD *)v16 + 1) = a2;
        v18 = v16 + 16;
        if (v6 != v7)
        {
          do
          {
            *((_OWORD *)v16 - 1) = *((_OWORD *)v6 - 1);
            v16 -= 16;
            v6 -= 16;
          }
          while (v6 != v7);
          v6 = v7;
        }
LABEL_40:
        *((_QWORD *)this + 15) = v16;
        *((_QWORD *)this + 16) = v18;
        *((_QWORD *)this + 17) = v17;
        if (v6)
          operator delete(v6);
        goto LABEL_42;
      }
LABEL_43:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    goto LABEL_26;
  }
  v19 = *((_QWORD *)v7 + 1);
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v7 = (char *)*((_QWORD *)this + 15);
    v6 = (char *)*((_QWORD *)this + 16);
  }
  v20 = v7 + 16;
  v21 = v7;
  if (v7 + 16 != v6)
  {
    v22 = v6 - v7 - 32;
    v21 = v7;
    if (v22 < 0x10)
      goto LABEL_24;
    v23 = (v22 >> 4) + 1;
    v24 = 16 * (v23 & 0x1FFFFFFFFFFFFFFELL);
    v21 = &v7[v24];
    v25 = v7 + 24;
    v26 = v23 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v27 = *((_DWORD *)v25 + 2);
      *((_DWORD *)v25 - 6) = *((_DWORD *)v25 - 2);
      *((_DWORD *)v25 - 2) = v27;
      v28 = v25[2];
      *(v25 - 2) = *v25;
      *v25 = v28;
      v25 += 4;
      v26 -= 2;
    }
    while (v26);
    if (v23 != (v23 & 0x1FFFFFFFFFFFFFFELL))
    {
      v20 = (_QWORD *)((char *)v20 + v24);
      do
      {
LABEL_24:
        *(_DWORD *)v21 = *(_DWORD *)v20;
        *((_QWORD *)v21 + 1) = v20[1];
        v21 += 16;
        v20 += 2;
      }
      while (v20 != (_QWORD *)v6);
    }
  }
  v6 = v21;
  *((_QWORD *)this + 16) = v21;
  v29 = *((_QWORD *)this + 17);
  if ((unint64_t)v21 >= v29)
  {
    v30 = (char *)*((_QWORD *)this + 15);
    v31 = (v21 - v30) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      abort();
    v33 = v29 - (_QWORD)v30;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 60)
        goto LABEL_43;
      v35 = (char *)operator new(16 * v34);
    }
    else
    {
      v35 = 0;
    }
    v16 = &v35[16 * v31];
    v17 = &v35[16 * v34];
    *(_QWORD *)v16 = v5;
    *((_QWORD *)v16 + 1) = a2;
    v18 = v16 + 16;
    if (v6 != v30)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v6 - 1);
        v16 -= 16;
        v6 -= 16;
      }
      while (v6 != v30);
      v6 = (char *)*((_QWORD *)this + 15);
    }
    goto LABEL_40;
  }
LABEL_26:
  *(_QWORD *)v6 = v5;
  *((_QWORD *)v6 + 1) = a2;
  v18 = v6 + 16;
LABEL_42:
  *((_QWORD *)this + 16) = v18;
}

uint64_t altitude::TexturePager::getPooledTexture(uint64_t a1, int a2, int a3, int a4, int a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  if (a2 == a3 && (a2 == 256 || a2 == 512))
  {
    v13 = *(_QWORD *)(a1 + 120);
    v12 = *(_QWORD *)(a1 + 128);
    if (v13 != v12)
    {
      v14 = v12 - v13 - 32;
      v15 = *(_QWORD *)(a1 + 120);
      while (*(_DWORD *)v15 != ((a2 << 16) | (a4 << 8) | a5))
      {
        v15 += 16;
        v14 -= 16;
        if (v15 == v12)
          goto LABEL_8;
      }
      result = *(_QWORD *)(v15 + 8);
      v23 = v15 + 16;
      if (v15 + 16 == v12)
        goto LABEL_23;
      v24 = v12 - v15 - 32;
      if (v24 > 0xF)
      {
        v25 = (v15 - v13) >> 4;
        v26 = (v24 >> 4) + 1;
        v27 = 16 * (v26 & 0x1FFFFFFFFFFFFFFELL);
        v15 += v27;
        v28 = ((v14 >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
        v29 = v13 + 16 * v25 + 24;
        do
        {
          v30 = *(_DWORD *)(v29 + 8);
          *(_DWORD *)(v29 - 24) = *(_DWORD *)(v29 - 8);
          *(_DWORD *)(v29 - 8) = v30;
          v31 = *(_QWORD *)(v29 + 16);
          *(_QWORD *)(v29 - 16) = *(_QWORD *)v29;
          *(_QWORD *)v29 = v31;
          v29 += 32;
          v28 -= 2;
        }
        while (v28);
        if (v26 == (v26 & 0x1FFFFFFFFFFFFFFELL))
          goto LABEL_23;
        v23 += v27;
      }
      do
      {
        *(_DWORD *)v15 = *(_DWORD *)v23;
        *(_QWORD *)(v15 + 8) = *(_QWORD *)(v23 + 8);
        v15 += 16;
        v23 += 16;
      }
      while (v23 != v12);
LABEL_23:
      *(_QWORD *)(a1 + 128) = v15;
      return result;
    }
LABEL_8:
    result = operator new();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 56) = 0x100000001;
    *(_DWORD *)(result + 64) = 0;
    *(_DWORD *)(result + 68) = a5;
    *(_QWORD *)(result + 72) = 0x100000001;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0;
    *(_QWORD *)result = &off_1E42BE438;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 40) = &unk_1E42BE458;
    *(_QWORD *)(result + 48) = "";
    *(_DWORD *)(result + 104) = a4;
    *(_QWORD *)(result + 112) = 0;
    *(_QWORD *)(result + 120) = 0;
    *(_WORD *)(result + 128) = 0;
    *(_BYTE *)(result + 130) = 1;
    v17 = a6[1];
    *(_QWORD *)(result + 136) = *a6;
    *(_QWORD *)(result + 144) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    *(_DWORD *)(result + 80) = a2;
    *(_DWORD *)(result + 84) = a2;
  }
  else
  {
    result = operator new();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 56) = 0x100000001;
    *(_DWORD *)(result + 64) = 0;
    *(_DWORD *)(result + 68) = a5;
    *(_QWORD *)(result + 72) = 0x100000001;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0;
    *(_QWORD *)result = &off_1E42BE438;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 40) = &unk_1E42BE458;
    *(_QWORD *)(result + 48) = "";
    *(_DWORD *)(result + 104) = a4;
    *(_QWORD *)(result + 112) = 0;
    *(_QWORD *)(result + 120) = 0;
    *(_WORD *)(result + 128) = 0;
    *(_BYTE *)(result + 130) = 1;
    v20 = a6[1];
    *(_QWORD *)(result + 136) = *a6;
    *(_QWORD *)(result + 144) = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    *(_DWORD *)(result + 80) = a2;
    *(_DWORD *)(result + 84) = a3;
  }
  return result;
}

_OWORD *std::vector<ggl::Texture2DLoadItem,geo::StdAllocator<ggl::Texture2DLoadItem,ggl::Allocator>>::__push_back_slow_path<ggl::Texture2DLoadItem const&>(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  _OWORD *v20;
  _QWORD *v21;
  _OWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v32;
  _QWORD *v33;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333)
    abort();
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 4) > v3)
    v3 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v3;
  v33 = a1 + 3;
  if (v6)
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 80 * v6, 8);
  else
    v7 = 0;
  v8 = (_OWORD *)(v7 + 80 * v2);
  *((_QWORD *)&v32 + 1) = v7 + 80 * v6;
  if (!v7)
    goto LABEL_19;
  *v8 = *(_OWORD *)a2;
  v9 = v7 + 80 * v2;
  *(_BYTE *)(v9 + 16) = 0;
  v10 = (_BYTE *)(v9 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)(v7 + 80 * v2 + 17) = *(_BYTE *)(a2 + 17);
    *v10 = 1;
  }
  v11 = v7 + 80 * v2;
  *(_BYTE *)(v11 + 20) = 0;
  v12 = (_BYTE *)(v11 + 20);
  if (*(_BYTE *)(a2 + 20))
  {
    *(_DWORD *)(v7 + 80 * v2 + 24) = *(_DWORD *)(a2 + 24);
    *v12 = 1;
  }
  v13 = v7 + 80 * v2;
  *(_OWORD *)(v13 + 28) = *(_OWORD *)(a2 + 28);
  v14 = *(_QWORD *)(a2 + 72);
  if (!v14)
  {
LABEL_18:
    *(_QWORD *)(v7 + 80 * v2 + 72) = v14;
LABEL_19:
    v15 = (_OWORD *)(v7 + 80 * v2);
    goto LABEL_20;
  }
  if (v14 != a2 + 48)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    goto LABEL_18;
  }
  *(_QWORD *)(v7 + 80 * v2 + 72) = v13 + 48;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 72) + 24))(*(_QWORD *)(a2 + 72));
  v8 = (_OWORD *)(v7 + 80 * v2);
  v15 = v8;
LABEL_20:
  v16 = v15 + 5;
  *(_QWORD *)&v32 = v15 + 5;
  v18 = (_QWORD *)*a1;
  v17 = (_QWORD *)a1[1];
  if (v17 == (_QWORD *)*a1)
  {
    *a1 = v8;
    a1[1] = v16;
    v26 = a1[2];
    a1[2] = *((_QWORD *)&v32 + 1);
  }
  else
  {
    v19 = 0;
    do
    {
      v20 = &v8[v19 / 0x10];
      v21 = &v17[v19 / 8];
      *(v20 - 5) = *(_OWORD *)&v17[v19 / 8 - 10];
      *((_BYTE *)v20 - 64) = 0;
      if (LOBYTE(v17[v19 / 8 - 8]))
      {
        *((_BYTE *)v20 - 63) = *((_BYTE *)v21 - 63);
        *((_BYTE *)v20 - 64) = 1;
      }
      *((_BYTE *)v20 - 60) = 0;
      if (*((_BYTE *)v21 - 60))
      {
        *((_DWORD *)&v8[v19 / 0x10 - 3] - 2) = v17[v19 / 8 - 7];
        *((_BYTE *)v20 - 60) = 1;
      }
      v22 = &v8[v19 / 0x10];
      v23 = &v17[v19 / 8];
      *(_OWORD *)((char *)&v8[v19 / 0x10 - 3] - 4) = *(_OWORD *)((char *)&v17[v19 / 8 - 6] - 4);
      v24 = (_QWORD *)v17[v19 / 8 - 1];
      if (v24)
      {
        if (v23 - 4 == v24)
        {
          *((_QWORD *)v22 - 1) = v22 - 2;
          (*(void (**)(_QWORD))(*(_QWORD *)*(v23 - 1) + 24))(*(v23 - 1));
        }
        else
        {
          *((_QWORD *)v22 - 1) = v24;
          *(v23 - 1) = 0;
        }
      }
      else
      {
        *((_QWORD *)v22 - 1) = 0;
      }
      v19 -= 80;
    }
    while (&v17[v19 / 8] != v18);
    v17 = (_QWORD *)*a1;
    v25 = (_QWORD *)a1[1];
    *a1 = &v8[v19 / 0x10];
    v26 = a1[2];
    *(_OWORD *)(a1 + 1) = v32;
    v16 = (_OWORD *)v32;
    if (v25 != v17)
    {
      v27 = v25 - 4;
      while (1)
      {
        v29 = (_QWORD *)v27[3];
        if (v27 == v29)
          break;
        if (v29)
        {
          v30 = 5;
LABEL_39:
          (*(void (**)(void))(*v29 + 8 * v30))();
        }
        if (*((_BYTE *)v27 - 28))
          *((_BYTE *)v27 - 28) = 0;
        if (*((_BYTE *)v27 - 32))
          *((_BYTE *)v27 - 32) = 0;
        v28 = v27 - 6;
        v27 -= 10;
        if (v28 == v17)
          goto LABEL_45;
      }
      v29 = v27;
      v30 = 4;
      goto LABEL_39;
    }
  }
LABEL_45:
  if (v17)
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v33 + 40))(*v33, v17, v26 - (_QWORD)v17);
  return v16;
}

void sub_19FAFE448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _BYTE *v2;
  _BYTE *v3;
  va_list va;

  va_start(va, a2);
  if (*v3)
    *v3 = 0;
  if (*v2)
    *v2 = 0;
  std::__split_buffer<ggl::Texture2DLoadItem,geo::StdAllocator<ggl::Texture2DLoadItem,ggl::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_1,std::allocator<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_1>,void ()(ggl::Texture2DLoadItem const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_1,std::allocator<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_1>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42D85A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_1,std::allocator<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_1>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D85A0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_1,std::allocator<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_1>,void ()(ggl::Texture2DLoadItem const&)>::operator()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;

  v2 = a1[1];
  std::mutex::lock((std::mutex *)(v2 + 256));
  v4 = a1[2];
  v3 = a1[3];
  v6 = *(_QWORD **)(v2 + 240);
  v5 = *(_QWORD *)(v2 + 248);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD **)(v2 + 232);
    v9 = 0xAAAAAAAAAAAAAAABLL * (v6 - v8) + 1;
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v8) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * (v6 - v8)];
    *(_QWORD *)v13 = v4;
    *((_QWORD *)v13 + 1) = v3;
    *((_QWORD *)v13 + 2) = 0;
    v7 = v13 + 24;
    if (v6 != v8)
    {
      do
      {
        v14 = *(_OWORD *)(v6 - 3);
        *((_QWORD *)v13 - 1) = *(v6 - 1);
        *(_OWORD *)(v13 - 24) = v14;
        v13 -= 24;
        v6 -= 3;
      }
      while (v6 != v8);
      v6 = *(_QWORD **)(v2 + 232);
    }
    *(_QWORD *)(v2 + 232) = v13;
    *(_QWORD *)(v2 + 240) = v7;
    *(_QWORD *)(v2 + 248) = &v12[24 * v11];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v4;
    v6[1] = v3;
    v7 = v6 + 3;
    v6[2] = 0;
  }
  *(_QWORD *)(v2 + 240) = v7;
  std::mutex::unlock((std::mutex *)(v2 + 256));
}

void sub_19FAFE63C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<ggl::Texture2DLoadItem,geo::StdAllocator<ggl::Texture2DLoadItem,ggl::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    v4 = *(_QWORD **)(i - 8);
    if (v4 == (_QWORD *)(i - 32))
    {
      v4 = (_QWORD *)(i - 32);
      v5 = 4;
    }
    else
    {
      if (!v4)
        goto LABEL_9;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_9:
    if (*(_BYTE *)(i - 60))
      *(_BYTE *)(i - 60) = 0;
    if (*(_BYTE *)(i - 64))
      *(_BYTE *)(i - 64) = 0;
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

void std::__function::__func<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_0,std::allocator<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_0>,void ()(ggl::Texture2DLoadItem const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_0,std::allocator<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_0>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42D8558;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_0,std::allocator<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_0>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D8558;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_0,std::allocator<altitude::TexturePager::processTextureTransfers(unsigned long,md::PassList &)::$_0>,void ()(ggl::Texture2DLoadItem const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  v4 = *(_QWORD *)(a1 + 8);
  CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 16), 1uLL);
  if (*a2)
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 8))(*a2);
  std::mutex::lock((std::mutex *)(v4 + 256));
  v6 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD **)(v4 + 240);
  v8 = *(_QWORD *)(v4 + 248);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *(_QWORD **)(v4 + 232);
    v12 = 0xAAAAAAAAAAAAAAABLL * (v9 - v11) + 1;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)v11) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x555555555555555)
      v14 = 0xAAAAAAAAAAAAAAALL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = (char *)operator new(24 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * (v9 - v11)];
    *(_QWORD *)v16 = v6;
    *((_QWORD *)v16 + 1) = v5;
    *((_QWORD *)v16 + 2) = v7;
    v10 = v16 + 24;
    if (v9 != v11)
    {
      do
      {
        v17 = *(_OWORD *)(v9 - 3);
        *((_QWORD *)v16 - 1) = *(v9 - 1);
        *(_OWORD *)(v16 - 24) = v17;
        v16 -= 24;
        v9 -= 3;
      }
      while (v9 != v11);
      v9 = *(_QWORD **)(v4 + 232);
    }
    *(_QWORD *)(v4 + 232) = v16;
    *(_QWORD *)(v4 + 240) = v10;
    *(_QWORD *)(v4 + 248) = &v15[24 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v9 = v6;
    v9[1] = v5;
    v10 = v9 + 3;
    v9[2] = v7;
  }
  *(_QWORD *)(v4 + 240) = v10;
  std::mutex::unlock((std::mutex *)(v4 + 256));
}

void sub_19FAFE8F4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

md::InitialMapEngineMode *md::InitialMapEngineMode::InitialMapEngineMode(md::InitialMapEngineMode *this, int a2)
{
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  int v8;
  char v9;
  char v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int v21;
  _WORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  __int16 v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  md::InitialMapEngineMode *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v4 = md::CartographicMapEngineMode::CartographicMapEngineMode((uint64_t)this, 0);
  *(_QWORD *)v4 = &off_1E4299028;
  *(_QWORD *)(v4 + 536) = 0;
  *(_BYTE *)(v4 + 49) = 0;
  *(_DWORD *)(v4 + 52) = 21;
  v5 = (uint64_t *)(v4 + 384);
  LOWORD(v49) = 2560;
  *((_QWORD *)&v49 + 1) = 0;
  v38 = this;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(v4 + 384), (unsigned __int8 *)&v49);
  LOWORD(v49) = 5386;
  *((_QWORD *)&v49 + 1) = 0x3FD657184AE74487;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert(v5, (unsigned __int8 *)&v49);
  LOWORD(v49) = 2560;
  *((_QWORD *)&v49 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)this + 54, (unsigned __int8 *)&v49);
  LOWORD(v49) = 5386;
  *((_QWORD *)&v49 + 1) = 0x3FE0C152382D7365;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)this + 54, (unsigned __int8 *)&v49);
  LOWORD(v49) = 768;
  *((_QWORD *)&v49 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)this + 51, (unsigned __int8 *)&v49);
  LOWORD(v49) = 3843;
  *((_QWORD *)&v49 + 1) = 0x3FE38C35418A5BF6;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)this + 51, (unsigned __int8 *)&v49);
  LOWORD(v49) = 4111;
  *((_QWORD *)&v49 + 1) = 0x3FF0C152382D7365;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)this + 51, (unsigned __int8 *)&v49);
  LOWORD(v49) = 4624;
  *((_QWORD *)&v49 + 1) = 0x3FF38C35418A5BF6;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)this + 51, (unsigned __int8 *)&v49);
  LOWORD(v49) = 5650;
  *((_QWORD *)&v49 + 1) = 0x3FF4F1A6C638D03FLL;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)this + 51, (unsigned __int8 *)&v49);
  if (a2)
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v6, "daVinciCameraController") & 1) != 0)
    {
      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "daVinciCameraControllerForceMercatorZoom");

      if (v8)
        v9 = 2;
      else
        v9 = 1;
      v10 = 5;
    }
    else
    {

      v10 = 5;
      v9 = 2;
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  *((_BYTE *)this + 224) = v9;
  *((_BYTE *)this + 225) = v10;
  v11 = (char *)this + 144;
  LOBYTE(v49) = 0;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0, &v49)+ 17) = 0;
  LOBYTE(v49) = 2;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 2u, &v49)+ 17) = 0;
  LOBYTE(v49) = 51;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x33u, &v49)+ 17) = 0;
  LOBYTE(v49) = 32;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x20u, &v49)+ 17) = 0;
  LOBYTE(v49) = 31;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x1Fu, &v49)+ 17) = 0;
  LOBYTE(v49) = 28;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x1Cu, &v49)+ 17) = 0;
  if (a2)
  {
    LOBYTE(v49) = 1;
    v12 = std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 1u, &v49);
  }
  else
  {
    LOBYTE(v49) = 3;
    v12 = std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 3u, &v49);
  }
  *((_BYTE *)v12 + 17) = 0;
  LOBYTE(v49) = 44;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x2Cu, &v49)+ 17) = 1;
  LOBYTE(v49) = 40;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x28u, &v49)+ 17) = 1;
  LOBYTE(v49) = 18;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x12u, &v49)+ 17) = 1;
  *(_QWORD *)&v43 = 0xEA624BC935BAF297;
  *((_QWORD *)&v43 + 1) = "md::mun::MuninLogic]";
  v13 = (char *)this + 232;
  v44 = 19;
  *(_QWORD *)&v39 = 0x8EA84A1BD3791AFALL;
  *((_QWORD *)&v39 + 1) = "md::mun::MuninContext]";
  *(_QWORD *)&v40 = 21;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 3;
  v52 = xmmword_1E42F8D08;
  v53 = unk_1E42F8D18;
  *(_QWORD *)&v54 = 20;
  v50 = xmmword_1E42F8CE8;
  v51 = unk_1E42F8CF8;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v43, &v39, 1, (uint64_t)&v49, (uint64_t)&v46);
  *(_QWORD *)&v43 = 0xEC9B77B4222D22FFLL;
  *((_QWORD *)&v43 + 1) = "md::VenueLogic]";
  v44 = 14;
  *(_QWORD *)&v39 = 0x4927EB92E562CC46;
  *((_QWORD *)&v39 + 1) = "md::VenueLogicContext]";
  *(_QWORD *)&v40 = 21;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 3;
  v52 = xmmword_1E42F7F68;
  v53 = unk_1E42F7F78;
  *(_QWORD *)&v54 = 16;
  v50 = xmmword_1E42F7F48;
  v51 = unk_1E42F7F58;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v43, &v39, 1, (uint64_t)&v49, (uint64_t)&v46);
  v46 = 0x79FE0BD9535D5C4DLL;
  v47 = "md::AnchorLogic]";
  v48 = 15;
  *(_QWORD *)&v49 = &v50;
  *(_QWORD *)&v43 = 0x63B6FE00C0848868;
  *((_QWORD *)&v43 + 1) = "md::AnchorContext]";
  v44 = 17;
  v45 = 1;
  *((_QWORD *)&v49 + 1) = 2;
  v50 = xmmword_1E42F87F0;
  v51 = unk_1E42F8800;
  v52 = xmmword_1E42F8810;
  *(_QWORD *)&v39 = &v40;
  *((_QWORD *)&v39 + 1) = 1;
  v40 = xmmword_1E42F8E88;
  *(_QWORD *)&v41 = 21;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v46, &v43, 0, (uint64_t)&v49, (uint64_t)&v39);
  *(_QWORD *)&v43 = 0x582FBDD84553E215;
  *((_QWORD *)&v43 + 1) = "md::AssetInjectionLogic]";
  v44 = 23;
  *(_QWORD *)&v39 = 0xD77FB76AFC10A710;
  *((_QWORD *)&v39 + 1) = "md::AssetInjectionContext]";
  *(_QWORD *)&v40 = 25;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 1;
  v50 = xmmword_1E42F8C58;
  *(_QWORD *)&v51 = 16;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  *(_QWORD *)&v43 = 0x85B8F2BE93EDF996;
  *((_QWORD *)&v43 + 1) = "md::AssetLogic]";
  v44 = 14;
  *(_QWORD *)&v39 = 0x88B81689974D86F3;
  *((_QWORD *)&v39 + 1) = "md::AssetContext]";
  *(_QWORD *)&v40 = 16;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 1;
  v50 = xmmword_1E42F8C70;
  *(_QWORD *)&v51 = 29;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  *(_QWORD *)&v43 = 0x8E629317B3523E63;
  *((_QWORD *)&v43 + 1) = "md::CameraLogic]";
  v44 = 15;
  *(_QWORD *)&v39 = 0x1AF456233693CD46;
  *((_QWORD *)&v39 + 1) = "md::CameraContext]";
  *(_QWORD *)&v40 = 17;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 1;
  v50 = xmmword_1E42F8820;
  *(_QWORD *)&v51 = 20;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  *(_QWORD *)&v43 = 0x3B36D43422893971;
  *((_QWORD *)&v43 + 1) = "md::DrapingLogic]";
  v44 = 16;
  *(_QWORD *)&v39 = 0x1B9039CBDAB12E5CLL;
  *((_QWORD *)&v39 + 1) = "md::DrapingContext]";
  *(_QWORD *)&v40 = 18;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 4;
  v52 = xmmword_1E42F7C38;
  v53 = unk_1E42F7C48;
  v54 = xmmword_1E42F7C58;
  v55 = *(_OWORD *)&off_1E42F7C68;
  v50 = xmmword_1E42F7C18;
  v51 = unk_1E42F7C28;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  v46 = 0x17767EADC5B287BLL;
  v47 = "md::ElevationLogic]";
  v48 = 18;
  *(_QWORD *)&v49 = &v50;
  *(_QWORD *)&v43 = 0x8BD499FBD96FBB9ELL;
  *((_QWORD *)&v43 + 1) = "md::ElevationContext]";
  v44 = 20;
  v45 = 1;
  *((_QWORD *)&v49 + 1) = 2;
  v50 = xmmword_1E42F88C8;
  v51 = unk_1E42F88D8;
  v52 = xmmword_1E42F88E8;
  *(_QWORD *)&v39 = &v40;
  *((_QWORD *)&v39 + 1) = 1;
  v40 = xmmword_1E42F88F8;
  *(_QWORD *)&v41 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v46, &v43, 0, (uint64_t)&v49, (uint64_t)&v39);
  *(_QWORD *)&v39 = 0x701C95861FC50076;
  *((_QWORD *)&v39 + 1) = "md::GeometryLogic]";
  *(_QWORD *)&v40 = 17;
  *(_QWORD *)&v49 = 0x3070CB6B3C7F21D3;
  *((_QWORD *)&v49 + 1) = "md::GeometryContext]";
  *(_QWORD *)&v50 = 19;
  BYTE8(v50) = 1;
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 0;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v39, &v49, 0, (uint64_t)&v43, (uint64_t)&v46);
  v46 = 0x4AC7AB7561675F6;
  v47 = "md::GridLogic]";
  v48 = 13;
  *(_QWORD *)&v43 = 0x336A901A15BB7353;
  *((_QWORD *)&v43 + 1) = "md::GridContext]";
  v44 = 15;
  v45 = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 1;
  v50 = xmmword_1E42F8C28;
  *(_QWORD *)&v51 = 21;
  *(_QWORD *)&v39 = &v40;
  *((_QWORD *)&v39 + 1) = 1;
  v40 = xmmword_1E42F8B38;
  *(_QWORD *)&v41 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v46, &v43, 0, (uint64_t)&v49, (uint64_t)&v39);
  v46 = 0x8B855FB229857EA1;
  v47 = "md::IdentifiedResourceLogic]";
  v48 = 27;
  *(_QWORD *)&v49 = &v50;
  *(_QWORD *)&v43 = 0x12B1E486D3040E2CLL;
  *((_QWORD *)&v43 + 1) = "md::IdentifiedResourceContext]";
  v44 = 29;
  v45 = 1;
  *((_QWORD *)&v49 + 1) = 4;
  v52 = xmmword_1E42F8A98;
  v53 = unk_1E42F8AA8;
  v54 = xmmword_1E42F8AB8;
  v55 = *(_OWORD *)&off_1E42F8AC8;
  v50 = xmmword_1E42F8A78;
  v51 = unk_1E42F8A88;
  *(_QWORD *)&v39 = &v40;
  *((_QWORD *)&v39 + 1) = 1;
  v40 = xmmword_1E42F8AD8;
  *(_QWORD *)&v41 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v46, &v43, 0, (uint64_t)&v49, (uint64_t)&v39);
  v46 = 0x20A1ED17D78F322BLL;
  v47 = "md::LabelsLogic]";
  v48 = 15;
  *(_QWORD *)&v49 = &v50;
  *(_QWORD *)&v43 = 0xA588623CD4116DAELL;
  *((_QWORD *)&v43 + 1) = "md::LabelsContext]";
  v44 = 17;
  v45 = 1;
  *((_QWORD *)&v49 + 1) = 1;
  v50 = xmmword_1E42F8C28;
  *(_QWORD *)&v51 = 21;
  *(_QWORD *)&v39 = &v40;
  *((_QWORD *)&v39 + 1) = 1;
  v40 = xmmword_1E42F8C40;
  *(_QWORD *)&v41 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v46, &v43, 0, (uint64_t)&v49, (uint64_t)&v39);
  *(_QWORD *)&v39 = 0x90C2E4CBBB63E301;
  *((_QWORD *)&v39 + 1) = "md::LayerDataLogic]";
  *(_QWORD *)&v40 = 18;
  *(_QWORD *)&v49 = 0x7851AF310F49C988;
  *((_QWORD *)&v49 + 1) = "md::LayerDataLogicContext]";
  *(_QWORD *)&v50 = 25;
  BYTE8(v50) = 1;
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 0;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v39, &v49, 0, (uint64_t)&v43, (uint64_t)&v46);
  v46 = 0x653D1F33EF15EF04;
  v47 = "md::LoadingStatusLogic]";
  v48 = 22;
  *(_QWORD *)&v43 = 0x90B6813830DCB581;
  *((_QWORD *)&v43 + 1) = "md::LoadingStatusContext]";
  v44 = 24;
  v45 = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 1;
  v50 = xmmword_1E42F8C58;
  *(_QWORD *)&v51 = 16;
  *(_QWORD *)&v39 = &v40;
  *((_QWORD *)&v39 + 1) = 1;
  v40 = xmmword_1E42F8C70;
  *(_QWORD *)&v41 = 29;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v46, &v43, 0, (uint64_t)&v49, (uint64_t)&v39);
  *(_QWORD *)&v43 = 0x91E65CD7F1A7A7FALL;
  *((_QWORD *)&v43 + 1) = "md::LightingLogic]";
  v44 = 17;
  *(_QWORD *)&v39 = 0x41E8D6E445F4145;
  *((_QWORD *)&v39 + 1) = "md::LightingLogicContext]";
  *(_QWORD *)&v40 = 24;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 4;
  v52 = xmmword_1E42F7B60;
  v53 = unk_1E42F7B70;
  v54 = xmmword_1E42F7B80;
  v55 = *(_OWORD *)&off_1E42F7B90;
  v50 = xmmword_1E42F7B40;
  v51 = unk_1E42F7B50;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  *(_QWORD *)&v43 = 0x738A703709805788;
  *((_QWORD *)&v43 + 1) = "md::LocalNorthLogic]";
  v44 = 19;
  *(_QWORD *)&v39 = 0xC81F81A7CB7767BBLL;
  *((_QWORD *)&v39 + 1) = "md::LocalNorthLogicContext]";
  *(_QWORD *)&v40 = 26;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 3;
  v52 = xmmword_1E42F7E78;
  v53 = unk_1E42F7E88;
  *(_QWORD *)&v54 = 17;
  v50 = xmmword_1E42F7E58;
  v51 = unk_1E42F7E68;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  *(_QWORD *)&v43 = 0xBDB8C71631E0AA6CLL;
  *((_QWORD *)&v43 + 1) = "md::MapZoomLevelStyleLogic]";
  v44 = 26;
  *(_QWORD *)&v39 = 0xF0AA2DB42EB710AFLL;
  *((_QWORD *)&v39 + 1) = "md::MapZoomLevelStyleLogicContext]";
  *(_QWORD *)&v40 = 33;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 2;
  v50 = xmmword_1E42F8898;
  v51 = unk_1E42F88A8;
  v52 = xmmword_1E42F88B8;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  *(_QWORD *)&v43 = 0xA1851987210F8D55;
  *((_QWORD *)&v43 + 1) = "md::MaterialLogic]";
  v44 = 17;
  *(_QWORD *)&v39 = 0xD2404CDD1F9A6950;
  *((_QWORD *)&v39 + 1) = "md::MaterialContext]";
  *(_QWORD *)&v40 = 19;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 5;
  v54 = xmmword_1E42F7BE0;
  v55 = *(_OWORD *)&off_1E42F7BF0;
  v56 = xmmword_1E42F7C00;
  *(_QWORD *)&v57 = 21;
  v50 = xmmword_1E42F7BA0;
  v51 = unk_1E42F7BB0;
  v52 = xmmword_1E42F7BC0;
  v53 = unk_1E42F7BD0;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  *(_QWORD *)&v43 = 0x88BE5DF80D25DA79;
  *((_QWORD *)&v43 + 1) = "md::MeshRenderableLogic]";
  v44 = 23;
  *(_QWORD *)&v39 = 0xF014CCE28176CA44;
  *((_QWORD *)&v39 + 1) = "md::MeshRenderableContext]";
  *(_QWORD *)&v40 = 25;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 9;
  v60 = xmmword_1E42F7D48;
  v61 = *(_OWORD *)&off_1E42F7D58;
  v62 = xmmword_1E42F7D68;
  v63 = 15;
  v56 = xmmword_1E42F7D08;
  v57 = unk_1E42F7D18;
  v58 = xmmword_1E42F7D28;
  v59 = unk_1E42F7D38;
  v52 = xmmword_1E42F7CC8;
  v53 = unk_1E42F7CD8;
  v54 = xmmword_1E42F7CE8;
  v55 = *(_OWORD *)&off_1E42F7CF8;
  v50 = xmmword_1E42F7CA8;
  v51 = unk_1E42F7CB8;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  v46 = 0xBEC1A12372CEEC00;
  v47 = "md::NavigationLogic]";
  v48 = 19;
  *(_QWORD *)&v49 = &v50;
  *(_QWORD *)&v43 = 0x1B8B241A8D896A1DLL;
  *((_QWORD *)&v43 + 1) = "md::NavigationContext]";
  v44 = 21;
  v45 = 1;
  *((_QWORD *)&v49 + 1) = 3;
  v52 = xmmword_1E42F8858;
  v53 = unk_1E42F8868;
  *(_QWORD *)&v54 = 17;
  v50 = xmmword_1E42F8838;
  v51 = unk_1E42F8848;
  *(_QWORD *)&v39 = &v40;
  *((_QWORD *)&v39 + 1) = 1;
  v40 = xmmword_1E42F8880;
  *(_QWORD *)&v41 = 23;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v46, &v43, 0, (uint64_t)&v49, (uint64_t)&v39);
  v46 = 0x7173CF8D2BE8FE53;
  v47 = "md::RouteLineLogic]";
  v48 = 18;
  *(_QWORD *)&v49 = &v50;
  *(_QWORD *)&v43 = 0x8E4587A431F9C696;
  *((_QWORD *)&v43 + 1) = "md::RouteLineContext]";
  v44 = 20;
  v45 = 1;
  *((_QWORD *)&v49 + 1) = 4;
  v52 = xmmword_1E42F8930;
  v53 = unk_1E42F8940;
  v54 = xmmword_1E42F8950;
  v55 = *(_OWORD *)&off_1E42F8960;
  v50 = xmmword_1E42F8910;
  v51 = unk_1E42F8920;
  *(_QWORD *)&v39 = &v40;
  *((_QWORD *)&v39 + 1) = 2;
  v40 = xmmword_1E42F8970;
  v41 = unk_1E42F8980;
  v42 = xmmword_1E42F8990;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v46, &v43, 0, (uint64_t)&v49, (uint64_t)&v39);
  *(_QWORD *)&v39 = 0x6139471CB89383CBLL;
  *((_QWORD *)&v39 + 1) = "md::NonTiledAssetLogic]";
  *(_QWORD *)&v40 = 22;
  *(_QWORD *)&v49 = 0x932EE29454ABDC4ELL;
  *((_QWORD *)&v49 + 1) = "md::NonTiledAssetContext]";
  *(_QWORD *)&v50 = 24;
  BYTE8(v50) = 1;
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 0;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v39, &v49, 0, (uint64_t)&v43, (uint64_t)&v46);
  *(_QWORD *)&v43 = 0x87668FB4D087F775;
  *((_QWORD *)&v43 + 1) = "md::OverlaysLogic]";
  v44 = 17;
  *(_QWORD *)&v39 = 0xADE8F13E6C18D970;
  *((_QWORD *)&v39 + 1) = "md::OverlaysContext]";
  *(_QWORD *)&v40 = 19;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 4;
  v52 = xmmword_1E42F8CA8;
  v53 = unk_1E42F8CB8;
  v54 = xmmword_1E42F8CC8;
  v55 = *(_OWORD *)&off_1E42F8CD8;
  v50 = xmmword_1E42F8C88;
  v51 = unk_1E42F8C98;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  *(_QWORD *)&v43 = 0xAF46DE79C836B0D8;
  *((_QWORD *)&v43 + 1) = "md::TileSelectionLogic]";
  v44 = 22;
  *(_QWORD *)&v39 = 0x64780CBD71DF7CF5;
  *((_QWORD *)&v39 + 1) = "md::TileSelectionContext]";
  *(_QWORD *)&v40 = 24;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 3;
  v52 = xmmword_1E42F8B10;
  v53 = unk_1E42F8B20;
  *(_QWORD *)&v54 = 21;
  v50 = xmmword_1E42F8AF0;
  v51 = unk_1E42F8B00;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  v14 = 0xCBF29CE484222325;
  v15 = 0x26u;
  do
    v14 = 0x100000001B3 * (v14 ^ aStdStringViewG_927[v15++]);
  while (v15 != 368);
  v46 = v14;
  v47 = "md::TileDependencyLogicImpl<md::TileDependencies<>, md::TileDependencies<md::TileDependency<md::MapDataType::Flyover, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverMetadata, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverDsm, md::FlyoverTileDataResolverContext>>>]";
  v48 = 330;
  *(_QWORD *)&v43 = 0x8677AD8BA9352C1DLL;
  *((_QWORD *)&v43 + 1) = "md::ResolvedTileSelectionContext]";
  v44 = 32;
  v45 = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 1;
  v50 = xmmword_1E42F8B38;
  *(_QWORD *)&v51 = 24;
  *(_QWORD *)&v39 = &v40;
  *((_QWORD *)&v39 + 1) = 1;
  v40 = xmmword_1E42F8B50;
  *(_QWORD *)&v41 = 34;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)v13, &v46, &v43, 0, (uint64_t)&v49, (uint64_t)&v39);
  *(_QWORD *)&v43 = 0x87BA2765F9E38E05;
  *((_QWORD *)&v43 + 1) = "md::PendingSceneLogic]";
  v44 = 21;
  *(_QWORD *)&v39 = 0x9F2276D081C2CB20;
  *((_QWORD *)&v39 + 1) = "md::PendingSceneContext]";
  *(_QWORD *)&v40 = 23;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 5;
  v54 = xmmword_1E42F8BA8;
  v55 = *(_OWORD *)&off_1E42F8BB8;
  v56 = xmmword_1E42F8BC8;
  *(_QWORD *)&v57 = 25;
  v50 = xmmword_1E42F8B68;
  v51 = unk_1E42F8B78;
  v52 = xmmword_1E42F8B88;
  v53 = unk_1E42F8B98;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)v13, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  *(_QWORD *)&v43 = 0x1FCDF994595CDE24;
  *((_QWORD *)&v43 + 1) = "md::PuckLocationAnimationTracingLogic]";
  v44 = 37;
  *(_QWORD *)&v39 = 0xA81ACD73F9C92AA1;
  *((_QWORD *)&v39 + 1) = "md::PuckLocationAnimationTracingContext]";
  *(_QWORD *)&v40 = 39;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 1;
  v50 = xmmword_1E42F8E88;
  *(_QWORD *)&v51 = 21;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)v13, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  *(_QWORD *)&v43 = 0x33D44727E59BE9E9;
  *((_QWORD *)&v43 + 1) = "md::PuckLogic]";
  v44 = 13;
  *(_QWORD *)&v39 = 0x9AEE7E062376E454;
  *((_QWORD *)&v39 + 1) = "md::PuckContext]";
  *(_QWORD *)&v40 = 15;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 9;
  v60 = xmmword_1E42F8A40;
  v61 = *(_OWORD *)&off_1E42F8A50;
  v62 = xmmword_1E42F8A60;
  v63 = 24;
  v56 = xmmword_1E42F8A00;
  v57 = unk_1E42F8A10;
  v58 = xmmword_1E42F8A20;
  v59 = unk_1E42F8A30;
  v52 = xmmword_1E42F89C0;
  v53 = unk_1E42F89D0;
  v54 = xmmword_1E42F89E0;
  v55 = *(_OWORD *)&off_1E42F89F0;
  v50 = xmmword_1E42F89A0;
  v51 = unk_1E42F89B0;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)v13, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  *(_QWORD *)&v43 = 0xDEBD99099DA2C65BLL;
  *((_QWORD *)&v43 + 1) = "md::RegistryLogic]";
  v44 = 17;
  *(_QWORD *)&v39 = 0xFBD83FDA8879FF7ELL;
  *((_QWORD *)&v39 + 1) = "md::RegistryContext]";
  *(_QWORD *)&v40 = 19;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 1;
  v50 = xmmword_1E42F8C58;
  *(_QWORD *)&v51 = 16;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)v13, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  *(_QWORD *)&v43 = 0x8B45D3D7944796A2;
  *((_QWORD *)&v43 + 1) = "md::PendingRegistryLogic]";
  v44 = 24;
  *(_QWORD *)&v39 = 0xA8300AA8F44B09FFLL;
  *((_QWORD *)&v39 + 1) = "md::PendingRegistryContext]";
  *(_QWORD *)&v40 = 26;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 1;
  v50 = xmmword_1E42F8C10;
  *(_QWORD *)&v51 = 23;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)v13, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  v46 = 0x2B7C4502BD3C99C6;
  v47 = "md::ResolvedSceneLogic]";
  v48 = 22;
  *(_QWORD *)&v49 = &v50;
  *(_QWORD *)&v43 = 0x99BED48DEFBBD82BLL;
  *((_QWORD *)&v43 + 1) = "md::SceneContext]";
  v44 = 16;
  v45 = 1;
  *(_QWORD *)&v39 = &v40;
  *((_QWORD *)&v39 + 1) = 1;
  v40 = xmmword_1E42F8C10;
  *(_QWORD *)&v41 = 23;
  *((_QWORD *)&v49 + 1) = 2;
  v50 = xmmword_1E42F8BE0;
  v51 = unk_1E42F8BF0;
  v52 = xmmword_1E42F8C00;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)v13, &v46, &v43, 0, (uint64_t)&v39, (uint64_t)&v49);
  *(_QWORD *)&v39 = 0x5CBBA028798243FLL;
  *((_QWORD *)&v39 + 1) = "md::RouteOverlayLogic]";
  *(_QWORD *)&v40 = 21;
  *(_QWORD *)&v49 = 0x13043386C0978CC2;
  *((_QWORD *)&v49 + 1) = "md::RouteOverlayContext]";
  *(_QWORD *)&v50 = 23;
  BYTE8(v50) = 1;
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 0;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)v13, (unint64_t *)&v39, &v49, 0, (uint64_t)&v43, (uint64_t)&v46);
  *(_QWORD *)&v43 = 0x1F3242C85D9F2F62;
  *((_QWORD *)&v43 + 1) = "md::SceneQueryLogic]";
  v44 = 19;
  *(_QWORD *)&v39 = 0xDFC317497CF9A4BFLL;
  *((_QWORD *)&v39 + 1) = "md::SceneQueryContext]";
  *(_QWORD *)&v40 = 21;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 5;
  v54 = xmmword_1E42F7E20;
  v55 = *(_OWORD *)&off_1E42F7E30;
  v56 = xmmword_1E42F7E40;
  *(_QWORD *)&v57 = 19;
  v50 = xmmword_1E42F7DE0;
  v51 = unk_1E42F7DF0;
  v52 = xmmword_1E42F7E00;
  v53 = unk_1E42F7E10;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)v13, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  *(_QWORD *)&v39 = 0xD2443A61CED86C69;
  *((_QWORD *)&v39 + 1) = "md::SettingsLogic]";
  *(_QWORD *)&v40 = 17;
  *(_QWORD *)&v49 = 0xC97B9E962ADF4AD4;
  *((_QWORD *)&v49 + 1) = "md::SettingsContext]";
  *(_QWORD *)&v50 = 19;
  BYTE8(v50) = 1;
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 0;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)v13, (unint64_t *)&v39, &v49, 0, (uint64_t)&v43, (uint64_t)&v46);
  *(_QWORD *)&v39 = 0x3F812BA5755E8568;
  *((_QWORD *)&v39 + 1) = "md::SharedResourcesLogic]";
  *(_QWORD *)&v40 = 24;
  *(_QWORD *)&v49 = 0xA60DDA5A69582425;
  *((_QWORD *)&v49 + 1) = "md::SharedResourcesContext]";
  *(_QWORD *)&v50 = 26;
  BYTE8(v50) = 1;
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 0;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)v13, (unint64_t *)&v39, &v49, 0, (uint64_t)&v43, (uint64_t)&v46);
  *(_QWORD *)&v43 = 0xDAD5CEE0DC5FF509;
  *((_QWORD *)&v43 + 1) = "md::SkyLogic]";
  v44 = 12;
  *(_QWORD *)&v39 = 0x7C7EC6C7C111B0D0;
  *((_QWORD *)&v39 + 1) = "md::SkyLogicContext]";
  *(_QWORD *)&v40 = 19;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 2;
  v50 = xmmword_1E42F8898;
  v51 = unk_1E42F88A8;
  v52 = xmmword_1E42F88B8;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)v13, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  *(_QWORD *)&v43 = 0x652FEFC5C602CC21;
  *((_QWORD *)&v43 + 1) = "md::StandardLogic]";
  v44 = 17;
  *(_QWORD *)&v39 = 0xFFA06A69D924B0E8;
  *((_QWORD *)&v39 + 1) = "md::StandardLogicContext]";
  *(_QWORD *)&v40 = 24;
  BYTE8(v40) = 1;
  *(_QWORD *)&v49 = &v50;
  *((_QWORD *)&v49 + 1) = 2;
  v50 = xmmword_1E42F7EA0;
  v51 = unk_1E42F7EB0;
  v52 = xmmword_1E42F7EC0;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)v13, (unint64_t *)&v43, &v39, 0, (uint64_t)&v49, (uint64_t)&v46);
  *(_QWORD *)&v39 = 0x2FED70A4459DFCA1;
  *((_QWORD *)&v39 + 1) = "md::StyleLogic]";
  *(_QWORD *)&v40 = 14;
  *(_QWORD *)&v49 = 0xE42D19AFCA302E68;
  *((_QWORD *)&v49 + 1) = "md::StyleLogicContext]";
  *(_QWORD *)&v50 = 21;
  BYTE8(v50) = 1;
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 0;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)v13, (unint64_t *)&v39, &v49, 0, (uint64_t)&v43, (uint64_t)&v46);
  *(_QWORD *)&v39 = 0x41948F4CADE567A1;
  *((_QWORD *)&v39 + 1) = "md::DebugDrawLogic]";
  *(_QWORD *)&v40 = 18;
  *(_QWORD *)&v49 = 0x3619066E3FB5F2CLL;
  *((_QWORD *)&v49 + 1) = "md::DebugDrawContext]";
  *(_QWORD *)&v50 = 20;
  BYTE8(v50) = 1;
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 0;
  v46 = (unint64_t)&v48;
  v47 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)v13, (unint64_t *)&v39, &v49, 0, (uint64_t)&v43, (uint64_t)&v46);
  if (a2)
    v16 = 1;
  else
    v16 = 3;
  if (a2)
    v17 = 1;
  else
    v17 = 4;
  if (a2)
  {
    v19 = (_QWORD *)((char *)this + 128);
    v18 = *((_QWORD *)v38 + 16);
    if (v18)
    {
      while (1)
      {
        while (1)
        {
          v20 = (_QWORD *)v18;
          v21 = *(unsigned __int16 *)(v18 + 26);
          if (v21 < 9)
            break;
          v18 = *v20;
          v19 = v20;
          if (!*v20)
            goto LABEL_28;
        }
        if (v21 == 8)
          break;
        v18 = v20[1];
        if (!v18)
        {
          v19 = v20 + 1;
          goto LABEL_28;
        }
      }
    }
    else
    {
      v20 = (_QWORD *)((char *)v38 + 128);
LABEL_28:
      v22 = operator new(0x20uLL);
      v22[13] = 8;
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = v20;
      *v19 = v22;
      v23 = **((_QWORD **)v38 + 15);
      if (v23)
      {
        *((_QWORD *)v38 + 15) = v23;
        v22 = (_WORD *)*v19;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v38 + 16), (uint64_t *)v22);
      ++*((_QWORD *)v38 + 17);
    }
  }
  LOBYTE(v49) = 30;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)v11, 0x1Eu, &v49)+ 17) = 2;
  LOBYTE(v49) = 41;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)v11, 0x29u, &v49)+ 17) = 2;
  LOBYTE(v49) = 42;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)v11, 0x2Au, &v49)+ 17) = 2;
  LOWORD(v49) = 51;
  WORD1(v49) = v17;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v38 + 80, 0x33u, &v49)+ 18) = v17 << 16;
  LOWORD(v49) = 27;
  WORD1(v49) = a2;
  WORD2(v49) = 55;
  WORD3(v49) = a2;
  WORD4(v49) = 56;
  WORD5(v49) = a2;
  WORD6(v49) = 62;
  HIWORD(v49) = a2;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v38 + 80, 0x1Bu, &v49)+ 18) = (a2 << 16) | 1;
  v24 = WORD3(v49);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v38 + 80, WORD2(v49), (_WORD *)&v49 + 2)+ 18) = (v24 << 16) | 1;
  v25 = WORD5(v49);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v38 + 80, WORD4(v49), (_WORD *)&v49 + 4)+ 18) = (v25 << 16) | 1;
  v26 = HIWORD(v49);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v38 + 80, WORD6(v49), (_WORD *)&v49 + 6)+ 18) = (v26 << 16) | 1;
  LOWORD(v49) = 63;
  WORD1(v49) = a2;
  WORD2(v49) = 35;
  if (a2)
    v27 = 7;
  else
    v27 = 2;
  WORD3(v49) = v16;
  WORD4(v49) = 20;
  WORD5(v49) = a2;
  WORD6(v49) = 24;
  HIWORD(v49) = a2;
  LOWORD(v50) = 69;
  WORD1(v50) = a2;
  WORD2(v50) = 11;
  WORD3(v50) = v27;
  WORD4(v50) = 12;
  WORD5(v50) = v27;
  WORD6(v50) = 71;
  HIWORD(v50) = v27;
  LOWORD(v51) = 72;
  WORD1(v51) = v27;
  WORD2(v51) = 74;
  WORD3(v51) = a2;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v38 + 80, v49, &v49)+ 18) = (a2 << 16) | 2;
  v28 = WORD3(v49);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v38 + 80, WORD2(v49), (_WORD *)&v49 + 2)+ 18) = (v28 << 16) | 2;
  v29 = WORD5(v49);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v38 + 80, WORD4(v49), (_WORD *)&v49 + 4)+ 18) = (v29 << 16) | 2;
  v30 = HIWORD(v49);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v38 + 80, WORD6(v49), (_WORD *)&v49 + 6)+ 18) = (v30 << 16) | 2;
  v31 = WORD1(v50);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v38 + 80, v50, &v50)+ 18) = (v31 << 16) | 2;
  v32 = WORD3(v50);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v38 + 80, WORD2(v50), (_WORD *)&v50 + 2)+ 18) = (v32 << 16) | 2;
  v33 = WORD5(v50);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v38 + 80, WORD4(v50), (_WORD *)&v50 + 4)+ 18) = (v33 << 16) | 2;
  v34 = HIWORD(v50);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v38 + 80, WORD6(v50), (_WORD *)&v50 + 6)+ 18) = (v34 << 16) | 2;
  v35 = WORD1(v51);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v38 + 80, v51, &v51)+ 18) = (v35 << 16) | 2;
  v36 = WORD3(v51);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)v38 + 80, WORD2(v51), (_WORD *)&v51 + 2)+ 18) = (v36 << 16) | 2;
  return v38;
}

void sub_19FB00724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,md::MapEngineMode *a26)
{
  void *v26;
  void *v27;

  *(_QWORD *)a26 = &off_1E42A1BF8;
  if (*((_BYTE *)a26 + 548))
    *((_BYTE *)a26 + 548) = 0;
  md::MapEngineMode::~MapEngineMode(a26);
  _Unwind_Resume(a1);
}

void md::PolygonLayerDataSource::~PolygonLayerDataSource(md::PolygonLayerDataSource *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429D898;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 99);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this + 95) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429D898;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 99);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this + 95) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::PolygonLayerDataSource::shouldFilterFeature()
{
  return 0;
}

void md::PolygonLayerDataSource::createPolygonTileData(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t *a6, uint64_t a7, float a8)
{
  unint64_t v8;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _BYTE *v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  gss::Allocator *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 **v53;
  uint64_t v54;
  VKPolygonGroup *v55;
  double v56;
  double v57;
  char *v58;
  int v59;
  _QWORD *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  id v68;
  char *v69;
  void *v70;
  char *v71;
  id v72;
  id *v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int *v76;
  unint64_t v77;
  unint64_t v78;
  uint8x8_t v79;
  uint64_t **v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v92;
  _BOOL8 v93;
  unint64_t v94;
  unint64_t v95;
  size_t v96;
  uint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  char v101;
  void *v102;
  unint64_t v103;
  unint64_t v104;
  id *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  id *v111;
  char *v112;
  char *v113;
  __int128 v114;
  void *v115;
  id *v116;
  void *v117;
  char *v118;
  uint64_t v119;
  float v120;
  float v121;
  _BYTE *v122;
  int v123;
  int v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  id **v127;
  VKPolygonGroup *v128;
  char v129;
  float v130;
  float v131;
  float v133;
  float v134;
  VKPolygonGroup *v136;
  VKPolygonGroup *v137;
  double v138;
  double v139;
  _DWORD *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  id **v146;
  VKPolygonGroup *v147;
  char *v148;
  void *v149;
  char *v150;
  VKPolygonGroup *v151;
  id *v152;
  VKPolygonGroup *v153;
  unint64_t v154;
  unint64_t v155;
  id *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  id *v162;
  char *v163;
  id *v164;
  char *v165;
  __int128 v166;
  void *v167;
  id *v168;
  void *v169;
  id **v170;
  void *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  id v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  __int128 *v201;
  uint64_t v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  char **v220;
  std::__shared_weak_count *v221;
  char *v222;
  unint64_t *v223;
  unint64_t v224;
  uint64_t v225;
  __n128 v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  gss::Allocator *v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint8x8_t v236;
  unint64_t v237;
  _QWORD *v238;
  _QWORD *v239;
  unint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  _QWORD *v247;
  unsigned __int8 v248;
  _QWORD *v249;
  unsigned __int8 v250;
  _QWORD *v251;
  void *v252;
  int64_t v253;
  int64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  char *v258;
  char *v259;
  unint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  md::CoastlineGroup *v263;
  md::CoastlineGroup *v264;
  __int128 v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint8x8_t v273;
  _QWORD *v274;
  _QWORD *v275;
  unint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  float v279;
  _BOOL8 v280;
  unint64_t v281;
  unint64_t v282;
  size_t prime;
  void *v284;
  void *v285;
  uint64_t v286;
  _QWORD **v287;
  size_t v288;
  size_t v289;
  size_t v290;
  _QWORD *i;
  size_t v292;
  uint64_t v293;
  unint64_t v294;
  uint8x8_t v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  size_t v299;
  _QWORD *v300;
  _QWORD *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  _QWORD *v309;
  __int128 v310;
  __int128 v311;
  char *v312;
  unint64_t *v313;
  unint64_t v314;
  void *v315;
  uint64_t v316;
  geo::read_write_lock *v317;
  const char *v318;
  malloc_zone_t *zone;
  geo::read_write_lock *v320;
  const char *v321;
  malloc_zone_t *v322;
  _QWORD *v323;
  void *v324;
  unint64_t *v325;
  unint64_t v326;
  _QWORD *v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t *v335;
  unint64_t v336;
  char *v337;
  unint64_t v338;
  _QWORD *v339;
  uint64_t v340;
  _QWORD *v341;
  _QWORD *v342;
  _QWORD *v343;
  uint64_t v344;
  unint64_t *v345;
  unint64_t v346;
  size_t v347;
  _QWORD *v348;
  uint64_t v349;
  unint64_t *v350;
  unint64_t v351;
  uint64_t v352;
  _QWORD *v353;
  _QWORD *v354;
  uint64_t v355;
  unint64_t *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  id *v361;
  char *v362;
  int64_t v363;
  unint64_t v364;
  _QWORD *v365;
  id v366;
  void *v367;
  uint64_t *v368;
  size_t v369;
  uint64_t **v370;
  _QWORD *v371;
  unint64_t v372;
  unint64_t v373;
  uint8x8_t v374;
  _QWORD *v375;
  _QWORD *v376;
  unint64_t v377;
  uint64_t v378;
  _QWORD *v379;
  uint64_t *v380;
  void *v381;
  float v382;
  float v383;
  _BOOL8 v384;
  unint64_t v385;
  unint64_t v386;
  size_t v387;
  int8x8_t v388;
  unint64_t v389;
  uint8x8_t v390;
  uint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  unint64_t v394;
  char *v395;
  char *v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  int8x8_t v400;
  BOOL v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  _QWORD *v405;
  _QWORD *v406;
  md::CoastlineGroup *v407;
  md::CoastlineGroup *v408;
  void *v409;
  void *v410;
  void *v411;
  char *v412;
  void *v413;
  char *v414;
  char *v415;
  void (**v416)(char *);
  unint64_t v417;
  uint8x8_t v418;
  uint64_t v419;
  _QWORD *v420;
  _QWORD *v424;
  _QWORD *v425;
  uint64_t v426;
  uint64_t v427;
  _BYTE *v429;
  void *v430;
  uint64_t v432;
  char **v433;
  id v434;
  std::__shared_weak_count *v435;
  uint64_t v436;
  char **v437;
  uint64_t v438;
  void *v439;
  _QWORD **v440;
  _QWORD *v441[2];
  __int128 v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  uint64_t v447;
  int v448;
  void *v449;
  void *v450;
  uint64_t v451;
  void *v452[2];
  char *v453;
  size_t __n[2];
  __int128 v455;
  int v456;
  void *v457;
  char *v458;
  char *v459;
  void *__p[2];
  void *v461[2];
  uint64_t v462;
  char *v463;
  std::__shared_weak_count *v464;
  void **v465;
  unint64_t *v466;
  uint64_t *v467;
  _BYTE v468[40];
  __int128 v469;
  _QWORD *v470;
  _QWORD v471[2];
  char *v472;
  std::__shared_weak_count *v473;
  __int16 v474;
  char v475;
  _DWORD v476[2];
  char *v477;
  std::__shared_weak_count *v478;
  void *v479;
  std::__shared_weak_count *v480;
  uint64_t v481;
  std::__shared_weak_count *v482;
  char *v483;
  std::__shared_weak_count *v484;
  __int128 v485;
  __int128 v486;
  float v487;
  __int128 v488;
  __int128 v489;
  char *v490;
  __int128 *v491;
  uint64_t v492;

  v492 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a2 + 24))
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v11 = a2;
  v457 = 0;
  v458 = 0;
  v459 = 0;
  *(_OWORD *)__n = 0u;
  v455 = 0u;
  v456 = 1065353216;
  v452[0] = 0;
  v452[1] = 0;
  v453 = 0;
  v441[0] = 0;
  v441[1] = 0;
  v440 = v441;
  v442 = xmmword_19FFB5070;
  v447 = 0;
  v444 = 0;
  v445 = 0;
  v443 = 0;
  v446 = 0;
  v448 = 4;
  v450 = 0;
  v451 = 0;
  v449 = 0;
  if (*(_WORD *)(a2 + 32) != 41)
  {
    v457 = operator new(0x2D0uLL);
    v458 = (char *)v457;
    v459 = (char *)v457 + 720;
  }
  v420 = a1;
  v485 = 0u;
  v486 = 0u;
  v487 = 1.0;
  v488 = 0uLL;
  v12 = (char *)operator new(0xC8uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E42DB160;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *((_QWORD *)v12 + 23) = 0;
  *((_QWORD *)v12 + 24) = 0;
  *((_QWORD *)v12 + 5) = v12 + 48;
  *((_QWORD *)v12 + 18) = 0;
  *((_QWORD *)v12 + 19) = 0;
  *((_QWORD *)v12 + 20) = 0;
  v483 = v12 + 24;
  v484 = (std::__shared_weak_count *)v12;
  v13 = (_QWORD *)*a5;
  v424 = (_QWORD *)a5[1];
  v438 = v11;
  if ((_QWORD *)*a5 != v424)
  {
    v14 = 1;
    while (1)
    {
      v16 = *v13;
      v15 = (std::__shared_weak_count *)v13[1];
      v481 = *v13;
      v482 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
      }
      v19 = geo::codec::VectorTile::polygonsCount(*(geo::codec::VectorTile **)(v16 + 144));
      v20 = v19;
      if (v19)
        break;
LABEL_274:
      if (v15)
      {
        v191 = (unint64_t *)&v15->__shared_owners_;
        do
          v192 = __ldaxr(v191);
        while (__stlxr(v192 - 1, v191));
        if (!v192)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v13 += 2;
      if (v13 == v424)
        goto LABEL_279;
    }
    v425 = v13;
    v21 = 0;
    v426 = v19;
    v427 = v16;
    while (1)
    {
      v22 = geo::codec::VectorTile::polygons(*(geo::codec::VectorTile **)(v16 + 144));
      v23 = v22;
      v24 = v22 + (v21 << 7);
      v25 = *(unsigned __int8 *)(v11 + 752);
      if (v25 == 2)
      {
        if (*(_BYTE *)(v24 + 127) != 1)
          goto LABEL_13;
      }
      else if (v25 == 1 && *(_BYTE *)(v22 + (v21 << 7) + 127) == 1)
      {
        goto LABEL_13;
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 152))(v11, v481, v24) & 1) == 0)
      {
        v26 = v23 + (v21 << 7);
        v28 = *(unsigned __int8 *)(v26 + 127);
        v27 = (_BYTE *)(v26 + 127);
        v29 = v28 == 1;
        if (v28 == 1)
          v30 = v14 + 1;
        else
          v30 = v14;
        if (v29)
          v31 = v14;
        else
          v31 = 0;
        v439 = (void *)v31;
        if (*(_DWORD *)(v24 + 100))
        {
          v429 = v27;
          md::createFeatureAttributeSet((gss::Allocator *)&v489, (uint64_t *)(v24 + 24));
          v32 = *a6;
          *(void **)((char *)__p + 7) = 0;
          __p[0] = 0;
          HIBYTE(__p[1]) = 1;
          gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v479, v32, (gss::FeatureAttributeSet *)&v489, (gss::QueryOverrides *)__p);
          if (!BYTE6(__p[1]) && __p[0])
          {
            v34 = gss::Allocator::instance(v33);
            (*(void (**)(uint64_t, void *, _QWORD))(*(_QWORD *)v34 + 40))(v34, __p[0], WORD2(__p[1]));
          }
          v35 = *((_QWORD *)&v489 + 1) - v489;
          v36 = (uint64_t)(*((_QWORD *)&v489 + 1) - v489) >> 3;
          if (*((_QWORD *)&v489 + 1) != (_QWORD)v489)
          {
            v37 = (unsigned int *)v489;
            do
            {
              v38 = ((v36 << 6) - 0x61C8864680B583EBLL + (v36 >> 2) + *v37) ^ v36;
              v36 = (*((unsigned __int16 *)v37 + 2) - 0x61C8864680B583EBLL + (v38 << 6) + (v38 >> 2)) ^ v38;
              v37 += 2;
            }
            while (v37 != *((unsigned int **)&v489 + 1));
          }
          v436 = v24;
          v432 = v30;
          if (*((_QWORD *)&v485 + 1))
          {
            v39 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v485 + 8));
            v39.i16[0] = vaddlv_u8(v39);
            if (v39.u32[0] > 1uLL)
            {
              v40 = v36;
              if (v36 >= *((_QWORD *)&v485 + 1))
                v40 = v36 % *((_QWORD *)&v485 + 1);
            }
            else
            {
              v40 = v36 & (*((_QWORD *)&v485 + 1) - 1);
            }
            v41 = *(_QWORD **)(v485 + 8 * v40);
            if (v41)
            {
              v42 = (_QWORD *)*v41;
              if (v42)
              {
                if (v39.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v48 = v42[1];
                    if (v48 == v36)
                    {
                      v49 = v42[2];
                      v50 = v42[3];
                      if (v50 - v49 == v35)
                      {
                        if (v49 == v50)
                          goto LABEL_69;
                        v51 = v489;
                        while (*(_DWORD *)v49 == *(_DWORD *)v51
                             && *(unsigned __int16 *)(v49 + 4) == *(unsigned __int16 *)(v51 + 4))
                        {
                          v49 += 8;
                          v51 += 8;
                          if (v49 == v50)
                            goto LABEL_69;
                        }
                      }
                    }
                    else if ((v48 & (*((_QWORD *)&v485 + 1) - 1)) != v40)
                    {
                      goto LABEL_70;
                    }
                    v42 = (_QWORD *)*v42;
                    if (!v42)
                      goto LABEL_70;
                  }
                }
                do
                {
                  v43 = v42[1];
                  if (v43 == v36)
                  {
                    v44 = v42[2];
                    v45 = v42[3];
                    if (v45 - v44 == v35)
                    {
                      if (v44 == v45)
                      {
LABEL_69:
                        v53 = (unsigned __int8 **)(v42 + 6);
                        goto LABEL_169;
                      }
                      v46 = v489;
                      while (*(_DWORD *)v44 == *(_DWORD *)v46
                           && *(unsigned __int16 *)(v44 + 4) == *(unsigned __int16 *)(v46 + 4))
                      {
                        v44 += 8;
                        v46 += 8;
                        if (v44 == v45)
                          goto LABEL_69;
                      }
                    }
                  }
                  else
                  {
                    if (v43 >= *((_QWORD *)&v485 + 1))
                      v43 %= *((_QWORD *)&v485 + 1);
                    if (v43 != v40)
                      break;
                  }
                  v42 = (_QWORD *)*v42;
                }
                while (v42);
              }
            }
          }
LABEL_70:
          v54 = v23 + (v21 << 7);
          v471[0] = *(_QWORD *)(v54 + 104);
          v55 = [VKPolygonGroup alloc];
          LOBYTE(v57) = *(_BYTE *)(a4 + 1);
          v59 = *(unsigned __int8 *)(v54 + 126);
          v58 = (char *)(v54 + 126);
          if (v59)
            v60 = v471;
          else
            v60 = 0;
          v477 = v483;
          v478 = v484;
          if (v484)
          {
            v61 = (unint64_t *)&v484->__shared_owners_;
            do
              v62 = __ldxr(v61);
            while (__stxr(v62 + 1, v61));
          }
          *(float *)&v57 = (float)LODWORD(v57);
          *(float *)&v56 = a8;
          v63 = -[VKPolygonGroup initWithStyleQuery:tileZoom:fixedAroundCentroid:contentScale:storage:](v55, "initWithStyleQuery:tileZoom:fixedAroundCentroid:contentScale:storage:", &v479, v60, &v477, v57, v56);
          v64 = (void *)v63;
          v65 = v478;
          if (!v478)
            goto LABEL_80;
          v66 = (unint64_t *)&v478->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
            if (v64)
              goto LABEL_81;
          }
          else
          {
LABEL_80:
            if (v63)
            {
LABEL_81:
              v68 = v64;
              __p[0] = &off_1E42B4B50;
              __p[1] = v68;
              v69 = v458;
              if (v458 >= v459)
              {
                v71 = std::vector<geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__push_back_slow_path<geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>(&v457, (uint64_t)__p);
                v70 = __p[1];
              }
              else
              {
                *(_QWORD *)v458 = &off_1E42B4B50;
                *((_QWORD *)v69 + 1) = 0;
                objc_storeStrong((id *)v69 + 1, v64);

                v70 = 0;
                v71 = v69 + 24;
              }
              v458 = v71;

              if (v439)
              {
                v72 = v68;
                v73 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)__n, *(_QWORD *)(v24 + 40), (_QWORD *)(v24 + 40));
                objc_storeStrong(v73 + 4, v64);

              }
            }
          }
          v74 = *((_QWORD *)&v489 + 1) - v489;
          v75 = (uint64_t)(*((_QWORD *)&v489 + 1) - v489) >> 3;
          v430 = v64;
          if (*((_QWORD *)&v489 + 1) != (_QWORD)v489)
          {
            v76 = (unsigned int *)v489;
            do
            {
              v77 = ((v75 << 6) - 0x61C8864680B583EBLL + (v75 >> 2) + *v76) ^ v75;
              v75 = (*((unsigned __int16 *)v76 + 2) - 0x61C8864680B583EBLL + (v77 << 6) + (v77 >> 2)) ^ v77;
              v76 += 2;
            }
            while (v76 != *((unsigned int **)&v489 + 1));
          }
          v78 = *((_QWORD *)&v485 + 1);
          if (*((_QWORD *)&v485 + 1))
          {
            v79 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v485 + 8));
            v79.i16[0] = vaddlv_u8(v79);
            if (v79.u32[0] > 1uLL)
            {
              v8 = v75;
              if (v75 >= *((_QWORD *)&v485 + 1))
                v8 = v75 % *((_QWORD *)&v485 + 1);
            }
            else
            {
              v8 = (*((_QWORD *)&v485 + 1) - 1) & v75;
            }
            v80 = *(uint64_t ***)(v485 + 8 * v8);
            if (v80)
            {
              v81 = *v80;
              if (*v80)
              {
                if (v79.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v87 = v81[1];
                    if (v87 == v75)
                    {
                      v88 = v81[2];
                      v89 = v81[3];
                      if (v89 - v88 == v74)
                      {
                        if (v88 == v89)
                          goto LABEL_150;
                        v90 = v489;
                        while (*(_DWORD *)v88 == *(_DWORD *)v90
                             && *(unsigned __int16 *)(v88 + 4) == *(unsigned __int16 *)(v90 + 4))
                        {
                          v88 += 8;
                          v90 += 8;
                          if (v88 == v89)
                            goto LABEL_150;
                        }
                      }
                    }
                    else if ((v87 & (*((_QWORD *)&v485 + 1) - 1)) != v8)
                    {
                      goto LABEL_126;
                    }
                    v81 = (uint64_t *)*v81;
                    if (!v81)
                      goto LABEL_126;
                  }
                }
                do
                {
                  v82 = v81[1];
                  if (v82 == v75)
                  {
                    v83 = v81[2];
                    v84 = v81[3];
                    if (v84 - v83 == v74)
                    {
                      if (v83 == v84)
                        goto LABEL_150;
                      v85 = v489;
                      while (*(_DWORD *)v83 == *(_DWORD *)v85
                           && *(unsigned __int16 *)(v83 + 4) == *(unsigned __int16 *)(v85 + 4))
                      {
                        v83 += 8;
                        v85 += 8;
                        if (v83 == v84)
                          goto LABEL_150;
                      }
                    }
                  }
                  else
                  {
                    if (v82 >= *((_QWORD *)&v485 + 1))
                      v82 %= *((_QWORD *)&v485 + 1);
                    if (v82 != v8)
                      break;
                  }
                  v81 = (uint64_t *)*v81;
                }
                while (v81);
              }
            }
          }
LABEL_126:
          v81 = (uint64_t *)operator new(0x48uLL);
          *v81 = 0;
          v81[1] = v75;
          v81[2] = 0;
          v81[3] = 0;
          v81[4] = 0;
          v81[5] = gss::Allocator::instance((gss::Allocator *)v81);
          std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(v81 + 2, v489, *((_QWORD **)&v489 + 1), (uint64_t)(*((_QWORD *)&v489 + 1) - v489) >> 3);
          v81[6] = 0;
          v81[7] = 0;
          v81[8] = 0;
          v92 = (float)(unint64_t)(*((_QWORD *)&v486 + 1) + 1);
          if (!v78 || (float)(v487 * (float)v78) < v92)
          {
            v93 = (v78 & (v78 - 1)) != 0;
            if (v78 < 3)
              v93 = 1;
            v94 = v93 | (2 * v78);
            v95 = vcvtps_u32_f32(v92 / v487);
            if (v94 <= v95)
              v96 = v95;
            else
              v96 = v94;
            v78 = *((_QWORD *)&v485 + 1);
            if ((v78 & (v78 - 1)) != 0)
            {
              if (v75 >= *((_QWORD *)&v485 + 1))
                v8 = v75 % *((_QWORD *)&v485 + 1);
              else
                v8 = v75;
            }
            else
            {
              v8 = (*((_QWORD *)&v485 + 1) - 1) & v75;
            }
          }
          v97 = v485;
          v98 = *(uint64_t **)(v485 + 8 * v8);
          if (v98)
          {
            *v81 = *v98;
            goto LABEL_148;
          }
          *v81 = v486;
          *(_QWORD *)&v486 = v81;
          *(_QWORD *)(v97 + 8 * v8) = &v486;
          if (*v81)
          {
            v99 = *(_QWORD *)(*v81 + 8);
            if ((v78 & (v78 - 1)) != 0)
            {
              if (v99 >= v78)
                v99 %= v78;
            }
            else
            {
              v99 &= v78 - 1;
            }
            v98 = (uint64_t *)(v485 + 8 * v99);
LABEL_148:
            *v98 = (uint64_t)v81;
          }
          ++*((_QWORD *)&v486 + 1);
LABEL_150:
          v100 = v81 + 6;
          v101 = *v58;
          v102 = (void *)v471[0];
          v434 = v64;
          v104 = v81[7];
          v103 = v81[8];
          if (v104 >= v103)
          {
            v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v104 - *v100) >> 4);
            v107 = v106 + 1;
            if (v106 + 1 > 0x555555555555555)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v108 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - *v100) >> 4);
            if (2 * v108 > v107)
              v107 = 2 * v108;
            if (v108 >= 0x2AAAAAAAAAAAAAALL)
              v109 = 0x555555555555555;
            else
              v109 = v107;
            if (v109)
            {
              if (v109 > 0x555555555555555)
                goto LABEL_685;
              v110 = (char *)operator new(48 * v109);
            }
            else
            {
              v110 = 0;
            }
            v111 = (id *)&v110[48 * v106];
            *(_BYTE *)v111 = v101;
            *(id *)((char *)v111 + 4) = v102;
            v111[2] = v439;
            v111[3] = &off_1E42B4B50;
            v111[4] = 0;
            objc_storeStrong(v111 + 4, v430);

            v8 = (unint64_t)&v110[48 * v109];
            v105 = v111 + 6;
            v112 = (char *)v81[6];
            v113 = (char *)v81[7];
            if (v113 == v112)
            {
              v81[6] = (uint64_t)v111;
              v81[7] = (uint64_t)v105;
              v81[8] = v8;
              if (!v113)
                goto LABEL_168;
            }
            else
            {
              do
              {
                v114 = *((_OWORD *)v113 - 3);
                v115 = (void *)*((_QWORD *)v113 - 4);
                *(v111 - 2) = 0;
                v116 = v111 - 2;
                *((_OWORD *)v116 - 2) = v114;
                *(v116 - 2) = v115;
                *(v116 - 1) = &off_1E42B4B50;
                objc_storeStrong(v116, *((id *)v113 - 2));
                v117 = (void *)*((_QWORD *)v113 - 2);
                *((_QWORD *)v113 - 2) = 0;

                v111 = v116 - 4;
                v113 -= 48;
              }
              while (v113 != v112);
              v113 = (char *)v81[6];
              v118 = (char *)v81[7];
              v81[6] = (uint64_t)v111;
              v81[7] = (uint64_t)v105;
              for (v81[8] = v8; v118 != v113; v118 -= 48)
              {
                *((_QWORD *)v118 - 3) = &off_1E42B4B50;

              }
              if (!v113)
                goto LABEL_168;
            }
            operator delete(v113);
          }
          else
          {
            *(_BYTE *)v104 = v101;
            *(_QWORD *)(v104 + 4) = v102;
            *(_QWORD *)(v104 + 16) = v439;
            *(_QWORD *)(v104 + 24) = &off_1E42B4B50;
            *(_QWORD *)(v104 + 32) = 0;
            objc_storeStrong((id *)(v104 + 32), v430);

            v105 = (id *)(v104 + 48);
          }
LABEL_168:
          v81[7] = (uint64_t)v105;

          v53 = (unsigned __int8 **)(v81 + 6);
LABEL_169:
          v119 = v23 + (v21 << 7);
          v121 = *(float *)(v119 + 104);
          v120 = *(float *)(v119 + 108);
          *(float *)v476 = v121;
          *(float *)&v476[1] = v120;
          v124 = *(unsigned __int8 *)(v119 + 126);
          v122 = (_BYTE *)(v119 + 126);
          v123 = v124;
          v125 = *v53;
          v126 = v53[1];
          v127 = (id **)v53;
          if (*v53 == v126)
          {
            v128 = 0;
          }
          else
          {
            v128 = 0;
            v129 = 0;
            do
            {
              while (*((void **)v125 + 2) == v439 && *v125 == v123)
              {
                if (v123)
                {
                  v130 = *((float *)v125 + 1);
                  v131 = vabds_f32(v130, v121);
                  if (v131 > (float)(fabsf(v130 + v121) * 0.000011921) && v131 > 1.1755e-38)
                    break;
                  v133 = *((float *)v125 + 2);
                  v134 = vabds_f32(v133, v120);
                  if (v134 > (float)(fabsf(v133 + v120) * 0.000011921) && v134 > 1.1755e-38)
                    break;
                }
                v136 = (VKPolygonGroup *)*((id *)v125 + 4);

                v125 += 48;
                v129 = 1;
                v128 = v136;
                if (v125 == v126)
                  goto LABEL_231;
              }
              v125 += 48;
            }
            while (v125 != v126);
            v136 = v128;
            if ((v129 & 1) != 0)
            {
LABEL_231:
              v171 = v479;
              v172 = v480;
              v471[0] = v479;
              v471[1] = v480;
              if (v480)
              {
                v173 = (unint64_t *)&v480->__shared_owners_;
                do
                  v174 = __ldxr(v173);
                while (__stxr(v174 + 1, v173));
                __p[1] = v172;
                v175 = v436;
                do
                  v176 = __ldxr(v173);
                while (__stxr(v176 + 1, v173));
              }
              else
              {
                __p[1] = 0;
                v175 = v436;
              }
              __p[0] = v171;
              v461[0] = 0;
              v461[1] = 0;
              LOBYTE(v462) = 0;
              if (v171)
                LOBYTE(v171) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v171 + 48))(v171, v461);
              LOBYTE(v462) = (_BYTE)v171;
              if (!v172)
                goto LABEL_244;
              v177 = (unint64_t *)&v172->__shared_owners_;
              do
                v178 = __ldaxr(v177);
              while (__stlxr(v178 - 1, v177));
              if (!v178)
              {
                ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                std::__shared_weak_count::__release_weak(v172);
                v179 = v488;
                if ((_QWORD)v488)
                  goto LABEL_245;
              }
              else
              {
LABEL_244:
                v179 = v488;
                if ((_QWORD)v488)
                {
LABEL_245:
                  if (*v429 == 1)
                    v180 = v179;
                  else
                    v180 = 0;
LABEL_250:
                  -[VKPolygonGroup prepareForPolygon:withRounder:](v136, "prepareForPolygon:withRounder:", v175, v180);
                  if ((_BYTE)v462)
                    (*(void (**)(void *))(*(_QWORD *)__p[0] + 56))(__p[0]);
                  v181 = (std::__shared_weak_count *)v461[1];
                  if (!v461[1])
                    goto LABEL_256;
                  v182 = (unint64_t *)((char *)v461[1] + 8);
                  do
                    v183 = __ldaxr(v182);
                  while (__stlxr(v183 - 1, v182));
                  if (!v183)
                  {
                    ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                    std::__shared_weak_count::__release_weak(v181);
                    v184 = (std::__shared_weak_count *)__p[1];
                    if (__p[1])
                    {
LABEL_257:
                      v185 = (unint64_t *)&v184->__shared_owners_;
                      do
                        v186 = __ldaxr(v185);
                      while (__stlxr(v186 - 1, v185));
                      if (!v186)
                      {
                        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                        std::__shared_weak_count::__release_weak(v184);
                      }
                    }
                  }
                  else
                  {
LABEL_256:
                    v184 = (std::__shared_weak_count *)__p[1];
                    if (__p[1])
                      goto LABEL_257;
                  }

                  v187 = v480;
                  v20 = v426;
                  v16 = v427;
                  v14 = v432;
                  if (!v480)
                    goto LABEL_266;
                  v188 = (unint64_t *)&v480->__shared_owners_;
                  do
                    v189 = __ldaxr(v188);
                  while (__stlxr(v189 - 1, v188));
                  if (!v189)
                  {
                    ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                    std::__shared_weak_count::__release_weak(v187);
                    v190 = v489;
                    if ((_QWORD)v489)
                    {
LABEL_267:
                      *((_QWORD *)&v489 + 1) = v190;
                      (*(void (**)(__int128 *, uint64_t, char *))(*(_QWORD *)v491 + 40))(v491, v190, &v490[-v190]);
                    }
                  }
                  else
                  {
LABEL_266:
                    v190 = v489;
                    if ((_QWORD)v489)
                      goto LABEL_267;
                  }
                  v11 = v438;
                  goto LABEL_13;
                }
              }
              v180 = 0;
              goto LABEL_250;
            }
          }
          v137 = [VKPolygonGroup alloc];
          LOBYTE(v139) = *(_BYTE *)(a4 + 1);
          if (*v122)
            v140 = v476;
          else
            v140 = 0;
          v472 = v483;
          v473 = v484;
          if (v484)
          {
            v141 = (unint64_t *)&v484->__shared_owners_;
            do
              v142 = __ldxr(v141);
            while (__stxr(v142 + 1, v141));
          }
          *(float *)&v139 = (float)LODWORD(v139);
          *(float *)&v138 = a8;
          v136 = -[VKPolygonGroup initWithStyleQuery:tileZoom:fixedAroundCentroid:contentScale:storage:](v137, "initWithStyleQuery:tileZoom:fixedAroundCentroid:contentScale:storage:", &v479, v140, &v472, v139, v138);

          v143 = v473;
          if (!v473)
            goto LABEL_201;
          v144 = (unint64_t *)&v473->__shared_owners_;
          do
            v145 = __ldaxr(v144);
          while (__stlxr(v145 - 1, v144));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
            v146 = v127;
            if (v136)
            {
LABEL_202:
              v147 = v136;
              __p[0] = &off_1E42B4B50;
              __p[1] = v147;
              v148 = v458;
              if (v458 >= v459)
              {
                v150 = std::vector<geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__push_back_slow_path<geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>(&v457, (uint64_t)__p);
                v149 = __p[1];
              }
              else
              {
                *(_QWORD *)v458 = &off_1E42B4B50;
                *((_QWORD *)v148 + 1) = 0;
                objc_storeStrong((id *)v148 + 1, v136);

                v149 = 0;
                v150 = v148 + 24;
              }
              v458 = v150;

              if (v439)
              {
                v151 = v147;
                v152 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)__n, *(_QWORD *)(v436 + 40), (_QWORD *)(v436 + 40));
                objc_storeStrong(v152 + 4, v136);

              }
              v153 = v147;
              v146 = v127;
            }
          }
          else
          {
LABEL_201:
            v146 = v127;
            if (v136)
              goto LABEL_202;
          }
          v155 = (unint64_t)v146[1];
          v154 = (unint64_t)v146[2];
          if (v155 < v154)
          {
            *(_BYTE *)v155 = v123;
            *(_WORD *)(v155 + 1) = v474;
            *(_BYTE *)(v155 + 3) = v475;
            *(float *)(v155 + 4) = v121;
            *(float *)(v155 + 8) = v120;
            *(_QWORD *)(v155 + 16) = v439;
            *(_QWORD *)(v155 + 24) = &off_1E42B4B50;
            *(_QWORD *)(v155 + 32) = 0;
            objc_storeStrong((id *)(v155 + 32), v136);

            v127[1] = (id *)(v155 + 48);
            goto LABEL_231;
          }
          v156 = *v146;
          v157 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v155 - (_QWORD)*v146) >> 4);
          v158 = v157 + 1;
          if (v157 + 1 > 0x555555555555555)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v159 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v154 - (_QWORD)v156) >> 4);
          if (2 * v159 > v158)
            v158 = 2 * v159;
          if (v159 >= 0x2AAAAAAAAAAAAAALL)
            v160 = 0x555555555555555;
          else
            v160 = v158;
          if (v160)
          {
            if (v160 > 0x555555555555555)
              goto LABEL_685;
            v161 = (char *)operator new(48 * v160);
          }
          else
          {
            v161 = 0;
          }
          v162 = (id *)&v161[48 * v157];
          *(_BYTE *)v162 = v123;
          *(_WORD *)((char *)v162 + 1) = v474;
          *((_BYTE *)v162 + 3) = v475;
          *((float *)v162 + 1) = v121;
          *((float *)v162 + 2) = v120;
          v162[2] = v439;
          v162[3] = &off_1E42B4B50;
          v162[4] = 0;
          objc_storeStrong(v162 + 4, v136);

          v163 = &v161[48 * v160];
          v164 = v162 + 6;
          v8 = (unint64_t)*v127;
          v165 = (char *)v127[1];
          if (v165 == (char *)*v127)
          {
            v170 = v127;
            *v127 = v162;
            v127[1] = v164;
            v127[2] = (id *)v163;
            if (v165)
              goto LABEL_229;
          }
          else
          {
            do
            {
              v166 = *((_OWORD *)v165 - 3);
              v167 = (void *)*((_QWORD *)v165 - 4);
              *(v162 - 2) = 0;
              v168 = v162 - 2;
              *((_OWORD *)v168 - 2) = v166;
              *(v168 - 2) = v167;
              *(v168 - 1) = &off_1E42B4B50;
              objc_storeStrong(v168, *((id *)v165 - 2));
              v169 = (void *)*((_QWORD *)v165 - 2);
              *((_QWORD *)v165 - 2) = 0;

              v162 = v168 - 4;
              v165 -= 48;
            }
            while (v165 != (char *)v8);
            v165 = (char *)*v127;
            v8 = (unint64_t)v127[1];
            *v127 = v162;
            v127[1] = v164;
            for (v127[2] = (id *)v163; (char *)v8 != v165; v8 -= 48)
            {
              *(_QWORD *)(v8 - 24) = &off_1E42B4B50;

            }
            v170 = v127;
            if (v165)
LABEL_229:
              operator delete(v165);
          }
          v170[1] = v164;
          goto LABEL_231;
        }
        v14 = v30;
      }
LABEL_13:
      if (++v21 == v20)
      {
        v15 = v482;
        v13 = v425;
        goto LABEL_274;
      }
    }
  }
LABEL_279:
  v193 = *(id *)(v11 + 768);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)objc_msgSend(v193, "gglDevice") + 24))(&v479);

  __p[0] = (void *)MEMORY[0x1E0C809B0];
  __p[1] = (void *)3321888768;
  v461[0] = ___ZNK2md22PolygonLayerDataSource11buildMeshesERKN3geo8QuadTileERNSt3__16vectorINS1_11_retain_ptrIU8__strongP14VKPolygonGroupNS1_16_retain_objc_arcENS1_17_release_objc_arcENS1_10_hash_objcENS1_11_equal_objcEEENS5_9allocatorISF_EEEERNS5_13unordered_mapIySF_NS5_4hashIyEENS5_8equal_toIyEENSG_INS5_4pairIKySF_EEEEEERNS6_INS5_10shared_ptrINS_21GEOVectorTileResourceEEENSG_ISX_EEEERNS_12TriangulatorIfEERKNSV_IN3gss17StylesheetManagerINS14_10PropertyIDEEEEEf_block_invoke;
  v461[1] = &__block_descriptor_144_ea8_40c47_ZTSNSt3__110shared_ptrIN2md14MeshSetStorageEEE80c310_ZTSNSt3__113unordered_mapIN3gss19FeatureAttributeSetENS_6vectorINS_4pairIN12_GLOBAL__N_110PolygonKeyEN3geo11_retain_ptrIU8__strongP14VKPolygonGroupNS7_16_retain_objc_arcENS7_17_release_objc_arcENS7_10_hash_objcENS7_11_equal_objcEEEEENS_9allocatorISH_EEEENS_4hashIS2_EENS_8equal_toIS2_EENSI_INS4_IKS2_SK_EEEEEE120c45_ZTSNSt3__110shared_ptrIN2md12PolygonRoundEEE_e30_v16__0__ResourceAccessor_____8l;
  v462 = v438;
  v463 = v483;
  v464 = v484;
  if (v484)
  {
    v194 = (unint64_t *)&v484->__shared_owners_;
    do
      v195 = __ldxr(v194);
    while (__stxr(v195 + 1, v194));
  }
  v465 = &v457;
  v466 = a5;
  v467 = a6;
  v469 = v488;
  if (*((_QWORD *)&v488 + 1))
  {
    v196 = (unint64_t *)(*((_QWORD *)&v488 + 1) + 8);
    do
      v197 = __ldxr(v196);
    while (__stxr(v197 + 1, v196));
  }
  v470 = &v440;
  *(_QWORD *)&v489 = &off_1E42C7118;
  *((_QWORD *)&v489 + 1) = MEMORY[0x1A1AF5730](__p);
  v491 = &v489;
  v482 = 0;
  v481 = 0;
  (*(void (**)(void *, __int128 *, uint64_t *))(*(_QWORD *)v479 + 16))(v479, &v489, &v481);
  v198 = v482;
  if (v482)
  {
    v199 = (unint64_t *)&v482->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = v491;
  if (v491 == &v489)
  {
    v203 = 4;
    v201 = &v489;
    v202 = v438;
    goto LABEL_295;
  }
  v202 = v438;
  if (v491)
  {
    v203 = 5;
LABEL_295:
    (*(void (**)(void))(*(_QWORD *)v201 + 8 * v203))();
  }
  v204 = (std::__shared_weak_count *)*((_QWORD *)&v469 + 1);
  if (*((_QWORD *)&v469 + 1))
  {
    v205 = (unint64_t *)(*((_QWORD *)&v469 + 1) + 8);
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  v207 = v464;
  if (v464)
  {
    v208 = (unint64_t *)&v464->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  if (v479)
  {
    v210 = (*(uint64_t (**)(void *))(*(_QWORD *)v479 + 24))(v479);
    v211 = (unint64_t)v479;
    v479 = 0;
    *(_QWORD *)&v489 = v211;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v210 + 48))(v210, &v489);
    v212 = v489;
    *(_QWORD *)&v489 = 0;
    if (v212)
      (*(void (**)(uint64_t))(*(_QWORD *)v212 + 8))(v212);
    v213 = (unint64_t)v479;
    v479 = 0;
    if (v213)
      (*(void (**)(unint64_t))(*(_QWORD *)v213 + 8))(v213);
  }
  v214 = v484;
  if (v484)
  {
    v215 = (unint64_t *)&v484->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  v217 = (std::__shared_weak_count *)*((_QWORD *)&v488 + 1);
  if (*((_QWORD *)&v488 + 1))
  {
    v218 = (unint64_t *)(*((_QWORD *)&v488 + 1) + 8);
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  if (*(_BYTE *)(v202 + 752) == 2)
    goto LABEL_522;
  v220 = (char **)*a5;
  v433 = (char **)a5[1];
  if ((char **)*a5 == v433)
    goto LABEL_522;
  while (2)
  {
    v222 = *v220;
    v221 = (std::__shared_weak_count *)v220[1];
    v483 = *v220;
    v484 = v221;
    if (v221)
    {
      v223 = (unint64_t *)&v221->__shared_owners_;
      do
        v224 = __ldxr(v223);
      while (__stxr(v224 + 1, v223));
    }
    v225 = geo::codec::VectorTile::coastlinesCount(*((geo::codec::VectorTile **)v222 + 18));
    v226 = 0uLL;
    if (!v225)
      goto LABEL_511;
    v435 = v221;
    v437 = v220;
    v227 = 0;
    *(_OWORD *)__p = 0uLL;
    *(_OWORD *)v461 = 0uLL;
    LODWORD(v462) = 1065353216;
    while (2)
    {
      v228 = geo::codec::VectorTile::coastlines(*((geo::codec::VectorTile **)v222 + 18));
      v229 = v228 + 104 * v227;
      if (((*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v438 + 152))(v438, v483, v229) & 1) != 0
        || !*(_DWORD *)(v228 + 104 * v227 + 100))
      {
        goto LABEL_330;
      }
      v230 = *a6;
      md::createFeatureAttributeSet((gss::Allocator *)&v485, (uint64_t *)(v229 + 24));
      *(_QWORD *)((char *)&v489 + 7) = 0;
      *(_QWORD *)&v489 = 0;
      HIBYTE(v489) = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v488, v230, (gss::FeatureAttributeSet *)&v485, (gss::QueryOverrides *)&v489);
      if (!BYTE14(v489) && (_QWORD)v489)
      {
        v232 = gss::Allocator::instance(v231);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v232 + 40))(v232, v489, WORD6(v489));
      }
      if ((_QWORD)v485)
      {
        *((_QWORD *)&v485 + 1) = v485;
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)&v486 + 1) + 40))(*((_QWORD *)&v486 + 1), v485, v486 - v485);
      }
      if (__p[1])
      {
        v233 = 0x9DDFEA08EB382D69 * (((8 * v488) + 8) ^ DWORD1(v488));
        v234 = 0x9DDFEA08EB382D69 * (DWORD1(v488) ^ (v233 >> 47) ^ v233);
        v235 = 0x9DDFEA08EB382D69 * (v234 ^ (v234 >> 47));
        v236 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v236.i16[0] = vaddlv_u8(v236);
        if (v236.u32[0] > 1uLL)
        {
          v237 = v235;
          if ((void *)v235 >= __p[1])
            v237 = v235 % (unint64_t)__p[1];
        }
        else
        {
          v237 = v235 & ((unint64_t)__p[1] - 1);
        }
        v238 = (_QWORD *)*((_QWORD *)__p[0] + v237);
        if (v238)
        {
          v239 = (_QWORD *)*v238;
          if (v239)
          {
            if (v236.u32[0] < 2uLL)
            {
              while (1)
              {
                v241 = v239[1];
                if (v241 == v235)
                {
                  if (v239[2] == (_QWORD)v488)
                    goto LABEL_484;
                }
                else if ((v241 & ((uint64_t)__p[1] - 1)) != v237)
                {
                  goto LABEL_358;
                }
                v239 = (_QWORD *)*v239;
                if (!v239)
                  goto LABEL_358;
              }
            }
            do
            {
              v240 = v239[1];
              if (v240 == v235)
              {
                if (v239[2] == (_QWORD)v488)
                {
LABEL_484:
                  v242 = (char *)v239[4];
                  goto LABEL_475;
                }
              }
              else
              {
                if ((void *)v240 >= __p[1])
                  v240 %= (unint64_t)__p[1];
                if (v240 != v237)
                  break;
              }
              v239 = (_QWORD *)*v239;
            }
            while (v239);
          }
        }
      }
LABEL_358:
      v242 = (char *)operator new();
      v243 = *((_QWORD *)&v488 + 1);
      *(_QWORD *)v242 = v488;
      *((_QWORD *)v242 + 1) = v243;
      if (v243)
      {
        v244 = (unint64_t *)(v243 + 8);
        do
          v245 = __ldxr(v244);
        while (__stxr(v245 + 1, v244));
      }
      v247 = (_QWORD *)operator new();
      *v247 = 0;
      v247[1] = 0;
      v247[2] = 0;
      {
        v316 = operator new();
        *(_QWORD *)(v316 + 16) = 0xA3D02C1100000005;
        *(_QWORD *)(v316 + 24) = "GeoGL";
        *(_OWORD *)(v316 + 32) = xmmword_19FFB2DE0;
        *(_QWORD *)v316 = &off_1E42B5668;
        *(_QWORD *)(v316 + 8) = "GeoGL";
        *(_OWORD *)(v316 + 72) = 0u;
        *(_OWORD *)(v316 + 88) = 0u;
        *(_OWORD *)(v316 + 104) = 0u;
        *(_OWORD *)(v316 + 120) = 0u;
        *(_OWORD *)(v316 + 136) = 0u;
        *(_OWORD *)(v316 + 152) = 0u;
        *(_OWORD *)(v316 + 168) = 0u;
        *(_OWORD *)(v316 + 184) = 0u;
        *(_OWORD *)(v316 + 200) = 0u;
        *(_OWORD *)(v316 + 216) = 0u;
        *(_OWORD *)(v316 + 232) = 0u;
        *(_QWORD *)(v316 + 248) = 0;
        *(_OWORD *)(v316 + 56) = 0u;
        v317 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v316 + 56), 0);
        if ((_DWORD)v317)
          geo::read_write_lock::logFailure(v317, (uint64_t)"initialization", v318);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v316 + 48) = zone;
        malloc_set_zone_name(zone, "GeoGL");
        *(_QWORD *)(v316 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        ggl::Allocator::instance(void)::alloc = v316;
      }
      v247[3] = ggl::Allocator::instance(void)::alloc;
      ggl::MeshVendor<ggl::PolygonShadowedStroke::ShadowPathMesh>::_allocateNewMesh((uint64_t)v247);
      *((_QWORD *)v242 + 2) = v247;
      v249 = (_QWORD *)operator new();
      *v249 = 0;
      v249[1] = 0;
      v249[2] = 0;
      {
        v246 = operator new();
        *(_QWORD *)(v246 + 16) = 0xA3D02C1100000005;
        *(_QWORD *)(v246 + 24) = "GeoGL";
        *(_OWORD *)(v246 + 32) = xmmword_19FFB2DE0;
        *(_QWORD *)v246 = &off_1E42B5668;
        *(_QWORD *)(v246 + 8) = "GeoGL";
        *(_OWORD *)(v246 + 72) = 0u;
        *(_OWORD *)(v246 + 88) = 0u;
        *(_OWORD *)(v246 + 104) = 0u;
        *(_OWORD *)(v246 + 120) = 0u;
        *(_OWORD *)(v246 + 136) = 0u;
        *(_OWORD *)(v246 + 152) = 0u;
        *(_OWORD *)(v246 + 168) = 0u;
        *(_OWORD *)(v246 + 184) = 0u;
        *(_OWORD *)(v246 + 200) = 0u;
        *(_OWORD *)(v246 + 216) = 0u;
        *(_OWORD *)(v246 + 232) = 0u;
        *(_QWORD *)(v246 + 248) = 0;
        *(_OWORD *)(v246 + 56) = 0u;
        v320 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v246 + 56), 0);
        if ((_DWORD)v320)
          geo::read_write_lock::logFailure(v320, (uint64_t)"initialization", v321);
        v322 = malloc_create_zone(0, 0);
        *(_QWORD *)(v246 + 48) = v322;
        malloc_set_zone_name(v322, "GeoGL");
        *(_QWORD *)(v246 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        ggl::Allocator::instance(void)::alloc = v246;
      }
      v249[3] = ggl::Allocator::instance(void)::alloc;
      ggl::MeshVendor<ggl::Glow::MeshMesh>::_allocateNewMesh((uint64_t)v249);
      *((_QWORD *)v242 + 3) = v249;
      v251 = v452[1];
      if (v452[1] < v453)
      {
        *(_QWORD *)v452[1] = v242;
        v252 = v251 + 1;
        goto LABEL_390;
      }
      v246 = (unint64_t)v452[0];
      v253 = (char *)v452[1] - (char *)v452[0];
      v254 = ((char *)v452[1] - (char *)v452[0]) >> 3;
      v255 = v254 + 1;
      if ((unint64_t)(v254 + 1) >> 61)
        abort();
      v256 = v453 - (char *)v452[0];
      if ((v453 - (char *)v452[0]) >> 2 > v255)
        v255 = v256 >> 2;
      if ((unint64_t)v256 >= 0x7FFFFFFFFFFFFFF8)
        v257 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v257 = v255;
      if (v257)
      {
        if (v257 >> 61)
          goto LABEL_685;
        v258 = (char *)operator new(8 * v257);
      }
      else
      {
        v258 = 0;
      }
      v259 = &v258[8 * v254];
      *(_QWORD *)v259 = v242;
      v252 = v259 + 8;
      if (v251 != (_QWORD *)v246)
      {
        v260 = (unint64_t)v251 - v246 - 8;
        if (v260 > 0x77
          && ((char *)v251 - (v260 & 0xFFFFFFFFFFFFFFF8) - 8 >= v259
           || &v258[v253 - (v260 & 0xFFFFFFFFFFFFFFF8) - 8] >= (char *)v251))
        {
          v306 = 0;
          v307 = (v260 >> 3) + 1;
          v261 = &v251[-(v307 & 0x3FFFFFFFFFFFFFFCLL)];
          v308 = v307 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v309 = &v251[v306];
            v311 = *(_OWORD *)&v251[v306 - 4];
            v310 = *(_OWORD *)&v251[v306 - 2];
            v312 = &v259[v306 * 8];
            *((_OWORD *)v309 - 2) = 0uLL;
            *((_OWORD *)v309 - 1) = 0uLL;
            *((_OWORD *)v312 - 2) = v311;
            *((_OWORD *)v312 - 1) = v310;
            v306 -= 4;
            v308 -= 4;
          }
          while (v308);
          v259 -= 8 * (v307 & 0x3FFFFFFFFFFFFFFCLL);
          if (v307 == (v307 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_382;
        }
        else
        {
          v261 = v251;
        }
        do
        {
          v262 = *--v261;
          *v261 = 0;
          *((_QWORD *)v259 - 1) = v262;
          v259 -= 8;
        }
        while (v261 != (_QWORD *)v246);
        v246 = (unint64_t)v452[0];
        v251 = v452[1];
LABEL_382:
        v452[0] = v259;
        v452[1] = v252;
        v453 = &v258[8 * v257];
        if (v251 != (_QWORD *)v246)
        {
          do
          {
            v264 = (md::CoastlineGroup *)*--v251;
            v263 = v264;
            *v251 = 0;
            if (v264)
            {
              md::CoastlineGroup::~CoastlineGroup(v263);
              MEMORY[0x1A1AF4E00]();
            }
          }
          while (v251 != (_QWORD *)v246);
          v251 = (_QWORD *)v246;
        }
        if (v251)
          goto LABEL_389;
        goto LABEL_390;
      }
      v452[0] = v259;
      v452[1] = v259 + 8;
      v453 = &v258[8 * v257];
      if (v251)
LABEL_389:
        operator delete(v251);
LABEL_390:
      v452[1] = v252;
      v265 = v488;
      v489 = v488;
      if (*((_QWORD *)&v488 + 1))
      {
        v266 = (unint64_t *)(*((_QWORD *)&v488 + 1) + 8);
        do
          v267 = __ldxr(v266);
        while (__stxr(v267 + 1, v266));
      }
      v490 = v242;
      v268 = 0x9DDFEA08EB382D69 * (((8 * v265) + 8) ^ DWORD1(v265));
      v269 = 0x9DDFEA08EB382D69 * (DWORD1(v265) ^ (v268 >> 47) ^ v268);
      v270 = v269 ^ (v269 >> 47);
      v271 = 0x9DDFEA08EB382D69 * v270;
      v272 = (unint64_t)__p[1];
      if (!__p[1])
        goto LABEL_413;
      v273 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v273.i16[0] = vaddlv_u8(v273);
      if (v273.u32[0] > 1uLL)
      {
        v246 = 0x9DDFEA08EB382D69 * v270;
        if ((void *)v271 >= __p[1])
          v246 = v271 % (unint64_t)__p[1];
      }
      else
      {
        v246 = v271 & ((unint64_t)__p[1] - 1);
      }
      v274 = (_QWORD *)*((_QWORD *)__p[0] + v246);
      if (!v274 || (v275 = (_QWORD *)*v274) == 0)
      {
LABEL_413:
        v278 = operator new(0x28uLL);
        *(_QWORD *)&v485 = v278;
        *((_QWORD *)&v485 + 1) = v461;
        *v278 = 0;
        v278[1] = v271;
        *((_OWORD *)v278 + 1) = v489;
        v489 = 0uLL;
        v278[4] = v242;
        LOBYTE(v486) = 1;
        v279 = (float)((unint64_t)v461[1] + 1);
        if (v272 && (float)(*(float *)&v462 * (float)v272) >= v279)
        {
LABEL_465:
          v300 = __p[0];
          v301 = (_QWORD *)*((_QWORD *)__p[0] + v246);
          if (v301)
          {
            *v278 = *v301;
          }
          else
          {
            *v278 = v461[0];
            v461[0] = v278;
            v300[v246] = v461;
            if (!*v278)
            {
LABEL_474:
              ++v461[1];
              goto LABEL_475;
            }
            v302 = *(_QWORD *)(*v278 + 8);
            if ((v272 & (v272 - 1)) != 0)
            {
              if (v302 >= v272)
                v302 %= v272;
            }
            else
            {
              v302 &= v272 - 1;
            }
            v301 = (char *)__p[0] + 8 * v302;
          }
          *v301 = v278;
          goto LABEL_474;
        }
        v280 = (v272 & (v272 - 1)) != 0;
        if (v272 < 3)
          v280 = 1;
        v281 = v280 | (2 * v272);
        v282 = vcvtps_u32_f32(v279 / *(float *)&v462);
        if (v281 <= v282)
          prime = v282;
        else
          prime = v281;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v272 = (unint64_t)__p[1];
        }
        if (prime <= v272)
        {
          if (prime >= v272)
            goto LABEL_452;
          v294 = vcvtps_u32_f32((float)(unint64_t)v461[1] / *(float *)&v462);
          if (v272 < 3
            || (v295 = (uint8x8_t)vcnt_s8((int8x8_t)v272), v295.i16[0] = vaddlv_u8(v295), v295.u32[0] > 1uLL))
          {
            v294 = std::__next_prime(v294);
          }
          else
          {
            v296 = 1 << -(char)__clz(v294 - 1);
            if (v294 >= 2)
              v294 = v296;
          }
          if (prime <= v294)
            prime = v294;
          if (prime >= v272)
          {
            v272 = (unint64_t)__p[1];
LABEL_452:
            if ((v272 & (v272 - 1)) != 0)
            {
              if (v271 >= v272)
                v246 = v271 % v272;
              else
                v246 = v271;
            }
            else
            {
              v246 = (v272 - 1) & v271;
            }
            goto LABEL_465;
          }
          if (!prime)
          {
            v315 = __p[0];
            __p[0] = 0;
            if (v315)
              operator delete(v315);
            v272 = 0;
            __p[1] = 0;
            goto LABEL_452;
          }
        }
        if (!(prime >> 61))
        {
          v284 = operator new(8 * prime);
          v285 = __p[0];
          __p[0] = v284;
          if (v285)
            operator delete(v285);
          v286 = 0;
          __p[1] = (void *)prime;
          do
            *((_QWORD *)__p[0] + v286++) = 0;
          while (prime != v286);
          v287 = (_QWORD **)v461[0];
          if (!v461[0])
            goto LABEL_451;
          v288 = *((_QWORD *)v461[0] + 1);
          v289 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v290 = v288 & v289;
            *((_QWORD *)__p[0] + v290) = v461;
            for (i = *v287; *v287; i = *v287)
            {
              v292 = i[1] & v289;
              if (v292 == v290)
              {
                v287 = (_QWORD **)i;
              }
              else if (*((_QWORD *)__p[0] + v292))
              {
                *v287 = (_QWORD *)*i;
                v293 = 8 * v292;
                *i = **(_QWORD **)((char *)__p[0] + v293);
                **(_QWORD **)((char *)__p[0] + v293) = i;
              }
              else
              {
                *((_QWORD *)__p[0] + v292) = v287;
                v287 = (_QWORD **)i;
                v290 = v292;
              }
            }
LABEL_451:
            v272 = prime;
            goto LABEL_452;
          }
          if (v288 >= prime)
            v288 %= prime;
          *((_QWORD *)__p[0] + v288) = v461;
          v297 = *v287;
          if (!*v287)
            goto LABEL_451;
          while (1)
          {
            v299 = v297[1];
            if (v299 >= prime)
              v299 %= prime;
            if (v299 != v288)
            {
              if (!*((_QWORD *)__p[0] + v299))
              {
                *((_QWORD *)__p[0] + v299) = v287;
                goto LABEL_456;
              }
              *v287 = (_QWORD *)*v297;
              v298 = 8 * v299;
              *v297 = **(_QWORD **)((char *)__p[0] + v298);
              **(_QWORD **)((char *)__p[0] + v298) = v297;
              v297 = v287;
            }
            v299 = v288;
LABEL_456:
            v287 = (_QWORD **)v297;
            v297 = (_QWORD *)*v297;
            v288 = v299;
            if (!v297)
              goto LABEL_451;
          }
        }
LABEL_685:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      if (v273.u32[0] < 2uLL)
      {
        while (1)
        {
          v277 = v275[1];
          if (v277 == v271)
          {
            if (v275[2] == (_QWORD)v265)
              goto LABEL_485;
          }
          else if ((v277 & ((uint64_t)__p[1] - 1)) != v246)
          {
            goto LABEL_413;
          }
          v275 = (_QWORD *)*v275;
          if (!v275)
            goto LABEL_413;
        }
      }
      while (1)
      {
        v276 = v275[1];
        if (v276 == v271)
          break;
        if ((void *)v276 >= __p[1])
          v276 %= (unint64_t)__p[1];
        if (v276 != v246)
          goto LABEL_413;
LABEL_403:
        v275 = (_QWORD *)*v275;
        if (!v275)
          goto LABEL_413;
      }
      if (v275[2] != (_QWORD)v265)
        goto LABEL_403;
LABEL_485:
      if (*((_QWORD *)&v265 + 1))
      {
        v313 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
        do
          v314 = __ldaxr(v313);
        while (__stlxr(v314 - 1, v313));
        if (!v314)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v265 + 1) + 16))(*((_QWORD *)&v265 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v265 + 1));
        }
      }
LABEL_475:
      md::CoastlineGroup::addCoastlineFeature((uint64_t)v242, v229);
      v303 = (std::__shared_weak_count *)*((_QWORD *)&v488 + 1);
      if (*((_QWORD *)&v488 + 1))
      {
        v304 = (unint64_t *)(*((_QWORD *)&v488 + 1) + 8);
        do
          v305 = __ldaxr(v304);
        while (__stlxr(v305 - 1, v304));
        if (!v305)
        {
          ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
          std::__shared_weak_count::__release_weak(v303);
        }
      }
LABEL_330:
      if (++v227 != v225)
        continue;
      break;
    }
    v323 = v461[0];
    if (v461[0])
    {
      do
      {
        v327 = v323;
        v323 = (_QWORD *)*v323;
        v328 = (std::__shared_weak_count *)v327[3];
        if (v328)
        {
          v329 = (unint64_t *)&v328->__shared_owners_;
          do
            v330 = __ldaxr(v329);
          while (__stlxr(v330 - 1, v329));
          if (!v330)
          {
            ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
            std::__shared_weak_count::__release_weak(v328);
          }
        }
        operator delete(v327);
      }
      while (v323);
    }
    v324 = __p[0];
    __p[0] = 0;
    if (v324)
      operator delete(v324);
    v221 = v435;
    v220 = v437;
LABEL_511:
    v202 = v438;
    if (v221)
    {
      v325 = (unint64_t *)&v221->__shared_owners_;
      do
        v326 = __ldaxr(v325);
      while (__stlxr(v326 - 1, v325));
      if (!v326)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v221->__on_zero_shared)(v221, v226);
        std::__shared_weak_count::__release_weak(v221);
      }
    }
    v220 += 2;
    if (v220 != v433)
      continue;
    break;
  }
LABEL_522:
  (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v202 + 24) + 32))(__p, *(_QWORD *)(v202 + 24), *(unsigned __int16 *)(v202 + 584));
  v331 = HIDWORD(__p[0]);
  if (a5[1] == *a5)
  {
    v485 = 0uLL;
  }
  else
  {
    v332 = *(_QWORD *)*a5;
    v334 = *(_QWORD *)(v332 + 144);
    v333 = *(_QWORD *)(v332 + 152);
    *(_QWORD *)&v485 = v334;
    *((_QWORD *)&v485 + 1) = v333;
    if (v333)
    {
      v335 = (unint64_t *)(v333 + 8);
      do
        v336 = __ldxr(v335);
      while (__stxr(v336 + 1, v335));
    }
  }
  v337 = (char *)operator new(0x360uLL);
  *((_QWORD *)v337 + 1) = 0;
  *((_QWORD *)v337 + 2) = 0;
  *(_QWORD *)v337 = &off_1E42DB4A8;
  __p[0] = 0;
  __p[1] = 0;
  v461[0] = 0;
  v338 = *a5;
  v339 = (_QWORD *)a5[1];
  v340 = (uint64_t)v339 - *a5;
  if (v339 == (_QWORD *)*a5)
  {
LABEL_545:
    v348 = 0;
    goto LABEL_546;
  }
  if (v340 < 0)
    abort();
  v341 = operator new((size_t)v339 - *a5);
  v342 = v341;
  __p[0] = v341;
  v461[0] = &v341[2 * (v340 >> 4)];
  v343 = v341;
  do
  {
    *v343 = *(_QWORD *)v338;
    v344 = *(_QWORD *)(v338 + 8);
    v343[1] = v344;
    if (v344)
    {
      v345 = (unint64_t *)(v344 + 8);
      do
        v346 = __ldxr(v345);
      while (__stxr(v346 + 1, v345));
    }
    v338 += 16;
    v343 += 2;
  }
  while ((_QWORD *)v338 != v339);
  __p[1] = v343;
  v347 = (char *)v343 - (char *)v341;
  if (v343 == v342)
  {
    v340 = 0;
    goto LABEL_545;
  }
  if ((v347 & 0x8000000000000000) != 0)
    abort();
  v340 = (uint64_t)operator new(v347);
  v348 = (_QWORD *)v340;
  do
  {
    v349 = v342[1];
    *v348 = *v342;
    v348[1] = v349;
    if (v349)
    {
      v350 = (unint64_t *)(v349 + 8);
      do
        v351 = __ldxr(v350);
      while (__stxr(v351 + 1, v350));
    }
    v342 += 2;
    v348 += 2;
  }
  while (v342 != v343);
LABEL_546:
  md::MapTileData::MapTileData((uint64_t)(v337 + 24), a3, a7, (uint64_t)&v485, 1);
  *((_QWORD *)v337 + 3) = off_1E42968B0;
  *((_QWORD *)v337 + 82) = &unk_1E42968F8;
  *((_QWORD *)v337 + 93) = 0;
  *((_QWORD *)v337 + 95) = 0;
  *((_QWORD *)v337 + 94) = 0;
  v352 = (uint64_t)v348 - v340;
  if (v348 == (_QWORD *)v340)
  {
    *((_DWORD *)v337 + 192) = v331;
    if (!v340)
      goto LABEL_564;
    goto LABEL_563;
  }
  if (v352 < 0)
    abort();
  v353 = operator new((size_t)v348 - v340);
  *((_QWORD *)v337 + 93) = v353;
  *((_QWORD *)v337 + 94) = v353;
  *((_QWORD *)v337 + 95) = &v353[2 * (v352 >> 4)];
  v354 = (_QWORD *)v340;
  do
  {
    v355 = v354[1];
    *v353 = *v354;
    v353[1] = v355;
    if (v355)
    {
      v356 = (unint64_t *)(v355 + 8);
      do
        v357 = __ldxr(v356);
      while (__stxr(v357 + 1, v356));
    }
    v354 += 2;
    v353 += 2;
  }
  while (v354 != v348);
  *((_QWORD *)v337 + 94) = v353;
  *((_DWORD *)v337 + 192) = v331;
  if (v340)
  {
    do
    {
      v358 = (std::__shared_weak_count *)*(v348 - 1);
      if (v358)
      {
        v359 = (unint64_t *)&v358->__shared_owners_;
        do
          v360 = __ldaxr(v359);
        while (__stlxr(v360 - 1, v359));
        if (!v360)
        {
          ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
          std::__shared_weak_count::__release_weak(v358);
        }
      }
      v348 -= 2;
    }
    while (v348 != (_QWORD *)v340);
LABEL_563:
    operator delete((void *)v340);
  }
LABEL_564:
  *((_QWORD *)v337 + 3) = &off_1E42909D0;
  *((_QWORD *)v337 + 82) = &unk_1E4290A18;
  *((_QWORD *)v337 + 97) = 0;
  *((_QWORD *)v337 + 99) = 0;
  *((_QWORD *)v337 + 98) = 0;
  v361 = (id *)v457;
  v362 = v458;
  v363 = v458 - (_BYTE *)v457;
  if (v458 != v457)
  {
    v364 = 0xAAAAAAAAAAAAAAABLL * (v363 >> 3);
    if (v364 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v365 = operator new(v363);
    *((_QWORD *)v337 + 97) = v365;
    *((_QWORD *)v337 + 98) = v365;
    *((_QWORD *)v337 + 99) = &v365[3 * v364];
    do
    {
      *v365 = &off_1E42B4B50;
      v365[1] = 0;
      v366 = v361[1];
      v367 = (void *)v365[1];
      v365[1] = v366;

      v361 += 3;
      v365 += 3;
    }
    while (v361 != (id *)v362);
    *((_QWORD *)v337 + 98) = v365;
  }
  *((_OWORD *)v337 + 50) = *(_OWORD *)v452;
  *((_QWORD *)v337 + 102) = v453;
  v452[1] = 0;
  v453 = 0;
  v452[0] = 0;
  v368 = (uint64_t *)(v337 + 824);
  *(_OWORD *)(v337 + 824) = 0u;
  *(_OWORD *)(v337 + 840) = 0u;
  *((_DWORD *)v337 + 214) = v456;
  v369 = __n[1];
  if (__n[1] == 1)
  {
    v369 = 2;
    goto LABEL_571;
  }
  if ((__n[1] & (__n[1] - 1)) != 0)
  {
    v369 = std::__next_prime(__n[1]);
    v400 = *(int8x8_t *)(v337 + 832);
    v401 = v369 >= *(_QWORD *)&v400;
    if (v369 > *(_QWORD *)&v400)
      goto LABEL_571;
  }
  else
  {
    v400 = 0;
    v401 = 1;
    if (__n[1])
      goto LABEL_571;
  }
  if (!v401)
  {
    v417 = vcvtps_u32_f32((float)*((unint64_t *)v337 + 106) / *((float *)v337 + 214));
    if (*(_QWORD *)&v400 < 3uLL || (v418 = (uint8x8_t)vcnt_s8(v400), v418.i16[0] = vaddlv_u8(v418), v418.u32[0] > 1uLL))
    {
      v417 = std::__next_prime(v417);
    }
    else
    {
      v419 = 1 << -(char)__clz(v417 - 1);
      if (v417 >= 2)
        v417 = v419;
    }
    if (v369 <= v417)
      v369 = v417;
    if (v369 < *(_QWORD *)&v400)
LABEL_571:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)(v337 + 824), v369);
  }
  v370 = (uint64_t **)v455;
  if ((_QWORD)v455)
  {
    v371 = v337 + 840;
    do
    {
      v372 = (unint64_t)v370[2];
      v373 = *((_QWORD *)v337 + 104);
      if (v373)
      {
        v374 = (uint8x8_t)vcnt_s8((int8x8_t)v373);
        v374.i16[0] = vaddlv_u8(v374);
        if (v374.u32[0] > 1uLL)
        {
          v338 = (unint64_t)v370[2];
          if (v372 >= v373)
            v338 = v372 % v373;
        }
        else
        {
          v338 = (v373 - 1) & v372;
        }
        v375 = *(_QWORD **)(*v368 + 8 * v338);
        if (v375)
        {
          v376 = (_QWORD *)*v375;
          if (v376)
          {
            if (v374.u32[0] < 2uLL)
            {
              while (1)
              {
                v378 = v376[1];
                if (v378 == v372)
                {
                  if (v376[2] == v372)
                    goto LABEL_631;
                }
                else if ((v378 & (v373 - 1)) != v338)
                {
                  goto LABEL_594;
                }
                v376 = (_QWORD *)*v376;
                if (!v376)
                  goto LABEL_594;
              }
            }
            do
            {
              v377 = v376[1];
              if (v377 == v372)
              {
                if (v376[2] == v372)
                  goto LABEL_631;
              }
              else
              {
                if (v377 >= v373)
                  v377 %= v373;
                if (v377 != v338)
                  break;
              }
              v376 = (_QWORD *)*v376;
            }
            while (v376);
          }
        }
      }
LABEL_594:
      v379 = operator new(0x30uLL);
      *v379 = 0;
      v379[1] = v372;
      v379[2] = v370[2];
      v379[3] = &off_1E42B4B50;
      v379[4] = 0;
      v380 = v370[4];
      v381 = (void *)v379[4];
      v379[4] = v380;

      v382 = (float)(unint64_t)(*((_QWORD *)v337 + 106) + 1);
      v383 = *((float *)v337 + 214);
      if ((((float)(v383 * (float)v373) >= v382) & ~(v373 == 0)) == 0)
      {
        v384 = (v373 & (v373 - 1)) != 0;
        if (v373 < 3)
          v384 = 1;
        v385 = v384 | (2 * v373);
        v386 = vcvtps_u32_f32(v382 / v383);
        if (v385 <= v386)
          v387 = v386;
        else
          v387 = v385;
        if (v387 == 1)
        {
          v387 = 2;
        }
        else if ((v387 & (v387 - 1)) != 0)
        {
          v387 = std::__next_prime(v387);
        }
        v388 = *(int8x8_t *)(v337 + 832);
        if (v387 > *(_QWORD *)&v388)
          goto LABEL_605;
        if (v387 < *(_QWORD *)&v388)
        {
          v389 = vcvtps_u32_f32((float)*((unint64_t *)v337 + 106) / *((float *)v337 + 214));
          if (*(_QWORD *)&v388 < 3uLL
            || (v390 = (uint8x8_t)vcnt_s8(v388), v390.i16[0] = vaddlv_u8(v390), v390.u32[0] > 1uLL))
          {
            v389 = std::__next_prime(v389);
          }
          else
          {
            v391 = 1 << -(char)__clz(v389 - 1);
            if (v389 >= 2)
              v389 = v391;
          }
          if (v387 <= v389)
            v387 = v389;
          if (v387 < *(_QWORD *)&v388)
LABEL_605:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)(v337 + 824), v387);
        }
        v373 = *((_QWORD *)v337 + 104);
        if ((v373 & (v373 - 1)) != 0)
        {
          if (v372 >= v373)
            v338 = v372 % v373;
          else
            v338 = v372;
        }
        else
        {
          v338 = (v373 - 1) & v372;
        }
      }
      v392 = *v368;
      v393 = *(_QWORD **)(*v368 + 8 * v338);
      if (v393)
      {
        *v379 = *v393;
      }
      else
      {
        *v379 = *v371;
        *v371 = v379;
        *(_QWORD *)(v392 + 8 * v338) = v371;
        if (!*v379)
          goto LABEL_630;
        v394 = *(_QWORD *)(*v379 + 8);
        if ((v373 & (v373 - 1)) != 0)
        {
          if (v394 >= v373)
            v394 %= v373;
        }
        else
        {
          v394 &= v373 - 1;
        }
        v393 = (_QWORD *)(*v368 + 8 * v394);
      }
      *v393 = v379;
LABEL_630:
      ++*((_QWORD *)v337 + 106);
LABEL_631:
      v370 = (uint64_t **)*v370;
    }
    while (v370);
  }
  v395 = (char *)__p[0];
  if (__p[0])
  {
    v396 = (char *)__p[1];
    if (__p[1] != __p[0])
    {
      do
      {
        v397 = (std::__shared_weak_count *)*((_QWORD *)v396 - 1);
        if (v397)
        {
          v398 = (unint64_t *)&v397->__shared_owners_;
          do
            v399 = __ldaxr(v398);
          while (__stlxr(v399 - 1, v398));
          if (!v399)
          {
            ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
            std::__shared_weak_count::__release_weak(v397);
          }
        }
        v396 -= 16;
      }
      while (v396 != v395);
      v395 = (char *)__p[0];
    }
    operator delete(v395);
  }
  *v420 = v337 + 24;
  v420[1] = v337;
  v402 = (std::__shared_weak_count *)*((_QWORD *)&v485 + 1);
  if (*((_QWORD *)&v485 + 1))
  {
    v403 = (unint64_t *)(*((_QWORD *)&v485 + 1) + 8);
    do
      v404 = __ldaxr(v403);
    while (__stlxr(v404 - 1, v403));
    if (!v404)
    {
      ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
      std::__shared_weak_count::__release_weak(v402);
    }
  }
  if (v449)
  {
    v450 = v449;
    operator delete(v449);
  }
  geo::Pool<geo::Triangulator<float,unsigned short>::Node>::disposeElements((uint64_t)&v440);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v441[0]);
  v405 = v452[0];
  if (v452[0])
  {
    v406 = v452[1];
    if (v452[1] != v452[0])
    {
      do
      {
        v408 = (md::CoastlineGroup *)*--v406;
        v407 = v408;
        *v406 = 0;
        if (v408)
        {
          md::CoastlineGroup::~CoastlineGroup(v407);
          MEMORY[0x1A1AF4E00]();
        }
      }
      while (v406 != v405);
      v405 = v452[0];
    }
    operator delete(v405);
  }
  v409 = (void *)v455;
  if ((_QWORD)v455)
  {
    do
    {
      v410 = *(void **)v409;
      *((_QWORD *)v409 + 3) = &off_1E42B4B50;

      operator delete(v409);
      v409 = v410;
    }
    while (v410);
  }
  v411 = (void *)__n[0];
  __n[0] = 0;
  if (v411)
    operator delete(v411);
  v412 = (char *)v457;
  if (v457)
  {
    v413 = v457;
    if (v458 != v457)
    {
      v414 = v458 - 24;
      v415 = v458 - 24;
      do
      {
        v416 = *(void (***)(char *))v415;
        v415 -= 24;
        (*v416)(v414);
        v29 = v414 == v412;
        v414 = v415;
      }
      while (!v29);
      v413 = v457;
    }
    v458 = v412;
    operator delete(v413);
  }
}

void sub_19FB0317C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,md::MapTileData *a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  md::Triangulator<float>::~Triangulator((uint64_t)&a31);
  std::vector<std::unique_ptr<md::CoastlineGroup>>::~vector[abi:nn180100](&a45);
  std::unordered_map<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~unordered_map[abi:nn180100]((uint64_t)&a49);
  std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](&a54);
  _Unwind_Resume(a1);
}

uint64_t md::Triangulator<float>::~Triangulator(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  geo::Pool<geo::Triangulator<float,unsigned short>::Node>::disposeElements(a1);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void sub_19FB0390C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unique_ptr<md::CoastlineGroup>>::~vector[abi:nn180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  md::CoastlineGroup *v5;
  md::CoastlineGroup *v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (md::CoastlineGroup *)*--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          md::CoastlineGroup::~CoastlineGroup(v5);
          MEMORY[0x1A1AF4E00]();
        }
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::unordered_map<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *(void **)v2;
      *((_QWORD *)v2 + 3) = &off_1E42B4B50;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4B50;

  return a1;
}

void geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4B50;

  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::PolygonTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB4A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::PolygonTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB4A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::PolygonTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::unordered_map<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::CoastlineGroup *>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[3];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

char *std::vector<geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__push_back_slow_path<geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;
  id *v12;
  id *v13;
  void *v14;
  id *v15;
  id *v16;
  id *v17;
  void (**v18)(id *);
  BOOL v19;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v9 = &v7[24 * v6];
  v8 = &v7[24 * v2];
  *(_QWORD *)v8 = &off_1E42B4B50;
  v10 = v8 + 24;
  *((_QWORD *)v8 + 1) = 0;
  objc_storeStrong((id *)v8 + 1, *(id *)(a2 + 8));
  v11 = *(void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;

  v13 = (id *)*a1;
  v12 = (id *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12)
      return v10;
    goto LABEL_18;
  }
  do
  {
    *((_QWORD *)v8 - 3) = &off_1E42B4B50;
    v8 -= 24;
    *((_QWORD *)v8 + 1) = 0;
    objc_storeStrong((id *)v8 + 1, *(v12 - 2));
    v14 = *(v12 - 2);
    *(v12 - 2) = 0;

    v12 -= 3;
  }
  while (v12 != v13);
  v12 = (id *)*a1;
  v15 = (id *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v15 != v12)
  {
    v16 = v15 - 3;
    v17 = v15 - 3;
    do
    {
      v18 = (void (**)(id *))*v17;
      v17 -= 3;
      (*v18)(v16);
      v19 = v16 == v12;
      v16 = v17;
    }
    while (!v19);
  }
  if (v12)
LABEL_18:
    operator delete(v12);
  return v10;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = &off_1E42B4B50;
  v10[4] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v24)
  {
    *v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v5) = v13;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FB03FD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<`anonymous namespace'::PolygonKey,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 48;
        *((_QWORD *)v3 - 3) = &off_1E42B4B50;

        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      *(_QWORD *)(v2 + 24) = &off_1E42B4B50;

    }
    operator delete((void *)v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::MeshSetStorage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MeshSetStorage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::VertexDataTyped<ggl::FlyoverMorphBorder::Vertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::FlyoverMorphBorder::Vertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::FlyoverMorphBorder::Vertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverMorphBorder::MorphBorderMesh::~MorphBorderMesh(ggl::FlyoverMorphBorder::MorphBorderMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::FlyoverMorphBorder::MorphBorderMesh::~MorphBorderMesh(ggl::FlyoverMorphBorder::MorphBorderMesh *this)
{
  ggl::Mesh::~Mesh((ggl::FlyoverMorphBorder::MorphBorderMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::FlyoverMorphBorder::MorphBorderMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverMorphBorder::MorphBorderPipelineState::~MorphBorderPipelineState(ggl::FlyoverMorphBorder::MorphBorderPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::FlyoverMorphBorder::MorphBorderPipelineState::MorphBorderPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _OWORD *v17;
  ggl::FlyoverMorphBorderShader *v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[28];

  if ((v5 & 1) == 0)
  {
    v17 = a4;
    v25 = a2;
    v26 = a3;
    a2 = v25;
    a3 = v26;
    a4 = v17;
    if ((_DWORD)v18)
    {
      if ((v19 & 1) == 0)
      {
        if ((_DWORD)v18)
        {
          if ((v22 & 1) == 0
          {
            if ((v24 & 1) == 0
            {
              ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverMorphBorder::vertexReflection;
            }
            ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::attributesReflection(void)::r;
            unk_1EE5762A8 = 1;
          }
          ggl::FlyoverMorphBorder::MorphBorderPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE575FE8 = &ggl::FlyoverMorphBorder::pipelineDataMorphBorderPipelineDeviceStructs(void)::ref;
          qword_1EE575FF0 = 0;
          if ((v23 & 1) == 0
          {
            ggl::FlyoverMorphBorder::pipelineDataMorphBorderPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
            unk_1EE576020 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
            qword_1EE576028 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
            unk_1EE576030 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
            qword_1EE576038 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
            unk_1EE576040 = ggl::FlyoverMorph::Morph::reflection(void)::reflection;
          }
          qword_1EE575FF8 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineDataMorphBorderPipelineConstantStructs(void)::ref;
          unk_1EE576000 = xmmword_19FFB5830;
        }
      }
      ggl::FlyoverMorphBorder::MorphBorderPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverMorphBorder::MorphBorderPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverMorphBorderShader::typedReflection(v18);
      qword_1EE589810 = (uint64_t)&ggl::FlyoverMorphBorderShader::typedReflection(void)::ref;
      if ((v20 & 1) == 0
      {
        ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE589870 = 0;
        qword_1EE589878 = (uint64_t)"";
        dword_1EE589880 = 0;
        qword_1EE589888 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineAttributeBinding_0(void)::attr;
        unk_1EE589890 = 5;
      }
      qword_1EE589818 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineAttributeStructBinding(void)::attr;
      unk_1EE589820 = 1;
      qword_1EE589828 = 0;
      unk_1EE589830 = 5;
      qword_1EE589838 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineDeviceStructBinding(void)::ref;
      unk_1EE589840 = 0;
      if ((v21 & 1) == 0
      {
        ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE5898B0 = 0;
        qword_1EE5898B8 = (uint64_t)"sharedConstants";
        dword_1EE5898C0 = 3;
        qword_1EE5898C8 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineConstantSharedConstantsBinding(void)::reflection;
        *(_OWORD *)algn_1EE5898D0 = xmmword_19FFB3030;
        qword_1EE5898E0 = 1;
        unk_1EE5898E8 = "transform";
        dword_1EE5898F0 = 3;
        qword_1EE5898F8 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineConstantTransformBinding(void)::reflection;
        unk_1EE589900 = vdupq_n_s64(2uLL);
        qword_1EE589910 = 2;
        unk_1EE589918 = "clip";
        dword_1EE589920 = 3;
        qword_1EE589928 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineConstantClipBinding(void)::reflection;
        *(_OWORD *)algn_1EE589930 = xmmword_19FFB3040;
        qword_1EE589940 = 3;
        unk_1EE589948 = "material";
        dword_1EE589950 = 3;
        qword_1EE589958 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineConstantMaterialBinding(void)::reflection;
        unk_1EE589960 = xmmword_19FFB3050;
        qword_1EE589970 = 4;
        unk_1EE589978 = "texcoords";
        dword_1EE589980 = 3;
        qword_1EE589988 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineConstantTexcoordsBinding(void)::reflection;
        *(_OWORD *)algn_1EE589990 = xmmword_19FFB4860;
        qword_1EE5899A0 = 5;
        unk_1EE5899A8 = "morph";
        dword_1EE5899B0 = 3;
        qword_1EE5899B8 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineConstantMorphBinding(void)::reflection;
        unk_1EE5899C0 = 3;
      }
      qword_1EE589848 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineConstantStructBinding(void)::ref;
      unk_1EE589850 = 6;
      a4 = v17;
      a2 = v25;
      a3 = v26;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v29 = *(_OWORD *)a3;
  *(_OWORD *)&v29[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v27 = *a4;
  v28 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::FlyoverMorphBorder::MorphBorderPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v27;
  *(_OWORD *)(a1 + 272) = v28;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v29;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v29[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_1E42BA7C0;
  return a1;
}

void ggl::FlyoverMorphBorder::MorphBorderPipelineSetup::~MorphBorderPipelineSetup(ggl::FlyoverMorphBorder::MorphBorderPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverMorphBorder::MorphBorderPipelineSetup::constantDataIsEnabled(ggl::FlyoverMorphBorder::MorphBorderPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

BOOL ggl::FlyoverMorphBorder::MorphBorderPipelineSetup::textureIsEnabled(ggl::FlyoverMorphBorder::MorphBorderPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

void md::FlyoverTrafficBatch::~FlyoverTrafficBatch(md::FlyoverTrafficBatch *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E4297128;
  v2 = *((_QWORD *)this + 6);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  md::Ribbons::RibbonBatch<md::FlyoverTrafficDrawables>::~RibbonBatch((uint64_t)this);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E4297128;
  v2 = *((_QWORD *)this + 6);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  md::Ribbons::RibbonBatch<md::FlyoverTrafficDrawables>::~RibbonBatch((uint64_t)this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Ribbons::RibbonBatch<md::FlyoverTrafficDrawables>::~RibbonBatch(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void (***v6)(void);
  void (**v7)(void);
  _QWORD **v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;

  *(_QWORD *)a1 = &off_1E42AF2C8;
  v3 = (void **)(a1 + 248);
  v2 = *(_QWORD **)(a1 + 248);
  if (v2)
  {
    std::vector<std::unique_ptr<md::FlyoverTrafficSection>>::__base_destruct_at_end[abi:nn180100](a1 + 248, v2);
    operator delete(*v3);
  }
  v4 = *(_QWORD **)(a1 + 224);
  do
  {
    if (v4[1])
    {
      v5 = 0;
      v6 = (void (***)(void))(v4 + 2);
      do
      {
        v7 = *v6;
        v6 += 15;
        (*v7)();
        ++v5;
      }
      while (v5 < v4[1]);
    }
    v4[1] = 0;
    v4 = (_QWORD *)*v4;
  }
  while (v4);
  v8 = *(_QWORD ***)(a1 + 224);
  *(_QWORD *)(a1 + 232) = v8;
  v9 = *v8;
  *v8 = 0;
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)*v9;
      free(v9);
      v9 = v10;
    }
    while (v10);
    v8 = *(_QWORD ***)(a1 + 224);
  }
  free(v8);
  v11 = *(void **)(a1 + 200);
  if (v11)
  {
    *(_QWORD *)(a1 + 208) = v11;
    operator delete(v11);
  }
  v12 = *(_QWORD *)(a1 + 168);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 176);
    v14 = *(_QWORD *)(a1 + 168);
    if (v13 != v12)
    {
      v15 = *(_QWORD *)(a1 + 176);
      do
      {
        v17 = *(void **)(v15 - 24);
        v15 -= 24;
        v16 = v17;
        if (v17)
        {
          *(_QWORD *)(v13 - 16) = v16;
          operator delete(v16);
        }
        v13 = v15;
      }
      while (v15 != v12);
      v14 = *(_QWORD *)(a1 + 168);
    }
    *(_QWORD *)(a1 + 176) = v12;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 192) + 40))(*(_QWORD *)(a1 + 192), v14, *(_QWORD *)(a1 + 184) - v14);
  }
  v18 = *(void **)(a1 + 144);
  if (v18)
  {
    *(_QWORD *)(a1 + 152) = v18;
    operator delete(v18);
  }
  *(_QWORD *)(a1 + 16) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 32) = 3131955885;
  return a1;
}

uint64_t std::vector<std::unique_ptr<md::FlyoverTrafficSection>>::__base_destruct_at_end[abi:nn180100](uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  malloc_zone_t *zone;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  int v14;
  uint64_t v15;
  geo::read_write_lock *v16;
  const char *v17;
  _QWORD *v18;
  uint64_t v19;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v7 = *--v4;
    v6 = v7;
    *v4 = 0;
    if (v7)
    {
      v8 = *(_QWORD **)(v6 + 176);
      if (v8)
      {
        v9 = *(_QWORD **)(v6 + 184);
        v5 = *(_QWORD *)(v6 + 176);
        if (v9 != v8)
        {
          do
          {
            v12 = *--v9;
            v11 = v12;
            *v9 = 0;
            if (v12)
            {
              if ((v13 & 1) == 0)
              {
                v19 = v11;
                v11 = v19;
                if (v14)
                {
                  v18 = v8;
                  v15 = operator new();
                  *(_QWORD *)(v15 + 16) = 0x5ED09DD50000000FLL;
                  *(_QWORD *)(v15 + 24) = "VectorKitLabels";
                  *(_OWORD *)(v15 + 32) = xmmword_19FFB2E80;
                  *(_QWORD *)v15 = &off_1E42B5668;
                  *(_QWORD *)(v15 + 8) = "VectorKitLabels";
                  *(_OWORD *)(v15 + 72) = 0u;
                  *(_OWORD *)(v15 + 88) = 0u;
                  *(_OWORD *)(v15 + 104) = 0u;
                  *(_OWORD *)(v15 + 120) = 0u;
                  *(_OWORD *)(v15 + 136) = 0u;
                  *(_OWORD *)(v15 + 152) = 0u;
                  *(_OWORD *)(v15 + 168) = 0u;
                  *(_OWORD *)(v15 + 184) = 0u;
                  *(_OWORD *)(v15 + 200) = 0u;
                  *(_OWORD *)(v15 + 216) = 0u;
                  *(_OWORD *)(v15 + 232) = 0u;
                  *(_QWORD *)(v15 + 248) = 0;
                  *(_OWORD *)(v15 + 56) = 0u;
                  v16 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v15 + 56), 0);
                  if ((_DWORD)v16)
                    geo::read_write_lock::logFailure(v16, (uint64_t)"initialization", v17);
                  zone = malloc_create_zone(0, 0);
                  *(_QWORD *)(v15 + 48) = zone;
                  malloc_set_zone_name(zone, "VectorKitLabels");
                  *(_QWORD *)(v15 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                  mdm::Allocator::instance(void)::alloc = v15;
                  v8 = v18;
                  v11 = v19;
                }
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v11, 136);
            }
          }
          while (v9 != v8);
          v5 = *(_QWORD *)(v6 + 176);
        }
        *(_QWORD *)(v6 + 184) = v8;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 200) + 40))(*(_QWORD *)(v6 + 200), v5, *(_QWORD *)(v6 + 192) - v5);
      }
      *(_QWORD *)(v6 + 56) = &off_1E42B59B0;
      *(_QWORD *)(v6 + 72) = 3131955885;
      result = MEMORY[0x1A1AF4E00](v6, 0x10F0C40EA8C95A6);
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void md::Ribbons::RibbonBatch<md::FlyoverTrafficDrawables>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::FlyoverTrafficDrawables>::~RibbonBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::FlyoverTrafficBatch::FlyoverTrafficBatch(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;
  _QWORD *v10;
  uint64_t i;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int64x2_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  malloc_zone_t *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  geo::read_write_lock *v46;
  const char *v47;
  uint64_t v48;
  geo::read_write_lock *v49;
  const char *v50;
  malloc_zone_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  int v59;
  uint64_t v60;
  geo::read_write_lock *v61;
  const char *v62;
  malloc_zone_t *zone;
  uint64_t v64;
  uint64_t **v70;

  v6 = a6;
  v7 = a1;
  *(_QWORD *)a1 = &off_1E42AF2C8;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = 0uLL;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = "";
  *(_DWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(int64x2_t *)(a1 + 112) = vdupq_n_s64(1uLL);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 16) = &off_1E42AF548;
  *(_BYTE *)(a1 + 136) = 1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  if ((v9 & 1) == 0)
  {
    v8 = 0uLL;
    if (v59)
    {
      v60 = operator new();
      *(_QWORD *)(v60 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v60 + 24) = "GeoGL";
      *(_OWORD *)(v60 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v60 = &off_1E42B5668;
      *(_QWORD *)(v60 + 8) = "GeoGL";
      *(_OWORD *)(v60 + 72) = 0u;
      *(_OWORD *)(v60 + 88) = 0u;
      *(_OWORD *)(v60 + 104) = 0u;
      *(_OWORD *)(v60 + 120) = 0u;
      *(_OWORD *)(v60 + 136) = 0u;
      *(_OWORD *)(v60 + 152) = 0u;
      *(_OWORD *)(v60 + 168) = 0u;
      *(_OWORD *)(v60 + 184) = 0u;
      *(_OWORD *)(v60 + 200) = 0u;
      *(_OWORD *)(v60 + 216) = 0u;
      *(_OWORD *)(v60 + 232) = 0u;
      *(_QWORD *)(v60 + 248) = 0;
      *(_OWORD *)(v60 + 56) = 0u;
      v61 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v60 + 56), 0);
      if ((_DWORD)v61)
        geo::read_write_lock::logFailure(v61, (uint64_t)"initialization", v62);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v60 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v60 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v60;
      v7 = a1;
      v6 = a6;
      v8 = 0uLL;
    }
  }
  *(_OWORD *)(v7 + 200) = v8;
  *(_QWORD *)(v7 + 192) = ggl::Allocator::instance(void)::alloc;
  *(_OWORD *)(v7 + 216) = v8;
  *(_QWORD *)(v7 + 232) = 0;
  *(_QWORD *)(v7 + 240) = 32;
  v10 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  *v10 = 0;
  v10[1] = 0;
  *(_QWORD *)(v7 + 248) = 0;
  *(_QWORD *)(v7 + 224) = v10;
  *(_QWORD *)(v7 + 232) = v10;
  *(_QWORD *)(v7 + 256) = 0;
  *(_QWORD *)(v7 + 264) = 0;
  v70 = (uint64_t **)(v7 + 248);
  *(_BYTE *)(v7 + 272) = 1;
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      v13 = operator new();
      *(_OWORD *)(v13 + 64) = 0u;
      *(_OWORD *)(v13 + 80) = 0u;
      *(_QWORD *)(v13 + 208) = 0;
      *(_OWORD *)(v13 + 176) = 0u;
      *(_OWORD *)(v13 + 192) = 0u;
      *(_OWORD *)(v13 + 144) = 0u;
      *(_OWORD *)(v13 + 160) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      *(_OWORD *)(v13 + 128) = 0u;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 32) = 0u;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)v13 = 0u;
      *(_OWORD *)(v13 + 16) = 0u;
      *(_BYTE *)(v13 + 48) = 1;
      *(_QWORD *)(v13 + 56) = &off_1E42B59B0;
      *(_QWORD *)(v13 + 80) = 0;
      *(_QWORD *)(v13 + 88) = 0;
      *(_QWORD *)(v13 + 72) = "";
      *(_DWORD *)(v13 + 96) = 0;
      *(_DWORD *)(v13 + 112) = 1065353216;
      *(_OWORD *)(v13 + 136) = 0u;
      *(_OWORD *)(v13 + 120) = 0u;
      *(int64x2_t *)(v13 + 152) = vdupq_n_s64(1uLL);
      *(_OWORD *)(v13 + 184) = 0u;
      *(_OWORD *)(v13 + 168) = 0u;
      {
        v48 = operator new();
        *(_QWORD *)(v48 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v48 + 24) = "VectorKitLabels";
        *(_OWORD *)(v48 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v48 = &off_1E42B5668;
        *(_QWORD *)(v48 + 8) = "VectorKitLabels";
        *(_OWORD *)(v48 + 72) = 0u;
        *(_OWORD *)(v48 + 88) = 0u;
        *(_OWORD *)(v48 + 104) = 0u;
        *(_OWORD *)(v48 + 120) = 0u;
        *(_OWORD *)(v48 + 136) = 0u;
        *(_OWORD *)(v48 + 152) = 0u;
        *(_OWORD *)(v48 + 168) = 0u;
        *(_OWORD *)(v48 + 184) = 0u;
        *(_OWORD *)(v48 + 200) = 0u;
        *(_OWORD *)(v48 + 216) = 0u;
        *(_OWORD *)(v48 + 232) = 0u;
        *(_QWORD *)(v48 + 248) = 0;
        *(_OWORD *)(v48 + 56) = 0u;
        v49 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v48 + 56), 0);
        if ((_DWORD)v49)
          geo::read_write_lock::logFailure(v49, (uint64_t)"initialization", v50);
        v51 = malloc_create_zone(0, 0);
        *(_QWORD *)(v48 + 48) = v51;
        malloc_set_zone_name(v51, "VectorKitLabels");
        *(_QWORD *)(v48 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v48;
        v7 = a1;
        v6 = a6;
      }
      *(_QWORD *)(v13 + 200) = mdm::Allocator::instance(void)::alloc;
      v16 = *(uint64_t **)(v7 + 256);
      v15 = *(_QWORD *)(v7 + 264);
      if ((unint64_t)v16 < v15)
      {
        *v16 = v13;
        v12 = v16 + 1;
      }
      else
      {
        v17 = *v70;
        v18 = (char *)v16 - (char *)*v70;
        v19 = v18 >> 3;
        v20 = (v18 >> 3) + 1;
        if (v20 >> 61)
          abort();
        v21 = v15 - (_QWORD)v17;
        if (v21 >> 2 > v20)
          v20 = v21 >> 2;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          if (v22 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v23 = (char *)operator new(8 * v22);
        }
        else
        {
          v23 = 0;
        }
        v24 = (uint64_t *)&v23[8 * v19];
        *v24 = v13;
        v12 = v24 + 1;
        if (v16 == v17)
        {
          v33 = vdupq_n_s64((unint64_t)v16);
        }
        else
        {
          v25 = (char *)v16 - (char *)v17 - 8;
          if (v25 < 0x78
            || (uint64_t *)((char *)v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8) < v24
            && &v23[v18 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v16)
          {
            goto LABEL_67;
          }
          v26 = (v25 >> 3) + 1;
          v27 = &v23[8 * v19 - 16];
          v28 = v16 - 4;
          v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v31 = *(_OWORD *)v28;
            v30 = *((_OWORD *)v28 + 1);
            *(_OWORD *)v28 = 0uLL;
            *((_OWORD *)v28 + 1) = 0uLL;
            v28 -= 4;
            *((_OWORD *)v27 - 1) = v31;
            *(_OWORD *)v27 = v30;
            v27 -= 32;
            v29 -= 4;
          }
          while (v29);
          v24 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
          v16 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
          if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_67:
            do
            {
              v32 = *--v16;
              *v16 = 0;
              *--v24 = v32;
            }
            while (v16 != v17);
          }
          v33 = *(int64x2_t *)v70;
        }
        *(_QWORD *)(a1 + 248) = v24;
        *(_QWORD *)(a1 + 256) = v12;
        *(_QWORD *)(a1 + 264) = &v23[8 * v22];
        v34 = (_QWORD *)v33.i64[1];
        v35 = (_QWORD *)v33.i64[0];
        while (v34 != v35)
        {
          v38 = *--v34;
          v37 = v38;
          *v34 = 0;
          if (v38)
          {
            v39 = *(_QWORD **)(v37 + 176);
            if (v39)
            {
              v40 = *(_QWORD **)(v37 + 184);
              v36 = *(_QWORD *)(v37 + 176);
              if (v40 != v39)
              {
                do
                {
                  v43 = *--v40;
                  v42 = v43;
                  *v40 = 0;
                  if (v43)
                  {
                    if ((v44 & 1) == 0
                    {
                      v45 = operator new();
                      *(_QWORD *)(v45 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v45 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v45 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v45 = &off_1E42B5668;
                      *(_QWORD *)(v45 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v45 + 72) = 0u;
                      *(_OWORD *)(v45 + 88) = 0u;
                      *(_OWORD *)(v45 + 104) = 0u;
                      *(_OWORD *)(v45 + 120) = 0u;
                      *(_OWORD *)(v45 + 136) = 0u;
                      *(_OWORD *)(v45 + 152) = 0u;
                      *(_OWORD *)(v45 + 168) = 0u;
                      *(_OWORD *)(v45 + 184) = 0u;
                      *(_OWORD *)(v45 + 200) = 0u;
                      *(_OWORD *)(v45 + 216) = 0u;
                      *(_OWORD *)(v45 + 232) = 0u;
                      *(_QWORD *)(v45 + 248) = 0;
                      v64 = v45;
                      *(_OWORD *)(v45 + 56) = 0u;
                      v46 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v45 + 56), 0);
                      if ((_DWORD)v46)
                        geo::read_write_lock::logFailure(v46, (uint64_t)"initialization", v47);
                      v41 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v64 + 48) = v41;
                      malloc_set_zone_name(v41, "VectorKitLabels");
                      *(_QWORD *)(v64 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v64;
                    }
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v42, 136);
                  }
                }
                while (v40 != v39);
                v36 = *(_QWORD *)(v37 + 176);
              }
              *(_QWORD *)(v37 + 184) = v39;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v37 + 200) + 40))(*(_QWORD *)(v37 + 200), v36, *(_QWORD *)(v37 + 192) - v36);
            }
            *(_QWORD *)(v37 + 56) = &off_1E42B59B0;
            *(_QWORD *)(v37 + 72) = 3131955885;
            MEMORY[0x1A1AF4E00](v37, 0x10F0C40EA8C95A6);
          }
        }
        if (v35)
          operator delete(v35);
        v7 = a1;
        v6 = a6;
      }
      *(_QWORD *)(v7 + 256) = v12;
    }
  }
  *(_QWORD *)v7 = &off_1E4297128;
  *(_QWORD *)(v7 + 280) = a4;
  *(_QWORD *)(v7 + 288) = a5;
  v52 = a2[1];
  *(_QWORD *)(v7 + 296) = *a2;
  *(_QWORD *)(v7 + 304) = v52;
  if (v52)
  {
    v53 = (unint64_t *)(v52 + 8);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v55 = a3[1];
  *(_QWORD *)(v7 + 312) = *a3;
  *(_QWORD *)(v7 + 320) = v55;
  if (v55)
  {
    v56 = (unint64_t *)(v55 + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  return v7;
}

void sub_19FB05764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, void **a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;

  v22 = *a13;
  if (*a13)
  {
    *(_QWORD *)(*(_QWORD *)(v20 - 88) + 208) = v22;
    operator delete(v22);
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v20 - 88) + 168);
  if (v23)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v20 - 88) + 176);
    v25 = *(_QWORD *)(*(_QWORD *)(v20 - 88) + 168);
    if (v24 != v23)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(v20 - 88) + 176);
      do
      {
        v28 = *(void **)(v26 - 24);
        v26 -= 24;
        v27 = v28;
        if (v28)
        {
          *(_QWORD *)(v24 - 16) = v27;
          operator delete(v27);
        }
        v24 = v26;
      }
      while (v26 != v23);
      v25 = *(_QWORD *)(*(_QWORD *)(v20 - 88) + 168);
    }
    v29 = *(_QWORD *)(v20 - 88);
    *(_QWORD *)(v29 + 176) = v23;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v29 + 192) + 40))(*(_QWORD *)(v29 + 192), v25, *(_QWORD *)(v29 + 184) - v25);
  }
  v30 = *a14;
  if (*a14)
  {
    *(_QWORD *)(*(_QWORD *)(v20 - 88) + 152) = v30;
    operator delete(v30);
  }
  v31 = *(_QWORD *)(v20 - 88);
  *(_QWORD *)(v31 + 16) = &off_1E42B59B0;
  *(_QWORD *)(v31 + 32) = 3131955885;
  _Unwind_Resume(exception_object);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverTraffic::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverTraffic::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverTraffic::Pattern>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverTraffic::Pattern>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Pattern>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E15C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Pattern>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E15C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Pattern>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverTraffic::Displacement>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverTraffic::Displacement>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Displacement>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Displacement>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1558;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Displacement>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::FlyoverTrafficLayer::~FlyoverTrafficLayer(md::FlyoverTrafficLayer *this)
{
  md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::~RibbonLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::~RibbonLayer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42AF508;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[5];
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = a1[9];
  a1[9] = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 2584);
    if (v7)
      MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v6, 0x1020C4007FF0C4BLL);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::~RibbonLayer(_QWORD *a1)
{
  md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::VertexDataTyped<ggl::FlyoverTraffic::Default>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::FlyoverTraffic::Default>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::FlyoverTraffic::Default>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverTraffic::Default>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFDB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverTraffic::Default>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFDB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverTraffic::Default>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t md::FlyoverTrafficLayer::FlyoverTrafficLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  _QWORD **v12;
  _QWORD **v13;
  char *v14;
  _QWORD *v15;
  _QWORD **v16;
  _QWORD **i;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  gdc::GlobeTileGrid *v35;
  gdc::GlobeTileGrid *v36;
  gdc::GlobeTileGrid *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  std::__shared_count v47;
  unsigned __int8 v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  std::__shared_count v51;
  unsigned __int8 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _BYTE *v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD **v104;
  _QWORD **v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  int v114;
  uint64_t v115;
  geo::read_write_lock *v116;
  const char *v117;
  malloc_zone_t *zone;
  int v119;
  uint64_t v120;
  geo::read_write_lock *v121;
  const char *v122;
  malloc_zone_t *v123;
  unsigned __int8 v124;
  int v125;
  uint64_t v126;
  geo::read_write_lock *v127;
  const char *v128;
  malloc_zone_t *v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  geo::read_write_lock *v133;
  const char *v134;
  malloc_zone_t *v135;
  uint64_t *v136;
  uint64_t *j;
  uint64_t v138;
  uint64_t result;
  uint64_t v140;
  gdc::GlobeTileGrid **v141;
  void **v142;
  unint64_t v143;
  QuadTile *v144;
  QuadTile *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD **v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  uint64_t v155;

  v2 = a1;
  v155 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E42AF508;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 == *(_QWORD *)a2)
  {
    v8 = 0;
    v9 = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)(a1 + 72) = 0;
    v142 = (void **)(a1 + 32);
    *(_BYTE *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_BYTE *)(a1 + 64) = 0;
    goto LABEL_49;
  }
  if (v5 < 0)
    abort();
  v6 = operator new(v5);
  *(_QWORD *)(v2 + 8) = v6;
  *(_QWORD *)(v2 + 16) = v6;
  v7 = v5 >> 3;
  *(_QWORD *)(v2 + 24) = &v6[v7];
  memcpy(v6, v4, v5);
  v146 = &v6[v7];
  *(_QWORD *)(v2 + 16) = &v6[v7];
  *(_OWORD *)(v2 + 32) = 0u;
  *(_QWORD *)(v2 + 72) = 0;
  v141 = (gdc::GlobeTileGrid **)(v2 + 72);
  v142 = (void **)(v2 + 32);
  *(_BYTE *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 104) = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_BYTE *)(v2 + 64) = 0;
  if (!(v7 * 8))
  {
    v8 = 0;
    v9 = 0;
    goto LABEL_49;
  }
  v144 = (QuadTile *)(v2 + 80);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  do
  {
    v149 = v6;
    v11 = (_QWORD *)*v6;
    v11[1] = a1;
    v13 = (_QWORD **)v11[31];
    v12 = (_QWORD **)v11[32];
    v151 = v12;
    if (v13 != v12)
    {
      while (1)
      {
        v15 = *v13;
        v15[1] = **v13;
        v15[3] = v15[2];
        v15[5] = v15[4];
        v16 = (_QWORD **)v15[22];
        for (i = (_QWORD **)v15[23]; v16 != i; v15[5] = v18[5] + v15[5] - v18[4])
        {
          v18 = *v16++;
          v19 = v18[6];
          v20 = v18[2] + 6 * v19;
          v21 = 4 * v19 - 4;
          v18[1] = v21 + *v18;
          v18[3] = v20 - 6;
          v15[1] += v21;
          v15[3] = v18[3] + v15[3] - v18[2];
        }
        if (v9 >= v10)
          break;
        *(_QWORD *)v9 = v15;
        v14 = v9 + 8;
LABEL_9:
        ++v13;
        v9 = v14;
        if (v13 == v12)
          goto LABEL_5;
      }
      v22 = (v9 - v8) >> 3;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        abort();
      if ((v10 - v8) >> 2 > v23)
        v23 = (v10 - v8) >> 2;
      if ((unint64_t)(v10 - v8) >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
      {
        if (v24 >> 61)
LABEL_151:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v25 = operator new(8 * v24);
      }
      else
      {
        v25 = 0;
      }
      v26 = &v25[8 * v22];
      *(_QWORD *)v26 = v15;
      v14 = v26 + 8;
      if (v9 != v8)
      {
        v27 = v9 - 8 - v8;
        if (v27 >= 0x168)
        {
          if (&v25[v9 - v8 - 8 - (v27 & 0xFFFFFFFFFFFFFFF8)] > &v25[v9 - v8 - 8])
          {
            v28 = v9;
          }
          else if (&v9[-(v27 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
          {
            v28 = v9;
          }
          else if ((unint64_t)(v8 - v25) >= 0x20)
          {
            v30 = (v27 >> 3) + 1;
            v28 = &v9[-8 * (v30 & 0x3FFFFFFFFFFFFFFCLL)];
            v31 = &v25[8 * v22 - 16];
            v32 = v9 - 16;
            v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v34 = *(_OWORD *)v32;
              *(v31 - 1) = *((_OWORD *)v32 - 1);
              *v31 = v34;
              v31 -= 2;
              v32 -= 32;
              v33 -= 4;
            }
            while (v33);
            v26 -= 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
            if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_27;
          }
          else
          {
            v28 = v9;
          }
        }
        else
        {
          v28 = v9;
        }
        do
        {
          v29 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          *((_QWORD *)v26 - 1) = v29;
          v26 -= 8;
        }
        while (v28 != v8);
      }
LABEL_27:
      v10 = &v25[8 * v24];
      if (v8)
        operator delete(v8);
      v8 = v26;
      v12 = v151;
      goto LABEL_9;
    }
LABEL_5:
    v6 = v149 + 1;
  }
  while (v149 + 1 != v146);
  v2 = a1;
  if (*(_BYTE *)(a1 + 64))
  {
    v35 = (gdc::GlobeTileGrid *)operator new();
    v36 = v35;
    if (!*(_BYTE *)(a1 + 104))
    {
      result = std::__throw_bad_optional_access[abi:nn180100]();
      __break(1u);
      return result;
    }
    gdc::GlobeTileGrid::GlobeTileGrid(v35, v144);
    v37 = *v141;
    *v141 = v36;
    if (v37)
    {
      v38 = *((_QWORD *)v37 + 323);
      if (v38)
        MEMORY[0x1A1AF4DE8](v38, 0x1000C8000313F17);
      MEMORY[0x1A1AF4E00](v37, 0x1020C4007FF0C4BLL);
      v36 = *v141;
    }
    *((_QWORD *)v36 + 323) = operator new[]();
    gdc::GlobeTileGrid::endBuildingHeightRange(*v141);
  }
LABEL_49:
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = (v9 - v8) >> 3;
  v44 = (_QWORD *)&unk_1ECE44000;
  v143 = v43;
  do
  {
    if (v40 == v43
      || (unint64_t)(*(_QWORD *)(*(_QWORD *)&v8[8 * v40] + 8) + v42 - **(_QWORD **)&v8[8 * v40]) >= 0x10000)
    {
      v45 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v45->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v45->__shared_owners_;
      v45->__shared_weak_owners_ = 0;
      v45[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
      v147 = (uint64_t)&v45[1];
      v45->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFDB8;
      v45[1].__shared_owners_ = 128;
      LODWORD(v45[1].__shared_weak_owners_) = 1;
      v45[2].__vftable = 0;
      v45[2].__shared_owners_ = 0;
      v45[2].__shared_weak_owners_ = 0;
      v45[3].__vftable = (std::__shared_weak_count_vtbl *)(v42 << 7);
      v47 = (std::__shared_count)0;
      *(_OWORD *)&v45[3].__shared_owners_ = 0u;
      v45[4].std::__shared_count = 0u;
      v45[4].__shared_weak_owners_ = 0;
      if ((v48 & 1) == 0)
      {
        v47 = (std::__shared_count)0;
        if (v114)
        {
          v115 = operator new();
          *(_QWORD *)(v115 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v115 + 24) = "GeoGL";
          *(_OWORD *)(v115 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v115 = &off_1E42B5668;
          *(_QWORD *)(v115 + 8) = "GeoGL";
          *(_OWORD *)(v115 + 72) = 0u;
          *(_OWORD *)(v115 + 88) = 0u;
          *(_OWORD *)(v115 + 104) = 0u;
          *(_OWORD *)(v115 + 120) = 0u;
          *(_OWORD *)(v115 + 136) = 0u;
          *(_OWORD *)(v115 + 152) = 0u;
          *(_OWORD *)(v115 + 168) = 0u;
          *(_OWORD *)(v115 + 184) = 0u;
          *(_OWORD *)(v115 + 200) = 0u;
          *(_OWORD *)(v115 + 216) = 0u;
          *(_OWORD *)(v115 + 232) = 0u;
          *(_QWORD *)(v115 + 248) = 0;
          *(_OWORD *)(v115 + 56) = 0u;
          v116 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v115 + 56), 0);
          if ((_DWORD)v116)
            geo::read_write_lock::logFailure(v116, (uint64_t)"initialization", v117);
          zone = malloc_create_zone(0, 0);
          *(_QWORD *)(v115 + 48) = zone;
          malloc_set_zone_name(zone, "GeoGL");
          *(_QWORD *)(v115 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v115;
          v44 = &unk_1ECE44000;
          v47 = (std::__shared_count)0;
        }
      }
      v45[5].__vftable = (std::__shared_weak_count_vtbl *)v44[495];
      v45[5].__shared_owners_ = 0;
      *((std::__shared_count *)v45 + 11) = v47;
      v45[8].std::__shared_count = v47;
      v45[8].__shared_weak_owners_ = 0;
      v45[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
      *((std::__shared_count *)v45 + 10) = v47;
      v45[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
      LODWORD(v45[5].__shared_weak_owners_) = 0;
      v45[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7A20;
      v45[9].__shared_weak_owners_ = (uint64_t)"BatchType/VData";
      v45[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::FlyoverTraffic::defaultReflection;
      v152 = v45;
      v45[9].__shared_owners_ = (uint64_t)&unk_1E42B7A40;
      v49 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v49->__shared_owners_ = 0;
      v50 = (unint64_t *)&v49->__shared_owners_;
      v49->__shared_weak_owners_ = 0;
      v49[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
      v49->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
      v49[1].__shared_owners_ = 2;
      LODWORD(v49[1].__shared_weak_owners_) = 257;
      v49[2].__vftable = 0;
      v49[2].__shared_owners_ = 0;
      v49[2].__shared_weak_owners_ = 0;
      v49[3].__vftable = (std::__shared_weak_count_vtbl *)(2 * v41);
      v51 = (std::__shared_count)0;
      *(_OWORD *)&v49[3].__shared_owners_ = 0u;
      v49[4].std::__shared_count = 0u;
      v49[4].__shared_weak_owners_ = 0;
      if ((v52 & 1) == 0)
      {
        v51 = (std::__shared_count)0;
        if (v119)
        {
          v120 = operator new();
          *(_QWORD *)(v120 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v120 + 24) = "GeoGL";
          *(_OWORD *)(v120 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v120 = &off_1E42B5668;
          *(_QWORD *)(v120 + 8) = "GeoGL";
          *(_OWORD *)(v120 + 72) = 0u;
          *(_OWORD *)(v120 + 88) = 0u;
          *(_OWORD *)(v120 + 104) = 0u;
          *(_OWORD *)(v120 + 120) = 0u;
          *(_OWORD *)(v120 + 136) = 0u;
          *(_OWORD *)(v120 + 152) = 0u;
          *(_OWORD *)(v120 + 168) = 0u;
          *(_OWORD *)(v120 + 184) = 0u;
          *(_OWORD *)(v120 + 200) = 0u;
          *(_OWORD *)(v120 + 216) = 0u;
          *(_OWORD *)(v120 + 232) = 0u;
          *(_QWORD *)(v120 + 248) = 0;
          *(_OWORD *)(v120 + 56) = 0u;
          v121 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v120 + 56), 0);
          if ((_DWORD)v121)
            geo::read_write_lock::logFailure(v121, (uint64_t)"initialization", v122);
          v123 = malloc_create_zone(0, 0);
          *(_QWORD *)(v120 + 48) = v123;
          malloc_set_zone_name(v123, "GeoGL");
          *(_QWORD *)(v120 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v120;
          v51 = (std::__shared_count)0;
        }
      }
      v49[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
      v49[5].__shared_owners_ = 0;
      *((std::__shared_count *)v49 + 11) = v51;
      v49[8].std::__shared_count = v51;
      v49[8].__shared_weak_owners_ = 0;
      v49[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
      *((std::__shared_count *)v49 + 10) = v51;
      v49[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
      LODWORD(v49[5].__shared_weak_owners_) = 0;
      LODWORD(v49[10].__vftable) = 0;
      v49[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
      v49[1].__shared_owners_ = 2;
      v49[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
      v49[9].__shared_weak_owners_ = (uint64_t)"BatchType/IData";
      v53 = operator new();
      do
        v54 = __ldxr(p_shared_owners);
      while (__stxr(v54 + 1, p_shared_owners));
      do
        v55 = __ldxr(v50);
      while (__stxr(v55 + 1, v50));
      if ((v56 & 1) == 0
      {
        if ((v124 & 1) == 0
        {
          ggl::MeshTyped<ggl::FlyoverTraffic::Default>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverTraffic::defaultReflection;
        }
        ggl::MeshTyped<ggl::FlyoverTraffic::Default>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverTraffic::Default>::attributesReflection(void)::r;
        unk_1EE576218 = 1;
      }
      *(_QWORD *)(v53 + 32) = 0;
      *(_QWORD *)(v53 + 40) = 0;
      *(_DWORD *)(v53 + 48) = 0;
      *(_QWORD *)v53 = &off_1E42BBC08;
      *(_QWORD *)(v53 + 8) = "BatchType/Mesh";
      *(_QWORD *)(v53 + 16) = &unk_1E42BBC28;
      *(_QWORD *)(v53 + 24) = 0;
      *(_QWORD *)(v53 + 56) = &ggl::MeshTyped<ggl::FlyoverTraffic::Default>::typedReflection(void)::r;
      *(_QWORD *)(v53 + 64) = 0;
      v57 = v53 + 64;
      *(_QWORD *)(v53 + 72) = 0;
      *(_QWORD *)(v53 + 80) = 0;
      if ((v58 & 1) == 0)
      {
        v57 = v53 + 64;
        if (v125)
        {
          v126 = operator new();
          *(_QWORD *)(v126 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v126 + 24) = "GeoGL";
          *(_OWORD *)(v126 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v126 = &off_1E42B5668;
          *(_QWORD *)(v126 + 8) = "GeoGL";
          *(_OWORD *)(v126 + 72) = 0u;
          *(_OWORD *)(v126 + 88) = 0u;
          *(_OWORD *)(v126 + 104) = 0u;
          *(_OWORD *)(v126 + 120) = 0u;
          *(_OWORD *)(v126 + 136) = 0u;
          *(_OWORD *)(v126 + 152) = 0u;
          *(_OWORD *)(v126 + 168) = 0u;
          *(_OWORD *)(v126 + 184) = 0u;
          *(_OWORD *)(v126 + 200) = 0u;
          *(_OWORD *)(v126 + 216) = 0u;
          *(_OWORD *)(v126 + 232) = 0u;
          *(_QWORD *)(v126 + 248) = 0;
          *(_OWORD *)(v126 + 56) = 0u;
          v127 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v126 + 56), 0);
          if ((_DWORD)v127)
            geo::read_write_lock::logFailure(v127, (uint64_t)"initialization", v128);
          v129 = malloc_create_zone(0, 0);
          *(_QWORD *)(v126 + 48) = v129;
          malloc_set_zone_name(v129, "GeoGL");
          *(_QWORD *)(v126 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v126;
          v57 = v53 + 64;
        }
      }
      v59 = ggl::Allocator::instance(void)::alloc;
      *(_QWORD *)(v53 + 120) = 0;
      *(_QWORD *)(v53 + 96) = 0;
      *(_QWORD *)(v53 + 104) = 0;
      *(_QWORD *)(v53 + 88) = v59;
      if ((v59 & 1) == 0)
      {
        v140 = v57;
        v57 = v140;
        if (v130)
        {
          v131 = operator new();
          *(_QWORD *)(v131 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v131 + 24) = "GeoGL";
          *(_OWORD *)(v131 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v131 = &off_1E42B5668;
          *(_QWORD *)(v131 + 8) = "GeoGL";
          *(_OWORD *)(v131 + 72) = 0u;
          *(_OWORD *)(v131 + 88) = 0u;
          *(_OWORD *)(v131 + 104) = 0u;
          *(_OWORD *)(v131 + 120) = 0u;
          *(_OWORD *)(v131 + 136) = 0u;
          *(_OWORD *)(v131 + 152) = 0u;
          *(_OWORD *)(v131 + 168) = 0u;
          *(_OWORD *)(v131 + 184) = 0u;
          *(_OWORD *)(v131 + 200) = 0u;
          *(_OWORD *)(v131 + 216) = 0u;
          *(_OWORD *)(v131 + 232) = 0u;
          *(_QWORD *)(v131 + 248) = 0;
          v132 = v131;
          *(_OWORD *)(v131 + 56) = 0u;
          v133 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v131 + 56), 0);
          if ((_DWORD)v133)
            geo::read_write_lock::logFailure(v133, (uint64_t)"initialization", v134);
          v135 = malloc_create_zone(0, 0);
          *(_QWORD *)(v132 + 48) = v135;
          malloc_set_zone_name(v135, "GeoGL");
          *(_QWORD *)(v132 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v132;
          v57 = v140;
        }
      }
      *(_QWORD *)(v53 + 128) = ggl::Allocator::instance(void)::alloc;
      *(_QWORD *)(v53 + 136) = 0;
      *(_QWORD *)(v53 + 112) = v53 + 120;
      *(_QWORD *)v53 = &off_1E42BD6B8;
      *(_QWORD *)(v53 + 16) = &unk_1E42BD6D8;
      v153 = v147;
      v154 = v152;
      do
        v60 = __ldxr(p_shared_owners);
      while (__stxr(v60 + 1, p_shared_owners));
      std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v57, &v153, &v155, 1uLL);
      v61 = v154;
      if (v154)
      {
        v62 = (unint64_t *)&v154->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      do
        v64 = __ldxr(v50);
      while (__stxr(v64 + 1, v50));
      v65 = *(std::__shared_weak_count **)(v53 + 104);
      *(_QWORD *)(v53 + 96) = v49 + 1;
      *(_QWORD *)(v53 + 104) = v49;
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      *(_QWORD *)v53 = &off_1E42B6AF8;
      *(_QWORD *)(v53 + 16) = &unk_1E42B6B18;
      do
        v68 = __ldaxr(v50);
      while (__stlxr(v68 - 1, v50));
      v2 = a1;
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
      do
        v69 = __ldaxr(p_shared_owners);
      while (__stlxr(v69 - 1, p_shared_owners));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
      v71 = *(uint64_t **)(a1 + 40);
      v70 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v71 >= v70)
      {
        v73 = (uint64_t *)*v142;
        v74 = (char *)v71 - (_BYTE *)*v142;
        v75 = v74 >> 3;
        v76 = (v74 >> 3) + 1;
        if (v76 >> 61)
          abort();
        v77 = v70 - (_QWORD)v73;
        if (v77 >> 2 > v76)
          v76 = v77 >> 2;
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
          v78 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v78 = v76;
        if (v78)
        {
          v145 = (QuadTile *)((char *)v71 - (_BYTE *)*v142);
          v148 = v74 >> 3;
          if (v78 >> 61)
            goto LABEL_151;
          v79 = v78;
          v80 = operator new(8 * v78);
          v78 = v79;
          v74 = (uint64_t)v145;
          v75 = v148;
        }
        else
        {
          v80 = 0;
        }
        v81 = (uint64_t *)&v80[8 * v75];
        *v81 = v53;
        v72 = v81 + 1;
        if (v71 == v73)
        {
          v73 = v71;
        }
        else
        {
          v82 = (char *)(v71 - 1) - (char *)v73;
          if (v82 < 0x58)
            goto LABEL_157;
          if ((unint64_t)((char *)v71 - &v80[v74]) < 0x20)
            goto LABEL_157;
          v83 = (v82 >> 3) + 1;
          v84 = &v80[8 * v75 - 16];
          v85 = v71 - 2;
          v86 = v83 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v87 = *(_OWORD *)v85;
            *(v84 - 1) = *((_OWORD *)v85 - 1);
            *v84 = v87;
            v84 -= 2;
            v85 -= 4;
            v86 -= 4;
          }
          while (v86);
          v81 -= v83 & 0x3FFFFFFFFFFFFFFCLL;
          v71 -= v83 & 0x3FFFFFFFFFFFFFFCLL;
          if (v83 != (v83 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_157:
            do
            {
              v88 = *--v71;
              *--v81 = v88;
            }
            while (v71 != v73);
            v73 = (uint64_t *)*v142;
          }
        }
        *(_QWORD *)(a1 + 32) = v81;
        *(_QWORD *)(a1 + 40) = v72;
        *(_QWORD *)(a1 + 48) = &v80[8 * v78];
        if (v73)
        {
          v89 = v72;
          operator delete(v73);
          v72 = v89;
        }
        v2 = a1;
      }
      else
      {
        *v71 = v53;
        v72 = v71 + 1;
      }
      *(_QWORD *)(v2 + 40) = v72;
      if (v39 < v40)
      {
        v90 = 0;
        v91 = v39;
        do
        {
          v92 = *(_QWORD *)&v8[8 * v91];
          v93 = *(_QWORD *)(v92 + 32);
          v94 = v93 + v90;
          v95 = *(_QWORD *)(v92 + 40) + v90;
          *(_QWORD *)(v92 + 32) = v94;
          *(_QWORD *)(v92 + 40) = v95;
          v90 = v95 - v93;
          ++v91;
        }
        while (v40 != v91);
        v96 = 0;
        do
        {
          v97 = *(uint64_t **)&v8[8 * v39];
          v98 = *v97;
          v99 = *v97 + v96;
          v100 = v97[1] + v96;
          *v97 = v99;
          v97[1] = v100;
          v101 = v97[2];
          v102 = v101 + v90;
          v103 = v97[3] + v90;
          v97[2] = v102;
          v97[3] = v103;
          v97[26] = v53;
          v104 = (_QWORD **)v97[22];
          v105 = (_QWORD **)v97[23];
          if (v104 != v105)
          {
            v106 = v97[4];
            do
            {
              v107 = *v104++;
              v108 = v107[1] - *v107;
              *v107 = v99;
              v99 += v108;
              v109 = v107[3] - v107[2];
              v107[1] = v99;
              v107[2] = v102;
              v102 += v109;
              v110 = v107[5] - v107[4];
              v107[3] = v102;
              v107[4] = v106;
              v106 += v110;
              v107[5] = v106;
            }
            while (v104 != v105);
          }
          v90 = v103 - v101;
          v96 = v100 - v98;
          ++v39;
        }
        while (v39 != v40);
      }
      do
        v111 = __ldaxr(v50);
      while (__stlxr(v111 - 1, v50));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
      v44 = &unk_1ECE44000;
      do
        v112 = __ldaxr(p_shared_owners);
      while (__stlxr(v112 - 1, p_shared_owners));
      v43 = v143;
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
      v42 = 0;
      v41 = 0;
      v39 = v40;
    }
    if (v40 < v43)
    {
      v113 = *(_QWORD **)&v8[8 * v40];
      v42 = v113[1] + v42 - *v113;
      v41 = v113[3] + v41 + v113[5] - (v113[2] + v113[4]);
    }
    ++v40;
  }
  while (v40 <= v43);
  if (v8)
    operator delete(v8);
  *(_QWORD *)v2 = &off_1E4297148;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_QWORD *)(v2 + 112) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 152) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 192) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 232) = 0x3FF0000000000000;
  v136 = *(uint64_t **)(v2 + 8);
  for (j = *(uint64_t **)(v2 + 16); v136 != j; *(_QWORD *)(v138 + 8) = v2)
    v138 = *v136++;
  return v2;
}

void sub_19FB07284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t *a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;

  MEMORY[0x1A1AF4E00](v25, 0x1020C4007FF0C4BLL);
  if (v26)
    operator delete(v26);
  v28 = *a15;
  *a15 = 0;
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + 2584);
    if (v29)
      MEMORY[0x1A1AF4DE8](v29, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v28, 0x1020C4007FF0C4BLL);
  }
  v30 = *a16;
  if (*a16)
  {
    *(_QWORD *)(a25 + 40) = v30;
    operator delete(v30);
    v31 = *a14;
    if (!*a14)
LABEL_9:
      _Unwind_Resume(a1);
  }
  else
  {
    v31 = *a14;
    if (!*a14)
      goto LABEL_9;
  }
  *(_QWORD *)(a25 + 16) = v31;
  operator delete(v31);
  _Unwind_Resume(a1);
}

void md::FlyoverTrafficLayer::willBeDrawn(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *i;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  int64x2_t v37;
  uint64_t v38;
  int64x2_t v39;
  float32x4_t v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  double v47;
  unsigned __int8 v48;
  float v49;
  float v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t *v56;
  unint64_t v57;
  float v58;
  float v59;
  uint16x4_t v60;
  float v61;
  float v62;
  float v63;
  float32x4_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  float32x4_t *v74;
  float v75;
  float v76;
  float v77;
  double v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  float32_t v85;
  float v86;
  float v87;
  float v88;
  _QWORD *v89;
  unint64_t v90;
  float32x4_t *v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  char v96;
  int v97;
  double v98;
  double v99;
  double v100;
  uint64_t v101;
  double v102;
  double v103;
  double v104;
  uint64_t v105;
  double v106;
  double v107;
  double v108;
  uint64_t v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  float64x2_t v114[8];
  uint16x4_t v115[2];

  if (a1 != a2)
  {
    for (i = a1; i != a2; ++i)
    {
      v8 = *i;
      v9 = *(double *)(a3 + 80);
      v10 = *(double *)(a3 + 88);
      v11 = *(double *)(a3 + 96);
      v13 = *(double *)(a3 + 64);
      v12 = *(double *)(a3 + 72);
      v15 = *(double *)(a3 + 48);
      v14 = *(double *)(a3 + 56);
      v16 = -(v13 * v9 - v14 * v10) - (v13 * v9 - v14 * v10);
      v17 = -(v15 * v10 - v13 * v12) - (v15 * v10 - v13 * v12);
      v18 = -(v14 * v12 - v15 * v9) - (v14 * v12 - v15 * v9);
      v19 = -(v18 * v12 - (-(v14 - v16 * v10) - v17 * v11));
      v20 = -(v15 + v16 * v11 + v17 * v10 - v18 * v9);
      v21 = -(v13 + v16 * v9 + v18 * v11 - v17 * v12);
      v22 = v9 * -2.0;
      v23 = -(v9 * (v9 * -2.0));
      v24 = 1.0 - (v23 - v10 * (v10 * -2.0));
      v25 = v12 * -2.0;
      v26 = -(v9 * (v12 * -2.0));
      v27 = v10 * -2.0 * v11;
      v28 = v26 - v27;
      v29 = -(v10 * (v12 * -2.0));
      v30 = v11 * v22;
      v31 = v11 * v22 - v10 * (v12 * -2.0);
      v32 = v27 + v26;
      v33 = v12 * -2.0 * v12 + 1.0;
      v34 = v33 - -(v10 * (v10 * -2.0));
      v35 = -(v10 * v22);
      v36 = v11 * v25;
      v98 = v24;
      v99 = v32;
      v102 = v28;
      v103 = v34;
      v106 = v31;
      v107 = v35 - v36;
      v100 = v29 - v30;
      v104 = v36 + v35;
      v108 = v33 - v23;
      v101 = 0;
      v105 = 0;
      v109 = 0;
      v110 = v20;
      v111 = v19;
      v112 = v21;
      v113 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>(v114[0].f64, &v98, (double *)(*(_QWORD *)(v8 + 8) + 112));
      v37.i64[0] = 0;
      v38 = *(_QWORD *)(v8 + 48);
      v39.i64[0] = *(_QWORD *)(v8 + 288) & 0xFFFFFFFELL;
      v40 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64(v39, v37).i64[0], 0), (int8x16_t)xmmword_19FFB5850, (int8x16_t)xmmword_19FFB5840);
      v41 = 1.7143;
      if ((*(_QWORD *)(v8 + 288) & 0xFFFFFFFELL) == 0)
        v41 = 3.0;
      v42 = v40;
      v42.f32[0] = v41;
      v42.i32[0] = vdivq_f32(v40, v42).u32[0];
      v43 = vmulq_f32(v40, v40);
      v42.i32[1] = v43.i32[1];
      v44 = *(_QWORD **)(*(_QWORD *)(v38 + 64) + 32);
      v45 = v44[1];
      v46 = v44[9];
      *(float *)v46 = v41;
      *(_DWORD *)(v46 + 12) = v43.i32[2];
      *(_QWORD *)(v46 + 4) = v42.i64[0];
      if (v44[8] > v45)
        v45 = v44[8];
      v44[7] = 0;
      v44[8] = v45;
      v47 = *(double *)(v8 + 296);
      if (v47 == 0.0)
      {
        *(_BYTE *)(v8 + 272) = 0;
      }
      else
      {
        v48 = *(_BYTE *)(v8 + 288);
        v49 = *(float *)(a3 + 1352);
        v50 = *(float *)(a3 + 1376);
        v51 = *(std::__shared_weak_count **)(v8 + 304);
        if (*(double *)&v51 == 0.0)
        {
          v99 = 0.0;
        }
        else
        {
          p_shared_owners = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldxr(p_shared_owners);
          while (__stxr(v53 + 1, p_shared_owners));
          v99 = *(double *)&v51;
          do
            v54 = __ldxr(p_shared_owners);
          while (__stxr(v54 + 1, p_shared_owners));
        }
        v98 = v47;
        v100 = 0.0;
        v101 = 0;
        LOBYTE(v102) = 0;
        v55 = (*(uint64_t (**)(double, double *))(**(_QWORD **)&v47 + 48))(COERCE_DOUBLE(*(_QWORD *)&v47), &v100);
        LOBYTE(v102) = v55;
        if (*(double *)&v51 != 0.0)
        {
          v56 = (unint64_t *)&v51->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
          v55 = LOBYTE(v102);
        }
        if (v55)
        {
          v58 = v50 + v49;
          switch(v48)
          {
            case 0u:
              v59 = fminf(fmaxf(v58, 0.0), 23.0);
              gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v115, *(_QWORD *)(*(_QWORD *)&v98 + 24), 0x2Bu, 2u, v59);
              v60 = v115[0];
              gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v115, *(_QWORD *)(*(_QWORD *)&v98 + 24), 0x2Cu, 2u, v59);
              goto LABEL_29;
            case 1u:
              v61 = fminf(fmaxf(v58, 0.0), 23.0);
              gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v115, *(_QWORD *)(*(_QWORD *)&v98 + 24), 0x36u, 2u, v61);
              v60 = v115[0];
              gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v115, *(_QWORD *)(*(_QWORD *)&v98 + 24), 0x37u, 2u, v61);
              goto LABEL_29;
            case 2u:
              v62 = fminf(fmaxf(v58, 0.0), 23.0);
              gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v115, *(_QWORD *)(*(_QWORD *)&v98 + 24), 0x41u, 2u, v62);
              v60 = v115[0];
              gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v115, *(_QWORD *)(*(_QWORD *)&v98 + 24), 0x42u, 2u, v62);
              goto LABEL_29;
            case 3u:
              v63 = fminf(fmaxf(v58, 0.0), 23.0);
              gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v115, *(_QWORD *)(*(_QWORD *)&v98 + 24), 0x4Cu, 2u, v63);
              v60 = v115[0];
              gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v115, *(_QWORD *)(*(_QWORD *)&v98 + 24), 0x4Du, 2u, v63);
LABEL_29:
              v64 = (float32x4_t)vdupq_n_s32(0x37800080u);
              v94 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v115[0])), v64);
              v95 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v60)), v64);
              break;
            default:
              break;
          }
          md::trafficWidthForSpeedAtZ((unint64_t)&v98, v48, v58);
          v66 = v65;
          md::trafficMinWidthForSpeedAtZ((unint64_t)&v98, v48, v58);
          v68 = v67;
          md::trafficMaxWidthForSpeedAtZ((unint64_t)&v98, v48, v58);
          v70 = v69;
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v98);
          v71 = *(_QWORD *)(v38 + 64);
          v72 = *(_QWORD **)(v71 + 48);
          v73 = v72[1];
          v74 = (float32x4_t *)v72[9];
          *v74 = v95;
          v74[1] = v94;
          v74[2].i64[0] = 0x3E99999A40400000;
          if (v72[8] > v73)
            v73 = v72[8];
          v72[7] = 0;
          v72[8] = v73;
          v75 = fmaxf(*(float *)(a3 + 1352), 11.0);
          if (v75 <= 15.0)
            v76 = (float)(v75 * 0.25) + -2.75;
          else
            v76 = 1.0;
          if (*(_BYTE *)a4)
          {
            v77 = fminf(fmaxf(*(float *)(a4 + 4) * v66, v68), v70) * 0.45;
LABEL_54:
            v85 = *(float *)(a3 + 1380) * v77;
            v86 = log(v85 * 0.5);
            v87 = trafficTextureMappingStepQuantizationScaler[*(_QWORD *)(v8 + 288)];
            v88 = expf((float)-ceilf(v87 * v86) / v87);
            v89 = *(_QWORD **)(v71 + 16);
            v90 = v89[1];
            v91 = (float32x4_t *)v89[9];
            v92 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v114[2]), v114[3]);
            *v91 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v114[0]), v114[1]);
            v91[1] = v92;
            v93 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v114[6]), v114[7]);
            v91[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v114[4]), v114[5]);
            v91[3] = v93;
            v91[5].i32[0] = 0;
            v91[5].f32[1] = v88 * 0.5;
            v91[5].f32[2] = v76;
            v91[4].f32[0] = v85;
            if (v89[8] > v90)
              v90 = v89[8];
            v89[7] = 0;
            v89[8] = v90;
            continue;
          }
          v78 = *(double *)(v8 + 312);
          v79 = *(std::__shared_weak_count **)(v8 + 320);
          if (*(double *)&v79 == 0.0)
          {
            v99 = 0.0;
          }
          else
          {
            v80 = (unint64_t *)&v79->__shared_owners_;
            do
              v81 = __ldxr(v80);
            while (__stxr(v81 + 1, v80));
            v99 = *(double *)&v79;
            do
              v82 = __ldxr(v80);
            while (__stxr(v82 + 1, v80));
          }
          v98 = v78;
          v100 = 0.0;
          v101 = 0;
          LOBYTE(v102) = 0;
          if (v78 != 0.0)
            LODWORD(v78) = (*(uint64_t (**)(double, double *))(**(_QWORD **)&v78 + 48))(COERCE_DOUBLE(*(_QWORD *)&v78), &v100);
          LOBYTE(v102) = LOBYTE(v78);
          if (*(double *)&v79 != 0.0)
          {
            v83 = (unint64_t *)&v79->__shared_owners_;
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
            LODWORD(v78) = LOBYTE(v102);
          }
          if (LODWORD(v78))
          {
            v115[0].i32[0] = 1065353216;
            v97 = 0;
            md::getRoadWidths((uint64_t)&v98, (float *)v115, (float *)&v97, &v96, *(float *)(a3 + 1352));
            v77 = fminf(fmaxf(*(float *)v115[0].i32 * v66, v68), v70) * 0.8;
            gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v98);
            v71 = *(_QWORD *)(v38 + 64);
            goto LABEL_54;
          }
        }
        *(_BYTE *)(v8 + 272) = 0;
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v98);
      }
    }
  }
}

void sub_19FB07AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22)
{
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;

  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  if (a20)
  {
    v26 = (unint64_t *)&a20->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  if (v22)
  {
    v28 = (unint64_t *)&v22->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::FlyoverTrafficLayer::rewriteBoundsAttributes(uint64_t this, ResourceAccessor *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;

  v2 = *(_QWORD **)(this + 8);
  v44 = *(_QWORD **)(this + 16);
  if (v2 != v44)
  {
    v4 = this;
    do
    {
      v45 = v2;
      v5 = *v2;
      v7 = *(_QWORD *)(v5 + 248);
      v6 = *(_QWORD *)(v5 + 256);
      v46 = v6;
      while (v7 != v6)
      {
        v47 = v7;
        v8 = *(uint64_t ***)(*(_QWORD *)v7 + 176);
        v9 = *(uint64_t ***)(*(_QWORD *)v7 + 184);
        while (v8 != v9)
        {
          v10 = *v8;
          v11 = **(_QWORD **)(**(_QWORD **)(v4 + 32) + 64);
          v12 = **v8;
          v13 = (*v8)[1];
          v14 = *(_QWORD *)(v11 + 8);
          v15 = v14 * v12;
          v16 = v14 * v13;
          if (v14 * v13 == v14 * v12)
          {
            v17 = 0;
          }
          else if (a2 && *(_BYTE *)(v11 + 17) != 2)
          {
            this = (*((uint64_t (**)(ResourceAccessor *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))a2->var0
                    + 7))(a2, **(_QWORD **)(**(_QWORD **)(v4 + 32) + 64), v15, v14 * v13, 1, 1);
            v17 = this;
          }
          else
          {
            v17 = *(_QWORD *)(v11 + 72) + v15;
          }
          v18 = v10[6];
          if (v18 == 1)
            goto LABEL_27;
          v19 = *((_DWORD *)v10 + 30);
          v21 = v10[13];
          v20 = v10[14];
          *(_QWORD *)(v17 + 112) = 0;
          *(_QWORD *)(v17 + 240) = 0;
          *(_QWORD *)(v17 + 368) = 0;
          *(_QWORD *)(v17 + 496) = 0;
          if ((v19 & 1) != 0 || (v22 = 0.0, v20) && !*(_BYTE *)(v20 + 84))
          {
            *(_DWORD *)(v17 + 112) = -1056964608;
            *(_DWORD *)(v17 + 240) = -1056964608;
            v22 = -8.0;
            if ((v19 & 2) != 0)
              goto LABEL_25;
          }
          else if ((v19 & 2) != 0)
          {
            goto LABEL_25;
          }
          if (v21 && !*(_BYTE *)(v21 + 84))
          {
LABEL_25:
            *(_DWORD *)(v17 + 372) = 1090519040;
            *(_DWORD *)(v17 + 500) = 1090519040;
          }
          *(_DWORD *)(v17 + 96) = -1082130432;
          *(_DWORD *)(v17 + 224) = -1082130432;
          v23 = *((_DWORD *)v10 + 33);
          v24 = *((_DWORD *)v10 + 31);
          *(_DWORD *)(v17 + 80) = 0;
          *(_DWORD *)(v17 + 84) = v24;
          *(_DWORD *)(v17 + 88) = v23;
          *(float *)(v17 + 112) = v22;
          *(_DWORD *)(v17 + 116) = 0;
          v25 = *((_DWORD *)v10 + 31);
          v26 = *((_DWORD *)v10 + 33);
          *(_DWORD *)(v17 + 208) = 0;
          *(_DWORD *)(v17 + 212) = v25;
          *(_DWORD *)(v17 + 216) = v26;
          *(float *)(v17 + 240) = v22;
          *(_DWORD *)(v17 + 244) = 0;
          v27 = *((_DWORD *)v10 + 31);
          v28 = *((_DWORD *)v10 + 33);
          *(_DWORD *)(v17 + 336) = 0;
          *(_DWORD *)(v17 + 340) = v27;
          *(_DWORD *)(v17 + 344) = v28;
          *(float *)(v17 + 368) = v22;
          *(_DWORD *)(v17 + 372) = 0;
          v29 = *((_DWORD *)v10 + 31);
          v30 = *((_DWORD *)v10 + 33);
          *(_DWORD *)(v17 + 464) = 0;
          *(_DWORD *)(v17 + 468) = v29;
          *(_DWORD *)(v17 + 472) = v30;
          *(float *)(v17 + 496) = v22;
          *(_DWORD *)(v17 + 500) = 0;
          if (v18 != 2)
          {
            v32 = v18 - 2;
            v33 = (_QWORD *)(v17 + 240);
            v34 = v17 + 592;
            do
            {
              *(_QWORD *)(v34 + 32) = 0;
              *(_QWORD *)(v34 + 160) = 0;
              *(_QWORD *)(v34 + 288) = 0;
              *(_QWORD *)(v34 + 416) = 0;
              if ((v19 & 1) != 0 || v20 && !*(_BYTE *)(v20 + 84))
              {
                *(_DWORD *)(v34 + 32) = -1056964608;
                *(_DWORD *)(v34 + 160) = -1056964608;
              }
              if ((v19 & 2) != 0 || v21 && !*(_BYTE *)(v21 + 84))
              {
                *(_DWORD *)(v34 + 292) = 1090519040;
                *(_DWORD *)(v34 + 420) = 1090519040;
              }
              v35 = *((_DWORD *)v10 + 33);
              v36 = *((_DWORD *)v10 + 31);
              *(_DWORD *)v34 = 0;
              *(_DWORD *)(v34 + 4) = v36;
              *(_DWORD *)(v34 + 8) = v35;
              *(_QWORD *)(v34 + 32) = *v33;
              v37 = *((_DWORD *)v10 + 31);
              v38 = *((_DWORD *)v10 + 33);
              *(_DWORD *)(v34 + 128) = 0;
              *(_DWORD *)(v34 + 132) = v37;
              *(_DWORD *)(v34 + 136) = v38;
              *(_QWORD *)(v34 + 160) = *v33;
              v39 = *((_DWORD *)v10 + 31);
              v40 = *((_DWORD *)v10 + 33);
              *(_DWORD *)(v34 + 256) = 0;
              *(_DWORD *)(v34 + 260) = v39;
              *(_DWORD *)(v34 + 264) = v40;
              *(_QWORD *)(v34 + 288) = *v33;
              v41 = *((_DWORD *)v10 + 31);
              v42 = *((_DWORD *)v10 + 33);
              *(_DWORD *)(v34 + 384) = 0;
              *(_DWORD *)(v34 + 388) = v41;
              *(_DWORD *)(v34 + 392) = v42;
              v43 = *v33;
              v33 += 16;
              *(_QWORD *)(v34 + 416) = v43;
              v34 += 512;
              --v32;
            }
            while (v32);
          }
LABEL_27:
          if (v17)
          {
            v31 = v16 == v15 || a2 == 0;
            if (!v31 && *(_BYTE *)(v11 + 17) != 2)
              this = (*((uint64_t (**)(ResourceAccessor *))a2->var0 + 8))(a2);
          }
          ++v8;
        }
        v6 = v46;
        v7 = v47 + 8;
      }
      v2 = v45 + 1;
    }
    while (v45 + 1 != v44);
  }
  return this;
}

void ggl::ConstantDataTyped<ggl::PolygonFill::Fill>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonFill::Fill>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0FE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonFill::Fill>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0FE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::PolygonFill::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolygonFill::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_8Building8GradientEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_8Building8GradientEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6B78;
  return result;
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,ggl::ConstantDataTyped<ggl::Building::Gradient> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,ggl::ConstantDataTyped<ggl::Building::Gradient> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D27E8;
  return result;
}

_QWORD *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,ggl::ConstantDataTyped<ggl::Building::Gradient> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE556798, 2, 1, 6, 1);
  result[25] = ggl::Building::Gradient::reflection(void)::reflection;
  *result = &off_1E42B9E70;
  return result;
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::VenueWallShadow::MeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::VenueWallShadow::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D27A0;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::VenueWallShadow::MeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 1224);
  v5 = *(std::__shared_weak_count **)(v1 + 1232);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B7490;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E19B8;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE56DF80, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::VenueWallShadow::WallShadow::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9270;
  v13 = v3[8];
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

uint64_t ggl::ConstantDataTyped<ggl::VenueWallShadow::WallShadow>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::VenueWallShadow::WallShadow>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWallShadow::WallShadow>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E19B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWallShadow::WallShadow>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E19B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWallShadow::WallShadow>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15VenueWallShadow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15VenueWallShadow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6548;
  return result;
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,ggl::VenueWallShadow::MeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,ggl::VenueWallShadow::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2758;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,ggl::VenueWallShadow::MeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 984);
  v5 = *(std::__shared_weak_count **)(v1 + 992);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B7490;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E19B8;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE56DF80, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::VenueWallShadow::WallShadow::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9270;
  v13 = v3[8];
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void std::__shared_ptr_emplace<ggl::VenueWallShadow::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF7D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VenueWallShadow::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF7D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_13Venue3DStroke34VerticalVenue3DStrokePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_13Venue3DStroke34VerticalVenue3DStrokePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6278;
  return result;
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2710;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 744);
  v5 = *(std::__shared_weak_count **)(v1 + 752);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B6898;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1440;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE54FC90, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::Venue3DStroke::Style::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8F30;
  v13 = v3[8];
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

uint64_t ggl::ConstantDataTyped<ggl::Venue3DStroke::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Venue3DStroke::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Venue3DStroke::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1440;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Venue3DStroke::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1440;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Venue3DStroke::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::Venue3DStroke::VerticalVenue3DStrokePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Venue3DStroke::VerticalVenue3DStrokePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_13Venue3DStroke36HorizontalVenue3DStrokePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_13Venue3DStroke36HorizontalVenue3DStrokePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D62C0;
  return result;
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D26C8;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 720);
  v5 = *(std::__shared_weak_count **)(v1 + 728);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B68E8;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1440;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE54FC90, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::Venue3DStroke::Style::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8F30;
  v13 = v3[8];
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void std::__shared_ptr_emplace<ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF098;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9VenueWall27WallEndCapMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9VenueWall27WallEndCapMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7E08;
  return result;
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::VenueWall::WallEndCapMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::VenueWall::WallEndCapMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2680;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::VenueWall::WallEndCapMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 696);
  v5 = *(std::__shared_weak_count **)(v1 + 704);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BE578;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2EF0;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE569310, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::VenueWall::WallEndCap::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BA030;
  v13 = v3[8];
  *(_QWORD *)(v13 + 48) = v12;
  *(_QWORD *)(v13 + 56) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 56);
  *(_QWORD *)(v14 + 48) = v12;
  *(_QWORD *)(v14 + 56) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

uint64_t ggl::ConstantDataTyped<ggl::VenueWall::WallEndCap>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::VenueWall::WallEndCap>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWall::WallEndCap>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2EF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWall::WallEndCap>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2EF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWall::WallEndCap>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VenueWall::WallEndCapMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5490;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VenueWall::WallEndCapMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5490;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9VenueWall24WallTopMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9VenueWall24WallTopMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7DC0;
  return result;
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::VenueWall::WallTopMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::VenueWall::WallTopMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2638;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::VenueWall::WallTopMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 456);
  v5 = *(std::__shared_weak_count **)(v1 + 464);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BE528;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2F60;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE569250, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::VenueWall::WallTop::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BA070;
  v13 = v3[8];
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 40);
  *(_QWORD *)(v14 + 32) = v12;
  *(_QWORD *)(v14 + 40) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

uint64_t ggl::ConstantDataTyped<ggl::VenueWall::WallTop>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::VenueWall::WallTop>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWall::WallTop>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2F60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWall::WallTop>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2F60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWall::WallTop>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VenueWall::WallTopMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VenueWall::WallTopMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5458;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9VenueWall17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9VenueWall17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7D78;
  return result;
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::VenueWall::MeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::VenueWall::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D25F0;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::VenueWall::MeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *v1;
  v5 = (std::__shared_weak_count *)v1[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BE4D8;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2F28;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE569150, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::VenueWall::Wall::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BA050;
  v13 = v3[8];
  *(_QWORD *)(v13 + 48) = v12;
  *(_QWORD *)(v13 + 56) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 56);
  *(_QWORD *)(v14 + 48) = v12;
  *(_QWORD *)(v14 + 56) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

uint64_t ggl::ConstantDataTyped<ggl::VenueWall::Wall>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::VenueWall::Wall>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWall::Wall>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2F28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWall::Wall>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2F28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWall::Wall>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VenueWall::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5420;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VenueWall::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5420;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_22VenueOpenToBelowShadow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_22VenueOpenToBelowShadow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6FF8;
  return result;
}

void std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::VenueOpenToBelowShadow::MeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::VenueOpenToBelowShadow::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3B50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::VenueOpenToBelowShadow::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3B50;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::VenueOpenToBelowShadow::MeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count **v15;
  std::__shared_weak_count **v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v5 = v3 + 1;
  ggl::BufferData::BufferData((uint64_t)&v3[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v3[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v6 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v6->__shared_owners_ = 0;
  v7 = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1FD8;
  v8 = v6 + 1;
  ggl::BufferData::BufferData((uint64_t)&v6[1], qword_1EE568CF0, 2, 1, 6, 1);
  v6[9].__shared_owners_ = (uint64_t)ggl::VenueOpenToBelowShadow::Style::reflection(void)::reflection;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9610;
  v9 = *(_QWORD *)(v1 + 480);
  v10 = *(std::__shared_weak_count **)(v1 + 488);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    ggl::PipelineSetup::PipelineSetup(v2, v9, (uint64_t)v10);
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v9, 0);
  }
  *v2 = &off_1E42BB0B0;
  v15 = (std::__shared_weak_count **)v2[8];
  *v15 = v5;
  v15[1] = 0;
  v16 = (std::__shared_weak_count **)v2[20];
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = v16[1];
  *v16 = v5;
  v16[1] = v3;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v2[8];
  *(_QWORD *)(v21 + 16) = v8;
  *(_QWORD *)(v21 + 24) = 0;
  v22 = v2[20];
  do
    v23 = __ldxr(v7);
  while (__stxr(v23 + 1, v7));
  v24 = *(std::__shared_weak_count **)(v22 + 24);
  *(_QWORD *)(v22 + 16) = v8;
  *(_QWORD *)(v22 + 24) = v6;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  do
    v27 = __ldaxr(v7);
  while (__stlxr(v27 - 1, v7));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v2;
}

void sub_19FB09BBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v5;

  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 - 1, v3));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  MEMORY[0x1A1AF4E00](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

uint64_t ggl::ConstantDataTyped<ggl::VenueOpenToBelowShadow::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::VenueOpenToBelowShadow::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueOpenToBelowShadow::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1FD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueOpenToBelowShadow::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1FD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueOpenToBelowShadow::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VenueOpenToBelowShadow::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3C48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VenueOpenToBelowShadow::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3C48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_27VenueOpenToBelowShadowAlpha17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_27VenueOpenToBelowShadowAlpha17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7280;
  return result;
}

void std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3B08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3B08;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count **v15;
  std::__shared_weak_count **v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v5 = v3 + 1;
  ggl::BufferData::BufferData((uint64_t)&v3[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v3[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v6 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v6->__shared_owners_ = 0;
  v7 = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1FD8;
  v8 = v6 + 1;
  ggl::BufferData::BufferData((uint64_t)&v6[1], qword_1EE568CF0, 2, 1, 6, 1);
  v6[9].__shared_owners_ = (uint64_t)ggl::VenueOpenToBelowShadow::Style::reflection(void)::reflection;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9610;
  v9 = *(_QWORD *)(v1 + 240);
  v10 = *(std::__shared_weak_count **)(v1 + 248);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    ggl::PipelineSetup::PipelineSetup(v2, v9, (uint64_t)v10);
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v9, 0);
  }
  *v2 = &off_1E42BB5C0;
  v15 = (std::__shared_weak_count **)v2[8];
  *v15 = v5;
  v15[1] = 0;
  v16 = (std::__shared_weak_count **)v2[20];
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = v16[1];
  *v16 = v5;
  v16[1] = v3;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v2[8];
  *(_QWORD *)(v21 + 16) = v8;
  *(_QWORD *)(v21 + 24) = 0;
  v22 = v2[20];
  do
    v23 = __ldxr(v7);
  while (__stxr(v23 + 1, v7));
  v24 = *(std::__shared_weak_count **)(v22 + 24);
  *(_QWORD *)(v22 + 16) = v8;
  *(_QWORD *)(v22 + 24) = v6;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  do
    v27 = __ldaxr(v7);
  while (__stlxr(v27 - 1, v7));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v2;
}

void sub_19FB0A0FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v5;

  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 - 1, v3));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  MEMORY[0x1A1AF4E00](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::VenueOpenToBelowShadowAlpha::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VenueOpenToBelowShadowAlpha::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4000;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16PolygonSolidFill27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16PolygonSolidFill27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6620;
  return result;
}

void std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3AC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3AC0;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t shared_owners;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t v16;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *v1;
  v5 = (std::__shared_weak_count *)v1[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B89C0;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE55CC40, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92D0;
  shared_owners = v10[1].__shared_owners_;
  v14 = v10[4].__vftable;
  v14->~__shared_weak_count = 0;
  v14->~__shared_weak_count_0 = 0;
  v15 = v10[4].__vftable;
  if (v10[3].__shared_weak_owners_ > shared_owners)
    shared_owners = v10[3].__shared_weak_owners_;
  v10[3].__shared_owners_ = 0;
  v16 = v10[1].__shared_owners_;
  v15->__on_zero_shared = 0;
  if (shared_owners <= v16)
    shared_owners = v16;
  __asm { FMOV            V0.2S, #1.0 }
  v15->__get_deleter = _D0;
  if (shared_owners <= v16)
    shared_owners = v16;
  v10[3].__shared_weak_owners_ = shared_owners;
  v22 = v3[8];
  *(_QWORD *)(v22 + 32) = v12;
  *(_QWORD *)(v22 + 40) = 0;
  v23 = v3[20];
  do
    v24 = __ldxr(v11);
  while (__stxr(v24 + 1, v11));
  v25 = *(std::__shared_weak_count **)(v23 + 40);
  *(_QWORD *)(v23 + 32) = v12;
  *(_QWORD *)(v23 + 40) = v10;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  do
    v28 = __ldaxr(v11);
  while (__stlxr(v28 - 1, v11));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void std::__shared_ptr_emplace<ggl::PolygonSolidFill::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0C98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolygonSolidFill::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0C98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3760;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3760;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t shared_owners;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t v16;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 720);
  v5 = *(std::__shared_weak_count **)(v1 + 728);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B89C0;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE55CC40, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92D0;
  shared_owners = v10[1].__shared_owners_;
  v14 = v10[4].__vftable;
  v14->~__shared_weak_count = 0;
  v14->~__shared_weak_count_0 = 0;
  v15 = v10[4].__vftable;
  if (v10[3].__shared_weak_owners_ > shared_owners)
    shared_owners = v10[3].__shared_weak_owners_;
  v10[3].__shared_owners_ = 0;
  v16 = v10[1].__shared_owners_;
  v15->__on_zero_shared = 0;
  if (shared_owners <= v16)
    shared_owners = v16;
  __asm { FMOV            V0.2S, #1.0 }
  v15->__get_deleter = _D0;
  if (shared_owners <= v16)
    shared_owners = v16;
  v10[3].__shared_weak_owners_ = shared_owners;
  v22 = v3[8];
  *(_QWORD *)(v22 + 32) = v12;
  *(_QWORD *)(v22 + 40) = 0;
  v23 = v3[20];
  do
    v24 = __ldxr(v11);
  while (__stxr(v24 + 1, v11));
  v25 = *(std::__shared_weak_count **)(v23 + 40);
  *(_QWORD *)(v23 + 32) = v12;
  *(_QWORD *)(v23 + 40) = v10;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  do
    v28 = __ldaxr(v11);
  while (__stlxr(v28 - 1, v11));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3718;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3718;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t shared_owners;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t v16;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 480);
  v5 = *(std::__shared_weak_count **)(v1 + 488);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B89C0;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE55CC40, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92D0;
  shared_owners = v10[1].__shared_owners_;
  v14 = v10[4].__vftable;
  v14->~__shared_weak_count = 0;
  v14->~__shared_weak_count_0 = 0;
  v15 = v10[4].__vftable;
  if (v10[3].__shared_weak_owners_ > shared_owners)
    shared_owners = v10[3].__shared_weak_owners_;
  v10[3].__shared_owners_ = 0;
  v16 = v10[1].__shared_owners_;
  v15->__on_zero_shared = 0;
  if (shared_owners <= v16)
    shared_owners = v16;
  __asm { FMOV            V0.2S, #1.0 }
  v15->__get_deleter = _D0;
  if (shared_owners <= v16)
    shared_owners = v16;
  v10[3].__shared_weak_owners_ = shared_owners;
  v22 = v3[8];
  *(_QWORD *)(v22 + 32) = v12;
  *(_QWORD *)(v22 + 40) = 0;
  v23 = v3[20];
  do
    v24 = __ldxr(v11);
  while (__stxr(v24 + 1, v11));
  v25 = *(std::__shared_weak_count **)(v23 + 40);
  *(_QWORD *)(v23 + 32) = v12;
  *(_QWORD *)(v23 + 40) = v10;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  do
    v28 = __ldaxr(v11);
  while (__stlxr(v28 - 1, v11));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D36D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D36D0;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t shared_owners;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t v16;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *v1;
  v5 = (std::__shared_weak_count *)v1[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B89C0;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE55CC40, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92D0;
  shared_owners = v10[1].__shared_owners_;
  v14 = v10[4].__vftable;
  v14->~__shared_weak_count = 0;
  v14->~__shared_weak_count_0 = 0;
  v15 = v10[4].__vftable;
  if (v10[3].__shared_weak_owners_ > shared_owners)
    shared_owners = v10[3].__shared_weak_owners_;
  v10[3].__shared_owners_ = 0;
  v16 = v10[1].__shared_owners_;
  v15->__on_zero_shared = 0;
  if (shared_owners <= v16)
    shared_owners = v16;
  __asm { FMOV            V0.2S, #1.0 }
  v15->__get_deleter = _D0;
  if (shared_owners <= v16)
    shared_owners = v16;
  v10[3].__shared_weak_owners_ = shared_owners;
  v22 = v3[8];
  *(_QWORD *)(v22 + 32) = v12;
  *(_QWORD *)(v22 + 40) = 0;
  v23 = v3[20];
  do
    v24 = __ldxr(v11);
  while (__stxr(v24 + 1, v11));
  v25 = *(std::__shared_weak_count **)(v23 + 40);
  *(_QWORD *)(v23 + 32) = v12;
  *(_QWORD *)(v23 + 40) = v10;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  do
    v28 = __ldaxr(v11);
  while (__stlxr(v28 - 1, v11));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void md::CVenueRenderResources::resetPools(md::CVenueRenderResources *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _OWORD *v73;
  __int128 *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _OWORD *v99;
  __int128 *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _OWORD *v125;
  __int128 *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _OWORD *v151;
  __int128 *v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _OWORD *v177;
  __int128 *v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t *v186;
  _QWORD *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  _OWORD *v203;
  __int128 *v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  void *v214;
  _QWORD *v215;
  uint64_t v216;
  unint64_t v217;
  void (***v218)(void);
  void (**v219)(void);

  v2 = (uint64_t *)*((_QWORD *)this + 67);
  v3 = (uint64_t *)v2[4];
  v4 = (uint64_t *)v2[5];
  if (v3 == v4)
    goto LABEL_33;
  v5 = (_QWORD *)v2[1];
  do
  {
    v6 = *v3;
    v7 = v2[2];
    if ((unint64_t)v5 < v7)
    {
      if (v5)
        *v5 = v6;
      ++v5;
      goto LABEL_4;
    }
    v8 = ((uint64_t)v5 - *v2) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
LABEL_271:
      abort();
    v9 = v7 - *v2;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = 8 * v11;
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[3] + 16))(v2[3], 8 * v11, 8);
      v14 = (_QWORD *)(v13 + 8 * v8);
      v11 = v13 + v12;
      if (v13)
        *v14 = v6;
    }
    else
    {
      v14 = (_QWORD *)(8 * v8);
    }
    v16 = *v2;
    v15 = v2[1];
    v17 = v15 - *v2;
    if (v15 == *v2)
    {
      v19 = v14;
      goto LABEL_29;
    }
    v18 = v17 - 8;
    if ((unint64_t)(v17 - 8) < 0x38)
    {
      v19 = v14;
    }
    else
    {
      v19 = v14;
      if ((unint64_t)(v15 - (_QWORD)v14) >= 0x20)
      {
        v20 = (v18 >> 3) + 1;
        v21 = v14 - 2;
        v22 = (__int128 *)(v15 - 16);
        v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = *v22;
          *(v21 - 1) = *(v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 2;
          v23 -= 4;
        }
        while (v23);
        v19 = &v14[-(v20 & 0x3FFFFFFFFFFFFFFCLL)];
        v15 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
    }
    do
    {
      v25 = *(_QWORD *)(v15 - 8);
      v15 -= 8;
      *--v19 = v25;
    }
    while (v15 != v16);
LABEL_28:
    v15 = *v2;
LABEL_29:
    v5 = v14 + 1;
    *v2 = (uint64_t)v19;
    v2[1] = (uint64_t)(v14 + 1);
    v26 = v2[2];
    v2[2] = v11;
    if (v15)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[3] + 40))(v2[3], v15, v26 - v15);
LABEL_4:
    v2[1] = (uint64_t)v5;
    ++v3;
  }
  while (v3 != v4);
  v27 = v2[4];
  if (v27 != v2[5])
    v2[5] = v27;
LABEL_33:
  v28 = (uint64_t *)*((_QWORD *)this + 124);
  v29 = (uint64_t *)v28[4];
  v30 = (uint64_t *)v28[5];
  if (v29 == v30)
    goto LABEL_65;
  v31 = (_QWORD *)v28[1];
  while (2)
  {
    v32 = *v29;
    v33 = v28[2];
    if ((unint64_t)v31 < v33)
    {
      if (v31)
        *v31 = v32;
      ++v31;
      goto LABEL_36;
    }
    v34 = ((uint64_t)v31 - *v28) >> 3;
    if ((unint64_t)(v34 + 1) >> 61)
      goto LABEL_271;
    v35 = v33 - *v28;
    v36 = v35 >> 2;
    if (v35 >> 2 <= (unint64_t)(v34 + 1))
      v36 = v34 + 1;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v37 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v37 = v36;
    if (v37)
    {
      v38 = 8 * v37;
      v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28[3] + 16))(v28[3], 8 * v37, 8);
      v40 = (_QWORD *)(v39 + 8 * v34);
      v37 = v39 + v38;
      if (v39)
        *v40 = v32;
    }
    else
    {
      v40 = (_QWORD *)(8 * v34);
    }
    v42 = *v28;
    v41 = v28[1];
    v43 = v41 - *v28;
    if (v41 == *v28)
    {
      v45 = v40;
      goto LABEL_61;
    }
    v44 = v43 - 8;
    if ((unint64_t)(v43 - 8) < 0x38)
    {
      v45 = v40;
      do
      {
LABEL_59:
        v51 = *(_QWORD *)(v41 - 8);
        v41 -= 8;
        *--v45 = v51;
      }
      while (v41 != v42);
      goto LABEL_60;
    }
    v45 = v40;
    if ((unint64_t)(v41 - (_QWORD)v40) < 0x20)
      goto LABEL_59;
    v46 = (v44 >> 3) + 1;
    v47 = v40 - 2;
    v48 = (__int128 *)(v41 - 16);
    v49 = v46 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v50 = *v48;
      *(v47 - 1) = *(v48 - 1);
      *v47 = v50;
      v47 -= 2;
      v48 -= 2;
      v49 -= 4;
    }
    while (v49);
    v45 = &v40[-(v46 & 0x3FFFFFFFFFFFFFFCLL)];
    v41 -= 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
    if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_59;
LABEL_60:
    v41 = *v28;
LABEL_61:
    v31 = v40 + 1;
    *v28 = (uint64_t)v45;
    v28[1] = (uint64_t)(v40 + 1);
    v52 = v28[2];
    v28[2] = v37;
    if (v41)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28[3] + 40))(v28[3], v41, v52 - v41);
LABEL_36:
    v28[1] = (uint64_t)v31;
    if (++v29 != v30)
      continue;
    break;
  }
  v53 = v28[4];
  if (v53 != v28[5])
    v28[5] = v53;
LABEL_65:
  v54 = (uint64_t *)*((_QWORD *)this + 154);
  v55 = (uint64_t *)v54[4];
  v56 = (uint64_t *)v54[5];
  if (v55 == v56)
    goto LABEL_97;
  v57 = (_QWORD *)v54[1];
  while (2)
  {
    v58 = *v55;
    v59 = v54[2];
    if ((unint64_t)v57 < v59)
    {
      if (v57)
        *v57 = v58;
      ++v57;
      goto LABEL_68;
    }
    v60 = ((uint64_t)v57 - *v54) >> 3;
    if ((unint64_t)(v60 + 1) >> 61)
      goto LABEL_271;
    v61 = v59 - *v54;
    v62 = v61 >> 2;
    if (v61 >> 2 <= (unint64_t)(v60 + 1))
      v62 = v60 + 1;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v62;
    if (v63)
    {
      v64 = 8 * v63;
      v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54[3] + 16))(v54[3], 8 * v63, 8);
      v66 = (_QWORD *)(v65 + 8 * v60);
      v63 = v65 + v64;
      if (v65)
        *v66 = v58;
    }
    else
    {
      v66 = (_QWORD *)(8 * v60);
    }
    v68 = *v54;
    v67 = v54[1];
    v69 = v67 - *v54;
    if (v67 == *v54)
    {
      v71 = v66;
      goto LABEL_93;
    }
    v70 = v69 - 8;
    if ((unint64_t)(v69 - 8) < 0x38)
    {
      v71 = v66;
      do
      {
LABEL_91:
        v77 = *(_QWORD *)(v67 - 8);
        v67 -= 8;
        *--v71 = v77;
      }
      while (v67 != v68);
      goto LABEL_92;
    }
    v71 = v66;
    if ((unint64_t)(v67 - (_QWORD)v66) < 0x20)
      goto LABEL_91;
    v72 = (v70 >> 3) + 1;
    v73 = v66 - 2;
    v74 = (__int128 *)(v67 - 16);
    v75 = v72 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v76 = *v74;
      *(v73 - 1) = *(v74 - 1);
      *v73 = v76;
      v73 -= 2;
      v74 -= 2;
      v75 -= 4;
    }
    while (v75);
    v71 = &v66[-(v72 & 0x3FFFFFFFFFFFFFFCLL)];
    v67 -= 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
    if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_91;
LABEL_92:
    v67 = *v54;
LABEL_93:
    v57 = v66 + 1;
    *v54 = (uint64_t)v71;
    v54[1] = (uint64_t)(v66 + 1);
    v78 = v54[2];
    v54[2] = v63;
    if (v67)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54[3] + 40))(v54[3], v67, v78 - v67);
LABEL_68:
    v54[1] = (uint64_t)v57;
    if (++v55 != v56)
      continue;
    break;
  }
  v79 = v54[4];
  if (v79 != v54[5])
    v54[5] = v79;
LABEL_97:
  v80 = (uint64_t *)*((_QWORD *)this + 157);
  v81 = (uint64_t *)v80[4];
  v82 = (uint64_t *)v80[5];
  if (v81 == v82)
    goto LABEL_129;
  v83 = (_QWORD *)v80[1];
  while (2)
  {
    v84 = *v81;
    v85 = v80[2];
    if ((unint64_t)v83 < v85)
    {
      if (v83)
        *v83 = v84;
      ++v83;
      goto LABEL_100;
    }
    v86 = ((uint64_t)v83 - *v80) >> 3;
    if ((unint64_t)(v86 + 1) >> 61)
      goto LABEL_271;
    v87 = v85 - *v80;
    v88 = v87 >> 2;
    if (v87 >> 2 <= (unint64_t)(v86 + 1))
      v88 = v86 + 1;
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
      v89 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v89 = v88;
    if (v89)
    {
      v90 = 8 * v89;
      v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80[3] + 16))(v80[3], 8 * v89, 8);
      v92 = (_QWORD *)(v91 + 8 * v86);
      v89 = v91 + v90;
      if (v91)
        *v92 = v84;
    }
    else
    {
      v92 = (_QWORD *)(8 * v86);
    }
    v94 = *v80;
    v93 = v80[1];
    v95 = v93 - *v80;
    if (v93 == *v80)
    {
      v97 = v92;
      goto LABEL_125;
    }
    v96 = v95 - 8;
    if ((unint64_t)(v95 - 8) < 0x38)
    {
      v97 = v92;
      do
      {
LABEL_123:
        v103 = *(_QWORD *)(v93 - 8);
        v93 -= 8;
        *--v97 = v103;
      }
      while (v93 != v94);
      goto LABEL_124;
    }
    v97 = v92;
    if ((unint64_t)(v93 - (_QWORD)v92) < 0x20)
      goto LABEL_123;
    v98 = (v96 >> 3) + 1;
    v99 = v92 - 2;
    v100 = (__int128 *)(v93 - 16);
    v101 = v98 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v102 = *v100;
      *(v99 - 1) = *(v100 - 1);
      *v99 = v102;
      v99 -= 2;
      v100 -= 2;
      v101 -= 4;
    }
    while (v101);
    v97 = &v92[-(v98 & 0x3FFFFFFFFFFFFFFCLL)];
    v93 -= 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
    if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_123;
LABEL_124:
    v93 = *v80;
LABEL_125:
    v83 = v92 + 1;
    *v80 = (uint64_t)v97;
    v80[1] = (uint64_t)(v92 + 1);
    v104 = v80[2];
    v80[2] = v89;
    if (v93)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80[3] + 40))(v80[3], v93, v104 - v93);
LABEL_100:
    v80[1] = (uint64_t)v83;
    if (++v81 != v82)
      continue;
    break;
  }
  v105 = v80[4];
  if (v105 != v80[5])
    v80[5] = v105;
LABEL_129:
  v106 = (uint64_t *)*((_QWORD *)this + 160);
  v107 = (uint64_t *)v106[4];
  v108 = (uint64_t *)v106[5];
  if (v107 == v108)
    goto LABEL_161;
  v109 = (_QWORD *)v106[1];
  while (2)
  {
    v110 = *v107;
    v111 = v106[2];
    if ((unint64_t)v109 < v111)
    {
      if (v109)
        *v109 = v110;
      ++v109;
      goto LABEL_132;
    }
    v112 = ((uint64_t)v109 - *v106) >> 3;
    if ((unint64_t)(v112 + 1) >> 61)
      goto LABEL_271;
    v113 = v111 - *v106;
    v114 = v113 >> 2;
    if (v113 >> 2 <= (unint64_t)(v112 + 1))
      v114 = v112 + 1;
    if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
      v115 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v115 = v114;
    if (v115)
    {
      v116 = 8 * v115;
      v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106[3] + 16))(v106[3], 8 * v115, 8);
      v118 = (_QWORD *)(v117 + 8 * v112);
      v115 = v117 + v116;
      if (v117)
        *v118 = v110;
    }
    else
    {
      v118 = (_QWORD *)(8 * v112);
    }
    v120 = *v106;
    v119 = v106[1];
    v121 = v119 - *v106;
    if (v119 == *v106)
    {
      v123 = v118;
      goto LABEL_157;
    }
    v122 = v121 - 8;
    if ((unint64_t)(v121 - 8) < 0x38)
    {
      v123 = v118;
      do
      {
LABEL_155:
        v129 = *(_QWORD *)(v119 - 8);
        v119 -= 8;
        *--v123 = v129;
      }
      while (v119 != v120);
      goto LABEL_156;
    }
    v123 = v118;
    if ((unint64_t)(v119 - (_QWORD)v118) < 0x20)
      goto LABEL_155;
    v124 = (v122 >> 3) + 1;
    v125 = v118 - 2;
    v126 = (__int128 *)(v119 - 16);
    v127 = v124 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v128 = *v126;
      *(v125 - 1) = *(v126 - 1);
      *v125 = v128;
      v125 -= 2;
      v126 -= 2;
      v127 -= 4;
    }
    while (v127);
    v123 = &v118[-(v124 & 0x3FFFFFFFFFFFFFFCLL)];
    v119 -= 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
    if (v124 != (v124 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_155;
LABEL_156:
    v119 = *v106;
LABEL_157:
    v109 = v118 + 1;
    *v106 = (uint64_t)v123;
    v106[1] = (uint64_t)(v118 + 1);
    v130 = v106[2];
    v106[2] = v115;
    if (v119)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106[3] + 40))(v106[3], v119, v130 - v119);
LABEL_132:
    v106[1] = (uint64_t)v109;
    if (++v107 != v108)
      continue;
    break;
  }
  v131 = v106[4];
  if (v131 != v106[5])
    v106[5] = v131;
LABEL_161:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 220));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 190));
  v132 = (uint64_t *)*((_QWORD *)this + 248);
  v133 = (uint64_t *)v132[4];
  v134 = (uint64_t *)v132[5];
  if (v133 == v134)
    goto LABEL_193;
  v135 = (_QWORD *)v132[1];
  while (2)
  {
    v136 = *v133;
    v137 = v132[2];
    if ((unint64_t)v135 < v137)
    {
      if (v135)
        *v135 = v136;
      ++v135;
      goto LABEL_164;
    }
    v138 = ((uint64_t)v135 - *v132) >> 3;
    if ((unint64_t)(v138 + 1) >> 61)
      goto LABEL_271;
    v139 = v137 - *v132;
    v140 = v139 >> 2;
    if (v139 >> 2 <= (unint64_t)(v138 + 1))
      v140 = v138 + 1;
    if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
      v141 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v141 = v140;
    if (v141)
    {
      v142 = 8 * v141;
      v143 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v132[3] + 16))(v132[3], 8 * v141, 8);
      v144 = (_QWORD *)(v143 + 8 * v138);
      v141 = v143 + v142;
      if (v143)
        *v144 = v136;
    }
    else
    {
      v144 = (_QWORD *)(8 * v138);
    }
    v146 = *v132;
    v145 = v132[1];
    v147 = v145 - *v132;
    if (v145 == *v132)
    {
      v149 = v144;
      goto LABEL_189;
    }
    v148 = v147 - 8;
    if ((unint64_t)(v147 - 8) < 0x38)
    {
      v149 = v144;
      do
      {
LABEL_187:
        v155 = *(_QWORD *)(v145 - 8);
        v145 -= 8;
        *--v149 = v155;
      }
      while (v145 != v146);
      goto LABEL_188;
    }
    v149 = v144;
    if ((unint64_t)(v145 - (_QWORD)v144) < 0x20)
      goto LABEL_187;
    v150 = (v148 >> 3) + 1;
    v151 = v144 - 2;
    v152 = (__int128 *)(v145 - 16);
    v153 = v150 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v154 = *v152;
      *(v151 - 1) = *(v152 - 1);
      *v151 = v154;
      v151 -= 2;
      v152 -= 2;
      v153 -= 4;
    }
    while (v153);
    v149 = &v144[-(v150 & 0x3FFFFFFFFFFFFFFCLL)];
    v145 -= 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
    if (v150 != (v150 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_187;
LABEL_188:
    v145 = *v132;
LABEL_189:
    v135 = v144 + 1;
    *v132 = (uint64_t)v149;
    v132[1] = (uint64_t)(v144 + 1);
    v156 = v132[2];
    v132[2] = v141;
    if (v145)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v132[3] + 40))(v132[3], v145, v156 - v145);
LABEL_164:
    v132[1] = (uint64_t)v135;
    if (++v133 != v134)
      continue;
    break;
  }
  v157 = v132[4];
  if (v157 != v132[5])
    v132[5] = v157;
LABEL_193:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 251));
  v158 = (uint64_t *)*((_QWORD *)this + 281);
  v159 = (uint64_t *)v158[4];
  v160 = (uint64_t *)v158[5];
  if (v159 == v160)
    goto LABEL_225;
  v161 = (_QWORD *)v158[1];
  while (2)
  {
    v162 = *v159;
    v163 = v158[2];
    if ((unint64_t)v161 < v163)
    {
      if (v161)
        *v161 = v162;
      ++v161;
      goto LABEL_196;
    }
    v164 = ((uint64_t)v161 - *v158) >> 3;
    if ((unint64_t)(v164 + 1) >> 61)
      goto LABEL_271;
    v165 = v163 - *v158;
    v166 = v165 >> 2;
    if (v165 >> 2 <= (unint64_t)(v164 + 1))
      v166 = v164 + 1;
    if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8)
      v167 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v167 = v166;
    if (v167)
    {
      v168 = 8 * v167;
      v169 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v158[3] + 16))(v158[3], 8 * v167, 8);
      v170 = (_QWORD *)(v169 + 8 * v164);
      v167 = v169 + v168;
      if (v169)
        *v170 = v162;
    }
    else
    {
      v170 = (_QWORD *)(8 * v164);
    }
    v172 = *v158;
    v171 = v158[1];
    v173 = v171 - *v158;
    if (v171 == *v158)
    {
      v175 = v170;
      goto LABEL_221;
    }
    v174 = v173 - 8;
    if ((unint64_t)(v173 - 8) < 0x38)
    {
      v175 = v170;
      do
      {
LABEL_219:
        v181 = *(_QWORD *)(v171 - 8);
        v171 -= 8;
        *--v175 = v181;
      }
      while (v171 != v172);
      goto LABEL_220;
    }
    v175 = v170;
    if ((unint64_t)(v171 - (_QWORD)v170) < 0x20)
      goto LABEL_219;
    v176 = (v174 >> 3) + 1;
    v177 = v170 - 2;
    v178 = (__int128 *)(v171 - 16);
    v179 = v176 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v180 = *v178;
      *(v177 - 1) = *(v178 - 1);
      *v177 = v180;
      v177 -= 2;
      v178 -= 2;
      v179 -= 4;
    }
    while (v179);
    v175 = &v170[-(v176 & 0x3FFFFFFFFFFFFFFCLL)];
    v171 -= 8 * (v176 & 0x3FFFFFFFFFFFFFFCLL);
    if (v176 != (v176 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_219;
LABEL_220:
    v171 = *v158;
LABEL_221:
    v161 = v170 + 1;
    *v158 = (uint64_t)v175;
    v158[1] = (uint64_t)(v170 + 1);
    v182 = v158[2];
    v158[2] = v167;
    if (v171)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v158[3] + 40))(v158[3], v171, v182 - v171);
LABEL_196:
    v158[1] = (uint64_t)v161;
    if (++v159 != v160)
      continue;
    break;
  }
  v183 = v158[4];
  if (v183 != v158[5])
    v158[5] = v183;
LABEL_225:
  v184 = (uint64_t *)*((_QWORD *)this + 311);
  v185 = (uint64_t *)v184[4];
  v186 = (uint64_t *)v184[5];
  if (v185 == v186)
    goto LABEL_257;
  v187 = (_QWORD *)v184[1];
  while (2)
  {
    v188 = *v185;
    v189 = v184[2];
    if ((unint64_t)v187 < v189)
    {
      if (v187)
        *v187 = v188;
      ++v187;
      goto LABEL_228;
    }
    v190 = ((uint64_t)v187 - *v184) >> 3;
    if ((unint64_t)(v190 + 1) >> 61)
      goto LABEL_271;
    v191 = v189 - *v184;
    v192 = v191 >> 2;
    if (v191 >> 2 <= (unint64_t)(v190 + 1))
      v192 = v190 + 1;
    if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFF8)
      v193 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v193 = v192;
    if (v193)
    {
      v194 = 8 * v193;
      v195 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v184[3] + 16))(v184[3], 8 * v193, 8);
      v196 = (_QWORD *)(v195 + 8 * v190);
      v193 = v195 + v194;
      if (v195)
        *v196 = v188;
    }
    else
    {
      v196 = (_QWORD *)(8 * v190);
    }
    v198 = *v184;
    v197 = v184[1];
    v199 = v197 - *v184;
    if (v197 == *v184)
    {
      v201 = v196;
      goto LABEL_253;
    }
    v200 = v199 - 8;
    if ((unint64_t)(v199 - 8) < 0x38)
    {
      v201 = v196;
      do
      {
LABEL_251:
        v207 = *(_QWORD *)(v197 - 8);
        v197 -= 8;
        *--v201 = v207;
      }
      while (v197 != v198);
      goto LABEL_252;
    }
    v201 = v196;
    if ((unint64_t)(v197 - (_QWORD)v196) < 0x20)
      goto LABEL_251;
    v202 = (v200 >> 3) + 1;
    v203 = v196 - 2;
    v204 = (__int128 *)(v197 - 16);
    v205 = v202 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v206 = *v204;
      *(v203 - 1) = *(v204 - 1);
      *v203 = v206;
      v203 -= 2;
      v204 -= 2;
      v205 -= 4;
    }
    while (v205);
    v201 = &v196[-(v202 & 0x3FFFFFFFFFFFFFFCLL)];
    v197 -= 8 * (v202 & 0x3FFFFFFFFFFFFFFCLL);
    if (v202 != (v202 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_251;
LABEL_252:
    v197 = *v184;
LABEL_253:
    v187 = v196 + 1;
    *v184 = (uint64_t)v201;
    v184[1] = (uint64_t)(v196 + 1);
    v208 = v184[2];
    v184[2] = v193;
    if (v197)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v184[3] + 40))(v184[3], v197, v208 - v197);
LABEL_228:
    v184[1] = (uint64_t)v187;
    if (++v185 != v186)
      continue;
    break;
  }
  v209 = v184[4];
  if (v209 != v184[5])
    v184[5] = v209;
LABEL_257:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 341));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 401));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 431));
  v210 = *((_QWORD *)this + 468);
  v211 = *((_QWORD *)this + 467);
  if (v210 != v211)
  {
    v212 = *((_QWORD *)this + 468);
    do
    {
      v214 = *(void **)(v212 - 24);
      v212 -= 24;
      v213 = v214;
      if (v214)
      {
        *(_QWORD *)(v210 - 16) = v213;
        operator delete(v213);
      }
      v210 = v212;
    }
    while (v212 != v211);
  }
  *((_QWORD *)this + 468) = v211;
  *((_QWORD *)this + 465) = *((_QWORD *)this + 464);
  v215 = (_QWORD *)*((_QWORD *)this + 474);
  if (v215)
  {
    do
    {
      if (v215[1])
      {
        v217 = 0;
        v218 = (void (***)(void))(v215 + 2);
        do
        {
          v219 = *v218;
          v218 += 15;
          (*v219)();
          ++v217;
        }
        while (v217 < v215[1]);
      }
      v215[1] = 0;
      v215 = (_QWORD *)*v215;
    }
    while (v215);
    v216 = *((_QWORD *)this + 474);
  }
  else
  {
    v216 = 0;
  }
  *((_QWORD *)this + 475) = v216;
}

void md::MuninRoadLabelMarker::~MuninRoadLabelMarker(md::MuninRoadLabelMarker *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E4299200;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::LabelMarker::~LabelMarker(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E4299200;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::LabelMarker::~LabelMarker(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::MuninRoadLabelMarker::isMuninRoadLabel(md::MuninRoadLabelMarker *this)
{
  return 1;
}

BOOL md::MuninRoadLabelMarker::isVisible(md::MuninRoadLabelMarker *this)
{
  return (*(_BYTE *)(*((_QWORD *)this + 39) + 538) & 0xFD) == 1;
}

uint64_t md::MuninRoadLabelMarker::featureTile@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 304);
  *a2 = *(_QWORD *)(this + 296);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void md::MuninRoadLabelMarker::featureHandles(md::MuninRoadLabelMarker *this@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v4 = a2 + 3;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  {
    v24 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v24, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v6 = mdm::Allocator::instance(void)::alloc;
  *v4 = mdm::Allocator::instance(void)::alloc;
  if (*((_QWORD *)this + 36))
  {
    v7 = (a2[1] - *a2) >> 6;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 58)
      abort();
    v9 = a2[2] - *a2;
    if (v9 >> 5 > v8)
      v8 = v9 >> 5;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0)
      v10 = 0x3FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    v27 = v4;
    if (v10)
    {
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v10 << 6, 8);
      v12 = v11 + (v7 << 6);
      v10 = v11 + (v10 << 6);
      if (v11)
        v12 = md::MarkerFeatureHandle::MarkerFeatureHandle(v12, *((_QWORD *)this + 36), *((unsigned __int8 *)this + 225));
    }
    else
    {
      v12 = v7 << 6;
    }
    v13 = v12 + 64;
    v15 = *a2;
    v14 = a2[1];
    if (v14 == *a2)
    {
      v19 = a2[1];
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = v12 + v16;
        v18 = v14 + v16;
        *(_OWORD *)(v17 - 64) = *(_OWORD *)(v14 + v16 - 64);
        *(_WORD *)(v17 - 48) = *(_WORD *)(v14 + v16 - 48);
        *(_QWORD *)(v17 - 44) = *(_QWORD *)(v14 + v16 - 44);
        *(_QWORD *)(v17 - 24) = *(_QWORD *)(v14 + v16 - 24);
        *(_OWORD *)(v17 - 16) = *(_OWORD *)(v14 + v16 - 16);
        *(_QWORD *)(v18 - 16) = 0;
        *(_QWORD *)(v18 - 8) = 0;
        v16 -= 64;
      }
      while (v14 + v16 != v15);
      v12 += v16;
      v19 = *a2;
      v14 = a2[1];
    }
    *a2 = v12;
    a2[1] = v13;
    v20 = a2[2];
    a2[2] = v10;
    v26 = v20;
    if (v14 == v19)
    {
      if (!v14)
      {
LABEL_21:
        a2[1] = v13;
        return;
      }
    }
    else
    {
      do
      {
        v25 = v14 - 64;
        v21 = *(std::__shared_weak_count **)(v14 - 8);
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v14 = v25;
      }
      while (v25 != v19);
      v14 = v19;
      if (!v19)
        goto LABEL_21;
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v27 + 40))(*v27, v14, v26 - v14);
    goto LABEL_21;
  }
}

void sub_19FB0BC84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  va_list va;

  va_start(va, a2);
  std::__split_buffer<md::MarkerFeatureHandle,geo::StdAllocator<md::MarkerFeatureHandle,mdm::Allocator> &>::~__split_buffer((uint64_t)va);
  std::vector<md::MarkerFeatureHandle,geo::StdAllocator<md::MarkerFeatureHandle,mdm::Allocator>>::~vector[abi:nn180100](v2);
  _Unwind_Resume(a1);
}

uint64_t md::MuninRoadLabelMarker::calloutAnchorRect(md::MuninRoadLabelMarker *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(md::MuninRoadLabelMarker *))(*(_QWORD *)this + 464))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, float, float, float, float))(**(_QWORD **)(*((_QWORD *)this + 39) + 64)
                                                                         + 256))(*(_QWORD *)(*((_QWORD *)this + 39) + 64), 0.0, 0.0, 0.0, 0.0);
  return result;
}

float md::MuninRoadLabelMarker::screenCollisionBounds(md::MuninRoadLabelMarker *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  float v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  if (!v2)
    return 3.4028e38;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 3.4028e38;
  v4 = v3;
  if (*((_QWORD *)this + 29))
    v5 = *(float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 39) + 64) + 24) + 392);
  else
    v5 = 3.4028e38;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

uint64_t md::MuninRoadLabelMarker::screenPixelBounds(md::MuninRoadLabelMarker *this)
{
  return (*(uint64_t (**)(md::MuninRoadLabelMarker *))(*(_QWORD *)this + 568))(this);
}

double md::MuninRoadLabelMarker::coordinate@<D0>(md::MuninRoadLabelMarker *this@<X0>, double *a2@<X8>)
{
  double *v3;
  long double v4;
  long double v5;
  long double v6;
  double v7;
  double v8;
  double v9;
  __double2 v10;
  double v11;
  __double2 v12;
  double result;

  v3 = (double *)*((_QWORD *)this + 39);
  v4 = v3[27];
  v5 = v3[28];
  v6 = v3[29];
  v7 = sqrt(v4 * v4 + v5 * v5);
  v8 = atan2(v6, v7 * 0.996647189);
  v9 = atan2(v5, v4);
  v10 = __sincos_stret(v8);
  v11 = atan2(v6 + v10.__sinval * v10.__sinval * 42841.3115 * v10.__sinval, v7 + v10.__cosval * v10.__cosval * -42697.6727 * v10.__cosval);
  v12 = __sincos_stret(v11);
  result = v7 / v12.__cosval + -6378137.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0);
  *a2 = v11 * 57.2957795;
  a2[1] = v9 * 57.2957795;
  a2[2] = result;
  return result;
}

double md::MuninRoadLabelMarker::calloutAnchorPoint(md::MuninRoadLabelMarker *this)
{
  return *MEMORY[0x1E0C9D538];
}

uint64_t std::__split_buffer<md::MarkerFeatureHandle,geo::StdAllocator<md::MarkerFeatureHandle,mdm::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

void sub_19FB0C020(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t altitude::RootTileData::RootTileData(uint64_t a1, _OWORD *a2, int a3, __int128 *a4, __int128 *a5, char a6, char a7, __int128 *a8, __int128 *a9, int a10, int a11, char a12, char a13, char a14, int a15, int a16, int a17)
{
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;

  *(_QWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = *a2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  v20 = (std::string *)(a1 + 40);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v21 = *a4;
    v20->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v22 = (std::string *)(a1 + 88);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v23 = *a5;
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a5 + 2);
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
  }
  v24 = (std::string *)(a1 + 112);
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v25 = *a8;
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a8 + 2);
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
  }
  v26 = (std::string *)(a1 + 136);
  if (*((char *)a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a9, *((_QWORD *)a9 + 1));
  }
  else
  {
    v27 = *a9;
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a9 + 2);
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
  }
  *(_BYTE *)(a1 + 160) = a12;
  *(_BYTE *)(a1 + 161) = a13;
  *(_BYTE *)(a1 + 162) = a14;
  *(_BYTE *)(a1 + 163) = a6;
  *(_BYTE *)(a1 + 164) = a7;
  *(_WORD *)(a1 + 165) = 256;
  *(_DWORD *)(a1 + 168) = a10;
  *(_DWORD *)(a1 + 172) = a11;
  *(_DWORD *)(a1 + 176) = a15;
  *(_DWORD *)(a1 + 180) = a16;
  *(_DWORD *)(a1 + 184) = a17;
  return a1;
}

void altitude::RootTileData::~RootTileData(altitude::RootTileData *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 159) < 0)
  {
    operator delete(*((void **)this + 17));
    if ((*((char *)this + 135) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*((char *)this + 111) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
  else if ((*((char *)this + 135) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*((void **)this + 14));
  if ((*((char *)this + 111) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*((char *)this + 87) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*((void **)this + 11));
  if ((*((char *)this + 87) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*((char *)this + 63) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(*((void **)this + 5));
    return;
  }
LABEL_12:
  operator delete(*((void **)this + 8));
  if (*((char *)this + 63) < 0)
    goto LABEL_13;
}

void altitude::HeightRequest::~HeightRequest(altitude::HeightRequest *this)
{
  altitude::HeightRequest::~HeightRequest(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)this = &off_1E42C40D0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 55));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 42);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 42);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  karo::Job::~Job(this);
}

void altitude::HeightRequest::jobStep(altitude::HeightRequest *this)
{
  _OWORD *v2;
  char *SubJob;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  int v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unint64_t TileIdWithDataForTileId;
  unint64_t v29;
  BOOL v30;
  BOOL v31;
  uint64_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  int v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  char v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  char *v106;
  std::__shared_weak_count *v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t *v111;
  _QWORD **v112;
  int v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  int v128;
  int v129;
  unsigned int v130;
  uint64_t v131;
  void *v132;
  int v133;
  uint64_t *v134;
  uint64_t *v135;
  char *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t *v144;
  _QWORD **v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  int v154;
  unsigned int v155;
  int v156;
  uint64_t v157;
  void *v158;
  int v159;
  uint64_t *v160;
  uint64_t *v161;
  char *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  int v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  int v177;
  _QWORD **v178;
  uint64_t *v179;
  uint64_t *v180;
  char *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t *v184;
  char *v185;
  char *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  int v190;
  size_t v191;
  const char *v192;
  size_t v193;
  unint64_t v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  _BYTE *v199;
  unsigned __int8 v200;
  int v201;
  const std::string::value_type *p_buf;
  std::string::size_type v203;
  std::string *v204;
  std::string::value_type *v205;
  std::string::size_type size;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  uint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  char v215;
  int v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  char *v234;
  char *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  int v239;
  int v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  __int128 v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  NSObject *v253;
  char *v254;
  std::__shared_weak_count *v255;
  uint64_t *v256;
  void *v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  int v261;
  BOOL v262;
  unint64_t *v263;
  unint64_t v264;
  uint64_t *v265;
  uint64_t *v266;
  char **v267;
  unsigned int v268;
  uint64_t v269;
  void *v270;
  char v271;
  unsigned int v272[4];
  _DWORD v273[2];
  void *v274;
  uint64_t *v275;
  uint64_t v276;
  void *v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  std::__shared_weak_count *v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  uint64_t v286;
  std::__shared_weak_count *v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  void *__p[2];
  char v291;
  _BYTE __dst[32];
  void *GEOTileKey;
  uint64_t v294;
  char v295;
  __int128 buf;
  __int128 v297;
  uint64_t v298;

  v298 = *MEMORY[0x1E0C80C00];
  if (*((double *)this + 52) < 0.0)
    *((double *)this + 52) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  v2 = (_OWORD *)((char *)this + 328);
  if (*((_BYTE *)this + 392))
  {
    karo::util::Path::getNonDirectory((void **)__dst, (void **)this + 24);
    altitude::util::getTileIndexFromUrlString((void **)__dst, (uint64_t)this + 368);
    if (altitude::HeightRequest::loadHeightMap(this))
    {
      SubJob = karo::Job::getSubJob((pthread_mutex_t **)this, 1);
      v4 = *(_QWORD *)SubJob;
      v5 = (std::__shared_weak_count *)*((_QWORD *)SubJob + 1);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      if (v4)
      {
        v8 = v5;
      }
      else
      {
        v12 = operator new();
        v4 = v12;
        v13 = *((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 35);
        v15 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
          karo::Job::Job(v12, v13);
          *(_QWORD *)v4 = &off_1E42C6980;
          *(_QWORD *)(v4 + 176) = v14;
          *(_QWORD *)(v4 + 184) = v15;
          do
            v18 = __ldxr(v16);
          while (__stxr(v18 + 1, v16));
        }
        else
        {
          karo::Job::Job(v12, v13);
          *(_QWORD *)v4 = &off_1E42C6980;
          *(_QWORD *)(v4 + 176) = v14;
          *(_QWORD *)(v4 + 184) = 0;
        }
        *(_WORD *)(v4 + 192) = *((_WORD *)this + 184);
        *(_QWORD *)(v4 + 196) = *(_QWORD *)((char *)this + 372);
        *(_DWORD *)(v4 + 216) = 16;
        *(_QWORD *)(v4 + 220) = 0xFF7FFFFF7F7FFFFFLL;
        v8 = (std::__shared_weak_count *)operator new();
        v8->__shared_owners_ = 0;
        v46 = (unint64_t *)&v8->__shared_owners_;
        v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8D70;
        v8->__shared_weak_owners_ = 0;
        v8[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
        if (v5)
        {
          v47 = (unint64_t *)&v5->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        if (v15)
        {
          v49 = (unint64_t *)&v15->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        *(_QWORD *)&buf = v4;
        *((_QWORD *)&buf + 1) = v8;
        do
          v51 = __ldxr(v46);
        while (__stxr(v51 + 1, v46));
        karo::Job::addBlockingSubJob((uint64_t *)this, &buf, 1, 1);
        do
          v52 = __ldaxr(v46);
        while (__stlxr(v52 - 1, v46));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        v53 = *((_QWORD *)this + 32);
        __p[0] = (void *)v4;
        __p[1] = v8;
        do
          v54 = __ldxr(v46);
        while (__stxr(v54 + 1, v46));
        karo::JobManager::queueJob(v53, __p);
        do
          v55 = __ldaxr(v46);
        while (__stlxr(v55 - 1, v46));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 152));
      v11 = *(_DWORD *)(v4 + 160) & 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 152));
      if (v11)
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 152));
        v56 = *(_DWORD *)(v4 + 160);
        pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 152));
        if ((v56 & 2) != 0)
        {
          v57 = 0;
        }
        else
        {
          *((_QWORD *)this + 50) = *(_QWORD *)(v4 + 220);
          v57 = 1;
        }
        *((_BYTE *)this + 216) = v57;
      }
      if (!v8)
        goto LABEL_93;
      v58 = (unint64_t *)&v8->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if ((__dst[23] & 0x80000000) == 0)
        {
LABEL_94:
          if ((v11 & 1) == 0)
            return;
          goto LABEL_95;
        }
      }
      else
      {
LABEL_93:
        if ((__dst[23] & 0x80000000) == 0)
          goto LABEL_94;
      }
    }
    else
    {
      v11 = 0;
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_94;
    }
    operator delete(*(void **)__dst);
    if ((v11 & 1) == 0)
      return;
LABEL_95:
    *((double *)this + 53) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    *((_DWORD *)this + 40) |= 1u;
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    return;
  }
  v267 = (char **)((char *)this + 192);
  karo::util::Path::getNonDirectory(__p, (void **)this + 24);
  altitude::util::getTileIndexFromUrlString(__p, (uint64_t)this + 368);
  if (*((_BYTE *)this + 369) == 1)
    v9 = 32;
  else
    v9 = 16;
  if (*((_BYTE *)this + 369))
    v10 = v9;
  else
    v10 = 64;
  v268 = v10;
  altitude::HeightRequest::loadHeightMap(this);
  v288 = 0;
  v289 = 0;
  v286 = 0;
  v287 = 0;
  if (*((_BYTE *)this + 393))
    goto LABEL_156;
  if (*((_QWORD *)this + 37))
  {
    if (!*((_QWORD *)this + 39))
      goto LABEL_130;
  }
  else
  {
    v19 = (_BYTE *)*((_QWORD *)this + 1);
    v20 = operator new();
    *(_BYTE *)(v20 + 28) = 0;
    *(_QWORD *)(v20 + 8) = 0;
    *(_QWORD *)(v20 + 16) = 0;
    *(_QWORD *)v20 = &off_1E42C5838;
    v21 = (_QWORD *)operator new();
    *v21 = &off_1E42E8BB0;
    v21[1] = 0;
    v21[2] = 0;
    v21[3] = v20;
    v22 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
    *((_QWORD *)this + 37) = v20;
    *((_QWORD *)this + 38) = v21;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v19[48])
    {
      v25 = *((unsigned __int8 *)this + 369);
      if (v25 <= 6)
      {
        v26 = *((_QWORD *)this + 57);
        v27 = ~(-1 << v25) - *((_DWORD *)this + 93);
        *(_DWORD *)__dst = *((unsigned __int8 *)this + 369);
        *(_DWORD *)&__dst[4] = v27;
        *(_QWORD *)&__dst[8] = *((unsigned int *)this + 94);
        TileIdWithDataForTileId = altitude::GeoResourceManager::getTileIdWithDataForTileId(*(_QWORD *)(v26 + 32), (__int128 *)__dst, 33);
        v30 = TileIdWithDataForTileId >= 0xFFFFFFFF00000000 && TileIdWithDataForTileId == 0;
        v31 = v30 && v29 == 0xFFFFFFFFLL;
        if (!v31 || v29 <= 0xFFFFFFFEFFFFFFFFLL)
        {
          v33 = operator new();
          *(_BYTE *)(v33 + 28) = 0;
          *(_QWORD *)(v33 + 8) = 0;
          *(_QWORD *)(v33 + 16) = 0;
          *(_QWORD *)v33 = &off_1E42C5838;
          v34 = (_QWORD *)operator new();
          *v34 = &off_1E42E8BB0;
          v34[1] = 0;
          v34[2] = 0;
          v34[3] = v33;
          v35 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
          *((_QWORD *)this + 39) = v33;
          *((_QWORD *)this + 40) = v34;
          if (v35)
          {
            v36 = (unint64_t *)&v35->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
        }
      }
    }
    v38 = v19[40];
    v39 = *((_QWORD *)this + 37);
    *(_BYTE *)(v39 + 28) = v38;
    *(_QWORD *)(v39 + 8) = *((_QWORD *)this + 28);
    *(_QWORD *)(v39 + 16) = *((_QWORD *)this + 33);
    if (!v19[64])
      goto LABEL_388;
    v40 = *((_QWORD *)this + 57);
    v41 = ~(-1 << *((_BYTE *)this + 369)) - *((_DWORD *)this + 93);
    *(_DWORD *)__dst = *((unsigned __int8 *)this + 369);
    *(_DWORD *)&__dst[4] = v41;
    *(_QWORD *)&__dst[8] = *((unsigned int *)this + 94);
    v42 = altitude::GeoResourceManager::getTileIdWithDataForTileId(*(_QWORD *)(v40 + 32), (__int128 *)__dst, 45);
    v39 = *((_QWORD *)this + 37);
    if (v42 < 0xFFFFFFFF00000000 || (_DWORD)v42)
      goto LABEL_99;
    if (v43 != 0xFFFFFFFFLL || v43 <= 0xFFFFFFFEFFFFFFFFLL)
    {
LABEL_99:
      *(_DWORD *)(v39 + 24) = 32;
      *(_BYTE *)(v39 + 28) = 0;
    }
    else
    {
LABEL_388:
      if (v19[65])
        v45 = 64;
      else
        v45 = 2;
      *(_DWORD *)(v39 + 24) = v45;
    }
    v60 = *((_QWORD *)this + 39);
    if (!v60)
      goto LABEL_130;
    *(_BYTE *)(v60 + 28) = v38;
    *(_QWORD *)(v60 + 8) = *((_QWORD *)this + 28);
    *(_QWORD *)(v60 + 16) = *((_QWORD *)this + 33);
    *(_DWORD *)(v60 + 24) = 16;
  }
  v61 = karo::Job::getSubJob((pthread_mutex_t **)this, 3);
  v62 = *(_QWORD *)v61;
  v63 = (std::__shared_weak_count *)*((_QWORD *)v61 + 1);
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  v66 = v287;
  v286 = v62;
  v287 = v63;
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
    v62 = v286;
  }
  if (!v62)
  {
    v69 = *((_QWORD *)this + 39);
    v70 = *((_QWORD *)this + 1);
    v71 = atomic_load((unsigned int *)this + 4);
    v72 = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, uint64_t))(*(_QWORD *)v69 + 16))(v69, v70, (char *)this + 312, (char *)this + 368, v71);
    v73 = (std::__shared_weak_count *)operator new();
    v73->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8558;
    v73->__shared_owners_ = 0;
    v73->__shared_weak_owners_ = 0;
    v73[1].__vftable = (std::__shared_weak_count_vtbl *)v72;
    v74 = v287;
    v286 = v72;
    v287 = v73;
    if (v74)
    {
      v75 = (unint64_t *)&v74->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
      v73 = v287;
      v284 = v286;
      v285 = v287;
      if (!v287)
        goto LABEL_124;
    }
    else
    {
      v284 = v72;
      v285 = v73;
    }
    v77 = (unint64_t *)&v73->__shared_owners_;
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
LABEL_124:
    karo::Job::addBlockingSubJob((uint64_t *)this, &v284, 3, 1);
    v79 = v285;
    if (v285)
    {
      v80 = (unint64_t *)&v285->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    karo::JobManager::queueJob(*((_QWORD *)this + 32), &v286);
  }
LABEL_130:
  v82 = karo::Job::getSubJob((pthread_mutex_t **)this, 2);
  v83 = *(_QWORD *)v82;
  v84 = (std::__shared_weak_count *)*((_QWORD *)v82 + 1);
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
  }
  v87 = v289;
  v288 = v83;
  v289 = v84;
  if (v87)
  {
    v88 = (unint64_t *)&v87->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
    v83 = v288;
  }
  if (!v83)
  {
    v90 = *((_QWORD *)this + 37);
    v91 = *((_QWORD *)this + 1);
    v92 = atomic_load((unsigned int *)this + 4);
    v93 = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, uint64_t))(*(_QWORD *)v90 + 16))(v90, v91, (char *)this + 296, (char *)this + 368, v92);
    v94 = (std::__shared_weak_count *)operator new();
    v94->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8558;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = (std::__shared_weak_count_vtbl *)v93;
    v95 = v289;
    v288 = v93;
    v289 = v94;
    if (v95)
    {
      v96 = (unint64_t *)&v95->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
      v94 = v289;
      v282 = v288;
      v283 = v289;
      if (!v289)
        goto LABEL_150;
    }
    else
    {
      v282 = v93;
      v283 = v94;
    }
    v98 = (unint64_t *)&v94->__shared_owners_;
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
LABEL_150:
    karo::Job::addBlockingSubJob((uint64_t *)this, &v282, 2, 1);
    v100 = v283;
    if (v283)
    {
      v101 = (unint64_t *)&v283->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    karo::JobManager::queueJob(*((_QWORD *)this + 32), &v288);
  }
LABEL_156:
  pthread_mutex_lock(*((pthread_mutex_t **)this + 11));
  v103 = *((_QWORD *)this + 8);
  v104 = *((_QWORD *)this + 9);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 11));
  if (v103 != v104
    || (pthread_mutex_lock(*((pthread_mutex_t **)this + 19)),
        v105 = *((_DWORD *)this + 40),
        pthread_mutex_unlock(*((pthread_mutex_t **)this + 19)),
        (v105 & 2) != 0))
  {
    v113 = 0;
    goto LABEL_167;
  }
  altitude::HeightRequest::loadHeightMap(this);
  v106 = karo::Job::getSubJob((pthread_mutex_t **)this, 4);
  v108 = *(_QWORD *)v106;
  v107 = (std::__shared_weak_count *)*((_QWORD *)v106 + 1);
  v280 = *(_QWORD *)v106;
  v281 = v107;
  if (v107)
  {
    v109 = (unint64_t *)&v107->__shared_owners_;
    do
      v110 = __ldxr(v109);
    while (__stxr(v110 + 1, v109));
  }
  if (!v108)
  {
    v269 = *((_QWORD *)this + 1);
    v277 = 0;
    v278 = 0;
    v279 = 0;
    v274 = 0;
    v275 = 0;
    v276 = 0;
    if (*((_QWORD *)this + 37))
    {
      if (v288)
      {
        std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__assign_with_size[abi:nn180100]<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference*,karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference*>((uint64_t)&v277, *(uint64_t **)(v288 + 240), *(uint64_t **)(v288 + 248), (uint64_t)(*(_QWORD *)(v288 + 248) - *(_QWORD *)(v288 + 240)) >> 4);
        v111 = (uint64_t *)v277;
        v265 = v278;
        if (v277 != v278)
        {
          v112 = (_QWORD **)((char *)this + 432);
          do
          {
            v120 = *v111;
            v121 = (std::__shared_weak_count *)v111[1];
            if (v121)
            {
              v122 = (unint64_t *)&v121->__shared_owners_;
              do
                v123 = __ldxr(v122);
              while (__stxr(v123 + 1, v122));
            }
            v124 = *(_QWORD *)(v120 + 8);
            v125 = *(std::__shared_weak_count **)(v120 + 16);
            if (v125)
            {
              v126 = (unint64_t *)&v125->__shared_owners_;
              do
                v127 = __ldxr(v126);
              while (__stxr(v127 + 1, v126));
            }
            v128 = *(unsigned __int8 *)(v124 + 25);
            v129 = *(_DWORD *)(v124 + 28);
            v130 = *(_DWORD *)(v124 + 32);
            *(_DWORD *)__dst = 7;
            memset(&__dst[4], 0, 28);
            GEOTileKey = (void *)altitude::TileKey::getGEOTileKey((unsigned int *)__dst, v269);
            v294 = v131;
            objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
            v132 = (void *)objc_claimAutoreleasedReturnValue();
            v133 = objc_msgSend(v132, "versionForTileKey:", &GEOTileKey);

            LODWORD(buf) = 7;
            *(_QWORD *)((char *)&buf + 4) = 0;
            HIDWORD(buf) = v133;
            LODWORD(v297) = v128;
            DWORD1(v297) = ~(-1 << v128) - v129;
            *((_QWORD *)&v297 + 1) = v130;
            v134 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 432, __dst, (unsigned int *)&buf);
            if (!*v134)
            {
              v135 = v134;
              v136 = (char *)operator new(0x40uLL);
              *(_OWORD *)(v136 + 28) = buf;
              *(_OWORD *)(v136 + 44) = v297;
              v137 = *(_QWORD *)__dst;
              *(_QWORD *)v136 = 0;
              *((_QWORD *)v136 + 1) = 0;
              *((_QWORD *)v136 + 2) = v137;
              *v135 = (uint64_t)v136;
              v138 = (_QWORD *)**v112;
              if (v138)
              {
                *v112 = v138;
                v139 = (uint64_t *)*v135;
              }
              else
              {
                v139 = (uint64_t *)v136;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 55), v139);
              ++*((_QWORD *)this + 56);
            }
            if (v125)
            {
              v140 = (unint64_t *)&v125->__shared_owners_;
              do
                v141 = __ldaxr(v140);
              while (__stlxr(v141 - 1, v140));
              if (!v141)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
            if (v121)
            {
              v142 = (unint64_t *)&v121->__shared_owners_;
              do
                v143 = __ldaxr(v142);
              while (__stlxr(v143 - 1, v142));
              if (!v143)
              {
                ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                std::__shared_weak_count::__release_weak(v121);
              }
            }
            v111 += 2;
          }
          while (v111 != v265);
        }
      }
    }
    if (*((_QWORD *)this + 39))
    {
      if (v286)
      {
        std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__assign_with_size[abi:nn180100]<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference*,karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference*>((uint64_t)&v274, *(uint64_t **)(v286 + 240), *(uint64_t **)(v286 + 248), (uint64_t)(*(_QWORD *)(v286 + 248) - *(_QWORD *)(v286 + 240)) >> 4);
        v144 = (uint64_t *)v274;
        v266 = v275;
        if (v274 != v275)
        {
          v145 = (_QWORD **)((char *)this + 432);
          do
          {
            v146 = *v144;
            v147 = (std::__shared_weak_count *)v144[1];
            if (v147)
            {
              v148 = (unint64_t *)&v147->__shared_owners_;
              do
                v149 = __ldxr(v148);
              while (__stxr(v149 + 1, v148));
            }
            v150 = *(_QWORD *)(v146 + 8);
            v151 = *(std::__shared_weak_count **)(v146 + 16);
            if (v151)
            {
              v152 = (unint64_t *)&v151->__shared_owners_;
              do
                v153 = __ldxr(v152);
              while (__stxr(v153 + 1, v152));
            }
            v154 = *(unsigned __int8 *)(v150 + 25);
            v156 = *(_DWORD *)(v150 + 28);
            v155 = *(_DWORD *)(v150 + 32);
            *(_DWORD *)__dst = 7;
            memset(&__dst[4], 0, 28);
            GEOTileKey = (void *)altitude::TileKey::getGEOTileKey((unsigned int *)__dst, v269);
            v294 = v157;
            objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
            v158 = (void *)objc_claimAutoreleasedReturnValue();
            v159 = objc_msgSend(v158, "versionForTileKey:", &GEOTileKey);

            LODWORD(buf) = 33;
            *(_QWORD *)((char *)&buf + 4) = 0;
            HIDWORD(buf) = v159;
            LODWORD(v297) = v154;
            DWORD1(v297) = ~(-1 << v154) - v156;
            *((_QWORD *)&v297 + 1) = v155;
            v160 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 432, __dst, (unsigned int *)&buf);
            if (!*v160)
            {
              v161 = v160;
              v162 = (char *)operator new(0x40uLL);
              *(_OWORD *)(v162 + 28) = buf;
              *(_OWORD *)(v162 + 44) = v297;
              v163 = *(_QWORD *)__dst;
              *(_QWORD *)v162 = 0;
              *((_QWORD *)v162 + 1) = 0;
              *((_QWORD *)v162 + 2) = v163;
              *v161 = (uint64_t)v162;
              v164 = (_QWORD *)**v145;
              if (v164)
              {
                *v145 = v164;
                v165 = (uint64_t *)*v161;
              }
              else
              {
                v165 = (uint64_t *)v162;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 55), v165);
              ++*((_QWORD *)this + 56);
            }
            if (v151)
            {
              v166 = (unint64_t *)&v151->__shared_owners_;
              do
                v167 = __ldaxr(v166);
              while (__stlxr(v167 - 1, v166));
              if (!v167)
              {
                ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                std::__shared_weak_count::__release_weak(v151);
              }
            }
            if (v147)
            {
              v168 = (unint64_t *)&v147->__shared_owners_;
              do
                v169 = __ldaxr(v168);
              while (__stlxr(v169 - 1, v168));
              if (!v169)
              {
                ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                std::__shared_weak_count::__release_weak(v147);
              }
            }
            v144 += 2;
          }
          while (v144 != v266);
        }
      }
    }
    v170 = *((unsigned __int8 *)this + 393);
    if (!*((_BYTE *)this + 393))
    {
      v171 = (uint64_t *)v277;
      if (v277 == v278)
      {
        (*(void (**)(altitude::HeightRequest *))(*(_QWORD *)this + 16))(this);
        v185 = (char *)v274;
        if (v274)
        {
          v186 = (char *)v275;
          if (v275 != v274)
          {
            do
            {
              v187 = (std::__shared_weak_count *)*((_QWORD *)v186 - 1);
              if (v187)
              {
                v188 = (unint64_t *)&v187->__shared_owners_;
                do
                  v189 = __ldaxr(v188);
                while (__stlxr(v189 - 1, v188));
                if (!v189)
                {
                  ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                  std::__shared_weak_count::__release_weak(v187);
                }
              }
              v186 -= 16;
            }
            while (v186 != v185);
            v185 = (char *)v274;
            v171 = (uint64_t *)v277;
          }
          operator delete(v185);
        }
        if (v171)
        {
          v256 = v278;
          v257 = v171;
          if (v278 != v171)
          {
            do
            {
              v258 = (std::__shared_weak_count *)*(v256 - 1);
              if (v258)
              {
                v259 = (unint64_t *)&v258->__shared_owners_;
                do
                  v260 = __ldaxr(v259);
                while (__stlxr(v260 - 1, v259));
                if (!v260)
                {
                  ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                  std::__shared_weak_count::__release_weak(v258);
                }
              }
              v256 -= 2;
            }
            while (v256 != v171);
            v257 = v277;
          }
          v278 = v171;
          operator delete(v257);
        }
LABEL_380:
        v113 = 1;
        v255 = v281;
        if (!v281)
          goto LABEL_167;
        goto LABEL_381;
      }
    }
    v172 = *((_QWORD *)this + 35);
    if (v172)
    {
      v173 = *(_QWORD *)(v172 + 136);
      v174 = *(_QWORD *)(v172 + 144);
      memset(&__dst[4], 0, 28);
      *(_DWORD *)__dst = 17;
      *(_QWORD *)&buf = altitude::TileKey::getGEOTileKey((unsigned int *)__dst, v269);
      *((_QWORD *)&buf + 1) = v175;
      objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
      v176 = (void *)objc_claimAutoreleasedReturnValue();
      v177 = objc_msgSend(v176, "versionForTileKey:", &buf);

      v178 = (_QWORD **)((char *)this + 432);
      *(_DWORD *)__dst = 17;
      *(_QWORD *)&__dst[4] = 0;
      *(_DWORD *)&__dst[12] = v177;
      *(_QWORD *)&__dst[16] = v173;
      *(_QWORD *)&__dst[24] = v174;
      v179 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 432, &buf, (unsigned int *)__dst);
      if (!*v179)
      {
        v180 = v179;
        v181 = (char *)operator new(0x40uLL);
        *(_OWORD *)(v181 + 28) = *(_OWORD *)__dst;
        *(_OWORD *)(v181 + 44) = *(_OWORD *)&__dst[16];
        v182 = buf;
        *(_QWORD *)v181 = 0;
        *((_QWORD *)v181 + 1) = 0;
        *((_QWORD *)v181 + 2) = v182;
        *v180 = (uint64_t)v181;
        v183 = (_QWORD *)**v178;
        if (v183)
        {
          *v178 = v183;
          v184 = (uint64_t *)*v180;
        }
        else
        {
          v184 = (uint64_t *)v181;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 55), v184);
        ++*((_QWORD *)this + 56);
      }
      v170 = *((unsigned __int8 *)this + 393);
    }
    v190 = *((char *)this + 215);
    if (v190 >= 0)
      v191 = *((unsigned __int8 *)this + 215);
    else
      v191 = *((_QWORD *)this + 25);
    if (v170)
      v192 = "/BaseSurface/";
    else
      v192 = "/HeightMesh/";
    if (v170)
      v193 = 13;
    else
      v193 = 12;
    v194 = v191 + v193;
    if (v191 + v193 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v194 > 0x16)
    {
      v196 = (v194 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v194 | 7) != 0x17)
        v196 = v194 | 7;
      v197 = v196 + 1;
      v195 = operator new(v196 + 1);
      *(_QWORD *)&__dst[8] = v191 + v193;
      *(_QWORD *)&__dst[16] = v197 | 0x8000000000000000;
      *(_QWORD *)__dst = v195;
    }
    else
    {
      memset(__dst, 0, 24);
      v195 = __dst;
      __dst[23] = v191 + v193;
    }
    if (v191)
    {
      if (v190 >= 0)
        v198 = (char *)this + 192;
      else
        v198 = *v267;
      memmove(v195, v198, v191);
    }
    v199 = &v195[v191];
    memcpy(v199, v192, v193);
    v199[v193] = 0;
    v200 = *((_BYTE *)this + 369);
    v201 = *((_DWORD *)this + 93);
    v272[0] = v200;
    v272[1] = ~(-1 << v200) - v201;
    v272[2] = *((_DWORD *)this + 94);
    v272[3] = 0;
    v295 = 0;
    LOBYTE(GEOTileKey) = 0;
    v271 = 0;
    LOBYTE(v270) = 0;
    altitude::Tile::createTileName(&buf, v272, (uint64_t *)&GEOTileKey, (uint64_t *)&v270);
    if ((SBYTE7(v297) & 0x80u) == 0)
      p_buf = (const std::string::value_type *)&buf;
    else
      p_buf = (const std::string::value_type *)buf;
    if ((SBYTE7(v297) & 0x80u) == 0)
      v203 = BYTE7(v297);
    else
      v203 = *((_QWORD *)&buf + 1);
    v204 = std::string::append((std::string *)__dst, p_buf, v203);
    v205 = (std::string::value_type *)v204->__r_.__value_.__r.__words[0];
    size = v204->__r_.__value_.__l.__size_;
    v273[0] = v204->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v273 + 3) = *(_DWORD *)((char *)&v204->__r_.__value_.__r.__words[2] + 3);
    v207 = SHIBYTE(v204->__r_.__value_.__r.__words[2]);
    v204->__r_.__value_.__l.__size_ = 0;
    v204->__r_.__value_.__r.__words[2] = 0;
    v204->__r_.__value_.__r.__words[0] = 0;
    if (SBYTE7(v297) < 0)
    {
      operator delete((void *)buf);
      if ((v271 & 0x80000000) == 0)
      {
LABEL_277:
        if ((v295 & 0x80000000) == 0)
          goto LABEL_278;
        goto LABEL_286;
      }
    }
    else if ((v271 & 0x80000000) == 0)
    {
      goto LABEL_277;
    }
    operator delete(v270);
    if ((v295 & 0x80000000) == 0)
    {
LABEL_278:
      if ((__dst[23] & 0x80000000) == 0)
      {
LABEL_279:
        v208 = operator new();
        v209 = v208;
        v210 = *((_QWORD *)this + 1);
        v212 = *((_QWORD *)this + 35);
        v211 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
        if (v211)
        {
          v213 = (unint64_t *)&v211->__shared_owners_;
          do
            v214 = __ldxr(v213);
          while (__stxr(v214 + 1, v213));
        }
        v215 = *((_BYTE *)this + 393);
        v216 = *((_DWORD *)this + 99);
        karo::Job::Job(v208, v210);
        *(_QWORD *)v209 = &off_1E42C6948;
        if (v207 < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v209 + 176), v205, size);
        }
        else
        {
          *(_QWORD *)(v209 + 176) = v205;
          *(_QWORD *)(v209 + 184) = size;
          *(_DWORD *)(v209 + 192) = v273[0];
          *(_DWORD *)(v209 + 195) = *(_DWORD *)((char *)v273 + 3);
          *(_BYTE *)(v209 + 199) = v207;
        }
        *(_QWORD *)(v209 + 200) = v212;
        *(_QWORD *)(v209 + 208) = v211;
        if (v211)
        {
          v217 = (unint64_t *)&v211->__shared_owners_;
          do
            v218 = __ldxr(v217);
          while (__stxr(v218 + 1, v217));
        }
        *(_WORD *)(v209 + 216) = *((_WORD *)this + 184);
        v2 = (_OWORD *)((char *)this + 328);
        *(_QWORD *)(v209 + 220) = *(_QWORD *)((char *)this + 372);
        *(_DWORD *)(v209 + 240) = v268 | 1;
        std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::vector((_QWORD *)(v209 + 248), (uint64_t **)&v277);
        std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::vector((_QWORD *)(v209 + 272), (uint64_t **)&v274);
        *(float *)(v209 + 296) = (float)v268;
        *(_BYTE *)(v209 + 300) = v215;
        *(_DWORD *)(v209 + 304) = v216;
        *(_QWORD *)(v209 + 312) = 0;
        *(_QWORD *)(v209 + 320) = 0;
        v219 = (std::__shared_weak_count *)operator new();
        v219->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8D38;
        v219->__shared_owners_ = 0;
        v219->__shared_weak_owners_ = 0;
        v219[1].__vftable = (std::__shared_weak_count_vtbl *)v209;
        v220 = v281;
        v280 = v209;
        v281 = v219;
        if (v220)
        {
          v221 = (unint64_t *)&v220->__shared_owners_;
          do
            v222 = __ldaxr(v221);
          while (__stlxr(v222 - 1, v221));
          if (!v222)
          {
            ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
            std::__shared_weak_count::__release_weak(v220);
          }
        }
        if (v211)
        {
          v223 = (unint64_t *)&v211->__shared_owners_;
          do
            v224 = __ldaxr(v223);
          while (__stlxr(v224 - 1, v223));
          if (!v224)
          {
            ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
            std::__shared_weak_count::__release_weak(v211);
          }
        }
        v225 = v281;
        *(_QWORD *)__dst = v280;
        *(_QWORD *)&__dst[8] = v281;
        if (v281)
        {
          v226 = (unint64_t *)&v281->__shared_owners_;
          do
            v227 = __ldxr(v226);
          while (__stxr(v227 + 1, v226));
          karo::Job::addBlockingSubJob((uint64_t *)this, __dst, 4, 1);
          do
            v228 = __ldaxr(v226);
          while (__stlxr(v228 - 1, v226));
          if (!v228)
          {
            ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
            std::__shared_weak_count::__release_weak(v225);
          }
        }
        else
        {
          karo::Job::addBlockingSubJob((uint64_t *)this, __dst, 4, 1);
        }
        karo::JobManager::queueJob(*((_QWORD *)this + 32), &v280);
        karo::Job::removeSubJob((pthread_mutex_t **)this, 2);
        karo::Job::removeSubJob((pthread_mutex_t **)this, 3);
        if (v207 < 0)
          operator delete(v205);
        v229 = (char *)v274;
        if (v274)
        {
          v230 = (char *)v275;
          if (v275 != v274)
          {
            do
            {
              v231 = (std::__shared_weak_count *)*((_QWORD *)v230 - 1);
              if (v231)
              {
                v232 = (unint64_t *)&v231->__shared_owners_;
                do
                  v233 = __ldaxr(v232);
                while (__stlxr(v233 - 1, v232));
                if (!v233)
                {
                  ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                  std::__shared_weak_count::__release_weak(v231);
                }
              }
              v230 -= 16;
            }
            while (v230 != v229);
            v229 = (char *)v274;
          }
          operator delete(v229);
        }
        v234 = (char *)v277;
        if (v277)
        {
          v235 = (char *)v278;
          if (v278 != v277)
          {
            do
            {
              v236 = (std::__shared_weak_count *)*((_QWORD *)v235 - 1);
              if (v236)
              {
                v237 = (unint64_t *)&v236->__shared_owners_;
                do
                  v238 = __ldaxr(v237);
                while (__stlxr(v238 - 1, v237));
                if (!v238)
                {
                  ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                  std::__shared_weak_count::__release_weak(v236);
                }
              }
              v235 -= 16;
            }
            while (v235 != v234);
            v234 = (char *)v277;
          }
          operator delete(v234);
        }
        v108 = v280;
        goto LABEL_335;
      }
LABEL_287:
      operator delete(*(void **)__dst);
      goto LABEL_279;
    }
LABEL_286:
    operator delete(GEOTileKey);
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_279;
    goto LABEL_287;
  }
LABEL_335:
  pthread_mutex_lock(*(pthread_mutex_t **)(v108 + 152));
  v239 = *(_DWORD *)(v108 + 160);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v108 + 152));
  if ((v239 & 1) != 0)
  {
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    v240 = *((_DWORD *)this + 40);
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    if ((v240 & 2) == 0)
    {
      v241 = v281;
      if (v281)
      {
        v242 = (unint64_t *)&v281->__shared_owners_;
        do
          v243 = __ldxr(v242);
        while (__stxr(v243 + 1, v242));
      }
      v244 = *(_QWORD *)(v108 + 320);
      *(_QWORD *)&v245 = *(_QWORD *)(v108 + 312);
      *((_QWORD *)&v245 + 1) = v244;
      if (v244)
      {
        v246 = (unint64_t *)(v244 + 8);
        do
          v247 = __ldxr(v246);
        while (__stxr(v247 + 1, v246));
      }
      v248 = (std::__shared_weak_count *)*((_QWORD *)this + 42);
      *v2 = v245;
      if (v248)
      {
        v249 = (unint64_t *)&v248->__shared_owners_;
        do
          v250 = __ldaxr(v249);
        while (__stlxr(v250 - 1, v249));
        if (!v250)
        {
          ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
          std::__shared_weak_count::__release_weak(v248);
        }
      }
      if (v241)
      {
        v251 = (unint64_t *)&v241->__shared_owners_;
        do
          v252 = __ldaxr(v251);
        while (__stlxr(v252 - 1, v251));
        if (!v252)
        {
          ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
          std::__shared_weak_count::__release_weak(v241);
        }
      }
      karo::Job::removeSubJob((pthread_mutex_t **)this, 4);
      if (!*((_QWORD *)this + 41))
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v253 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)this + 215) < 0)
            v254 = *v267;
          else
            v254 = (char *)this + 192;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v254;
          _os_log_impl(&dword_19F029000, v253, OS_LOG_TYPE_ERROR, "Failed to create geometry %s", (uint8_t *)&buf, 0xCu);
        }
      }
      pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
      v261 = *((_DWORD *)this + 40);
      pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
      v262 = (v261 & 2) == 0 && *(_QWORD *)v2 != 0;
      *((_BYTE *)this + 216) = v262;
      goto LABEL_380;
    }
  }
  v113 = 0;
  v255 = v281;
  if (!v281)
    goto LABEL_167;
LABEL_381:
  v263 = (unint64_t *)&v255->__shared_owners_;
  do
    v264 = __ldaxr(v263);
  while (__stlxr(v264 - 1, v263));
  if (!v264)
  {
    ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
    std::__shared_weak_count::__release_weak(v255);
  }
LABEL_167:
  v114 = v287;
  if (!v287)
    goto LABEL_171;
  v115 = (unint64_t *)&v287->__shared_owners_;
  do
    v116 = __ldaxr(v115);
  while (__stlxr(v116 - 1, v115));
  if (!v116)
  {
    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
    std::__shared_weak_count::__release_weak(v114);
    v117 = v289;
    if (!v289)
      goto LABEL_175;
  }
  else
  {
LABEL_171:
    v117 = v289;
    if (!v289)
      goto LABEL_175;
  }
  v118 = (unint64_t *)&v117->__shared_owners_;
  do
    v119 = __ldaxr(v118);
  while (__stlxr(v119 - 1, v118));
  if (v119)
  {
LABEL_175:
    if ((v291 & 0x80000000) == 0)
      goto LABEL_176;
LABEL_203:
    operator delete(__p[0]);
    if (v113)
      goto LABEL_95;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
  std::__shared_weak_count::__release_weak(v117);
  if (v291 < 0)
    goto LABEL_203;
LABEL_176:
  if (v113)
    goto LABEL_95;
}

void sub_19FB0DA30(_Unwind_Exception *a1)
{
  karo::Job *v1;

  karo::Job::~Job(v1);
  _Unwind_Resume(a1);
}

void sub_19FB0DB18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB0DB24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t altitude::HeightRequest::succeeded(altitude::HeightRequest *this)
{
  return *((unsigned __int8 *)this + 216);
}

void altitude::HeightRequest::getHeightElement(altitude::HeightRequest *this@<X0>, _QWORD *a2@<X8>)
{
  NSObject *v3;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint8_t v8[16];

  if (*((_BYTE *)this + 392))
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v3 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_19F029000, v3, OS_LOG_TYPE_ERROR, "Invalid use: This request was made for altitude bounds only", v8, 2u);
    }
    goto LABEL_11;
  }
  if (((*(uint64_t (**)(altitude::HeightRequest *))(*(_QWORD *)this + 40))(this) & 1) == 0)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  v5 = *((_QWORD *)this + 42);
  *a2 = *((_QWORD *)this + 41);
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
}

void altitude::HeightRequest::getOverlayElement(altitude::HeightRequest *this@<X0>, _QWORD *a2@<X8>)
{
  NSObject *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint8_t v11[16];

  if (*((_BYTE *)this + 392))
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v3 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_19F029000, v3, OS_LOG_TYPE_ERROR, "Invalid use: This request was made for altitude bounds only", v11, 2u);
    }
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    if (((*(uint64_t (**)(altitude::HeightRequest *))(*(_QWORD *)this + 40))(this) & 1) == 0)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
      *((_QWORD *)this + 43) = 0;
      *((_QWORD *)this + 44) = 0;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    v8 = *((_QWORD *)this + 44);
    *a2 = *((_QWORD *)this + 43);
    a2[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
}

uint64_t altitude::HeightRequest::getAltBounds(altitude::HeightRequest *this, float *a2, float *a3)
{
  uint64_t result;
  NSObject *v7;
  uint8_t v8[16];

  if (*((_BYTE *)this + 392))
  {
    result = (*(uint64_t (**)(altitude::HeightRequest *))(*(_QWORD *)this + 40))(this);
    if ((_DWORD)result)
    {
      *a2 = *((float *)this + 100);
      *a3 = *((float *)this + 101);
      return 1;
    }
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v7 = GEOGetVectorKitVKDefaultLog_log;
    result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_19F029000, v7, OS_LOG_TYPE_ERROR, "Invalid use: This request was made for a mesh actor", v8, 2u);
      return 0;
    }
  }
  return result;
}

uint64_t altitude::HeightRequest::loadHeightMap(altitude::HeightRequest *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  std::__shared_weak_count *v28;
  void (**v29)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v30;
  std::__shared_weak_count *v31;
  int v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;

  if (*((_BYTE *)this + 393) && *((_BYTE *)this + 394))
    return 1;
  v34 = 0;
  v33 = 0;
  v2 = *((unsigned int *)this + 94);
  v35 = *((unsigned __int8 *)this + 369) | ((unint64_t)(~(-1 << *((_BYTE *)this + 369))
                                                                           - *((_DWORD *)this + 93)) << 32);
  v36 = v2;
  v32 = 17;
  if (!(*(unsigned int (**)(_QWORD, int *))(**((_QWORD **)this + 31) + 112))(*((_QWORD *)this + 31), &v32))
    return 1;
  v3 = *((_QWORD *)this + 31);
  v4 = atomic_load((unsigned int *)this + 4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, int *, _QWORD, uint64_t))(*(_QWORD *)v3 + 104))(&v27, v3, &v32, 0, v4);
  v5 = v27;
  if (v27)
  {
    v6 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    *((_QWORD *)this + 35) = v5;
    *((_QWORD *)this + 36) = v6;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    karo::Job::removeSubJob((pthread_mutex_t **)this, 0);
    v12 = 1;
  }
  else if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v29))
  {
    v14 = v31;
    v26[0] = v30;
    v26[1] = v31;
    if (v31)
    {
      v15 = (unint64_t *)&v31->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      karo::Job::addBlockingSubJob((uint64_t *)this, v26, 0, 0);
      do
        v17 = __ldaxr(v15);
      while (__stlxr(v17 - 1, v15));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    else
    {
      karo::Job::addBlockingSubJob((uint64_t *)this, v26, 0, 0);
    }
    v12 = 0;
  }
  else
  {
    v12 = 1;
  }
  v29 = &off_1E42C2D08;
  if (v30)
  {
    v18 = (unsigned int *)(v30 + 128);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
  }
  v20 = v31;
  if (v31)
  {
    v21 = (unint64_t *)&v31->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v28;
  if (v28)
  {
    v24 = (unint64_t *)&v28->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v12;
}

void std::__shared_ptr_pointer<altitude::util::BuildHeightMeshJob *,std::shared_ptr<altitude::util::BuildHeightMeshJob>::__shared_ptr_default_delete<altitude::util::BuildHeightMeshJob,altitude::util::BuildHeightMeshJob>,std::allocator<altitude::util::BuildHeightMeshJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::util::BuildHeightMeshJob *,std::shared_ptr<altitude::util::BuildHeightMeshJob>::__shared_ptr_default_delete<altitude::util::BuildHeightMeshJob,altitude::util::BuildHeightMeshJob>,std::allocator<altitude::util::BuildHeightMeshJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<altitude::MapProvider::MapTransfer *,std::shared_ptr<karo::Job>::__shared_ptr_default_delete<karo::Job,altitude::MapProvider::MapTransfer>,std::allocator<altitude::MapProvider::MapTransfer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::MapProvider::MapTransfer *,std::shared_ptr<karo::Job>::__shared_ptr_default_delete<karo::Job,altitude::MapProvider::MapTransfer>,std::allocator<altitude::MapProvider::MapTransfer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<altitude::DigitalGlobeProvider *,std::shared_ptr<altitude::MapProvider>::__shared_ptr_default_delete<altitude::MapProvider,altitude::DigitalGlobeProvider>,std::allocator<altitude::DigitalGlobeProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::DigitalGlobeProvider *,std::shared_ptr<altitude::MapProvider>::__shared_ptr_default_delete<altitude::MapProvider,altitude::DigitalGlobeProvider>,std::allocator<altitude::DigitalGlobeProvider>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<altitude::util::ComputeAltBoundsJob *,std::shared_ptr<altitude::util::ComputeAltBoundsJob>::__shared_ptr_default_delete<altitude::util::ComputeAltBoundsJob,altitude::util::ComputeAltBoundsJob>,std::allocator<altitude::util::ComputeAltBoundsJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::util::ComputeAltBoundsJob *,std::shared_ptr<altitude::util::ComputeAltBoundsJob>::__shared_ptr_default_delete<altitude::util::ComputeAltBoundsJob,altitude::util::ComputeAltBoundsJob>,std::allocator<altitude::util::ComputeAltBoundsJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void md::ARBuildingLayerDataSource::~ARBuildingLayerDataSource(md::ARBuildingLayerDataSource *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42A1938;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 100);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42A1938;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 100);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::ARBuildingLayerDataSource::isReadyToDecode(md::ARBuildingLayerDataSource *this)
{
  std::__sp_mut *sp_mut;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  sp_mut = std::__get_sp_mut((char *)this + 776);
  std::__sp_mut::lock(sp_mut);
  v3 = *((_QWORD *)this + 97);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  std::__sp_mut::unlock(sp_mut);
  if (v3)
  {
    v7 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v3 + 16) + 2786));
    v8 = v7 & 1;
    if (!v4)
      return v8;
  }
  else
  {
    v8 = 0;
    if (!v4)
      return v8;
  }
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v8;
}

void md::ARBuildingLayerDataSource::constructRequests(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  int32x2_t *v8;
  __int32 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13[4];
  int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[4];
  int32x2_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2 != a3)
  {
    v22 = v3;
    v23 = v4;
    v6 = a2;
    do
    {
      v8 = *(int32x2_t **)(*v6 + 16);
      v9 = v8[1].i32[0];
      v20[0] = v8[1].i32[1];
      v20[1] = v9;
      v21 = vrev64_s32(*v8);
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, _BYTE *))(**(_QWORD **)(a1 + 24) + 16))(&v18, *(_QWORD *)(a1 + 24), *(unsigned __int16 *)(a1 + 584), v20);
      if ((_BYTE)v18)
      {
        v10 = *v6;
        v11 = *(unsigned __int8 *)*v6;
        v12 = *(_QWORD *)(*v6 + 112);
        v13[0] = 0;
        if (*(_BYTE *)(v10 + 96))
        {
          v14 = *(_DWORD *)(v10 + 100);
          v13[0] = 1;
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *, uint64_t, char *))(*(_QWORD *)a1 + 144))(&v15, a1, v11, &v19, v12, v13);
        if (v13[0])
          v13[0] = 0;
        gdc::LayerDataRequest::request(*v6, (uint64_t)&v15, 0);
        if (v16 != v17)
          free(v16);
      }
      v6 += 2;
    }
    while (v6 != a3);
  }
}

void md::ARBuildingLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  char *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  float v35;
  long double v36;
  long double v37;
  long double v38;
  long double v39;
  long double v40;
  long double v41;
  long double v42;
  long double v43;
  long double v44;
  double v45;
  void *v46;
  char v47;
  uint64_t v48;
  int v49;
  int16x8_t **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t v60;
  __int128 v61;
  __int128 v62;
  int32x2_t v63;
  float32x4_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  arComponents::LocalBounds *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned __int16 *v78;
  int v79;
  uint64_t v80;
  char *v81;
  unsigned int *v82;
  unsigned int v83;
  float *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  int v94;
  char *v95;
  char *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  float *v100;
  uint64_t v101;
  float *v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *i;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  __int32 v114;
  float32x2_t v115;
  float32x2_t v116;
  float v117;
  uint64_t v118;
  int8x8_t v119;
  float *v120;
  float v121;
  uint64_t v122;
  float *v123;
  float v124;
  float *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  int32x2_t *v131;
  float *v132;
  __int32 *v133;
  __int32 v134;
  unsigned int v135;
  float32x2_t v136;
  float32x2_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x2_t v141;
  float32x2_t v142;
  float32x2_t v143;
  float32x2_t v144;
  float32x2_t v145;
  float32x2_t v146;
  float v147;
  float v148;
  float32x4_t v149;
  float *v150;
  float *v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  float *v162;
  float *v163;
  uint64_t v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  int v172;
  char *v173;
  _QWORD *v174;
  char *v175;
  unint64_t v176;
  _QWORD *v177;
  int8x16_t v178;
  char *v179;
  int64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  _BYTE *v187;
  gdc::Registry *v188;
  uint64_t v189;
  _QWORD *v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  float32x4_t v198;
  __int128 v199;
  void **v200;
  _BYTE *v201;
  void *v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  _QWORD *v206;
  void *v207;
  uint64_t v208;
  _QWORD *v209;
  unint64_t v210;
  uint64_t v211;
  _OWORD *v212;
  char *v213;
  uint64_t v214;
  __int128 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  char *v220;
  int v221;
  void **v222;
  void *v223;
  char v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  float32x4_t v231;
  float32x4_t v232;
  void *v233;
  int v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v243;
  int32x4_t v244;
  float32x4_t v245;
  int8x16_t v246;
  float32x4_t v247;
  int8x16_t v248;
  float32x4_t v249;
  float32x4_t v250;
  int8x16_t v251;
  uint64_t v252;
  unint64_t v253;
  float32x4_t v254;
  int8x16_t v255;
  float32x4_t v256;
  int8x16_t v257;
  unsigned int v258;
  unint64_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int32x4_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  unint64_t v268;
  BOOL v269;
  uint64_t v270;
  uint64_t v271;
  __int8 v272;
  int32x4_t *v273;
  unint64_t v274;
  int32x4_t *v275;
  int32x4_t *v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  char *v281;
  char *v282;
  int32x4_t *v283;
  unint64_t j;
  uint64_t v285;
  float v286;
  __int32 v287;
  float v288;
  float v289;
  float32x4_t v290;
  float32x4_t v291;
  int8x16_t v292;
  float32x4_t v293;
  int8x16_t v294;
  float32x4_t v295;
  int8x16_t v296;
  float32x4_t v297;
  int8x16_t v298;
  __int128 v299;
  float32x4_t v300;
  __int128 v301;
  gdc::Registry *v302;
  unint64_t v303;
  uint64_t *v304;
  _QWORD *v305;
  char v306;
  uint64_t v307;
  uint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  unint64_t v311;
  __int32 *v312;
  __int32 v313;
  __int32 v314;
  int v315;
  __int128 v316;
  int v317;
  float32x4_t v318;
  _DWORD *v319;
  char *v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  char *v325;
  char *v326;
  uint64_t v327;
  __int128 v328;
  __int128 v329;
  _QWORD *v330;
  uint64_t v331;
  uint64_t *v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  float v336;
  float v337;
  float v338;
  uint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  _WORD *v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  _QWORD *v353;
  char *v354;
  QuadTile *v355;
  uint64_t v356;
  geo::codec::VectorTile *v357;
  int8x16_t *v358;
  uint64_t v359;
  uint64_t v360;
  int16x8_t **v361;
  int32x4_t **v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unsigned __int16 *v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  std::__shared_weak_count *v376;
  float32x4_t v377;
  float32x4_t v378;
  float v379;
  __int128 v380;
  float32x2_t v381;
  __int128 v382;
  _QWORD *v383;
  int v384;
  int8x16_t v385;
  _WORD *v386;
  unint64_t v387;
  BOOL v388;
  uint64_t v389;
  uint64_t v390;
  float32x4_t v391;
  __int32 v392;
  __int128 v393;
  __int32 v394;
  float *v395;
  float32x2_t v396;
  __int32 v397;
  unint64_t v398;
  float32x4_t v399;
  float32x4_t v400;
  gdc::Registry *v401;
  uint64_t v402;
  std::__shared_weak_count *v403;
  void *v404[3];
  uint64_t v405;
  std::__shared_weak_count *v406;
  double v407;
  void *__p;
  _BYTE v409[12];
  float v410;
  unsigned __int8 v411;
  int v412;
  __int128 v413;
  int v414;
  _QWORD v415[3];
  double v416;
  __int128 v417;
  _BYTE v418[32];
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  _BYTE v424[304];
  __int128 v425;
  uint64_t v426;
  int v427;
  float32x4_t v428;
  _BYTE v429[32];
  __int128 v430;
  __int128 v431;
  __int128 v432;
  _BYTE v433[32];
  _OWORD v434[20];
  uint64_t v435;
  int v436;
  _BYTE v437[32];
  uint64_t v438;

  v438 = *MEMORY[0x1E0C80C00];
  v8 = (unsigned __int16 *)*a3;
  v9 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v9)
  {
    while (*v8 != *(unsigned __int16 *)(a1 + 584))
    {
      v8 += 24;
      if (v8 == v9)
        goto LABEL_15;
    }
  }
  if (v8 == v9 || *((_QWORD *)v8 + 4) != 1)
  {
LABEL_15:
    v11 = 0;
  }
  else
  {
    v10 = *((_QWORD *)v8 + 3);
    v11 = *(_QWORD *)(v10 + 112);
    v12 = *(std::__shared_weak_count **)(v10 + 120);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      v405 = v11;
      v406 = v12;
      v15 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      do
        v17 = __ldaxr(v15);
      while (__stlxr(v17 - 1, v15));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      goto LABEL_17;
    }
  }
  v405 = v11;
  v406 = 0;
LABEL_17:
  memset(v404, 0, sizeof(v404));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v404);
  sp_mut = std::__get_sp_mut((const void *)(a1 + 792));
  std::__sp_mut::lock(sp_mut);
  v19 = *(std::__shared_weak_count **)(a1 + 800);
  v402 = *(_QWORD *)(a1 + 792);
  v403 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  std::__sp_mut::unlock(sp_mut);
  v22 = operator new();
  v23 = v22;
  v353 = a4;
  *(_OWORD *)(v22 + 416) = 0u;
  *(_OWORD *)(v22 + 432) = 0u;
  *(_OWORD *)(v22 + 384) = 0u;
  *(_OWORD *)(v22 + 400) = 0u;
  *(_OWORD *)(v22 + 352) = 0u;
  *(_OWORD *)(v22 + 368) = 0u;
  *(_OWORD *)(v22 + 320) = 0u;
  *(_OWORD *)(v22 + 336) = 0u;
  *(_OWORD *)(v22 + 288) = 0u;
  *(_OWORD *)(v22 + 304) = 0u;
  *(_OWORD *)(v22 + 256) = 0u;
  *(_OWORD *)(v22 + 272) = 0u;
  *(_OWORD *)(v22 + 224) = 0u;
  *(_OWORD *)(v22 + 240) = 0u;
  *(_OWORD *)(v22 + 192) = 0u;
  *(_OWORD *)(v22 + 208) = 0u;
  *(_OWORD *)(v22 + 160) = 0u;
  *(_OWORD *)(v22 + 176) = 0u;
  *(_OWORD *)(v22 + 128) = 0u;
  *(_OWORD *)(v22 + 144) = 0u;
  *(_OWORD *)(v22 + 96) = 0u;
  *(_OWORD *)(v22 + 112) = 0u;
  *(_OWORD *)(v22 + 64) = 0u;
  *(_OWORD *)(v22 + 80) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)(v22 + 48) = 0u;
  *(_DWORD *)(v22 + 32) = 1065353216;
  *(_OWORD *)v22 = 0u;
  *(_OWORD *)(v22 + 16) = 0u;
  do
  {
    v24 = __ldaxr(gdc::Registry::nextId(void)::next);
    v25 = v24 + 1;
  }
  while (__stlxr(v25, gdc::Registry::nextId(void)::next));
  *(_WORD *)(v22 + 40) = v25;
  *(_OWORD *)(v22 + 48) = 0u;
  *(_OWORD *)(v22 + 64) = 0u;
  *(_OWORD *)(v22 + 80) = 0u;
  *(_OWORD *)(v22 + 96) = 0u;
  *(_OWORD *)(v22 + 112) = 0u;
  *(_OWORD *)(v22 + 128) = 0u;
  *(_QWORD *)(v22 + 144) = 0;
  *(_DWORD *)(v22 + 152) = 1065353216;
  *(_OWORD *)(v22 + 160) = 0u;
  *(_OWORD *)(v22 + 176) = 0u;
  *(_QWORD *)(v22 + 192) = 0;
  *(_DWORD *)(v22 + 200) = 1065353216;
  *(_OWORD *)(v22 + 208) = 0u;
  *(_OWORD *)(v22 + 224) = 0u;
  *(_QWORD *)(v22 + 240) = 0;
  *(_DWORD *)(v22 + 248) = 1065353216;
  *(_QWORD *)(v22 + 288) = 0;
  *(_OWORD *)(v22 + 256) = 0u;
  *(_OWORD *)(v22 + 272) = 0u;
  *(_DWORD *)(v22 + 296) = 1065353216;
  *(_OWORD *)(v22 + 304) = 0u;
  *(_OWORD *)(v22 + 320) = 0u;
  *(_QWORD *)(v22 + 336) = 0;
  *(_DWORD *)(v22 + 344) = 1065353216;
  *(_OWORD *)(v22 + 352) = 0u;
  *(_OWORD *)(v22 + 368) = 0u;
  *(_QWORD *)(v22 + 384) = 0;
  *(_DWORD *)(v22 + 392) = 1065353216;
  *(_OWORD *)(v22 + 400) = 0u;
  *(_OWORD *)(v22 + 416) = 0u;
  *(_QWORD *)(v22 + 432) = 0;
  *(_DWORD *)(v22 + 440) = 1065353216;
  v401 = (gdc::Registry *)v22;
  v26 = (char *)operator new(0x360uLL);
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  *(_QWORD *)v26 = &off_1E42DBB38;
  v27 = v405;
  v354 = v26 + 24;
  md::MapTileData::MapTileData((uint64_t)(v26 + 24), a2, (uint64_t)v404, v405 + 144, 1);
  v352 = a2;
  *((_QWORD *)v26 + 3) = &off_1E4293EE0;
  *((_QWORD *)v26 + 82) = &unk_1E4293F20;
  *((_QWORD *)v26 + 93) = 0;
  *((_QWORD *)v26 + 95) = 0;
  *((_QWORD *)v26 + 94) = 0;
  *(_OWORD *)(v26 + 780) = xmmword_19FFB3470;
  v358 = (int8x16_t *)(v26 + 780);
  *(_QWORD *)(v26 + 796) = 0x80000000800000;
  *((_QWORD *)v26 + 101) = v23;
  v28 = v403;
  *((_QWORD *)v26 + 102) = v402;
  *((_QWORD *)v26 + 103) = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  *((_OWORD *)v26 + 52) = 0u;
  *((_OWORD *)v26 + 53) = 0u;
  v31 = *(std::__shared_weak_count **)(v27 + 152);
  v357 = *(geo::codec::VectorTile **)(v27 + 144);
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v362 = (int32x4_t **)(v26 + 744);
  v34 = 1 << v26[193];
  v35 = ((double)(v34 + ~*((_DWORD *)v26 + 49)) + 0.5) / (double)v34;
  v36 = exp(v35 * 6.28318531 + -3.14159265);
  v37 = atan(v36) * 114.591559 + -90.0;
  v38 = cos(v37 * 0.034906585) * -559.82 + 111132.92;
  v39 = v38 + cos(v37 * 0.0698131701) * 1.175;
  v40 = v39 + cos(v37 * 0.104719755) * -0.0023;
  v41 = v37 * 0.00872664626;
  v42 = tan(v37 * 0.00872664626 + 0.78103484);
  v43 = log(v42);
  v44 = tan(v41 + 0.789761487);
  *(float *)&v43 = fabs((log(v44) - v43) * 0.159154943) / (v40 * (float)(1.0 / (float)v34));
  __powidf2();
  *(float *)&v45 = v45 * 0.0000000249532021;
  *((_DWORD *)v26 + 192) = LODWORD(v43);
  *((_DWORD *)v26 + 193) = LODWORD(v43);
  *((_DWORD *)v26 + 194) = LODWORD(v45);
  v413 = xmmword_19FFB5870;
  v414 = 1056964608;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = objc_msgSend(v46, "compressedBuildingsDisabled");
  v355 = (QuadTile *)(v26 + 192);

  v375 = v26;
  v376 = v31;
  if ((v47 & 1) == 0 && !geo::codec::VectorTile::daVinciBuildingVertices(v357))
    goto LABEL_229;
  v48 = geo::codec::VectorTile::key(v357);
  v49 = -1 << (v26[193] - (*(_BYTE *)(v48 + 1) & 0x3F));
  v50 = geo::codec::VectorTile::daVinciSubTileBuildingIndices(v357, *((_DWORD *)v26 + 50) & ~v49, *((_DWORD *)v26 + 49) & ~v49, (v26[193] - (*(_BYTE *)(v48 + 1) & 0x3F)));
  if ((((char *)v50[1] - (char *)*v50) & 0x1FFFFFFFELL) == 0)
    goto LABEL_229;
  v356 = geo::codec::VectorTile::daVinciBuildingSections(v357);
  v363 = geo::codec::VectorTile::daVinciLineLoops(v357);
  if (geo::codec::VectorTile::daVinciBuildingVertices(v357))
  {
    v51 = geo::codec::VectorTile::daVinciBuildingVertices(v357);
  }
  else
  {
    v52 = geo::codec::VectorTile::daVinciVertices(v357);
    v51 = v52 + 12 * geo::codec::VectorTile::daVinciBuildingVertexOffset(v357);
  }
  v53 = geo::codec::VectorTile::key(v357);
  v54 = -1 << (v26[193] - (*(_BYTE *)(v53 + 1) & 0x3F));
  v361 = geo::codec::VectorTile::daVinciSubTileBuildingIndices(v357, *((_DWORD *)v26 + 50) & ~v54, *((_DWORD *)v26 + 49) & ~v54, (v26[193] - (*(_BYTE *)(v53 + 1) & 0x3F)));
  v55 = *((_DWORD *)v361 + 2);
  v56 = *(_DWORD *)v361;
  LODWORD(v407) = 0;
  v57 = geo::codec::VectorTile::key(v357);
  md::VirtualSubTileHelper::computeScaleAndOffset((uint64_t)v437, (uint64_t)v355, *(_QWORD *)v57, *(unsigned __int16 *)(v57 + 8) | (*(unsigned __int8 *)(v57 + 10) << 16), (float *)&v407);
  v359 = geo::codec::VectorTile::daVinciBuildings(v357);
  v360 = (unsigned __int16)((v55 - v56) >> 1);
  if (!(unsigned __int16)((v55 - v56) >> 1))
    goto LABEL_228;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v351 = (_QWORD *)v434 + 1;
  __asm { FMOV            V10.2S, #1.0 }
  v365 = v51;
  v72 = v359;
  do
  {
    v76 = (*v361)->u16[v67];
    v371 = v67;
    if ((*(_BYTE *)(v72 + 40 * (*v361)->u16[v67] + 36) & 4) != 0)
    {
      v174 = (_QWORD *)(v72 + 40 * (*v361)->u16[v67] + 24);
      v175 = (char *)*((_QWORD *)v26 + 106);
      v176 = *((_QWORD *)v26 + 107);
      if ((unint64_t)v175 < v176)
      {
        *(_QWORD *)v175 = *v174;
        v177 = v175 + 8;
LABEL_188:
        *((_QWORD *)v26 + 106) = v177;
        v67 = v371;
        goto LABEL_42;
      }
      v179 = (char *)*((_QWORD *)v26 + 105);
      v180 = v175 - v179;
      v181 = (v175 - v179) >> 3;
      v182 = v181 + 1;
      if ((unint64_t)(v181 + 1) >> 61)
        abort();
      v183 = v176 - (_QWORD)v179;
      if (v183 >> 2 > v182)
        v182 = v183 >> 2;
      if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFF8)
        v184 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v184 = v182;
      if (v184)
      {
        if (v184 >> 61)
LABEL_319:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v185 = v174;
        v186 = v184;
        v187 = operator new(8 * v184);
        v184 = v186;
        v174 = v185;
        v180 = v175 - v179;
      }
      else
      {
        v187 = 0;
      }
      v209 = &v187[8 * v181];
      *v209 = *v174;
      v177 = v209 + 1;
      if (v175 == v179)
      {
        v72 = v359;
      }
      else
      {
        v210 = v175 - 8 - v179;
        if (v210 >= 0x58)
        {
          v72 = v359;
          if ((unint64_t)(v175 - &v187[v180]) >= 0x20)
          {
            v211 = (v210 >> 3) + 1;
            v212 = &v187[8 * v181 - 16];
            v213 = v175 - 16;
            v214 = v211 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v215 = *(_OWORD *)v213;
              *(v212 - 1) = *((_OWORD *)v213 - 1);
              *v212 = v215;
              v212 -= 2;
              v213 -= 32;
              v214 -= 4;
            }
            while (v214);
            v209 -= v211 & 0x3FFFFFFFFFFFFFFCLL;
            v175 -= 8 * (v211 & 0x3FFFFFFFFFFFFFFCLL);
            if (v211 == (v211 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_185;
          }
        }
        else
        {
          v72 = v359;
        }
        do
        {
          v216 = *((_QWORD *)v175 - 1);
          v175 -= 8;
          *--v209 = v216;
        }
        while (v175 != v179);
      }
LABEL_185:
      *((_QWORD *)v26 + 105) = v209;
      *((_QWORD *)v26 + 106) = v177;
      *((_QWORD *)v26 + 107) = &v187[8 * v184];
      if (v179)
      {
        v217 = v72;
        operator delete(v179);
        v72 = v217;
      }
      v51 = v365;
      goto LABEL_188;
    }
    v417 = xmmword_19FFB5880;
    *(_OWORD *)v418 = xmmword_19FFB5880;
    *(_OWORD *)&v418[16] = xmmword_19FFB5880;
    v419 = xmmword_19FFB5880;
    v420 = xmmword_19FFB5880;
    v421 = xmmword_19FFB5880;
    *(_QWORD *)&v422 = 0xFF7FFFFF7F7FFFFFLL;
    v77 = v72 + 40 * v76;
    v79 = *(unsigned __int16 *)(v77 + 34);
    v78 = (unsigned __int16 *)(v77 + 34);
    if (v79)
    {
      v80 = 0;
      v367 = v78;
      v369 = v356 + 20 * *(v78 - 1);
      v81 = v66;
      do
      {
        v82 = (unsigned int *)(v363 + 8 * *(unsigned int *)(v369 + 20 * v80 + 12));
        v83 = *v82;
        v84 = (float *)(v51 + 12 * *v82);
        v85 = *((unsigned __int16 *)v82 + 2);
        if (v84[3 * v85 - 3] == *v84 && v84[3 * v85 - 2] == *(float *)(v51 + 12 * v83 + 4))
          --v85;
        v86 = v85;
        v395 = v84;
        v398 = v85;
        v373 = v80;
        if (v85 >= 3 && *(float *)&v413 != 0.0)
        {
          v87 = vcvtas_u32_f32(1.5708 / *((float *)&v413 + 1));
          if (v87 <= 1)
            v87 = 1;
          v88 = v86 * (unint64_t)(v87 + 1);
          if (0xAAAAAAAAAAAAAAABLL * ((v65 - v66) >> 2) >= v88)
          {
            v91 = v81;
            v92 = v66;
          }
          else
          {
            if (v88 > 0x1555555555555555)
              abort();
            v89 = (char *)operator new(12 * v88);
            v90 = (v81 - v66) / 12;
            v91 = &v89[12 * v90];
            v92 = v91;
            if (v81 != v66)
            {
              v92 = &v89[12 * v90];
              do
              {
                v93 = *(_QWORD *)(v81 - 12);
                v81 -= 12;
                v94 = *((_DWORD *)v81 + 2);
                *(_QWORD *)(v92 - 12) = v93;
                v92 -= 12;
                *((_DWORD *)v92 + 2) = v94;
              }
              while (v81 != v66);
            }
            v65 = &v89[12 * v88];
            if (v66)
              operator delete(v66);
          }
          v125 = v395;
          v126 = 0;
          v127 = v398;
          v66 = v92;
          while (1)
          {
            v128 = v126;
            v129 = (v398 - 1 + v126++) % v127;
            if (v126 == v127)
              v130 = 0;
            else
              v130 = v128 + 1;
            v131 = (int32x2_t *)&v125[3 * v129];
            v63.i32[0] = v131[1].i32[0];
            v132 = &v125[3 * v128];
            *(_QWORD *)&v61 = *(_QWORD *)v132;
            *(float *)&v62 = v132[2];
            v133 = (__int32 *)&v125[3 * v130];
            v134 = *v133;
            v135 = v133[1];
            v136.i32[0] = v133[2];
            v137 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v61, 0);
            v137.i32[0] = *v133;
            v138 = vsub_f32(v137, (float32x2_t)vdup_lane_s32(*v131, 0));
            v139 = vsub_f32((float32x2_t)__PAIR64__(DWORD1(v61), v135), (float32x2_t)vdup_lane_s32(*v131, 1));
            v136.i32[1] = v62;
            v140 = vsub_f32(v136, (float32x2_t)vdup_lane_s32(v63, 0));
            v141 = vdiv_f32(_D10, vsqrt_f32(vmla_f32(vmla_f32(vmul_f32(v138, v138), v139, v139), v140, v140)));
            v142 = vmul_f32(v141, v140);
            v143 = vmul_f32(v141, (float32x2_t)__PAIR64__(v139.u32[1], v138.u32[0]));
            v139.i32[1] = v138.i32[1];
            v144 = vmul_f32(v141, v139);
            *(float32x2_t *)v64.f32 = vmla_lane_f32(vneg_f32(vmul_lane_f32(v144, v142, 1)), v142, v143, 1);
            v59 = (float32x2_t)vzip1_s32((int32x2_t)v143, (int32x2_t)v144);
            v145 = (float32x2_t)vext_s8((int8x8_t)v144, (int8x8_t)v143, 4uLL);
            v144.i32[0] = v142.i32[1];
            v142.i32[1] = v143.i32[1];
            *(float32x2_t *)v60.f32 = vmla_f32(vneg_f32(vmul_f32(v142, v145)), v144, v59);
            v146 = vmul_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32);
            v58 = (float32x2_t)vdup_lane_s32((int32x2_t)v146, 1);
            v147 = 1.0 / sqrtf(vadd_f32(vmla_f32(v146, *(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32), v58).f32[0]);
            v148 = vmuls_lane_f32(v147, *(float32x2_t *)v60.f32, 1);
            if (v148 == 0.0)
            {
              if (v91 >= v65)
              {
                v166 = 0xAAAAAAAAAAAAAAABLL * ((v91 - v66) >> 2) + 1;
                if (v166 > 0x1555555555555555)
                  abort();
                if (0x5555555555555556 * ((v65 - v66) >> 2) > v166)
                  v166 = 0x5555555555555556 * ((v65 - v66) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((v65 - v66) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v167 = 0x1555555555555555;
                else
                  v167 = v166;
                if (v167)
                {
                  if (v167 > 0x1555555555555555)
                    goto LABEL_319;
                  v380 = v62;
                  v382 = v61;
                  v168 = (char *)operator new(12 * v167);
                  v62 = v380;
                  v61 = v382;
                }
                else
                {
                  v168 = 0;
                }
                v169 = &v168[4 * ((v91 - v66) >> 2)];
                *(_QWORD *)v169 = v61;
                *((_DWORD *)v169 + 2) = v62;
                if (v91 == v66)
                {
                  v173 = v91;
                  v66 = &v168[4 * ((v91 - v66) >> 2)];
                  v125 = v395;
                }
                else
                {
                  v170 = &v168[4 * ((v91 - v66) >> 2)];
                  v125 = v395;
                  do
                  {
                    v171 = *(_QWORD *)(v91 - 12);
                    v91 -= 12;
                    v172 = *((_DWORD *)v91 + 2);
                    *(_QWORD *)(v170 - 12) = v171;
                    v170 -= 12;
                    *((_DWORD *)v170 + 2) = v172;
                  }
                  while (v91 != v66);
                  v173 = v66;
                  v66 = v170;
                }
                v65 = &v168[12 * v167];
                v91 = v169 + 12;
                if (v173)
                  operator delete(v173);
              }
              else
              {
                *(_QWORD *)v91 = v61;
                *((_DWORD *)v91 + 2) = v62;
                v91 += 12;
              }
            }
            else
            {
              v377 = v60;
              v378 = v64;
              v379 = *(float *)v131[1].i32;
              v381 = (float32x2_t)*v131;
              *(int32x2_t *)v149.f32 = *v131;
              v149.i64[1] = v61;
              v428 = v149;
              *(_DWORD *)v429 = v134;
              *(_DWORD *)&v429[4] = v135;
              md::PolygonRound::smoothTwoSegments((float **)&__p, (float *)&v413, v428.f32);
              v150 = (float *)__p;
              v151 = *(float **)v409;
              if (__p != *(void **)v409)
              {
                v152 = v147 * v378.f32[0];
                v153 = v147 * v377.f32[0];
                v154 = (float)(vmuls_lane_f32(v153, v381, 1) + (float)(v152 * v381.f32[0])) + (float)(v148 * v379);
                v155 = 1.0 / v148;
                do
                {
                  v157 = *v150;
                  v156 = v150[1];
                  v158 = (float)(v154 - (float)((float)(*v150 * v152) + (float)(v156 * v153))) * v155;
                  if (v91 < v65)
                  {
                    *(float *)v91 = v157;
                    *((float *)v91 + 1) = v156;
                    *((float *)v91 + 2) = v158;
                    v91 += 12;
                  }
                  else
                  {
                    v159 = 0xAAAAAAAAAAAAAAABLL * ((v91 - v66) >> 2) + 1;
                    if (v159 > 0x1555555555555555)
                      abort();
                    if (0x5555555555555556 * ((v65 - v66) >> 2) > v159)
                      v159 = 0x5555555555555556 * ((v65 - v66) >> 2);
                    if (0xAAAAAAAAAAAAAAABLL * ((v65 - v66) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                      v160 = 0x1555555555555555;
                    else
                      v160 = v159;
                    if (v160)
                    {
                      if (v160 > 0x1555555555555555)
                        goto LABEL_319;
                      v161 = (char *)operator new(12 * v160);
                      v157 = *v150;
                      v156 = v150[1];
                    }
                    else
                    {
                      v161 = 0;
                    }
                    v162 = (float *)&v161[4 * ((v91 - v66) >> 2)];
                    *v162 = v157;
                    v162[1] = v156;
                    v162[2] = v158;
                    v163 = v162;
                    while (v91 != v66)
                    {
                      v164 = *(_QWORD *)(v91 - 12);
                      v91 -= 12;
                      v165 = *((_DWORD *)v91 + 2);
                      *(_QWORD *)(v163 - 3) = v164;
                      v163 -= 3;
                      *((_DWORD *)v163 + 2) = v165;
                    }
                    v65 = &v161[12 * v160];
                    v91 = (char *)(v162 + 3);
                    if (v66)
                      operator delete(v66);
                    v66 = (char *)v163;
                  }
                  v150 += 2;
                }
                while (v150 != v151);
                v150 = (float *)__p;
              }
              if (v150)
                operator delete(v150);
              v125 = v395;
            }
            v127 = v398;
            if (v126 == v398)
              goto LABEL_89;
          }
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v65 - v66) >> 2) >= v85)
        {
          v91 = v81;
          v96 = v66;
          if (v85)
            goto LABEL_68;
        }
        else
        {
          v95 = (char *)operator new(12 * v85);
          v91 = &v95[12 * ((v81 - v66) / 12)];
          v96 = v91;
          if (v81 != v66)
          {
            v96 = &v95[12 * ((v81 - v66) / 12)];
            do
            {
              v97 = *(_QWORD *)(v81 - 12);
              v81 -= 12;
              v98 = *((_DWORD *)v81 + 2);
              *(_QWORD *)(v96 - 12) = v97;
              v96 -= 12;
              *((_DWORD *)v96 + 2) = v98;
            }
            while (v81 != v66);
          }
          v65 = &v95[12 * v398];
          if (v66)
            operator delete(v66);
          if ((_DWORD)v398)
          {
LABEL_68:
            v99 = 0;
            v66 = v96;
            v100 = v395;
            while (1)
            {
              v102 = &v100[3 * v99];
              if (v91 < v65)
              {
                v101 = *(_QWORD *)v102;
                *((float *)v91 + 2) = v102[2];
                *(_QWORD *)v91 = v101;
                v91 += 12;
              }
              else
              {
                v103 = 0xAAAAAAAAAAAAAAABLL * ((v91 - v66) >> 2) + 1;
                if (v103 > 0x1555555555555555)
                  abort();
                if (0x5555555555555556 * ((v65 - v66) >> 2) > v103)
                  v103 = 0x5555555555555556 * ((v65 - v66) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((v65 - v66) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v104 = 0x1555555555555555;
                else
                  v104 = v103;
                if (v104)
                {
                  if (v104 > 0x1555555555555555)
                    goto LABEL_319;
                  v105 = (char *)operator new(12 * v104);
                }
                else
                {
                  v105 = 0;
                }
                v106 = *(_QWORD *)v102;
                v107 = &v105[4 * ((v91 - v66) >> 2)];
                *((float *)v107 + 2) = v102[2];
                *(_QWORD *)v107 = v106;
                for (i = v107; v91 != v66; *((_DWORD *)i + 2) = v110)
                {
                  v109 = *(_QWORD *)(v91 - 12);
                  v91 -= 12;
                  v110 = *((_DWORD *)v91 + 2);
                  *(_QWORD *)(i - 12) = v109;
                  i -= 12;
                }
                v65 = &v105[12 * v104];
                v91 = v107 + 12;
                if (v66)
                  operator delete(v66);
                v66 = i;
              }
              ++v99;
              v100 = v395;
              if (v99 == v398)
                goto LABEL_89;
            }
          }
        }
        v66 = v96;
LABEL_89:
        v67 = v371;
        if (v91 != v66)
        {
          v111 = 0;
          v112 = 0;
          v113 = *((_QWORD *)v26 + 104);
          v114 = v437[24];
          v115 = *(float32x2_t *)v437;
          v116 = *(float32x2_t *)&v437[12];
          v117 = *((float *)v26 + 194) * 25000.0;
          do
          {
            v58.i32[0] = 0;
            v118 = 0;
            v59.i32[0] = v114;
            v119 = vdup_lane_s8(vceq_s8((int8x8_t)v59, (int8x8_t)v58), 0);
            v59 = *(float32x2_t *)&v66[12 * v111];
            v58 = (float32x2_t)vbsl_s8(v119, (int8x8_t)v59, (int8x8_t)vmla_f32(v116, v59, v115));
            v120 = (float *)&v417 + 1;
            *((_QWORD *)&v61 + 1) = 1048871917;
            v62 = xmmword_19FFB36B0;
            v64.i64[1] = 0xBF00000000000000;
            v63.i32[1] = 1048871917;
            do
            {
              v428 = (float32x4_t)xmmword_19FFB3590;
              *(_OWORD *)v429 = xmmword_19FFB3590;
              *(_OWORD *)&v429[16] = xmmword_19FFB36A0;
              v430 = xmmword_19FFB36B0;
              v431 = xmmword_19FFB36C0;
              v432 = xmmword_19FFB36D0;
              *(_OWORD *)v433 = xmmword_19FFB36E0;
              *(_OWORD *)&v433[16] = xmmword_19FFB36F0;
              v434[0] = xmmword_19FFB3700;
              *(_QWORD *)&v434[1] = 0x3E8483EDBF7746EDLL;
              DWORD2(v434[1]) = 0;
              v121 = vaddv_f32(vmul_f32(*(float32x2_t *)&v428.f32[v118], v58)) + (float)(v428.f32[v118 + 2] * v117);
              *(v120 - 1) = fminf(v121, *(v120 - 1));
              *v120 = fmaxf(*v120, v121);
              v120 += 2;
              v118 += 3;
            }
            while (v118 != 39);
            v122 = 0;
            v123 = (float *)&v417 + 1;
            do
            {
              v428 = (float32x4_t)xmmword_19FFB3590;
              *(_OWORD *)v429 = xmmword_19FFB3590;
              *(_OWORD *)&v429[16] = xmmword_19FFB36A0;
              v430 = xmmword_19FFB36B0;
              v431 = xmmword_19FFB36C0;
              v432 = xmmword_19FFB36D0;
              *(_OWORD *)v433 = xmmword_19FFB36E0;
              *(_OWORD *)&v433[16] = xmmword_19FFB36F0;
              v434[0] = xmmword_19FFB3700;
              *(_QWORD *)&v434[1] = 0x3E8483EDBF7746EDLL;
              DWORD2(v434[1]) = 0;
              v124 = vaddv_f32(vmul_f32(*(float32x2_t *)&v428.f32[v122], v58)) - (float)(v428.f32[v122 + 2] * v117);
              *(v123 - 1) = fminf(v124, *(v123 - 1));
              *v123 = fmaxf(*v123, v124);
              v123 += 2;
              v122 += 3;
            }
            while (v122 != 39);
            *((_QWORD *)v26 + 104) = ++v113;
            v111 = (unsigned __int16)++v112;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((v91 - v66) >> 2) > (unsigned __int16)v112);
          v91 = v66;
        }
        v80 = v373 + 1;
        v81 = v91;
        v51 = v365;
      }
      while (v373 + 1 < (unint64_t)*v367);
      v178.i64[0] = __PAIR64__(DWORD2(v417), v417);
      v178.i64[1] = __PAIR64__(DWORD1(v417), *(unsigned int *)v418);
      v385 = v178;
      v396 = (float32x2_t)__PAIR64__(*(unsigned int *)&v418[4], HIDWORD(v417));
    }
    else
    {
      v396 = (float32x2_t)0x80000000800000;
      v385 = (int8x16_t)xmmword_19FFB3470;
    }
    v188 = (gdc::Registry *)*((_QWORD *)v26 + 101);
    v431 = v420;
    v432 = v421;
    *(_QWORD *)v433 = v422;
    v428 = (float32x4_t)v417;
    *(_OWORD *)v429 = *(_OWORD *)v418;
    *(_OWORD *)&v429[16] = *(_OWORD *)&v418[16];
    v430 = v419;
    v433[8] = 0;
    LOBYTE(v434[0]) = 0;
    BYTE8(v434[0]) = 0;
    LOBYTE(v434[2]) = 0;
    *(double *)v399.i64 = COERCE_DOUBLE(gdc::Registry::create(v188));
    v189 = gdc::Registry::storage<arComponents::LocalBounds>((uint64_t)v188);
    v416 = *(double *)v399.i64;
    v190 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v189 + 32), (uint64_t)&v416);
    if ((v191 & 1) != 0)
    {
      v204 = *(_QWORD *)(v189 + 88);
      if (v204 >= *(_QWORD *)(v189 + 96))
      {
        v205 = std::vector<arComponents::LocalBounds>::__emplace_back_slow_path<arComponents::LocalBounds&>((arComponents::LocalBounds **)(v189 + 80), (const arComponents::LocalBounds *)&v428);
        v206 = (_QWORD *)v189;
      }
      else
      {
        arComponents::LocalBounds::LocalBounds(*(arComponents::LocalBounds **)(v189 + 88), (const arComponents::LocalBounds *)&v428);
        v205 = (char *)(v204 + 168);
        v206 = (_QWORD *)v189;
        *(_QWORD *)(v189 + 88) = v205;
      }
      v206[11] = v205;
LABEL_206:
      v228 = (_QWORD *)v206[22];
      if (v228)
      {
        v229 = v206[31];
        do
        {
          __p = &v416;
          *(_QWORD *)v409 = 1;
          v415[0] = v229;
          v230 = v228[6];
          if (!v230)
            goto LABEL_320;
          (*(void (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)v230 + 48))(v230, v415, &__p);
          v228 = (_QWORD *)*v228;
        }
        while (v228);
      }
      goto LABEL_210;
    }
    v383 = (_QWORD *)v189;
    v192 = *(_QWORD *)(v189 + 80);
    v193 = ((uint64_t)v190 - *(_QWORD *)(v189 + 56)) >> 3;
    v194 = v192 + 168 * v193;
    v196 = v431;
    v195 = v432;
    v197 = v430;
    *(_QWORD *)(v194 + 96) = *(_QWORD *)v433;
    *(_OWORD *)(v194 + 64) = v196;
    *(_OWORD *)(v194 + 80) = v195;
    *(_OWORD *)(v194 + 48) = v197;
    v198 = v428;
    v199 = *(_OWORD *)&v429[16];
    *(_OWORD *)(v194 + 16) = *(_OWORD *)v429;
    *(_OWORD *)(v194 + 32) = v199;
    *(float32x4_t *)v194 = v198;
    v200 = (void **)(v194 + 104);
    v201 = (_BYTE *)(v194 + 128);
    if (*(unsigned __int8 *)(v194 + 128) == LOBYTE(v434[0]))
    {
      if (*(_BYTE *)(v194 + 128))
      {
        v202 = *v200;
        if (*v200)
        {
          *(_QWORD *)(v192 + 168 * v193 + 112) = v202;
          v203 = v192;
          operator delete(v202);
          v192 = v203;
          *v200 = 0;
          *(_QWORD *)(v194 + 112) = 0;
          *(_QWORD *)(v194 + 120) = 0;
        }
        *(_OWORD *)v200 = *(_OWORD *)&v433[8];
        *(_QWORD *)(v192 + 168 * v193 + 120) = *(_QWORD *)&v433[24];
        memset(&v433[8], 0, 24);
      }
    }
    else if (*(_BYTE *)(v194 + 128))
    {
      v207 = *v200;
      if (*v200)
      {
        *(_QWORD *)(v192 + 168 * v193 + 112) = v207;
        v208 = v192;
        operator delete(v207);
        v192 = v208;
      }
      *v201 = 0;
    }
    else
    {
      *v200 = 0;
      *(_QWORD *)(v194 + 112) = 0;
      *(_QWORD *)(v194 + 120) = 0;
      *(_OWORD *)v200 = *(_OWORD *)&v433[8];
      *(_QWORD *)(v192 + 168 * v193 + 120) = *(_QWORD *)&v433[24];
      memset(&v433[8], 0, 24);
      *v201 = 1;
    }
    v218 = v192 + 168 * v193;
    v221 = *(unsigned __int8 *)(v218 + 160);
    v220 = (char *)(v218 + 160);
    v219 = v221;
    v222 = (void **)(v220 - 24);
    if (v221 == LOBYTE(v434[2]))
    {
      v67 = v371;
      v206 = v383;
      if ((float32x4_t *)v194 != &v428 && v219)
        std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>((uint64_t)v222, *((unint64_t *)&v434[0] + 1), *(char **)&v434[1], (uint64_t)(*(_QWORD *)&v434[1] - *((_QWORD *)&v434[0] + 1)) >> 4);
    }
    else
    {
      if (v219)
      {
        v223 = *v222;
        if (v223)
        {
          *(_QWORD *)(v192 + 168 * v193 + 144) = v223;
          operator delete(v223);
        }
        v224 = 0;
      }
      else
      {
        *v222 = 0;
        *((_QWORD *)v220 - 2) = 0;
        *((_QWORD *)v220 - 1) = 0;
        *(_OWORD *)v222 = *(_OWORD *)((char *)v434 + 8);
        *(_QWORD *)(v192 + 168 * v193 + 152) = *((_QWORD *)&v434[1] + 1);
        *v351 = 0;
        v351[1] = 0;
        v351[2] = 0;
        v224 = 1;
      }
      *v220 = v224;
      v67 = v371;
      v206 = v383;
    }
    if (v194 == v206[11])
      goto LABEL_206;
    v225 = (_QWORD *)v206[16];
    if (v225)
    {
      v226 = v206[31];
      do
      {
        __p = &v416;
        *(_QWORD *)v409 = 1;
        v415[0] = v226;
        v227 = v225[6];
        if (!v227)
          goto LABEL_320;
        (*(void (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)v227 + 48))(v227, v415, &__p);
        v225 = (_QWORD *)*v225;
      }
      while (v225);
    }
LABEL_210:
    if (LOBYTE(v434[2]) && *((_QWORD *)&v434[0] + 1))
    {
      *(_QWORD *)&v434[1] = *((_QWORD *)&v434[0] + 1);
      operator delete(*((void **)&v434[0] + 1));
    }
    if (LOBYTE(v434[0]) && *(_QWORD *)&v433[8])
    {
      *(_QWORD *)&v433[16] = *(_QWORD *)&v433[8];
      operator delete(*(void **)&v433[8]);
    }
    v231 = (float32x4_t)v385;
    v231.i32[3] = HIDWORD(*(unsigned __int128 *)v358);
    v232 = *(float32x4_t *)v358;
    v232.i32[3] = v385.i32[3];
    *v358 = vbslq_s8((int8x16_t)vcgtq_f32(v232, v231), v385, *v358);
    *(float32x2_t *)(v26 + 796) = vmaxnm_f32(*(float32x2_t *)(v26 + 796), v396);
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v351);
    v233 = (void *)objc_claimAutoreleasedReturnValue();
    v234 = objc_msgSend(v233, "arDebugMiniMap");

    if (v234)
    {
      v235 = (_QWORD *)gdc::Registry::storage<arComponents::LocalBounds>(*((_QWORD *)v26 + 101));
      v236 = v235[4];
      if ((unint64_t)v399.i64[0] >> 39 < (v235[5] - v236) >> 3
        && (v237 = *(_QWORD *)(v236 + 8 * ((unint64_t)v399.i64[0] >> 39))) != 0
        && (v238 = *(unsigned __int16 *)(v237 + 2 * (HIDWORD(v399.i64[0]) & 0x7F)),
            v240 = v235[7],
            v239 = v235[8],
            v238 < (v239 - v240) >> 3)
        && ((v241 = v240 + 8 * v238, v241 != v239) ? (_ZF = *(_DWORD *)(v241 + 4) == v399.i32[1]) : (_ZF = 0), _ZF))
      {
        v73 = v235[11];
        v74 = v235[10] + 168 * v238;
      }
      else
      {
        v73 = v235[11];
        v74 = v73;
      }
      if (v74 == v73)
        v75 = 0;
      else
        v75 = (arComponents::LocalBounds *)v74;
      arComponents::LocalBounds::debugEdges(v75);
    }
    v72 = v359;
LABEL_42:
    ++v67;
  }
  while (v67 != v360);
  if (v66)
    operator delete(v66);
LABEL_228:
  v31 = v376;
LABEL_229:
  v412 = 0;
  v243 = geo::codec::VectorTile::key(v357);
  md::VirtualSubTileHelper::computeScaleAndOffset((uint64_t)&__p, (uint64_t)v355, *(_QWORD *)v243, *(unsigned __int16 *)(v243 + 8) | (*(unsigned __int8 *)(v243 + 10) << 16), (float *)&v412);
  v437[0] = 0;
  v384 = v411;
  if (v411)
  {
    *(_DWORD *)&v437[8] = 0;
    *(_QWORD *)&v437[12] = 0;
    *(_DWORD *)&v437[20] = 1065353216;
    v244.i64[0] = *(_QWORD *)&v409[4];
    v245.i64[0] = 1065353216;
    v246 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v437[8], (float32x4_t)xmmword_19FFB3850);
    v247 = vmlaq_f32((float32x4_t)vextq_s8(v246, v246, 8uLL), (float32x4_t)xmmword_19FFB3850, v245);
    v248 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v437[8], (float32x4_t)xmmword_19FFB3480);
    v249 = vmlaq_f32((float32x4_t)vextq_s8(v248, v248, 8uLL), (float32x4_t)xmmword_19FFB3480, v245);
    v250 = (float32x4_t)vzip1q_s32(v244, v244);
    v251 = (int8x16_t)vmulq_f32(v250, *(float32x4_t *)&v437[8]);
    v378 = vaddq_f32(vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v251, v251, 8uLL), v245, v250), (float32x4_t)xmmword_19FFB3580, v410), (float32x4_t)xmmword_19FFB34C0);
    v252 = v249.i64[1];
    *(_QWORD *)&v437[8] = v247.i64[1];
    *(_QWORD *)&v437[16] = v249.i64[0];
    LODWORD(v253) = 0;
    v254 = (float32x4_t)vzip1q_s32((int32x4_t)__p, (int32x4_t)__p);
    v255 = (int8x16_t)vmulq_f32(v254, *(float32x4_t *)&v437[8]);
    v247.i64[1] = v252;
    HIDWORD(v253) = HIDWORD(__p);
    v256 = (float32x4_t)vzip1q_s32((int32x4_t)v253, (int32x4_t)v253);
    v257 = (int8x16_t)vmulq_f32(v256, *(float32x4_t *)&v437[8]);
    v377 = vmulq_n_f32((float32x4_t)xmmword_19FFB3580, *(float *)v409);
    *(float32x4_t *)v437 = vmlaq_f32((float32x4_t)vextq_s8(v255, v255, 8uLL), v247, v254);
    *(float32x4_t *)&v437[16] = vmlaq_f32((float32x4_t)vextq_s8(v257, v257, 8uLL), v247, v256);
  }
  v368 = geo::codec::VectorTile::daVinciLandmarks(v357);
  v364 = geo::codec::VectorTile::daVinciLandmarkAssetIDs(v357);
  v258 = geo::codec::VectorTile::daVinciLandmarkCount(v357);
  v264 = v368;
  if (v258)
  {
    v265 = 0;
    v266 = 0;
    v366 = v258;
    do
    {
      v390 = v264 + 48 * v265;
      if (*(_BYTE *)(v390 + 45))
      {
        v267 = v264 + 48 * v265;
        v268 = *(_QWORD *)(v267 + 16);
        v269 = v268 != 0;
        v270 = *(_QWORD *)(v364 + 8 * (unsigned __int16)v266);
        if (v268)
          v259 = v268 >> 8;
        v271 = *(_QWORD *)(v267 + 16) | (v259 << 8);
        v272 = *(_BYTE *)(v267 + 44);
        v273 = (int32x4_t *)*((_QWORD *)v26 + 94);
        v274 = *((_QWORD *)v26 + 95);
        v389 = v271;
        v388 = v269;
        v372 = v266;
        v374 = v265;
        v370 = v259;
        v387 = *(_QWORD *)(v364 + 8 * (unsigned __int16)v266);
        if ((unint64_t)v273 >= v274)
        {
          v276 = *v362;
          v277 = ((char *)v273 - (char *)*v362) >> 5;
          v278 = v277 + 1;
          if ((unint64_t)(v277 + 1) >> 59)
            abort();
          v279 = v274 - (_QWORD)v276;
          if (v279 >> 4 > v278)
            v278 = v279 >> 4;
          if ((unint64_t)v279 >= 0x7FFFFFFFFFFFFFE0)
            v280 = 0x7FFFFFFFFFFFFFFLL;
          else
            v280 = v278;
          if (v280)
          {
            if (v280 >> 59)
              goto LABEL_319;
            v281 = (char *)operator new(32 * v280);
          }
          else
          {
            v281 = 0;
          }
          v282 = &v281[32 * v277];
          *(_QWORD *)v282 = v389;
          v282[8] = v388;
          *((_QWORD *)v282 + 2) = v387;
          v282[24] = v272;
          v283 = (int32x4_t *)v282;
          if (v273 != v276)
          {
            do
            {
              v260 = v273[-1];
              v283[-2] = v273[-2];
              v283[-1] = v260;
              v283 -= 2;
              v273 -= 2;
            }
            while (v273 != v276);
            v273 = *v362;
          }
          *((_QWORD *)v26 + 93) = v283;
          v275 = (int32x4_t *)(v282 + 32);
          *((_QWORD *)v26 + 94) = v282 + 32;
          *((_QWORD *)v26 + 95) = &v281[32 * v280];
          if (v273)
            operator delete(v273);
          v264 = v368;
          v265 = v374;
        }
        else
        {
          v273->i64[0] = v271;
          v273->i8[8] = v269;
          v273[1].i64[0] = v270;
          v275 = v273 + 2;
          v273[1].i8[8] = v272;
        }
        *((_QWORD *)v26 + 94) = v275;
        v386 = (_WORD *)(v264 + 48 * v265 + 42);
        if (*v386)
        {
          for (j = 0; j < (unsigned __int16)*v386; ++j)
          {
            v285 = *(_QWORD *)v390 + 48 * j;
            v261.i32[0] = *(_DWORD *)(v285 + 4);
            v286 = *(float *)(v285 + 36);
            v263.i32[0] = *(_DWORD *)(v285 + 8);
            v260.i32[0] = *(_DWORD *)(v285 + 12);
            v287 = *(_DWORD *)(v285 + 28);
            v288 = *(float *)(v285 + 40);
            v289 = *(float *)(v285 + 44);
            if (v384)
            {
              v290.i64[0] = *(_QWORD *)v437;
              v262.i32[1] = *(_DWORD *)(v285 + 16);
              v262.i32[0] = *(_DWORD *)v285;
              v291 = (float32x4_t)vzip1q_s32(v262, v262);
              v292 = (int8x16_t)vmulq_f32(v291, *(float32x4_t *)&v437[8]);
              v290.i64[1] = *(_QWORD *)&v437[24];
              v261.i32[1] = *(_DWORD *)(v285 + 20);
              v293 = (float32x4_t)vzip1q_s32(v261, v261);
              v294 = (int8x16_t)vmulq_f32(v293, *(float32x4_t *)&v437[8]);
              v263.i32[1] = *(_DWORD *)(v285 + 24);
              v428 = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v292, v292, 8uLL), v290, v291), v377, *(float *)(v285 + 32));
              *(float32x4_t *)v429 = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v294, v294, 8uLL), v290, v293), v377, v286);
              v295 = (float32x4_t)vzip1q_s32(v263, v263);
              v296 = (int8x16_t)vmulq_f32(v295, *(float32x4_t *)&v437[8]);
              v260.i32[1] = v287;
              v297 = (float32x4_t)vzip1q_s32(v260, v260);
              v298 = (int8x16_t)vmulq_f32(v297, *(float32x4_t *)&v437[8]);
              v397 = v428.i32[0];
              v400 = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v296, v296, 8uLL), v290, v295), v377, v288);
              v417 = (__int128)v400;
              *(float32x4_t *)v418 = vaddq_f32(v378, vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v298, v298, 8uLL), v290, v297), v377, v289));
              v295.i64[0] = *(_OWORD *)&v428 >> 32;
              v392 = *(_DWORD *)&v429[8];
              *(_QWORD *)&v299 = *(_OWORD *)&v400 >> 32;
              v295.i64[1] = *(_QWORD *)v429;
              v391 = v295;
              *((_QWORD *)&v299 + 1) = *(_QWORD *)v418;
              v393 = v299;
              v394 = *(_DWORD *)&v418[8];
            }
            else
            {
              v394 = *(_DWORD *)(v285 + 44);
              v397 = *(_DWORD *)v285;
              v400.i32[0] = *(_DWORD *)(v285 + 8);
              v300.i32[1] = *(_DWORD *)(v285 + 32);
              v300.i64[1] = __PAIR64__(*(_DWORD *)(v285 + 20), v261.u32[0]);
              v300.i32[0] = *(_DWORD *)(v285 + 16);
              v391 = v300;
              v392 = *(_DWORD *)(v285 + 36);
              DWORD1(v301) = *(_DWORD *)(v285 + 40);
              *((_QWORD *)&v301 + 1) = __PAIR64__(v287, v260.u32[0]);
              LODWORD(v301) = *(_DWORD *)(v285 + 24);
              v393 = v301;
            }
            v302 = (gdc::Registry *)*((_QWORD *)v26 + 101);
            *(_QWORD *)v429 = 0;
            v428 = (float32x4_t)v387;
            *(_QWORD *)&v429[8] = v389;
            v429[16] = v388;
            *(double *)&v303 = COERCE_DOUBLE(gdc::Registry::create(v302));
            v304 = (uint64_t *)gdc::Registry::storage<arComponents::LocalTransform>((uint64_t)v302);
            v416 = *(double *)&v303;
            v305 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v304 + 4, (uint64_t)&v416);
            if ((v306 & 1) != 0)
            {
              v312 = (__int32 *)v304[11];
              v311 = v304[12];
              v314 = v397;
              v313 = v400.i32[0];
              v316 = v393;
              v315 = v394;
              v318 = v391;
              v317 = v392;
              if ((unint64_t)v312 >= v311)
              {
                v320 = (char *)v304[10];
                v321 = 0xAAAAAAAAAAAAAAABLL * (((char *)v312 - v320) >> 4) + 1;
                v322 = 0x555555555555555;
                if (v321 > 0x555555555555555)
                  abort();
                v323 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v311 - (_QWORD)v320) >> 4);
                if (2 * v323 > v321)
                  v321 = 2 * v323;
                if (v323 < 0x2AAAAAAAAAAAAAALL)
                  v322 = v321;
                if (v322)
                {
                  if (v322 > 0x555555555555555)
                    goto LABEL_319;
                  v324 = v322;
                  v325 = (char *)operator new(48 * v322);
                  v314 = v397;
                  v313 = v400.i32[0];
                  v316 = v393;
                  v315 = v394;
                  v318 = v391;
                  v317 = v392;
                  v322 = v324;
                }
                else
                {
                  v325 = 0;
                }
                v326 = &v325[16 * (((char *)v312 - v320) >> 4)];
                *(_DWORD *)v326 = v314;
                *(float32x4_t *)(v326 + 4) = v318;
                *((_DWORD *)v326 + 5) = v317;
                *((_DWORD *)v326 + 6) = v313;
                *(_OWORD *)(v326 + 28) = v316;
                *((_DWORD *)v326 + 11) = v315;
                v327 = (uint64_t)v326;
                if (v312 != (__int32 *)v320)
                {
                  do
                  {
                    v328 = *((_OWORD *)v312 - 3);
                    v329 = *((_OWORD *)v312 - 1);
                    *(_OWORD *)(v327 - 32) = *((_OWORD *)v312 - 2);
                    *(_OWORD *)(v327 - 16) = v329;
                    *(_OWORD *)(v327 - 48) = v328;
                    v327 -= 48;
                    v312 -= 12;
                  }
                  while (v312 != (__int32 *)v320);
                  v312 = (__int32 *)v304[10];
                }
                v319 = v326 + 48;
                v304[10] = v327;
                v304[11] = (uint64_t)(v326 + 48);
                v304[12] = (uint64_t)&v325[48 * v322];
                if (v312)
                  operator delete(v312);
              }
              else
              {
                *v312 = v397;
                *(float32x4_t *)(v312 + 1) = v391;
                v312[5] = v392;
                v312[6] = v400.i32[0];
                *(_OWORD *)(v312 + 7) = v393;
                v319 = v312 + 12;
                v312[11] = v394;
              }
              v304[11] = (uint64_t)v319;
              v308 = v304[31];
            }
            else
            {
              v307 = v304[10] + 48 * (((uint64_t)v305 - v304[7]) >> 3);
              *(_DWORD *)v307 = v397;
              *(float32x4_t *)(v307 + 4) = v391;
              *(_DWORD *)(v307 + 20) = v392;
              *(_DWORD *)(v307 + 24) = v400.i32[0];
              *(_OWORD *)(v307 + 28) = v393;
              *(_DWORD *)(v307 + 44) = v394;
              v308 = v304[31];
              if (v307 != v304[11])
              {
                v309 = (_QWORD *)v304[16];
                if (v309)
                {
                  while (1)
                  {
                    *(_QWORD *)&v417 = &v416;
                    *((_QWORD *)&v417 + 1) = 1;
                    v415[0] = v308;
                    v310 = v309[6];
                    if (!v310)
                      goto LABEL_320;
                    (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v310 + 48))(v310, v415, &v417);
                    v309 = (_QWORD *)*v309;
                    if (!v309)
                      goto LABEL_289;
                  }
                }
                goto LABEL_289;
              }
            }
            v330 = (_QWORD *)v304[22];
            if (v330)
            {
              while (1)
              {
                *(_QWORD *)&v417 = &v416;
                *((_QWORD *)&v417 + 1) = 1;
                v415[0] = v308;
                v331 = v330[6];
                if (!v331)
                  break;
                (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v331 + 48))(v331, v415, &v417);
                v330 = (_QWORD *)*v330;
                if (!v330)
                  goto LABEL_289;
              }
LABEL_320:
              std::__throw_bad_function_call[abi:nn180100]();
              __break(1u);
            }
LABEL_289:
            v332 = (uint64_t *)gdc::Registry::storage<arComponents::AssetDataReference>((uint64_t)v302);
            gdc::ComponentStorageWrapper<arComponents::AssetDataReference>::emplace(v332, v303, (uint64_t)&v428);
            v333 = *(std::__shared_weak_count **)v429;
            v31 = v376;
            if (*(_QWORD *)v429)
            {
              v334 = (unint64_t *)(*(_QWORD *)v429 + 8);
              do
                v335 = __ldaxr(v334);
              while (__stlxr(v335 - 1, v334));
              if (!v335)
              {
                ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
                std::__shared_weak_count::__release_weak(v333);
              }
            }
            v26 = v375;
          }
        }
        v265 = v374;
        v266 = v372 + 1;
        v264 = v368;
        v259 = v370;
      }
      ++v265;
    }
    while (v265 != v366);
  }
  v336 = *((float *)v26 + 194);
  v337 = *((float *)v26 + 197) / v336;
  v338 = *((float *)v26 + 200) / v336;
  v416 = v337;
  v407 = v338;
  gdc::Tiled::setZBoundsInMeters(&v355->_type, &v416, &v407);
  gdc::Tiled::Tiled((gdc::Tiled *)&v428, v355, v337, v338);
  v339 = *((_QWORD *)v26 + 101);
  LOWORD(v417) = v428.i16[0];
  *(_QWORD *)((char *)&v417 + 4) = *(uint64_t *)((char *)v428.i64 + 4);
  *(_OWORD *)&v418[8] = *(_OWORD *)&v429[8];
  v419 = v430;
  *(_QWORD *)&v418[24] = *(_QWORD *)&v429[24];
  v420 = v431;
  v422 = *(_OWORD *)v433;
  v423 = *(_OWORD *)&v433[16];
  v421 = v432;
  memcpy(v424, v434, sizeof(v424));
  v425 = v434[19];
  v426 = v435;
  v427 = v436;
  gdc::Context::setContext<md::components::SharedTransformData,md::components::SharedTransformData>(v339, (uint64_t)&v417);
  v340 = *((_QWORD *)v26 + 101);
  v415[0] = 0x3B7BEE224038A636;
  v415[1] = "md::MapDataType]";
  v415[2] = 15;
  v341 = (_QWORD *)operator new();
  v342 = (_WORD *)operator new();
  *v342 = 60;
  v341[2] = "md::MapDataType]";
  v341[3] = 15;
  v341[4] = v342;
  *v341 = &off_1E42B0AA0;
  v341[1] = 0x3B7BEE224038A636;
  std::__hash_table<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,std::__unordered_map_hasher<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,true>,std::__unordered_map_equal<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,std::equal_to<gdc::TypeInfo>,std::hash<gdc::TypeInfo>,true>,std::allocator<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>>>::__emplace_unique_key_args<gdc::TypeInfo,gdc::TypeInfo,gdc::ManagedObjectHolder<md::MapDataType> *>(v340, 0x3B7BEE224038A636uLL, (uint64_t)v415, (uint64_t)v341);
  if (v31)
  {
    v343 = (unint64_t *)&v31->__shared_owners_;
    do
      v344 = __ldaxr(v343);
    while (__stlxr(v344 - 1, v343));
    if (!v344)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  LODWORD(v417) = *((_DWORD *)v26 + 8);
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v417 + 8, v352 + 8);
  v428.i32[0] = v417;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v428.i64[1], (uint64_t)&v417 + 8);
  *(_DWORD *)v433 = 0;
  md::RegistryManager::addRegistry(v402, (uint64_t)&v428, (uint64_t *)&v401);
  if (*(_DWORD *)v433 != -1)
    ((void (*)(_BYTE *, float32x4_t *))off_1E42FA3C0[*(unsigned int *)v433])(v437, &v428);
  *(_DWORD *)v433 = -1;
  if (*(_QWORD *)v418 != *(_QWORD *)&v418[16])
    free(*(void **)v418);
  *v353 = v354;
  v353[1] = v26;
  if (v401)
  {
    gdc::Registry::~Registry(v401);
    MEMORY[0x1A1AF4E00]();
  }
  v345 = v403;
  if (v403)
  {
    v346 = (unint64_t *)&v403->__shared_owners_;
    do
      v347 = __ldaxr(v346);
    while (__stlxr(v347 - 1, v346));
    if (!v347)
    {
      ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
      std::__shared_weak_count::__release_weak(v345);
    }
  }
  if (v404[0])
    operator delete(v404[0]);
  v348 = v406;
  if (v406)
  {
    v349 = (unint64_t *)&v406->__shared_owners_;
    do
      v350 = __ldaxr(v349);
    while (__stlxr(v350 - 1, v349));
    if (!v350)
    {
      ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
      std::__shared_weak_count::__release_weak(v348);
    }
  }
}

void sub_19FB1062C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, md::MapTileData *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;
  gdc::Registry *a72;
  uint64_t v72;
  uint64_t v74;

  v74 = LODWORD(STACK[0x4D0]);
  if ((_DWORD)v74 != -1)
    ((void (*)(uint64_t, unint64_t *))off_1E42FA3C0[v74])(v72 - 208, &STACK[0x470]);
  LODWORD(STACK[0x4D0]) = -1;
  if (STACK[0x2B0] != STACK[0x2C0])
    free((void *)STACK[0x2B0]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a70);
  std::unique_ptr<gdc::Registry>::~unique_ptr[abi:nn180100](&a72);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x200]);
  if (STACK[0x210])
    operator delete((void *)STACK[0x210]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

uint64_t md::ARBuildingLayerDataSource::updateRequest()
{
  return 1;
}

void md::ARBuildingLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void std::__shared_ptr_emplace<md::ARBuildingTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBB38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ARBuildingTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBB38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::ARBuildingTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::DaVinciRoadTileDataRenderable::~DaVinciRoadTileDataRenderable(md::DaVinciRoadTileDataRenderable *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E426FA98;
  v2 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v2)
    std::default_delete<md::TrailJunctionsResource>::operator()[abi:nn180100](v2);
  *(_QWORD *)this = &off_1E426F400;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E426FA98;
  v2 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v2)
    std::default_delete<md::TrailJunctionsResource>::operator()[abi:nn180100](v2);
  *(_QWORD *)this = &off_1E426F400;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::default_delete<md::TrailJunctionsResource>::operator()[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 80);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[3];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 88) + 40))(*(_QWORD *)(a1 + 88), v5, 208);
  }
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), v3, 8 * *(_QWORD *)(a1 + 64));
  std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::__deallocate_node(a1, *(_QWORD **)(a1 + 24));
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), v4, 8 * *(_QWORD *)(a1 + 8));
  JUMPOUT(0x1A1AF4E00);
}

void md::MapTileDataRenderable<md::DaVinciCenterLineRoadsTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F400;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F400;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::__deallocate_node(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v4 = v2;
      v2 = (_QWORD *)*v2;
      v5 = v4[4];
      if (v5)
      {
        v6 = v4[5];
        v7 = v4[4];
        if (v6 != v5)
        {
          do
          {
            v8 = *(std::__shared_weak_count **)(v6 - 8);
            if (v8)
            {
              p_shared_owners = (unint64_t *)&v8->__shared_owners_;
              do
                v10 = __ldaxr(p_shared_owners);
              while (__stlxr(v10 - 1, p_shared_owners));
              if (!v10)
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
                std::__shared_weak_count::__release_weak(v8);
              }
            }
            v6 -= 16;
          }
          while (v6 != v5);
          v7 = v4[4];
        }
        v4[5] = v5;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v4[7] + 40))(v4[7], v7, v4[6] - v7);
      }
      v11 = (std::__shared_weak_count *)v4[3];
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      result = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 32) + 40))(*(_QWORD *)(v3 + 32), v4, 64);
    }
    while (v2);
  }
  return result;
}

uint64_t std::unordered_map<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,geo::StdAllocator<std::pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  size_t prime;
  int8x8_t v9;
  BOOL v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *i;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  float v39;
  float v40;
  _BOOL8 v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  int8x8_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v52;

  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v6;
  v7 = (_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  v52 = a1 + 24;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v9 = *(int8x8_t *)(a1 + 8);
    v10 = prime >= *(_QWORD *)&v9;
    if (prime > *(_QWORD *)&v9)
      goto LABEL_17;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v10)
  {
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
    if (*(_QWORD *)&v9 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v9), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime < *(_QWORD *)&v9)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 24); i; i = (_QWORD *)*i)
  {
    v15 = i[2];
    v16 = 0x9DDFEA08EB382D69 * (((8 * v15) + 8) ^ HIDWORD(v15));
    v17 = 0x9DDFEA08EB382D69 * (HIDWORD(v15) ^ (v16 >> 47) ^ v16);
    v18 = v17 ^ (v17 >> 47);
    v19 = 0x9DDFEA08EB382D69 * v18;
    v20 = *(_QWORD *)(a1 + 8);
    if (v20)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v2 = 0x9DDFEA08EB382D69 * v18;
        if (v19 >= v20)
          v2 = v19 % v20;
      }
      else
      {
        v2 = v19 & (v20 - 1);
      }
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v22)
      {
        v23 = (_QWORD *)*v22;
        if (v23)
        {
          if (v21.u32[0] < 2uLL)
          {
            while (1)
            {
              v25 = v23[1];
              if (v25 == v19)
              {
                if (v23[2] == v15)
                  goto LABEL_90;
              }
              else if ((v25 & (v20 - 1)) != v2)
              {
                goto LABEL_39;
              }
              v23 = (_QWORD *)*v23;
              if (!v23)
                goto LABEL_39;
            }
          }
          do
          {
            v24 = v23[1];
            if (v24 == v19)
            {
              if (v23[2] == v15)
                goto LABEL_90;
            }
            else
            {
              if (v24 >= v20)
                v24 %= v20;
              if (v24 != v2)
                break;
            }
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
      }
    }
LABEL_39:
    v26 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 16))(*v7, 64, 8);
    v27 = v26;
    *v26 = 0;
    v26[1] = v19;
    v26[2] = i[2];
    v28 = i[3];
    v26[3] = v28;
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v26[4] = 0;
    v26[5] = 0;
    v31 = i[7];
    v27[6] = 0;
    v27[7] = v31;
    v33 = (char *)i[4];
    v32 = (char *)i[5];
    v34 = v32 - v33;
    if (v32 != v33)
    {
      if (v34 < 0)
        abort();
      v35 = (_QWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v32 - v33, 8);
      v27[4] = v35;
      v27[5] = v35;
      v27[6] = &v35[2 * (v34 >> 4)];
      do
      {
        if (v35)
        {
          *v35 = *(_QWORD *)v33;
          v36 = *((_QWORD *)v33 + 1);
          v35[1] = v36;
          if (v36)
          {
            v37 = (unint64_t *)(v36 + 8);
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
          }
        }
        v33 += 16;
        v35 += 2;
      }
      while (v33 != v32);
      v27[5] = v35;
    }
    v39 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
    v40 = *(float *)(a1 + 48);
    if (!v20 || (float)(v40 * (float)v20) < v39)
    {
      v41 = (v20 & (v20 - 1)) != 0;
      if (v20 < 3)
        v41 = 1;
      v42 = v41 | (2 * v20);
      v43 = vcvtps_u32_f32(v39 / v40);
      if (v42 <= v43)
        v44 = v43;
      else
        v44 = v42;
      if (v44 == 1)
      {
        v44 = 2;
      }
      else if ((v44 & (v44 - 1)) != 0)
      {
        v44 = std::__next_prime(v44);
      }
      v45 = *(int8x8_t *)(a1 + 8);
      if (v44 > *(_QWORD *)&v45)
        goto LABEL_64;
      if (v44 < *(_QWORD *)&v45)
      {
        v46 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
        if (*(_QWORD *)&v45 < 3uLL || (v47 = (uint8x8_t)vcnt_s8(v45), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
        {
          v46 = std::__next_prime(v46);
        }
        else
        {
          v48 = 1 << -(char)__clz(v46 - 1);
          if (v46 >= 2)
            v46 = v48;
        }
        if (v44 <= v46)
          v44 = v46;
        if (v44 < *(_QWORD *)&v45)
LABEL_64:
          std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(a1, v44);
      }
      v20 = *(_QWORD *)(a1 + 8);
      if ((v20 & (v20 - 1)) != 0)
      {
        if (v19 >= v20)
          v2 = v19 % v20;
        else
          v2 = v19;
      }
      else
      {
        v2 = (v20 - 1) & v19;
      }
    }
    v49 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    if (v49)
    {
      *v27 = *v49;
    }
    else
    {
      *v27 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v27;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v52;
      if (!*v27)
        goto LABEL_89;
      v50 = *(_QWORD *)(*v27 + 8);
      if ((v20 & (v20 - 1)) != 0)
      {
        if (v50 >= v20)
          v50 %= v20;
      }
      else
      {
        v50 &= v20 - 1;
      }
      v49 = (_QWORD *)(*(_QWORD *)a1 + 8 * v50);
    }
    *v49 = v27;
LABEL_89:
    ++*(_QWORD *)(a1 + 40);
LABEL_90:
    ;
  }
  return a1;
}

void sub_19FB11350(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD **a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned __int8 v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v34;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 64, 8);
  v12 = v15;
  *v15 = 0;
  v15[1] = v8;
  v16 = *a3;
  v15[2] = **a3;
  v17 = v16[1];
  v15[3] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v15[4] = 0;
  v15[5] = 0;
  v15[6] = 0;
  {
    v34 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v34, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v12[7] = mdm::Allocator::instance(void)::alloc;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v22 = *(float *)(a1 + 48);
  if (!v9 || (float)(v22 * (float)v9) < v21)
  {
    v23 = 1;
    if (v9 >= 3)
      v23 = (v9 & (v9 - 1)) != 0;
    v24 = v23 | (2 * v9);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v27 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v27)
      goto LABEL_38;
    if (prime < *(_QWORD *)&v27)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
      if (*(_QWORD *)&v27 < 3uLL || (v29 = (uint8x8_t)vcnt_s8(v27), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < *(_QWORD *)&v27)
LABEL_38:
        std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v31)
  {
    *v12 = *v31;
LABEL_62:
    *v31 = v12;
    goto LABEL_63;
  }
  *v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 24;
  if (*v12)
  {
    v32 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v32 >= v9)
        v32 %= v9;
    }
    else
    {
      v32 &= v9 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_62;
  }
LABEL_63:
  ++*(_QWORD *)(a1 + 40);
  return v12;
}

void sub_19FB11770(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,void *>,mdm::Allocator>>::operator()[abi:nn180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::TrailJunctionRenderable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCD60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TrailJunctionRenderable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCD60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::TrailJunctionRenderable>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;

  v2 = a1[18];
  a1[18] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[17];
  a1[17] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)a1[14];
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)a1[14];
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  v10 = (std::__shared_weak_count *)a1[12];
  if (!v10)
    goto LABEL_19;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)a1[10];
    if (!v13)
      goto LABEL_25;
  }
  else
  {
LABEL_19:
    v13 = (std::__shared_weak_count *)a1[10];
    if (!v13)
      goto LABEL_25;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_25:
  v16 = (std::__shared_weak_count *)a1[8];
  if (!v16)
    goto LABEL_29;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (std::__shared_weak_count *)a1[6];
    if (!v19)
      return;
  }
  else
  {
LABEL_29:
    v19 = (std::__shared_weak_count *)a1[6];
    if (!v19)
      return;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

uint64_t std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,void *>,mdm::Allocator>>::operator()[abi:nn180100](uint64_t result, uint64_t a2)
{
  _QWORD **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = (_QWORD **)result;
  if (*(_BYTE *)(result + 8))
  {
    v4 = *(_QWORD *)(a2 + 32);
    if (v4)
    {
      v5 = *(_QWORD *)(a2 + 40);
      v6 = *(_QWORD *)(a2 + 32);
      if (v5 != v4)
      {
        do
        {
          v7 = *(std::__shared_weak_count **)(v5 - 8);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *, uint64_t))v7->__on_zero_shared)(v7, v6);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v5 -= 16;
        }
        while (v5 != v4);
        v6 = *(_QWORD *)(a2 + 32);
      }
      *(_QWORD *)(a2 + 40) = v4;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 56) + 40))(*(_QWORD *)(a2 + 56), v6, *(_QWORD *)(a2 + 48) - v6);
    }
    v10 = *(std::__shared_weak_count **)(a2 + 24);
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)**v3 + 40))(**v3, a2, 64);
  }
  if (a2)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)**v3 + 40))(**v3, a2, 64);
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table(uint64_t a1)
{
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::__deallocate_node(a1, *(_QWORD **)(a1 + 24));
  v2 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), v2, 8 * *(_QWORD *)(a1 + 8));
  return a1;
}

void md::HardwareFigDecoderInternal::~HardwareFigDecoderInternal(md::HardwareFigDecoderInternal *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  std::mutex::lock((std::mutex *)this);
  std::mutex::unlock((std::mutex *)this);
  v2 = (_QWORD *)*((_QWORD *)this + 11);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    operator delete(v4);
  std::mutex::~mutex((std::mutex *)this);
}

void sub_19FB11BAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 72);
  std::mutex::~mutex((std::mutex *)v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<md::`anonymous namespace'::Session>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    CMPhotoDecompressionSessionReleaseHardwareResources();
    CMPhotoDecompressionSessionFlushCachedBuffers();
    CFRelease(*(CFTypeRef *)(v2 + 8));
    CFRelease(*(CFTypeRef *)v2);

    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void sub_19FB11C60(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN2md18HardwareFigDecoder8instanceEv_block_invoke()
{
  md::HardwareFigDecoderInternal **v0;
  uint64_t result;
  md::HardwareFigDecoderInternal *v2;

  v0 = (md::HardwareFigDecoderInternal **)operator new();
  *v0 = 0;
  result = operator new();
  *(_QWORD *)result = 850045863;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 1;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_DWORD *)(result + 104) = 1065353216;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 112) = 0;
  v2 = *v0;
  *v0 = (md::HardwareFigDecoderInternal *)result;
  if (v2)
  {
    md::HardwareFigDecoderInternal::~HardwareFigDecoderInternal(v2);
    result = MEMORY[0x1A1AF4E00]();
  }
  md::HardwareFigDecoder::instance(void)::_singleton = (uint64_t)v0;
  return result;
}

void sub_19FB11D30(_Unwind_Exception *a1)
{
  md::HardwareFigDecoderInternal **v1;
  md::HardwareFigDecoderInternal *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    md::HardwareFigDecoderInternal::~HardwareFigDecoderInternal(v3);
    MEMORY[0x1A1AF4E00]();
  }
  MEMORY[0x1A1AF4E00](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t md::HardwareFigDecoderInternal::createContainer(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4, _QWORD *a5)
{
  void *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  int v18;

  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", a2, a3, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v8, "length"))
    goto LABEL_26;
  v18 = 0;
  if (!CMPhotoDecompressionDetectContainerFormat())
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
    v9 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_25;
    v17 = 0;
    v10 = "Failed to decode raster resource - CMPhoto unable to detect container format";
    v11 = (uint8_t *)&v17;
    goto LABEL_24;
  }
  if (!*(_QWORD *)(md::HardwareFigDecoderInternal::getOrCreateSession(a1) + 8))
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
    v9 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_25;
    v16 = 0;
    v10 = "Failed to decode raster resource - missing decompression session";
    v11 = (uint8_t *)&v16;
    goto LABEL_24;
  }
  if (CMPhotoDecompressionSessionCreateContainer())
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
    v9 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_25;
    v15 = 0;
    v10 = "Failed to decode raster resource - unable to create decompression container";
    v11 = (uint8_t *)&v15;
LABEL_24:
    _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_ERROR, v10, v11, 2u);
LABEL_25:

LABEL_26:
    v12 = 0;
    goto LABEL_27;
  }
  if (CMPhotoDecompressionContainerGetImageCount() || !*a5)
  {
    CFRelease(*a4);
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
    v9 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_25;
    v14 = 0;
    v10 = "Failed to decode raster resource - unable to get image count or 0 image count";
    v11 = (uint8_t *)&v14;
    goto LABEL_24;
  }
  v12 = 1;
LABEL_27:

  return v12;
}

void sub_19FB11FD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::HardwareFigDecoderInternal::getOrCreateSession(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;

  std::mutex::lock((std::mutex *)a1);
  v2 = *(_QWORD *)(a1 + 112);
  if (!v2)
  {
    v3 = (_QWORD *)operator new();
    v3[2] = 0;
    CMPhotoSurfacePoolCreate();
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKeyedSubscript:", *v3, *MEMORY[0x1E0D095B0]);
    CMPhotoDecompressionSessionCreate();
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D09560]);
    objc_msgSend(v5, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D09558]);
    objc_msgSend(v5, "setObject:forKeyedSubscript:", &unk_1E4347918, *MEMORY[0x1E0D09570]);
    v6 = (void *)v3[2];
    v3[2] = v5;

    v2 = *(_QWORD *)(a1 + 112);
  }
  std::mutex::unlock((std::mutex *)a1);
  return v2;
}

void sub_19FB1212C(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  MEMORY[0x1A1AF4E00](v2, 0xA0C40E93CF5C4);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t md::HardwareFigDecoder::decodeAsync(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  void **v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  float v18;
  float v19;
  _BOOL4 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  _QWORD *i;
  size_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  size_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  NSObject *v46;
  int8x8_t v47;
  uint8x8_t v48;
  unint64_t v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  __int16 v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t, int, uint64_t, uint64_t);
  void *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  __int128 v68;
  _QWORD v69[4];
  uint64_t v70;
  CFTypeRef cf[2];
  _QWORD v72[3];
  _QWORD *v73;
  _QWORD v74[6];
  _BYTE v75[24];
  _BYTE *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)a4[3];
  if (v8)
  {
    if (v8 == a4)
    {
      v73 = v72;
      (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v72);
    }
    else
    {
      v73 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    }
  }
  else
  {
    v73 = 0;
  }
  v70 = 0;
  if (!md::HardwareFigDecoderInternal::createContainer(a1, a2, a3, cf, &v70))
  {
    v9 = 0;
    goto LABEL_136;
  }
  std::mutex::lock((std::mutex *)a1);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = (void **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v9 + 1;
  v11 = *(_QWORD *)(a1 + 80);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v11 <= v9)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v13 = (_QWORD *)*((_QWORD *)*v10 + v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (v14)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v9)
            {
              if (v14[2] == v9)
                goto LABEL_89;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_29;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_29;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (v14[2] == v9)
              goto LABEL_89;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_29:
  v17 = (char *)operator new(0x28uLL);
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = v9;
  *((_QWORD *)v17 + 2) = v9;
  *(_OWORD *)(v17 + 24) = *(_OWORD *)cf;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 96) + 1);
  v19 = *(float *)(a1 + 104);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = (v11 & (v11 - 1)) == 0;
    if (v11 < 3)
      v20 = 0;
    v21 = (2 * v11) | !v20;
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 80);
    }
    if (prime <= v11)
    {
      if (prime >= v11)
        goto LABEL_66;
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 96) / *(float *)(a1 + 104));
      if (v11 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime >= v11)
      {
        v11 = *(_QWORD *)(a1 + 80);
LABEL_66:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v11 <= v9)
            v4 = v9 % v11;
          else
            v4 = v9;
        }
        else
        {
          v4 = (v11 - 1) & v9;
        }
        goto LABEL_79;
      }
      if (!prime)
      {
        v55 = *v10;
        *v10 = 0;
        if (v55)
          operator delete(v55);
        v11 = 0;
        *(_QWORD *)(a1 + 80) = 0;
        goto LABEL_66;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v24 = operator new(8 * prime);
    v25 = *v10;
    *v10 = v24;
    if (v25)
      operator delete(v25);
    v26 = 0;
    *(_QWORD *)(a1 + 80) = prime;
    do
      *((_QWORD *)*v10 + v26++) = 0;
    while (prime != v26);
    v28 = a1 + 88;
    v27 = *(_QWORD **)(a1 + 88);
    if (!v27)
    {
LABEL_65:
      v11 = prime;
      goto LABEL_66;
    }
    v29 = v27[1];
    v30 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v31 = v29 & v30;
      *((_QWORD *)*v10 + v31) = v28;
      for (i = (_QWORD *)*v27; *v27; i = (_QWORD *)*v27)
      {
        v33 = i[1] & v30;
        if (v33 == v31)
        {
          v27 = i;
        }
        else if (*((_QWORD *)*v10 + v33))
        {
          *v27 = *i;
          v34 = 8 * v33;
          *i = **(_QWORD **)((char *)*v10 + v34);
          **(_QWORD **)((char *)*v10 + v34) = i;
        }
        else
        {
          *((_QWORD *)*v10 + v33) = v27;
          v27 = i;
          v31 = v33;
        }
      }
      goto LABEL_65;
    }
    if (v29 >= prime)
      v29 %= prime;
    *((_QWORD *)*v10 + v29) = v28;
    v38 = (_QWORD *)*v27;
    if (!*v27)
      goto LABEL_65;
    while (1)
    {
      v40 = v38[1];
      if (v40 >= prime)
        v40 %= prime;
      if (v40 != v29)
      {
        if (!*((_QWORD *)*v10 + v40))
        {
          *((_QWORD *)*v10 + v40) = v27;
          goto LABEL_70;
        }
        *v27 = *v38;
        v39 = 8 * v40;
        *v38 = **(_QWORD **)((char *)*v10 + v39);
        **(_QWORD **)((char *)*v10 + v39) = v38;
        v38 = v27;
      }
      v40 = v29;
LABEL_70:
      v27 = v38;
      v38 = (_QWORD *)*v38;
      v29 = v40;
      if (!v38)
        goto LABEL_65;
    }
  }
LABEL_79:
  v41 = *v10;
  v42 = (_QWORD *)*((_QWORD *)*v10 + v4);
  if (v42)
  {
    *(_QWORD *)v17 = *v42;
LABEL_87:
    *v42 = v17;
    goto LABEL_88;
  }
  *(_QWORD *)v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v17;
  v41[v4] = a1 + 88;
  if (*(_QWORD *)v17)
  {
    v43 = *(_QWORD *)(*(_QWORD *)v17 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v43 >= v11)
        v43 %= v11;
    }
    else
    {
      v43 &= v11 - 1;
    }
    v42 = (char *)*v10 + 8 * v43;
    goto LABEL_87;
  }
LABEL_88:
  ++*(_QWORD *)(a1 + 96);
LABEL_89:
  std::mutex::unlock((std::mutex *)a1);
  md::HardwareFigDecoderInternal::getOrCreateSession(a1);
  v74[0] = 0;
  v74[1] = v74;
  v74[2] = 0x5012000000;
  v74[3] = __Block_byref_object_copy__19105;
  v74[4] = __Block_byref_object_dispose__19106;
  v74[5] = "";
  v44 = v75;
  v45 = (uint64_t)v73;
  if (!v73)
    goto LABEL_92;
  if (v73 != v72)
  {
    v45 = (*(uint64_t (**)(void))(*v73 + 16))();
LABEL_92:
    v76 = (_BYTE *)v45;
    goto LABEL_94;
  }
  v76 = v75;
  (*(void (**)(_QWORD *, _BYTE *))(v72[0] + 24))(v72, v75);
LABEL_94:
  v69[0] = 0;
  v69[1] = v69;
  v69[2] = 0x2020000000;
  v69[3] = v9;
  v61 = MEMORY[0x1E0C809B0];
  v62 = 3221225472;
  v63 = ___ZN2md26HardwareFigDecoderInternal11decodeAsyncEPKhmNS_17HardwareFigOutputENSt3__18functionIFvmNS_23HardwareFigDecodeResultEP10__CVBufferEEE_block_invoke;
  v64 = &unk_1E42F3920;
  v66 = v69;
  v67 = a1;
  v65 = v74;
  v68 = *(_OWORD *)cf;
  if (CMPhotoDecompressionContainerDecodeImageForIndexAsync())
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
    v46 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      v60 = 0;
      _os_log_impl(&dword_19F029000, v46, OS_LOG_TYPE_ERROR, "Failed to decode raster resource - failed to decode image", (uint8_t *)&v60, 2u);
    }

    CFRelease(cf[0]);
    std::mutex::lock((std::mutex *)a1);
    v47 = *(int8x8_t *)(a1 + 80);
    if (v47)
    {
      v48 = (uint8x8_t)vcnt_s8(v47);
      v48.i16[0] = vaddlv_u8(v48);
      if (v48.u32[0] > 1uLL)
      {
        v49 = v9;
        if (*(_QWORD *)&v47 <= v9)
          v49 = v9 % *(_QWORD *)&v47;
      }
      else
      {
        v49 = (*(_QWORD *)&v47 - 1) & v9;
      }
      v50 = (uint64_t **)*((_QWORD *)*v10 + v49);
      if (v50)
      {
        v51 = *v50;
        if (*v50)
        {
          if (v48.u32[0] < 2uLL)
          {
            v52 = *(_QWORD *)&v47 - 1;
            while (1)
            {
              v54 = v51[1];
              if (v54 == v9)
              {
                if (v51[2] == v9)
                  goto LABEL_129;
              }
              else if ((v54 & v52) != v49)
              {
                goto LABEL_130;
              }
              v51 = (uint64_t *)*v51;
              if (!v51)
                goto LABEL_130;
            }
          }
          do
          {
            v53 = v51[1];
            if (v53 == v9)
            {
              if (v51[2] == v9)
              {
LABEL_129:
                break;
              }
            }
            else
            {
              if (v53 >= *(_QWORD *)&v47)
                v53 %= *(_QWORD *)&v47;
              if (v53 != v49)
                break;
            }
            v51 = (uint64_t *)*v51;
          }
          while (v51);
        }
      }
    }
LABEL_130:
    std::mutex::unlock((std::mutex *)a1);
    v9 = 0;
  }
  _Block_object_dispose(v69, 8);
  _Block_object_dispose(v74, 8);
  if (v76 == v75)
  {
    v56 = 4;
  }
  else
  {
    if (!v76)
      goto LABEL_136;
    v56 = 5;
    v44 = v76;
  }
  (*(void (**)(_QWORD *))(*v44 + 8 * v56))(v44);
LABEL_136:
  v57 = v73;
  if (v73 == v72)
  {
    v58 = 4;
    v57 = v72;
    goto LABEL_140;
  }
  if (v73)
  {
    v58 = 5;
LABEL_140:
    (*(void (**)(void))(*v57 + 8 * v58))();
  }
  return v9;
}

void sub_19FB12978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char *a29)
{
  std::mutex *v29;
  void *v30;
  char *v32;
  uint64_t v33;

  operator delete(v30);
  std::mutex::unlock(v29);
  v32 = a29;
  if (a29 == &a26)
  {
    v33 = 4;
    v32 = &a26;
  }
  else
  {
    if (!a29)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19105(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 72);
  if (v2)
  {
    if (v2 == a2 + 48)
    {
      *(_QWORD *)(result + 72) = result + 48;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 72) + 24))(*(_QWORD *)(a2 + 72), result + 48);
    }
    else
    {
      *(_QWORD *)(result + 72) = v2;
      *(_QWORD *)(a2 + 72) = 0;
    }
  }
  else
  {
    *(_QWORD *)(result + 72) = 0;
  }
  return result;
}

_QWORD *__Block_byref_object_dispose__19106(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 48);
  result = *(_QWORD **)(a1 + 72);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void ___ZN2md26HardwareFigDecoderInternal11decodeAsyncEPKhmNS_17HardwareFigOutputENSt3__18functionIFvmNS_23HardwareFigDecodeResultEP10__CVBufferEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x8_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v7 = *(_QWORD *)(a1 + 48);
  if (a4 <= -16999)
  {
    if (a4 == -17105)
    {
      a4 = 1;
    }
    else if (a4 == -17102)
    {
      a4 = 7;
    }
    else
    {
LABEL_8:
      a4 = 8;
    }
  }
  else
  {
    switch(a4)
    {
      case -16998:
        a4 = 6;
        break;
      case -16997:
      case -16994:
      case -16993:
      case -16992:
        goto LABEL_8;
      case -16996:
        a4 = 5;
        break;
      case -16995:
        a4 = 4;
        break;
      case -16991:
        a4 = 3;
        break;
      case -16990:
        a4 = 2;
        break;
      default:
        if (a4)
          goto LABEL_8;
        break;
    }
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v23 = a4;
  v22 = a6;
  v9 = *(_QWORD *)(v8 + 72);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t *, int *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v24, &v23, &v22);
    CFRelease(*(CFTypeRef *)(a1 + 56));
    std::mutex::lock((std::mutex *)v7);
    v10 = *(int8x8_t *)(v7 + 80);
    if (v10)
    {
      v11 = (_QWORD *)(v7 + 72);
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      v13 = (uint8x8_t)vcnt_s8(v10);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
        if (*(_QWORD *)&v10 <= v12)
          v14 = v12 % *(_QWORD *)&v10;
      }
      else
      {
        v14 = (*(_QWORD *)&v10 - 1) & v12;
      }
      v15 = *(uint64_t ***)(*v11 + 8 * v14);
      if (v15)
      {
        v16 = *v15;
        if (*v15)
        {
          if (v13.u32[0] < 2uLL)
          {
            v17 = *(_QWORD *)&v10 - 1;
            while (1)
            {
              v19 = v16[1];
              if (v19 == v12)
              {
                if (v16[2] == v12)
                  goto LABEL_36;
              }
              else if ((v19 & v17) != v14)
              {
                goto LABEL_37;
              }
              v16 = (uint64_t *)*v16;
              if (!v16)
                goto LABEL_37;
            }
          }
          do
          {
            v18 = v16[1];
            if (v18 == v12)
            {
              if (v16[2] == v12)
              {
LABEL_36:
                break;
              }
            }
            else
            {
              if (v18 >= *(_QWORD *)&v10)
                v18 %= *(_QWORD *)&v10;
              if (v18 != v14)
                break;
            }
            v16 = (uint64_t *)*v16;
          }
          while (v16);
        }
      }
    }
LABEL_37:
    std::mutex::unlock((std::mutex *)v7);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long,md::`anonymous namespace'::Request>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,md::`anonymous namespace'::Request>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,md::`anonymous namespace'::Request>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,md::`anonymous namespace'::Request>>>::erase(_QWORD *a1, uint64_t *__p)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  v3 = *__p;
  v4 = __p[1];
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v2)
      v4 %= *(_QWORD *)&v2;
  }
  else
  {
    v4 &= *(_QWORD *)&v2 - 1;
  }
  v6 = *(uint64_t **)(*a1 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (uint64_t *)*v6;
  }
  while (v6 != __p);
  if (v7 == a1 + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v2)
      v8 %= *(_QWORD *)&v2;
  }
  else
  {
    v8 &= *(_QWORD *)&v2 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (v3)
    {
      v9 = *(_QWORD *)(v3 + 8);
      if (v5.u32[0] > 1uLL)
      {
        v10 = *(_QWORD *)(v3 + 8);
        if (v9 >= *(_QWORD *)&v2)
          v10 = v9 % *(_QWORD *)&v2;
      }
      else
      {
        v10 = v9 & (*(_QWORD *)&v2 - 1);
      }
      if (v10 == v4)
        goto LABEL_22;
    }
    *(_QWORD *)(*a1 + 8 * v4) = 0;
    v3 = *__p;
  }
  if (!v3)
    goto LABEL_28;
  v9 = *(_QWORD *)(v3 + 8);
LABEL_22:
  if (v5.u32[0] > 1uLL)
  {
    if (v9 >= *(_QWORD *)&v2)
      v9 %= *(_QWORD *)&v2;
  }
  else
  {
    v9 &= *(_QWORD *)&v2 - 1;
  }
  if (v9 != v4)
  {
    *(_QWORD *)(*a1 + 8 * v9) = v7;
    v3 = *__p;
  }
LABEL_28:
  *v7 = v3;
  *__p = 0;
  --a1[3];
  operator delete(__p);
}

void md::HardwareFigDecoder::discardCaches(std::mutex *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t sig;

  std::mutex::lock(this);
  MEMORY[0x1A1AF3F00]();
  v2 = *(_QWORD *)&this[1].__m_.__opaque[40];
  v3 = *(_QWORD *)&this[1].__m_.__opaque[48];
  sig = this[2].__m_.__sig;
  if (v2 && *(_QWORD *)(v2 + 8))
    CMPhotoDecompressionSessionFlushCachedBuffers();
  if (v3 && *(_QWORD *)(v3 + 8))
    CMPhotoDecompressionSessionFlushCachedBuffers();
  if (sig && *(_QWORD *)(sig + 8))
    CMPhotoDecompressionSessionFlushCachedBuffers();
  std::mutex::unlock(this);
}

void sub_19FB12E48(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FB13260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__tree<gm::Box<double,2>,md::MultiRectSetCompare,std::allocator<gm::Box<double,2>>>::__assign_multi<std::__tree_const_iterator<gm::Box<double,2>,std::__tree_node<gm::Box<double,2>,void *> *,long>>(uint64_t **a1, double *a2, double *a3)
{
  double *v4;
  uint64_t **v6;
  uint64_t *v7;
  double **v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  double *v13;
  double *v14;
  double **v15;
  double **v16;
  uint64_t *v17;
  double *v18;
  BOOL v19;
  double *v20;
  double *v21;
  double *i;
  void **v23;
  void *v24;
  __int128 v25;
  void *v26;
  void **v27;
  void **v28;
  uint64_t *v29;
  double *v30;
  double *v31;
  double *v32;

  v4 = a2;
  if (a1[2])
  {
    v6 = (uint64_t **)*a1;
    v8 = (double **)(a1 + 1);
    v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    v9 = v6[1] ? (double *)v6[1] : (double *)v6;
    if (v9)
    {
      v10 = (double *)*((_QWORD *)v9 + 2);
      if (v10)
      {
        v11 = *(double **)v10;
        if (*(double **)v10 == v9)
        {
          *v10 = 0.0;
          while (1)
          {
            v32 = (double *)*((_QWORD *)v10 + 1);
            if (!v32)
              break;
            do
            {
              v10 = v32;
              v32 = *(double **)v32;
            }
            while (v32);
          }
        }
        else
        {
          for (v10[1] = 0.0; v11; v11 = (double *)*((_QWORD *)v10 + 1))
          {
            do
            {
              v10 = v11;
              v11 = *(double **)v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = a2;
        do
        {
          v9 = v10;
          v12[4] = v13[4];
          v12[5] = v13[5];
          v12[6] = v13[6];
          v12[7] = v13[7];
          v14 = *v8;
          v15 = (double **)(a1 + 1);
          v16 = (double **)(a1 + 1);
          if (*v8)
          {
            do
            {
              while (1)
              {
                v15 = (double **)v14;
                if (!md::MultiRectSetCompare::operator()(v12 + 4, v14 + 4))
                  break;
                v14 = *v15;
                v16 = v15;
                if (!*v15)
                  goto LABEL_20;
              }
              v14 = v15[1];
            }
            while (v14);
            v16 = v15 + 1;
          }
LABEL_20:
          *v12 = 0.0;
          v12[1] = 0.0;
          *((_QWORD *)v12 + 2) = v15;
          *v16 = v12;
          v17 = (uint64_t *)**a1;
          if (v17)
          {
            *a1 = v17;
            v12 = *v16;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v12);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          if (v9)
          {
            v10 = (double *)*((_QWORD *)v9 + 2);
            if (v10)
            {
              v20 = *(double **)v10;
              if (*(double **)v10 == v9)
              {
                *v10 = 0.0;
                while (1)
                {
                  v21 = (double *)*((_QWORD *)v10 + 1);
                  if (!v21)
                    break;
                  do
                  {
                    v10 = v21;
                    v21 = *(double **)v21;
                  }
                  while (v21);
                }
              }
              else
              {
                for (v10[1] = 0.0; v20; v20 = (double *)*((_QWORD *)v10 + 1))
                {
                  do
                  {
                    v10 = v20;
                    v20 = *(double **)v20;
                  }
                  while (v20);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v18 = (double *)*((_QWORD *)v13 + 1);
          if (v18)
          {
            do
            {
              v4 = v18;
              v18 = *(double **)v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v4 = (double *)*((_QWORD *)v13 + 2);
              v19 = *(_QWORD *)v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v19);
          }
          if (!v9)
            break;
          v12 = v9;
          v13 = v4;
        }
        while (v4 != a3);
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v9);
      if (v10)
      {
        for (i = (double *)*((_QWORD *)v10 + 2); i; i = (double *)*((_QWORD *)i + 2))
          v10 = i;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v10);
      }
    }
  }
  if (v4 != a3)
  {
    v23 = (void **)(a1 + 1);
    do
    {
      v24 = operator new(0x40uLL);
      v25 = *((_OWORD *)v4 + 3);
      *((_OWORD *)v24 + 2) = *((_OWORD *)v4 + 2);
      *((_OWORD *)v24 + 3) = v25;
      v26 = *v23;
      v27 = (void **)(a1 + 1);
      v28 = (void **)(a1 + 1);
      if (*v23)
      {
        do
        {
          while (1)
          {
            v27 = (void **)v26;
            if (!md::MultiRectSetCompare::operator()((double *)v24 + 4, (double *)v26 + 4))
              break;
            v26 = *v27;
            v28 = v27;
            if (!*v27)
              goto LABEL_56;
          }
          v26 = v27[1];
        }
        while (v26);
        v28 = v27 + 1;
      }
LABEL_56:
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = v27;
      *v28 = v24;
      v29 = (uint64_t *)**a1;
      if (v29)
      {
        *a1 = v29;
        v24 = *v28;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v24);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      v30 = (double *)*((_QWORD *)v4 + 1);
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = *(double **)v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (double *)*((_QWORD *)v4 + 2);
          v19 = *(_QWORD *)v31 == (_QWORD)v4;
          v4 = v31;
        }
        while (!v19);
      }
      v4 = v31;
    }
    while (v31 != a3);
  }
}

void sub_19FB1394C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FB139E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)VKPolylineOverlay;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FB13A98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB13AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB13BFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB13CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19FB13D68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB13F18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB14118(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB14420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_19FB154B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59)
{
  void *v59;

  if (v59)
    operator delete(v59);

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19FB15764(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB15B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, gdc::DebugTreeNode *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34)
{
  gdc::DebugTreeNode::~DebugTreeNode(a10);
  _Unwind_Resume(a1);
}

void sub_19FB15CD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FB15EF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FB15FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FB160EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB16C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;
  void *v29;

  if (v28)
    operator delete(v28);
  std::vector<std::unique_ptr<PathInfo>>::~vector[abi:nn180100](&a28);

  _Unwind_Resume(a1);
}

void sub_19FB17D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{

  _Unwind_Resume(a1);
}

void sub_19FB17F08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _unsnappedPaths(const float *a1, unsigned int a2, void *a3, void *a4, uint64_t a5)
{
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  float *v13;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  const float *v18;
  uint64_t v19;
  const float *v20;
  float *v21;
  const float *v22;
  uint64_t v23;
  VKTransitPolylinePath *v24;
  unsigned int v25;
  VKTransitPolylinePath *v26;
  void *v27;
  _QWORD v29[2];
  float32x4x3_t v30;
  float32x4x3_t v31;

  v29[1] = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v11 = v10;
  v12 = 2 * a2;
  if (a2 >= 0x401)
  {
    v13 = (float *)malloc_type_malloc(8 * a2, 0x100004000313F17uLL);
  }
  else
  {
    MEMORY[0x1E0C80A78](v10);
    v13 = (float *)((char *)v29 - ((v12 * 4 + 15) & 0xFFFFFFFF0));
    bzero(v13, 8 * a2);
    if (!a2)
      goto LABEL_18;
    if (a2 <= 8)
      goto LABEL_15;
  }
  if (v13 >= &a1[3 * a2 - 1] || &v13[v12] <= a1)
  {
    v15 = a2 & 7;
    if (!v15)
      v15 = 8;
    v16 = a2 - v15;
    v17 = v13 + 8;
    v18 = a1;
    v19 = v16;
    do
    {
      v20 = v18;
      v30 = vld3q_f32(v20);
      v20 += 12;
      v31 = vld3q_f32(v20);
      v21 = v17 - 8;
      vst2q_f32(v21, *(float32x4x2_t *)v30.val[0].f32);
      vst2q_f32(v17, *(float32x4x2_t *)v31.val[0].f32);
      v17 += 16;
      v18 += 24;
      v19 -= 8;
    }
    while (v19);
    goto LABEL_16;
  }
LABEL_15:
  v16 = 0;
LABEL_16:
  v22 = &a1[3 * v16];
  do
  {
    v23 = *(_QWORD *)v22;
    v22 += 3;
    *(_QWORD *)&v13[2 * v16++] = v23;
  }
  while (a2 != v16);
LABEL_18:
  v24 = [VKTransitPolylinePath alloc];
  v25 = objc_msgSend(v11, "startPointIndex");
  v26 = -[VKTransitPolylinePath initWithOverlay:section:points:pointCount:reversePoints:transform:routeStartIndex:routeEndIndex:lineID:](v24, "initWithOverlay:section:points:pointCount:reversePoints:transform:routeStartIndex:routeEndIndex:lineID:", v9, v11, v13, a2, 0, 0, __PAIR64__(objc_msgSend(v11, "endPointIndex"), v25), a5);
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2 >= 0x401)
    free(v13);

  return v27;
}

void sub_19FB1811C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **,false>(unint64_t result, double **a2, uint64_t a3, char a4)
{
  double **v7;
  double **v8;
  double **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double **v13;
  double *v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  double v19;
  BOOL v20;
  _BOOL4 v21;
  double *v22;
  double *v23;
  double v24;
  double v25;
  BOOL v26;
  _BOOL4 v27;
  double *v28;
  double v29;
  double v30;
  _BOOL4 v31;
  double *v32;
  double v33;
  double v34;
  _BOOL4 v35;
  double v36;
  _BOOL4 v37;
  double **v38;
  double **v39;
  double *v40;
  double *v41;
  double *v42;
  double v43;
  double v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  double *v48;
  _BOOL4 v49;
  double *v50;
  double v51;
  _BOOL4 v52;
  double v53;
  _BOOL4 v54;
  double *v55;
  _BOOL4 v56;
  double **v57;
  double **v58;
  double *v59;
  double *v60;
  double *v61;
  double v62;
  double v63;
  BOOL v64;
  BOOL v65;
  BOOL v66;
  double *v67;
  _BOOL4 v68;
  double *v69;
  double v70;
  _BOOL4 v71;
  double *v72;
  _BOOL4 v73;
  double *v74;
  double *v75;
  double v76;
  double v77;
  BOOL v78;
  double *v79;
  double v80;
  _BOOL4 v81;
  _BOOL4 v82;
  BOOL v83;
  double *v84;
  double *v85;
  double v86;
  double **v87;
  double *v88;
  double v89;
  BOOL v90;
  BOOL v91;
  double **v92;
  double *v93;
  double *v94;
  BOOL v95;
  BOOL v96;
  double **v97;
  double *v98;
  _BOOL4 v99;
  _BOOL4 v100;
  double *v101;
  BOOL v102;
  BOOL v103;
  double *v104;
  double **v105;
  double **v106;
  double *v107;
  BOOL v108;
  BOOL v109;
  double *v110;
  _BOOL4 v111;
  _BOOL4 v112;
  BOOL v113;
  double v114;
  BOOL v115;
  double *v116;
  BOOL v117;
  BOOL v118;
  double **v119;
  double v120;
  _BOOL4 v121;
  double **v122;
  double *v123;
  BOOL v124;
  BOOL v125;
  double *v126;
  double *v127;
  double *v128;
  _BOOL4 v129;
  _BOOL4 v130;
  double *v131;
  BOOL v132;
  BOOL v133;
  double **v134;
  double *v135;
  double v136;
  double v137;
  _BOOL4 v138;
  double *v139;
  double *v140;
  double v141;
  double v142;
  BOOL v143;
  double *v144;
  double v145;
  _BOOL4 v146;
  double **v147;
  double **v148;
  double **v149;
  double *v150;
  double v151;
  _BOOL4 v152;
  double *v153;
  double *v154;
  double v155;
  double v156;
  _BOOL4 v157;
  double *v158;
  double v159;
  _BOOL4 v160;
  double *v161;
  double **v162;
  BOOL v164;
  uint64_t v165;
  double **v166;
  double **v167;
  double *v168;
  double *v169;
  double v170;
  _BOOL4 v171;
  uint64_t v172;
  uint64_t v173;
  BOOL v174;
  int64_t v175;
  int64_t v176;
  int64_t v177;
  uint64_t v178;
  double **v179;
  double *v180;
  double *v181;
  double v182;
  _BOOL4 v183;
  double **v184;
  double *v185;
  double v186;
  BOOL v187;
  double *v188;
  double v189;
  _BOOL4 v190;
  double **v191;
  uint64_t v192;
  _BOOL4 v193;
  double *v194;
  double *v195;
  double v196;
  _BOOL4 v197;
  double **v198;
  BOOL v199;
  uint64_t v200;
  uint64_t v202;
  double *v203;
  double **v204;
  double **v205;
  double **v206;
  double *v207;
  double *v208;
  uint64_t v209;
  uint64_t v210;
  double *v211;
  uint64_t v212;
  unint64_t v213;
  double **v214;
  double *v215;
  unint64_t v216;
  double v217;
  double v218;
  _BOOL4 v219;
  double **v220;
  double v221;
  BOOL v222;
  double v223;
  _BOOL4 v224;

  v7 = (double **)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v135 = *v9;
        v136 = **v8;
        v137 = **v9;
        v138 = *v8 < *v9;
        if (v136 != v137)
          v138 = v136 < v137;
        if (v138)
        {
          *v9 = *v8;
          *v8 = v135;
        }
        return result;
      case 3:
        v139 = *v9;
        v140 = v9[1];
        v141 = *v140;
        v142 = **v9;
        if (*v140 == v142)
          v143 = v140 < *v9;
        else
          v143 = *v140 < v142;
        v144 = *v8;
        v145 = **v8;
        v146 = *v8 < v140;
        if (v145 != v141)
          v146 = v145 < v141;
        if (v143)
        {
          if (v146)
          {
            *v9 = v144;
          }
          else
          {
            *v9 = v140;
            v9[1] = v139;
            v223 = **v8;
            v224 = *v8 < v139;
            if (v223 != v142)
              v224 = v223 < v142;
            if (!v224)
              return result;
            v9[1] = *v8;
          }
          *v8 = v139;
          return result;
        }
        if (v146)
        {
          v9[1] = v144;
          *v8 = v140;
          v161 = *v9;
          v153 = v9[1];
          v155 = *v153;
          goto LABEL_240;
        }
        return result;
      case 4:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5:
        v147 = v9 + 1;
        v148 = v9 + 2;
        v149 = v9 + 3;
        result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **>(v9, v9 + 1, v9 + 2, v9 + 3);
        v150 = v9[3];
        v151 = **v8;
        v152 = *v8 < v150;
        if (v151 != *v150)
          v152 = v151 < *v150;
        if (v152)
        {
          *v149 = *v8;
          *v8 = v150;
          v153 = *v149;
          v154 = *v148;
          v155 = **v149;
          v156 = **v148;
          v157 = *v149 < *v148;
          if (v155 != v156)
            v157 = v155 < v156;
          if (v157)
          {
            *v148 = v153;
            *v149 = v154;
            v158 = *v147;
            v159 = **v147;
            v160 = v153 < *v147;
            if (v155 != v159)
              v160 = v155 < v159;
            if (v160)
            {
              v9[1] = v153;
              v9[2] = v158;
              v161 = *v9;
LABEL_240:
              v193 = v153 < v161;
              if (v155 != *v161)
                v193 = v155 < *v161;
              if (v193)
              {
                *v9 = v153;
                v9[1] = v161;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 191)
        {
          v162 = v9 + 1;
          v164 = v9 == a2 || v162 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v164)
            {
              v165 = 8;
              v166 = v9;
              do
              {
                v169 = *v166;
                v168 = v166[1];
                v166 = v162;
                v170 = *v168;
                v171 = v168 < v169;
                if (*v168 != *v169)
                  v171 = *v168 < *v169;
                if (v171)
                {
                  v172 = v165;
                  do
                  {
                    *(double **)((char *)v9 + v172) = v169;
                    v173 = v172 - 8;
                    if (v172 == 8)
                    {
                      v167 = v9;
                      goto LABEL_196;
                    }
                    v169 = *(double **)((char *)v9 + v172 - 16);
                    v174 = v170 < *v169;
                    if (v170 == *v169)
                      v174 = v168 < v169;
                    v172 -= 8;
                  }
                  while (v174);
                  v167 = (double **)((char *)v9 + v173);
LABEL_196:
                  *v167 = v168;
                }
                v162 = v166 + 1;
                v165 += 8;
              }
              while (v166 + 1 != a2);
            }
          }
          else if (!v164)
          {
            do
            {
              v195 = *v7;
              v194 = v7[1];
              v7 = v162;
              v196 = *v194;
              v197 = v194 < v195;
              if (*v194 != *v195)
                v197 = *v194 < *v195;
              if (v197)
              {
                v198 = v7;
                do
                {
                  *v198 = v195;
                  v195 = *(v198 - 2);
                  v199 = v194 < v195;
                  if (v196 != *v195)
                    v199 = v196 < *v195;
                  --v198;
                }
                while (v199);
                *v198 = v194;
              }
              v162 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v175 = (unint64_t)(v11 - 2) >> 1;
            v176 = v175;
            do
            {
              v177 = v176;
              if (v175 >= v176)
              {
                v178 = (2 * v176) | 1;
                v179 = &v9[v178];
                v180 = *v179;
                if (2 * v177 + 2 >= v11)
                {
                  v182 = *v180;
                }
                else
                {
                  v181 = v179[1];
                  v182 = *v181;
                  v183 = v180 < v181;
                  if (*v180 != *v181)
                    v183 = *v180 < *v181;
                  if (v183)
                    v180 = v179[1];
                  else
                    v182 = *v180;
                  if (v183)
                  {
                    ++v179;
                    v178 = 2 * v177 + 2;
                  }
                }
                v184 = &v9[v177];
                v185 = *v184;
                v186 = **v184;
                v187 = v180 < *v184;
                result = v182 < v186;
                if (v182 != v186)
                  v187 = v182 < v186;
                if (!v187)
                {
                  do
                  {
                    v191 = v179;
                    *v184 = v180;
                    if (v175 < v178)
                      break;
                    v192 = (2 * v178) | 1;
                    v179 = &v9[v192];
                    v178 = 2 * v178 + 2;
                    v180 = *v179;
                    if (v178 < v11)
                    {
                      v188 = v179[1];
                      v189 = *v180;
                      v190 = v180 < v188;
                      if (*v180 != *v188)
                        v190 = *v180 < *v188;
                      if (v190)
                      {
                        v189 = *v188;
                        v180 = v179[1];
                        ++v179;
                      }
                      else
                      {
                        v178 = v192;
                      }
                    }
                    else
                    {
                      v189 = *v180;
                      v178 = v192;
                    }
                    result = v189 == v186 ? v180 < v185 : v189 < v186;
                    v184 = v191;
                  }
                  while ((_DWORD)result != 1);
                  *v191 = v185;
                }
              }
              v176 = v177 - 1;
            }
            while (v177);
            v200 = (unint64_t)v10 >> 3;
            do
            {
              v202 = 0;
              v203 = *v9;
              v204 = v9;
              do
              {
                v205 = &v204[v202];
                v208 = v205[1];
                v206 = v205 + 1;
                v207 = v208;
                v209 = (2 * v202) | 1;
                v210 = 2 * v202 + 2;
                if (v210 < v200)
                {
                  v211 = v206[1];
                  result = *v207 == *v211 ? v207 < v211 : *v207 < *v211;
                  if ((_DWORD)result)
                  {
                    v207 = v206[1];
                    ++v206;
                    v209 = v210;
                  }
                }
                *v204 = v207;
                v204 = v206;
                v202 = v209;
              }
              while (v209 <= (uint64_t)((unint64_t)(v200 - 2) >> 1));
              if (v206 == --a2)
              {
                *v206 = v203;
              }
              else
              {
                *v206 = *a2;
                *a2 = v203;
                v212 = (char *)v206 - (char *)v9 + 8;
                if (v212 >= 9)
                {
                  v213 = (((unint64_t)v212 >> 3) - 2) >> 1;
                  v214 = &v9[v213];
                  v215 = *v214;
                  v216 = (unint64_t)*v206;
                  v217 = **v214;
                  v218 = **v206;
                  v219 = *v214 < *v206;
                  if (v217 != v218)
                    v219 = v217 < v218;
                  if (v219)
                  {
                    do
                    {
                      v220 = v214;
                      *v206 = v215;
                      if (!v213)
                        break;
                      v213 = (v213 - 1) >> 1;
                      v214 = &v9[v213];
                      v215 = *v214;
                      v221 = **v214;
                      v222 = v221 < v218;
                      if (v221 == v218)
                        v222 = (unint64_t)*v214 < v216;
                      v206 = v220;
                    }
                    while (v222);
                    *v220 = (double *)v216;
                  }
                }
              }
            }
            while (v200-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v9[(unint64_t)v11 >> 1];
        v14 = *v8;
        v15 = **v8;
        if ((unint64_t)v10 >= 0x401)
        {
          v16 = *v13;
          v17 = *v9;
          v18 = **v13;
          v19 = **v9;
          v20 = v18 < v19;
          if (v18 == v19)
            v20 = *v13 < *v9;
          v21 = v14 < v16;
          if (v15 != v18)
            v21 = v15 < v18;
          if (v20)
          {
            if (v21)
            {
              *v9 = v14;
              goto LABEL_35;
            }
            *v9 = v16;
            *v13 = v17;
            v36 = **v8;
            v37 = *v8 < v17;
            if (v36 != v19)
              v37 = v36 < v19;
            if (v37)
            {
              *v13 = *v8;
LABEL_35:
              *v8 = v17;
            }
          }
          else if (v21)
          {
            *v13 = v14;
            *v8 = v16;
            v28 = *v9;
            v29 = **v13;
            v30 = **v9;
            v31 = *v13 < *v9;
            if (v29 != v30)
              v31 = v29 < v30;
            if (v31)
            {
              *v9 = *v13;
              *v13 = v28;
            }
          }
          v38 = &v9[v12];
          v41 = *(v38 - 1);
          v39 = v38 - 1;
          v40 = v41;
          v42 = v9[1];
          v43 = *v41;
          v44 = *v42;
          v45 = v41 < v42;
          v46 = *v41 < *v42;
          if (*v41 == *v42)
            v47 = v45;
          else
            v47 = v46;
          v48 = *(a2 - 2);
          v49 = v48 < v40;
          if (*v48 != v43)
            v49 = *v48 < v43;
          if (v47)
          {
            if (v49)
            {
              v9[1] = v48;
              goto LABEL_58;
            }
            v9[1] = v40;
            *v39 = v42;
            v55 = *(a2 - 2);
            v56 = v55 < v42;
            if (*v55 != v44)
              v56 = *v55 < v44;
            if (v56)
            {
              *v39 = v55;
LABEL_58:
              *(a2 - 2) = v42;
            }
          }
          else if (v49)
          {
            *v39 = v48;
            *(a2 - 2) = v40;
            v50 = v9[1];
            v51 = **v39;
            v52 = *v39 < v50;
            if (v51 != *v50)
              v52 = v51 < *v50;
            if (v52)
            {
              v9[1] = *v39;
              *v39 = v50;
            }
          }
          v57 = &v9[v12];
          v60 = v57[1];
          v58 = v57 + 1;
          v59 = v60;
          v61 = v9[2];
          v62 = *v60;
          v63 = *v61;
          v64 = v60 < v61;
          v65 = *v60 < *v61;
          if (*v60 == *v61)
            v66 = v64;
          else
            v66 = v65;
          v67 = *(a2 - 3);
          v68 = v67 < v59;
          if (*v67 != v62)
            v68 = *v67 < v62;
          if (v66)
          {
            if (v68)
            {
              v9[2] = v67;
              goto LABEL_76;
            }
            v9[2] = v59;
            *v58 = v61;
            v72 = *(a2 - 3);
            v73 = v72 < v61;
            if (*v72 != v63)
              v73 = *v72 < v63;
            if (v73)
            {
              *v58 = v72;
LABEL_76:
              *(a2 - 3) = v61;
            }
          }
          else if (v68)
          {
            *v58 = v67;
            *(a2 - 3) = v59;
            v69 = v9[2];
            v70 = **v58;
            v71 = *v58 < v69;
            if (v70 != *v69)
              v71 = v70 < *v69;
            if (v71)
            {
              v9[2] = *v58;
              *v58 = v69;
            }
          }
          v74 = *v13;
          v75 = *v39;
          v76 = **v13;
          v77 = **v39;
          if (v76 == v77)
            v78 = *v13 < *v39;
          else
            v78 = v76 < v77;
          v79 = *v58;
          v80 = **v58;
          v81 = *v58 < v74;
          if (v80 != v76)
            v81 = v80 < v76;
          if (v78)
          {
            if (!v81)
            {
              *v39 = v74;
              *v13 = v75;
              v82 = v80 == v77 ? v79 < v75 : v80 < v77;
              v39 = v13;
              v74 = v79;
              if (!v82)
              {
                v74 = v75;
LABEL_95:
                v84 = *v9;
                *v9 = v74;
                *v13 = v84;
                goto LABEL_96;
              }
            }
          }
          else
          {
            if (!v81)
              goto LABEL_95;
            *v13 = v79;
            *v58 = v74;
            if (v80 == v77)
              v83 = v79 < v75;
            else
              v83 = v80 < v77;
            v58 = v13;
            v74 = v75;
            if (!v83)
            {
              v74 = v79;
              goto LABEL_95;
            }
          }
          *v39 = v79;
          *v58 = v75;
          goto LABEL_95;
        }
        v22 = *v9;
        v23 = *v13;
        v24 = **v9;
        v25 = **v13;
        v26 = v24 < v25;
        if (v24 == v25)
          v26 = *v9 < *v13;
        v27 = v14 < v22;
        if (v15 != v24)
          v27 = v15 < v24;
        if (v26)
        {
          if (v27)
          {
            *v13 = v14;
LABEL_53:
            *v8 = v23;
            goto LABEL_96;
          }
          *v13 = v22;
          *v9 = v23;
          v53 = **v8;
          v54 = *v8 < v23;
          if (v53 != v25)
            v54 = v53 < v25;
          if (v54)
          {
            *v9 = *v8;
            goto LABEL_53;
          }
        }
        else if (v27)
        {
          *v9 = v14;
          *v8 = v22;
          v32 = *v13;
          v33 = **v9;
          v34 = **v13;
          v35 = *v9 < *v13;
          if (v33 != v34)
            v35 = v33 < v34;
          if (v35)
          {
            *v13 = *v9;
            *v9 = v32;
          }
        }
LABEL_96:
        --a3;
        v85 = *v9;
        v86 = **v9;
        v87 = v9;
        if ((a4 & 1) == 0)
        {
          v88 = *(v9 - 1);
          v89 = *v88;
          v90 = v88 < v85;
          v91 = v89 < v86;
          if (v89 == v86)
            v91 = v90;
          v87 = v9;
          if (!v91)
          {
            v114 = **v8;
            v115 = v85 < *v8;
            if (v86 != v114)
              v115 = v86 < v114;
            if (v115)
            {
              do
              {
                v116 = v9[1];
                ++v9;
                v117 = v85 < v116;
                v118 = v86 < *v116;
                if (v86 != *v116)
                  v117 = v118;
              }
              while (!v117);
            }
            else
            {
              v119 = v9 + 1;
              do
              {
                v9 = v119;
                if (v119 >= a2)
                  break;
                ++v119;
                v120 = **v9;
                v121 = v85 < *v9;
                if (v86 != v120)
                  v121 = v86 < v120;
              }
              while (!v121);
            }
            v122 = a2;
            if (v9 < a2)
            {
              v122 = a2;
              do
              {
                v123 = *--v122;
                v124 = v85 < v123;
                v125 = v86 < *v123;
                if (v86 != *v123)
                  v124 = v125;
              }
              while (v124);
            }
            if (v9 < v122)
            {
              v126 = *v9;
              v127 = *v122;
              do
              {
                *v9 = v127;
                *v122 = v126;
                do
                {
                  v128 = v9[1];
                  ++v9;
                  v126 = v128;
                  v129 = v85 < v128;
                  v130 = v86 < *v128;
                  if (v86 != *v128)
                    v129 = v130;
                }
                while (!v129);
                do
                {
                  v131 = *--v122;
                  v127 = v131;
                  v132 = v85 < v131;
                  v133 = v86 < *v131;
                  if (v86 != *v131)
                    v132 = v133;
                }
                while (v132);
              }
              while (v9 < v122);
            }
            v134 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v134;
            a4 = 0;
            *v134 = v85;
            continue;
          }
        }
        do
        {
          v92 = v87;
          v94 = v87[1];
          ++v87;
          v93 = v94;
          v95 = v94 < v85;
          v96 = *v94 < v86;
          if (*v94 != v86)
            v95 = v96;
        }
        while (v95);
        v97 = a2;
        if (v92 == v9)
        {
          v97 = a2;
          do
          {
            if (v87 >= v97)
              break;
            v101 = *--v97;
            v102 = v101 < v85;
            v103 = *v101 < v86;
            if (*v101 != v86)
              v102 = v103;
          }
          while (!v102);
        }
        else
        {
          do
          {
            v98 = *--v97;
            v99 = v98 < v85;
            v100 = *v98 < v86;
            if (*v98 != v86)
              v99 = v100;
          }
          while (!v99);
        }
        if (v87 < v97)
        {
          v104 = *v97;
          v105 = v87;
          v106 = v97;
          do
          {
            *v105 = v104;
            *v106 = v93;
            do
            {
              v92 = v105;
              v107 = v105[1];
              ++v105;
              v93 = v107;
              v108 = v107 < v85;
              v109 = *v107 < v86;
              if (*v107 != v86)
                v108 = v109;
            }
            while (v108);
            do
            {
              v110 = *--v106;
              v104 = v110;
              v111 = v110 < v85;
              v112 = *v110 < v86;
              if (*v110 != v86)
                v111 = v112;
            }
            while (!v111);
          }
          while (v105 < v106);
        }
        if (v92 != v9)
          *v9 = *v92;
        *v92 = v85;
        if (v87 < v97)
        {
LABEL_128:
          result = std::__introsort<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **,false>(v7, v92, a3, a4 & 1);
          a4 = 0;
          v9 = v92 + 1;
          continue;
        }
        v113 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **>(v9, v92);
        v9 = v92 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **>(v92 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v113)
            continue;
          goto LABEL_128;
        }
        a2 = v92;
        if (!v113)
          goto LABEL_2;
        return result;
    }
  }
}

_QWORD *std::vector<std::unique_ptr<PathInfo>>::~vector[abi:nn180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          MEMORY[0x1A1AF4E00](v5, 0x1020C4005C7B374);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

double **std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **>(double **result, double **a2, double **a3, double **a4)
{
  double *v4;
  double *v5;
  double v6;
  double v7;
  BOOL v8;
  double *v9;
  double v10;
  _BOOL4 v11;
  double *v12;
  double v13;
  double v14;
  _BOOL4 v15;
  double v16;
  _BOOL4 v17;
  double v18;
  _BOOL4 v19;
  double *v20;
  double v21;
  double v22;
  _BOOL4 v23;
  double *v24;
  double v25;
  double v26;
  _BOOL4 v27;

  v4 = *a2;
  v5 = *result;
  v6 = **a2;
  v7 = **result;
  if (v6 == v7)
    v8 = *a2 < *result;
  else
    v8 = v6 < v7;
  v9 = *a3;
  v10 = **a3;
  v11 = *a3 < v4;
  if (v10 != v6)
    v11 = v10 < v6;
  if (v8)
  {
    if (v11)
    {
      *result = v9;
LABEL_18:
      *a3 = v5;
      v4 = v5;
      goto LABEL_20;
    }
    *result = v4;
    *a2 = v5;
    v4 = *a3;
    v16 = **a3;
    v17 = *a3 < v5;
    if (v16 != v7)
      v17 = v16 < v7;
    if (v17)
    {
      *a2 = v4;
      goto LABEL_18;
    }
  }
  else if (v11)
  {
    *a2 = v9;
    *a3 = v4;
    v12 = *result;
    v13 = **a2;
    v14 = **result;
    v15 = *a2 < *result;
    if (v13 != v14)
      v15 = v13 < v14;
    if (v15)
    {
      *result = *a2;
      *a2 = v12;
      v4 = *a3;
    }
  }
  else
  {
    v4 = *a3;
  }
LABEL_20:
  v18 = **a4;
  v19 = *a4 < v4;
  if (v18 != *v4)
    v19 = v18 < *v4;
  if (v19)
  {
    *a3 = *a4;
    *a4 = v4;
    v20 = *a2;
    v21 = **a3;
    v22 = **a2;
    v23 = *a3 < *a2;
    if (v21 != v22)
      v23 = v21 < v22;
    if (v23)
    {
      *a2 = *a3;
      *a3 = v20;
      v24 = *result;
      v25 = **a2;
      v26 = **result;
      v27 = *a2 < *result;
      if (v25 != v26)
        v27 = v25 < v26;
      if (v27)
      {
        *result = *a2;
        *a2 = v24;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **>(double **a1, double **a2)
{
  uint64_t v4;
  _BOOL8 result;
  double *v6;
  double *v7;
  double v8;
  _BOOL4 v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  BOOL v14;
  double *v15;
  _BOOL4 v16;
  double *v17;
  double **v18;
  double *v19;
  double *v20;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  _BOOL4 v25;
  double **v26;
  double **v27;
  _BOOL4 v28;
  double **v29;
  double **v30;
  double **v31;
  double *v32;
  double *v33;
  _BOOL4 v34;
  double *v35;
  double *v36;
  double v37;
  double v38;
  _BOOL4 v39;
  double *v40;
  double v41;
  _BOOL4 v42;
  double *v43;
  double v44;
  _BOOL4 v45;
  double *v46;
  double *v47;
  double v48;
  _BOOL4 v49;
  BOOL v50;
  double **v51;
  int v52;
  uint64_t i;
  double **v54;
  double *v55;
  double *v56;
  double v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  double *v62;
  _BOOL4 v63;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = **a1;
      v9 = v6 < *a1;
      if (*v6 != v8)
        v9 = *v6 < v8;
      if (v9)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v10 = *a1;
      v11 = a1[1];
      v12 = *v11;
      v13 = **a1;
      if (*v11 == v13)
        v14 = v11 < *a1;
      else
        v14 = *v11 < v13;
      v15 = *(a2 - 1);
      v16 = v15 < v11;
      if (*v15 != v12)
        v16 = *v15 < v12;
      if (v14)
      {
        if (v16)
        {
          *a1 = v15;
          *(a2 - 1) = v10;
        }
        else
        {
          *a1 = v11;
          a1[1] = v10;
          v62 = *(a2 - 1);
          v63 = v62 < v10;
          if (*v62 != v13)
            v63 = *v62 < v13;
          if (v63)
          {
            a1[1] = v62;
            *(a2 - 1) = v10;
          }
        }
      }
      else if (v16)
      {
        a1[1] = v15;
        *(a2 - 1) = v11;
        v47 = *a1;
        v46 = a1[1];
        v48 = **a1;
        v49 = v46 < *a1;
        if (*v46 != v48)
          v49 = *v46 < v48;
        if (v49)
        {
          *a1 = v46;
          a1[1] = v47;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v29 = a1 + 1;
      v30 = a1 + 2;
      v31 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **>(a1, a1 + 1, a1 + 2, a1 + 3);
      v32 = *(a2 - 1);
      v33 = a1[3];
      v34 = v32 < v33;
      if (*v32 != *v33)
        v34 = *v32 < *v33;
      if (v34)
      {
        *v31 = v32;
        *(a2 - 1) = v33;
        v35 = *v31;
        v36 = *v30;
        v37 = **v31;
        v38 = **v30;
        v39 = *v31 < *v30;
        if (v37 != v38)
          v39 = v37 < v38;
        if (v39)
        {
          *v30 = v35;
          *v31 = v36;
          v40 = *v29;
          v41 = **v29;
          v42 = v35 < *v29;
          if (v37 != v41)
            v42 = v37 < v41;
          if (v42)
          {
            a1[1] = v35;
            a1[2] = v40;
            v43 = *a1;
            v44 = **a1;
            v45 = v35 < *a1;
            if (v37 != v44)
              v45 = v37 < v44;
            if (v45)
            {
              *a1 = v35;
              a1[1] = v43;
            }
          }
        }
      }
      return 1;
    default:
      v18 = a1 + 2;
      v17 = a1[2];
      v19 = a1[1];
      v20 = *a1;
      v21 = *v19;
      v22 = **a1;
      v23 = v19 < *a1;
      if (*v19 != v22)
        v23 = *v19 < v22;
      v24 = *v17;
      v25 = *v17 < v21;
      if (*v17 == v21)
        v25 = v17 < v19;
      if (v23)
      {
        v26 = a1;
        v27 = a1 + 2;
        if (!v25)
        {
          *a1 = v19;
          a1[1] = v20;
          v28 = v17 < v20;
          if (v24 != v22)
            v28 = v24 < v22;
          v26 = a1 + 1;
          v27 = a1 + 2;
          if (!v28)
            goto LABEL_48;
        }
LABEL_47:
        *v26 = v17;
        *v27 = v20;
        goto LABEL_48;
      }
      if (v25)
      {
        a1[1] = v17;
        *v18 = v19;
        v50 = v17 < v20;
        if (v24 != v22)
          v50 = v24 < v22;
        v26 = a1;
        v27 = a1 + 1;
        if (v50)
          goto LABEL_47;
      }
LABEL_48:
      v51 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v52 = 0;
      for (i = 24; ; i += 8)
      {
        v55 = *v51;
        v56 = *v18;
        v57 = **v51;
        v58 = *v51 < v56;
        if (v57 != *v56)
          v58 = v57 < *v56;
        if (v58)
        {
          v59 = i;
          do
          {
            *(double **)((char *)a1 + v59) = v56;
            v60 = v59 - 8;
            if (v59 == 8)
            {
              v54 = a1;
              goto LABEL_51;
            }
            v56 = *(double **)((char *)a1 + v59 - 16);
            v61 = v57 < *v56;
            if (v57 == *v56)
              v61 = v55 < v56;
            v59 -= 8;
          }
          while (v61);
          v54 = (double **)((char *)a1 + v60);
LABEL_51:
          *v54 = v55;
          if (++v52 == 8)
            break;
        }
        v18 = v51++;
        if (v51 == a2)
          return 1;
      }
      return v51 + 1 == a2;
  }
}

void sub_19FB19AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  va_list va;

  va_start(va, a17);

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>(float *a1, int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = a3;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = (v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v40 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    v24 = (uint64_t *)(a1 + 4);
    v23 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v23)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v25 = v23[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v24;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
        {
          *v23 = *i;
          v30 = 8 * v29;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v30);
          **(_QWORD **)(*(_QWORD *)a1 + v30) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v23;
          v23 = i;
          v27 = v29;
        }
      }
      goto LABEL_58;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v24;
    v34 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_58;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v25)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v23;
          goto LABEL_63;
        }
        *v23 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*(_QWORD *)a1 + v35);
        **(_QWORD **)(*(_QWORD *)a1 + v35) = v34;
        v34 = v23;
      }
      v36 = v25;
LABEL_63:
      v23 = v34;
      v34 = (_QWORD *)*v34;
      v25 = v36;
      if (!v34)
        goto LABEL_58;
    }
  }
LABEL_72:
  v37 = *(_QWORD **)a1;
  v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v38)
  {
    *v13 = *v38;
LABEL_80:
    *v38 = v13;
    goto LABEL_81;
  }
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v37[v3] = a1 + 4;
  if (*v13)
  {
    v39 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7)
        v39 %= v7;
    }
    else
    {
      v39 &= v7 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
}

void sub_19FB19FE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::DaVinciAssetResourceFetcher::~DaVinciAssetResourceFetcher(md::DaVinciAssetResourceFetcher *this)
{
  md::IdentifiedGEOResourceFetcher::~IdentifiedGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::DaVinciAssetOcclusionMeshResourceFetcher::~DaVinciAssetOcclusionMeshResourceFetcher(md::DaVinciAssetOcclusionMeshResourceFetcher *this)
{
  md::IdentifiedGEOResourceFetcher::~IdentifiedGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::DaVinciAssetOcclusionMeshResourceFetcher::resourceKey(uint64_t a1, void *a2, uint64_t a3)
{
  return md::DaVinciAssetResourceFetcher::createResourceKey(a2, a3);
}

void std::__shared_ptr_emplace<md::DaVinciAssetResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD578;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::DaVinciAssetResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD578;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::DaVinciAssetResourceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::DaVinciAssetOcclusionMeshResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDE00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::DaVinciAssetOcclusionMeshResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDE00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::DaVinciAssetOcclusionMeshResourceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void altitude::MapProvider::MapTransfer::~MapTransfer(altitude::MapProvider::MapTransfer *this)
{
  altitude::MapProvider::MapTransfer::~MapTransfer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E42C3B58;
  v2 = *((_QWORD *)this + 30);
  if (v2)
  {
    v3 = *((_QWORD *)this + 31);
    v4 = (void *)*((_QWORD *)this + 30);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 30);
    }
    *((_QWORD *)this + 31) = v2;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::__map_value_compare<std::shared_ptr<altitude::MapRequest>,std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::less<std::shared_ptr<altitude::MapRequest>>,true>,std::allocator<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>>>::destroy(*((_QWORD **)this + 28));
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  karo::Job::~Job(this);
}

void altitude::MapProvider::MapTransfer::jobStep(altitude::MapProvider::MapTransfer *this)
{
  altitude::MapProvider::MapTransfer *v1;
  char *v2;
  char *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  char *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  _WORD *v33;
  int v34;
  int v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t **v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _DWORD *v53;
  __int128 v54;
  unsigned int v55;
  int v56;
  int v57;
  unsigned __int8 v58;
  uint64_t v59;
  int v60;
  unsigned __int8 *v61;
  unsigned __int8 **v62;
  unsigned __int8 **v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  _BOOL4 v67;
  BOOL v68;
  uint64_t *v69;
  int v70;
  BOOL v71;
  unsigned int v72;
  int v73;
  int v74;
  BOOL v75;
  unsigned int v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t v89;
  _BYTE *v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 *v97;
  uint64_t v98;
  uint64_t *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  char **v111;
  BOOL v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  __int128 *v116;
  _DWORD *v117;
  _DWORD *v119;
  std::__shared_weak_count *v120;
  void *__p;
  _DWORD *v122;
  _WORD *v123;
  uint64_t **v124;
  uint64_t *v125;
  uint64_t v126;

  v1 = this;
  v125 = 0;
  v126 = 0;
  v124 = &v125;
  v2 = (char *)*((_QWORD *)this + 27);
  v3 = (char *)this + 224;
  if (v2 != (char *)this + 224)
  {
    do
    {
      v4 = v125;
      v5 = &v125;
      if (v124 == &v125)
        goto LABEL_10;
      v6 = v125;
      v7 = &v125;
      if (v125)
      {
        do
        {
          v5 = (uint64_t **)v6;
          v6 = (uint64_t *)v6[1];
        }
        while (v6);
      }
      else
      {
        do
        {
          v5 = (uint64_t **)v7[2];
          v68 = *v5 == (uint64_t *)v7;
          v7 = v5;
        }
        while (v68);
      }
      v8 = *((_QWORD *)v2 + 4);
      if ((unint64_t)v5[4] < v8)
      {
LABEL_10:
        if (v125)
          v9 = v5;
        else
          v9 = &v125;
        if (v125)
          v10 = v5 + 1;
        else
          v10 = &v125;
      }
      else
      {
        v9 = &v125;
        v10 = &v125;
        if (v125)
        {
          v10 = &v125;
          while (1)
          {
            while (1)
            {
              v9 = (uint64_t **)v4;
              v12 = v4[4];
              if (v8 >= v12)
                break;
              v4 = *v9;
              v10 = v9;
              if (!*v9)
                goto LABEL_25;
            }
            if (v12 >= v8)
              break;
            v10 = v9 + 1;
            v4 = v9[1];
            if (!v4)
              goto LABEL_25;
          }
        }
      }
      if (*v10)
      {
        v11 = (char *)*((_QWORD *)v2 + 1);
        if (v11)
          goto LABEL_36;
      }
      else
      {
LABEL_25:
        v13 = (uint64_t *)operator new(0x48uLL);
        v14 = v13;
        v13[4] = *((_QWORD *)v2 + 4);
        v15 = *((_QWORD *)v2 + 5);
        v13[5] = v15;
        if (v15)
        {
          v16 = (unint64_t *)(v15 + 8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        v13[6] = 0;
        v13[7] = 0;
        v13[8] = 0;
        v18 = *((_QWORD *)v2 + 6);
        v19 = *((_QWORD *)v2 + 7);
        v20 = v19 - v18;
        if (v19 != v18)
        {
          v21 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 3);
          if (v21 > 0xAAAAAAAAAAAAAAALL)
LABEL_188:
            abort();
          v22 = (char *)operator new(v20);
          v14[6] = (uint64_t)v22;
          v14[8] = (uint64_t)&v22[24 * v21];
          do
          {
            *(_WORD *)v22 = *(_WORD *)v18;
            *(_QWORD *)(v22 + 4) = *(_QWORD *)(v18 + 4);
            v18 += 24;
            v22 += 24;
          }
          while (v18 != v19);
          v14[7] = (uint64_t)v22;
          v1 = this;
        }
        *v14 = 0;
        v14[1] = 0;
        v14[2] = (uint64_t)v9;
        *v10 = v14;
        if (*v124)
        {
          v124 = (uint64_t **)*v124;
          v14 = *v10;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v125, v14);
        ++v126;
        v11 = (char *)*((_QWORD *)v2 + 1);
        if (v11)
        {
          do
          {
LABEL_36:
            v23 = v11;
            v11 = *(char **)v11;
          }
          while (v11);
          goto LABEL_3;
        }
      }
      do
      {
        v23 = (char *)*((_QWORD *)v2 + 2);
        v68 = *(_QWORD *)v23 == (_QWORD)v2;
        v2 = v23;
      }
      while (!v68);
LABEL_3:
      v2 = v23;
    }
    while (v23 != v3);
  }
  std::__tree<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::__map_value_compare<std::shared_ptr<altitude::MapRequest>,std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::less<std::shared_ptr<altitude::MapRequest>>,true>,std::allocator<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>>>::destroy(*((_QWORD **)v1 + 28));
  *((_QWORD *)v1 + 28) = 0;
  *((_QWORD *)v1 + 29) = 0;
  *((_QWORD *)v1 + 27) = v3;
  v24 = (uint64_t *)v124;
  if (v124 == &v125)
    goto LABEL_186;
  v111 = (char **)((char *)v1 + 240);
  do
  {
    v26 = v24[4];
    v25 = (std::__shared_weak_count *)v24[5];
    v120 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
    }
    __p = 0;
    v122 = 0;
    v123 = 0;
    v29 = v24[6];
    v30 = v24[7];
    v31 = v30 - v29;
    if (v30 != v29)
    {
      v32 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 3);
      if (v32 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_188;
      v33 = operator new(v31);
      __p = v33;
      v123 = &v33[12 * v32];
      do
      {
        *v33 = *(_WORD *)v29;
        *(_QWORD *)(v33 + 2) = *(_QWORD *)(v29 + 4);
        v29 += 24;
        v33 += 12;
      }
      while (v29 != v30);
      v122 = v33;
    }
    pthread_mutex_lock(*(pthread_mutex_t **)(v26 + 152));
    v34 = *(_DWORD *)(v26 + 160);
    pthread_mutex_unlock(*(pthread_mutex_t **)(v26 + 152));
    if ((v34 & 2) != 0)
    {
      (*(void (**)(_QWORD, altitude::MapProvider::MapTransfer *, void **, uint64_t, _QWORD))(**((_QWORD **)v1 + 24) + 24))(*((_QWORD *)v1 + 24), v1, &__p, v26 + 248, *((unsigned int *)v1 + 52));
      goto LABEL_66;
    }
    pthread_mutex_lock(*(pthread_mutex_t **)(v26 + 152));
    v35 = *(_DWORD *)(v26 + 160);
    pthread_mutex_unlock(*(pthread_mutex_t **)(v26 + 152));
    if ((v35 & 1) == 0)
      goto LABEL_66;
    v37 = *(_QWORD *)(v26 + 304);
    v36 = *(std::__shared_weak_count **)(v26 + 312);
    if (v36)
    {
      v38 = (unint64_t *)&v36->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    if (!v37)
      goto LABEL_180;
    v40 = *(_QWORD *)(v37 + 8);
    v41 = *(std::__shared_weak_count **)(v37 + 16);
    if (!v41)
    {
      if (!v40)
        goto LABEL_180;
      v114 = *(std::__shared_weak_count **)(v37 + 16);
      v115 = (uint64_t)v36;
      v113 = v37;
      v49 = *(_QWORD *)(v37 + 8);
      v112 = 1;
      goto LABEL_85;
    }
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    do
      v44 = __ldaxr(v42);
    while (__stlxr(v44 - 1, v42));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      if (!v40)
        goto LABEL_180;
LABEL_82:
      v49 = *(_QWORD *)(v37 + 8);
      v50 = *(std::__shared_weak_count **)(v37 + 16);
      v112 = v50 == 0;
      v114 = v50;
      v115 = (uint64_t)v36;
      v113 = v37;
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
LABEL_85:
      v53 = __p;
      v117 = v122;
      if (__p == v122)
      {
LABEL_163:
        v1 = this;
        v99 = (uint64_t *)*((_QWORD *)this + 31);
        if ((unint64_t)v99 >= *((_QWORD *)this + 32))
        {
          v36 = (std::__shared_weak_count *)v115;
          v106 = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>(v111, v113, v115);
          v100 = v114;
        }
        else
        {
          *v99 = 0;
          v99[1] = 0;
          v36 = (std::__shared_weak_count *)v115;
          v100 = v114;
          if (v115)
          {
            v101 = (unint64_t *)(v115 + 8);
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
            v103 = (std::__shared_weak_count *)v99[1];
            *v99 = v113;
            v99[1] = v115;
            if (v103)
            {
              v104 = (unint64_t *)&v103->__shared_owners_;
              do
                v105 = __ldaxr(v104);
              while (__stlxr(v105 - 1, v104));
              if (!v105)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                std::__shared_weak_count::__release_weak(v103);
              }
            }
          }
          else
          {
            *v99 = v113;
            v99[1] = 0;
          }
          v106 = (char *)(v99 + 2);
        }
        *((_QWORD *)this + 31) = v106;
        if (!v112)
        {
          v107 = (unint64_t *)&v100->__shared_owners_;
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        goto LABEL_180;
      }
      v116 = (__int128 *)(v49 + 24);
LABEL_92:
      v55 = *((unsigned __int8 *)v53 + 1);
      v57 = v53[1];
      v56 = v53[2];
      v58 = *(_BYTE *)v53;
      v59 = *((_QWORD *)this + 23);
      v60 = *(_DWORD *)(*((_QWORD *)this + 24) + 24);
      pthread_mutex_lock(*(pthread_mutex_t **)(v59 + 64));
      v62 = (unsigned __int8 **)(v59 + 48);
      v61 = *(unsigned __int8 **)(v59 + 48);
      v63 = (unsigned __int8 **)(v59 + 48);
      v64 = (unsigned __int8 *)(v59 + 48);
      if (!v61)
      {
LABEL_135:
        v119 = v53;
        v82 = v59;
        v83 = v64;
        v64 = (unsigned __int8 *)operator new(0x58uLL);
        v64[32] = v58;
        v64[33] = v55;
        *((_DWORD *)v64 + 9) = v57;
        *((_DWORD *)v64 + 10) = v56;
        *((_DWORD *)v64 + 14) = v60;
        *((_WORD *)v64 + 32) = 255;
        *((_DWORD *)v64 + 17) = 0;
        *((_DWORD *)v64 + 18) = 0;
        *(_QWORD *)v64 = 0;
        *((_QWORD *)v64 + 1) = 0;
        *((_QWORD *)v64 + 2) = v83;
        v59 = v82;
        *v63 = v64;
        v84 = **(_QWORD **)(v82 + 40);
        v85 = v64;
        if (v84)
        {
          *(_QWORD *)(v82 + 40) = v84;
          v85 = *v63;
        }
        v86 = *v62;
        v68 = v85 == *v62;
        v85[24] = v68;
        v53 = v119;
        if (!v68)
        {
          do
          {
            v87 = *((_QWORD *)v85 + 2);
            if (*(_BYTE *)(v87 + 24))
              break;
            v88 = *(unsigned __int8 **)(v87 + 16);
            v89 = *(_QWORD *)v88;
            if (*(_QWORD *)v88 == v87)
            {
              v92 = *((_QWORD *)v88 + 1);
              if (!v92 || (v93 = *(unsigned __int8 *)(v92 + 24), v90 = (_BYTE *)(v92 + 24), v93))
              {
                if (*(unsigned __int8 **)v87 == v85)
                {
                  v94 = (uint64_t *)*((_QWORD *)v85 + 2);
                }
                else
                {
                  v94 = *(uint64_t **)(v87 + 8);
                  v95 = *v94;
                  *(_QWORD *)(v87 + 8) = *v94;
                  if (v95)
                  {
                    *(_QWORD *)(v95 + 16) = v87;
                    v88 = *(unsigned __int8 **)(v87 + 16);
                  }
                  v94[2] = (uint64_t)v88;
                  *(_QWORD *)(*(_QWORD *)(v87 + 16) + 8 * (**(_QWORD **)(v87 + 16) != v87)) = v94;
                  *v94 = v87;
                  *(_QWORD *)(v87 + 16) = v94;
                  v88 = (unsigned __int8 *)v94[2];
                  v87 = *(_QWORD *)v88;
                }
                *((_BYTE *)v94 + 24) = 1;
                v88[24] = 0;
                v98 = *(_QWORD *)(v87 + 8);
                *(_QWORD *)v88 = v98;
                if (v98)
                  *(_QWORD *)(v98 + 16) = v88;
                *(_QWORD *)(v87 + 16) = *((_QWORD *)v88 + 2);
                *(_QWORD *)(*((_QWORD *)v88 + 2) + 8 * (**((_QWORD **)v88 + 2) != (_QWORD)v88)) = v87;
                *(_QWORD *)(v87 + 8) = v88;
                goto LABEL_88;
              }
            }
            else if (!v89 || (v91 = *(unsigned __int8 *)(v89 + 24), v90 = (_BYTE *)(v89 + 24), v91))
            {
              if (*(unsigned __int8 **)v87 == v85)
              {
                v96 = *((_QWORD *)v85 + 1);
                *(_QWORD *)v87 = v96;
                if (v96)
                {
                  *(_QWORD *)(v96 + 16) = v87;
                  v88 = *(unsigned __int8 **)(v87 + 16);
                }
                *((_QWORD *)v85 + 2) = v88;
                *(_QWORD *)(*(_QWORD *)(v87 + 16) + 8 * (**(_QWORD **)(v87 + 16) != v87)) = v85;
                *((_QWORD *)v85 + 1) = v87;
                *(_QWORD *)(v87 + 16) = v85;
                v88 = (unsigned __int8 *)*((_QWORD *)v85 + 2);
              }
              else
              {
                v85 = (unsigned __int8 *)*((_QWORD *)v85 + 2);
              }
              v85[24] = 1;
              v88[24] = 0;
              v87 = *((_QWORD *)v88 + 1);
              v97 = *(unsigned __int8 **)v87;
              *((_QWORD *)v88 + 1) = *(_QWORD *)v87;
              if (v97)
                *((_QWORD *)v97 + 2) = v88;
              *(_QWORD *)(v87 + 16) = *((_QWORD *)v88 + 2);
              *(_QWORD *)(*((_QWORD *)v88 + 2) + 8 * (**((_QWORD **)v88 + 2) != (_QWORD)v88)) = v87;
              *(_QWORD *)v87 = v88;
LABEL_88:
              *((_QWORD *)v88 + 2) = v87;
              break;
            }
            *(_BYTE *)(v87 + 24) = 1;
            v85 = v88;
            v88[24] = v88 == v86;
            *v90 = 1;
          }
          while (v88 != v86);
        }
        ++*(_QWORD *)(v59 + 56);
LABEL_90:
        v54 = *v116;
        *((_QWORD *)v64 + 10) = *((_QWORD *)v116 + 2);
        *((_OWORD *)v64 + 4) = v54;
        goto LABEL_91;
      }
      v65 = v59 + 48;
      v66 = *(_QWORD *)(v59 + 48);
      while (1)
      {
        v70 = *(_DWORD *)(v66 + 56);
        v71 = v70 < v60;
        if (v70 == v60)
        {
          v72 = *(unsigned __int8 *)(v66 + 33);
          if (v72 != v55)
          {
            v67 = v72 < v55;
            goto LABEL_97;
          }
          v73 = *(_DWORD *)(v66 + 36);
          v71 = v73 < v57;
          if (v73 == v57)
            v71 = *(_DWORD *)(v66 + 40) < v56;
        }
        v67 = v71;
LABEL_97:
        v68 = !v67;
        if (v67)
          v69 = (uint64_t *)(v66 + 8);
        else
          v69 = (uint64_t *)v66;
        if (v68)
          v65 = v66;
        v66 = *v69;
        if (!*v69)
        {
          if ((unsigned __int8 **)v65 == v62)
            goto LABEL_119;
          v74 = *(_DWORD *)(v65 + 56);
          v75 = v60 < v74;
          if (v60 != v74)
            goto LABEL_114;
          v76 = *(unsigned __int8 *)(v65 + 33);
          if (v55 != v76)
          {
            if (v55 >= v76)
              goto LABEL_91;
            while (1)
            {
LABEL_119:
              v64 = v61;
              v78 = *((_DWORD *)v61 + 14);
              if (v60 == v78)
              {
                v79 = v64[33];
                if (v55 == v79)
                {
                  v80 = *((_DWORD *)v64 + 9);
                  if (v57 == v80)
                  {
                    v81 = *((_DWORD *)v64 + 10);
                    if (v56 < v81)
                      goto LABEL_118;
                    if (v81 >= v56)
                      goto LABEL_90;
                  }
                  else
                  {
                    if (v57 < v80)
                    {
LABEL_118:
                      v61 = *(unsigned __int8 **)v64;
                      v63 = (unsigned __int8 **)v64;
                      if (!*(_QWORD *)v64)
                        goto LABEL_135;
                      continue;
                    }
                    if (v80 >= v57)
                      goto LABEL_90;
                  }
                }
                else
                {
                  if (v55 < v79)
                    goto LABEL_118;
                  if (v79 >= v55)
                    goto LABEL_90;
                }
              }
              else
              {
                if (v60 < v78)
                  goto LABEL_118;
                if (v78 >= v60)
                  goto LABEL_90;
              }
              v61 = (unsigned __int8 *)*((_QWORD *)v64 + 1);
              if (!v61)
              {
                v63 = (unsigned __int8 **)(v64 + 8);
                goto LABEL_135;
              }
            }
          }
          v77 = *(_DWORD *)(v65 + 36);
          v75 = v57 < v77;
          if (v57 == v77)
            v75 = v56 < *(_DWORD *)(v65 + 40);
LABEL_114:
          if (v75)
            goto LABEL_119;
LABEL_91:
          pthread_mutex_unlock(*(pthread_mutex_t **)(v59 + 64));
          v53 += 6;
          if (v53 == v117)
            goto LABEL_163;
          goto LABEL_92;
        }
      }
    }
    if (v40)
      goto LABEL_82;
LABEL_180:
    if (v36)
    {
      v109 = (unint64_t *)&v36->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
LABEL_66:
    if (__p)
    {
      v122 = __p;
      operator delete(__p);
    }
    if (!v120)
      goto LABEL_72;
    v45 = (unint64_t *)&v120->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
      v47 = (uint64_t *)v24[1];
      if (v47)
      {
        do
        {
LABEL_73:
          v48 = (uint64_t **)v47;
          v47 = (uint64_t *)*v47;
        }
        while (v47);
        goto LABEL_43;
      }
    }
    else
    {
LABEL_72:
      v47 = (uint64_t *)v24[1];
      if (v47)
        goto LABEL_73;
    }
    do
    {
      v48 = (uint64_t **)v24[2];
      v68 = *v48 == v24;
      v24 = (uint64_t *)v48;
    }
    while (!v68);
LABEL_43:
    v24 = (uint64_t *)v48;
  }
  while (v48 != &v125);
  if (!*((_QWORD *)v1 + 29))
  {
LABEL_186:
    pthread_mutex_lock(*((pthread_mutex_t **)v1 + 19));
    *((_DWORD *)v1 + 40) |= 1u;
    pthread_mutex_unlock(*((pthread_mutex_t **)v1 + 19));
  }
  std::__tree<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::__map_value_compare<std::shared_ptr<altitude::MapRequest>,std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::less<std::shared_ptr<altitude::MapRequest>>,true>,std::allocator<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>>>::destroy(v125);
}

void std::__tree<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::__map_value_compare<std::shared_ptr<altitude::MapRequest>,std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::less<std::shared_ptr<altitude::MapRequest>>,true>,std::allocator<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>>>::destroy(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (a1)
  {
    std::__tree<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::__map_value_compare<std::shared_ptr<altitude::MapRequest>,std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::less<std::shared_ptr<altitude::MapRequest>>,true>,std::allocator<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::__map_value_compare<std::shared_ptr<altitude::MapRequest>,std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::less<std::shared_ptr<altitude::MapRequest>>,true>,std::allocator<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>>>::destroy(a1[1]);
    v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }
    v3 = (std::__shared_weak_count *)a1[5];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    operator delete(a1);
  }
}

uint64_t altitude::MapProvider::cacheLookup(altitude::MapProvider *this, const QuadTile *a2, int a3, char *a4)
{
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  const QuadTile *v12;
  _BOOL4 v13;
  BOOL v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  int xIdx;
  unsigned int v21;
  int v22;
  uint64_t result;
  char v24;
  uint64_t v25;
  char hash;

  v8 = a4[1];
  v10 = *((_DWORD *)a4 + 1);
  v9 = *((_DWORD *)a4 + 2);
  pthread_mutex_lock((pthread_mutex_t *)a2[2]._hash);
  v11 = *(_QWORD *)&a2[2]._type;
  if (!v11)
    goto LABEL_25;
  v12 = a2 + 2;
  do
  {
    v16 = *(_DWORD *)(v11 + 56);
    v17 = v16 < a3;
    if (v16 != a3)
      goto LABEL_3;
    v18 = *(unsigned __int8 *)(v11 + 33);
    if (v18 == v8)
    {
      v19 = *(_DWORD *)(v11 + 36);
      v17 = v19 < v10;
      if (v19 == v10)
        v17 = *(_DWORD *)(v11 + 40) < v9;
LABEL_3:
      v13 = v17;
      goto LABEL_6;
    }
    v13 = v18 < v8;
LABEL_6:
    v14 = !v13;
    if (v13)
      v15 = (uint64_t *)(v11 + 8);
    else
      v15 = (uint64_t *)v11;
    if (v14)
      v12 = (const QuadTile *)v11;
    v11 = *v15;
  }
  while (*v15);
  if (v12 == &a2[2])
    goto LABEL_25;
  xIdx = v12[2]._xIdx;
  if (xIdx != a3)
  {
    if (xIdx <= a3)
      goto LABEL_28;
    goto LABEL_25;
  }
  v21 = BYTE1(v12[1]._xIdx);
  if (v8 != v21)
  {
    if (v8 >= v21)
      goto LABEL_28;
    goto LABEL_25;
  }
  v22 = *(&v12[1]._xIdx + 1);
  if (v10 == v22)
  {
    if (v9 >= SLODWORD(v12[1]._hash))
      goto LABEL_28;
LABEL_25:
    result = pthread_mutex_unlock((pthread_mutex_t *)a2[2]._hash);
    v24 = a4[1];
    v25 = *(_QWORD *)(a4 + 4);
    hash = *a4;
  }
  else
  {
    if (v10 < v22)
      goto LABEL_25;
LABEL_28:
    v24 = BYTE1(v12[2]._hash);
    v25 = *(unint64_t *)((char *)&v12[2]._hash + 4);
    hash = v12[2]._hash;
    result = pthread_mutex_unlock((pthread_mutex_t *)a2[2]._hash);
  }
  *(_BYTE *)this = hash;
  *((_BYTE *)this + 1) = v24;
  *(_QWORD *)((char *)this + 4) = v25;
  return result;
}

uint64_t md::LabelLinePosition::pointAtOffset(md::LabelLinePosition *this, int a2)
{
  uint64_t v3;
  int v5;

  v5 = -1;
  if (!md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, a2, (uint64_t)&v5))
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 16 * (__int16)v5);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(v3, SHIWORD(v5));
}

uint64_t md::LabelLinePosition::getPointCoordinateAtOffset(uint64_t a1, int a2, uint64_t a3)
{
  unsigned __int8 *v4;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t result;

  if (!*(_QWORD *)a1)
    return 0;
  if (*(_DWORD *)(a1 + 40) != *(_DWORD *)(*(_QWORD *)a1 + 252))
    return 0;
  v4 = *(unsigned __int8 **)(a1 + 24);
  if (!v4 || *(__int16 *)(a1 + 34) < 0)
    return 0;
  v6 = a2;
  v7 = *(unsigned __int16 *)(a1 + 34);
  LODWORD(v8) = *(__int16 *)(a1 + 32);
  v9 = (a2 >> 31) | 1;
  if ((a2 & 0x80000000) == 0)
  {
    while (1)
    {
      v10 = v4[8];
      v11 = v4[8] ? v6 : -v6;
      v12 = v11 + v7;
      if (v11 + v7 < 0)
      {
        v13 = v12 + 1;
      }
      else
      {
        if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)v4 + 16))(*(_QWORD *)v4) > (unint64_t)v12)
          goto LABEL_42;
        v13 = v12 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)v4 + 16))(*(_QWORD *)v4);
        v10 = v4[8];
      }
      v6 = v10 ? v13 : -v13;
      v8 = (v8 + v9);
      v14 = *(_QWORD *)(a1 + 16);
      v15 = *(_QWORD *)(v14 + 8);
      v16 = (*(_QWORD *)(v14 + 16) - v15) >> 4;
      if (!v15 || v16 <= v8)
        return 0;
      v7 = 0;
      v4 = (unsigned __int8 *)(v15 + 16 * v8);
      if (!*(_BYTE *)(v15 + 16 * v8 + 8))
        v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v4 + 16))(*(_QWORD *)v4) - 1;
    }
  }
  v18 = -1;
  while (1)
  {
    v19 = v4[8];
    v20 = v4[8] ? v18 : -v18;
    v12 = v20 + v7;
    if (v20 + v7 >= 0)
      break;
    v21 = v12 + 1;
LABEL_31:
    if (v19)
      v18 = v21;
    else
      v18 = -v21;
    v8 = (v8 + v9);
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_QWORD *)(v22 + 8);
    v24 = (*(_QWORD *)(v22 + 16) - v23) >> 4;
    if (v23)
      v25 = v24 > v8;
    else
      v25 = 0;
    if (!v25)
      return 0;
    v7 = 0;
    v4 = (unsigned __int8 *)(v23 + 16 * v8);
    if (*(_BYTE *)(v23 + 16 * v8 + 8))
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v4 + 16))(*(_QWORD *)v4) - 1;
  }
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)v4 + 16))(*(_QWORD *)v4) <= (unint64_t)v12)
  {
    v21 = v12 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)v4 + 16))(*(_QWORD *)v4);
    v19 = v4[8];
    goto LABEL_31;
  }
LABEL_42:
  *(_WORD *)a3 = v8;
  *(_WORD *)(a3 + 2) = v12;
  result = 1;
  *(_DWORD *)(a3 + 4) = 0;
  return result;
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0330;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::Debug::ExtendedMesh::~ExtendedMesh(ggl::Debug::ExtendedMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::Debug::ExtendedMesh::~ExtendedMesh(ggl::Debug::ExtendedMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Debug::ExtendedMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Debug::ExtendedMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::Debug::ExtendedVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::Debug::ExtendedVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::VertexDataTyped<ggl::Debug::LineVBO>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::Debug::LineVBO>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::Debug::LineVBO>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::LineVBO>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Debug::LineVBO>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E03A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::LineVBO>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Debug::LineVBO>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E03A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::LineVBO>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Debug::LineVBO>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::LineVBO>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Debug::LineVBO>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::Debug::LineMesh::~LineMesh(ggl::Debug::LineMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::Debug::LineMesh::~LineMesh(ggl::Debug::LineMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Debug::LineMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Debug::LineMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::Debug::LineVBO>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::Debug::LineVBO>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::PolygonSolidFill::MeshPipelineState::MeshPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  _OWORD *v91;
  ggl::PolygonSolidFillShader *v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[28];

  if ((v7 & 1) == 0)
  {
    v91 = a4;
    v99 = a2;
    v100 = a3;
    a2 = v99;
    a3 = v100;
    a4 = v91;
    if ((_DWORD)v92)
    {
      if ((v93 & 1) == 0)
      {
        if ((_DWORD)v92)
        {
          if ((v96 & 1) == 0
          {
            if ((v98 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::attributesReflection(void)::r;
            *(_QWORD *)algn_1ECE43AF0 = 1;
          }
          ggl::PolygonSolidFill::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57CB18 = &ggl::PolygonSolidFill::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1EE57CB20 = 0;
          if ((v97 & 1) == 0
          {
            ggl::PolygonSolidFill::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE57CC10 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE57CC18 = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
          }
          qword_1EE57CB28 = (uint64_t)&ggl::PolygonSolidFill::pipelineDataMeshPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE57CB30 = xmmword_19FFB3410;
        }
      }
      ggl::PolygonSolidFill::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonSolidFill::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonSolidFillShader::typedReflection(v92);
      qword_1ECE313E0 = (uint64_t)&ggl::PolygonSolidFillShader::typedReflection(void)::ref;
      if ((v94 & 1) == 0
      {
        ggl::PolygonSolidFill::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57CCE0 = 0;
        qword_1EE57CCE8 = (uint64_t)"";
        dword_1EE57CCF0 = 0;
        qword_1EE57CCF8 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57CD00 = 1;
      }
      qword_1ECE313E8 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      unk_1ECE313F0 = 1;
      qword_1ECE313F8 = 0;
      unk_1ECE31400 = 0;
      qword_1ECE31408 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31410 = 0;
      if ((v95 & 1) == 0
      {
        ggl::PolygonSolidFill::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57CC50 = 0;
        qword_1EE57CC58 = (uint64_t)"view";
        dword_1EE57CC60 = 3;
        qword_1EE57CC68 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1EE57CC70 = xmmword_19FFB35A0;
        qword_1EE57CC80 = 1;
        unk_1EE57CC88 = "transform";
        dword_1EE57CC90 = 3;
        qword_1EE57CC98 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateMeshPipelineConstantTransformBinding(void)::reflection;
        unk_1EE57CCA0 = xmmword_19FFB3660;
        qword_1EE57CCB0 = 2;
        unk_1EE57CCB8 = "solidFill";
        dword_1EE57CCC0 = 3;
        qword_1EE57CCC8 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateMeshPipelineConstantSolidFillBinding(void)::reflection;
        unk_1EE57CCD0 = 5;
      }
      qword_1ECE31418 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE31420 = 3;
      a4 = v91;
      a2 = v99;
      a3 = v100;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v103 = *(_OWORD *)a3;
  *(_OWORD *)&v103[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v101 = *a4;
  v102 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::PolygonSolidFill::MeshPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v101;
  *(_OWORD *)(a1 + 272) = v102;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v103;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v103[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 305) = a5;
  v18 = *(int8x16_t *)(a1 + 320);
  v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v20 = vmovl_high_s8(v19);
  v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = v22;
  v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  *(_QWORD *)a1 = &off_1E42B8950;
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  v26 = v22;
  v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  v28 = v22;
  v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v22);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v33);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v32);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v28);
  v38 = vceqzq_s8(v18);
  v39 = vmovl_high_s8(v38);
  v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  v41 = v22;
  v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  v44 = v22;
  v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  v46 = v22;
  v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  v52 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v51);
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v41), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v23));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v44), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v46), v37);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v48), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v31));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v50), v36);
  v59 = vorrq_s8(v52, v35);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v22), v34);
  v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  v64 = v22;
  v65 = vmovl_high_s8(v61);
  v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  v67 = v22;
  v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  v69 = v22;
  v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v22);
  v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  v79 = v22;
  v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  v82 = v22;
  v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  v84 = v22;
  v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v82), vbicq_s8((int8x16_t)xmmword_19FFB3170, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v86), vbicq_s8((int8x16_t)xmmword_19FFB3190, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v84), vbicq_s8((int8x16_t)xmmword_19FFB3180, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v88), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v22), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v67)),
                                               v59)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::PolygonSolidFill::MeshPipelineSetup::~MeshPipelineSetup(ggl::PolygonSolidFill::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::PolygonSolidFill::MeshPipelineSetup::constantDataIsEnabled(ggl::PolygonSolidFill::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::PolygonSolidFill::MeshPipelineSetup::textureIsEnabled(ggl::PolygonSolidFill::MeshPipelineSetup *this)
{
  return 0;
}

_QWORD *ggl::PolygonSolidFill::MeshPipelineSetup::MeshPipelineSetup(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    v13 = (unint64_t *)&a3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &off_1E42B8920;
  v15 = (uint64_t *)a1[8];
  v16 = *a4;
  v17 = a4[1];
  *v15 = *a4;
  v15[1] = 0;
  v18 = (_QWORD *)a1[20];
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (std::__shared_weak_count *)v18[1];
  *v18 = v16;
  v18[1] = v17;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = a1[8];
  v25 = *a5;
  v26 = a5[1];
  *(_QWORD *)(v24 + 16) = *a5;
  *(_QWORD *)(v24 + 24) = 0;
  v27 = a1[20];
  if (v26)
  {
    v28 = (unint64_t *)(v26 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = *(std::__shared_weak_count **)(v27 + 24);
  *(_QWORD *)(v27 + 16) = v25;
  *(_QWORD *)(v27 + 24) = v26;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = a1[8];
  v34 = *a6;
  v35 = a6[1];
  *(_QWORD *)(v33 + 32) = *a6;
  *(_QWORD *)(v33 + 40) = 0;
  v36 = a1[20];
  if (v35)
  {
    v37 = (unint64_t *)(v35 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v39 = *(std::__shared_weak_count **)(v36 + 40);
  *(_QWORD *)(v36 + 32) = v34;
  *(_QWORD *)(v36 + 40) = v35;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return a1;
}

uint64_t ggl::PolygonSolidFill::CompressedMeshPipelineState::CompressedMeshPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::PolygonSolidFillShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1ECE43B18 = 1;
          }
          ggl::PolygonSolidFill::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57CBD8 = &ggl::PolygonSolidFill::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
          qword_1EE57CBE0 = 0;
          if ((v95 & 1) == 0
          {
            ggl::PolygonSolidFill::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE57CDA0 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE57CDA8 = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
          }
          qword_1EE57CBE8 = (uint64_t)&ggl::PolygonSolidFill::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
          unk_1EE57CBF0 = xmmword_19FFB3410;
        }
      }
      ggl::PolygonSolidFill::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonSolidFill::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonSolidFillShader::typedReflection(v90);
      qword_1ECE31430 = (uint64_t)&ggl::PolygonSolidFillShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::PolygonSolidFill::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57CE80 = 0;
        qword_1EE57CE88 = (uint64_t)"";
        dword_1EE57CE90 = 0;
        qword_1EE57CE98 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57CEA0 = 1;
      }
      qword_1ECE31438 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      unk_1ECE31440 = 1;
      qword_1ECE31448 = 0;
      unk_1ECE31450 = 0;
      qword_1ECE31458 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31460 = 0;
      if ((v93 & 1) == 0
      {
        ggl::PolygonSolidFill::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57CDF0 = 0;
        qword_1EE57CDF8 = (uint64_t)"view";
        dword_1EE57CE00 = 3;
        qword_1EE57CE08 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1EE57CE10 = xmmword_19FFB35A0;
        qword_1EE57CE20 = 1;
        unk_1EE57CE28 = "transform";
        dword_1EE57CE30 = 3;
        qword_1EE57CE38 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateCompressedMeshPipelineConstantTransformBinding(void)::reflection;
        unk_1EE57CE40 = xmmword_19FFB3660;
        qword_1EE57CE50 = 2;
        unk_1EE57CE58 = "solidFill";
        dword_1EE57CE60 = 3;
        qword_1EE57CE68 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateCompressedMeshPipelineConstantSolidFillBinding(void)::reflection;
        unk_1EE57CE70 = 5;
      }
      qword_1ECE31468 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE31470 = 3;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::PolygonSolidFill::CompressedMeshPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42B89F0;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::PolygonSolidFill::CompressedMeshPipelineSetup::~CompressedMeshPipelineSetup(ggl::PolygonSolidFill::CompressedMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::PolygonSolidFill::CompressedMeshPipelineSetup::constantDataIsEnabled(ggl::PolygonSolidFill::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::PolygonSolidFill::CompressedMeshPipelineSetup::textureIsEnabled(ggl::PolygonSolidFill::CompressedMeshPipelineSetup *this)
{
  return 0;
}

void ggl::PolygonSolidFill::S2MeshPipelineSetup::~S2MeshPipelineSetup(ggl::PolygonSolidFill::S2MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::PolygonSolidFill::S2MeshPipelineSetup::constantDataIsEnabled(ggl::PolygonSolidFill::S2MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::PolygonSolidFill::S2MeshPipelineSetup::textureIsEnabled(ggl::PolygonSolidFill::S2MeshPipelineSetup *this)
{
  return 0;
}

_QWORD *ggl::PolygonSolidFill::S2MeshPipelineSetup::S2MeshPipelineSetup(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    v13 = (unint64_t *)&a3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &off_1E42B8970;
  v15 = (uint64_t *)a1[8];
  v16 = *a4;
  v17 = a4[1];
  *v15 = *a4;
  v15[1] = 0;
  v18 = (_QWORD *)a1[20];
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (std::__shared_weak_count *)v18[1];
  *v18 = v16;
  v18[1] = v17;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = a1[8];
  v25 = *a5;
  v26 = a5[1];
  *(_QWORD *)(v24 + 16) = *a5;
  *(_QWORD *)(v24 + 24) = 0;
  v27 = a1[20];
  if (v26)
  {
    v28 = (unint64_t *)(v26 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = *(std::__shared_weak_count **)(v27 + 24);
  *(_QWORD *)(v27 + 16) = v25;
  *(_QWORD *)(v27 + 24) = v26;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = a1[8];
  v34 = *a6;
  v35 = a6[1];
  *(_QWORD *)(v33 + 32) = *a6;
  *(_QWORD *)(v33 + 40) = 0;
  v36 = a1[20];
  if (v35)
  {
    v37 = (unint64_t *)(v35 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v39 = *(std::__shared_weak_count **)(v36 + 40);
  *(_QWORD *)(v36 + 32) = v34;
  *(_QWORD *)(v36 + 40) = v35;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return a1;
}

uint64_t md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>::~TileDependencyLogicImpl(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  return a1;
}

void md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>::~TileDependencyLogicImpl(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  JUMPOUT(0x1A1AF4E00);
}

double md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>::createDebugNode@<D0>(uint64_t a1@<X8>)
{
  double result;

  strcpy((char *)a1, "TileDependencyLogic");
  *(_WORD *)(a1 + 23) = 19;
  result = 0.0;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(_BYTE *)(a1 + 95) = 0;
  return result;
}

void md::Logic<md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>,md::ResolvedTileSelectionContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *__p;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;

  v4 = (_QWORD *)operator new();
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&__p, a1);
  v5 = operator new();
  v6 = __p;
  v7 = v16;
  __p = 0;
  v16 = 0;
  *(_QWORD *)v5 = v6;
  *(_QWORD *)(v5 + 8) = v7;
  v9 = v17;
  v8 = v18;
  *(_QWORD *)(v5 + 16) = v17;
  *(_QWORD *)(v5 + 24) = v8;
  *(_DWORD *)(v5 + 32) = v19;
  if (v8)
  {
    v10 = v9[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    v9 = 0;
    v6[v10] = v5 + 16;
    v17 = 0;
    v18 = 0;
  }
  v4[2] = "md::ResolvedTileSelectionContext]";
  v4[3] = 32;
  v4[4] = v5;
  *v4 = &off_1E42B1450;
  v4[1] = 0x8677AD8BA9352C1DLL;
  *a2 = v4;
  if (v9)
  {
    do
    {
      v14 = (_QWORD *)*v9;
      v12 = (_QWORD *)v9[6];
      if (v12 == v9 + 3)
      {
        v12 = v9 + 3;
        v13 = 4;
      }
      else
      {
        if (!v12)
          goto LABEL_13;
        v13 = 5;
      }
      (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_13:
      operator delete(v9);
      v9 = v14;
    }
    while (v14);
  }
  v11 = __p;
  __p = 0;
  if (v11)
    operator delete(v11);
}

void sub_19FB1CC4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  md::ResolvedTileSelectionContext::~ResolvedTileSelectionContext((md::ResolvedTileSelectionContext *)va);
  MEMORY[0x1A1AF4E00](v2, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>,md::ResolvedTileSelectionContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x8677AD8BA9352C1DLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>,md::ResolvedTileSelectionContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x8677AD8BA9352C1DLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>,md::ResolvedTileSelectionContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x8677AD8BA9352C1DLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>,md::ResolvedTileSelectionContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x8677AD8BA9352C1DLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>,md::ResolvedTileSelectionContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  if (*(_QWORD *)(a3 + 8) == 0x8677AD8BA9352C1DLL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

double md::Logic<md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>,md::ResolvedTileSelectionContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

uint64_t md::Logic<md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>,md::ResolvedTileSelectionContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>::runBeforeLayoutAtVariableRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a3 + 8);
  if (v4)
  {
    md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>::getResolverFromContext<md::FlyoverTileDataResolverContext>(a1, v4, 0x4Bu, a4);
    v8 = *(_QWORD *)(a3 + 8);
    if (v8)
    {
      md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>::getResolverFromContext<md::FlyoverTileDataResolverContext>(a1, v8, 0x4Cu, a4);
      v9 = *(_QWORD *)(a3 + 8);
      if (v9)
        md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>::getResolverFromContext<md::FlyoverTileDataResolverContext>(a1, v9, 0x4Du, a4);
    }
  }
}

void md::Logic<md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>,md::ResolvedTileSelectionContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>::getResolverFromContext<md::FlyoverTileDataResolverContext>(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  uint64_t v9;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint8x8_t v16;
  unint64_t v17;
  uint64_t ***v18;
  uint64_t **v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8x8_t v23;
  void **v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  size_t v38;
  size_t v39;
  size_t v40;
  _QWORD *i;
  size_t v42;
  uint64_t v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  size_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  _QWORD *v63;
  void *v64[2];
  void *__p[2];
  int v66;
  _QWORD *v67;
  _QWORD *v68;
  char v69;
  _QWORD v70[3];
  _QWORD *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 128);
  v5 = *(unsigned __int16 **)(v4 + 168);
  v6 = *(unsigned __int16 **)(v4 + 176);
  if (v5 == v6)
    return;
  v9 = a2;
  v11 = a3;
  v63 = a4 + 2;
  while (2)
  {
    v12 = *v5;
    v13 = *(_QWORD *)(a1 + 128);
    *(_OWORD *)v64 = 0u;
    *(_OWORD *)__p = 0u;
    v66 = 1065353216;
    v14 = *(_QWORD *)(v13 + 144);
    if (!v14)
      goto LABEL_127;
    do
    {
      if (*(unsigned __int16 *)(v14 + 20) == v12 && *(_BYTE *)(v14 + 18) != 2)
        std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short>((uint64_t)v64, *(_WORD *)(v14 + 16), *(_WORD *)(v14 + 16));
      v14 = *(_QWORD *)v14;
    }
    while (v14);
    if (!v64[1])
      goto LABEL_127;
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v64[1]);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v17 = v11;
      if (v64[1] <= (void *)v11)
        v17 = v11 % (unint64_t)v64[1];
    }
    else
    {
      v17 = (LODWORD(v64[1]) - 1) & v11;
    }
    v18 = (uint64_t ***)*((_QWORD *)v64[0] + v17);
    if (!v18)
      goto LABEL_127;
    v19 = *v18;
    if (!v19)
      goto LABEL_127;
    if (v16.u32[0] < 2uLL)
    {
      while (1)
      {
        v21 = (unint64_t)v19[1];
        if (v21 == v11)
        {
          if (*((unsigned __int16 *)v19 + 8) == a3)
            goto LABEL_33;
        }
        else if ((v21 & ((unint64_t)v64[1] - 1)) != v17)
        {
          goto LABEL_127;
        }
        v19 = (uint64_t **)*v19;
        if (!v19)
          goto LABEL_127;
      }
    }
    while (1)
    {
      v20 = (unint64_t)v19[1];
      if (v20 == v11)
        break;
      if ((void *)v20 >= v64[1])
        v20 %= (unint64_t)v64[1];
      if (v20 != v17)
        goto LABEL_127;
LABEL_22:
      v19 = (uint64_t **)*v19;
      if (!v19)
        goto LABEL_127;
    }
    if (*((unsigned __int16 *)v19 + 8) != a3)
      goto LABEL_22;
LABEL_33:
    v70[0] = &off_1E42D9290;
    v70[1] = v9;
    v71 = v70;
    v22 = a4[1];
    if (v22)
    {
      v23 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        v14 = v11;
        if (v22 <= v11)
          v14 = v11 % v22;
      }
      else
      {
        v14 = ((_DWORD)v22 - 1) & v11;
      }
      v24 = *(void ***)(*a4 + 8 * v14);
      if (v24)
      {
        v25 = *v24;
        if (*v24)
        {
          if (v23.u32[0] < 2uLL)
          {
            while (1)
            {
              v27 = v25[1];
              if (v27 == v11)
              {
                if (*((unsigned __int16 *)v25 + 8) == a3)
                  goto LABEL_113;
              }
              else if ((v27 & (v22 - 1)) != v14)
              {
                goto LABEL_53;
              }
              v25 = (_QWORD *)*v25;
              if (!v25)
                goto LABEL_53;
            }
          }
          do
          {
            v26 = v25[1];
            if (v26 == v11)
            {
              if (*((unsigned __int16 *)v25 + 8) == a3)
                goto LABEL_113;
            }
            else
            {
              if (v26 >= v22)
                v26 %= v22;
              if (v26 != v14)
                break;
            }
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
      }
    }
LABEL_53:
    v25 = operator new(0x38uLL);
    v67 = v25;
    v68 = v63;
    *v25 = 0;
    v25[1] = v11;
    *((_WORD *)v25 + 8) = a3;
    v25[6] = 0;
    v69 = 1;
    v28 = (float)(unint64_t)(a4[3] + 1);
    v29 = *((float *)a4 + 8);
    if (!v22 || (float)(v29 * (float)v22) < v28)
    {
      v30 = (v22 & (v22 - 1)) != 0;
      if (v22 < 3)
        v30 = 1;
      v31 = v30 | (2 * v22);
      v32 = vcvtps_u32_f32(v28 / v29);
      if (v31 <= v32)
        prime = v32;
      else
        prime = v31;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v22 = a4[1];
      }
      if (prime > v22)
      {
LABEL_65:
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v34 = operator new(8 * prime);
        v35 = (void *)*a4;
        *a4 = (uint64_t)v34;
        if (v35)
          operator delete(v35);
        v36 = 0;
        a4[1] = prime;
        do
          *(_QWORD *)(*a4 + 8 * v36++) = 0;
        while (prime != v36);
        v37 = (_QWORD *)*v63;
        if (!*v63)
          goto LABEL_89;
        v38 = v37[1];
        v39 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v40 = v38 & v39;
          *(_QWORD *)(*a4 + 8 * v40) = v63;
          for (i = (_QWORD *)*v37; *v37; i = (_QWORD *)*v37)
          {
            v42 = i[1] & v39;
            if (v42 == v40)
            {
              v37 = i;
            }
            else if (*(_QWORD *)(*a4 + 8 * v42))
            {
              *v37 = *i;
              v43 = 8 * v42;
              *i = **(_QWORD **)(*a4 + v43);
              **(_QWORD **)(*a4 + v43) = i;
            }
            else
            {
              *(_QWORD *)(*a4 + 8 * v42) = v37;
              v37 = i;
              v40 = v42;
            }
          }
          goto LABEL_89;
        }
        if (v38 >= prime)
          v38 %= prime;
        *(_QWORD *)(*a4 + 8 * v38) = v63;
        v47 = (_QWORD *)*v37;
        if (!*v37)
        {
LABEL_89:
          v22 = prime;
          goto LABEL_90;
        }
        while (2)
        {
          v49 = v47[1];
          if (v49 >= prime)
            v49 %= prime;
          if (v49 != v38)
          {
            if (!*(_QWORD *)(*a4 + 8 * v49))
            {
              *(_QWORD *)(*a4 + 8 * v49) = v37;
LABEL_94:
              v37 = v47;
              v47 = (_QWORD *)*v47;
              v38 = v49;
              if (!v47)
                goto LABEL_89;
              continue;
            }
            *v37 = *v47;
            v48 = 8 * v49;
            *v47 = **(_QWORD **)(*a4 + v48);
            **(_QWORD **)(*a4 + v48) = v47;
            v47 = v37;
          }
          break;
        }
        v49 = v38;
        goto LABEL_94;
      }
      if (prime < v22)
      {
        v44 = vcvtps_u32_f32((float)(unint64_t)a4[3] / *((float *)a4 + 8));
        if (v22 < 3 || (v45 = (uint8x8_t)vcnt_s8((int8x8_t)v22), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
        {
          v44 = std::__next_prime(v44);
        }
        else
        {
          v46 = 1 << -(char)__clz(v44 - 1);
          if (v44 >= 2)
            v44 = v46;
        }
        if (prime <= v44)
          prime = v44;
        if (prime >= v22)
        {
          v22 = a4[1];
        }
        else
        {
          if (prime)
            goto LABEL_65;
          v61 = (void *)*a4;
          *a4 = 0;
          if (v61)
            operator delete(v61);
          v22 = 0;
          a4[1] = 0;
        }
      }
LABEL_90:
      if ((v22 & (v22 - 1)) != 0)
      {
        if (v22 <= v11)
          v14 = v11 % v22;
        else
          v14 = v11;
      }
      else
      {
        v14 = ((_DWORD)v22 - 1) & v11;
      }
    }
    v50 = *a4;
    v51 = *(_QWORD **)(*a4 + 8 * v14);
    if (v51)
    {
      *v25 = *v51;
      goto LABEL_111;
    }
    *v25 = *v63;
    *v63 = v25;
    *(_QWORD *)(v50 + 8 * v14) = v63;
    if (*v25)
    {
      v52 = *(_QWORD *)(*v25 + 8);
      if ((v22 & (v22 - 1)) != 0)
      {
        if (v52 >= v22)
          v52 %= v22;
      }
      else
      {
        v52 &= v22 - 1;
      }
      v51 = (_QWORD *)(*a4 + 8 * v52);
LABEL_111:
      *v51 = v25;
    }
    ++a4[3];
LABEL_113:
    v53 = (char *)(v25 + 3);
    v54 = (_QWORD *)v25[6];
    v25[6] = 0;
    v9 = a2;
    if (v54 == v25 + 3)
    {
      v54 = v25 + 3;
      v55 = 4;
LABEL_117:
      (*(void (**)(void))(*v54 + 8 * v55))();
    }
    else if (v54)
    {
      v55 = 5;
      goto LABEL_117;
    }
    if (v71)
    {
      if (v71 != v70)
      {
        v25[6] = v71;
        goto LABEL_127;
      }
      v25[6] = v53;
      (*(void (**)(_QWORD *, char *))(v70[0] + 24))(v70, v53);
      v56 = v71;
      if (v71 == v70)
      {
        v56 = v70;
        v57 = 4;
LABEL_126:
        (*(void (**)(void))(*v56 + 8 * v57))();
      }
      else if (v71)
      {
        v57 = 5;
        goto LABEL_126;
      }
    }
    else
    {
      v25[6] = 0;
    }
LABEL_127:
    v58 = __p[0];
    if (__p[0])
    {
      do
      {
        v59 = (_QWORD *)*v58;
        operator delete(v58);
        v58 = v59;
      }
      while (v59);
    }
    v60 = v64[0];
    v64[0] = 0;
    if (v60)
      operator delete(v60);
    if (++v5 != v6)
      continue;
    break;
  }
}

void sub_19FB1D750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v24;
  uint64_t v25;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&a17);
  v24 = a23;
  if (a23 == &a20)
  {
    v25 = 4;
    v24 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x64780CBD71DF7CF5;
    if (a2 <= 0x64780CBD71DF7CF5)
      v3 = 0x64780CBD71DF7CF5 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0x64780CBD71DF7CF5;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0x64780CBD71DF7CF5)
      {
        if (v6[2] == 0x64780CBD71DF7CF5)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0x64780CBD71DF7CF5)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0x64780CBD71DF7CF5)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0x64780CBD71DF7CF5)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0x479E84E48468DB70;
    if (a2 <= 0x479E84E48468DB70)
      v11 = 0x479E84E48468DB70 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0x479E84E48468DB70;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x479E84E48468DB70)
      {
        if (v13[2] == 0x479E84E48468DB70)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0x479E84E48468DB70)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0x479E84E48468DB70)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0x479E84E48468DB70)
    return v10;
  return v10;
}

void md::ResolvedTileSelectionContext::~ResolvedTileSelectionContext(md::ResolvedTileSelectionContext *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v4 = (_QWORD *)v2[6];
      if (v4 == v2 + 3)
      {
        v4 = v2 + 3;
        v5 = 4;
      }
      else
      {
        if (!v4)
          goto LABEL_7;
        v5 = 5;
      }
      (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_7:
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v3)
    operator delete(v3);
}

_QWORD *gdc::ManagedObjectHolder<md::ResolvedTileSelectionContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = &off_1E42B1450;
  v2 = a1[4];
  if (!v2)
    return a1;
  v3 = *(_QWORD **)(v2 + 16);
  if (v3)
  {
    do
    {
      v8 = (_QWORD *)*v3;
      v6 = (_QWORD *)v3[6];
      if (v6 == v3 + 3)
      {
        v6 = v3 + 3;
        v7 = 4;
      }
      else
      {
        if (!v6)
          goto LABEL_9;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_9:
      operator delete(v3);
      v3 = v8;
    }
    while (v8);
  }
  v4 = *(void **)v2;
  *(_QWORD *)v2 = 0;
  if (v4)
    operator delete(v4);
  MEMORY[0x1A1AF4E00](v2, 0x10A0C408EF24B1CLL);
  return a1;
}

void gdc::ManagedObjectHolder<md::ResolvedTileSelectionContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  *a1 = &off_1E42B1450;
  v1 = a1[4];
  if (!v1)
    goto LABEL_13;
  v2 = *(_QWORD **)(v1 + 16);
  if (!v2)
  {
LABEL_3:
    v3 = *(void **)v1;
    *(_QWORD *)v1 = 0;
    if (v3)
      operator delete(v3);
    MEMORY[0x1A1AF4E00](v1, 0x10A0C408EF24B1CLL);
LABEL_13:
    JUMPOUT(0x1A1AF4E00);
  }
  while (1)
  {
    v6 = (_QWORD *)*v2;
    v4 = (_QWORD *)v2[6];
    if (v4 == v2 + 3)
    {
      v4 = v2 + 3;
      v5 = 4;
    }
    else
    {
      if (!v4)
        goto LABEL_9;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_9:
    operator delete(v2);
    v2 = v6;
    if (!v6)
      goto LABEL_3;
  }
}

uint64_t gdc::ObjectHolder<md::ResolvedTileSelectionContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void sub_19FB1DC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB1DCF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB1DD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB1DDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB1DE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB1DED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB1DF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB1DFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB1E060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB1E170(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB1E180(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB1E3A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB1E5F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB1E684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB1E744(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::StyleLogic::~StyleLogic(md::StyleLogic *this)
{
  md::StyleLogic::~StyleLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  *(_QWORD *)this = &off_1E428BC38;
  v2 = (void *)*((_QWORD *)this + 148);
  if (v2)
  {
    objc_msgSend(v2, "stop");
    v3 = (void *)*((_QWORD *)this + 148);
    if (v3)
    {
      *((_QWORD *)this + 148) = 0;

    }
  }
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 1272);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 158);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 156);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 154);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 152);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *((_QWORD *)this + 147) = &off_1E42B4C90;

  *((_QWORD *)this + 144) = &off_1E42B4F10;
  v16 = (void *)*((_QWORD *)this + 141);
  if (v16)
  {
    *((_QWORD *)this + 142) = v16;
    operator delete(v16);
  }
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogic *)((char *)this + 928));
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogic *)((char *)this + 760));
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogic *)((char *)this + 592));
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogic *)((char *)this + 424));
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogic *)((char *)this + 256));
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (*((_BYTE *)this + 179))
    *((_BYTE *)this + 179) = 0;
  if (*((_BYTE *)this + 168))
    *((_BYTE *)this + 168) = 0;

  *((_QWORD *)this + 16) = &off_1E42B4D50;
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

void md::StyleLogic::prune(md::StyleLogic *this)
{
  uint64_t (**v2)();
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (**v5)();
  uint64_t (***v6)();
  uint64_t v7;
  _QWORD v8[3];
  uint64_t (***v9)();
  _QWORD v10[3];
  uint64_t (***v11)();
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = &off_1E42C8A20;
  v10[0] = &off_1E42C8A20;
  v11 = (uint64_t (***)())v10;
  if (!*((_QWORD *)this + 32))
  {
    md::StyleLogic::updateConfiguration(this, *((_DWORD *)this + 274));
    if (!v11)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_22;
    }
    v2 = *v11;
  }
  v2[6]();
  v3 = v11;
  if (v11 == v10)
  {
    v4 = 4;
    v3 = (uint64_t (***)())v10;
  }
  else
  {
    if (!v11)
      goto LABEL_9;
    v4 = 5;
  }
  (*v3)[v4]();
LABEL_9:
  v5 = &off_1E42C8A68;
  v8[0] = &off_1E42C8A68;
  v9 = (uint64_t (***)())v8;
  if (!*((_QWORD *)this + 34))
  {
    md::StyleLogic::updateConfiguration(this, *((_DWORD *)this + 274));
    if (!*((_QWORD *)this + 34))
      goto LABEL_14;
    if (v9)
    {
      v5 = *v9;
      goto LABEL_13;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_22:
    __break(1u);
    return;
  }
LABEL_13:
  v5[6]();
LABEL_14:
  v6 = v9;
  if (v9 == v8)
  {
    v7 = 4;
    v6 = (uint64_t (***)())v8;
  }
  else
  {
    if (!v9)
      return;
    v7 = 5;
  }
  (*v6)[v7]();
}

void sub_19FB1E8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void md::StyleLogic::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *ChildNode;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  const char *v16;
  uint64_t v17;
  double v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::ios_base *v25;
  uint64_t v26;
  uint64_t v27;
  std::ios_base *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  const char *v33;
  uint64_t v34;
  unsigned __int8 v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  void **p_dst;
  unint64_t v47;
  const void **v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  char v54;
  size_t v55;
  void *v56;
  const void **v57;
  unint64_t v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  geo::read_write_lock *v64;
  const char *v65;
  geo::read_write_lock *v66;
  const char *v67;
  unsigned int v68;
  char *v69;
  unsigned int v70;
  char *v71;
  int v72;
  unsigned int v73;
  std::string *v74;
  uint64_t v75;
  uint64_t data_low;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  void *v81[2];
  unint64_t v82;
  char v83[32];
  __int128 v84;
  unint64_t v85;
  int v86;
  void *v87[4];
  char v88[16];
  double v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  char v94[32];
  std::string v95;
  int v96;
  _QWORD v97[7];
  int v98;
  _QWORD v99[7];
  int v100;
  _QWORD v101[7];
  int v102;
  _QWORD v103[7];
  int v104;
  _BYTE v105[32];
  __int128 __p;
  uint64_t v107;
  int v108;
  void **__dst;
  char *v110;
  int64_t v111;
  std::string v112;
  _QWORD v113[3];
  uint64_t v114;
  unint64_t v115;
  __int128 v116;
  __int128 v117;
  int v118;
  uint64_t v119[19];
  std::string v120;
  _QWORD v121[3];
  uint64_t v122;
  unint64_t v123;
  __int128 v124;
  __int128 v125;
  int v126;
  uint64_t v127[22];

  md::LogicBase::createDebugNode(a1, a2);
  *((_BYTE *)&v120.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v120, "StyleManager");
  ChildNode = gdc::DebugTreeNode::createChildNode(a2, (__int128 *)&v120);
  v5 = *(_QWORD *)(a1 + 256);
  if (!v5)
    return;
  v6 = (uint64_t)ChildNode;
  *((_BYTE *)&v120.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v120, "Stylesheet Name");
  v7 = *(_QWORD *)(v5 + 16);
  v107 = 0;
  __p = 0uLL;
  v108 = 4;
  if (v105 != (_BYTE *)v7)
  {
    if (*(char *)(v7 + 55) < 0)
    {
      std::string::__assign_no_alias<true>(&__p, *(void **)(v7 + 32), *(_QWORD *)(v7 + 40));
    }
    else
    {
      v8 = *(_OWORD *)(v7 + 32);
      v107 = *(_QWORD *)(v7 + 48);
      __p = v8;
    }
  }
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)&v120, (uint64_t)v105);
  if (SHIBYTE(v107) < 0)
    operator delete((void *)__p);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 16) + 80);
  v10 = &v120;
  strcpy((char *)&v120, "Is from a Dev Resource");
  *((_BYTE *)&v120.__r_.__value_.__s + 23) = 22;
  v104 = 0;
  memset(&v103[4], 0, 24);
  v103[0] = v9;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)&v120, (uint64_t)v103);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 16);
  *((_BYTE *)&v120.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&v120, "Supports Night Mode");
  v12 = atomic_load((unsigned __int8 *)(v11 + 2784));
  if ((v12 & 1) == 0)
    std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v11 + 2808));
  v13 = *(unsigned __int8 *)(v11 + 136);
  v102 = 0;
  memset(&v101[4], 0, 24);
  v101[0] = v13;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)&v120, (uint64_t)v101);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
  *((_BYTE *)&v120.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v120, "Is Finished Decoding");
  v14 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 16) + 2786));
  v100 = 0;
  memset(&v99[4], 0, 24);
  v99[0] = v14 & 1;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)&v120, (uint64_t)v99);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
  *((_BYTE *)&v120.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v120, "Is Valid");
  v15 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 16) + 2787));
  v98 = 0;
  memset(&v97[4], 0, 24);
  v97[0] = v15 & 1;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)&v120, (uint64_t)v97);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
  *((_BYTE *)&v120.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v120, "Target Display");
  v16 = gss::to_string(*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 16) + 60));
  memset(&v95, 0, sizeof(v95));
  v96 = 4;
  if (v16)
  {
    std::string::__assign_external(&v95, v16);
  }
  else
  {
    *((_BYTE *)&v95.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v95, "<null>");
  }
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)&v120, (uint64_t)v94);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  v17 = *(_QWORD *)(a1 + 208);
  *((_BYTE *)&v120.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v120, "Blending Factor");
  v18 = *(float *)(v17 + 256);
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 2;
  v89 = v18;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)&v120, (uint64_t)v88);
  v19 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 16) + 2787));
  if ((v19 & 1) == 0)
  {
    HIBYTE(v87[2]) = 17;
    strcpy((char *)v87, "Stylesheet Detail");
    v20 = *(_QWORD *)(a1 + 256);
    v21 = MEMORY[0x1E0DE4FE0];
    v22 = MEMORY[0x1E0DE4FE0] + 64;
    v10 = (std::string *)MEMORY[0x1E0DE4F60];
    v23 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v24 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v119[0] = MEMORY[0x1E0DE4FE0] + 64;
    v112.__r_.__value_.__r.__words[0] = v23;
    *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + *(_QWORD *)(v23 - 24)) = v24;
    v25 = (std::ios_base *)((char *)&v112 + *(_QWORD *)(v112.__r_.__value_.__r.__words[0] - 24));
    std::ios_base::init(v25, &v112.__r_.__value_.__r.__words[1]);
    v25[1].__vftable = 0;
    v25[1].__fmtflags_ = -1;
    v112.__r_.__value_.__r.__words[0] = v21 + 24;
    v119[0] = v22;
    std::streambuf::basic_streambuf();
    v26 = MEMORY[0x1E0DE4FB8];
    v112.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
    v116 = 0u;
    v117 = 0u;
    v118 = 16;
    if (!*(_QWORD *)(v20 + 16))
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v112, (uint64_t)"  No stylesheet\n", 16);
      goto LABEL_83;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v112, (uint64_t)"  Stylesheet:\n", 14);
    v27 = *(_QWORD *)(v20 + 16);
    v127[0] = v21 + 64;
    v120.__r_.__value_.__r.__words[0] = v23;
    *(std::string::size_type *)((char *)v120.__r_.__value_.__r.__words + *(_QWORD *)(v23 - 24)) = v24;
    v28 = (std::ios_base *)((char *)&v120 + *(_QWORD *)(v120.__r_.__value_.__r.__words[0] - 24));
    std::ios_base::init(v28, &v120.__r_.__value_.__r.__words[1]);
    v28[1].__vftable = 0;
    v28[1].__fmtflags_ = -1;
    v120.__r_.__value_.__r.__words[0] = v21 + 24;
    v127[0] = v21 + 64;
    std::streambuf::basic_streambuf();
    v120.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
    v124 = 0u;
    v125 = 0u;
    v126 = 16;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"    Name: ", 10);
    v29 = *(char *)(v27 + 55);
    if (v29 >= 0)
      v30 = v27 + 32;
    else
      v30 = *(_QWORD *)(v27 + 32);
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(v27 + 55);
    else
      v31 = *(_QWORD *)(v27 + 40);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, v30, v31);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"    Finished decoding: ", 23);
    v32 = atomic_load((unsigned __int8 *)(v27 + 2786));
    if ((v32 & 1) != 0)
      v33 = "yes";
    else
      v33 = "no";
    if ((v32 & 1) != 0)
      v34 = 3;
    else
      v34 = 2;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)v33, v34);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"    Valid: ", 11);
    v35 = atomic_load((unsigned __int8 *)(v27 + 2787));
    if ((v35 & 1) != 0)
      v36 = "yes";
    else
      v36 = "no";
    if ((v35 & 1) != 0)
      v37 = 3;
    else
      v37 = 2;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)v36, v37);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"    Loaded from dev resources: ", 31);
    if (*(_BYTE *)(v27 + 80))
      v38 = "yes";
    else
      v38 = "no";
    if (*(_BYTE *)(v27 + 80))
      v39 = 3;
    else
      v39 = 2;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)v38, v39);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"\n", 1);
    v40 = atomic_load((unsigned __int8 *)(v27 + 2787));
    if ((v40 & 1) == 0)
    {
      v41 = *(unsigned __int8 *)(v27 + 2999);
      if ((v41 & 0x80u) != 0)
        v41 = *(_QWORD *)(v27 + 2984);
      if (v41)
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, (uint64_t)"    Decode errors:\n", 19);
        v42 = *(char *)(v27 + 2999);
        if (v42 >= 0)
          v43 = v27 + 2976;
        else
          v43 = *(_QWORD *)(v27 + 2976);
        if (v42 >= 0)
          v44 = *(unsigned __int8 *)(v27 + 2999);
        else
          v44 = *(_QWORD *)(v27 + 2984);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v120, v43, v44);
      }
    }
    if ((v126 & 0x10) != 0)
    {
      v47 = *((_QWORD *)&v125 + 1);
      if (*((_QWORD *)&v125 + 1) < v123)
      {
        *((_QWORD *)&v125 + 1) = v123;
        v47 = v123;
      }
      v48 = (const void **)&v122;
    }
    else
    {
      if ((v126 & 8) == 0)
      {
        v45 = 0;
        HIBYTE(v111) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_74;
      }
      v48 = (const void **)v121;
      v47 = v121[2];
    }
    v49 = *v48;
    v45 = v47 - (_QWORD)*v48;
    if (v45 > 0x7FFFFFFFFFFFFFF7)
      abort();
    if (v45 >= 0x17)
    {
      v50 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v45 | 7) != 0x17)
        v50 = v45 | 7;
      v51 = v50 + 1;
      p_dst = (void **)operator new(v50 + 1);
      v111 = v51 | 0x8000000000000000;
      __dst = p_dst;
      v110 = (char *)v45;
    }
    else
    {
      HIBYTE(v111) = v47 - *(_BYTE *)v48;
      p_dst = (void **)&__dst;
      if (!v45)
      {
LABEL_74:
        *((_BYTE *)p_dst + v45) = 0;
        v120.__r_.__value_.__r.__words[0] = v10->__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)v120.__r_.__value_.__r.__words
                                  + *(_QWORD *)(v120.__r_.__value_.__r.__words[0] - 24)) = v10[1].__r_.__value_.__r.__words[0];
        v26 = MEMORY[0x1E0DE4FB8];
        v120.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
        if (SBYTE7(v125) < 0)
          operator delete((void *)v124);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1A1AF4D64](v127);
        if (v111 >= 0)
          v52 = (void **)&__dst;
        else
          v52 = __dst;
        if (v111 >= 0)
          v53 = HIBYTE(v111);
        else
          v53 = (uint64_t)v110;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v112, (uint64_t)v52, v53);
        if (SHIBYTE(v111) < 0)
        {
          operator delete(__dst);
          v54 = v118;
          if ((v118 & 0x10) == 0)
            goto LABEL_84;
          goto LABEL_88;
        }
LABEL_83:
        v54 = v118;
        if ((v118 & 0x10) == 0)
        {
LABEL_84:
          if ((v54 & 8) == 0)
          {
            v55 = 0;
            HIBYTE(v82) = 0;
            v56 = v81;
            goto LABEL_99;
          }
          v57 = (const void **)v113;
          v58 = v113[2];
LABEL_91:
          v59 = *v57;
          v55 = v58 - (_QWORD)*v57;
          if (v55 > 0x7FFFFFFFFFFFFFF7)
            abort();
          if (v55 >= 0x17)
          {
            v60 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v55 | 7) != 0x17)
              v60 = v55 | 7;
            v61 = v60 + 1;
            v56 = operator new(v60 + 1);
            v81[1] = (void *)v55;
            v82 = v61 | 0x8000000000000000;
            v81[0] = v56;
          }
          else
          {
            HIBYTE(v82) = v58 - *(_BYTE *)v57;
            v56 = v81;
            if (!v55)
            {
LABEL_99:
              *((_BYTE *)v56 + v55) = 0;
              v112.__r_.__value_.__r.__words[0] = v10->__r_.__value_.__r.__words[0];
              *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words
                                        + *(_QWORD *)(v112.__r_.__value_.__r.__words[0] - 24)) = v10[1].__r_.__value_.__r.__words[0];
              v112.__r_.__value_.__l.__size_ = v26 + 16;
              if (SBYTE7(v117) < 0)
                operator delete((void *)v116);
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x1A1AF4D64](v119);
              v85 = 0;
              v84 = 0uLL;
              v86 = 4;
              v62 = SHIBYTE(v82);
              if (SHIBYTE(v82) < 0)
              {
                std::string::__assign_no_alias<true>(&v84, v81[0], (size_t)v81[1]);
              }
              else
              {
                v84 = *(_OWORD *)v81;
                v85 = v82;
              }
              gdc::DebugTreeNode::addProperty(v6, (uint64_t)v87, (uint64_t)v83);
              if (SHIBYTE(v85) < 0)
              {
                operator delete((void *)v84);
                if ((v62 & 0x80000000) == 0)
                {
LABEL_106:
                  if ((SHIBYTE(v87[2]) & 0x80000000) == 0)
                    goto LABEL_107;
LABEL_134:
                  operator delete(v87[0]);
                  goto LABEL_107;
                }
              }
              else if ((v62 & 0x80000000) == 0)
              {
                goto LABEL_106;
              }
              operator delete(v81[0]);
              if ((SHIBYTE(v87[2]) & 0x80000000) == 0)
                goto LABEL_107;
              goto LABEL_134;
            }
          }
          memmove(v56, v59, v55);
          goto LABEL_99;
        }
LABEL_88:
        v58 = *((_QWORD *)&v117 + 1);
        if (*((_QWORD *)&v117 + 1) < v115)
        {
          *((_QWORD *)&v117 + 1) = v115;
          v58 = v115;
        }
        v57 = (const void **)&v114;
        goto LABEL_91;
      }
    }
    memmove(p_dst, v49, v45);
    goto LABEL_74;
  }
LABEL_107:
  *((_BYTE *)&v120.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&v120, "Client Attributes");
  v79 = gdc::DebugTreeNode::createChildNode(v6, (__int128 *)&v120);
  v63 = *(_QWORD *)(a1 + 208);
  v120.__r_.__value_.__r.__words[0] = v63 + 16;
  v64 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v63 + 16));
  if ((_DWORD)v64)
    geo::read_write_lock::logFailure(v64, (uint64_t)"read lock", v65);
  *(void **)((char *)v87 + 7) = 0;
  v87[0] = 0;
  HIBYTE(v87[1]) = 1;
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(v87, v63 + 216);
  v66 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v63 + 16));
  if ((_DWORD)v66)
    geo::read_write_lock::logFailure(v66, (uint64_t)"unlock", v67);
  v68 = WORD1(v87[1]);
  v80 = (char *)v87[0];
  if (WORD1(v87[1]))
  {
    v69 = 0;
    v70 = 0;
    v71 = (char *)v87[0] + LOWORD(v87[1]);
    v72 = 1;
    do
    {
      if (v70 < v68)
      {
        v69 = &v80[4 * v70];
        v10 = (std::string *)&v71[2 * v70];
      }
      std::to_string(&v112, v72);
      v74 = std::string::insert(&v112, 0, "Attribute: ", 0xBuLL);
      v120 = *v74;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      v75 = *(unsigned int *)v69;
      data_low = LOWORD(v10->__r_.__value_.__l.__data_);
      v110 = 0;
      v77 = (char *)operator new(0x80uLL);
      v111 = (int64_t)(v77 + 128);
      *((_QWORD *)v77 + 1) = v75;
      *((_QWORD *)v77 + 5) = 0;
      *((_QWORD *)v77 + 6) = 0;
      *((_QWORD *)v77 + 4) = 0;
      *((_DWORD *)v77 + 14) = 1;
      *((_QWORD *)v77 + 12) = 0;
      *((_QWORD *)v77 + 9) = data_low;
      *((_QWORD *)v77 + 13) = 0;
      *((_QWORD *)v77 + 14) = 0;
      *((_DWORD *)v77 + 30) = 1;
      __dst = (void **)v77;
      v110 = v77 + 128;
      gdc::DebugTreeNode::addProperty((uint64_t)v79, (uint64_t)&v120, (uint64_t *)&__dst);
      if (v77[119] < 0)
      {
        operator delete(*((void **)v77 + 12));
        if ((v77[55] & 0x80000000) == 0)
          goto LABEL_121;
      }
      else if ((v77[55] & 0x80000000) == 0)
      {
        goto LABEL_121;
      }
      operator delete(*((void **)v77 + 4));
LABEL_121:
      operator delete(v77);
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v120.__r_.__value_.__l.__data_);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
LABEL_127:
          operator delete(v112.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_127;
      }
      v73 = v70 + 1;
      ++v72;
      if (v70 + 1 < v68)
        ++v70;
      else
        v70 = v68;
    }
    while (v73 < v68);
  }
  if (!BYTE6(v87[1]))
  {
    if (v80)
    {
      v78 = gss::Allocator::instance(v66);
      (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)v78 + 40))(v78, v80, WORD2(v87[1]));
    }
  }
}

void sub_19FB1F508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, gdc::DebugTreeNode *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x268]);
  if (a28 < 0)
    operator delete(a23);
  gdc::DebugTreeNode::~DebugTreeNode(a9);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::StyleLogic,md::StyleLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _BYTE v4[2];

  if (*(_QWORD *)(a3 + 8) == 0xE42D19AFCA302E68 && *(_QWORD *)(a3 + 32))
    return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 160))(result, a2, v4);
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t md::Logic<md::StyleLogic,md::StyleLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t md::StyleLogic::debugConsoleString@<X0>(uint64_t a1@<X3>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  gss::Allocator *v6;
  void **v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  const void **v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v19;
  _QWORD v20[2];
  _QWORD v21[3];
  _QWORD v22[3];
  uint64_t v23;
  unint64_t v24;
  void *v25;
  char v26;
  unint64_t v27;
  int v28;
  uint64_t v29;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v20);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = (gss::Allocator *)(a1 + 120);
  if (v4 != v5)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"Client Style Attributes:[\n", 26);
    gss::attributesToString(v6, 1, "\t", 0, __p);
    if ((v19 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v19 & 0x80u) == 0)
      v8 = v19;
    else
      v8 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)v7, v8);
    if ((char)v19 < 0)
      operator delete(__p[0]);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"]\n", 2);
  }
  if ((v28 & 0x10) != 0)
  {
    v10 = v27;
    if (v27 < v24)
    {
      v27 = v24;
      v10 = v24;
    }
    v11 = (const void **)&v23;
  }
  else
  {
    if ((v28 & 8) == 0)
    {
      v9 = 0;
      a2[23] = 0;
      goto LABEL_26;
    }
    v11 = (const void **)v22;
    v10 = v22[2];
  }
  v12 = *v11;
  v9 = v10 - (_QWORD)*v11;
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v9 >= 0x17)
  {
    v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v13 = v9 | 7;
    v14 = v13 + 1;
    v15 = operator new(v13 + 1);
    *((_QWORD *)a2 + 1) = v9;
    *((_QWORD *)a2 + 2) = v14 | 0x8000000000000000;
    *(_QWORD *)a2 = v15;
    a2 = v15;
    goto LABEL_25;
  }
  a2[23] = v9;
  if (v9)
LABEL_25:
    memmove(a2, v12, v9);
LABEL_26:
  a2[v9] = 0;
  v20[0] = *MEMORY[0x1E0DE4F50];
  v16 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v21[0] = v16;
  v21[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v26 < 0)
    operator delete(v25);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v29);
}

void sub_19FB1F864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

unsigned int *_ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEELb0EEEvT1_SO_T0_NS_15iterator_traitsISO_E15difference_typeEb(unsigned int *result, unsigned int *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  __int16 v17;
  unsigned int v18;
  unsigned int v19;
  __int16 *v20;
  __int16 v21;
  unint64_t v22;
  _WORD *v23;
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  __int16 v27;
  unsigned int v28;
  unint64_t v29;
  __int16 v30;
  __int16 v31;
  _WORD *v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  __int16 v38;
  unint64_t v39;
  _WORD *v40;
  __int16 v41;
  unsigned int v42;
  __int16 v43;
  unint64_t v44;
  _WORD *v45;
  __int16 v46;
  __int16 v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  __int16 v54;
  unint64_t v55;
  _WORD *v56;
  __int16 v57;
  unsigned int v58;
  __int16 v59;
  unint64_t v60;
  _WORD *v61;
  __int16 v62;
  __int16 v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  __int16 *v68;
  unint64_t v69;
  __int16 v70;
  unint64_t v71;
  _WORD *v72;
  unsigned int v73;
  unint64_t v74;
  __int16 v75;
  unint64_t v76;
  __int16 v77;
  unint64_t v78;
  _WORD *v79;
  __int16 v80;
  __int16 v81;
  unint64_t v82;
  unsigned int v83;
  unint64_t v84;
  __int16 v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int *v95;
  __int16 v96;
  unsigned int v97;
  unsigned int v98;
  BOOL v99;
  uint64_t v100;
  unsigned int v101;
  unint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  __int16 v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  __int16 v114;
  unsigned int v115;
  __int16 v116;
  unsigned int v117;
  unsigned int v118;
  __int16 v119;
  __int16 v120;
  unsigned int v121;
  __int16 v122;
  unsigned int v123;
  __int16 v124;
  unsigned int *v125;
  BOOL v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int64_t v136;
  int64_t v137;
  BOOL v138;
  uint64_t v139;
  unint64_t v140;
  unsigned int v141;
  BOOL v142;
  unint64_t v143;
  uint64_t v144;
  unsigned int v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  __int16 v162;
  unsigned int v163;
  unsigned int v164;
  _WORD *v165;
  unsigned int v166;
  unsigned int v167;
  uint64_t v168;
  _WORD *v169;
  _WORD *v170;
  __int16 v171;
  __int16 v172;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = a2 - 2;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (uint64_t)a2 - v9;
    v11 = (uint64_t)((uint64_t)a2 - v9) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v110 = *(_DWORD *)v9;
        if (*v8 < *(_DWORD *)v9)
        {
          *(_DWORD *)v9 = *v8;
          *(a2 - 2) = v110;
          goto LABEL_103;
        }
        return result;
      case 3:
        v111 = *(_DWORD *)(v9 + 8);
        v112 = *(_DWORD *)v9;
        v113 = *v8;
        if (v111 >= *(_DWORD *)v9)
        {
          if (v113 < v111)
          {
            *(_DWORD *)(v9 + 8) = v113;
            *(a2 - 2) = v111;
            v162 = *(_WORD *)(v9 + 12);
            *(_WORD *)(v9 + 12) = *((_WORD *)a2 - 2);
            *((_WORD *)a2 - 2) = v162;
            v163 = *(_DWORD *)(v9 + 8);
            v164 = *(_DWORD *)v9;
            if (v163 < *(_DWORD *)v9)
            {
              *(_DWORD *)v9 = v163;
              *(_DWORD *)(v9 + 8) = v164;
              v124 = *(_WORD *)(v9 + 4);
              v120 = *(_WORD *)(v9 + 12);
              goto LABEL_173;
            }
          }
        }
        else if (v113 >= v111)
        {
          *(_DWORD *)v9 = v111;
          *(_DWORD *)(v9 + 8) = v112;
          v172 = *(_WORD *)(v9 + 4);
          *(_WORD *)(v9 + 4) = *(_WORD *)(v9 + 12);
          *(_WORD *)(v9 + 12) = v172;
          if (*v8 < v112)
          {
            *(_DWORD *)(v9 + 8) = *v8;
            *(a2 - 2) = v112;
            *(_WORD *)(v9 + 12) = *((_WORD *)a2 - 2);
            *((_WORD *)a2 - 2) = v172;
          }
        }
        else
        {
          *(_DWORD *)v9 = v113;
          *(a2 - 2) = v112;
LABEL_103:
          v114 = *(_WORD *)(v9 + 4);
          *(_WORD *)(v9 + 4) = *((_WORD *)a2 - 2);
          *((_WORD *)a2 - 2) = v114;
        }
        return result;
      case 4:
        return _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEEEEvT1_SO_SO_SO_T0_((unsigned int *)v9, (unsigned int *)(v9 + 8), (unsigned int *)(v9 + 16), a2 - 2);
      case 5:
        result = _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEEEEvT1_SO_SO_SO_T0_((unsigned int *)v9, (unsigned int *)(v9 + 8), (unsigned int *)(v9 + 16), (unsigned int *)(v9 + 24));
        v115 = *(_DWORD *)(v9 + 24);
        if (*v8 < v115)
        {
          *(_DWORD *)(v9 + 24) = *v8;
          *(a2 - 2) = v115;
          v116 = *(_WORD *)(v9 + 28);
          *(_WORD *)(v9 + 28) = *((_WORD *)a2 - 2);
          *((_WORD *)a2 - 2) = v116;
          v117 = *(_DWORD *)(v9 + 24);
          v118 = *(_DWORD *)(v9 + 16);
          if (v117 < v118)
          {
            *(_DWORD *)(v9 + 16) = v117;
            *(_DWORD *)(v9 + 24) = v118;
            v119 = *(_WORD *)(v9 + 20);
            v120 = *(_WORD *)(v9 + 28);
            *(_WORD *)(v9 + 20) = v120;
            *(_WORD *)(v9 + 28) = v119;
            v121 = *(_DWORD *)(v9 + 8);
            if (v117 < v121)
            {
              *(_DWORD *)(v9 + 8) = v117;
              *(_DWORD *)(v9 + 16) = v121;
              v122 = *(_WORD *)(v9 + 12);
              *(_WORD *)(v9 + 12) = v120;
              *(_WORD *)(v9 + 20) = v122;
              v123 = *(_DWORD *)v9;
              if (v117 < *(_DWORD *)v9)
              {
                *(_DWORD *)v9 = v117;
                *(_DWORD *)(v9 + 8) = v123;
                v124 = *(_WORD *)(v9 + 4);
LABEL_173:
                *(_WORD *)(v9 + 4) = v120;
                *(_WORD *)(v9 + 12) = v124;
              }
            }
          }
        }
        return result;
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if ((unsigned int *)v9 != a2)
            {
              v136 = (unint64_t)(v11 - 2) >> 1;
              v137 = v136;
              do
              {
                if (v136 >= v137)
                {
                  v139 = (2 * v137) | 1;
                  v140 = v9 + 8 * v139;
                  if (2 * v137 + 2 >= v11)
                  {
                    v141 = *(_DWORD *)v140;
                  }
                  else
                  {
                    v141 = *(_DWORD *)(v140 + 8);
                    v142 = *(_DWORD *)v140 >= v141;
                    if (*(_DWORD *)v140 > v141)
                      v141 = *(_DWORD *)v140;
                    if (!v142)
                    {
                      v140 += 8;
                      v139 = 2 * v137 + 2;
                    }
                  }
                  v143 = v9 + 8 * v137;
                  if (v141 >= *(_DWORD *)v143)
                  {
                    v144 = *(_QWORD *)v143;
                    while (1)
                    {
                      v146 = v143;
                      v143 = v140;
                      *(_DWORD *)v146 = v141;
                      *(_WORD *)(v146 + 4) = *(_WORD *)(v140 + 4);
                      if (v136 < v139)
                        break;
                      v147 = (2 * v139) | 1;
                      v140 = v9 + 8 * v147;
                      v139 = 2 * v139 + 2;
                      if (v139 < v11)
                      {
                        v141 = *(_DWORD *)v140;
                        result = (unsigned int *)(v140 + 8);
                        v145 = *(_DWORD *)(v140 + 8);
                        if (*(_DWORD *)v140 <= v145)
                          v141 = *(_DWORD *)(v140 + 8);
                        if (*(_DWORD *)v140 >= v145)
                          v139 = v147;
                        else
                          v140 += 8;
                        if (v141 < v144)
                          break;
                      }
                      else
                      {
                        v141 = *(_DWORD *)v140;
                        v139 = v147;
                        if (*(_DWORD *)v140 < v144)
                          break;
                      }
                    }
                    *(_DWORD *)v143 = v144;
                    *(_WORD *)(v143 + 4) = WORD2(v144);
                  }
                }
                v138 = v137-- <= 0;
              }
              while (!v138);
              v148 = (unint64_t)v10 >> 3;
              do
              {
                v149 = 0;
                v150 = *(_QWORD *)v9;
                v151 = v9;
                do
                {
                  v154 = v151 + 8 * v149 + 8;
                  v155 = (2 * v149) | 1;
                  v149 = 2 * v149 + 2;
                  if (v149 < v148)
                  {
                    v152 = *(_DWORD *)v154;
                    v153 = *(_DWORD *)(v154 + 8);
                    if (*(_DWORD *)v154 <= v153)
                      v152 = *(_DWORD *)(v154 + 8);
                    if (*(_DWORD *)v154 >= v153)
                      v149 = v155;
                    else
                      v154 += 8;
                  }
                  else
                  {
                    v152 = *(_DWORD *)v154;
                    v149 = v155;
                  }
                  *(_DWORD *)v151 = v152;
                  *(_WORD *)(v151 + 4) = *(_WORD *)(v154 + 4);
                  v151 = v154;
                }
                while (v149 <= (uint64_t)((unint64_t)(v148 - 2) >> 1));
                if ((unsigned int *)v154 == a2 - 2)
                {
                  *(_DWORD *)v154 = v150;
                  *(_WORD *)(v154 + 4) = WORD2(v150);
                }
                else
                {
                  *(_DWORD *)v154 = *(a2 - 2);
                  *(_WORD *)(v154 + 4) = *((_WORD *)a2 - 2);
                  *(a2 - 2) = v150;
                  *((_WORD *)a2 - 2) = WORD2(v150);
                  v156 = v154 - v9 + 8;
                  if (v156 >= 9)
                  {
                    v157 = (((unint64_t)v156 >> 3) - 2) >> 1;
                    v158 = v9 + 8 * v157;
                    v159 = *(_DWORD *)v158;
                    if (*(_DWORD *)v158 < *(_DWORD *)v154)
                    {
                      v160 = *(_QWORD *)v154;
                      do
                      {
                        v161 = v154;
                        v154 = v158;
                        *(_DWORD *)v161 = v159;
                        *(_WORD *)(v161 + 4) = *(_WORD *)(v158 + 4);
                        if (!v157)
                          break;
                        v157 = (v157 - 1) >> 1;
                        v158 = v9 + 8 * v157;
                        v159 = *(_DWORD *)v158;
                      }
                      while (*(_DWORD *)v158 < v160);
                      *(_DWORD *)v154 = v160;
                      *(_WORD *)(v154 + 4) = WORD2(v160);
                    }
                  }
                }
                a2 -= 2;
                v138 = v148-- <= 2;
              }
              while (!v138);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = (unsigned int *)(v9 + 8 * ((unint64_t)v11 >> 1));
          v14 = *v8;
          if ((unint64_t)v10 < 0x401)
          {
            v18 = *(_DWORD *)v9;
            v19 = *v13;
            if (*(_DWORD *)v9 >= *v13)
            {
              if (v14 < v18)
              {
                *(_DWORD *)v9 = v14;
                *(a2 - 2) = v18;
                v27 = *(_WORD *)(v9 + 4);
                *(_WORD *)(v9 + 4) = *((_WORD *)a2 - 2);
                *((_WORD *)a2 - 2) = v27;
                v28 = *v13;
                if (*(_DWORD *)v9 < *v13)
                {
                  *v13 = *(_DWORD *)v9;
                  *(_DWORD *)v9 = v28;
                  v29 = v9 + 8 * v12;
                  v30 = *(_WORD *)(v29 + 4);
                  *(_WORD *)(v29 + 4) = *(_WORD *)(v9 + 4);
                  *(_WORD *)(v9 + 4) = v30;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
              goto LABEL_31;
            }
            v20 = (__int16 *)(v9 + 8 * v12 + 4);
            if (v14 >= v18)
            {
              *v13 = v18;
              *(_DWORD *)v9 = v19;
              v21 = *v20;
              *v20 = *(_WORD *)(v9 + 4);
              *(_WORD *)(v9 + 4) = v21;
              if (*v8 >= v19)
                goto LABEL_31;
              *(_DWORD *)v9 = *v8;
              *(a2 - 2) = v19;
              *(_WORD *)(v9 + 4) = *((_WORD *)a2 - 2);
            }
            else
            {
              *v13 = v14;
              *(a2 - 2) = v19;
              v21 = *v20;
              *v20 = *((_WORD *)a2 - 2);
            }
            *((_WORD *)a2 - 2) = v21;
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v15 = *v13;
          v16 = *(_DWORD *)v9;
          if (*v13 >= *(_DWORD *)v9)
          {
            if (v14 < v15)
            {
              *v13 = v14;
              *(a2 - 2) = v15;
              v22 = v9 + 8 * v12;
              v24 = *(_WORD *)(v22 + 4);
              v23 = (_WORD *)(v22 + 4);
              *v23 = *((_WORD *)a2 - 2);
              *((_WORD *)a2 - 2) = v24;
              v25 = *(_DWORD *)v9;
              if (*v13 < *(_DWORD *)v9)
              {
                *(_DWORD *)v9 = *v13;
                *v13 = v25;
                v26 = *(_WORD *)(v9 + 4);
                *(_WORD *)(v9 + 4) = *v23;
                *v23 = v26;
              }
            }
          }
          else if (v14 >= v15)
          {
            *(_DWORD *)v9 = v15;
            *v13 = v16;
            v31 = *(_WORD *)(v9 + 4);
            v32 = (_WORD *)(v9 + 4 + 8 * v12);
            *(_WORD *)(v9 + 4) = *v32;
            *v32 = v31;
            if (*v8 < v16)
            {
              *v13 = *v8;
              *(a2 - 2) = v16;
              *v32 = *((_WORD *)a2 - 2);
              *((_WORD *)a2 - 2) = v31;
            }
          }
          else
          {
            *(_DWORD *)v9 = v14;
            *(a2 - 2) = v16;
            v17 = *(_WORD *)(v9 + 4);
            *(_WORD *)(v9 + 4) = *((_WORD *)a2 - 2);
            *((_WORD *)a2 - 2) = v17;
          }
          v33 = v12 - 1;
          v34 = (unsigned int *)(v9 + 8 * (v12 - 1));
          v35 = *v34;
          v36 = *(_DWORD *)(v9 + 8);
          v37 = *(a2 - 4);
          if (*v34 >= v36)
          {
            if (v37 < v35)
            {
              *v34 = v37;
              *(a2 - 4) = v35;
              v39 = v9 + 8 * v33;
              v41 = *(_WORD *)(v39 + 4);
              v40 = (_WORD *)(v39 + 4);
              *v40 = *((_WORD *)a2 - 6);
              *((_WORD *)a2 - 6) = v41;
              v42 = *(_DWORD *)(v9 + 8);
              if (*v34 < v42)
              {
                *(_DWORD *)(v9 + 8) = *v34;
                *v34 = v42;
                v43 = *(_WORD *)(v9 + 12);
                *(_WORD *)(v9 + 12) = *v40;
                *v40 = v43;
              }
            }
          }
          else if (v37 >= v35)
          {
            *(_DWORD *)(v9 + 8) = v35;
            v44 = v9 + 8 * v33;
            v46 = *(_WORD *)(v44 + 4);
            v45 = (_WORD *)(v44 + 4);
            *v34 = v36;
            v47 = *(_WORD *)(v9 + 12);
            *(_WORD *)(v9 + 12) = v46;
            *v45 = v47;
            v48 = *(a2 - 4);
            if (v48 < v36)
            {
              *v34 = v48;
              *(a2 - 4) = v36;
              *v45 = *((_WORD *)a2 - 6);
              *((_WORD *)a2 - 6) = v47;
            }
          }
          else
          {
            *(_DWORD *)(v9 + 8) = v37;
            *(a2 - 4) = v36;
            v38 = *(_WORD *)(v9 + 12);
            *(_WORD *)(v9 + 12) = *((_WORD *)a2 - 6);
            *((_WORD *)a2 - 6) = v38;
          }
          v49 = v12 + 1;
          v50 = (unsigned int *)(v9 + 8 * (v12 + 1));
          v51 = *v50;
          v52 = *(_DWORD *)(v9 + 16);
          v53 = *(a2 - 6);
          if (*v50 >= v52)
          {
            if (v53 < v51)
            {
              *v50 = v53;
              *(a2 - 6) = v51;
              v55 = v9 + 8 * v49;
              v57 = *(_WORD *)(v55 + 4);
              v56 = (_WORD *)(v55 + 4);
              *v56 = *((_WORD *)a2 - 10);
              *((_WORD *)a2 - 10) = v57;
              v58 = *(_DWORD *)(v9 + 16);
              if (*v50 < v58)
              {
                *(_DWORD *)(v9 + 16) = *v50;
                *v50 = v58;
                v59 = *(_WORD *)(v9 + 20);
                *(_WORD *)(v9 + 20) = *v56;
                *v56 = v59;
              }
            }
          }
          else if (v53 >= v51)
          {
            *(_DWORD *)(v9 + 16) = v51;
            v60 = v9 + 8 * v49;
            v62 = *(_WORD *)(v60 + 4);
            v61 = (_WORD *)(v60 + 4);
            *v50 = v52;
            v63 = *(_WORD *)(v9 + 20);
            *(_WORD *)(v9 + 20) = v62;
            *v61 = v63;
            v64 = *(a2 - 6);
            if (v64 < v52)
            {
              *v50 = v64;
              *(a2 - 6) = v52;
              *v61 = *((_WORD *)a2 - 10);
              *((_WORD *)a2 - 10) = v63;
            }
          }
          else
          {
            *(_DWORD *)(v9 + 16) = v53;
            *(a2 - 6) = v52;
            v54 = *(_WORD *)(v9 + 20);
            *(_WORD *)(v9 + 20) = *((_WORD *)a2 - 10);
            *((_WORD *)a2 - 10) = v54;
          }
          v65 = *v13;
          v66 = *v34;
          v67 = *v50;
          if (*v13 >= *v34)
          {
            if (v67 >= v65)
              goto LABEL_49;
            *v13 = v67;
            v71 = v9 + 8 * v12;
            v73 = *(unsigned __int16 *)(v71 + 4);
            v72 = (_WORD *)(v71 + 4);
            result = (unsigned int *)v73;
            *v50 = v65;
            v74 = v9 + 8 * v49;
            v75 = *(_WORD *)(v74 + 4);
            *v72 = v75;
            *(_WORD *)(v74 + 4) = v73;
            if (v67 < v66)
            {
              *v34 = v67;
              *v13 = v66;
              v76 = v9 + 8 * v33;
              v77 = *(_WORD *)(v76 + 4);
              *(_WORD *)(v76 + 4) = v75;
              *v72 = v77;
              goto LABEL_53;
            }
            goto LABEL_52;
          }
          v68 = (__int16 *)(v9 + 8 * v33 + 4);
          if (v67 < v65)
          {
            *v34 = v67;
            *v50 = v66;
            v69 = v9 + 8 * v49;
            v70 = *v68;
            *v68 = *(_WORD *)(v69 + 4);
            *(_WORD *)(v69 + 4) = v70;
LABEL_49:
            v66 = v65;
            goto LABEL_53;
          }
          *v34 = v65;
          *v13 = v66;
          v78 = v9 + 8 * v12;
          v80 = *(_WORD *)(v78 + 4);
          v79 = (_WORD *)(v78 + 4);
          v81 = *v68;
          *v68 = v80;
          *v79 = v81;
          if (v67 < v66)
          {
            *v13 = v67;
            *v50 = v66;
            v82 = v9 + 8 * v49;
            *v79 = *(_WORD *)(v82 + 4);
            *(_WORD *)(v82 + 4) = v81;
LABEL_52:
            v66 = v67;
          }
LABEL_53:
          v83 = *(_DWORD *)v9;
          *(_DWORD *)v9 = v66;
          *v13 = v83;
          v84 = v9 + 8 * v12;
          v85 = *(_WORD *)(v9 + 4);
          *(_WORD *)(v9 + 4) = *(_WORD *)(v84 + 4);
          *(_WORD *)(v84 + 4) = v85;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          if (*(_DWORD *)(v9 - 8) >= *(_DWORD *)v9)
          {
            v100 = *(_QWORD *)v9;
            if (*v8 <= *(_QWORD *)v9)
            {
              v102 = v9 + 8;
              do
              {
                v9 = v102;
                if (v102 >= (unint64_t)a2)
                  break;
                v102 += 8;
              }
              while (*(_DWORD *)v9 <= v100);
            }
            else
            {
              do
              {
                v101 = *(_DWORD *)(v9 + 8);
                v9 += 8;
              }
              while (v101 <= v100);
            }
            v103 = a2;
            if (v9 < (unint64_t)a2)
            {
              v103 = a2;
              do
              {
                v104 = *(v103 - 2);
                v103 -= 2;
              }
              while (v104 > v100);
            }
            if (v9 < (unint64_t)v103)
            {
              v105 = *(_DWORD *)v9;
              v106 = *v103;
              do
              {
                *(_DWORD *)v9 = v106;
                *v103 = v105;
                v107 = *(_WORD *)(v9 + 4);
                *(_WORD *)(v9 + 4) = *((_WORD *)v103 + 2);
                *((_WORD *)v103 + 2) = v107;
                do
                {
                  v108 = *(_DWORD *)(v9 + 8);
                  v9 += 8;
                  v105 = v108;
                }
                while (v108 <= v100);
                do
                {
                  v109 = *(v103 - 2);
                  v103 -= 2;
                  v106 = v109;
                }
                while (v109 > v100);
              }
              while (v9 < (unint64_t)v103);
            }
            if (v9 - 8 != v7)
            {
              *(_DWORD *)v7 = *(_DWORD *)(v9 - 8);
              *(_WORD *)(v7 + 4) = *(_WORD *)(v9 - 4);
            }
            a4 = 0;
            *(_DWORD *)(v9 - 8) = v100;
            *(_WORD *)(v9 - 4) = WORD2(v100);
            continue;
          }
LABEL_55:
          v86 = *(_QWORD *)v9;
          v87 = v9;
          do
          {
            v88 = v87;
            v90 = *(_DWORD *)(v87 + 8);
            v87 += 8;
            v89 = v90;
          }
          while (v90 < v86);
          v91 = a2;
          if (v88 == v9)
          {
            v91 = a2;
            do
            {
              if (v87 >= (unint64_t)v91)
                break;
              v93 = *(v91 - 2);
              v91 -= 2;
            }
            while (v93 >= v86);
          }
          else
          {
            do
            {
              v92 = *(v91 - 2);
              v91 -= 2;
            }
            while (v92 >= v86);
          }
          if (v87 >= (unint64_t)v91)
          {
            v9 = v87;
          }
          else
          {
            v94 = *v91;
            v9 = v87;
            v95 = v91;
            do
            {
              *(_DWORD *)v9 = v94;
              *v95 = v89;
              v96 = *(_WORD *)(v9 + 4);
              *(_WORD *)(v9 + 4) = *((_WORD *)v95 + 2);
              *((_WORD *)v95 + 2) = v96;
              do
              {
                v97 = *(_DWORD *)(v9 + 8);
                v9 += 8;
                v89 = v97;
              }
              while (v97 < v86);
              do
              {
                v98 = *(v95 - 2);
                v95 -= 2;
                v94 = v98;
              }
              while (v98 >= v86);
            }
            while (v9 < (unint64_t)v95);
          }
          if (v9 - 8 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v9 - 8);
            *(_WORD *)(v7 + 4) = *(_WORD *)(v9 - 4);
          }
          *(_DWORD *)(v9 - 8) = v86;
          *(_WORD *)(v9 - 4) = WORD2(v86);
          if (v87 < (unint64_t)v91)
            goto LABEL_76;
          v99 = _ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEEEEbT1_SO_T0_(v7, (unsigned int *)(v9 - 8));
          result = (unsigned int *)_ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEEEEbT1_SO_T0_(v9, a2);
          if (!(_DWORD)result)
          {
            if (v99)
              continue;
LABEL_76:
            result = (unsigned int *)_ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEELb0EEEvT1_SO_T0_NS_15iterator_traitsISO_E15difference_typeEb(v7, v9 - 8, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (unsigned int *)(v9 - 8);
          if (v99)
            return result;
          goto LABEL_2;
        }
        v125 = (unsigned int *)(v9 + 8);
        v127 = (unsigned int *)v9 == a2 || v125 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v127)
          {
            v128 = 0;
            v129 = (unsigned int *)v9;
            do
            {
              v131 = v129[2];
              v132 = *v129;
              v129 = v125;
              if (v131 < v132)
              {
                v133 = *(_QWORD *)v125;
                v134 = v128;
                do
                {
                  v135 = v9 + v134;
                  *(_DWORD *)(v135 + 8) = v132;
                  *(_WORD *)(v135 + 12) = *(_WORD *)(v9 + v134 + 4);
                  if (!v134)
                  {
                    v130 = v9;
                    goto LABEL_120;
                  }
                  v132 = *(_DWORD *)(v135 - 8);
                  v134 -= 8;
                }
                while (v132 > v133);
                v130 = v9 + v134 + 8;
LABEL_120:
                *(_DWORD *)v130 = v133;
                *(_WORD *)(v130 + 4) = WORD2(v133);
              }
              v125 = v129 + 2;
              v128 += 8;
            }
            while (v129 + 2 != a2);
          }
        }
        else if (!v127)
        {
          v165 = (_WORD *)(v9 + 12);
          do
          {
            v166 = *(_DWORD *)(v7 + 8);
            v167 = *(_DWORD *)v7;
            v7 = (uint64_t)v125;
            if (v166 < v167)
            {
              v168 = *(_QWORD *)v125;
              v169 = v165;
              do
              {
                v170 = v169;
                *((_DWORD *)v169 - 1) = v167;
                v171 = *(v169 - 4);
                v169 -= 4;
                *v170 = v171;
                v167 = *((_DWORD *)v170 - 5);
              }
              while (v167 > v168);
              *((_DWORD *)v169 - 1) = v168;
              *v169 = WORD2(v168);
            }
            v125 = (unsigned int *)(v7 + 8);
            v165 += 4;
          }
          while ((unsigned int *)(v7 + 8) != a2);
        }
        return result;
    }
  }
}

unsigned int *_ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEEEEvT1_SO_SO_SO_T0_(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  __int16 v7;
  __int16 v8;
  unsigned int v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  unsigned int v13;
  __int16 v14;
  unsigned int v15;
  __int16 v16;

  v4 = *a2;
  v5 = *result;
  v6 = *a3;
  if (*a2 >= *result)
  {
    if (v6 >= v4)
    {
      v4 = *a3;
    }
    else
    {
      *a2 = v6;
      *a3 = v4;
      v8 = *((_WORD *)a2 + 2);
      *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
      *((_WORD *)a3 + 2) = v8;
      v9 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v9;
        v10 = *((_WORD *)result + 2);
        *((_WORD *)result + 2) = *((_WORD *)a2 + 2);
        *((_WORD *)a2 + 2) = v10;
        v4 = *a3;
      }
    }
  }
  else
  {
    if (v6 < v4)
    {
      *result = v6;
      *a3 = v5;
      v7 = *((_WORD *)result + 2);
      *((_WORD *)result + 2) = *((_WORD *)a3 + 2);
      *((_WORD *)a3 + 2) = v7;
LABEL_9:
      v4 = v5;
      goto LABEL_11;
    }
    *result = v4;
    *a2 = v5;
    v11 = *((_WORD *)result + 2);
    *((_WORD *)result + 2) = *((_WORD *)a2 + 2);
    *((_WORD *)a2 + 2) = v11;
    v4 = *a3;
    if (*a3 < v5)
    {
      *a2 = v4;
      *a3 = v5;
      *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
      *((_WORD *)a3 + 2) = v11;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*a4 < v4)
  {
    *a3 = *a4;
    *a4 = v4;
    v12 = *((_WORD *)a3 + 2);
    *((_WORD *)a3 + 2) = *((_WORD *)a4 + 2);
    *((_WORD *)a4 + 2) = v12;
    v13 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *((_WORD *)a2 + 2);
      *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
      *((_WORD *)a3 + 2) = v14;
      v15 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v15;
        v16 = *((_WORD *)result + 2);
        *((_WORD *)result + 2) = *((_WORD *)a2 + 2);
        *((_WORD *)a2 + 2) = v16;
      }
    }
  }
  return result;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEEEEbT1_SO_T0_(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int16 v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  __int16 v19;
  unsigned int v20;
  unsigned int v21;
  __int16 v22;
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  __int16 v28;
  unsigned int v29;
  unsigned int v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  unsigned int v36;
  __int16 v37;
  unsigned int *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = ((uint64_t)a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v6;
        *(a2 - 2) = v7;
        goto LABEL_7;
      }
      return result;
    case 3:
      v8 = *(_DWORD *)(a1 + 8);
      v9 = *(_DWORD *)a1;
      v10 = *(a2 - 2);
      if (v8 >= *(_DWORD *)a1)
      {
        if (v10 < v8)
        {
          *(_DWORD *)(a1 + 8) = v10;
          *(a2 - 2) = v8;
          v28 = *(_WORD *)(a1 + 12);
          *(_WORD *)(a1 + 12) = *((_WORD *)a2 - 2);
          *((_WORD *)a2 - 2) = v28;
          v29 = *(_DWORD *)(a1 + 8);
          v30 = *(_DWORD *)a1;
          if (v29 < *(_DWORD *)a1)
          {
            *(_DWORD *)a1 = v29;
            *(_DWORD *)(a1 + 8) = v30;
            v31 = *(_WORD *)(a1 + 4);
            *(_WORD *)(a1 + 4) = *(_WORD *)(a1 + 12);
            *(_WORD *)(a1 + 12) = v31;
          }
        }
      }
      else if (v10 >= v8)
      {
        *(_DWORD *)a1 = v8;
        *(_DWORD *)(a1 + 8) = v9;
        v35 = *(_WORD *)(a1 + 4);
        *(_WORD *)(a1 + 4) = *(_WORD *)(a1 + 12);
        *(_WORD *)(a1 + 12) = v35;
        v36 = *(a2 - 2);
        if (v36 < v9)
        {
          *(_DWORD *)(a1 + 8) = v36;
          *(a2 - 2) = v9;
          *(_WORD *)(a1 + 12) = *((_WORD *)a2 - 2);
          *((_WORD *)a2 - 2) = v35;
        }
      }
      else
      {
        *(_DWORD *)a1 = v10;
        *(a2 - 2) = v9;
LABEL_7:
        v11 = *(_WORD *)(a1 + 4);
        *(_WORD *)(a1 + 4) = *((_WORD *)a2 - 2);
        *((_WORD *)a2 - 2) = v11;
      }
      return result;
    case 4:
      _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEEEEvT1_SO_SO_SO_T0_((unsigned int *)a1, (unsigned int *)(a1 + 8), (unsigned int *)(a1 + 16), a2 - 2);
      return 1;
    case 5:
      _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEEEEvT1_SO_SO_SO_T0_((unsigned int *)a1, (unsigned int *)(a1 + 8), (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 24));
      v17 = *(a2 - 2);
      v18 = *(_DWORD *)(a1 + 24);
      if (v17 < v18)
      {
        *(_DWORD *)(a1 + 24) = v17;
        *(a2 - 2) = v18;
        v19 = *(_WORD *)(a1 + 28);
        *(_WORD *)(a1 + 28) = *((_WORD *)a2 - 2);
        *((_WORD *)a2 - 2) = v19;
        v20 = *(_DWORD *)(a1 + 24);
        v21 = *(_DWORD *)(a1 + 16);
        if (v20 < v21)
        {
          *(_DWORD *)(a1 + 16) = v20;
          *(_DWORD *)(a1 + 24) = v21;
          v22 = *(_WORD *)(a1 + 20);
          v23 = *(_WORD *)(a1 + 28);
          *(_WORD *)(a1 + 20) = v23;
          *(_WORD *)(a1 + 28) = v22;
          v24 = *(_DWORD *)(a1 + 8);
          if (v20 < v24)
          {
            *(_DWORD *)(a1 + 8) = v20;
            *(_DWORD *)(a1 + 16) = v24;
            v25 = *(_WORD *)(a1 + 12);
            *(_WORD *)(a1 + 12) = v23;
            *(_WORD *)(a1 + 20) = v25;
            v26 = *(_DWORD *)a1;
            if (v20 < *(_DWORD *)a1)
            {
              *(_DWORD *)a1 = v20;
              *(_DWORD *)(a1 + 8) = v26;
              v27 = *(_WORD *)(a1 + 4);
              *(_WORD *)(a1 + 4) = v23;
              *(_WORD *)(a1 + 12) = v27;
            }
          }
        }
      }
      return 1;
    default:
      v12 = (unsigned int *)(a1 + 16);
      v13 = *(_DWORD *)(a1 + 16);
      v14 = *(_DWORD *)(a1 + 8);
      v15 = *(_DWORD *)a1;
      if (v14 >= *(_DWORD *)a1)
      {
        if (v13 < v14)
        {
          *(_DWORD *)(a1 + 8) = v13;
          *(_DWORD *)(a1 + 16) = v14;
          v32 = *(_WORD *)(a1 + 12);
          v33 = *(_WORD *)(a1 + 20);
          *(_WORD *)(a1 + 12) = v33;
          *(_WORD *)(a1 + 20) = v32;
          if (v13 < v15)
          {
            *(_DWORD *)a1 = v13;
            *(_DWORD *)(a1 + 8) = v15;
            v34 = *(_WORD *)(a1 + 4);
            *(_WORD *)(a1 + 4) = v33;
            *(_WORD *)(a1 + 12) = v34;
          }
        }
      }
      else if (v13 >= v14)
      {
        *(_DWORD *)a1 = v14;
        *(_DWORD *)(a1 + 8) = v15;
        v37 = *(_WORD *)(a1 + 4);
        *(_WORD *)(a1 + 4) = *(_WORD *)(a1 + 12);
        *(_WORD *)(a1 + 12) = v37;
        if (v13 < v15)
        {
          *(_DWORD *)(a1 + 8) = v13;
          *(_DWORD *)(a1 + 16) = v15;
          *(_WORD *)(a1 + 12) = *(_WORD *)(a1 + 20);
          *(_WORD *)(a1 + 20) = v37;
        }
      }
      else
      {
        *(_DWORD *)a1 = v13;
        *(_DWORD *)(a1 + 16) = v15;
        v16 = *(_WORD *)(a1 + 4);
        *(_WORD *)(a1 + 4) = *(_WORD *)(a1 + 20);
        *(_WORD *)(a1 + 20) = v16;
      }
      v38 = (unsigned int *)(a1 + 24);
      if ((unsigned int *)(a1 + 24) == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      break;
  }
  while (1)
  {
    v42 = *v12;
    if (*v38 < *v12)
    {
      v43 = *(_QWORD *)v38;
      v44 = v39;
      do
      {
        v45 = a1 + v44;
        *(_DWORD *)(v45 + 24) = v42;
        *(_WORD *)(v45 + 28) = *(_WORD *)(a1 + v44 + 20);
        if (v44 == -16)
        {
          v41 = a1;
          goto LABEL_30;
        }
        v42 = *(_DWORD *)(v45 + 8);
        v44 -= 8;
      }
      while (v42 > v43);
      v41 = a1 + v44 + 24;
LABEL_30:
      *(_DWORD *)v41 = v43;
      *(_WORD *)(v41 + 4) = WORD2(v43);
      if (++v40 == 8)
        return v38 + 2 == a2;
    }
    v12 = v38;
    v39 += 8;
    v38 += 2;
    if (v38 == a2)
      return 1;
  }
}

void std::__function::__func<md::StyleLogic::_finishStyleBlend(void)::$_1,std::allocator<md::StyleLogic::_finishStyleBlend(void)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StyleLogic::_finishStyleBlend(void)::$_1,std::allocator<md::StyleLogic::_finishStyleBlend(void)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42C8948;
  return result;
}

void std::__function::__func<md::StyleLogic::_finishStyleBlend(void)::$_1,std::allocator<md::StyleLogic::_finishStyleBlend(void)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C8948;
}

void std::__function::__func<md::StyleLogic::_finishStyleBlend(void)::$_1,std::allocator<md::StyleLogic::_finishStyleBlend(void)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  float v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned int *v21;
  unsigned int v22;
  geo::read_write_lock *v23;
  const char *v24;
  geo::read_write_lock *v25;
  const char *v26;
  _QWORD *i;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  geo::read_write_lock *v44;
  const char *v45;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 520);
  if (!v3)
    goto LABEL_24;
  v4 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v3 + 16));
  if ((_DWORD)v4)
    geo::read_write_lock::logFailure(v4, (uint64_t)"write lock", v5);
  v6 = (_QWORD *)(v3 + 216);
  if (!*(_BYTE *)(v3 + 230) && *v6)
  {
    v7 = gss::Allocator::instance(v4);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(v3 + 216), *(unsigned __int16 *)(v3 + 228));
  }
  *(_QWORD *)(v3 + 223) = 0;
  *v6 = 0;
  *(_BYTE *)(v3 + 231) = 1;
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy((_QWORD *)(v3 + 216), v3 + 232);
  v8 = atomic_load((unsigned int *)(v3 + 256));
  if ((v8 & 0x7FFFFFFF) != 0)
  {
    *(_DWORD *)(v3 + 256) = 0;
    v9 = COERCE_FLOAT(atomic_load((unsigned int *)(v3 + 256)));
    if (v9 <= 0.0)
    {
      v10 = *(unsigned __int16 *)(v3 + 242);
      if ((_DWORD)v10 == *(unsigned __int16 *)(v3 + 226))
      {
        if (!*(_WORD *)(v3 + 242))
          goto LABEL_19;
        v11 = *(_DWORD **)(v3 + 232);
        v12 = *(_DWORD **)(v3 + 216);
        if (*v11 == *v12)
        {
          v13 = (unsigned __int16 *)((char *)v12 + *(unsigned __int16 *)(v3 + 224));
          v14 = (unsigned __int16 *)((char *)v11 + *(unsigned __int16 *)(v3 + 240));
          if (*v14 == *v13)
          {
            v15 = 0;
            v16 = 1;
            while (1)
            {
              if (v10 == v16)
              {
                v17 = *(unsigned __int16 *)(v3 + 242);
                goto LABEL_55;
              }
              v17 = v16;
              ++v15;
              if (v11[v16] != v12[v16])
                break;
              ++v16;
              if (v14[v17] != v13[v17])
                goto LABEL_55;
            }
            v17 = v15;
LABEL_55:
            LOBYTE(v10) = v17 < v10;
            goto LABEL_19;
          }
        }
      }
    }
    LOBYTE(v10) = 1;
LABEL_19:
    atomic_store(v10, (unsigned __int8 *)(v3 + 254));
    v18 = *(unsigned __int8 *)(v3 + 253);
    v19 = atomic_load((unsigned __int8 *)(v3 + 254));
    if (v18 != (v19 & 1))
    {
      v20 = atomic_load((unsigned __int8 *)(v3 + 254));
      *(_BYTE *)(v3 + 253) = v20 & 1;
      v21 = (unsigned int *)(v3 + 248);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
  }
  v23 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v3 + 16));
  if ((_DWORD)v23)
    geo::read_write_lock::logFailure(v23, (uint64_t)"unlock", v24);
LABEL_24:
  v25 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v2 + 320));
  if ((_DWORD)v25)
    geo::read_write_lock::logFailure(v25, (uint64_t)"read lock", v26);
  for (i = *(_QWORD **)(v2 + 88); i != *(_QWORD **)(v2 + 96); i += 2)
  {
    v28 = (std::__shared_weak_count *)i[1];
    if (v28)
    {
      v29 = std::__shared_weak_count::lock(v28);
      if (v29)
      {
        v30 = v29;
        v31 = (_QWORD *)*i;
        if (*i)
        {
          v32 = v31[32];
          if (v32)
          {
            v33 = v31[33];
            if (v33)
            {
              v34 = (unint64_t *)(v33 + 8);
              do
                v35 = __ldxr(v34);
              while (__stxr(v35 + 1, v34));
            }
            v36 = (std::__shared_weak_count *)v31[31];
            v31[30] = v32;
            v31[31] = v33;
            if (v36)
            {
              p_shared_owners = (unint64_t *)&v36->__shared_owners_;
              do
                v38 = __ldaxr(p_shared_owners);
              while (__stlxr(v38 - 1, p_shared_owners));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
            v39 = (std::__shared_weak_count *)v31[33];
            v31[32] = 0;
            v31[33] = 0;
            if (v39)
            {
              v40 = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
          }
        }
        v42 = (unint64_t *)&v30->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
  }
  v44 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v2 + 320));
  if ((_DWORD)v44)
    geo::read_write_lock::logFailure(v44, (uint64_t)"unlock", v45);
}

void sub_19FB20C40(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;
  geo::read_write_lock *v3;
  const char *v4;

  v3 = (geo::read_write_lock *)pthread_rwlock_unlock(v1);
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"unlock", v4);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::StyleLogic::_finishStyleBlend(void)::$_0,std::allocator<md::StyleLogic::_finishStyleBlend(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StyleLogic::_finishStyleBlend(void)::$_0,std::allocator<md::StyleLogic::_finishStyleBlend(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42C8900;
  return result;
}

void std::__function::__func<md::StyleLogic::_finishStyleBlend(void)::$_0,std::allocator<md::StyleLogic::_finishStyleBlend(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C8900;
}

void std::__function::__func<md::StyleLogic::_finishStyleBlend(void)::$_0,std::allocator<md::StyleLogic::_finishStyleBlend(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  gss::StylesheetManager<gss::PropertyID>::finishBlend(*a2);
}

void gss::ClientStyleState<gss::PropertyID>::removeTargetClientStyleAttribute(uint64_t a1, unsigned int a2)
{
  pthread_rwlock_t *v4;
  geo::read_write_lock *v5;
  const char *v6;
  float v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  geo::read_write_lock *v21;
  const char *v22;

  v4 = (pthread_rwlock_t *)(a1 + 16);
  v5 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 16));
  if ((_DWORD)v5)
    geo::read_write_lock::logFailure(v5, (uint64_t)"write lock", v6);
  if (geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::erase(a1 + 232, a2))
  {
    v7 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 256)));
    if (v7 <= 0.0)
    {
      v8 = *(unsigned __int16 *)(a1 + 242);
      if ((_DWORD)v8 == *(unsigned __int16 *)(a1 + 226))
      {
        if (!*(_WORD *)(a1 + 242))
          goto LABEL_15;
        v9 = *(_DWORD **)(a1 + 232);
        v10 = *(_DWORD **)(a1 + 216);
        if (*v9 == *v10)
        {
          v11 = *(unsigned __int16 *)(a1 + 224);
          v12 = *(unsigned __int16 *)(a1 + 240);
          if (*(unsigned __int16 *)((char *)v9 + v12) == *(unsigned __int16 *)((char *)v10 + v11))
          {
            v13 = 0;
            v14 = v9 + 1;
            v15 = v10 + 1;
            v16 = (uint64_t)v9 + v12 + 2;
            v17 = (uint64_t)v10 + v11 + 2;
            while (v8 - 1 != v13)
            {
              v18 = v13++;
              if (v14[v18] != v15[v18])
                goto LABEL_21;
              if (*(unsigned __int16 *)(v16 + 2 * v18) != *(unsigned __int16 *)(v17 + 2 * v18))
              {
                v13 = v18 + 1;
                goto LABEL_21;
              }
            }
            v13 = *(unsigned __int16 *)(a1 + 242);
LABEL_21:
            LOBYTE(v8) = v13 < v8;
            goto LABEL_15;
          }
        }
      }
    }
    LOBYTE(v8) = 1;
LABEL_15:
    atomic_store(v8, (unsigned __int8 *)(a1 + 254));
    v19 = (unsigned int *)(a1 + 248);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
  }
  v21 = (geo::read_write_lock *)pthread_rwlock_unlock(v4);
  if ((_DWORD)v21)
    geo::read_write_lock::logFailure(v21, (uint64_t)"unlock", v22);
}

_WORD *std::vector<std::pair<gss::StyleAttribute,unsigned short>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(uint64_t a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  _WORD *result;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  _WORD *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  _WORD *v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  char *v33;
  uint64_t v34;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(_WORD **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 3)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 61)
      goto LABEL_32;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_32:
      abort();
    v13 = 4 * v12;
    result = operator new(8 * v12);
    v14 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v13];
    v15 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, ((a3 - v6 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
      v15 = (char *)v14 + ((a3 - v6 - 8) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    v16 = v15 - (char *)v14;
    v17 = (_QWORD *)(a1 + 8);
    goto LABEL_31;
  }
  v18 = *(_WORD **)(a1 + 8);
  v17 = (_QWORD *)(a1 + 8);
  v14 = v18;
  v19 = (char *)v18 - (char *)result;
  v20 = ((char *)v18 - (char *)result) >> 3;
  if (v20 < __sz)
  {
    v21 = &a2[8 * v20];
    if (v14 != result)
    {
      v22 = a2;
      do
      {
        *(_DWORD *)result = *(_DWORD *)v22;
        result[2] = *((_WORD *)v22 + 2);
        v22 += 8;
        result += 4;
      }
      while (v22 != v21);
    }
    if (v21 == a3)
    {
      v16 = 0;
      goto LABEL_31;
    }
    v23 = &a2[v19];
    v24 = a3 - v23 - 8;
    if (v24 < 0x38)
    {
      v26 = (char *)v14;
    }
    else
    {
      v25 = (char *)v14 - v23;
      v26 = (char *)v14;
      if (v25 >= 0x20)
      {
        v27 = (v24 >> 3) + 1;
        v28 = 4 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        v21 += v28 * 2;
        v29 = v14 + 8;
        v30 = &a2[8 * v20 + 16];
        v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          *v29 = v32;
          v29 += 2;
          v30 += 32;
          v31 -= 4;
        }
        while (v31);
        v26 = (char *)&v14[v28];
        if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_30;
      }
    }
    do
    {
      v34 = *(_QWORD *)v21;
      v21 += 8;
      *(_QWORD *)v26 = v34;
      v26 += 8;
    }
    while (v21 != a3);
LABEL_30:
    v16 = v26 - (char *)v14;
    goto LABEL_31;
  }
  v33 = (char *)result;
  if (a2 != a3)
  {
    do
    {
      *(_DWORD *)v33 = *(_DWORD *)v6;
      *((_WORD *)v33 + 2) = *((_WORD *)v6 + 2);
      v33 += 8;
      v6 += 8;
    }
    while (v6 != a3);
  }
  v16 = v33 - (char *)result;
  v14 = result;
LABEL_31:
  *v17 = (char *)v14 + v16;
  return result;
}

uint64_t **md::StyleLogic::hybridContext(md::StyleLogic *this)
{
  uint64_t **v2;
  float v3;
  unsigned int v4;
  id v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p[2];
  char v22;
  __int128 v23;

  v2 = (uint64_t **)((char *)this + 592);
  if (*((_QWORD *)this + 74))
  {
    if (*((_QWORD *)this + 76))
      return v2;
    goto LABEL_17;
  }
  v22 = 6;
  strcpy((char *)__p, "hybrid");
  v3 = *((float *)this + 30);
  v4 = *((unsigned __int8 *)this + 161);
  v5 = *((id *)this + 17);
  gss::StyleManagerExtension::initWithName<gss::PropertyID>((gss::Allocator **)&v23, (uint64_t)__p, v4, v5, v3);
  v6 = v23;
  v23 = 0uLL;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 75);
  *((_OWORD *)this + 37) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (v22 < 0)
    operator delete(__p[0]);
  md::StyleLogic::setupDecodingCallbacks(*((_QWORD *)this + 151), *((std::__shared_weak_count **)this + 152), v2);
  if (!*((_QWORD *)this + 76))
  {
LABEL_17:
    v14 = *((_QWORD *)this + 30);
    v13 = *((_QWORD *)this + 31);
    if (v13)
    {
      v15 = (unint64_t *)(v13 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    *((_QWORD *)this + 76) = v14;
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 77);
    *((_QWORD *)this + 77) = v13;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  return v2;
}

void sub_19FB211D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t **md::StyleLogic::globeContext(md::StyleLogic *this)
{
  uint64_t **v2;
  float v3;
  unsigned int v4;
  id v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p[2];
  char v18;
  __int128 v19;

  v2 = (uint64_t **)((char *)this + 928);
  if (!*((_QWORD *)this + 116))
  {
    v18 = 13;
    strcpy((char *)__p, "globe-default");
    v3 = *((float *)this + 30);
    v4 = *((unsigned __int8 *)this + 161);
    v5 = *((id *)this + 17);
    gss::StyleManagerExtension::initWithName<gss::PropertyID>((gss::Allocator **)&v19, (uint64_t)__p, v4, v5, v3);
    v6 = v19;
    v19 = 0uLL;
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 117);
    *((_OWORD *)this + 58) = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }

    if (v18 < 0)
      operator delete(__p[0]);
    md::StyleLogic::setupDecodingCallbacks(*((_QWORD *)this + 151), *((std::__shared_weak_count **)this + 152), v2);
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 119);
  *((_QWORD *)this + 118) = 0;
  *((_QWORD *)this + 119) = 0;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v2;
}

void sub_19FB21368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void md::StyleLogicContext::~StyleLogicContext(md::StyleLogicContext *this)
{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 15);
  if (v3)
  {
    *((_QWORD *)this + 16) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v5)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v8)
      goto LABEL_17;
  }
  else
  {
LABEL_11:
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v8)
      goto LABEL_17;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_17:
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

_QWORD *std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E42C89D8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E42C89D8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E42C89D8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E42C89D8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::operator()(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = v5;
      v7 = *(os_unfair_lock_s **)(a1 + 8);
      if (v7)
      {
        v8 = *(_QWORD *)(a1 + 16);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 16);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        v18[0] = &off_1E42D9758;
        v18[1] = v7;
        v18[2] = v8;
        v19 = v18;
        os_unfair_lock_lock(v7 + 2);
        if (*(_QWORD *)&v7->_os_unfair_lock_opaque)
        {
          v17 = *(_QWORD *)&v7->_os_unfair_lock_opaque;
          if (!v19)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
            return;
          }
          (*(void (**)(_QWORD *, uint64_t *))(*v19 + 48))(v19, &v17);
        }
        os_unfair_lock_unlock(v7 + 2);
        v11 = v19;
        if (v19 == v18)
        {
          v12 = 4;
          v11 = v18;
          goto LABEL_14;
        }
        if (v19)
        {
          v12 = 5;
LABEL_14:
          (*(void (**)(_QWORD *))(*v11 + 8 * v12))(v11);
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_19FB2174C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  os_unfair_lock_s *v15;
  os_unfair_lock_s *v16;
  char *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  v16 = v15;
  os_unfair_lock_unlock(v16);
  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
    {
LABEL_6:
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      if (v13)
      {
        v22 = (unint64_t *)&v13->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      _Unwind_Resume(a1);
    }
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
  goto LABEL_6;
}

_QWORD *std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E42D9758;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E42D9758;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E42D9758;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E42D9758;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::operator()(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  NSObject *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  _QWORD v7[5];
  std::__shared_weak_count *v8;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  v4 = **(NSObject ***)(*(_QWORD *)a2 + 1224);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3321888768;
  v7[2] = ___ZZZN2md10StyleLogic22setupDecodingCallbacksERKNSt3__110shared_ptrIN3gss17StylesheetManagerINS3_10PropertyIDEEEEEENK3__1clES7_bENKUlPS0_E_clESB__block_invoke;
  v7[3] = &__block_descriptor_48_ea8_32c63_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_10StyleLogicEEEEE_e5_v8__0l;
  v7[4] = v3;
  v8 = v2;
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  dispatch_async(v4, v7);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void ___ZZZN2md10StyleLogic22setupDecodingCallbacksERKNSt3__110shared_ptrIN3gss17StylesheetManagerINS3_10PropertyIDEEEEEENK3__1clES7_bENKUlPS0_E_clESB__block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(os_unfair_lock_s **)(a1 + 32);
      if (!v5)
        goto LABEL_12;
      v13[0] = &off_1E42DA5F8;
      v14 = v13;
      os_unfair_lock_lock(v5 + 2);
      if (*(_QWORD *)&v5->_os_unfair_lock_opaque)
      {
        v12 = *(_QWORD *)&v5->_os_unfair_lock_opaque;
        if (!v14)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
          return;
        }
        (*(void (**)(_QWORD *, uint64_t *))(*v14 + 48))(v14, &v12);
      }
      os_unfair_lock_unlock(v5 + 2);
      v8 = v14;
      if (v14 == v13)
      {
        v9 = 4;
        v8 = v13;
      }
      else
      {
        if (!v14)
          goto LABEL_12;
        v9 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v8 + 8 * v9))(v8, v6, v7);
LABEL_12:
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_19FB21AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  os_unfair_lock_s *v15;
  char *v17;
  uint64_t v18;

  os_unfair_lock_unlock(v15);
  v17 = a15;
  if (a15 == &a12)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZZZN2md10StyleLogic22setupDecodingCallbacksERKNS_10shared_ptrIN3gss17StylesheetManagerINS5_10PropertyIDEEEEEENK3__1clES9_bENKUlPS3_E_clESD_EUb_EUlSD_E_NS_9allocatorISF_EEFvSD_EED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZZZZN2md10StyleLogic22setupDecodingCallbacksERKNS_10shared_ptrIN3gss17StylesheetManagerINS5_10PropertyIDEEEEEENK3__1clES9_bENKUlPS3_E_clESD_EUb_EUlSD_E_NS_9allocatorISF_EEFvSD_EE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42DA5F8;
  return result;
}

void _ZNKSt3__110__function6__funcIZZZZN2md10StyleLogic22setupDecodingCallbacksERKNS_10shared_ptrIN3gss17StylesheetManagerINS5_10PropertyIDEEEEEENK3__1clES9_bENKUlPS3_E_clESD_EUb_EUlSD_E_NS_9allocatorISF_EEFvSD_EE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42DA5F8;
}

void _ZNSt3__110__function6__funcIZZZZN2md10StyleLogic22setupDecodingCallbacksERKNS_10shared_ptrIN3gss17StylesheetManagerINS5_10PropertyIDEEEEEENK3__1clES9_bENKUlPS3_E_clESD_EUb_EUlSD_E_NS_9allocatorISF_EEFvSD_EEclEOSD_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char v6;
  char v7;

  v2 = *a2;
  v6 = 5;
  v3 = *(char **)(v2 + 1128);
  v4 = *(char **)(v2 + 1136);
  if (v3 != v4)
  {
    while (*v3 <= 4u)
    {
      if (++v3 == v4)
        goto LABEL_7;
    }
  }
  if (v3 == v4 || (v4 = v3, *v3 != 5))
LABEL_7:
    std::vector<md::StyleManagerEvent>::insert(v2 + 1128, v4, &v6);
  v5 = **(_QWORD **)(v2 + 1240);
  if (v5)
  {
    v7 = 8;
    md::MapEngine::setNeedsTick(v5, &v7);
  }
}

void ___ZN3gss10StyleSheetINS_10PropertyIDEE9loadQueueEb_block_invoke_2_19516()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  NSObject *v3;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_USER_INTERACTIVE, -3);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = dispatch_queue_create("com.apple.mapdisplay.stylesheetLoadQueue", v0);
  v2 = (void *)gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue = (uint64_t)v1;

}

void ___ZN3gss10StyleSheetINS_10PropertyIDEE9loadQueueEb_block_invoke_19518()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  NSObject *v3;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_UTILITY, 0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = dispatch_queue_create("com.apple.mapdisplay.stylesheetLoadQueue", v0);
  v2 = (void *)gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue = (uint64_t)v1;

}

_QWORD *std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E42D8288;
  v2 = a1 + 1;
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E42D8288;
  v2 = a1 + 1;
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *a2 = &off_1E42D8288;
  v4 = a2 + 1;
  result = a1[4];
  if (result)
  {
    if ((_QWORD *)result == a1 + 1)
    {
      a2[4] = v4;
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4] + 24))(a1[4]);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v4);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  v6 = a1[6];
  a2[5] = a1[5];
  a2[6] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

_QWORD *std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  result = *(_QWORD **)(a1 + 32);
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

_QWORD *std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E42C8990;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E42C8990;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E42C8990;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E42C8990;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::operator()(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = v5;
      v7 = *(os_unfair_lock_s **)(a1 + 8);
      if (v7)
      {
        v8 = *(_QWORD *)(a1 + 16);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 16);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        v18[0] = &off_1E42D9710;
        v18[1] = v7;
        v18[2] = v8;
        v19 = v18;
        os_unfair_lock_lock(v7 + 2);
        if (*(_QWORD *)&v7->_os_unfair_lock_opaque)
        {
          v17 = *(_QWORD *)&v7->_os_unfair_lock_opaque;
          if (!v19)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
            return;
          }
          (*(void (**)(_QWORD *, uint64_t *))(*v19 + 48))(v19, &v17);
        }
        os_unfair_lock_unlock(v7 + 2);
        v11 = v19;
        if (v19 == v18)
        {
          v12 = 4;
          v11 = v18;
          goto LABEL_14;
        }
        if (v19)
        {
          v12 = 5;
LABEL_14:
          (*(void (**)(_QWORD *))(*v11 + 8 * v12))(v11);
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_19FB22230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  os_unfair_lock_s *v15;
  os_unfair_lock_s *v16;
  char *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  v16 = v15;
  os_unfair_lock_unlock(v16);
  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
    {
LABEL_6:
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      if (v13)
      {
        v22 = (unint64_t *)&v13->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      _Unwind_Resume(a1);
    }
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
  goto LABEL_6;
}

_QWORD *std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E42D9710;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E42D9710;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E42D9710;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E42D9710;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::operator()(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  NSObject *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  _QWORD v7[5];
  std::__shared_weak_count *v8;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  v4 = **(NSObject ***)(*(_QWORD *)a2 + 1224);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3321888768;
  v7[2] = ___ZZZN2md10StyleLogic22setupDecodingCallbacksERKNSt3__110shared_ptrIN3gss17StylesheetManagerINS3_10PropertyIDEEEEEENK3__0clES7_bENKUlPS0_E_clESB__block_invoke;
  v7[3] = &__block_descriptor_48_ea8_32c63_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_10StyleLogicEEEEE_e5_v8__0l;
  v7[4] = v3;
  v8 = v2;
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  dispatch_async(v4, v7);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void ___ZZZN2md10StyleLogic22setupDecodingCallbacksERKNSt3__110shared_ptrIN3gss17StylesheetManagerINS3_10PropertyIDEEEEEENK3__0clES7_bENKUlPS0_E_clESB__block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(os_unfair_lock_s **)(a1 + 32);
      if (!v5)
        goto LABEL_12;
      v13[0] = &off_1E42DA5B0;
      v14 = v13;
      os_unfair_lock_lock(v5 + 2);
      if (*(_QWORD *)&v5->_os_unfair_lock_opaque)
      {
        v12 = *(_QWORD *)&v5->_os_unfair_lock_opaque;
        if (!v14)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
          return;
        }
        (*(void (**)(_QWORD *, uint64_t *))(*v14 + 48))(v14, &v12);
      }
      os_unfair_lock_unlock(v5 + 2);
      v8 = v14;
      if (v14 == v13)
      {
        v9 = 4;
        v8 = v13;
      }
      else
      {
        if (!v14)
          goto LABEL_12;
        v9 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v8 + 8 * v9))(v8, v6, v7);
LABEL_12:
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_19FB225CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  os_unfair_lock_s *v15;
  char *v17;
  uint64_t v18;

  os_unfair_lock_unlock(v15);
  v17 = a15;
  if (a15 == &a12)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZZZN2md10StyleLogic22setupDecodingCallbacksERKNS_10shared_ptrIN3gss17StylesheetManagerINS5_10PropertyIDEEEEEENK3__0clES9_bENKUlPS3_E_clESD_EUb_EUlSD_E_NS_9allocatorISF_EEFvSD_EED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZZZZN2md10StyleLogic22setupDecodingCallbacksERKNS_10shared_ptrIN3gss17StylesheetManagerINS5_10PropertyIDEEEEEENK3__0clES9_bENKUlPS3_E_clESD_EUb_EUlSD_E_NS_9allocatorISF_EEFvSD_EE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42DA5B0;
  return result;
}

void _ZNKSt3__110__function6__funcIZZZZN2md10StyleLogic22setupDecodingCallbacksERKNS_10shared_ptrIN3gss17StylesheetManagerINS5_10PropertyIDEEEEEENK3__0clES9_bENKUlPS3_E_clESD_EUb_EUlSD_E_NS_9allocatorISF_EEFvSD_EE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42DA5B0;
}

void _ZNSt3__110__function6__funcIZZZZN2md10StyleLogic22setupDecodingCallbacksERKNS_10shared_ptrIN3gss17StylesheetManagerINS5_10PropertyIDEEEEEENK3__0clES9_bENKUlPS3_E_clESD_EUb_EUlSD_E_NS_9allocatorISF_EEFvSD_EEclEOSD_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char v6;
  char v7;

  v2 = *a2;
  v6 = 4;
  v3 = *(char **)(v2 + 1128);
  v4 = *(char **)(v2 + 1136);
  if (v3 != v4)
  {
    while (*v3 <= 3u)
    {
      if (++v3 == v4)
        goto LABEL_7;
    }
  }
  if (v3 == v4 || (v4 = v3, *v3 != 4))
LABEL_7:
    std::vector<md::StyleManagerEvent>::insert(v2 + 1128, v4, &v6);
  v5 = **(_QWORD **)(v2 + 1240);
  if (v5)
  {
    v7 = 12;
    md::MapEngine::setNeedsTick(v5, &v7);
  }
}

void _ZNSt3__115allocate_sharedB8nn180100IN3gss10StyleSheetINS1_15ScenePropertyIDEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  geo::read_write_lock *v4;
  const char *v5;
  gss::Allocator *v6;
  std::__assoc_sub_state *state;
  std::__assoc_sub_state *v8;
  std::__assoc_sub_state *v9;
  std::__assoc_sub_state *shared_owners;
  std::__shared_weak_count *v11;
  unint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::future<void> v19;
  std::future<void> v20;

  v2 = (std::__shared_weak_count *)operator new(0xBD0uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5A08;
  v2[1].std::__shared_count = 0u;
  *(_OWORD *)&v2[1].__shared_weak_owners_ = 0u;
  HIBYTE(v2[3].__vftable) = 0;
  LODWORD(v2[3].__shared_owners_) = 0;
  BYTE4(v2[3].__shared_owners_) = 0;
  v2[3].__shared_weak_owners_ = 0;
  *(uint64_t *)((char *)&v2[3].__shared_weak_owners_ + 5) = 0;
  *(_OWORD *)&v2[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[5].__shared_owners_ = 0u;
  v2[6].std::__shared_count = 0u;
  v2[7].__vftable = 0;
  LOWORD(v2[4].__shared_owners_) = 0;
  *(std::__shared_weak_count_vtbl **)((char *)&v2[7].__vftable + 5) = 0;
  v2[7].__shared_weak_owners_ = 0;
  LOBYTE(v2[2].__shared_owners_) = 0;
  *(_DWORD *)((char *)&v2[6].__shared_owners_ + 7) = 0;
  v2[8].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  *(_OWORD *)&v2[8].__shared_owners_ = 0u;
  v2[9].std::__shared_count = 0u;
  *(_OWORD *)&v2[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[10].__shared_owners_ = 0u;
  v2[11].std::__shared_count = 0u;
  *(_OWORD *)((char *)&v2[11].__shared_owners_ + 4) = 0u;
  HIDWORD(v2[12].__vftable) = 0x4000;
  *(_OWORD *)&v2[12].__shared_owners_ = 0u;
  v2[13].std::__shared_count = 0u;
  v2[13].__shared_weak_owners_ = 0x400000000000;
  v2[14].std::__shared_count = 0u;
  *(_OWORD *)&v2[14].__shared_weak_owners_ = 0u;
  v2[15].__shared_owners_ = 0x400000000000;
  v2[15].__shared_weak_owners_ = 0;
  v2[16].__vftable = 0;
  v2[16].__shared_owners_ = 0;
  LODWORD(v2[16].__shared_weak_owners_) = 100;
  v2[17].__vftable = 0;
  v2[17].__shared_owners_ = 0;
  v2[17].__shared_weak_owners_ = 0;
  LODWORD(v2[18].__vftable) = 100;
  v2[18].__shared_owners_ = 0;
  v2[18].__shared_weak_owners_ = 0;
  v2[19].__vftable = 0;
  LODWORD(v2[19].__shared_owners_) = 1024;
  v2[19].__shared_weak_owners_ = 0;
  v2[20].__vftable = 0;
  v2[20].__shared_owners_ = 0;
  LODWORD(v2[20].__shared_weak_owners_) = 1024;
  v2[21].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  *(_OWORD *)&v2[21].__shared_owners_ = 0u;
  v2[22].std::__shared_count = 0u;
  *(_OWORD *)&v2[22].__shared_weak_owners_ = 0u;
  v2[23].__shared_owners_ = 0;
  v2[23].__shared_weak_owners_ = 850045863;
  v2[26].__vftable = 0;
  *(_OWORD *)&v2[24].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[25].__shared_owners_ = 0u;
  v2[24].std::__shared_count = 0u;
  v2[26].__shared_owners_ = 850045863;
  v2[28].__shared_weak_owners_ = 0;
  *(_OWORD *)&v2[27].__shared_owners_ = 0u;
  v2[28].std::__shared_count = 0u;
  *(_OWORD *)&v2[26].__shared_weak_owners_ = 0u;
  v2[29].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[31].__shared_owners_ = 0;
  v2[30].std::__shared_count = 0u;
  *(_OWORD *)&v2[30].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[29].__shared_owners_ = 0u;
  v2[31].__shared_weak_owners_ = 850045863;
  v2[34].__vftable = 0;
  *(_OWORD *)&v2[32].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[33].__shared_owners_ = 0u;
  v2[32].std::__shared_count = 0u;
  v2[34].__shared_owners_ = 850045863;
  v2[36].__shared_weak_owners_ = 0;
  *(_OWORD *)&v2[35].__shared_owners_ = 0u;
  v2[36].std::__shared_count = 0u;
  *(_OWORD *)&v2[34].__shared_weak_owners_ = 0u;
  v2[37].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[39].__shared_owners_ = 0;
  v2[38].std::__shared_count = 0u;
  *(_OWORD *)&v2[38].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[37].__shared_owners_ = 0u;
  v2[39].__shared_weak_owners_ = 850045863;
  v2[42].__vftable = 0;
  *(_OWORD *)&v2[40].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[41].__shared_owners_ = 0u;
  v2[40].std::__shared_count = 0u;
  v2[42].__shared_owners_ = 850045863;
  v2[44].__shared_weak_owners_ = 0;
  v2[44].std::__shared_count = 0u;
  *(_OWORD *)&v2[43].__shared_owners_ = 0u;
  *(_OWORD *)&v2[42].__shared_weak_owners_ = 0u;
  v2[45].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[47].__shared_owners_ = 0;
  *(_OWORD *)&v2[46].__shared_weak_owners_ = 0u;
  v2[46].std::__shared_count = 0u;
  *(_OWORD *)&v2[45].__shared_owners_ = 0u;
  v2[47].__shared_weak_owners_ = 850045863;
  v2[50].__vftable = 0;
  *(_OWORD *)&v2[49].__shared_owners_ = 0u;
  *(_OWORD *)&v2[48].__shared_weak_owners_ = 0u;
  v2[48].std::__shared_count = 0u;
  v2[50].__shared_owners_ = 850045863;
  v2[52].__shared_weak_owners_ = 0;
  v2[52].std::__shared_count = 0u;
  *(_OWORD *)&v2[51].__shared_owners_ = 0u;
  *(_OWORD *)&v2[50].__shared_weak_owners_ = 0u;
  v2[53].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[55].__shared_owners_ = 0;
  *(_OWORD *)&v2[54].__shared_weak_owners_ = 0u;
  v2[54].std::__shared_count = 0u;
  *(_OWORD *)&v2[53].__shared_owners_ = 0u;
  v2[55].__shared_weak_owners_ = 850045863;
  v2[58].__vftable = 0;
  *(_OWORD *)&v2[57].__shared_owners_ = 0u;
  *(_OWORD *)&v2[56].__shared_weak_owners_ = 0u;
  v2[56].std::__shared_count = 0u;
  v2[58].__shared_owners_ = 850045863;
  v2[60].__shared_weak_owners_ = 0;
  v2[60].std::__shared_count = 0u;
  *(_OWORD *)&v2[59].__shared_owners_ = 0u;
  *(_OWORD *)&v2[58].__shared_weak_owners_ = 0u;
  v2[61].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[63].__shared_owners_ = 0;
  *(_OWORD *)&v2[62].__shared_weak_owners_ = 0u;
  v2[62].std::__shared_count = 0u;
  *(_OWORD *)&v2[61].__shared_owners_ = 0u;
  v2[63].__shared_weak_owners_ = 850045863;
  v2[66].__vftable = 0;
  *(_OWORD *)&v2[65].__shared_owners_ = 0u;
  *(_OWORD *)&v2[64].__shared_weak_owners_ = 0u;
  v2[64].std::__shared_count = 0u;
  v2[66].__shared_owners_ = 850045863;
  v2[68].__shared_weak_owners_ = 0;
  v2[68].std::__shared_count = 0u;
  *(_OWORD *)&v2[67].__shared_owners_ = 0u;
  *(_OWORD *)&v2[66].__shared_weak_owners_ = 0u;
  v2[69].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[71].__shared_owners_ = 0;
  *(_OWORD *)&v2[70].__shared_weak_owners_ = 0u;
  v2[70].std::__shared_count = 0u;
  *(_OWORD *)&v2[69].__shared_owners_ = 0u;
  v2[71].__shared_weak_owners_ = 850045863;
  v2[74].__vftable = 0;
  *(_OWORD *)&v2[73].__shared_owners_ = 0u;
  *(_OWORD *)&v2[72].__shared_weak_owners_ = 0u;
  v2[72].std::__shared_count = 0u;
  v2[74].__shared_owners_ = 850045863;
  v2[76].__shared_weak_owners_ = 0;
  v2[76].std::__shared_count = 0u;
  *(_OWORD *)&v2[75].__shared_owners_ = 0u;
  *(_OWORD *)&v2[74].__shared_weak_owners_ = 0u;
  v2[77].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[79].__shared_owners_ = 0;
  *(_OWORD *)&v2[78].__shared_weak_owners_ = 0u;
  v2[78].std::__shared_count = 0u;
  *(_OWORD *)&v2[77].__shared_owners_ = 0u;
  v2[79].__shared_weak_owners_ = 850045863;
  v2[82].__vftable = 0;
  *(_OWORD *)&v2[81].__shared_owners_ = 0u;
  *(_OWORD *)&v2[80].__shared_weak_owners_ = 0u;
  v2[80].std::__shared_count = 0u;
  v2[82].__shared_owners_ = 850045863;
  v2[84].__shared_weak_owners_ = 0;
  v2[84].std::__shared_count = 0u;
  *(_OWORD *)&v2[83].__shared_owners_ = 0u;
  *(_OWORD *)&v2[82].__shared_weak_owners_ = 0u;
  v2[85].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[87].__shared_owners_ = 0;
  *(_OWORD *)&v2[86].__shared_weak_owners_ = 0u;
  v2[86].std::__shared_count = 0u;
  *(_OWORD *)&v2[85].__shared_owners_ = 0u;
  v2[87].__shared_weak_owners_ = 850045863;
  v2[90].__vftable = 0;
  *(_OWORD *)&v2[89].__shared_owners_ = 0u;
  *(_OWORD *)&v2[88].__shared_weak_owners_ = 0u;
  v2[88].std::__shared_count = 0u;
  v2[90].__shared_owners_ = 850045863;
  v2[92].__shared_weak_owners_ = 0;
  v2[92].std::__shared_count = 0u;
  *(_OWORD *)&v2[91].__shared_owners_ = 0u;
  *(_OWORD *)&v2[90].__shared_weak_owners_ = 0u;
  v2[93].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[95].__shared_owners_ = 0;
  *(_OWORD *)&v2[94].__shared_weak_owners_ = 0u;
  v2[94].std::__shared_count = 0u;
  *(_OWORD *)&v2[93].__shared_owners_ = 0u;
  v2[95].__shared_weak_owners_ = 850045863;
  v2[98].__vftable = 0;
  *(_OWORD *)&v2[97].__shared_owners_ = 0u;
  *(_OWORD *)&v2[96].__shared_weak_owners_ = 0u;
  v2[96].std::__shared_count = 0u;
  v2[98].__shared_owners_ = 850045863;
  v2[100].__shared_weak_owners_ = 0;
  v2[100].std::__shared_count = 0u;
  *(_OWORD *)&v2[99].__shared_owners_ = 0u;
  *(_OWORD *)&v2[98].__shared_weak_owners_ = 0u;
  v2[101].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v2[103].__shared_owners_ = 0;
  *(_OWORD *)&v2[102].__shared_weak_owners_ = 0u;
  v2[102].std::__shared_count = 0u;
  *(_OWORD *)&v2[101].__shared_owners_ = 0u;
  v2[103].__shared_weak_owners_ = 850045863;
  v2[114].std::__shared_count = 0u;
  *(_OWORD *)&v2[113].__shared_owners_ = 0u;
  *(_OWORD *)&v2[112].__shared_weak_owners_ = 0u;
  v2[112].std::__shared_count = 0u;
  *(_OWORD *)&v2[111].__shared_owners_ = 0u;
  *(_OWORD *)&v2[110].__shared_weak_owners_ = 0u;
  v2[110].std::__shared_count = 0u;
  *(_OWORD *)&v2[109].__shared_owners_ = 0u;
  *(_OWORD *)&v2[108].__shared_weak_owners_ = 0u;
  v2[108].std::__shared_count = 0u;
  *(_OWORD *)&v2[107].__shared_owners_ = 0u;
  *(_OWORD *)&v2[106].__shared_weak_owners_ = 0u;
  v2[106].std::__shared_count = 0u;
  *(_OWORD *)&v2[105].__shared_owners_ = 0u;
  *(_OWORD *)&v2[104].__shared_weak_owners_ = 0u;
  v2[104].std::__shared_count = 0u;
  v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)&v2[106].__shared_owners_, 0);
  if ((_DWORD)v4)
    geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
  *(_OWORD *)&v2[114].__shared_weak_owners_ = 0u;
  v6 = (gss::Allocator *)gss::Allocator::instance(v4);
  v2[115].__shared_owners_ = (uint64_t)v6;
  v2[115].__shared_weak_owners_ = 0;
  v2[116].__vftable = (std::__shared_weak_count_vtbl *)gss::Allocator::instance(v6);
  v2[116].__shared_owners_ = 0;
  LODWORD(v2[116].__shared_weak_owners_) = 1065353216;
  LODWORD(v2[117].__vftable) = 0;
  std::promise<void>::promise((std::promise<void> *)&v2[117].__shared_owners_);
  std::promise<void>::promise((std::promise<void> *)&v2[117].__shared_weak_owners_);
  v2[118].std::__shared_count = 0u;
  v2[118].__shared_weak_owners_ = 850045863;
  v2[121].__vftable = 0;
  v2[119].std::__shared_count = 0u;
  *(_OWORD *)&v2[119].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[120].__shared_owners_ = 0u;
  v2[121].__shared_owners_ = 850045863;
  HIBYTE(v2[125].__shared_weak_owners_) = 0;
  LOBYTE(v2[125].__vftable) = 0;
  *(_OWORD *)&v2[121].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v2[122].__shared_owners_ = 0u;
  v2[123].std::__shared_count = 0u;
  *(_OWORD *)&v2[123].__shared_weak_owners_ = 0u;
  *(std::__shared_count *)((char *)&v2[124].std::__shared_count + 4) = 0u;
  atomic_store(0, (unsigned __int8 *)&v2[117]);
  atomic_store(0, (unsigned __int8 *)&v2[117].__vftable + 1);
  atomic_store(0, (unsigned __int8 *)&v2[117].__vftable + 2);
  atomic_store(0, (unsigned __int8 *)&v2[117].__vftable + 3);
  std::promise<void>::get_future((std::promise<void> *)&v2[117].__shared_owners_);
  state = v19.__state_;
  v8 = (std::__assoc_sub_state *)v2[118].__vftable;
  v19.__state_ = 0;
  v20.__state_ = v8;
  v2[118].__vftable = (std::__shared_weak_count_vtbl *)state;
  std::future<void>::~future(&v20);
  std::future<void>::~future(&v19);
  std::promise<void>::get_future((std::promise<void> *)&v2[117].__shared_weak_owners_);
  v9 = v19.__state_;
  shared_owners = (std::__assoc_sub_state *)v2[118].__shared_owners_;
  v19.__state_ = 0;
  v20.__state_ = shared_owners;
  v2[118].__shared_owners_ = (uint64_t)v9;
  std::future<void>::~future(&v20);
  std::future<void>::~future(&v19);
  HIDWORD(v2[12].__vftable) = 1024;
  HIDWORD(v2[13].__shared_weak_owners_) = 1024;
  HIDWORD(v2[15].__shared_owners_) = 1024;
  LODWORD(v2[18].__vftable) = 20;
  LODWORD(v2[16].__shared_weak_owners_) = 20;
  *a1 = v2 + 1;
  a1[1] = v2;
  v11 = (std::__shared_weak_count *)v2[1].__shared_owners_;
  if (v11)
  {
    if (v11->__shared_owners_ != -1)
      return;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)&v2[1];
    v2[1].__shared_owners_ = (uint64_t)v2;
    std::__shared_weak_count::__release_weak(v11);
  }
  else
  {
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v16 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)&v2[1];
    v2[1].__shared_owners_ = (uint64_t)v2;
  }
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_19FB22CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, std::mutex *a11, std::mutex *a12, std::mutex *a13, std::mutex *a14, std::mutex *a15, std::mutex *a16, std::mutex *a17, std::mutex *a18, std::mutex *a19, std::mutex *a20,std::mutex *a21,std::mutex *a22,std::mutex *a23,std::mutex *a24,std::mutex *a25,std::mutex *a26,std::mutex *a27,std::mutex *a28,std::mutex *a29,std::mutex *a30,std::mutex *a31,std::mutex *a32)
{
  uint64_t v32;
  pthread_rwlock_t *v33;
  uint64_t v34;
  uint64_t v35;
  std::future<void> *v36;
  std::mutex *v37;
  uint64_t v38;
  std::__shared_weak_count *v40;
  void *v41;

  *(_QWORD *)(v38 - 176) = v32 + 2976;
  *(_QWORD *)(v38 - 168) = v32 + 2912;
  if (*(char *)(v32 + 3023) < 0)
    operator delete(*(void **)(v32 + 3000));
  std::unique_ptr<std::vector<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t **)(v32 + 2984));
  std::unique_ptr<std::vector<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator>>>::~unique_ptr[abi:nn180100](*(uint64_t ***)(v38 - 176));
  std::mutex::~mutex(*(std::mutex **)(v38 - 168));
  std::mutex::~mutex((std::mutex *)(v32 + 2848));
  std::future<void>::~future((std::future<void> *)(v32 + 2840));
  std::future<void>::~future(v36);
  MEMORY[0x1A1AF4CB0](v35);
  MEMORY[0x1A1AF4CB0](v34);
  std::__hash_table<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::__unordered_map_hasher<gss::StyleSheetResultCacheKey,std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::hash<gss::StyleSheetResultCacheKey>,std::equal_to<gss::StyleSheetResultCacheKey>,true>,std::__unordered_map_equal<gss::StyleSheetResultCacheKey,std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::equal_to<gss::StyleSheetResultCacheKey>,std::hash<gss::StyleSheetResultCacheKey>,true>,geo::StdAllocator<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,gss::Allocator>>::~__hash_table((gss::Allocator *)(v32 + 2752));
  geo::read_write_lock::~read_write_lock(v33);
  *(_QWORD *)(v38 - 176) = v32 + 632;
  *(_QWORD *)(v38 - 168) = v32 + 568;
  std::mutex::~mutex((std::mutex *)(v32 + 2488));
  std::mutex::~mutex((std::mutex *)(v32 + 2424));
  std::mutex::~mutex((std::mutex *)(v32 + 2360));
  std::mutex::~mutex((std::mutex *)(v32 + 2296));
  std::mutex::~mutex((std::mutex *)(v32 + 2232));
  std::mutex::~mutex((std::mutex *)(v32 + 2168));
  std::mutex::~mutex((std::mutex *)(v32 + 2104));
  std::mutex::~mutex((std::mutex *)(v32 + 2040));
  std::mutex::~mutex((std::mutex *)(v32 + 1976));
  std::mutex::~mutex((std::mutex *)(v32 + 1912));
  std::mutex::~mutex((std::mutex *)(v32 + 1848));
  std::mutex::~mutex((std::mutex *)(v32 + 1784));
  std::mutex::~mutex((std::mutex *)(v32 + 1720));
  std::mutex::~mutex((std::mutex *)(v32 + 1656));
  std::mutex::~mutex((std::mutex *)(v32 + 1592));
  std::mutex::~mutex((std::mutex *)(v32 + 1528));
  std::mutex::~mutex((std::mutex *)(v32 + 1464));
  std::mutex::~mutex((std::mutex *)(v32 + 1400));
  std::mutex::~mutex((std::mutex *)(v32 + 1336));
  std::mutex::~mutex((std::mutex *)(v32 + 1272));
  std::mutex::~mutex((std::mutex *)(v32 + 1208));
  std::mutex::~mutex((std::mutex *)(v32 + 1144));
  std::mutex::~mutex((std::mutex *)(v32 + 1080));
  std::mutex::~mutex((std::mutex *)(v32 + 1016));
  std::mutex::~mutex((std::mutex *)(v32 + 952));
  std::mutex::~mutex((std::mutex *)(v32 + 888));
  std::mutex::~mutex((std::mutex *)(v32 + 824));
  std::mutex::~mutex((std::mutex *)(v32 + 760));
  std::mutex::~mutex((std::mutex *)(v32 + 696));
  std::mutex::~mutex(*(std::mutex **)(v38 - 176));
  std::mutex::~mutex(*(std::mutex **)(v38 - 168));
  std::mutex::~mutex((std::mutex *)(v32 + 504));
  gss::InternAllocators<gss::PropertyID>::~InternAllocators((_QWORD *)(v32 + 256));
  std::mutex::~mutex(v37);
  std::unique_ptr<gss::StyleMatchingTree<gss::CartoStyle<gss::PropertyID>>>::~unique_ptr[abi:nn180100](*(uint64_t **)(v38 - 160));
  geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::~intern_vector(*(_QWORD **)(v38 - 152));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](*(_QWORD *)(v38 - 144));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](*(_QWORD *)(v38 - 136));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](*(_QWORD *)(v38 - 128));
  geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::~intern_vector(*(_QWORD **)(v38 - 120));
  if (*(char *)(v32 + 79) < 0)
    operator delete(*(void **)(v32 + 56));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](*(_QWORD *)(v38 - 112));
  v40 = *(std::__shared_weak_count **)(v32 + 32);
  if (v40)
    std::__shared_weak_count::__release_weak(v40);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v32);
  operator delete(v41);
  _Unwind_Resume(a1);
}

_QWORD *gss::StyleSheet<gss::ScenePropertyID>::construct(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, char a5, char a6, uint64_t *a7, uint64_t *a8, float a9, char a10, _QWORD *a11)
{
  std::__shared_weak_count *v12;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  char v27;
  __int128 v28;
  void *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  std::ios_base *v52;
  uint64_t v53;
  _QWORD *result;
  char *v55;
  _BYTE *v56;
  NSObject *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[25];
  _QWORD v63[3];
  _QWORD *v64;
  _BYTE v65[24];
  _BYTE *v66;
  uint64_t block;
  _QWORD v68[3];
  _BYTE v69[24];
  _BYTE *v70;
  __int128 __p;
  __int128 v72;
  int v73;
  _QWORD v74[21];

  v74[19] = *MEMORY[0x1E0C80C00];
  v12 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v12 || (v21 = *(_QWORD *)a1, (v22 = std::__shared_weak_count::lock(v12)) == 0))
    std::__throw_bad_weak_ptr[abi:nn180100]();
  v23 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v21;
  *(_QWORD *)(a1 + 24) = v22;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_BYTE *)(a1 + 80) = a6;
  v26 = (void **)(a1 + 32);
  if ((void **)(a1 + 32) != a4)
  {
    v27 = *((_BYTE *)a4 + 23);
    if (*(char *)(a1 + 55) < 0)
    {
      if (v27 >= 0)
        v29 = a4;
      else
        v29 = *a4;
      if (v27 >= 0)
        v30 = *((unsigned __int8 *)a4 + 23);
      else
        v30 = (size_t)a4[1];
      std::string::__assign_no_alias<false>(v26, v29, v30);
    }
    else if ((*((_BYTE *)a4 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v26, *a4, (size_t)a4[1]);
    }
    else
    {
      v28 = *(_OWORD *)a4;
      *(_QWORD *)(a1 + 48) = a4[2];
      *(_OWORD *)v26 = v28;
    }
  }
  *(float *)(a1 + 56) = a9;
  *(_BYTE *)(a1 + 60) = a5;
  v32 = *a7;
  v31 = a7[1];
  if (v31)
  {
    v33 = (unint64_t *)(v31 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = *(std::__shared_weak_count **)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v32;
  *(_QWORD *)(a1 + 96) = v31;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = *a8;
  v39 = a8[1];
  if (v39)
  {
    v40 = (unint64_t *)(v39 + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = *(std::__shared_weak_count **)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v38;
  *(_QWORD *)(a1 + 112) = v39;
  if (!v42)
    goto LABEL_35;
  v43 = (unint64_t *)&v42->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    if (!a2)
      goto LABEL_41;
  }
  else
  {
LABEL_35:
    if (!a2)
    {
LABEL_41:
      v47 = MEMORY[0x1E0DE4FE0];
      v48 = MEMORY[0x1E0DE4FE0] + 64;
      v49 = (uint64_t *)MEMORY[0x1E0DE4F60];
      v50 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v51 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v74[0] = MEMORY[0x1E0DE4FE0] + 64;
      block = v50;
      *(_QWORD *)((char *)&v68[-1] + *(_QWORD *)(v50 - 24)) = v51;
      v52 = (std::ios_base *)((char *)&v68[-1] + *(_QWORD *)(block - 24));
      std::ios_base::init(v52, v68);
      v52[1].__vftable = 0;
      v52[1].__fmtflags_ = -1;
      block = v47 + 24;
      v74[0] = v48;
      std::streambuf::basic_streambuf();
      v53 = MEMORY[0x1E0DE4FB8];
      v68[0] = MEMORY[0x1E0DE4FB8] + 16;
      __p = 0u;
      v72 = 0u;
      v73 = 16;
      gss::StyleSheet<gss::ScenePropertyID>::didFinishDecodingGlobalProperties(a1, 0);
      gss::StyleSheet<gss::ScenePropertyID>::didFinishDecodingEverything(a1, 0, (uint64_t)a11, (uint64_t)&block);
      block = *v49;
      *(_QWORD *)((char *)&v68[-1] + *(_QWORD *)(block - 24)) = v49[3];
      v68[0] = v53 + 16;
      if (SBYTE7(v72) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1A1AF4D64](v74);
    }
  }
  if (!a3)
    goto LABEL_41;
  *(_QWORD *)v62 = a1;
  *(_QWORD *)&v62[8] = a2;
  *(_QWORD *)&v62[16] = a3;
  v62[24] = a10;
  v45 = v63;
  v46 = (_QWORD *)a11[3];
  if (v46)
  {
    if (v46 == a11)
    {
      v64 = v63;
      (*(void (**)(_QWORD *, _QWORD *))(*a11 + 24))(a11, v63);
    }
    else
    {
      v64 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v46 + 16))(v46);
    }
  }
  else
  {
    v64 = 0;
  }
  v66 = 0;
  v55 = (char *)operator new(0x48uLL);
  v56 = v55;
  *(_QWORD *)v55 = &off_1E42D8240;
  *(_OWORD *)(v55 + 8) = *(_OWORD *)v62;
  *(_OWORD *)(v55 + 17) = *(_OWORD *)&v62[9];
  if (v64)
  {
    if (v64 == v63)
    {
      *((_QWORD *)v55 + 8) = v55 + 40;
      (*(void (**)(_QWORD *))(v63[0] + 24))(v63);
    }
    else
    {
      *((_QWORD *)v55 + 8) = v64;
      v64 = 0;
    }
  }
  else
  {
    *((_QWORD *)v55 + 8) = 0;
  }
  v66 = v56;
  if (gss::StyleSheet<gss::ScenePropertyID>::loadQueue(BOOL)::onceToken != -1)
    dispatch_once(&gss::StyleSheet<gss::ScenePropertyID>::loadQueue(BOOL)::onceToken, &__block_literal_global_75);
  v57 = (id)gss::StyleSheet<gss::ScenePropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  block = MEMORY[0x1E0C809B0];
  v68[0] = 3321888768;
  v68[1] = ___ZN3gss10StyleSheetINS_15ScenePropertyIDEE13dispatch_loadEbNSt3__18functionIFvvEEE_block_invoke;
  v68[2] = &__block_descriptor_64_ea8_32c27_ZTSNSt3__18functionIFvvEEE_e5_v8__0l;
  v70 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v56 + 16))(v56);
  dispatch_async(v57, &block);

  v58 = v70;
  if (v70 == v69)
  {
    v59 = 4;
    v58 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_58;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_58:
  result = v66;
  if (v66 == v65)
  {
    v60 = 4;
    result = v65;
    goto LABEL_62;
  }
  if (v66)
  {
    v60 = 5;
LABEL_62:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v60))();
  }
  if (v64 == v63)
  {
    v61 = 4;
  }
  else
  {
    if (!v64)
      return result;
    v61 = 5;
    v45 = v64;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v45 + 8 * v61))(v45);
}

void sub_19FB234B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  _QWORD *v21;
  void *v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v24 = a21;
  if (a21 == &a18)
  {
    v25 = 4;
    v24 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  if (a17 == v21)
  {
    v26 = 4;
  }
  else
  {
    if (!a17)
      _Unwind_Resume(a1);
    v26 = 5;
    v21 = a17;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v26))(v21);
  _Unwind_Resume(a1);
}

void sub_19FB2355C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<gss::StylesheetManager<gss::ScenePropertyID> *,std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>>::__shared_ptr_default_delete<gss::StylesheetManager<gss::ScenePropertyID>,gss::StylesheetManager<gss::ScenePropertyID>>,std::allocator<gss::StylesheetManager<gss::ScenePropertyID>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E42D8240;
  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E42D8240;
  v1 = a1 + 5;
  v2 = (_QWORD *)a1[8];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  *(_QWORD *)a2 = &off_1E42D8240;
  v3 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 17) = *(_OWORD *)(result + 17);
  *(_OWORD *)(a2 + 8) = v3;
  v4 = *(_QWORD *)(result + 64);
  if (v4)
  {
    if (v4 == result + 40)
    {
      *(_QWORD *)(a2 + 64) = a2 + 40;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 64) + 24))(*(_QWORD *)(result + 64));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 64));
      *(_QWORD *)(a2 + 64) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 64) = 0;
  }
  return result;
}

_QWORD *std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t std::sort[abi:nn180100]<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode *,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&)#1}>(uint64_t a1, int32x2_t *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 126 - 2 * __clz(((uint64_t)a2 - a1) >> 2);
  if (a2 == (int32x2_t *)a1)
    v3 = 0;
  else
    v3 = v2;
  return std::__introsort<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode*,false>(a1, a2, v3, 1);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode*>(int32x2_t *a1, int32x2_t *a2)
{
  uint64_t v2;
  __int32 v3;
  int32x2_t *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  __int32 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  __int32 v14;
  unsigned int v15;
  __int32 v16;
  __int32 v17;
  __int32 v18;
  __int32 v19;
  __int32 v20;
  __int32 v21;
  unsigned __int16 *v22;
  uint64_t v23;
  int v24;
  int32x2_t *v25;
  __int32 v26;
  uint64_t v27;
  unsigned int v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  __int32 v32;

  v2 = 1;
  switch(((char *)a2 - (char *)a1) >> 2)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      if (a2[-1].u16[2] >= a1->u16[0])
        return 1;
      v3 = a1->i32[0];
      goto LABEL_9;
    case 3:
      v9 = a1->u16[2];
      v10 = a2[-1].u16[2];
      if (v9 >= a1->u16[0])
      {
        if (v10 < v9)
        {
          v19 = a1->i32[1];
          a1->i32[1] = a2[-1].i32[1];
          a2[-1].i32[1] = v19;
          if (a1->u16[2] < a1->u16[0])
            *a1 = vrev64_s32(*a1);
        }
      }
      else
      {
        v3 = a1->i32[0];
        if (v10 >= v9)
        {
          a1->i32[0] = a1->i32[1];
          a1->i32[1] = v3;
          if (a2[-1].u16[2] < (unsigned __int16)v3)
          {
            a1->i32[1] = a2[-1].i32[1];
            a2[-1].i32[1] = v3;
          }
        }
        else
        {
LABEL_9:
          a1->i32[0] = a2[-1].i32[1];
          a2[-1].i32[1] = v3;
        }
      }
      return 1;
    case 4:
      v11 = a1->u16[2];
      v12 = a1->u16[0];
      v13 = a1[1].u16[0];
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          v13 = a1->u32[1];
          v20 = a1[1].i32[0];
          a1->i32[1] = v20;
          a1[1].i32[0] = v13;
          v13 = (unsigned __int16)v13;
          if (v12 > (unsigned __int16)v20)
          {
            v21 = a1->i32[0];
            a1->i32[0] = v20;
            a1->i32[1] = v21;
          }
        }
      }
      else
      {
        v14 = a1->i32[0];
        v15 = (unsigned __int16)a1->i32[0];
        if (v13 >= v11)
        {
          a1->i32[0] = a1->i32[1];
          a1->i32[1] = v14;
          if (v13 >= v15)
            goto LABEL_41;
          a1->i32[1] = a1[1].i32[0];
        }
        else
        {
          a1->i32[0] = a1[1].i32[0];
        }
        a1[1].i32[0] = v14;
        v13 = v15;
      }
LABEL_41:
      if (a2[-1].u16[2] < v13)
      {
        v29 = a1[1].i32[0];
        a1[1].i32[0] = a2[-1].i32[1];
        a2[-1].i32[1] = v29;
        if (a1[1].u16[0] < a1->u16[2])
        {
          v31 = a1->i32[1];
          v30 = a1[1].i32[0];
          a1->i32[1] = v30;
          a1[1].i32[0] = v31;
          if (a1->u16[0] > (unsigned __int16)v30)
          {
            v32 = a1->i32[0];
            a1->i32[0] = v30;
            a1->i32[1] = v32;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode*>((unsigned __int16 *)a1, (unsigned __int16 *)a1 + 2, (unsigned int *)&a1[1], (unsigned int *)&a1[1] + 1, (unsigned int *)&a2[-1] + 1);
      return 1;
    default:
      v4 = a1 + 1;
      v5 = a1[1].u16[0];
      v6 = a1->u16[2];
      v7 = a1->u16[0];
      if (v6 >= v7)
      {
        if (v5 < v6)
        {
          v17 = a1->i32[1];
          v16 = a1[1].i32[0];
          a1->i32[1] = v16;
          a1[1].i32[0] = v17;
          if (v7 > (unsigned __int16)v16)
          {
            v18 = a1->i32[0];
            a1->i32[0] = v16;
            a1->i32[1] = v18;
          }
        }
      }
      else
      {
        v8 = a1->i32[0];
        if (v5 >= v6)
        {
          a1->i32[0] = a1->i32[1];
          a1->i32[1] = v8;
          if (v5 >= (unsigned __int16)v8)
            goto LABEL_26;
          a1->i32[1] = a1[1].i32[0];
        }
        else
        {
          a1->i32[0] = a1[1].i32[0];
        }
        a1[1].i32[0] = v8;
      }
LABEL_26:
      v22 = (unsigned __int16 *)&a1[1] + 2;
      if (&a1[1].u8[4] == (unsigned __int8 *)a2)
        return 1;
      v23 = 0;
      v24 = 0;
      break;
  }
  while (1)
  {
    if (*v22 < v4->u16[0])
    {
      v26 = *(_DWORD *)v22;
      v27 = v23;
      do
      {
        *(__int32 *)((char *)&a1[1].i32[1] + v27) = *(__int32 *)((char *)a1[1].i32 + v27);
        if (v27 == -8)
        {
          v25 = a1;
          goto LABEL_29;
        }
        v28 = *(unsigned __int16 *)((char *)&a1->u16[2] + v27);
        v27 -= 4;
      }
      while (v28 > (unsigned __int16)v26);
      v25 = (int32x2_t *)((char *)a1 + v27 + 12);
LABEL_29:
      v25->i32[0] = v26;
      if (++v24 == 8)
        return v22 + 2 == (unsigned __int16 *)a2;
    }
    v4 = (int32x2_t *)v22;
    v23 += 4;
    v22 += 2;
    if (v22 == (unsigned __int16 *)a2)
      return 1;
  }
}

uint64_t gss::CartoStyle<gss::ScenePropertyID>::~CartoStyle(uint64_t a1)
{
  gss::Allocator *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a1 = &off_1E42C28A8;
  v2 = *(gss::Allocator **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v2)
    v2 = (gss::Allocator *)MEMORY[0x1A1AF4DE8](v2, 0x1000C8077774924);
  v3 = *(std::__shared_weak_count **)(a1 + 96);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = *(std::__shared_weak_count **)(a1 + 80);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = *(std::__shared_weak_count **)(a1 + 80);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = (uint64_t *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 68))
  {
    v10 = *v9;
    if (*v9)
    {
      if (*(_WORD *)(a1 + 64))
      {
        v11 = v10 + 16 * *(unsigned __int16 *)(a1 + 64);
        do
        {
          v12 = *(std::__shared_weak_count **)(v10 + 8);
          if (v12)
          {
            v13 = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 += 16;
        }
        while (v10 != v11);
      }
      v15 = gss::Allocator::instance(v2);
      v2 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v15 + 40))(v15, *(_QWORD *)(a1 + 56), 16 * *(unsigned __int16 *)(a1 + 66));
    }
  }
  *(_QWORD *)(a1 + 61) = 0;
  *v9 = 0;
  v16 = (uint64_t *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 52))
  {
    v17 = *v16;
    if (*v16)
    {
      if (*(_WORD *)(a1 + 48))
      {
        v18 = v17 + 24 * *(unsigned __int16 *)(a1 + 48);
        do
        {
          v19 = *(std::__shared_weak_count **)(v17 + 16);
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          v17 += 24;
        }
        while (v17 != v18);
      }
      v22 = gss::Allocator::instance(v2);
      v2 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v22 + 40))(v22, *(_QWORD *)(a1 + 40), 24 * *(unsigned __int16 *)(a1 + 50));
    }
  }
  *(_QWORD *)(a1 + 45) = 0;
  *v16 = 0;
  v23 = (_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(a1 + 36) && *v23)
  {
    v24 = gss::Allocator::instance(v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v24 + 40))(v24, *(_QWORD *)(a1 + 24), 4 * *(unsigned __int16 *)(a1 + 34));
  }
  *(_QWORD *)(a1 + 29) = 0;
  *v23 = 0;
  v25 = *(std::__shared_weak_count **)(a1 + 16);
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  return a1;
}

uint64_t gss::ConditionalStyle<gss::ScenePropertyID>::~ConditionalStyle(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1;
  *(_QWORD *)a1 = &off_1E42C29A8;
  v2 = (_QWORD *)(a1 + 128);
  if (!*(_BYTE *)(a1 + 140) && *v2)
  {
    if (*(_WORD *)(a1 + 136))
    {
      v3 = 24 * *(unsigned __int16 *)(a1 + 136);
      v4 = (_BYTE *)(*v2 + 20);
      do
      {
        v5 = v4 - 12;
        if (!*v4 && *v5)
        {
          v6 = gss::Allocator::instance((gss::Allocator *)a1);
          a1 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(v4 - 12), 4 * *((unsigned __int16 *)v4 - 1));
        }
        *(_QWORD *)(v4 - 7) = 0;
        *v5 = 0;
        v4 += 24;
        v3 -= 24;
      }
      while (v3);
    }
    v7 = gss::Allocator::instance((gss::Allocator *)a1);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(v1 + 128), 24 * *(unsigned __int16 *)(v1 + 138));
  }
  *(_QWORD *)((char *)v2 + 5) = 0;
  *v2 = 0;
  return gss::CartoStyle<gss::ScenePropertyID>::~CartoStyle(v1);
}

void gss::ConditionalStyle<gss::ScenePropertyID>::~ConditionalStyle(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1;
  *(_QWORD *)a1 = &off_1E42C29A8;
  v2 = (_QWORD *)(a1 + 128);
  if (!*(_BYTE *)(a1 + 140) && *v2)
  {
    if (*(_WORD *)(a1 + 136))
    {
      v3 = 24 * *(unsigned __int16 *)(a1 + 136);
      v4 = (_BYTE *)(*v2 + 20);
      do
      {
        v5 = v4 - 12;
        if (!*v4 && *v5)
        {
          v6 = gss::Allocator::instance((gss::Allocator *)a1);
          a1 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(v4 - 12), 4 * *((unsigned __int16 *)v4 - 1));
        }
        *(_QWORD *)(v4 - 7) = 0;
        *v5 = 0;
        v4 += 24;
        v3 -= 24;
      }
      while (v3);
    }
    v7 = gss::Allocator::instance((gss::Allocator *)a1);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(v1 + 128), 24 * *(unsigned __int16 *)(v1 + 138));
  }
  *(_QWORD *)((char *)v2 + 5) = 0;
  *v2 = 0;
  gss::CartoStyle<gss::ScenePropertyID>::~CartoStyle(v1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gss::ConditionalStyle<gss::ScenePropertyID>::to_string@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const std::ios_base *v14;
  void *rdbuf;
  std::ios_base::fmtflags fmtflags;
  int v17;
  const std::locale::facet *v18;
  char *v19;
  uint64_t width;
  BOOL v21;
  uint64_t v22;
  size_t v23;
  std::locale::__imp *p_b;
  uint64_t v25;
  uint64_t v26;
  void *locale;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  size_t v31;
  unint64_t v32;
  const void **v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD *__dst;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  _QWORD v44[3];
  _QWORD v45[3];
  uint64_t v46;
  unint64_t v47;
  void *__p;
  char v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  char v53;
  _BYTE v54[16];
  std::locale __b;
  size_t v56;
  int64_t v57;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v43);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 144) + 104))
    v4 = *(const char **)(*(_QWORD *)(a1 + 144) + 104);
  else
    v4 = "";
  v5 = strlen(v4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)v4, v5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)"-condStyle-", 11);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__b.__locale_) = 45;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)&__b, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)"-{", 2);
  __dst = a2;
  if (*(_WORD *)(a1 + 136))
  {
    v8 = *(_QWORD *)(a1 + 128);
    v41 = v8 + 24 * *(unsigned __int16 *)(a1 + 136);
    while (1)
    {
      LOBYTE(__b.__locale_) = 64;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)&__b, 1);
      v9 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__b.__locale_) = 61;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)&__b, 1);
      v42 = v8;
      v10 = *(unsigned __int16 *)(v8 + 16);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(v42 + 8);
        std::ostream::operator<<();
        if ((_DWORD)v10 != 1)
          break;
      }
LABEL_40:
      LOBYTE(__b.__locale_) = 59;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)&__b, 1);
      v8 = v42 + 24;
      if (v42 + 24 == v41)
        goto LABEL_41;
    }
    v12 = v11 + 4;
    v13 = 4 * v10 - 4;
    while (1)
    {
      v53 = 44;
      MEMORY[0x1A1AF49E0](v54, v44);
      if (v54[0])
      {
        v14 = (const std::ios_base *)((char *)v44 + *(_QWORD *)(v44[0] - 24));
        rdbuf = v14->__rdbuf_;
        fmtflags = v14->__fmtflags_;
        v17 = v14[1].__fmtflags_;
        if (v17 == -1)
        {
          std::ios_base::getloc(v14);
          v18 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 32);
          std::locale::~locale(&__b);
          v14[1].__fmtflags_ = v17;
        }
        if ((fmtflags & 0xB0) == 0x20)
          v19 = v54;
        else
          v19 = &v53;
        if (!rdbuf)
          goto LABEL_38;
        width = v14->__width_;
        v21 = width <= 1;
        v22 = width - 1;
        v23 = v21 ? 0 : v22;
        if (v19 - &v53 >= 1
          && (*(uint64_t (**)(void *, char *, int64_t))(*(_QWORD *)rdbuf + 96))(rdbuf, &v53, v19 - &v53) != v19 - &v53)
        {
          goto LABEL_38;
        }
        if ((uint64_t)v23 >= 1)
        {
          if (v23 > 0x7FFFFFFFFFFFFFF7)
            abort();
          if (v23 >= 0x17)
          {
            v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v23 | 7) != 0x17)
              v25 = v23 | 7;
            v26 = v25 + 1;
            p_b = (std::locale::__imp *)operator new(v25 + 1);
            v56 = v23;
            v57 = v26 | 0x8000000000000000;
            __b.__locale_ = p_b;
          }
          else
          {
            HIBYTE(v57) = v23;
            p_b = (std::locale::__imp *)&__b;
          }
          memset(p_b, v17, v23);
          *((_BYTE *)p_b + v23) = 0;
          if (v57 >= 0)
            locale = &__b;
          else
            locale = __b.__locale_;
          v28 = (*(uint64_t (**)(void *, void *, size_t))(*(_QWORD *)rdbuf + 96))(rdbuf, locale, v23);
          v29 = v28;
          if (SHIBYTE(v57) < 0)
          {
            operator delete(__b.__locale_);
            if (v29 != v23)
              goto LABEL_38;
          }
          else if (v28 != v23)
          {
            goto LABEL_38;
          }
        }
        if (v54 - v19 >= 1
          && (*(uint64_t (**)(void *, char *, int64_t))(*(_QWORD *)rdbuf + 96))(rdbuf, v19, v54 - v19) != v54 - v19)
        {
LABEL_38:
          std::ios_base::clear((std::ios_base *)((char *)v44 + *(_QWORD *)(v44[0] - 24)), *(_DWORD *)((char *)&v45[1] + *(_QWORD *)(v44[0] - 24)) | 5);
          goto LABEL_39;
        }
        v14->__width_ = 0;
      }
LABEL_39:
      MEMORY[0x1A1AF49EC](v54);
      std::ostream::operator<<();
      v12 += 4;
      v13 -= 4;
      if (!v13)
        goto LABEL_40;
    }
  }
LABEL_41:
  LOBYTE(__b.__locale_) = 125;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)&__b, 1);
  v30 = __dst;
  if ((v51 & 0x10) != 0)
  {
    v32 = v50;
    if (v50 < v47)
    {
      v50 = v47;
      v32 = v47;
    }
    v33 = (const void **)&v46;
  }
  else
  {
    if ((v51 & 8) == 0)
    {
      v31 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_56;
    }
    v33 = (const void **)v45;
    v32 = v45[2];
  }
  v34 = *v33;
  v31 = v32 - (_QWORD)*v33;
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v31 >= 0x17)
  {
    v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v35 = v31 | 7;
    v36 = v35 + 1;
    v37 = operator new(v35 + 1);
    __dst[1] = v31;
    __dst[2] = v36 | 0x8000000000000000;
    *__dst = v37;
    v30 = v37;
    goto LABEL_55;
  }
  *((_BYTE *)__dst + 23) = v31;
  if (v31)
LABEL_55:
    memmove(v30, v34, v31);
LABEL_56:
  *((_BYTE *)v30 + v31) = 0;
  v43[0] = *MEMORY[0x1E0DE4F50];
  v38 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v44[0] = v38;
  v44[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v49 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v52);
}

void sub_19FB24300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void gss::CartoStyle<gss::ScenePropertyID>::~CartoStyle(uint64_t a1)
{
  gss::CartoStyle<gss::ScenePropertyID>::~CartoStyle(a1);
  JUMPOUT(0x1A1AF4E00);
}

void gss::CartoStyle<gss::ScenePropertyID>::to_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  const char *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string __dst;
  std::string v13;

  if (*(_QWORD *)(a1 + 104))
    v3 = *(const char **)(a1 + 104);
  else
    v3 = "";
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_11;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_11:
    memmove(p_dst, v3, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v9 = std::string::insert(&__dst, 0, "[", 1uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v13, "]", 1uLL);
  *a2 = *v11;
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_16:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_16;
}

void sub_19FB244D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<gss::ConditionalStyle<gss::ScenePropertyID>,geo::StdAllocator<gss::ConditionalStyle<gss::ScenePropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5B20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gss::ConditionalStyle<gss::ScenePropertyID>,geo::StdAllocator<gss::ConditionalStyle<gss::ScenePropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5B20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gss::ConditionalStyle<gss::ScenePropertyID>,geo::StdAllocator<gss::ConditionalStyle<gss::ScenePropertyID>,gss::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<gss::ConditionalStyle<gss::ScenePropertyID>,geo::StdAllocator<gss::ConditionalStyle<gss::ScenePropertyID>,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 192);
}

void std::__shared_ptr_emplace<gss::CartoStyle<gss::ScenePropertyID>,geo::StdAllocator<gss::CartoStyle<gss::ScenePropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gss::CartoStyle<gss::ScenePropertyID>,geo::StdAllocator<gss::CartoStyle<gss::ScenePropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5998;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gss::CartoStyle<gss::ScenePropertyID>,geo::StdAllocator<gss::CartoStyle<gss::ScenePropertyID>,gss::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<gss::CartoStyle<gss::ScenePropertyID>,geo::StdAllocator<gss::CartoStyle<gss::ScenePropertyID>,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 160);
}

void std::__shared_ptr_emplace<gss::StylePropertySet<gss::ScenePropertyID>,geo::StdAllocator<gss::StylePropertySet<gss::ScenePropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5C00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gss::StylePropertySet<gss::ScenePropertyID>,geo::StdAllocator<gss::StylePropertySet<gss::ScenePropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5C00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gss::StylePropertySet<gss::ScenePropertyID>,geo::StdAllocator<gss::StylePropertySet<gss::ScenePropertyID>,gss::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return gss::StylePropertySet<gss::PropertyID>::~StylePropertySet(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<gss::StylePropertySet<gss::ScenePropertyID>,geo::StdAllocator<gss::StylePropertySet<gss::ScenePropertyID>,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 112);
}

void std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2}>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42DA448;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2}>,void ()(BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42DA448;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42DA490;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42DA490;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> gss::StyleManagerExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> gss::StyleManagerExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> gss::StyleManagerExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> gss::StyleManagerExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D8360;
  return result;
}

void std::__function::__func<std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> gss::StyleManagerExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> gss::StyleManagerExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D8360;
}

void std::__shared_ptr_emplace<gss::StyleSheet<gss::ScenePropertyID>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gss::StyleSheet<gss::ScenePropertyID>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5A08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<gss::StyleSheet<gss::ScenePropertyID>>::__on_zero_shared(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  geo::read_write_lock *v16;
  const char *v17;
  gss::Allocator *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;

  if (*(char *)(a1 + 3023) < 0)
    operator delete(*(void **)(a1 + 3000));
  v2 = *(uint64_t **)(a1 + 2984);
  *(_QWORD *)(a1 + 2984) = 0;
  if (v2)
  {
    v3 = *v2;
    if (!*v2)
    {
LABEL_15:
      MEMORY[0x1A1AF4E00](v2, 0x20C40DC1BFBCFLL);
      goto LABEL_16;
    }
    v4 = v2[1];
    v5 = *v2;
    if (v4 == v3)
    {
LABEL_14:
      v2[1] = v3;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[3] + 40))(v2[3], v5, v2[2] - v5);
      goto LABEL_15;
    }
    while (1)
    {
      v8 = v4 - 32;
      v6 = *(_QWORD **)(v4 - 8);
      if ((_QWORD *)(v4 - 32) == v6)
      {
        v6 = (_QWORD *)(v4 - 32);
        v7 = 4;
      }
      else
      {
        if (!v6)
          goto LABEL_9;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_9:
      v4 = v8;
      if (v8 == v3)
      {
        v5 = *v2;
        goto LABEL_14;
      }
    }
  }
LABEL_16:
  v9 = *(uint64_t **)(a1 + 2976);
  *(_QWORD *)(a1 + 2976) = 0;
  if (!v9)
    goto LABEL_29;
  v10 = *v9;
  if (*v9)
  {
    v11 = v9[1];
    v12 = *v9;
    if (v11 == v10)
    {
LABEL_27:
      v9[1] = v10;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[3] + 40))(v9[3], v12, v9[2] - v12);
      goto LABEL_28;
    }
    while (1)
    {
      v15 = v11 - 32;
      v13 = *(_QWORD **)(v11 - 8);
      if ((_QWORD *)(v11 - 32) == v13)
      {
        v13 = (_QWORD *)(v11 - 32);
        v14 = 4;
      }
      else
      {
        if (!v13)
          goto LABEL_22;
        v14 = 5;
      }
      (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_22:
      v11 = v15;
      if (v15 == v10)
      {
        v12 = *v9;
        goto LABEL_27;
      }
    }
  }
LABEL_28:
  MEMORY[0x1A1AF4E00](v9, 0x20C40DC1BFBCFLL);
LABEL_29:
  std::mutex::~mutex((std::mutex *)(a1 + 2912));
  std::mutex::~mutex((std::mutex *)(a1 + 2848));
  std::future<void>::~future((std::future<void> *)(a1 + 2840));
  std::future<void>::~future((std::future<void> *)(a1 + 2832));
  MEMORY[0x1A1AF4CB0](a1 + 2824);
  MEMORY[0x1A1AF4CB0](a1 + 2816);
  std::__hash_table<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::__unordered_map_hasher<gss::StyleSheetResultCacheKey,std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::hash<gss::StyleSheetResultCacheKey>,std::equal_to<gss::StyleSheetResultCacheKey>,true>,std::__unordered_map_equal<gss::StyleSheetResultCacheKey,std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::equal_to<gss::StyleSheetResultCacheKey>,std::hash<gss::StyleSheetResultCacheKey>,true>,geo::StdAllocator<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,gss::Allocator>>::~__hash_table((gss::Allocator *)(a1 + 2752));
  v16 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 2552));
  if ((_DWORD)v16)
    geo::read_write_lock::logFailure(v16, (uint64_t)"destruction", v17);
  std::mutex::~mutex((std::mutex *)(a1 + 2488));
  std::mutex::~mutex((std::mutex *)(a1 + 2424));
  std::mutex::~mutex((std::mutex *)(a1 + 2360));
  std::mutex::~mutex((std::mutex *)(a1 + 2296));
  std::mutex::~mutex((std::mutex *)(a1 + 2232));
  std::mutex::~mutex((std::mutex *)(a1 + 2168));
  std::mutex::~mutex((std::mutex *)(a1 + 2104));
  std::mutex::~mutex((std::mutex *)(a1 + 2040));
  std::mutex::~mutex((std::mutex *)(a1 + 1976));
  std::mutex::~mutex((std::mutex *)(a1 + 1912));
  std::mutex::~mutex((std::mutex *)(a1 + 1848));
  std::mutex::~mutex((std::mutex *)(a1 + 1784));
  std::mutex::~mutex((std::mutex *)(a1 + 1720));
  std::mutex::~mutex((std::mutex *)(a1 + 1656));
  std::mutex::~mutex((std::mutex *)(a1 + 1592));
  std::mutex::~mutex((std::mutex *)(a1 + 1528));
  std::mutex::~mutex((std::mutex *)(a1 + 1464));
  std::mutex::~mutex((std::mutex *)(a1 + 1400));
  std::mutex::~mutex((std::mutex *)(a1 + 1336));
  std::mutex::~mutex((std::mutex *)(a1 + 1272));
  std::mutex::~mutex((std::mutex *)(a1 + 1208));
  std::mutex::~mutex((std::mutex *)(a1 + 1144));
  std::mutex::~mutex((std::mutex *)(a1 + 1080));
  std::mutex::~mutex((std::mutex *)(a1 + 1016));
  std::mutex::~mutex((std::mutex *)(a1 + 952));
  std::mutex::~mutex((std::mutex *)(a1 + 888));
  std::mutex::~mutex((std::mutex *)(a1 + 824));
  std::mutex::~mutex((std::mutex *)(a1 + 760));
  std::mutex::~mutex((std::mutex *)(a1 + 696));
  std::mutex::~mutex((std::mutex *)(a1 + 632));
  std::mutex::~mutex((std::mutex *)(a1 + 568));
  std::mutex::~mutex((std::mutex *)(a1 + 504));
  gss::InternAllocators<gss::PropertyID>::~InternAllocators((_QWORD *)(a1 + 256));
  std::mutex::~mutex((std::mutex *)(a1 + 192));
  v18 = *(gss::Allocator **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v18)
  {
    v19 = gss::StyleMatchingTree<gss::CartoStyle<gss::PropertyID>>::~StyleMatchingTree((uint64_t)v18);
    v18 = (gss::Allocator *)MEMORY[0x1A1AF4E00](v19, 0x1020C40FE16DC66);
  }
  v20 = (uint64_t *)(a1 + 168);
  if (!*(_BYTE *)(a1 + 180))
  {
    v21 = *v20;
    if (*v20)
    {
      if (*(_WORD *)(a1 + 176))
      {
        v22 = v21 + 16 * *(unsigned __int16 *)(a1 + 176);
        do
        {
          v23 = *(std::__shared_weak_count **)(v21 + 8);
          if (v23)
          {
            p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldaxr(p_shared_owners);
            while (__stlxr(v25 - 1, p_shared_owners));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          v21 += 16;
        }
        while (v21 != v22);
      }
      v26 = gss::Allocator::instance(v18);
      v18 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v26 + 40))(v26, *(_QWORD *)(a1 + 168), 16 * *(unsigned __int16 *)(a1 + 178));
    }
  }
  *(_QWORD *)(a1 + 173) = 0;
  *v20 = 0;
  v27 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v27)
    goto LABEL_48;
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    v30 = *(std::__shared_weak_count **)(a1 + 136);
    if (!v30)
      goto LABEL_54;
  }
  else
  {
LABEL_48:
    v30 = *(std::__shared_weak_count **)(a1 + 136);
    if (!v30)
      goto LABEL_54;
  }
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_54:
  v33 = *(std::__shared_weak_count **)(a1 + 120);
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (uint64_t *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 100))
  {
    v37 = *v36;
    if (*v36)
    {
      if (*(_WORD *)(a1 + 96))
      {
        v38 = v37 + 16 * *(unsigned __int16 *)(a1 + 96);
        do
        {
          v39 = *(std::__shared_weak_count **)(v37 + 8);
          if (v39)
          {
            v40 = (unint64_t *)&v39->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          v37 += 16;
        }
        while (v37 != v38);
      }
      v42 = gss::Allocator::instance(v18);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v42 + 40))(v42, *(_QWORD *)(a1 + 88), 16 * *(unsigned __int16 *)(a1 + 98));
    }
  }
  *(_QWORD *)(a1 + 93) = 0;
  *v36 = 0;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v43 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v43)
    goto LABEL_76;
  v44 = (unint64_t *)&v43->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (v45)
  {
LABEL_76:
    v46 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v46)
      return;
    goto LABEL_77;
  }
  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
  std::__shared_weak_count::__release_weak(v43);
  v46 = *(std::__shared_weak_count **)(a1 + 32);
  if (v46)
LABEL_77:
    std::__shared_weak_count::__release_weak(v46);
}

uint64_t __Block_byref_object_copy__19729(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19730(uint64_t a1)
{

}

uint64_t std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42D0358;

  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 8) = &off_1E42B5310;

  return a1;
}

void std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42D0358;

  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 8) = &off_1E42B5310;

  JUMPOUT(0x1A1AF4E00);
}

std::string *std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E42D0358;
  return std::__compressed_pair_elem<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},0,false>::__compressed_pair_elem[abi:nn180100]<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1} const&,0ul>((std::string *)(a2 + 8), a1 + 8);
}

void std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy(uint64_t a1)
{

  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 8) = &off_1E42B5310;

}

std::string *std::__compressed_pair_elem<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},0,false>::__compressed_pair_elem[abi:nn180100]<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1} const&,0ul>(std::string *a1, uint64_t a2)
{
  id v4;
  void *size;
  std::string *v6;
  __int128 v7;

  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E42B5310;
  a1->__r_.__value_.__l.__size_ = 0;
  v4 = *(id *)(a2 + 8);
  size = (void *)a1->__r_.__value_.__l.__size_;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)v4;

  v6 = a1 + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 24);
    a1[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  a1[2].__r_.__value_.__r.__words[0] = (std::string::size_type)*(id *)(a2 + 48);
  return a1;
}

void sub_19FB24E80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)v1 = v2;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<gss::ClientStyleState<gss::ScenePropertyID> *,std::shared_ptr<gss::ClientStyleState<gss::ScenePropertyID>>::__shared_ptr_default_delete<gss::ClientStyleState<gss::ScenePropertyID>,gss::ClientStyleState<gss::ScenePropertyID>>,std::allocator<gss::ClientStyleState<gss::ScenePropertyID>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<gss::ClientStyleState<gss::ScenePropertyID> *,std::shared_ptr<gss::ClientStyleState<gss::ScenePropertyID>>::__shared_ptr_default_delete<gss::ClientStyleState<gss::ScenePropertyID>,gss::ClientStyleState<gss::ScenePropertyID>>,std::allocator<gss::ClientStyleState<gss::ScenePropertyID>>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<gss::ClientStyleState<gss::PropertyID>>::operator()[abi:nn180100](*(_QWORD *)(a1 + 24));
}

void _ZNSt3__110__function6__funcIZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__2NS_9allocatorISH_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__2NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C88B8;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__1NS_9allocatorISH_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8870;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8870;
  a2[1] = v2;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::StyleLogicContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::StyleLogicContext *v2;

  *a1 = &off_1E42B0ED8;
  v2 = (md::StyleLogicContext *)a1[4];
  if (v2)
  {
    md::StyleLogicContext::~StyleLogicContext(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::StyleLogicContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::StyleLogicContext *v1;

  *a1 = &off_1E42B0ED8;
  v1 = (md::StyleLogicContext *)a1[4];
  if (v1)
  {
    md::StyleLogicContext::~StyleLogicContext(v1);
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::StyleLogicContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void std::__function::__func<md::StyleLogic::prune(md::PruneLevel)::$_1,std::allocator<md::StyleLogic::prune(md::PruneLevel)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StyleLogic::prune(md::PruneLevel)::$_1,std::allocator<md::StyleLogic::prune(md::PruneLevel)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42C8A68;
  return result;
}

void std::__function::__func<md::StyleLogic::prune(md::PruneLevel)::$_1,std::allocator<md::StyleLogic::prune(md::PruneLevel)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C8A68;
}

void std::__function::__func<md::StyleLogic::prune(md::PruneLevel)::$_1,std::allocator<md::StyleLogic::prune(md::PruneLevel)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  _QWORD *i;
  uint64_t v7;
  uint64_t j;
  geo::read_write_lock *v9;
  const char *v10;
  geo::read_write_lock *v11;
  const char *v12;
  uint64_t *v13;
  geo::read_write_lock *v14;
  const char *v15;
  geo::read_write_lock *v16;
  const char *v17;
  _QWORD *v18;
  geo::read_write_lock *v19;
  const char *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  uint64_t v57;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 16);
  v4 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v3 + 2528));
  if ((_DWORD)v4)
    geo::read_write_lock::logFailure(v4, (uint64_t)"write lock", v5);
  if (*(_QWORD *)(v3 + 2768))
  {
    for (i = *(_QWORD **)(v3 + 2752);
          i;
          v4 = (geo::read_write_lock *)(*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 2760)
                                                                                            + 40))(*(_QWORD *)(v3 + 2760), v53, 48))
    {
      v53 = i;
      i = (_QWORD *)*i;
      v54 = (std::__shared_weak_count *)v53[5];
      if (v54)
      {
        p_shared_owners = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldaxr(p_shared_owners);
        while (__stlxr(v56 - 1, p_shared_owners));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if (!*((_BYTE *)v53 + 30) && v53[2])
      {
        v57 = gss::Allocator::instance(v4);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v57 + 40))(v57, v53[2], *((unsigned __int16 *)v53 + 14));
        v53[2] = 0;
      }
    }
    *(_QWORD *)(v3 + 2752) = 0;
    v7 = *(_QWORD *)(v3 + 2736);
    if (v7)
    {
      for (j = 0; j != v7; ++j)
        *(_QWORD *)(*(_QWORD *)(v3 + 2728) + 8 * j) = 0;
    }
    *(_QWORD *)(v3 + 2768) = 0;
  }
  v9 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v3 + 2528));
  if ((_DWORD)v9)
    geo::read_write_lock::logFailure(v9, (uint64_t)"unlock", v10);
  v11 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v2 + 120));
  if ((_DWORD)v11)
    geo::read_write_lock::logFailure(v11, (uint64_t)"write lock", v12);
  v13 = *(uint64_t **)(v2 + 56);
  if (v13)
  {
    while (1)
    {
      v21 = (std::__shared_weak_count *)v13[9];
      if (!v21)
        goto LABEL_31;
      v22 = std::__shared_weak_count::lock(v21);
      if (!v22)
        goto LABEL_31;
      v23 = v22;
      v24 = v13[8];
      v25 = (unint64_t *)&v22->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (v26)
      {
        if (!v24)
          goto LABEL_31;
LABEL_28:
        v13 = (uint64_t *)*v13;
        if (!v13)
          break;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v23);
        if (v24)
          goto LABEL_28;
LABEL_31:
        v27 = *(int8x8_t *)(v2 + 40);
        v28 = v13[1];
        v29 = (uint8x8_t)vcnt_s8(v27);
        v29.i16[0] = vaddlv_u8(v29);
        if (v29.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&v27)
            v28 %= *(_QWORD *)&v27;
        }
        else
        {
          v28 &= *(_QWORD *)&v27 - 1;
        }
        v30 = (uint64_t *)*v13;
        v31 = *(_QWORD *)(v2 + 32);
        v32 = *(uint64_t **)(v31 + 8 * v28);
        do
        {
          v33 = v32;
          v32 = (uint64_t *)*v32;
        }
        while (v32 != v13);
        if (v33 == (uint64_t *)(v2 + 56))
          goto LABEL_95;
        v34 = v33[1];
        if (v29.u32[0] > 1uLL)
        {
          if (v34 >= *(_QWORD *)&v27)
            v34 %= *(_QWORD *)&v27;
        }
        else
        {
          v34 &= *(_QWORD *)&v27 - 1;
        }
        v35 = (uint64_t *)*v13;
        if (v34 != v28)
        {
LABEL_95:
          if (v30)
          {
            v36 = v30[1];
            if (v29.u32[0] > 1uLL)
            {
              if (v36 >= *(_QWORD *)&v27)
                v36 %= *(_QWORD *)&v27;
            }
            else
            {
              v36 &= *(_QWORD *)&v27 - 1;
            }
            v35 = (uint64_t *)*v13;
            if (v36 == v28)
            {
LABEL_51:
              v37 = v35[1];
              if (v29.u32[0] > 1uLL)
              {
                if (v37 >= *(_QWORD *)&v27)
                  v37 %= *(_QWORD *)&v27;
              }
              else
              {
                v37 &= *(_QWORD *)&v27 - 1;
              }
              if (v37 != v28)
              {
                *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * v37) = v33;
                v35 = (uint64_t *)*v13;
              }
              goto LABEL_57;
            }
          }
          *(_QWORD *)(v31 + 8 * v28) = 0;
          v35 = (uint64_t *)*v13;
        }
        if (v35)
          goto LABEL_51;
LABEL_57:
        *v33 = (uint64_t)v35;
        *v13 = 0;
        --*(_QWORD *)(v2 + 72);
        v38 = (std::__shared_weak_count *)v13[9];
        if (v38)
          std::__shared_weak_count::__release_weak(v38);
        if (!*((_BYTE *)v13 + 62) && v13[6])
        {
          v39 = gss::Allocator::instance((gss::Allocator *)v38);
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v39 + 40))(v39, v13[6], *((unsigned __int16 *)v13 + 30));
          v13[6] = 0;
        }
        v40 = v13[2];
        if (v40)
        {
          v13[3] = v40;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[5] + 40))(v13[5], v40, v13[4] - v40);
        }
        (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v2 + 64) + 40))(*(_QWORD *)(v2 + 64), v13, 80);
        v13 = v30;
        if (!v30)
          break;
      }
    }
  }
  v14 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v2 + 120));
  if ((_DWORD)v14)
    geo::read_write_lock::logFailure(v14, (uint64_t)"unlock", v15);
  v16 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v2 + 320));
  if ((_DWORD)v16)
    geo::read_write_lock::logFailure(v16, (uint64_t)"write lock", v17);
  v18 = *(_QWORD **)(v2 + 88);
  if (v18 != *(_QWORD **)(v2 + 96))
  {
    while (1)
    {
      v41 = (std::__shared_weak_count *)v18[1];
      if (!v41)
        break;
      v42 = std::__shared_weak_count::lock(v41);
      if (!v42)
        break;
      v43 = v42;
      v44 = *v18;
      v45 = (unint64_t *)&v42->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (v46)
      {
        if (!v44)
          break;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v43);
        if (!v44)
          break;
      }
      v18 += 2;
      v47 = *(_QWORD **)(v2 + 96);
LABEL_65:
      if (v18 == v47)
        goto LABEL_19;
    }
    v48 = v18 + 2;
    v49 = *(_QWORD **)(v2 + 96);
    if (v18 + 2 == v49)
    {
      v47 = v18;
    }
    else
    {
      do
      {
        v47 = v48;
        v50 = *(_OWORD *)v48;
        *v48 = 0;
        v48[1] = 0;
        v51 = (std::__shared_weak_count *)*(v48 - 1);
        *((_OWORD *)v48 - 1) = v50;
        if (v51)
          std::__shared_weak_count::__release_weak(v51);
        v48 += 2;
      }
      while (v47 + 2 != v49);
      v48 = *(_QWORD **)(v2 + 96);
    }
    while (v48 != v47)
    {
      v52 = (std::__shared_weak_count *)*(v48 - 1);
      if (v52)
        std::__shared_weak_count::__release_weak(v52);
      v48 -= 2;
    }
    *(_QWORD *)(v2 + 96) = v47;
    goto LABEL_65;
  }
LABEL_19:
  v19 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v2 + 320));
  if ((_DWORD)v19)
    geo::read_write_lock::logFailure(v19, (uint64_t)"unlock", v20);
}

void std::__function::__func<md::StyleLogic::prune(md::PruneLevel)::$_0,std::allocator<md::StyleLogic::prune(md::PruneLevel)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StyleLogic::prune(md::PruneLevel)::$_0,std::allocator<md::StyleLogic::prune(md::PruneLevel)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42C8A20;
  return result;
}

void std::__function::__func<md::StyleLogic::prune(md::PruneLevel)::$_0,std::allocator<md::StyleLogic::prune(md::PruneLevel)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C8A20;
}

void std::__function::__func<md::StyleLogic::prune(md::PruneLevel)::$_0,std::allocator<md::StyleLogic::prune(md::PruneLevel)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  gss::StylesheetManager<gss::PropertyID>::clearCaches(*a2);
}

void sub_19FB257FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v1 + 1272);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 1256);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 1240);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 1224);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 1208);
  *(_QWORD *)(v1 + 1176) = &off_1E42B4C90;

  *(_QWORD *)(v1 + 1152) = &off_1E42B4F10;
  v3 = *(void **)(v1 + 1128);
  if (v3)
  {
    *(_QWORD *)(v1 + 1136) = v3;
    operator delete(v3);
  }
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogicContext *)(v1 + 928));
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogicContext *)(v1 + 760));
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogicContext *)(v1 + 592));
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogicContext *)(v1 + 424));
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogicContext *)(v1 + 256));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 240);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 224);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 208);
  if (*(_BYTE *)(v1 + 179))
    *(_BYTE *)(v1 + 179) = 0;
  if (*(_BYTE *)(v1 + 168))
    *(_BYTE *)(v1 + 168) = 0;

  *(_QWORD *)(v1 + 128) = &off_1E42B4D50;
  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKSceneConfiguration * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4F10;

  return a1;
}

void geo::_retain_ptr<VKSceneConfiguration * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4F10;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::StyleLogicContext::parseEvents(uint64_t result, char *a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  char v7;

  if ((char *)result != a2)
  {
    v5 = (char *)result;
    do
    {
      v7 = *v5;
      v6 = *(_QWORD *)(a3 + 24);
      if (!v6)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        JUMPOUT(0x19FB259C8);
      }
      result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v6 + 48))(v6, &v7);
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

void std::__function::__func<md::StyleLogic::StyleLogic(float,VKSharedResources *,objc_object  {objcproto14MDRenderTarget}*,md::MapEngine *,md::MapEngineSettings const*,md::World *,std::shared_ptr<md::TaskContext> const&,md::AnimationRunner const*,BOOL,md::World *<md::RunLoopController> const&,VKMapPurpose)::$_0,std::allocator<VKMapPurpose>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StyleLogic::StyleLogic(float,VKSharedResources *,objc_object  {objcproto14MDRenderTarget}*,md::MapEngine *,md::MapEngineSettings const*,md::World *,std::shared_ptr<md::TaskContext> const&,md::AnimationRunner const*,BOOL,md::World *<md::RunLoopController> const&,VKMapPurpose)::$_0,std::allocator<VKMapPurpose>,void ()(BOOL)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E42C8AB0;
  return result;
}

void std::__function::__func<md::StyleLogic::StyleLogic(float,VKSharedResources *,objc_object  {objcproto14MDRenderTarget}*,md::MapEngine *,md::MapEngineSettings const*,md::World *,std::shared_ptr<md::TaskContext> const&,md::AnimationRunner const*,BOOL,md::World *<md::RunLoopController> const&,VKMapPurpose)::$_0,std::allocator<VKMapPurpose>,void ()(BOOL)>::operator()()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "devResourcesFolderDidChange");

}

void sub_19FB25A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::StyleStateController>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::StyleStateController>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A098;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::StyleStateController>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 == v1)
    {
LABEL_12:
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v4);
      return;
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
      {
        v5 = (_QWORD *)(v3 - 32);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v1)
      {
        v4 = *(void **)(a1 + 24);
        goto LABEL_12;
      }
    }
  }
}

void std::__shared_ptr_pointer<md::CallbackHolder<md::StyleLogic> *,std::shared_ptr<md::CallbackHolder<md::StyleLogic>>::__shared_ptr_default_delete<md::CallbackHolder<md::StyleLogic>,md::CallbackHolder<md::StyleLogic>>,std::allocator<md::CallbackHolder<md::StyleLogic>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__shared_ptr_pointer<md::CallbackHolder<md::StyleLogic> *,std::shared_ptr<md::CallbackHolder<md::StyleLogic>>::__shared_ptr_default_delete<md::CallbackHolder<md::StyleLogic>,md::CallbackHolder<md::StyleLogic>>,std::allocator<md::CallbackHolder<md::StyleLogic>>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 24);
  if (result)
  {
    *result = 0;
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void md::StyleLogic::setRouteTransportType(uint64_t a1, char a2, unsigned __int8 a3)
{
  BOOL v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char v8;
  char v9;

  if (*(_BYTE *)(a1 + 168))
    v4 = a2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (*(unsigned __int8 *)(a1 + 169) == a3)
      return;
LABEL_11:
    *(_BYTE *)(a1 + 169) = a3;
    goto LABEL_12;
  }
  if ((*(_BYTE *)(a1 + 168) != 0) == (a2 != 0))
    return;
  if (!a2)
  {
    if (*(_BYTE *)(a1 + 168))
      *(_BYTE *)(a1 + 168) = 0;
    gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x10053u);
    gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(*(_QWORD *)(a1 + 224), 0x10053u);
    goto LABEL_13;
  }
  if (*(_BYTE *)(a1 + 168))
    goto LABEL_11;
  *(_BYTE *)(a1 + 169) = a3;
  *(_BYTE *)(a1 + 168) = 1;
LABEL_12:
  gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x10053u, a3);
  gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 224), 0x10053u, *(unsigned __int8 *)(a1 + 169));
LABEL_13:
  v8 = 4;
  v5 = *(char **)(a1 + 1128);
  v6 = *(char **)(a1 + 1136);
  if (v5 != v6)
  {
    while (*v5 <= 3u)
    {
      if (++v5 == v6)
        goto LABEL_19;
    }
  }
  if (v5 == v6 || (v6 = v5, *v5 != 4))
LABEL_19:
    std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v6, &v8);
  v7 = **(_QWORD **)(a1 + 1240);
  if (v7)
  {
    v9 = 12;
    md::MapEngine::setNeedsTick(v7, &v9);
  }
}

void md::StyleLogic::setRouteSource(uint64_t a1, char a2, unsigned __int8 a3)
{
  BOOL v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char v8;
  char v9;

  if (*(_BYTE *)(a1 + 179))
    v4 = a2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (*(unsigned __int8 *)(a1 + 180) == a3)
      return;
LABEL_11:
    *(_BYTE *)(a1 + 180) = a3;
    goto LABEL_12;
  }
  if ((*(_BYTE *)(a1 + 179) != 0) == (a2 != 0))
    return;
  if (!a2)
  {
    if (*(_BYTE *)(a1 + 179))
      *(_BYTE *)(a1 + 179) = 0;
    gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x10085u);
    gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(*(_QWORD *)(a1 + 224), 0x10085u);
    goto LABEL_13;
  }
  if (*(_BYTE *)(a1 + 179))
    goto LABEL_11;
  *(_BYTE *)(a1 + 180) = a3;
  *(_BYTE *)(a1 + 179) = 1;
LABEL_12:
  gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x10085u, a3);
  gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 224), 0x10085u, *(unsigned __int8 *)(a1 + 180));
LABEL_13:
  v8 = 4;
  v5 = *(char **)(a1 + 1128);
  v6 = *(char **)(a1 + 1136);
  if (v5 != v6)
  {
    while (*v5 <= 3u)
    {
      if (++v5 == v6)
        goto LABEL_19;
    }
  }
  if (v5 == v6 || (v6 = v5, *v5 != 4))
LABEL_19:
    std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v6, &v8);
  v7 = **(_QWORD **)(a1 + 1240);
  if (v7)
  {
    v9 = 12;
    md::MapEngine::setNeedsTick(v7, &v9);
  }
}

void std::__function::__func<md::StyleStateController::setHikingFeatureState(std::optional<gss::HikingFeatureState>,float)::$_0,std::allocator<md::StyleStateController::setHikingFeatureState(std::optional<gss::HikingFeatureState>,float)::$_0>,void ()(md::StyleLogic *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StyleStateController::setHikingFeatureState(std::optional<gss::HikingFeatureState>,float)::$_0,std::allocator<md::StyleStateController::setHikingFeatureState(std::optional<gss::HikingFeatureState>,float)::$_0>,void ()(md::StyleLogic *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427A2A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StyleStateController::setHikingFeatureState(std::optional<gss::HikingFeatureState>,float)::$_0,std::allocator<md::StyleStateController::setHikingFeatureState(std::optional<gss::HikingFeatureState>,float)::$_0>,void ()(md::StyleLogic *)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E427A2A8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<md::StyleStateController::setHikingFeatureState(std::optional<gss::HikingFeatureState>,float)::$_0,std::allocator<md::StyleStateController::setHikingFeatureState(std::optional<gss::HikingFeatureState>,float)::$_0>,void ()(md::StyleLogic *)>::operator()(uint64_t a1, uint64_t *a2)
{
  __int16 v2;
  float v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char v11;
  char v12;

  v2 = *(_WORD *)(a1 + 8);
  v3 = *(float *)(a1 + 12);
  v4 = *a2;
  v5 = *(unsigned __int8 *)(*a2 + 171);
  if ((v2 & 0xFF00) != 0 && v5 != 0)
  {
    if (*(unsigned __int8 *)(v4 + 170) == v2)
      return;
    *(_WORD *)(v4 + 170) = v2;
    v7 = *(_QWORD *)(v4 + 208);
LABEL_15:
    gss::ClientStyleState<gss::PropertyID>::setTargetClientStyleAttribute(v7, 0x1007Cu, v2);
    if (*(_BYTE *)(v4 + 1116))
      goto LABEL_16;
    goto LABEL_9;
  }
  if (((v2 & 0xFF00) != 0) == (v5 != 0))
    return;
  *(_WORD *)(v4 + 170) = v2;
  v7 = *(_QWORD *)(v4 + 208);
  if ((v2 & 0xFF00) != 0)
    goto LABEL_15;
  gss::ClientStyleState<gss::PropertyID>::removeTargetClientStyleAttribute(v7, 0x1007Cu);
  if (*(_BYTE *)(v4 + 1116))
  {
LABEL_16:
    *(float *)(v4 + 1120) = fmaxf(*(float *)(v4 + 1120), v3);
    return;
  }
LABEL_9:
  *(_BYTE *)(v4 + 1116) = 1;
  *(float *)(v4 + 1120) = v3;
  v11 = 4;
  v8 = *(char **)(v4 + 1128);
  v9 = *(char **)(v4 + 1136);
  if (v8 != v9)
  {
    while (*v8 <= 3u)
    {
      if (++v8 == v9)
        goto LABEL_19;
    }
  }
  if (v8 == v9 || (v9 = v8, *v8 != 4))
LABEL_19:
    std::vector<md::StyleManagerEvent>::insert(v4 + 1128, v9, &v11);
  v10 = **(_QWORD **)(v4 + 1240);
  if (v10)
  {
    v12 = 12;
    md::MapEngine::setNeedsTick(v10, &v12);
  }
}

void sub_19FB26034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB26108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FB26174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB26228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB26384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_19FB26450(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB264D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB26600(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB26678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB26744(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB2691C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_19FB269E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB26A5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB26B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_19FB26C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_19FB26CE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB26E50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FB2704C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  void *v15;

  a10.super_class = (Class)VKGlobeLineContainer;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FB27328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FB27460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB27548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB277F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FB279CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB27AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB28ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _Unwind_Exception *exception_object, void **a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,std::__shared_weak_count *a26,void *__p,std::__shared_weak_count *a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35)
{
  std::__shared_weak_count *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;

  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  MEMORY[0x1A1AF4E00](v37, 0xE1C40C3CBA79CLL);
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v43 = a24;
  if (a24)
  {
    v44 = (unint64_t *)&a24->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = a26;
  if (a26)
  {
    v47 = (unint64_t *)&a26->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v39)
  {
    v49 = (unint64_t *)&v39->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v51 = a35;
  if (a35)
  {
    v52 = (unint64_t *)&a35->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = *(std::__shared_weak_count **)(v40 - 160);
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = a28;
  if (a28)
  {
    v58 = (unint64_t *)&a28->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v36[10];
  v36[10] = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = v36[9];
  v36[9] = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = v36[8];
  v36[8] = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = (void *)v36[5];
  if (v63)
  {
    v36[6] = v63;
    operator delete(v63);
  }
  v64 = *a18;
  if (*a18)
  {
    v36[3] = v64;
    operator delete(v64);
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_19FB2930C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _Unwind_Exception *exception_object)
{
  altitude::RouteLineData *v17;
  void *v18;
  void *v19;

  altitude::RouteLineData::~RouteLineData(v17);
  MEMORY[0x1A1AF4E00]();

  _Unwind_Resume(a1);
}

void sub_19FB2933C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _Unwind_Exception *exception_object)
{
  uint64_t v17;
  void *v18;
  void *v19;

  MEMORY[0x1A1AF4E00](v17, 0x10A0C404B538C02);
  _Unwind_Resume(a1);
}

void sub_19FB29370()
{
  JUMPOUT(0x19FB292FCLL);
}

void sub_19FB294EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FB29500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB29630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB29640(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);

  std::pair<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const,std::weak_ptr<altitude::RouteLineData>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FB2977C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB2978C(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);

  std::pair<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const,std::weak_ptr<altitude::RouteLineData>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FB298EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_19FB29A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_19FB29AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FB29B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FB29CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FB29DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FB2A0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_19FB2A79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36)
{
  std::pair<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const,std::weak_ptr<altitude::RouteLineData>>::~pair((uint64_t)&a20);
  std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](&a33);
  std::vector<VKTransitLineMarker * {__strong}>::~vector[abi:nn180100](&a36);
  _Unwind_Resume(a1);
}

void sub_19FB2AA18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::weak_ptr<altitude::RouteLineData>>,std::__map_value_compare<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__value_type<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::weak_ptr<altitude::RouteLineData>>,std::less<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::allocator<std::__value_type<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::weak_ptr<altitude::RouteLineData>>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  if (a1)
  {
    std::__tree<std::__value_type<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::weak_ptr<altitude::RouteLineData>>,std::__map_value_compare<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__value_type<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::weak_ptr<altitude::RouteLineData>>,std::less<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::allocator<std::__value_type<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::weak_ptr<altitude::RouteLineData>>>>::destroy(*a1);
    std::__tree<std::__value_type<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::weak_ptr<altitude::RouteLineData>>,std::__map_value_compare<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__value_type<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::weak_ptr<altitude::RouteLineData>>,std::less<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::allocator<std::__value_type<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::weak_ptr<altitude::RouteLineData>>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[8];
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
    a1[4] = &off_1E42B4CF0;

    operator delete(a1);
  }
}

uint64_t std::pair<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const,std::weak_ptr<altitude::RouteLineData>>::~pair(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)a1 = &off_1E42B4CF0;

  return a1;
}

uint64_t geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;

  v3 = a1;
  v4 = *(id *)(a2 + 8);
  v5 = v3;
  v6 = v4;
  if (v6 == v5)
    v7 = 1;
  else
    v7 = objc_msgSend(v5, "isEqual:", v6);

  return v7;
}

void sub_19FB2AC44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(void *a1, void **a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;

  v3 = a1;
  v4 = *a2;
  v5 = v3;
  v6 = v4;
  if (v6 == v5)
    v7 = 1;
  else
    v7 = objc_msgSend(v5, "isEqual:", v6);

  return v7;
}

void sub_19FB2ACCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<altitude::RouteLineData *,std::shared_ptr<altitude::RouteLineData>::__shared_ptr_default_delete<altitude::RouteLineData,altitude::RouteLineData>,std::allocator<altitude::RouteLineData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::RouteLineData *,std::shared_ptr<altitude::RouteLineData>::__shared_ptr_default_delete<altitude::RouteLineData,altitude::RouteLineData>,std::allocator<altitude::RouteLineData>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 40);
    if (v2)

    v3 = *(void **)(v1 + 32);
    if (v3)

    if (*(_QWORD *)v1)
    v4 = *(void **)(v1 + 8);
    if (v4)
    {
      *(_QWORD *)(v1 + 16) = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void md::VKGlobeRouteSplit::~VKGlobeRouteSplit(id *this)
{
  objc_destroyWeak(this + 1);
}

{
  objc_destroyWeak(this + 1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::VKGlobeRouteSplit::getIndex(id *this)
{
  id *v1;
  id WeakRetained;
  id v3;
  void *v4;
  uint64_t v5;

  v1 = this + 1;
  WeakRetained = objc_loadWeakRetained(this + 1);

  if (!WeakRetained)
    return 0;
  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "routeMatch");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "routeCoordinate");

  return v5;
}

void sub_19FB2AE50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL md::VKGlobeRouteSplit::shouldSplit(id *this)
{
  id WeakRetained;
  _BOOL8 v2;

  WeakRetained = objc_loadWeakRetained(this + 1);
  v2 = WeakRetained != 0;

  return v2;
}

void md::VKGlobeRouteSplit::getPosition(id *this@<X0>, double *a2@<X8>)
{
  id *v3;
  id WeakRetained;
  id v5;
  double v6;
  double v7;
  id v8;
  double v9;
  double v10;

  v3 = this + 1;
  WeakRetained = objc_loadWeakRetained(this + 1);

  if (WeakRetained)
  {
    v5 = objc_loadWeakRetained(v3);
    objc_msgSend(v5, "presentationCoordinate");
    v7 = v6;
    v8 = objc_loadWeakRetained(v3);
    objc_msgSend(v8, "presentationCoordinate");
    v10 = v9;

    *a2 = v7 * 0.0174532925;
    a2[1] = v10 * 0.0174532925;
  }
  else
  {
    *a2 = 0.0;
    a2[1] = 0.0;
  }
}

void sub_19FB2AF2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void md::MuninJunctionCrossStreet::~MuninJunctionCrossStreet(md::MuninJunctionCrossStreet *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = off_1E42991D0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *((_QWORD *)this + 3);
    v4 = (void *)*((_QWORD *)this + 2);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = off_1E42991D0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *((_QWORD *)this + 3);
    v4 = (void *)*((_QWORD *)this + 2);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::MuninJunctionCrossStreet::mercatorPosition(md::MuninJunctionCrossStreet *this)
{
  return (uint64_t)this + 56;
}

void md::MuninJunctionCrossStreet::createLabels(md::MuninJunctionCrossStreet *this, const md::MuninRoadLabelingContext *a2)
{
  uint64_t v4;
  float64_t v5;
  uint64_t v6;
  double v8;
  long double v10;
  long double v16;
  double v17;
  long double v18;
  double v19;
  __double2 v20;
  __double2 v21;
  long double v24;
  double v25;
  long double v26;
  double v27;
  __double2 v28;
  __double2 v29;
  uint64_t *v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  std::__shared_weak_count *v46;
  double v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  double *v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  float v63;
  float v64;
  float v65;
  __n128 *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  __n128 *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  double cosval;
  float64x2_t v83;
  unint64_t v84;
  __n128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  char v96;
  char v97;
  char v98;
  float v99;
  float v100;
  float v101;
  int v102;
  char v103;
  __int16 v104;
  float64x2_t v105;
  float64_t v106;
  double v107;
  char v108;

  v4 = md::LabelSettingsStyleCache::muninRoadStyle(*(md::LabelSettingsStyleCache **)(*(_QWORD *)(*(_QWORD *)a2 + 336)
                                                                                   + 200));
  v105.f64[0] = md::MuninRoadEdge::direction(*((std::__shared_weak_count ****)this + 6), *(_QWORD *)(*((_QWORD *)this + 6) + 96) == **((_QWORD **)this + 1));
  v105.f64[1] = v5;
  v106 = v5;
  v107 = -v105.f64[0];
  v108 = 0;
  v6 = *((_QWORD *)this + 1);
  _Q1 = *(float64x2_t *)(v6 + 8);
  v8 = *(double *)(v6 + 24);
  *(float64x2_t *)((char *)this + 56) = _Q1;
  *((double *)this + 9) = v8;
  if (*(_OWORD *)&v105 == 0)
    return;
  v83 = vmlaq_n_f64(_Q1, v105, *(double *)(*((_QWORD *)a2 + 2) + 816) * 25.0);
  _D12 = 0x401921FB54442D18;
  v10 = 6.28318531 * _Q1.f64[0];
  __asm { FMLA            D0, D12, V1.D[1]; __x }
  v16 = exp(_D0);
  v17 = atan(v16) * 2.0 + -1.57079633;
  v18 = fmod(v10, 6.28318531);
  v19 = fmod(v18 + 6.28318531, 6.28318531) + -3.14159265;
  v20 = __sincos_stret(v17);
  cosval = v20.__cosval;
  v21 = __sincos_stret(v19);
  _V1.D[1] = v83.f64[1];
  __asm { FMLA            D0, D12, V1.D[1]; __x }
  v24 = exp(_D0);
  v25 = atan(v24) * 2.0 + -1.57079633;
  v26 = fmod(6.28318531 * v83.f64[0], 6.28318531);
  v27 = fmod(v26 + 6.28318531, 6.28318531) + -3.14159265;
  v28 = __sincos_stret(v25);
  v29 = __sincos_stret(v27);
  v102 = 0;
  v104 = 0;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v98 = 2;
  v30 = (uint64_t *)**((_QWORD **)this + 6);
  v31 = atomic_load((unsigned __int8 *)(*(_QWORD *)a2 + 3392));
  v32 = operator new(0x70uLL);
  v32[1] = 0;
  v32[2] = 0;
  *v32 = &off_1E42DB780;
  v33 = md::MuninRoadFeature::MuninRoadFeature((uint64_t)(v32 + 3), v30, v31 & 1);
  v34 = 6378137.0 / sqrt(1.0 - v20.__sinval * v20.__sinval * 0.00669437999);
  v35 = 6378137.0 / sqrt(1.0 - v28.__sinval * v28.__sinval * 0.00669437999);
  v36 = -(v34 * cosval * v21.__cosval - v35 * v28.__cosval * v29.__cosval);
  v37 = -(v34 * cosval * v21.__sinval - v35 * v28.__cosval * v29.__sinval);
  v38 = -(v20.__sinval * 0.99330562 * v34 - v28.__sinval * 0.99330562 * v35);
  v39 = 1.0 / sqrt(v36 * v36 + v37 * v37 + v38 * v38);
  v40 = v39 * v36;
  v41 = v39 * v37;
  v42 = v39 * v38;
  v43 = (v34 + v8) * cosval;
  v44 = v43 * v21.__cosval;
  v45 = v43 * v21.__sinval;
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  v47 = (v8 + v34 * 0.99330562) * v20.__sinval;
  *(_QWORD *)&v86 = v33;
  *((_QWORD *)&v86 + 1) = v32;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v89 = v44;
  v90 = v45;
  v91 = v47;
  v92 = *(float *)(v4 + 32);
  v93 = v40;
  v94 = v41;
  v95 = v42;
  v96 = v108;
  v97 = 8;
  v103 = *(_BYTE *)v4;
  v104 = *((_WORD *)this + 40);
  v50 = (double *)*((_QWORD *)a2 + 6);
  v51 = 1.0 / sqrt(v44 * v44 + v45 * v45 + v47 * v47);
  v52 = v51 * v44;
  v53 = v51 * v45;
  v54 = v51 * v47;
  v55 = -(v42 * v53 - v41 * v54);
  v56 = -(v40 * v54 - v42 * v52);
  v57 = -(v40 * v54);
  v58 = -(v41 * v52 - v40 * v53);
  v59 = -(v41 * v52);
  v60 = -(v41 * v54 - v42 * v53);
  v61 = -(v57 + v42 * v52);
  v62 = -(v59 + v40 * v53);
  if ((v56 * (v50[18] - v45) + v58 * (v50[19] - v47) + v55 * (v50[17] - v44))
     / sqrt((v50[17] - v44) * (v50[17] - v44) + (v50[18] - v45) * (v50[18] - v45) + (v50[19] - v47) * (v50[19] - v47)) >= 0.0)
  {
    v62 = v58;
    v61 = v56;
    v60 = v55;
  }
  v63 = v60;
  v64 = v61;
  v65 = v62;
  v99 = v63;
  v100 = v64;
  v101 = v65;
  md::MuninRoadLabelGenerator::createLabel((md::MuninRoadLabelGenerator *)&v85, *(md::MuninRoadLabelCreationParams **)(*((_QWORD *)a2 + 1) + 24), (uint64_t *)&v86);
  if (v85.n128_u64[0])
  {
    v66 = (__n128 *)*((_QWORD *)this + 3);
    if ((unint64_t)v66 >= *((_QWORD *)this + 4))
    {
      v84 = v85.n128_u64[1];
      v70 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)this + 16, v85);
      v67 = (std::__shared_weak_count *)v84;
    }
    else
    {
      v66->n128_u64[0] = v85.n128_u64[0];
      v67 = (std::__shared_weak_count *)v85.n128_u64[1];
      v66->n128_u64[1] = v85.n128_u64[1];
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      v70 = v66 + 1;
    }
    *((_QWORD *)this + 3) = v70;
    if (!v67)
      goto LABEL_23;
    goto LABEL_19;
  }
  v67 = (std::__shared_weak_count *)v85.n128_u64[1];
  if (v85.n128_u64[1])
  {
LABEL_19:
    v71 = (unint64_t *)&v67->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
LABEL_23:
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (*((_QWORD *)&v88 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
  if (*((_QWORD *)&v87 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_19FB2B5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  md::MuninRoadLabelCreationParams::~MuninRoadLabelCreationParams((md::MuninRoadLabelCreationParams *)va1);
  _Unwind_Resume(a1);
}

void sub_19FB2B668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2B6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2B740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2B7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2B818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2B89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2B900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2B964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2B9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2BA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2BAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2BB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2BB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2BBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FB2BC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2BCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2BD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2BDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2BE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2BE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2BED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2BF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2BF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2C8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19FB2CA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2CAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2CB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2CBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2CC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2CC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2CD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2CD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2CDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2E540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2E684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB2E814(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19FB2EB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33)
{
  void *v33;

  gdc::DebugTreeNode::~DebugTreeNode((gdc::DebugTreeNode *)&a33);
  _Unwind_Resume(a1);
}

void sub_19FB2EF68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FB2EFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKLabelNavRoad;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FB2F140(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB2F7CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);

  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_19FB2F950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB2FBAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB2FC6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB2FF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;
  void *v13;

  if (a9)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 - a9);

  _Unwind_Resume(a1);
}

void sub_19FB30520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FB30918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19FB30A84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB30B70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB31594(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v1 - 160);
  if (v3)
  {
    *(_QWORD *)(v1 - 152) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(v1 - 136);
  if (v4)
  {
    *(_QWORD *)(v1 - 128) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 - 112) + 40))(*(_QWORD *)(v1 - 112), v4, *(_QWORD *)(v1 - 120) - v4);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19FB31E60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB334D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;
  va_list va;
  uint64_t v20;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v18 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);

  md::RoadSignTextMetrics::~RoadSignTextMetrics((md::RoadSignTextMetrics *)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v16 - 208);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v16 - 184);

  _Unwind_Resume(a1);
}

void sub_19FB33A18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GetLabelNavStyleAttributes(_QWORD *a1, unsigned int a2, uint64_t a3, _BYTE *a4, _BYTE *a5)
{
  unsigned __int8 v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  size_t v28;
  _QWORD *v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t v37;

  {
    v37 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v37, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v11 = mdm::Allocator::instance(void)::alloc;
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                       + 16))(mdm::Allocator::instance(void)::alloc, 8, 4);
  v13 = v12;
  if (v12)
    *v12 = 0x1000000005;
  v14 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, 16, 4);
  v15 = v14;
  if (v14)
    v14[1] = (a3 << 32) | 0x10007;
  *v14 = *v13;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v11 + 40))(v11, v13, 8);
  v16 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, 32, 4);
  v17 = v16;
  v18 = v16 + 4;
  if (v16)
    v16[2] = ((unint64_t)a2 << 32) | 0x10035;
  v16[1] = v15[1];
  *v16 = *v15;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v11 + 40))(v11, v15, 16);
  v19 = v17 + 3;
  if (!*a4)
  {
    if (!*a5)
    {
LABEL_16:
      v22 = (char *)v17;
      goto LABEL_17;
    }
    *v19 = ((unint64_t)a5[1] << 32) | 0x10054;
LABEL_15:
    v19 = v18;
    goto LABEL_16;
  }
  *v19 = ((unint64_t)a4[1] << 32) | 1;
  if (!*a5)
    goto LABEL_15;
  v20 = a5[1];
  v21 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, 64, 4);
  v22 = (char *)v21;
  v18 = v21 + 8;
  if (v21)
    v21[4] = (v20 << 32) | 0x10054;
  v19 = v21 + 5;
  v21[3] = v17[3];
  v21[2] = v17[2];
  v21[1] = v17[1];
  *v21 = *v17;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v11 + 40))(v11, v17, 32);
LABEL_17:
  _ZNSt3__111make_sharedB8nn180100I22FeatureStyleAttributesJEvEENS_10shared_ptrIT_EEDpOT0_(a1);
  if ((((char *)v19 - v22) & 0x7FFFFFFF8) != 0)
  {
    v23 = 0;
    v24 = 0;
    v25 = *a1;
    v26 = ((unint64_t)((char *)v19 - v22) >> 3);
    v27 = *(_BYTE *)(*a1 + 33);
    while (1)
    {
      v28 = v27;
      v29 = *(_QWORD **)v25;
      if (v27)
        break;
LABEL_19:
      v29[v28] = *(_QWORD *)&v22[8 * v23];
      v27 = *(_BYTE *)(v25 + 33) + 1;
      *(_BYTE *)(v25 + 33) = v27;
      ++v23;
      v24 = 1;
      if (v23 == v26)
      {
        v29 = *(_QWORD **)v25;
        v28 = v27;
LABEL_36:
        qsort(v29, v28, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
        return (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v11 + 40))(v11, v22, (char *)v18 - v22);
      }
    }
    if (v27 > 0x1Fu)
    {
      do
      {
        v33 = 0;
        v34 = (int *)v29;
        while (1)
        {
          v35 = *v34;
          v34 += 2;
          if (v35 == *(_DWORD *)&v22[8 * v23])
            break;
          if (v27 == ++v33)
            goto LABEL_30;
        }
        HIDWORD(v29[v33]) = *(_DWORD *)&v22[8 * v23 + 4];
LABEL_30:
        ++v23;
      }
      while (v23 != v26);
    }
    else
    {
      do
      {
        v30 = 0;
        v31 = (int *)v29;
        while (1)
        {
          v32 = *v31;
          v31 += 2;
          if (v32 == *(_DWORD *)&v22[8 * v23])
            break;
          if (v28 == ++v30)
            goto LABEL_19;
        }
        HIDWORD(v29[v30]) = *(_DWORD *)&v22[8 * v23++ + 4];
      }
      while (v23 != v26);
    }
    if ((v24 & 1) != 0)
      goto LABEL_36;
  }
  return (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v11 + 40))(v11, v22, (char *)v18 - v22);
}

void sub_19FB342A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 40))(v1, v2, v3 - v2);
  _Unwind_Resume(a1);
}

id VKLabelCopyShield(uint64_t *a1, int a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  id v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v10 = 0;
  geo::codec::featureGetNativeShield((uint64_t)a1, 0, &v10, a3, 0);
  v5 = v10;
  if (!v10)
    return 0;
  if (a2)
  {
    v11 = 0;
    geo::codec::featureGetLocalizedLabelForNativeLabel(a1, v10, &v11, 0);
    v6 = v11;
    v7 = objc_alloc(MEMORY[0x1E0CB3940]);
    if (v6)
      v8 = v11;
    else
      v8 = v5;
  }
  else
  {
    v7 = objc_alloc(MEMORY[0x1E0CB3940]);
    v8 = v10;
  }
  return (id)objc_msgSend(v7, "initWithUTF8String:", v8);
}

id VKLabelCopyText(uint64_t *a1, int a2)
{
  unint64_t v4;
  unint64_t v5;
  id v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;

  v9 = 0;
  geo::codec::featureGetNativeLabel((uint64_t)a1, 0, &v9, 0);
  v4 = v9;
  if (!v9)
    return 0;
  if (a2)
  {
    v10 = 0;
    geo::codec::featureGetLocalizedLabelForNativeLabel(a1, v9, &v10, 0);
    v5 = v10;
    v6 = objc_alloc(MEMORY[0x1E0CB3940]);
    if (v5)
      v7 = v10;
    else
      v7 = v4;
  }
  else
  {
    v6 = objc_alloc(MEMORY[0x1E0CB3940]);
    v7 = v9;
  }
  return (id)objc_msgSend(v6, "initWithUTF8String:", v7);
}

uint64_t GetRoadSignMetadataForStyleQuery(std::string::size_type a1, std::__shared_weak_count *a2, std::string::size_type *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  float *v19;
  float v20;
  uint64_t v21;
  float *v22;
  float v23;
  _BOOL4 v24;
  unsigned int v26;
  unsigned int v27;
  float *v28;
  float v29;
  float v30;
  _BOOL4 v31;
  unsigned int v33;
  unsigned int v34;
  float *v35;
  float v36;
  float v37;
  _BOOL4 v38;
  unsigned int v40;
  unsigned int v41;
  float32x2_t *v42;
  float32x2_t v43;
  float v44;
  _BOOL4 v45;
  unsigned int v46;
  unsigned int v47;
  float *v48;
  float v49;
  float v50;
  _BOOL4 v51;
  unsigned int v52;
  unsigned int v53;
  float *v54;
  float v55;
  float v56;
  _BOOL4 v57;
  unsigned int v58;
  unsigned int v59;
  float *v60;
  float v61;
  float v62;
  _BOOL4 v63;
  unsigned int v64;
  unsigned int v65;
  float *v66;
  float v67;
  float v68;
  _BOOL4 v69;
  unsigned int v70;
  unsigned int v71;
  float *v72;
  float v73;
  float v74;
  _BOOL4 v75;
  unsigned int v76;
  unsigned int v77;
  float *v78;
  float v79;
  unint64_t v80;
  float *v81;
  float v82;
  _BOOL4 v83;
  unsigned int v86;
  unsigned int v87;
  float *v88;
  float v89;
  float v90;
  _BOOL4 v91;
  unsigned int v93;
  unsigned int v94;
  float *v95;
  float v96;
  float v97;
  _BOOL4 v98;
  unsigned int v100;
  unsigned int v101;
  float *v102;
  float v103;
  float v104;
  _BOOL4 v105;
  unsigned int v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int v110;
  float v111;
  _BOOL4 v112;
  unsigned int v113;
  unsigned int v114;
  float *v115;
  float v116;
  float v117;
  _BOOL4 v118;
  unsigned int v119;
  unsigned int v120;
  float *v121;
  float v122;
  double v123;
  double v124;
  float v125;
  _BOOL4 v126;
  unsigned int v127;
  size_t size;
  std::string *p_p;
  const char *v130;
  size_t v131;
  std::string::size_type v132;
  std::string *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  void *v137;
  size_t v138;
  std::string *v139;
  unint64_t v140;
  float *v141;
  float v142;
  _BOOL4 v143;
  unsigned int v145;
  float32x4_t v146;
  float v147;
  _BOOL4 v148;
  unsigned int v150;
  float32x4_t v151;
  float v152;
  _BOOL4 v153;
  unsigned int v155;
  float32x4_t v156;
  float v157;
  _BOOL4 v158;
  unsigned int v159;
  float32x4_t v160;
  float32x4_t v161;
  std::string::size_type v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  unsigned __int8 v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  float *v171;
  float v172;
  BOOL v173;
  unsigned int v174;
  float32x4_t v175;
  unint64_t v176;
  float *v177;
  float v178;
  _BOOL4 v179;
  unsigned int v181;
  float v182;
  _BOOL4 v183;
  unsigned int v185;
  size_t v186;
  std::string *v187;
  float32x4_t v188;
  std::string __p;
  std::string::size_type v190;
  std::__shared_weak_count *v191;
  uint64_t v192;
  uint64_t v193;
  unsigned __int8 v194;
  char v195;
  unsigned __int8 v196;

  if (!a1)
    return 0;
  v6 = a6;
  if (!a4 && !a5 && !a6)
    return v6;
  __p.__r_.__value_.__r.__words[0] = a1;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)a2;
  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v190 = a1;
    v191 = a2;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    v190 = a1;
    v191 = 0;
  }
  v192 = 0;
  v193 = 0;
  v194 = 0;
  v14 = (*(uint64_t (**)(std::string::size_type, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v192);
  v194 = v14;
  if (a2)
  {
    v15 = (unint64_t *)&a2->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a2->__on_zero_shared)(a2);
      std::__shared_weak_count::__release_weak(a2);
    }
    v14 = v194;
  }
  if (!v14)
  {
LABEL_170:
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v190);
    return 0;
  }
  if (!a5)
    goto LABEL_161;
  v195 = 1;
  v17 = *(_QWORD *)(v190 + 24);
  v18 = *(unsigned __int8 *)(v17 + 12);
  if (v18 != 2)
  {
    v20 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(v190 + 24), 0x130u, v18, &v195);
    if (!v195)
      goto LABEL_25;
    goto LABEL_24;
  }
  __p.__r_.__value_.__s.__data_[0] = 1;
  v196 = 1;
  v19 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v17, 0x130u, 0, &__p);
  gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v17, 0x130u, 1u, &v196);
  v20 = *v19;
  if (__p.__r_.__value_.__s.__data_[0] | v196)
LABEL_24:
    *(double *)(a5 + 8) = v20;
LABEL_25:
  v21 = *(_QWORD *)(v190 + 24);
  v22 = *(float **)v21;
  if (*(_QWORD *)v21)
  {
    v23 = *v22;
    v24 = *v22 == 1.0;
    if (*(_BYTE *)(v21 + 10))
    {
      if (v23 != 0.0 && v23 != 1.0)
        goto LABEL_35;
    }
  }
  else
  {
    v24 = 0;
  }
  v26 = *(unsigned __int8 *)(v21 + v24 + 11);
  if (v26 != 2)
    goto LABEL_37;
LABEL_35:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v190 + 24), 0x131u, 0) & 1) == 0)
  {
    v26 = 1;
LABEL_37:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v21, 0x131u, v26))
      goto LABEL_42;
  }
  v27 = *(unsigned __int8 *)(v21 + 12);
  if (v27 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    v196 = 1;
    v28 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x131u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x131u, 1u, &v196);
    v29 = *v28;
  }
  else
  {
    v29 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x131u, v27, 0);
  }
  *(double *)(a5 + 24) = v29;
  v21 = *(_QWORD *)(v190 + 24);
  v22 = *(float **)v21;
LABEL_42:
  if (v22)
  {
    v30 = *v22;
    v31 = *v22 == 1.0;
    if (*(_BYTE *)(v21 + 10))
    {
      if (v30 != 0.0 && v30 != 1.0)
        goto LABEL_52;
    }
  }
  else
  {
    v31 = 0;
  }
  v33 = *(unsigned __int8 *)(v21 + v31 + 11);
  if (v33 != 2)
    goto LABEL_54;
LABEL_52:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v21, 0x132u, 0) & 1) == 0)
  {
    v33 = 1;
LABEL_54:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v21, 0x132u, v33))
      goto LABEL_59;
  }
  v34 = *(unsigned __int8 *)(v21 + 12);
  if (v34 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    v196 = 1;
    v35 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x132u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x132u, 1u, &v196);
    v36 = *v35;
  }
  else
  {
    v36 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x132u, v34, 0);
  }
  *(double *)(a5 + 32) = v36;
  v21 = *(_QWORD *)(v190 + 24);
  v22 = *(float **)v21;
LABEL_59:
  if (v22)
  {
    v37 = *v22;
    v38 = *v22 == 1.0;
    if (*(_BYTE *)(v21 + 10))
    {
      if (v37 != 0.0 && v37 != 1.0)
        goto LABEL_69;
    }
  }
  else
  {
    v38 = 0;
  }
  v40 = *(unsigned __int8 *)(v21 + v38 + 11);
  if (v40 != 2)
    goto LABEL_71;
LABEL_69:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v21, 0x92u, 0) & 1) == 0)
  {
    v40 = 1;
LABEL_71:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v21, 0x92u, v40))
      goto LABEL_76;
  }
  v41 = *(unsigned __int8 *)(v21 + 12);
  if (v41 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    v196 = 1;
    v42 = (float32x2_t *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<gm::Matrix<float,2,1>>(v21, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<gm::Matrix<float,2,1>>(v21, 1u, &v196);
    v43 = *v42;
  }
  else
  {
    v43 = *(float32x2_t *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<gm::Matrix<float,2,1>>(v21, v41, 0);
  }
  *(float64x2_t *)(a5 + 56) = vcvtq_f64_f32(v43);
  v21 = *(_QWORD *)(v190 + 24);
  v22 = *(float **)v21;
LABEL_76:
  if (v22)
  {
    v44 = *v22;
    v45 = *v22 == 1.0;
    if (*(_BYTE *)(v21 + 10) && v44 != 0.0 && v44 != 1.0)
      goto LABEL_83;
  }
  else
  {
    v45 = 0;
  }
  v46 = *(unsigned __int8 *)(v21 + v45 + 11);
  if (v46 != 2)
    goto LABEL_85;
LABEL_83:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v21, 0x133u, 0) & 1) == 0)
  {
    v46 = 1;
LABEL_85:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v21, 0x133u, v46))
      goto LABEL_90;
  }
  v47 = *(unsigned __int8 *)(v21 + 12);
  if (v47 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    v196 = 1;
    v48 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x133u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x133u, 1u, &v196);
    v49 = *v48;
  }
  else
  {
    v49 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x133u, v47, 0);
  }
  *(double *)(a5 + 72) = v49;
  v21 = *(_QWORD *)(v190 + 24);
  v22 = *(float **)v21;
LABEL_90:
  if (v22)
  {
    v50 = *v22;
    v51 = *v22 == 1.0;
    if (*(_BYTE *)(v21 + 10) && v50 != 0.0 && v50 != 1.0)
      goto LABEL_97;
  }
  else
  {
    v51 = 0;
  }
  v52 = *(unsigned __int8 *)(v21 + v51 + 11);
  if (v52 != 2)
    goto LABEL_99;
LABEL_97:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v21, 0x6Du, 0) & 1) == 0)
  {
    v52 = 1;
LABEL_99:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v21, 0x6Du, v52))
      goto LABEL_104;
  }
  v53 = *(unsigned __int8 *)(v21 + 12);
  if (v53 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    v196 = 1;
    v54 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x6Du, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x6Du, 1u, &v196);
    v55 = *v54;
  }
  else
  {
    v55 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x6Du, v53, 0);
  }
  *(double *)(a5 + 80) = v55;
  v21 = *(_QWORD *)(v190 + 24);
  v22 = *(float **)v21;
LABEL_104:
  if (v22)
  {
    v56 = *v22;
    v57 = *v22 == 1.0;
    if (*(_BYTE *)(v21 + 10) && v56 != 0.0 && v56 != 1.0)
      goto LABEL_111;
  }
  else
  {
    v57 = 0;
  }
  v58 = *(unsigned __int8 *)(v21 + v57 + 11);
  if (v58 != 2)
    goto LABEL_113;
LABEL_111:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v21, 0x64u, 0) & 1) == 0)
  {
    v58 = 1;
LABEL_113:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v21, 0x64u, v58))
      goto LABEL_118;
  }
  v59 = *(unsigned __int8 *)(v21 + 12);
  if (v59 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    v196 = 1;
    v60 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x64u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x64u, 1u, &v196);
    v61 = *v60;
  }
  else
  {
    v61 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x64u, v59, 0);
  }
  *(double *)(a5 + 96) = v61;
  v21 = *(_QWORD *)(v190 + 24);
  v22 = *(float **)v21;
LABEL_118:
  if (v22)
  {
    v62 = *v22;
    v63 = *v22 == 1.0;
    if (*(_BYTE *)(v21 + 10) && v62 != 0.0 && v62 != 1.0)
      goto LABEL_125;
  }
  else
  {
    v63 = 0;
  }
  v64 = *(unsigned __int8 *)(v21 + v63 + 11);
  if (v64 != 2)
    goto LABEL_127;
LABEL_125:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v21, 0x134u, 0) & 1) == 0)
  {
    v64 = 1;
LABEL_127:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v21, 0x134u, v64))
      goto LABEL_132;
  }
  v65 = *(unsigned __int8 *)(v21 + 12);
  if (v65 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    v196 = 1;
    v66 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x134u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x134u, 1u, &v196);
    v67 = *v66;
  }
  else
  {
    v67 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x134u, v65, 0);
  }
  *(double *)(a5 + 128) = v67;
  v21 = *(_QWORD *)(v190 + 24);
  v22 = *(float **)v21;
LABEL_132:
  if (v22)
  {
    v68 = *v22;
    v69 = *v22 == 1.0;
    if (*(_BYTE *)(v21 + 10) && v68 != 0.0 && v68 != 1.0)
      goto LABEL_139;
  }
  else
  {
    v69 = 0;
  }
  v70 = *(unsigned __int8 *)(v21 + v69 + 11);
  if (v70 != 2)
    goto LABEL_141;
LABEL_139:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v21, 0x183u, 0) & 1) == 0)
  {
    v70 = 1;
LABEL_141:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v21, 0x183u, v70))
      goto LABEL_146;
  }
  v71 = *(unsigned __int8 *)(v21 + 12);
  if (v71 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    v196 = 1;
    v72 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x183u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x183u, 1u, &v196);
    v73 = *v72;
  }
  else
  {
    v73 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x183u, v71, 0);
  }
  *(double *)(a5 + 40) = v73;
  v21 = *(_QWORD *)(v190 + 24);
  v22 = *(float **)v21;
LABEL_146:
  if (v22)
  {
    v74 = *v22;
    v75 = *v22 == 1.0;
    if (*(_BYTE *)(v21 + 10) && v74 != 0.0 && v74 != 1.0)
      goto LABEL_153;
  }
  else
  {
    v75 = 0;
  }
  v76 = *(unsigned __int8 *)(v21 + v75 + 11);
  if (v76 != 2)
    goto LABEL_155;
LABEL_153:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v21, 0x184u, 0) & 1) == 0)
  {
    v76 = 1;
LABEL_155:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v21, 0x184u, v76))
      goto LABEL_160;
  }
  v77 = *(unsigned __int8 *)(v21 + 12);
  if (v77 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    v196 = 1;
    v78 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x184u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x184u, 1u, &v196);
    v79 = *v78;
  }
  else
  {
    v79 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v21, 0x184u, v77, 0);
  }
  *(double *)(a5 + 48) = v79;
LABEL_160:
  if (round(*(double *)(a5 + 8) * *(double *)(a5 + 96) * *(double *)(a5 + 16)) <= 0.0)
    goto LABEL_170;
LABEL_161:
  if (!v6)
    goto LABEL_298;
  v80 = *(_QWORD *)(v190 + 24);
  v81 = *(float **)v80;
  if (*(_QWORD *)v80)
  {
    v82 = *v81;
    v83 = *v81 == 1.0;
    if (*(_BYTE *)(v80 + 10))
    {
      if (v82 != 0.0 && v82 != 1.0)
        goto LABEL_175;
    }
  }
  else
  {
    v83 = 0;
  }
  v86 = *(unsigned __int8 *)(v80 + v83 + 11);
  if (v86 != 2)
    goto LABEL_177;
LABEL_175:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v190 + 24), 0x130u, 0) & 1) == 0)
  {
    v86 = 1;
LABEL_177:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v80, 0x130u, v86))
      goto LABEL_182;
  }
  v87 = *(unsigned __int8 *)(v80 + 12);
  if (v87 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    v196 = 1;
    v88 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v80, 0x130u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v80, 0x130u, 1u, &v196);
    v89 = *v88;
  }
  else
  {
    v89 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v80, 0x130u, v87, 0);
  }
  *(double *)v6 = v89;
  v80 = *(_QWORD *)(v190 + 24);
  v81 = *(float **)v80;
LABEL_182:
  if (v81)
  {
    v90 = *v81;
    v91 = *v81 == 1.0;
    if (*(_BYTE *)(v80 + 10))
    {
      if (v90 != 0.0 && v90 != 1.0)
        goto LABEL_192;
    }
  }
  else
  {
    v91 = 0;
  }
  v93 = *(unsigned __int8 *)(v80 + v91 + 11);
  if (v93 != 2)
    goto LABEL_194;
LABEL_192:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v80, 0x135u, 0) & 1) == 0)
  {
    v93 = 1;
LABEL_194:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v80, 0x135u, v93))
      goto LABEL_199;
  }
  v94 = *(unsigned __int8 *)(v80 + 12);
  if (v94 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    v196 = 1;
    v95 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v80, 0x135u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v80, 0x135u, 1u, &v196);
    v96 = *v95;
  }
  else
  {
    v96 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v80, 0x135u, v94, 0);
  }
  *(double *)(v6 + 16) = v96;
  v80 = *(_QWORD *)(v190 + 24);
  v81 = *(float **)v80;
LABEL_199:
  if (v81)
  {
    v97 = *v81;
    v98 = *v81 == 1.0;
    if (*(_BYTE *)(v80 + 10))
    {
      if (v97 != 0.0 && v97 != 1.0)
        goto LABEL_209;
    }
  }
  else
  {
    v98 = 0;
  }
  v100 = *(unsigned __int8 *)(v80 + v98 + 11);
  if (v100 != 2)
    goto LABEL_211;
LABEL_209:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v80, 0x151u, 0) & 1) == 0)
  {
    v100 = 1;
LABEL_211:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v80, 0x151u, v100))
      goto LABEL_216;
  }
  v101 = *(unsigned __int8 *)(v80 + 12);
  if (v101 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    v196 = 1;
    v102 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v80, 0x151u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v80, 0x151u, 1u, &v196);
    v103 = *v102;
  }
  else
  {
    v103 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v80, 0x151u, v101, 0);
  }
  *(double *)(v6 + 24) = v103;
  v80 = *(_QWORD *)(v190 + 24);
  v81 = *(float **)v80;
LABEL_216:
  if (v81)
  {
    v104 = *v81;
    v105 = *v81 == 1.0;
    if (*(_BYTE *)(v80 + 10))
    {
      if (v104 != 0.0 && v104 != 1.0)
        goto LABEL_226;
    }
  }
  else
  {
    v105 = 0;
  }
  v107 = *(unsigned __int8 *)(v80 + v105 + 11);
  if (v107 != 2)
    goto LABEL_228;
LABEL_226:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v80, 0x150u, 0) & 1) == 0)
  {
    v107 = 1;
LABEL_228:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v80, 0x150u, v107))
      goto LABEL_233;
  }
  v108 = *(unsigned __int8 *)(v80 + 12);
  if (v108 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    v196 = 1;
    v109 = (unsigned int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v80, 0x150u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v80, 0x150u, 1u, &v196);
    v110 = *v109;
  }
  else
  {
    v110 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v80, 0x150u, v108, 0);
  }
  *(double *)(v6 + 128) = (double)v110;
  v80 = *(_QWORD *)(v190 + 24);
  v81 = *(float **)v80;
LABEL_233:
  if (v81)
  {
    v111 = *v81;
    v112 = *v81 == 1.0;
    if (*(_BYTE *)(v80 + 10) && v111 != 0.0 && v111 != 1.0)
      goto LABEL_240;
  }
  else
  {
    v112 = 0;
  }
  v113 = *(unsigned __int8 *)(v80 + v112 + 11);
  if (v113 != 2)
    goto LABEL_242;
LABEL_240:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v80, 0x136u, 0) & 1) == 0)
  {
    v113 = 1;
LABEL_242:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v80, 0x136u, v113))
      goto LABEL_247;
  }
  v114 = *(unsigned __int8 *)(v80 + 12);
  if (v114 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    v196 = 1;
    v115 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v80, 0x136u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v80, 0x136u, 1u, &v196);
    v116 = *v115;
  }
  else
  {
    v116 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v80, 0x136u, v114, 0);
  }
  *(double *)(v6 + 32) = v116;
  v80 = *(_QWORD *)(v190 + 24);
  v81 = *(float **)v80;
LABEL_247:
  if (v81)
  {
    v117 = *v81;
    v118 = *v81 == 1.0;
    if (*(_BYTE *)(v80 + 10) && v117 != 0.0 && v117 != 1.0)
      goto LABEL_254;
  }
  else
  {
    v118 = 0;
  }
  v119 = *(unsigned __int8 *)(v80 + v118 + 11);
  if (v119 != 2)
    goto LABEL_256;
LABEL_254:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v80, 9u, 0) & 1) == 0)
  {
    v119 = 1;
LABEL_256:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v80, 9u, v119))
      goto LABEL_261;
  }
  v120 = *(unsigned __int8 *)(v80 + 12);
  if (v120 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    v196 = 1;
    v121 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v80, 9u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v80, 9u, 1u, &v196);
    v122 = *v121;
  }
  else
  {
    v122 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v80, 9u, v120, 0);
  }
  v123 = v122;
  v124 = round(*(double *)v6 * *(double *)(v6 + 8) * v123);
  *(double *)(v6 + 40) = v123;
  *(double *)(v6 + 48) = v124;
  v80 = *(_QWORD *)(v190 + 24);
  v81 = *(float **)v80;
LABEL_261:
  if (!v81)
  {
    v126 = 0;
    goto LABEL_267;
  }
  v125 = *v81;
  v126 = *v81 == 1.0;
  if (!*(_BYTE *)(v80 + 10) || v125 == 0.0 || v125 == 1.0)
  {
LABEL_267:
    v127 = *(unsigned __int8 *)(v80 + v126 + 11);
    if (v127 != 2)
      goto LABEL_270;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v80, 0x72u, 0) & 1) != 0)
    goto LABEL_271;
  v127 = 1;
LABEL_270:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v80, 0x72u, v127))
    goto LABEL_298;
LABEL_271:
  gss::RenderStyleHelper<gss::PropertyID,std::string>::valueForKey(&__p, 0x72u, 1, v80, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((_QWORD *)(v6 + 56), p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(char *)(v6 + 79) >= 0)
    v130 = (const char *)(v6 + 56);
  else
    v130 = *(const char **)(v6 + 56);
  v131 = strlen(v130);
  if (v131 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v132 = v131;
  if (v131 >= 0x17)
  {
    v134 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v131 | 7) != 0x17)
      v134 = v131 | 7;
    v135 = v134 + 1;
    v133 = (std::string *)operator new(v134 + 1);
    __p.__r_.__value_.__l.__size_ = v132;
    __p.__r_.__value_.__r.__words[2] = v135 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v133;
    goto LABEL_289;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v131;
  v133 = &__p;
  if (v131)
LABEL_289:
    memmove(v133, v130, v132);
  v133->__r_.__value_.__s.__data_[v132] = 0;
  v136 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v137 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v138 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v138 = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v139 = &__p;
  else
    v139 = (std::string *)__p.__r_.__value_.__r.__words[0];
  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((_QWORD *)(v6 + 88), v139, v138);
  if (v136 < 0)
    operator delete(v137);
LABEL_298:
  if (!a4)
    goto LABEL_352;
  v140 = *(_QWORD *)(v190 + 24);
  v141 = *(float **)v140;
  if (*(_QWORD *)v140)
  {
    v142 = *v141;
    v143 = *v141 == 1.0;
    if (*(_BYTE *)(v140 + 10))
    {
      if (v142 != 0.0 && v142 != 1.0)
        goto LABEL_309;
    }
  }
  else
  {
    v143 = 0;
  }
  v145 = *(unsigned __int8 *)(v140 + v143 + 11);
  if (v145 != 2)
    goto LABEL_311;
LABEL_309:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v190 + 24), 0x5Cu, 0) & 1) == 0)
  {
    v145 = 1;
LABEL_311:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v140, 0x5Cu, v145))
      goto LABEL_313;
  }
  gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)&__p, 0x5Cu, 1, v140);
  v146 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)__p.__r_.__value_.__l.__data_)), (float32x4_t)vdupq_n_s32(0x37800080u));
  *(_BYTE *)a4 = 1;
  *(float64x2_t *)(a4 + 8) = vcvtq_f64_f32(*(float32x2_t *)v146.f32);
  *(float64x2_t *)(a4 + 24) = vcvt_hight_f64_f32(v146);
  v140 = *(_QWORD *)(v190 + 24);
  v141 = *(float **)v140;
LABEL_313:
  if (v141)
  {
    v147 = *v141;
    v148 = *v141 == 1.0;
    if (*(_BYTE *)(v140 + 10))
    {
      if (v147 != 0.0 && v147 != 1.0)
        goto LABEL_323;
    }
  }
  else
  {
    v148 = 0;
  }
  v150 = *(unsigned __int8 *)(v140 + v148 + 11);
  if (v150 != 2)
    goto LABEL_325;
LABEL_323:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v140, 0x74u, 0) & 1) == 0)
  {
    v150 = 1;
LABEL_325:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v140, 0x74u, v150))
      goto LABEL_327;
  }
  gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)&__p, 0x74u, 1, v140);
  v151 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)__p.__r_.__value_.__l.__data_)), (float32x4_t)vdupq_n_s32(0x37800080u));
  *(_BYTE *)(a4 + 3) = 1;
  *(float64x2_t *)(a4 + 104) = vcvtq_f64_f32(*(float32x2_t *)v151.f32);
  *(float64x2_t *)(a4 + 120) = vcvt_hight_f64_f32(v151);
  v140 = *(_QWORD *)(v190 + 24);
  v141 = *(float **)v140;
LABEL_327:
  if (v141)
  {
    v152 = *v141;
    v153 = *v141 == 1.0;
    if (*(_BYTE *)(v140 + 10))
    {
      if (v152 != 0.0 && v152 != 1.0)
        goto LABEL_337;
    }
  }
  else
  {
    v153 = 0;
  }
  v155 = *(unsigned __int8 *)(v140 + v153 + 11);
  if (v155 != 2)
    goto LABEL_339;
LABEL_337:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v140, 0x93u, 0) & 1) == 0)
  {
    v155 = 1;
LABEL_339:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v140, 0x93u, v155))
      goto LABEL_341;
  }
  gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)&__p, 0x93u, 1, v140);
  v156 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)__p.__r_.__value_.__l.__data_)), (float32x4_t)vdupq_n_s32(0x37800080u));
  *(_BYTE *)(a4 + 5) = 1;
  *(float64x2_t *)(a4 + 168) = vcvtq_f64_f32(*(float32x2_t *)v156.f32);
  *(float64x2_t *)(a4 + 184) = vcvt_hight_f64_f32(v156);
  v140 = *(_QWORD *)(v190 + 24);
  v141 = *(float **)v140;
LABEL_341:
  if (v141)
  {
    v157 = *v141;
    v158 = *v141 == 1.0;
    if (*(_BYTE *)(v140 + 10) && v157 != 0.0 && v157 != 1.0)
      goto LABEL_348;
  }
  else
  {
    v158 = 0;
  }
  v159 = *(unsigned __int8 *)(v140 + v158 + 11);
  if (v159 == 2)
  {
LABEL_348:
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v140, 0x73u, 0) & 1) != 0)
    {
LABEL_351:
      gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)&__p, 0x73u, 1, v140);
      v188 = (float32x4_t)vdupq_n_s32(0x37800080u);
      v160 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)__p.__r_.__value_.__l.__data_)), v188);
      *(_BYTE *)(a4 + 6) = 1;
      *(float64x2_t *)(a4 + 200) = vcvtq_f64_f32(*(float32x2_t *)v160.f32);
      *(float64x2_t *)(a4 + 216) = vcvt_hight_f64_f32(v160);
      gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)&__p, 0x73u, 1, *(_QWORD *)(v190 + 24));
      v161 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)__p.__r_.__value_.__l.__data_)), v188);
      *(_BYTE *)(a4 + 7) = 1;
      *(float64x2_t *)(a4 + 232) = vcvtq_f64_f32(*(float32x2_t *)v161.f32);
      *(float64x2_t *)(a4 + 248) = vcvt_hight_f64_f32(v161);
      goto LABEL_352;
    }
    v159 = 1;
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v140, 0x73u, v159))
    goto LABEL_351;
LABEL_352:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v190);
  v162 = *a3;
  if (*a3)
  {
    v163 = (std::__shared_weak_count *)a3[1];
    __p.__r_.__value_.__r.__words[0] = v162;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v163;
    if (v163)
    {
      v164 = (unint64_t *)&v163->__shared_owners_;
      do
        v165 = __ldxr(v164);
      while (__stxr(v165 + 1, v164));
      v191 = v163;
      do
        v166 = __ldxr(v164);
      while (__stxr(v166 + 1, v164));
    }
    else
    {
      v191 = 0;
    }
    v192 = 0;
    v193 = 0;
    v190 = v162;
    v194 = 0;
    v167 = (*(uint64_t (**)(std::string::size_type, uint64_t *))(*(_QWORD *)v162 + 48))(v162, &v192);
    v194 = v167;
    if (v163)
    {
      v168 = (unint64_t *)&v163->__shared_owners_;
      do
        v169 = __ldaxr(v168);
      while (__stlxr(v169 - 1, v168));
      if (!v169)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
      if (v194)
      {
LABEL_367:
        if (!a4)
          goto LABEL_380;
        v170 = *(_QWORD *)(v190 + 24);
        v171 = *(float **)v170;
        if (*(_QWORD *)v170
          && (v172 = *v171, LODWORD(v171) = *v171 == 1.0, *(_BYTE *)(v170 + 10))
          && (v172 != 0.0 ? (v173 = v172 == 1.0) : (v173 = 1), !v173)
          || (v174 = *(unsigned __int8 *)(v170 + v171 + 11), v174 == 2))
        {
          if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v190 + 24), 0x73u, 0) & 1) != 0)
          {
LABEL_379:
            gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)&__p, 0x73u, 1, v170);
            v175 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)__p.__r_.__value_.__l.__data_)), (float32x4_t)vdupq_n_s32(0x37800080u));
            *(_BYTE *)(a4 + 7) = 1;
            *(float64x2_t *)(a4 + 232) = vcvtq_f64_f32(*(float32x2_t *)v175.f32);
            *(float64x2_t *)(a4 + 248) = vcvt_hight_f64_f32(v175);
LABEL_380:
            if (!v6)
              goto LABEL_418;
            v176 = *(_QWORD *)(v190 + 24);
            v177 = *(float **)v176;
            if (*(_QWORD *)v176)
            {
              v178 = *v177;
              v179 = *v177 == 1.0;
              if (*(_BYTE *)(v176 + 10))
              {
                if (v178 != 0.0 && v178 != 1.0)
                {
LABEL_393:
                  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v190 + 24), 9u, 0) & 1) != 0)
                  {
LABEL_396:
                    *(double *)(v6 + 48) = gss::QueryableLocker<gss::PropertyID>::targetValue<(gss::PropertyID)9>(v176);
                    v176 = *(_QWORD *)(v190 + 24);
                    v177 = *(float **)v176;
LABEL_397:
                    if (v177)
                    {
                      v182 = *v177;
                      v183 = *v177 == 1.0;
                      if (*(_BYTE *)(v176 + 10))
                      {
                        if (v182 != 0.0 && v182 != 1.0)
                          goto LABEL_407;
                      }
                    }
                    else
                    {
                      v183 = 0;
                    }
                    v185 = *(unsigned __int8 *)(v176 + v183 + 11);
                    if (v185 != 2)
                    {
LABEL_409:
                      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v176, 0x72u, v185))
                        goto LABEL_410;
LABEL_418:
                      v6 = 1;
                      goto LABEL_419;
                    }
LABEL_407:
                    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v176, 0x72u, 0) & 1) != 0)
                    {
LABEL_410:
                      gss::RenderStyleHelper<gss::PropertyID,std::string>::valueForKey(&__p, 0x72u, 1, v176, 0);
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v186 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                      else
                        v186 = __p.__r_.__value_.__l.__size_;
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v187 = &__p;
                      else
                        v187 = (std::string *)__p.__r_.__value_.__r.__words[0];
                      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((_QWORD *)(v6 + 88), v187, v186);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                      goto LABEL_418;
                    }
                    v185 = 1;
                    goto LABEL_409;
                  }
                  v181 = 1;
LABEL_395:
                  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v176, 9u, v181))
                    goto LABEL_397;
                  goto LABEL_396;
                }
              }
            }
            else
            {
              v179 = 0;
            }
            v181 = *(unsigned __int8 *)(v176 + v179 + 11);
            if (v181 != 2)
              goto LABEL_395;
            goto LABEL_393;
          }
          v174 = 1;
        }
        if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v170, 0x73u, v174))
          goto LABEL_380;
        goto LABEL_379;
      }
    }
    else if ((v167 & 1) != 0)
    {
      goto LABEL_367;
    }
    v6 = 0;
LABEL_419:
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v190);
    return v6;
  }
  return 1;
}

void sub_19FB35AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<md::NavRoadSign *,std::shared_ptr<md::NavLabel>::__shared_ptr_default_delete<md::NavLabel,md::NavRoadSign>,std::allocator<md::NavRoadSign>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::NavRoadSign *,std::shared_ptr<md::NavLabel>::__shared_ptr_default_delete<md::NavLabel,md::NavRoadSign>,std::allocator<md::NavRoadSign>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t gss::RenderStyle<gss::PropertyID>::styleValueForKey<gm::Matrix<float,2,1>>(uint64_t result, unsigned int a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  unsigned int v52;
  BOOL v53;

  v3 = *(_QWORD *)(result + 16 * a2 + 16);
  if (!v3)
  {
    if (a3)
      *a3 = 0;
    return (uint64_t)gss::defaultValueForKey<gss::PropertyID,gm::Matrix<float,2,1>>();
  }
  v4 = result + 16 * a2;
  v5 = *(unsigned __int16 *)(v4 + 56);
  if (*(_WORD *)(v4 + 56))
  {
    v6 = *(_QWORD *)(v4 + 48);
    v7 = v6 + 8 * v5;
    while (1)
    {
      v9 = *(uint64_t **)(*(_QWORD *)v6 + 72);
      if (!v9)
        goto LABEL_6;
      v10 = *v9;
      v11 = *(unsigned __int16 *)(v10 + 10);
      if (!*(_WORD *)(v10 + 10))
      {
        v8 = 0;
        goto LABEL_5;
      }
      v12 = *(unsigned __int16 **)v10;
      if (!*(_BYTE *)(v10 + 15))
        break;
      v13 = *(unsigned __int16 **)v10;
      v14 = *(unsigned __int16 *)(v10 + 10);
      if (v11 >= 0x1E)
      {
        do
        {
          v17 = v14 >> 1;
          v18 = &v13[v14 >> 1];
          v20 = *v18;
          v19 = v18 + 1;
          result = v20;
          v14 += ~(v14 >> 1);
          if (v20 < 0x92)
            v13 = v19;
          else
            v14 = v17;
        }
        while (v14);
        if (v13 == &v12[v11] || *v13 != 146)
          goto LABEL_6;
        goto LABEL_26;
      }
      v15 = 0;
      while (1)
      {
        v16 = v12[v15];
        if (v16 >= 0x92)
          break;
        if (v11 == ++v15)
          goto LABEL_6;
      }
      v8 = (unsigned __int16)v15;
      if (v16 != 146)
        v8 = *(unsigned __int16 *)(v10 + 10);
LABEL_5:
      if (v8 != (_DWORD)v11)
      {
        v27 = *(unsigned __int16 *)(v10 + 58);
        if (!*(_WORD *)(v10 + 58))
          return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        v28 = *(_QWORD *)(v10 + 48);
        if (*(_BYTE *)(v10 + 63))
        {
          if (v27 < 0x1E)
          {
            v29 = 0;
            result = (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
            while (1)
            {
              v30 = *(unsigned __int16 *)(v28 + 2 * (_QWORD)v29);
              if (v30 >= 0x92)
                break;
              v29 = (unsigned __int16 *)((char *)v29 + 1);
              if ((unsigned __int16 *)v27 == v29)
                return result;
            }
            LODWORD(v29) = (unsigned __int16)v29;
            if (v30 != 146)
              LODWORD(v29) = *(unsigned __int16 *)(v10 + 58);
            if (v29 < v27)
              return v28 + *(unsigned __int16 *)(v10 + 56) + 8 * v29;
            return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
          }
          v29 = *(unsigned __int16 **)(v10 + 48);
          v43 = *(unsigned __int16 *)(v10 + 58);
          do
          {
            v44 = v43 >> 1;
            v45 = &v29[v43 >> 1];
            v47 = *v45;
            v46 = v45 + 1;
            v43 += ~(v43 >> 1);
            if (v47 < 0x92)
              v29 = v46;
            else
              v43 = v44;
          }
          while (v43);
          if (v29 == (unsigned __int16 *)(v28 + 2 * v27) || *v29 != 146)
            return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        }
        else
        {
          v41 = 2 * v27;
          v29 = *(unsigned __int16 **)(v10 + 48);
          while (*v29 != 146)
          {
            ++v29;
            v41 -= 2;
            if (!v41)
            {
              LODWORD(v29) = v28 + 2 * v27;
              break;
            }
          }
        }
        LODWORD(v29) = (unsigned __int16)(((_DWORD)v29 - v28) >> 1);
        if (v29 < v27)
          return v28 + *(unsigned __int16 *)(v10 + 56) + 8 * v29;
        return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      }
LABEL_6:
      v6 += 8;
      if (v6 == v7)
        goto LABEL_29;
    }
    v21 = 2 * v11;
    v13 = *(unsigned __int16 **)v10;
    while (*v13 != 146)
    {
      ++v13;
      v21 -= 2;
      if (!v21)
      {
        LODWORD(v13) = (_DWORD)v12 + 2 * v11;
        break;
      }
    }
LABEL_26:
    v8 = (unsigned __int16)(((_DWORD)v13 - (_DWORD)v12) >> 1);
    goto LABEL_5;
  }
LABEL_29:
  v22 = *(uint64_t **)(v3 + 72);
  if (!v22)
    goto LABEL_60;
  v10 = *v22;
  v23 = *(unsigned __int16 *)(v10 + 10);
  if (!*(_WORD *)(v10 + 10))
    goto LABEL_60;
  v24 = *(unsigned __int16 **)v10;
  if (!*(_BYTE *)(v10 + 15))
  {
    v31 = 2 * v23;
    v32 = *(unsigned __int16 **)v10;
    while (*v32 != 146)
    {
      ++v32;
      v31 -= 2;
      if (!v31)
      {
        LODWORD(v32) = (_DWORD)v24 + 2 * v23;
        break;
      }
    }
LABEL_59:
    if ((unsigned __int16)(((_DWORD)v32 - (_DWORD)v24) >> 1) != (_DWORD)v23)
      goto LABEL_66;
    goto LABEL_60;
  }
  if (v23 >= 0x1E)
  {
    v32 = *(unsigned __int16 **)v10;
    v33 = *(unsigned __int16 *)(v10 + 10);
    do
    {
      v34 = v33 >> 1;
      v35 = &v32[v33 >> 1];
      v37 = *v35;
      v36 = v35 + 1;
      v33 += ~(v33 >> 1);
      if (v37 < 0x92)
        v32 = v36;
      else
        v33 = v34;
    }
    while (v33);
    if (v32 != &v24[v23] && *v32 == 146)
      goto LABEL_59;
LABEL_60:
    if (a3)
      *a3 = 0;
    return (uint64_t)gss::defaultValueForKey<gss::PropertyID,gm::Matrix<float,2,1>>();
  }
  v25 = 0;
  while (1)
  {
    v26 = v24[v25];
    if (v26 >= 0x92)
      break;
    if (v23 == ++v25)
      goto LABEL_60;
  }
  v38 = (unsigned __int16)v25;
  if (v26 != 146)
    v38 = *(unsigned __int16 *)(v10 + 10);
  if (v38 == (_DWORD)v23)
    goto LABEL_60;
LABEL_66:
  v39 = *(unsigned __int16 *)(v10 + 58);
  if (!*(_WORD *)(v10 + 58))
    return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  v28 = *(_QWORD *)(v10 + 48);
  if (*(_BYTE *)(v10 + 63))
  {
    if (v39 < 0x1E)
    {
      v29 = 0;
      result = (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      while (1)
      {
        v40 = *(unsigned __int16 *)(v28 + 2 * (_QWORD)v29);
        if (v40 >= 0x92)
          break;
        v29 = (unsigned __int16 *)((char *)v29 + 1);
        if ((unsigned __int16 *)v39 == v29)
          return result;
      }
      LODWORD(v29) = (unsigned __int16)v29;
      if (v40 != 146)
        LODWORD(v29) = *(unsigned __int16 *)(v10 + 58);
      v53 = v29 >= v39;
      if ((_DWORD)v29 == (_DWORD)v39)
        return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      goto LABEL_107;
    }
    v29 = *(unsigned __int16 **)(v10 + 48);
    v48 = *(unsigned __int16 *)(v10 + 58);
    do
    {
      v49 = v48 >> 1;
      v50 = &v29[v48 >> 1];
      v52 = *v50;
      v51 = v50 + 1;
      v48 += ~(v48 >> 1);
      if (v52 < 0x92)
        v29 = v51;
      else
        v48 = v49;
    }
    while (v48);
    if (v29 == (unsigned __int16 *)(v28 + 2 * v39) || *v29 != 146)
      return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  }
  else
  {
    v42 = 2 * v39;
    v29 = *(unsigned __int16 **)(v10 + 48);
    while (*v29 != 146)
    {
      ++v29;
      v42 -= 2;
      if (!v42)
      {
        LODWORD(v29) = v28 + 2 * v39;
        break;
      }
    }
  }
  LODWORD(v29) = (unsigned __int16)(((_DWORD)v29 - v28) >> 1);
  v53 = v29 >= v39;
  if ((_DWORD)v29 == (_DWORD)v39)
    return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
LABEL_107:
  if (!v53)
    return v28 + *(unsigned __int16 *)(v10 + 56) + 8 * v29;
  return result;
}

float gss::QueryableLocker<gss::PropertyID>::targetValue<(gss::PropertyID)9>(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  char v5;
  char v6;

  v2 = *(unsigned __int8 *)(a1 + 12);
  if (v2 != 2)
    return *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 9u, v2, 0);
  v6 = 1;
  v5 = 1;
  v3 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 9u, 0, &v6);
  gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 9u, 1u, &v5);
  return *(float *)v3;
}

void std::__shared_ptr_pointer<md::NavShield *,std::shared_ptr<md::NavLabel>::__shared_ptr_default_delete<md::NavLabel,md::NavShield>,std::allocator<md::NavShield>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::NavShield *,std::shared_ptr<md::NavLabel>::__shared_ptr_default_delete<md::NavLabel,md::NavShield>,std::allocator<md::NavShield>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t geo::dpSimplifyViaIndexes<gm::Matrix<double,2,1>,unsigned long>(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5, double a6)
{
  uint64_t v6;
  uint64_t v11;
  double v12;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  uint64_t v21;
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  double v28;
  float64x2_t v29;
  uint64_t v30;
  float64x2_t v31;

  v6 = a2 + 1;
  if (a2 + 1 < a3)
  {
    v11 = result;
    v12 = a6 * a6;
    __asm { FMOV            V0.2D, #1.0 }
    v31 = _Q0;
    do
    {
      v18 = *(float64x2_t *)(v11 + 16 * a2);
      v19 = vsubq_f64(*(float64x2_t *)(v11 + 16 * a3), v18);
      v20 = vmulq_f64(v19, v19);
      v21 = 0;
      if (vaddvq_f64(v20) <= 1.0e-15)
      {
        v28 = 0.0;
        do
        {
          v29 = vsubq_f64(*(float64x2_t *)(v11 + 16 * v6), v18);
          v29.f64[0] = vaddvq_f64(vmulq_f64(v29, v29));
          v27 = fmax(v29.f64[0], v28);
          if (v29.f64[0] > v28)
            v21 = v6;
          ++v6;
          v28 = v27;
        }
        while (a3 != v6);
      }
      else
      {
        v22 = vdivq_f64(v31, vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v20, 1), v20));
        v23 = 0.0;
        do
        {
          v24 = *(float64x2_t *)(v11 + 16 * v6);
          v25 = vmulq_f64(vsubq_f64(v24, v18), v19);
          v26 = vsubq_f64(v24, vmlaq_n_f64(v18, v19, fmin(fmax(vmulq_f64(vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v25, 1), v25), v22).f64[0], 0.0), 1.0)));
          v25.f64[0] = vaddvq_f64(vmulq_f64(v26, v26));
          v27 = fmax(v25.f64[0], v23);
          if (v25.f64[0] > v23)
            v21 = v6;
          ++v6;
          v23 = v27;
        }
        while (a3 != v6);
      }
      if (v27 <= v12)
        break;
      result = geo::dpSimplifyViaIndexes<gm::Matrix<double,2,1>,unsigned long>(v11, a6);
      v30 = (*a5)++;
      *(_QWORD *)(a4 + 8 * v30) = v21;
      v6 = v21 + 1;
      a2 = v21;
    }
    while (v21 + 1 < a3);
  }
  return result;
}

BOOL DetermineJunctionVisibility(VKLabelNavJunction *a1, md::NavContext *a2, double a3)
{
  VKLabelNavJunction *v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  long double v12;
  long double v13;
  long double v14;
  double *v15;
  uint64_t v16;
  long double v17;
  long double v18;
  long double v19;
  double v20;

  v5 = a1;
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 408))(*((_QWORD *)a2 + 2)) & 1) != 0
    || (v7 = -[VKLabelNavJunction routeOffset](v5, "routeOffset"),
        v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 168) + 32),
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8),
        *(_DWORD *)v9 <= v7)
    && (*(_DWORD *)v9 == (_DWORD)v7 ? (v10 = *(float *)(v9 + 4) <= *((float *)&v7 + 1)) : (v10 = 1), v10))
  {
    v6 = 1;
  }
  else
  {
    v11 = *((_QWORD *)a2 + 4);
    v12 = *(double *)(v11 + 96) * 6.28318531;
    v13 = exp(*(double *)(v11 + 104) * 6.28318531 + -3.14159265);
    atan(v13);
    v14 = fmod(v12, 6.28318531);
    fmod(v14 + 6.28318531, 6.28318531);
    v15 = -[VKLabelNavJunction mercatorCoordinate](v5, "mercatorCoordinate");
    v16 = -[VKLabelNavJunction mercatorCoordinate](v5, "mercatorCoordinate");
    v17 = *v15 * 6.28318531;
    v18 = exp(*(double *)(v16 + 8) * 6.28318531 + -3.14159265);
    atan(v18);
    v19 = fmod(v17, 6.28318531);
    fmod(v19 + 6.28318531, 6.28318531);
    GEOCalculateDistance();
    v6 = v20 <= a3;
  }

  return v6;
}

void sub_19FB363E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t karo::media::ZipLoader::loadFromChunk(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t **v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  size_t v15;
  size_t v16;
  int v17;
  __int128 *p_dst;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t **v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  uint64_t **v32;
  void **v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  void *v40;
  size_t v41;
  int v42;
  int v43;
  uint64_t *v44;
  std::string *v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t *v48;
  uInt v52;
  void *__p[2];
  uint64_t v54;
  z_stream buf;
  __int128 __dst;
  uint64_t v57;

  if (a3 >= 0x1E)
  {
    v7 = (uint64_t **)a4;
    v8 = a3;
    v9 = a2;
    v10 = 0;
    v47 = (uint64_t **)(a4 + 32);
    while (1)
    {
      buf.avail_in = 0;
      buf.next_in = 0;
      memset(&buf.zalloc, 0, 24);
      if (inflateInit2_(&buf, -15, "1.2.12", 112))
        return 0;
      __p[0] = 0;
      __p[1] = 0;
      v54 = 0;
      v13 = v9 + v10;
      v11 = v8;
      if (*(_DWORD *)(v9 + v10) != 67324752)
        goto LABEL_10;
      v14 = *(unsigned __int16 *)(v13 + 8);
      v52 = *(_DWORD *)(v13 + 18);
      v15 = *(unsigned int *)(v13 + 22);
      v16 = *(unsigned __int16 *)(v13 + 26);
      v17 = *(unsigned __int16 *)(v13 + 28);
      if (v16 >= 0x17)
      {
        if ((v16 | 7) == 0x17)
          v19 = ((unsigned __int16)v16 & 0xFFF8) + 8;
        else
          v19 = v16 | 7;
        p_dst = (__int128 *)operator new(v19 + 1);
        *((_QWORD *)&__dst + 1) = v16;
        v57 = v19 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v57) = *(_WORD *)(v13 + 26);
        p_dst = &__dst;
        if (!(_DWORD)v16)
          goto LABEL_25;
      }
      memcpy(p_dst, (const void *)(v13 + 30), v16);
LABEL_25:
      *((_BYTE *)p_dst + v16) = 0;
      if (SHIBYTE(v54) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = __dst;
      v54 = v57;
      if ((_DWORD)v15)
      {
        v20 = (char *)operator new(v15);
        bzero(v20, v15);
        v21 = (uint64_t *)&v20[v15];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
      v22 = v16 + v17 + 30;
      if (v14)
      {
        buf.avail_in = v52;
        buf.next_in = (Bytef *)(v13 + v22);
        buf.avail_out = v15;
        buf.next_out = (Bytef *)v20;
        v23 = inflate(&buf, 0) + 4;
        if (v23 <= 6 && ((1 << v23) & 0x43) != 0)
        {
          inflateEnd(&buf);
          v24 = 0;
          goto LABEL_71;
        }
      }
      else
      {
        memcpy(v20, (const void *)(v13 + v22), v15);
      }
      v25 = std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (const void **)__p, (uint64_t)__p);
      v27 = v25 + 7;
      v26 = v25[7];
      if (v26)
      {
        v25[8] = v26;
        operator delete(v26);
      }
      *v27 = 0;
      v27[1] = 0;
      v27[2] = 0;
      v28 = std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a4, (const void **)__p, (uint64_t)__p);
      v48 = v28[7];
      v28[7] = (uint64_t *)v20;
      v28[8] = v21;
      v28[9] = v21;
      v29 = *(uint64_t **)(a4 + 32);
      v30 = HIBYTE(v54);
      v31 = v47;
      v32 = v47;
      if (!v29)
        goto LABEL_64;
      if (v54 >= 0)
        v33 = __p;
      else
        v33 = (void **)__p[0];
      if (v54 >= 0)
        v34 = (void *)HIBYTE(v54);
      else
        v34 = __p[1];
      do
      {
        while (1)
        {
          v31 = (uint64_t **)v29;
          v37 = v29[4];
          v35 = v29 + 4;
          v36 = (_QWORD *)v37;
          v38 = *((char *)v35 + 23);
          v39 = v38 >= 0 ? v35 : v36;
          v40 = v38 >= 0 ? (void *)*((unsigned __int8 *)v35 + 23) : (void *)v35[1];
          v41 = (size_t)(v40 >= v34 ? v34 : v40);
          v42 = memcmp(v33, v39, v41);
          if (v42)
            break;
          if (v34 >= v40)
            goto LABEL_58;
LABEL_44:
          v29 = *v31;
          v32 = v31;
          if (!*v31)
            goto LABEL_64;
        }
        if (v42 < 0)
          goto LABEL_44;
LABEL_58:
        v43 = memcmp(v39, v33, v41);
        if (v43)
        {
          if ((v43 & 0x80000000) == 0)
            goto LABEL_70;
        }
        else if (v40 >= v34)
        {
          goto LABEL_70;
        }
        v29 = v31[1];
      }
      while (v29);
      v32 = v31 + 1;
LABEL_64:
      v44 = (uint64_t *)operator new(0x38uLL);
      v45 = (std::string *)(v44 + 4);
      if (v30 < 0)
      {
        std::string::__init_copy_ctor_external(v45, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v45->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v44[6] = v54;
      }
      *v44 = 0;
      v44[1] = 0;
      v44[2] = (uint64_t)v31;
      *v32 = v44;
      v46 = **(_QWORD **)(a4 + 24);
      if (v46)
      {
        *(_QWORD *)(a4 + 24) = v46;
        v44 = *v32;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a4 + 32), v44);
      ++*(_QWORD *)(a4 + 40);
LABEL_70:
      v10 += v22 + v52;
      v24 = 1;
      v20 = (char *)v48;
      v7 = (uint64_t **)a4;
LABEL_71:
      if (v20)
        operator delete(v20);
      if (v24)
      {
        v11 = v10;
        v9 = a2;
        v8 = a3;
LABEL_10:
        inflateEnd(&buf);
        v5 = 1;
        v10 = v11;
        if (SHIBYTE(v54) < 0)
          goto LABEL_75;
        goto LABEL_11;
      }
      v5 = 0;
      v9 = a2;
      v8 = a3;
      if (SHIBYTE(v54) < 0)
LABEL_75:
        operator delete(__p[0]);
LABEL_11:
      if (v10 < v8)
        v12 = v5;
      else
        v12 = 0;
      if ((v12 & 1) == 0)
        return v5;
    }
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v4 = GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.next_in) = 0;
    _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_ERROR, "Zip file smaller than the zip header", (uint8_t *)&buf, 2u);
  }
  return 0;
}

uint64_t md::HighPrecisionAltitudeRequest::resolveResults(md::HighPrecisionAltitudeRequest *this)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  id v7;
  id v8;
  double v9;
  double *v10;
  double *v11;
  double *v12;
  char *v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  double *v32;
  double *v33;
  double *v34;

  if (*((_BYTE *)this + 80))
    return 1;
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    std::mutex::lock(*((std::mutex **)this + 2));
    v4 = *(unsigned __int8 *)(v3 + 64);
    std::mutex::unlock((std::mutex *)v3);
    if (v4)
    {
      v5 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        std::mutex::lock(*(std::mutex **)this);
        v6 = *(unsigned __int8 *)(v5 + 64);
        std::mutex::unlock((std::mutex *)v5);
        if (v6)
        {
          *((_BYTE *)this + 80) = 1;
          v7 = *(id *)(*(_QWORD *)this + 88);
          if (v7)
          {

            return 1;
          }
          v8 = *(id *)(*((_QWORD *)this + 2) + 128);

          if (v8)
            return 1;
          geo::small_vector<geo::Unit<geo::MeterUnitDescription,double>,2ul>::small_vector(&v32, (uint64_t **)(*((_QWORD *)this + 2) + 72));
          v9 = *(double *)(*(_QWORD *)this + 72);
          geo::small_vector_base<geo::Unit<geo::MeterUnitDescription,double>>::reserve((char **)this + 4, v33 - v32);
          v10 = v32;
          v11 = v33;
          if (v32 == v33)
          {
LABEL_32:
            if (v10 != v34)
              free(v10);
            return 1;
          }
          v13 = (char *)*((_QWORD *)this + 4);
          v12 = (double *)*((_QWORD *)this + 5);
          v14 = *((_QWORD *)this + 7);
          while (1)
          {
            v15 = *v10;
            v16 = ((char *)v12 - v13) >> 3;
            if (v14 < v16 + 1)
              break;
LABEL_14:
            *v12++ = v15 - v9;
            *((_QWORD *)this + 5) = v12;
            if (++v10 == v11)
            {
              v10 = v32;
              goto LABEL_32;
            }
          }
          v17 = (char *)*((_QWORD *)this + 6);
          v18 = (1 << -(char)__clz(v14 + 1));
          if (v14 >= 0xFFFFFFFFFFFFFFFELL)
            v18 = 1;
          if (v18 <= v16 + 1)
            v14 = v16 + 1;
          else
            v14 = v18;
          v19 = (char *)malloc_type_malloc(8 * v14, 0x100004000313F17uLL);
          v20 = (char *)*((_QWORD *)this + 4);
          v21 = (char *)*((_QWORD *)this + 5);
          if (v20 != v21)
          {
            v22 = v21 - v20 - 8;
            v23 = v19;
            v24 = (char *)*((_QWORD *)this + 4);
            if (v22 >= 0x18)
            {
              v23 = v19;
              v24 = (char *)*((_QWORD *)this + 4);
              if ((unint64_t)(v19 - v20) >= 0x20)
              {
                v25 = (v22 >> 3) + 1;
                v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
                v23 = &v19[v26];
                v27 = (__int128 *)(v20 + 16);
                v28 = v19 + 16;
                v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v30 = *v27;
                  *(v28 - 1) = *(v27 - 1);
                  *v28 = v30;
                  v27 += 2;
                  v28 += 2;
                  v29 -= 4;
                }
                while (v29);
                if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_29;
                v24 = &v20[v26];
              }
            }
            do
            {
              v31 = *(_QWORD *)v24;
              v24 += 8;
              *(_QWORD *)v23 = v31;
              v23 += 8;
            }
            while (v24 != v21);
          }
LABEL_29:
          if (v13 != v17)
            free(v20);
          *((_QWORD *)this + 4) = v19;
          v12 = (double *)&v19[8 * v16];
          *((_QWORD *)this + 7) = v14;
          v13 = v19;
          goto LABEL_14;
        }
      }
    }
  }
  return 0;
}

void sub_19FB36AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11)
{
  if (a9 != a11)
    free(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *geo::small_vector<geo::Unit<geo::MeterUnitDescription,double>,2ul>::small_vector(_QWORD *a1, uint64_t **a2)
{
  char *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  __int128 *v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v3 = (char *)(a1 + 4);
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3;
  a1[3] = 2;
  v4 = *a2;
  v5 = a2[1];
  v6 = (char *)v5 - (char *)*a2;
  v7 = v6 >> 3;
  if ((unint64_t)v6 >= 0x11)
  {
    if (v7 <= 4)
      v8 = 4;
    else
      v8 = v6 >> 3;
    v3 = (char *)malloc_type_malloc(8 * v8, 0x100004000313F17uLL);
    v9 = (char *)*a1;
    v10 = (char *)a1[1];
    if ((char *)*a1 == v10)
      goto LABEL_14;
    v11 = v10 - v9 - 8;
    if (v11 < 0x18)
    {
      v12 = v3;
    }
    else
    {
      v12 = v3;
      if ((unint64_t)(v3 - v9) >= 0x20)
      {
        v13 = (v11 >> 3) + 1;
        v14 = 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
        v12 = &v3[v14];
        v15 = (__int128 *)(v9 + 16);
        v16 = v3 + 16;
        v17 = v13 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v18 = *v15;
          *(v16 - 1) = *(v15 - 1);
          *v16 = v18;
          v15 += 2;
          v16 += 2;
          v17 -= 4;
        }
        while (v17);
        if (v13 == (v13 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_14;
        v9 += v14;
      }
    }
    do
    {
      v19 = *(_QWORD *)v9;
      v9 += 8;
      *(_QWORD *)v12 = v19;
      v12 += 8;
    }
    while (v9 != v10);
LABEL_14:
    *a1 = v3;
    a1[3] = v8;
  }
  if (v4 == v5)
    goto LABEL_24;
  if ((unint64_t)(v6 - 8) < 0x18)
  {
    v20 = v3;
    do
    {
LABEL_23:
      v27 = *v4++;
      *(_QWORD *)v20 = v27;
      v20 += 8;
    }
    while (v4 != v5);
    goto LABEL_24;
  }
  v20 = v3;
  if ((unint64_t)(v3 - (char *)v4) < 0x20)
    goto LABEL_23;
  v21 = ((unint64_t)(v6 - 8) >> 3) + 1;
  v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
  v20 = &v3[v22];
  v23 = (__int128 *)(v4 + 2);
  v24 = v3 + 16;
  v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v26 = *v23;
    *(v24 - 1) = *(v23 - 1);
    *v24 = v26;
    v23 += 2;
    v24 += 2;
    v25 -= 4;
  }
  while (v25);
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v4 = (uint64_t *)((char *)v4 + v22);
    goto LABEL_23;
  }
LABEL_24:
  a1[1] = &v3[8 * v7];
  return a1;
}

void geo::small_vector_base<geo::Unit<geo::MeterUnitDescription,double>>::reserve(char **a1, unint64_t a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v2 = (unint64_t)a1[3];
  if (v2 >= a2)
    return;
  v4 = a1[1];
  v5 = a1[2];
  v6 = *a1;
  v7 = (1 << -(char)__clz(v2 + 1));
  if (v2 >= 0xFFFFFFFFFFFFFFFELL)
    v8 = 1;
  else
    v8 = v7;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  v10 = (char *)malloc_type_malloc(8 * v9, 0x100004000313F17uLL);
  v11 = *a1;
  v12 = a1[1];
  if (*a1 != v12)
  {
    v13 = v12 - v11 - 8;
    v14 = v10;
    v15 = *a1;
    if (v13 < 0x18)
      goto LABEL_15;
    v14 = v10;
    v15 = *a1;
    if ((unint64_t)(v10 - v11) < 0x20)
      goto LABEL_15;
    v16 = (v13 >> 3) + 1;
    v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    v14 = &v10[v17];
    v18 = (__int128 *)(v11 + 16);
    v19 = v10 + 16;
    v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *v18;
      *(v19 - 1) = *(v18 - 1);
      *v19 = v21;
      v18 += 2;
      v19 += 2;
      v20 -= 4;
    }
    while (v20);
    if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v15 = &v11[v17];
      do
      {
LABEL_15:
        v22 = *(_QWORD *)v15;
        v15 += 8;
        *(_QWORD *)v14 = v22;
        v14 += 8;
      }
      while (v15 != v12);
    }
  }
  if (v6 != v5)
    free(v11);
  *a1 = v10;
  a1[1] = &v10[v4 - v6];
  a1[3] = (char *)v9;
}

uint64_t md::HighPrecisionAltitudeRequest::to_string(md::HighPrecisionAltitudeRequest *this, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  const char *v13;
  size_t v14;
  size_t v15;
  void **p_dst;
  unint64_t v17;
  const void **v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t j;
  _QWORD *v28;
  void *v29;
  id v30;
  const char *v31;
  size_t v32;
  size_t v33;
  void **v34;
  unint64_t v35;
  const void **v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  char v43;
  size_t v44;
  const void **v45;
  unint64_t v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  md::HighPrecisionAltitudeRequest *v50;
  uint64_t v51;
  void **__dst;
  size_t v54;
  int64_t v55;
  _QWORD v56[2];
  _QWORD v57[3];
  _QWORD v58[3];
  uint64_t v59;
  unint64_t v60;
  void *v61;
  char v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  _QWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[16];
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *__p;
  char v74;
  unint64_t v75;
  int v76;
  _BYTE v77[160];

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v56);
  *(_QWORD *)((char *)&v56[2] + *(_QWORD *)(v56[0] - 24)) = 8;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)"isResolved:", 11);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)"egm2008Altitudes:[", 18);
  v5 = a2[4];
  for (i = a2[5]; v5 != i; v5 += 8)
  {
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)",", 1);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)"]", 1);
  v8 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v9 = MEMORY[0x1E0DE4FB8];
  if (!*a2)
  {
LABEL_30:
    if (!a2[2])
      goto LABEL_61;
    goto LABEL_31;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)", undulationRequest:{", 21);
  v10 = *a2;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v66);
  *(_QWORD *)((char *)&v66[2] + *(_QWORD *)(v66[0] - 24)) = 8;
  std::mutex::lock((std::mutex *)v10);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v67, (uint64_t)"undulation:", 11);
  std::ostream::operator<<();
  if (*(_QWORD *)(v10 + 88))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), *(_QWORD *)(v10 + 88));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v67, (uint64_t)", error:", 8);
    v12 = objc_retainAutorelease(v11);
    v13 = (const char *)objc_msgSend(v12, "UTF8String");
    v14 = strlen(v13);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v67, (uint64_t)v13, v14);

  }
  std::mutex::unlock((std::mutex *)v10);
  if ((v76 & 0x10) != 0)
  {
    v17 = v75;
    if (v75 < v72)
    {
      v75 = v72;
      v17 = v72;
    }
    v18 = (const void **)&v71;
  }
  else
  {
    if ((v76 & 8) == 0)
    {
      v15 = 0;
      HIBYTE(v55) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_21;
    }
    v18 = (const void **)v69;
    v17 = v70;
  }
  v19 = *v18;
  v15 = v17 - (_QWORD)*v18;
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v15 >= 0x17)
  {
    v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v20 = v15 | 7;
    v21 = v20 + 1;
    p_dst = (void **)operator new(v20 + 1);
    v54 = v15;
    v55 = v21 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_20;
  }
  HIBYTE(v55) = v17 - *(_BYTE *)v18;
  p_dst = (void **)&__dst;
  if (v15)
LABEL_20:
    memmove(p_dst, v19, v15);
LABEL_21:
  *((_BYTE *)p_dst + v15) = 0;
  v66[0] = *v8;
  v22 = v8[9];
  *(_QWORD *)((char *)v66 + *(_QWORD *)(v66[0] - 24)) = v8[8];
  v67 = v22;
  v68 = v9 + 16;
  if (v74 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AF4D64](v77);
  if (v55 >= 0)
    v23 = (void **)&__dst;
  else
    v23 = __dst;
  if (v55 >= 0)
    v24 = HIBYTE(v55);
  else
    v24 = v54;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)v23, v24);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)"}", 1);
  if ((SHIBYTE(v55) & 0x80000000) == 0)
    goto LABEL_30;
  operator delete(__dst);
  if (!a2[2])
    goto LABEL_61;
LABEL_31:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)", vlRequest:{", 13);
  v25 = a2[2];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v66);
  *(_QWORD *)((char *)&v66[2] + *(_QWORD *)(v66[0] - 24)) = 8;
  std::mutex::lock((std::mutex *)v25);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v67, (uint64_t)"wgs84Altitudes:[", 16);
  v26 = *(_QWORD *)(v25 + 72);
  for (j = *(_QWORD *)(v25 + 80); v26 != j; v26 += 8)
  {
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)",", 1);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v67, (uint64_t)"],", 2);
  if (*(_QWORD *)(v25 + 128))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), *(_QWORD *)(v25 + 128));
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v67, (uint64_t)", error:", 8);
    v30 = objc_retainAutorelease(v29);
    v31 = (const char *)objc_msgSend(v30, "UTF8String");
    v32 = strlen(v31);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v67, (uint64_t)v31, v32);

  }
  std::mutex::unlock((std::mutex *)v25);
  if ((v76 & 0x10) != 0)
  {
    v35 = v75;
    if (v75 < v72)
    {
      v75 = v72;
      v35 = v72;
    }
    v36 = (const void **)&v71;
  }
  else
  {
    if ((v76 & 8) == 0)
    {
      v33 = 0;
      HIBYTE(v55) = 0;
      v34 = (void **)&__dst;
      goto LABEL_52;
    }
    v36 = (const void **)v69;
    v35 = v70;
  }
  v37 = *v36;
  v33 = v35 - (_QWORD)*v36;
  if (v33 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v33 >= 0x17)
  {
    v38 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v38 = v33 | 7;
    v39 = v38 + 1;
    v34 = (void **)operator new(v38 + 1);
    v54 = v33;
    v55 = v39 | 0x8000000000000000;
    __dst = v34;
    goto LABEL_51;
  }
  HIBYTE(v55) = v35 - *(_BYTE *)v36;
  v34 = (void **)&__dst;
  if (v33)
LABEL_51:
    memmove(v34, v37, v33);
LABEL_52:
  *((_BYTE *)v34 + v33) = 0;
  v66[0] = *v8;
  v40 = v8[9];
  *(_QWORD *)((char *)v66 + *(_QWORD *)(v66[0] - 24)) = v8[8];
  v67 = v40;
  v68 = v9 + 16;
  if (v74 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AF4D64](v77);
  if (v55 >= 0)
    v41 = (void **)&__dst;
  else
    v41 = __dst;
  if (v55 >= 0)
    v42 = HIBYTE(v55);
  else
    v42 = v54;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)v41, v42);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)"}", 1);
  if (SHIBYTE(v55) < 0)
  {
    operator delete(__dst);
    v43 = v64;
    if ((v64 & 0x10) == 0)
      goto LABEL_62;
LABEL_66:
    v46 = v63;
    if (v63 < v60)
    {
      v63 = v60;
      v46 = v60;
    }
    v45 = (const void **)&v59;
    goto LABEL_69;
  }
LABEL_61:
  v43 = v64;
  if ((v64 & 0x10) != 0)
    goto LABEL_66;
LABEL_62:
  if ((v43 & 8) == 0)
  {
    v44 = 0;
    *((_BYTE *)this + 23) = 0;
    goto LABEL_77;
  }
  v45 = (const void **)v58;
  v46 = v58[2];
LABEL_69:
  v47 = *v45;
  v44 = v46 - (_QWORD)*v45;
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v44 >= 0x17)
  {
    v48 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v48 = v44 | 7;
    v49 = v48 + 1;
    v50 = (md::HighPrecisionAltitudeRequest *)operator new(v48 + 1);
    *((_QWORD *)this + 1) = v44;
    *((_QWORD *)this + 2) = v49 | 0x8000000000000000;
    *(_QWORD *)this = v50;
    this = v50;
    goto LABEL_76;
  }
  *((_BYTE *)this + 23) = v44;
  if (v44)
LABEL_76:
    memmove(this, v47, v44);
LABEL_77:
  *((_BYTE *)this + v44) = 0;
  v56[0] = *v8;
  v51 = v8[9];
  *(_QWORD *)((char *)v56 + *(_QWORD *)(v56[0] - 24)) = v8[8];
  v57[0] = v51;
  v57[1] = v9 + 16;
  if (v62 < 0)
    operator delete(v61);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v65);
}

void sub_19FB3747C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  std::mutex *v52;

  std::mutex::unlock(v52);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a52);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void md::HighPrecisionAltitudeRequest::createDebugNode(md::HighPrecisionAltitudeRequest *this, uint64_t *a2)
{
  char *v4;
  uint64_t v5;
  double *v6;
  double *v7;
  uint64_t v8;
  char *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  const std::string::value_type *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double *v25;
  uint64_t v26;
  char *v27;
  double v28;
  void *v29;
  id v30;
  id v31;
  const std::string::value_type *v32;
  char *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void **v37;
  void **i;
  char v39[18];
  char v40[24];
  __int128 v41;
  void *v42[4];
  char v43;
  void *v44;
  void **v45;
  char *v46;
  _QWORD v47[7];
  int v48;
  void *v49[2];
  char *v50;
  std::string __p;
  int v52;
  char v53[16];
  uint64_t v54;
  std::string v55;
  int v56;
  char v57[23];
  char v58;
  _QWORD v59[4];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;

  v4 = (char *)operator new(0x20uLL);
  strcpy(v4, "HighPrecisionAltitudeRequest");
  std::string::__init_copy_ctor_external((std::string *)this, v4, 0x1CuLL);
  *((_BYTE *)this + 24) = 0;
  *(_OWORD *)((char *)this + 47) = 0u;
  *(_OWORD *)((char *)this + 63) = 0u;
  *(_OWORD *)((char *)this + 79) = 0u;
  *((_BYTE *)this + 95) = 0;
  operator delete(v4);
  v40[0] = 10;
  strcpy(v39, "isResolved");
  v5 = *((unsigned __int8 *)a2 + 80);
  v48 = 0;
  memset(&v47[4], 0, 24);
  v47[0] = v5;
  gdc::DebugTreeNode::addProperty((uint64_t)this, (uint64_t)v39, (uint64_t)v47);
  v7 = (double *)a2[4];
  v6 = (double *)a2[5];
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v8 = (char *)v6 - (char *)v7;
  if (v6 != v7)
  {
    if ((unint64_t)v8 >= 0x1FFFFFFFFFFFFFF9)
      abort();
    v9 = (char *)operator new(8 * v8);
    v44 = v9;
    v45 = (void **)v9;
    v46 = &v9[64 * (v8 >> 3)];
    do
    {
      v10 = *v7;
      if (v9 < v46)
      {
        *((_QWORD *)v9 + 4) = 0;
        *((_QWORD *)v9 + 5) = 0;
        *((_QWORD *)v9 + 6) = 0;
        *((_DWORD *)v9 + 14) = 2;
        *((double *)v9 + 2) = v10;
        v9 += 64;
      }
      else
      {
        v9 = std::vector<gdc::DebugTreeValue>::__emplace_back_slow_path<double &>(&v44, v10);
      }
      v45 = (void **)v9;
      ++v7;
    }
    while (v7 != v6);
  }
  v40[0] = 16;
  strcpy(v39, "egm2008Altitudes");
  gdc::DebugTreeNode::addProperty((uint64_t)this, (uint64_t)v39, (uint64_t *)&v44);
  v11 = *a2;
  if (*a2)
  {
    strcpy(v39, "UndulationRequest");
    *(_WORD *)v40 = 17;
    v41 = 0u;
    memset(v42, 0, sizeof(v42));
    v43 = 0;
    std::mutex::lock((std::mutex *)v11);
    HIBYTE(v54) = 9;
    strcpy(v53, "hasResult");
    v12 = *(unsigned __int8 *)(v11 + 64);
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v60 = 0;
    v59[0] = v12;
    gdc::DebugTreeNode::addProperty((uint64_t)v39, (uint64_t)v53, (uint64_t)v59);
    v13 = *(_QWORD *)(v11 + 72);
    HIBYTE(v50) = 10;
    strcpy((char *)v49, "undulation");
    memset(&v55, 0, sizeof(v55));
    v56 = 2;
    v54 = v13;
    gdc::DebugTreeNode::addProperty((uint64_t)v39, (uint64_t)v49, (uint64_t)v53);
    v14 = (void *)MEMORY[0x1E0CB3940];
    v15 = *(void **)(v11 + 88);
    v58 = 5;
    strcpy(v57, "error");
    v16 = v15;
    objc_msgSend(v14, "stringWithFormat:", CFSTR("%@"), v16);
    v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v18 = (const std::string::value_type *)objc_msgSend(v17, "UTF8String");
    memset(&__p, 0, sizeof(__p));
    v52 = 4;
    if (v18)
    {
      std::string::__assign_external(&__p, v18);
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&__p, "<null>");
    }
    gdc::DebugTreeNode::addProperty((uint64_t)v39, (uint64_t)v57, (uint64_t)v49);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);

    std::mutex::unlock((std::mutex *)v11);
    gdc::DebugTreeNode::addChildNode(this, (__int128 *)v39);
    v19 = *(void **)((char *)&v42[1] + 1);
    if (*(void **)((char *)&v42[1] + 1))
    {
      v20 = *(uint64_t *)((char *)&v42[2] + 1);
      v21 = *(void **)((char *)&v42[1] + 1);
      if (*(void **)((char *)&v42[2] + 1) != *(void **)((char *)&v42[1] + 1))
      {
        do
        {
          v20 -= 80;
          std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v20);
        }
        while ((void *)v20 != v19);
        v21 = *(void **)((char *)&v42[1] + 1);
      }
      *(void **)((char *)&v42[2] + 1) = v19;
      operator delete(v21);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)&v41 + 1));
    if (((char)v41 & 0x80000000) == 0)
    {
      if ((v40[0] & 0x80000000) == 0)
        goto LABEL_21;
LABEL_33:
      operator delete(*(void **)v39);
      v22 = a2[2];
      if (!v22)
        goto LABEL_52;
      goto LABEL_22;
    }
    operator delete(*(void **)&v40[1]);
    if (v40[0] < 0)
      goto LABEL_33;
  }
LABEL_21:
  v22 = a2[2];
  if (!v22)
    goto LABEL_52;
LABEL_22:
  strcpy(v39, "VLRequest");
  strcpy(v40, "\t");
  v41 = 0u;
  memset(v42, 0, sizeof(v42));
  v43 = 0;
  std::mutex::lock((std::mutex *)v22);
  HIBYTE(v54) = 9;
  strcpy(v53, "hasResult");
  v23 = *(unsigned __int8 *)(v22 + 64);
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v60 = 0;
  v59[0] = v23;
  gdc::DebugTreeNode::addProperty((uint64_t)v39, (uint64_t)v53, (uint64_t)v59);
  v25 = *(double **)(v22 + 72);
  v24 = *(double **)(v22 + 80);
  v49[0] = 0;
  v49[1] = 0;
  v50 = 0;
  v26 = (char *)v24 - (char *)v25;
  if (v24 == v25)
  {
    v27 = 0;
  }
  else
  {
    if ((unint64_t)v26 >= 0x1FFFFFFFFFFFFFF9)
      abort();
    v27 = (char *)operator new(8 * v26);
    v49[0] = v27;
    v49[1] = v27;
    v50 = &v27[64 * (v26 >> 3)];
    do
    {
      v28 = *v25;
      if (v27 < v50)
      {
        *((_QWORD *)v27 + 4) = 0;
        *((_QWORD *)v27 + 5) = 0;
        *((_QWORD *)v27 + 6) = 0;
        *((_DWORD *)v27 + 14) = 2;
        *((double *)v27 + 2) = v28;
        v27 += 64;
      }
      else
      {
        v27 = std::vector<gdc::DebugTreeValue>::__emplace_back_slow_path<double &>(v49, v28);
      }
      v49[1] = v27;
      ++v25;
    }
    while (v25 != v24);
  }
  v58 = 5;
  strcpy(v57, "error");
  v29 = (void *)MEMORY[0x1E0CB3940];
  v30 = *(id *)(v22 + 128);
  objc_msgSend(v29, "stringWithFormat:", CFSTR("%@"), v30);
  v31 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v32 = (const std::string::value_type *)objc_msgSend(v31, "UTF8String");
  memset(&v55, 0, sizeof(v55));
  v56 = 4;
  if (v32)
  {
    std::string::__assign_external(&v55, v32);
  }
  else
  {
    *((_BYTE *)&v55.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v55, "<null>");
  }
  gdc::DebugTreeNode::addProperty((uint64_t)v39, (uint64_t)v57, (uint64_t)v53);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);

  v33 = (char *)v49[0];
  if (v49[0])
  {
    while (v27 != v33)
    {
      if (*(v27 - 9) < 0)
        operator delete(*((void **)v27 - 4));
      v27 -= 64;
    }
    operator delete(v33);
  }
  std::mutex::unlock((std::mutex *)v22);
  gdc::DebugTreeNode::addChildNode(this, (__int128 *)v39);
  v34 = *(void **)((char *)&v42[1] + 1);
  if (*(void **)((char *)&v42[1] + 1))
  {
    v35 = *(uint64_t *)((char *)&v42[2] + 1);
    v36 = *(void **)((char *)&v42[1] + 1);
    if (*(void **)((char *)&v42[2] + 1) != *(void **)((char *)&v42[1] + 1))
    {
      do
      {
        v35 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v35);
      }
      while ((void *)v35 != v34);
      v36 = *(void **)((char *)&v42[1] + 1);
    }
    *(void **)((char *)&v42[2] + 1) = v34;
    operator delete(v36);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)&v41 + 1));
  if (((char)v41 & 0x80000000) == 0)
  {
    if ((v40[0] & 0x80000000) == 0)
      goto LABEL_52;
LABEL_61:
    operator delete(*(void **)v39);
    v37 = (void **)v44;
    if (!v44)
      return;
    goto LABEL_53;
  }
  operator delete(*(void **)&v40[1]);
  if (v40[0] < 0)
    goto LABEL_61;
LABEL_52:
  v37 = (void **)v44;
  if (!v44)
    return;
LABEL_53:
  for (i = v45; i != v37; i -= 8)
  {
    if (*((char *)i - 9) < 0)
      operator delete(*(i - 4));
  }
  operator delete(v37);
}

void sub_19FB37BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  gdc::DebugTreeNode *v34;
  std::mutex *v35;
  void *v36;
  void *v37;
  void *v38;

  v38 = v36;

  std::vector<gdc::DebugTreeValue>::~vector[abi:nn180100](&a34);
  std::mutex::unlock(v35);
  gdc::DebugTreeNode::~DebugTreeNode((gdc::DebugTreeNode *)&a11);
  std::vector<gdc::DebugTreeValue>::~vector[abi:nn180100](&a23);
  gdc::DebugTreeNode::~DebugTreeNode(v34);
  _Unwind_Resume(a1);
}

char *std::vector<gdc::DebugTreeValue>::__emplace_back_slow_path<double &>(void **a1, double a2)
{
  void **v2;
  void **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v3 = (void **)*a1;
  v2 = (void **)a1[1];
  v4 = ((char *)v2 - (_BYTE *)*a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    abort();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v3;
  if (v7 >> 5 > v5)
    v5 = v7 >> 5;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFC0)
    v5 = 0x3FFFFFFFFFFFFFFLL;
  if (v5 >> 58)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v9 = v5 << 6;
  v10 = (char *)operator new(v5 << 6);
  v11 = &v10[64 * v4];
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  v12 = &v10[v9];
  *((_QWORD *)v11 + 4) = 0;
  *((_DWORD *)v11 + 14) = 2;
  *((double *)v11 + 2) = a2;
  v13 = v11 + 64;
  if (v2 == v3)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v14 = *((_OWORD *)v2 - 4);
      *(_OWORD *)(v11 - 55) = *(_OWORD *)((char *)v2 - 55);
      *((_OWORD *)v11 - 4) = v14;
      v15 = *((_OWORD *)v2 - 2);
      *((_QWORD *)v11 - 2) = *(v2 - 2);
      *((_OWORD *)v11 - 2) = v15;
      *(v2 - 3) = 0;
      *(v2 - 2) = 0;
      *(v2 - 4) = 0;
      *((_DWORD *)v11 - 2) = *((_DWORD *)v2 - 2);
      v11 -= 64;
      v2 -= 8;
    }
    while (v2 != v3);
    v2 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    while (v16 != v2)
    {
      if (*((char *)v16 - 9) < 0)
        operator delete(*(v16 - 4));
      v16 -= 8;
    }
  }
  if (v2)
    operator delete(v2);
  return v13;
}

uint64_t geo::_retain_ptr<CLLocationManager * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4CD0;

  return a1;
}

void geo::_retain_ptr<CLLocationManager * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4CD0;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<VLLocalizer * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4A50;

  return a1;
}

void geo::_retain_ptr<VLLocalizer * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4A50;

  JUMPOUT(0x1A1AF4E00);
}

void md::HighPrecisionAltitudeRequestor::~HighPrecisionAltitudeRequestor(md::HighPrecisionAltitudeRequestor *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  md::HighPrecisionAltitudeRequestor *v5;
  uint64_t v6;
  uint64_t v7;
  md::HighPrecisionAltitudeRequestor *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  md::HighPrecisionAltitudeRequestor *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  md::HighPrecisionAltitudeRequestor *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  md::HighPrecisionAltitudeRequestor *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  md::HighPrecisionAltitudeRequestor *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  md::HighPrecisionAltitudeRequestor *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;

  v2 = (char *)this + 376;
  v3 = (char *)*((_QWORD *)this + 50);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (md::HighPrecisionAltitudeRequestor *)*((_QWORD *)this + 46);
  if (v5 == (md::HighPrecisionAltitudeRequestor *)((char *)this + 344))
  {
    v6 = 4;
    v5 = (md::HighPrecisionAltitudeRequestor *)((char *)this + 344);
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
  }
  if (*((_QWORD *)this + 42))
  {
    v7 = *((_QWORD *)this + 40);
    v8 = (md::HighPrecisionAltitudeRequestor *)*((_QWORD *)this + 41);
    v9 = *(_QWORD *)v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *((_QWORD *)this + 42) = 0;
    if (v8 != (md::HighPrecisionAltitudeRequestor *)((char *)this + 320))
    {
      do
      {
        v26 = (md::HighPrecisionAltitudeRequestor *)*((_QWORD *)v8 + 1);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v8 + 5);
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        operator delete(v8);
        v8 = v26;
      }
      while (v26 != (md::HighPrecisionAltitudeRequestor *)((char *)this + 320));
    }
  }
  v10 = (_QWORD *)*((_QWORD *)this + 37);
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = (void *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v12)
    operator delete(v12);
  if (*((_QWORD *)this + 33))
  {
    v13 = *((_QWORD *)this + 31);
    v14 = (md::HighPrecisionAltitudeRequestor *)*((_QWORD *)this + 32);
    v15 = *(_QWORD *)v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *((_QWORD *)this + 33) = 0;
    if (v14 != (md::HighPrecisionAltitudeRequestor *)((char *)this + 248))
    {
      do
      {
        v30 = (md::HighPrecisionAltitudeRequestor *)*((_QWORD *)v14 + 1);
        v31 = (std::__shared_weak_count *)*((_QWORD *)v14 + 5);
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        operator delete(v14);
        v14 = v30;
      }
      while (v30 != (md::HighPrecisionAltitudeRequestor *)((char *)this + 248));
    }
  }
  v16 = (_QWORD *)*((_QWORD *)this + 28);
  if (v16)
  {
    do
    {
      v17 = (_QWORD *)*v16;
      operator delete(v16);
      v16 = v17;
    }
    while (v17);
  }
  v18 = (void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v18)
    operator delete(v18);
  if (*((_QWORD *)this + 24))
  {
    v19 = *((_QWORD *)this + 22);
    v20 = (md::HighPrecisionAltitudeRequestor *)*((_QWORD *)this + 23);
    v21 = *(_QWORD *)v20;
    *(_QWORD *)(v21 + 8) = *(_QWORD *)(v19 + 8);
    **(_QWORD **)(v19 + 8) = v21;
    *((_QWORD *)this + 24) = 0;
    if (v20 != (md::HighPrecisionAltitudeRequestor *)((char *)this + 176))
    {
      do
      {
        v34 = (md::HighPrecisionAltitudeRequestor *)*((_QWORD *)v20 + 1);
        v35 = (std::__shared_weak_count *)*((_QWORD *)v20 + 5);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        operator delete(v20);
        v20 = v34;
      }
      while (v34 != (md::HighPrecisionAltitudeRequestor *)((char *)this + 176));
    }
  }
  v22 = (_QWORD *)*((_QWORD *)this + 19);
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      operator delete(v22);
      v22 = v23;
    }
    while (v23);
  }
  v24 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v24)
    operator delete(v24);
  *((_QWORD *)this + 13) = &off_1E42B4CD0;

  *((_QWORD *)this + 10) = &off_1E42B4A50;
  v25 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<md::HighPrecisionAltitudeRequestor::loadFrameworks(void)::$_0 &&>>()
{
  if (LoadCoreLocation(void)::loadPredicate != -1)
    dispatch_once(&LoadCoreLocation(void)::loadPredicate, &__block_literal_global_21188);
  if (LoadVisualLocalization(void)::loadPredicate != -1)
    dispatch_once(&LoadVisualLocalization(void)::loadPredicate, &__block_literal_global_42);
}

void ___ZL22LoadVisualLocalizationv_block_invoke()
{
  LoadVisualLocalization(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/VisualLocalization.framework/VisualLocalization", 2);
  if (!LoadVisualLocalization(void)::frameworkLibrary)
    NSLog((NSString *)CFSTR("### Failed to Soft Linked: /System/Library/Frameworks/VisualLocalization.framework/VisualLocalization"));
}

void ___ZL16LoadCoreLocationv_block_invoke()
{
  LoadCoreLocation(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/CoreLocation.framework/CoreLocation", 2);
  if (!LoadCoreLocation(void)::frameworkLibrary)
    NSLog((NSString *)CFSTR("### Failed to Soft Linked: /System/Library/Frameworks/CoreLocation.framework/CoreLocation"));
}

Class initCLLocation(void)
{
  Class result;

  if (LoadCoreLocation(void)::loadPredicate != -1)
    dispatch_once(&LoadCoreLocation(void)::loadPredicate, &__block_literal_global_21188);
  result = objc_getClass("CLLocation");
  classCLLocation = (uint64_t)result;
  getCLLocationClass[0] = (uint64_t (*)(void))CLLocationFunction;
  return result;
}

id CLLocationFunction(void)
{
  return (id)classCLLocation;
}

uint64_t geo::_retain_ptr<CLLocation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B49B0;

  return a1;
}

void geo::_retain_ptr<CLLocation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B49B0;

  JUMPOUT(0x1A1AF4E00);
}

id md::HighPrecisionAltitudeRequestor::vlLocalizer(md::HighPrecisionAltitudeRequestor *this)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  char v7;
  char **v8;
  char *v9;

  v2 = (void *)*((_QWORD *)this + 11);
  if (!v2)
  {
    v3 = atomic_load((unint64_t *)this + 55);
    if (v3 != -1)
    {
      v9 = &v7;
      v8 = &v9;
      std::__call_once((std::once_flag::_State_type *)this + 55, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<md::HighPrecisionAltitudeRequestor::loadFrameworks(void)::$_0 &&>>);
    }
    v4 = objc_msgSend(objc_alloc((Class)getVLLocalizerClass[0]()), "initWithAuditToken:", 0);
    v5 = (void *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v4;

    v2 = (void *)*((_QWORD *)this + 11);
  }
  return v2;
}

Class initVLLocalizer(void)
{
  Class result;

  if (LoadVisualLocalization(void)::loadPredicate != -1)
    dispatch_once(&LoadVisualLocalization(void)::loadPredicate, &__block_literal_global_42);
  result = objc_getClass("VLLocalizer");
  classVLLocalizer = (uint64_t)result;
  getVLLocalizerClass[0] = (uint64_t (*)(void))VLLocalizerFunction;
  return result;
}

id VLLocalizerFunction(void)
{
  return (id)classVLLocalizer;
}

Class initCLLocationManager(void)
{
  Class result;

  if (LoadCoreLocation(void)::loadPredicate != -1)
    dispatch_once(&LoadCoreLocation(void)::loadPredicate, &__block_literal_global_21188);
  result = objc_getClass("CLLocationManager");
  classCLLocationManager = (uint64_t)result;
  getCLLocationManagerClass[0] = (uint64_t (*)(void))CLLocationManagerFunction;
  return result;
}

id CLLocationManagerFunction(void)
{
  return (id)classCLLocationManager;
}

_QWORD *std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  unint64_t v11;
  uint64_t v13;

  v3 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = (a3
      + ((a2 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(a2 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (a2 - 0x61C8864680B583EBLL);
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = (a3
        + ((a2 - 0x61C8864680B583EBLL) << 6)
        + ((unint64_t)(a2 - 0x61C8864680B583EBLL) >> 2)
        - 0x61C8864680B583EBLL) ^ (a2 - 0x61C8864680B583EBLL);
    if (v4 >= *(_QWORD *)&v3)
      v6 = v4 % *(_QWORD *)&v3;
  }
  else
  {
    v6 = v4 & (*(_QWORD *)&v3 - 1);
  }
  v7 = *(_QWORD **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = (_QWORD *)*v7;
  if (*v7)
  {
    if (v5.u32[0] < 2uLL)
    {
      v9 = *(_QWORD *)&v3 - 1;
      while (1)
      {
        v13 = result[1];
        if (v13 == v4)
        {
          if (result[2] == a2 && result[3] == a3)
            return result;
        }
        else if ((v13 & v9) != v6)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v11 = result[1];
      if (v11 == v4)
      {
        if (result[2] == a2 && result[3] == a3)
          return result;
      }
      else
      {
        if (v11 >= *(_QWORD *)&v3)
          v11 %= *(_QWORD *)&v3;
        if (v11 != v6)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *geo::Cache<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>,md::SpatialKeyHash,geo::LRUPolicy>::operator[](uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _OWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v33;
  uint64_t v35;
  _QWORD *v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  size_t prime;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  size_t v48;
  size_t v49;
  size_t v50;
  _QWORD *i;
  size_t v52;
  uint64_t v53;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  size_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  void *v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  unint64_t *v76;
  unint64_t v77;
  void *__p[3];

  v5 = (uint64_t *)(a1 + 48);
  v6 = (void **)(a1 + 8);
  v7 = *a2;
  v8 = a2[1];
  v9 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>((_QWORD *)(a1 + 8), *a2, v8);
  if (v9)
  {
    v10 = *(uint64_t **)(a1 + 56);
    v11 = (uint64_t *)v9[4];
    if (v10 != v11)
    {
      v12 = (uint64_t *)v11[1];
      if (v12 != v10)
      {
        v13 = *v11;
        *(_QWORD *)(v13 + 8) = v12;
        *(_QWORD *)v11[1] = v13;
        v14 = *v10;
        *(_QWORD *)(v14 + 8) = v11;
        *v11 = v14;
        *v10 = (uint64_t)v11;
        v11[1] = (uint64_t)v10;
        v10 = *(uint64_t **)(a1 + 56);
      }
    }
    if (v10 != v5)
      return v10 + 4;
    v8 = a2[1];
  }
  v15 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(v6, v7, v8);
  if (v15)
  {
    v16 = v15;
    v17 = (uint64_t *)v15[4];
    v18 = *v17;
    *(_QWORD *)(v18 + 8) = v17[1];
    *(_QWORD *)v17[1] = v18;
    --*(_QWORD *)(a1 + 64);
    v19 = (std::__shared_weak_count *)v17[5];
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    operator delete(v17);
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v6, v16);
    if (__p[0])
      operator delete(__p[0]);
  }
  v22 = operator new(0x30uLL);
  v22[1] = *(_OWORD *)a2;
  *((_QWORD *)v22 + 4) = 0;
  *((_QWORD *)v22 + 5) = 0;
  v23 = *(_QWORD **)(a1 + 56);
  *(_QWORD *)v22 = v5;
  *((_QWORD *)v22 + 1) = v23;
  *v23 = v22;
  v24 = *(_QWORD *)(a1 + 64) + 1;
  *(_QWORD *)(a1 + 56) = v22;
  *(_QWORD *)(a1 + 64) = v24;
  v25 = *a2;
  v26 = a2[1];
  v27 = (v26
       + ((*a2 - 0x61C8864680B583EBLL) << 6)
       + ((unint64_t)(*a2 - 0x61C8864680B583EBLL) >> 2)
       - 0x61C8864680B583EBLL) ^ (*a2 - 0x61C8864680B583EBLL);
  v28 = *(_QWORD *)(a1 + 16);
  if (v28)
  {
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      v2 = (v26
          + ((*a2 - 0x61C8864680B583EBLL) << 6)
          + ((unint64_t)(*a2 - 0x61C8864680B583EBLL) >> 2)
          - 0x61C8864680B583EBLL) ^ (*a2 - 0x61C8864680B583EBLL);
      if (v27 >= v28)
        v2 = v27 % v28;
    }
    else
    {
      v2 = v27 & (v28 - 1);
    }
    v30 = (_QWORD *)*((_QWORD *)*v6 + v2);
    if (v30)
    {
      v31 = (_QWORD *)*v30;
      if (v31)
      {
        if (v29.u32[0] < 2uLL)
        {
          while (1)
          {
            v35 = v31[1];
            if (v35 == v27)
            {
              if (v31[2] == v25 && v31[3] == v26)
                goto LABEL_113;
            }
            else if ((v35 & (v28 - 1)) != v2)
            {
              goto LABEL_42;
            }
            v31 = (_QWORD *)*v31;
            if (!v31)
              goto LABEL_42;
          }
        }
        do
        {
          v33 = v31[1];
          if (v33 == v27)
          {
            if (v31[2] == v25 && v31[3] == v26)
              goto LABEL_113;
          }
          else
          {
            if (v33 >= v28)
              v33 %= v28;
            if (v33 != v2)
              break;
          }
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
    }
  }
LABEL_42:
  v36 = operator new(0x28uLL);
  *v36 = 0;
  v36[1] = v27;
  *((_OWORD *)v36 + 1) = *(_OWORD *)a2;
  v36[4] = v22;
  v37 = (float)(unint64_t)(*(_QWORD *)(a1 + 32) + 1);
  v38 = *(float *)(a1 + 40);
  if (!v28 || (float)(v38 * (float)v28) < v37)
  {
    v39 = 1;
    if (v28 >= 3)
      v39 = (v28 & (v28 - 1)) != 0;
    v40 = v39 | (2 * v28);
    v41 = vcvtps_u32_f32(v37 / v38);
    if (v40 <= v41)
      prime = v41;
    else
      prime = v40;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v28 = *(_QWORD *)(a1 + 16);
    }
    if (prime <= v28)
    {
      if (prime >= v28)
        goto LABEL_79;
      v54 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
      if (v28 < 3 || (v55 = (uint8x8_t)vcnt_s8((int8x8_t)v28), v55.i16[0] = vaddlv_u8(v55), v55.u32[0] > 1uLL))
      {
        v54 = std::__next_prime(v54);
      }
      else
      {
        v56 = 1 << -(char)__clz(v54 - 1);
        if (v54 >= 2)
          v54 = v56;
      }
      if (prime <= v54)
        prime = v54;
      if (prime >= v28)
      {
        v28 = *(_QWORD *)(a1 + 16);
LABEL_79:
        if ((v28 & (v28 - 1)) != 0)
        {
          if (v27 >= v28)
            v2 = v27 % v28;
          else
            v2 = v27;
        }
        else
        {
          v2 = (v28 - 1) & v27;
        }
        goto LABEL_92;
      }
      if (!prime)
      {
        v63 = *v6;
        *v6 = 0;
        if (v63)
          operator delete(v63);
        v28 = 0;
        *(_QWORD *)(a1 + 16) = 0;
        goto LABEL_79;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v43 = operator new(8 * prime);
    v44 = *v6;
    *v6 = v43;
    if (v44)
      operator delete(v44);
    v45 = 0;
    *(_QWORD *)(a1 + 16) = prime;
    do
      *((_QWORD *)*v6 + v45++) = 0;
    while (prime != v45);
    v47 = a1 + 24;
    v46 = *(_QWORD **)(a1 + 24);
    if (!v46)
    {
LABEL_78:
      v28 = prime;
      goto LABEL_79;
    }
    v48 = v46[1];
    v49 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v50 = v48 & v49;
      *((_QWORD *)*v6 + v50) = v47;
      for (i = (_QWORD *)*v46; *v46; i = (_QWORD *)*v46)
      {
        v52 = i[1] & v49;
        if (v52 == v50)
        {
          v46 = i;
        }
        else if (*((_QWORD *)*v6 + v52))
        {
          *v46 = *i;
          v53 = 8 * v52;
          *i = **(_QWORD **)((char *)*v6 + v53);
          **(_QWORD **)((char *)*v6 + v53) = i;
        }
        else
        {
          *((_QWORD *)*v6 + v52) = v46;
          v46 = i;
          v50 = v52;
        }
      }
      goto LABEL_78;
    }
    if (v48 >= prime)
      v48 %= prime;
    *((_QWORD *)*v6 + v48) = v47;
    v57 = (_QWORD *)*v46;
    if (!*v46)
      goto LABEL_78;
    while (1)
    {
      v59 = v57[1];
      if (v59 >= prime)
        v59 %= prime;
      if (v59 != v48)
      {
        if (!*((_QWORD *)*v6 + v59))
        {
          *((_QWORD *)*v6 + v59) = v46;
          goto LABEL_83;
        }
        *v46 = *v57;
        v58 = 8 * v59;
        *v57 = **(_QWORD **)((char *)*v6 + v58);
        **(_QWORD **)((char *)*v6 + v58) = v57;
        v57 = v46;
      }
      v59 = v48;
LABEL_83:
      v46 = v57;
      v57 = (_QWORD *)*v57;
      v48 = v59;
      if (!v57)
        goto LABEL_78;
    }
  }
LABEL_92:
  v60 = *v6;
  v61 = (_QWORD *)*((_QWORD *)*v6 + v2);
  if (v61)
  {
    *v36 = *v61;
  }
  else
  {
    *v36 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v36;
    v60[v2] = a1 + 24;
    if (!*v36)
      goto LABEL_101;
    v62 = *(_QWORD *)(*v36 + 8);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v62 >= v28)
        v62 %= v28;
    }
    else
    {
      v62 &= v28 - 1;
    }
    v61 = (char *)*v6 + 8 * v62;
  }
  *v61 = v36;
LABEL_101:
  ++*(_QWORD *)(a1 + 32);
LABEL_113:
  while (1)
  {
    v64 = *(_QWORD *)(a1 + 64);
    if (v64 <= *(_QWORD *)a1)
      break;
    v65 = (uint64_t *)*v5;
    v66 = *(_QWORD *)(*v5 + 16);
    v67 = *(_QWORD *)(*v5 + 24);
    v68 = *(std::__shared_weak_count **)(*v5 + 40);
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
      v65 = *(uint64_t **)(a1 + 48);
      v71 = (std::__shared_weak_count *)v65[5];
      v64 = *(_QWORD *)(a1 + 64);
    }
    else
    {
      v71 = 0;
    }
    v72 = *v65;
    *(_QWORD *)(v72 + 8) = v65[1];
    *(_QWORD *)v65[1] = v72;
    *(_QWORD *)(a1 + 64) = v64 - 1;
    if (v71)
    {
      v73 = (unint64_t *)&v71->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    operator delete(v65);
    v75 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(v6, v66, v67);
    if (v75)
    {
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v6, v75);
      if (__p[0])
        operator delete(__p[0]);
    }
    if (v68)
    {
      v76 = (unint64_t *)&v68->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
  }
  v10 = *(uint64_t **)(a1 + 56);
  return v10 + 4;
}

void std::__shared_ptr_emplace<md::HighPrecisionAltitudeRequest>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::HighPrecisionAltitudeRequest>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD818;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::HighPrecisionAltitudeRequest>::__on_zero_shared(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = (void *)a1[7];
  if (v2 != (void *)a1[9])
    free(v2);
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[4];
    if (!v6)
      return;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[4];
    if (!v6)
      return;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void ___ZL48GEOGetVectorKitHighPrecisionAltitudeRequestorLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "HighPrecisionAltitudeRequestor");
  v1 = (void *)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
  GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log = (uint64_t)v0;

}

void md::HighPrecisionAltitudeRequestor::requestAltitude(_QWORD *a1, uint64_t *a2, double *a3)
{
  double v5;
  double v6;
  long double v7;
  long double v8;
  long double v9;
  double v10;
  long double v11;
  double v12;
  long double v13;
  double v14;
  long double v15;
  long double v16;
  float64x2_t v17;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  NSObject *v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  long double v37;
  long double v38;
  long double v39;
  long double v40;
  double v41;
  long double v42;
  double v43;
  long double v44;
  long double v45;
  float64x2_t v46;
  uint64_t *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  _BYTE *v56;
  _BYTE *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  void *v61;
  unint64_t v62;
  void *v63;
  NSObject *v64;
  _BYTE *v65;
  _BYTE *v66;
  char *v67;
  unint64_t *v68;
  void *v69;
  unint64_t *p_shared_weak_owners;
  unint64_t v71;
  id v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  _OWORD *v94;
  _OWORD *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint8x8_t v106;
  unint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  unint64_t v111;
  uint64_t v113;
  _QWORD *v114;
  float v115;
  float v116;
  _QWORD *v117;
  _BOOL8 v118;
  unint64_t v119;
  unint64_t v120;
  size_t prime;
  void *v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t *v126;
  size_t v127;
  size_t v128;
  size_t v129;
  _QWORD *i;
  size_t v131;
  uint64_t v132;
  unint64_t v133;
  uint8x8_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  size_t v138;
  _QWORD *v139;
  _QWORD *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  _QWORD *v145;
  double v146;
  double v147;
  long double v148;
  long double v149;
  long double v150;
  double v151;
  long double v152;
  double v153;
  long double v154;
  double v155;
  long double v156;
  long double v157;
  float64x2_t v158;
  uint64x2_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  NSObject *v169;
  double v170;
  uint64_t v171;
  char *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  void *v176;
  unint64_t v177;
  id v178;
  void *v179;
  id v180;
  unint64_t v181;
  uint64_t v182;
  void *v183;
  NSObject *v184;
  double v185;
  uint64_t v186;
  char *v187;
  char *v188;
  unint64_t *v189;
  char *v190;
  std::__shared_weak_count *v191;
  double v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  double v196;
  uint64_t v197;
  unint64_t v198;
  id v199;
  std::__shared_weak_count *v200;
  char *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  __n128 (*v205)(__n128 *, __n128 *);
  uint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  _QWORD *v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t *v218;
  uint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  _OWORD *v222;
  _OWORD *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint8x8_t v232;
  _QWORD *v233;
  _QWORD *v234;
  unint64_t v236;
  uint64_t v238;
  uint64x2_t *v239;
  float v240;
  float v241;
  _BOOL8 v242;
  unint64_t v243;
  unint64_t v244;
  size_t v245;
  void *v246;
  _QWORD *v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t *v250;
  size_t v251;
  size_t v252;
  size_t v253;
  _QWORD *j;
  size_t v255;
  uint64_t v256;
  unint64_t v257;
  uint8x8_t v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  size_t v262;
  _QWORD *v263;
  uint64x2_t **v264;
  unint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  _QWORD *v269;
  unint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  uint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  _QWORD *v281;
  unint64_t *v282;
  unint64_t v283;
  uint64_t *v284;
  unint64_t v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *p_shared_owners;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  uint64_t v301;
  unint64_t *v302;
  unint64_t v303;
  _QWORD *v304;
  unint64_t *v305;
  unint64_t v306;
  std::__shared_weak_count *v307;
  uint64_t *v308;
  unint64_t v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  BOOL v316;
  NSObject *v317;
  double v318;
  uint64_t v319;
  _QWORD *v320;
  uint64_t v321;
  unint64_t *v322;
  char *v323;
  unint64_t *v324;
  unint64_t v325;
  unint64_t *v326;
  unint64_t v327;
  uint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  unint64_t *v333;
  unint64_t v334;
  unint64_t *v335;
  unint64_t v336;
  void *v337;
  void *v338;
  std::__shared_weak_count *v339;
  float64x2_t v341;
  uint64_t v342;
  uint64_t v343;
  std::__shared_weak_count *v344;
  void *v345;
  void *v346;
  uint64x2_t v347;
  double *v348;
  float64_t v349;
  int64x2_t v350;
  std::__shared_weak_count *v351;
  float64_t v352;
  uint64_t *v353;
  char *v354;
  std::__shared_weak_count *v355;
  char *v356;
  std::__shared_weak_count *v357;
  uint64x2_t v358;
  std::__shared_weak_count_vtbl *v359;
  std::__shared_weak_count *v360;
  uint64_t v361;
  std::__shared_weak_count *v362;
  uint64_t v363;
  std::__shared_weak_count *v364;
  void *__p[3];
  _BYTE *v366;
  _BYTE **v367;
  uint64_t v368;
  __n128 (*v369)(__n128 *, __n128 *);
  uint64_t (*v370)();
  const char *v371;
  uint64x2_t v372;
  _BYTE buf[32];
  __int128 v374;
  std::__shared_weak_count *v375;
  int64x2_t v376;
  id v377;
  std::__shared_weak_count *v378;
  id v379;
  uint64_t v380;

  v380 = *MEMORY[0x1E0C80C00];
  v5 = *((double *)a2 + 8);
  v6 = *a3;
  v7 = cos(*a3 * 0.034906585) * -559.82 + 111132.92;
  v8 = v7 + cos(v6 * 0.0698131701) * 1.175;
  v9 = v8 + cos(v6 * 0.104719755) * -0.0023;
  v10 = v6 * 0.00872664626;
  v11 = tan(v6 * 0.00872664626 + 0.78103484);
  v12 = log(v11);
  v13 = tan(v10 + 0.789761487);
  v14 = fabs((log(v13) - v12) * 0.159154943);
  v348 = a3;
  v349 = a3[1];
  v15 = tan(v10 + 0.785398163);
  v16 = log(v15);
  v17.f64[0] = v349;
  v17.f64[1] = v16;
  __asm { FMOV            V0.2D, #0.5 }
  v341 = _Q0;
  v358 = vcvtq_u64_f64(vmulq_n_f64(vmlaq_f64(_Q0, (float64x2_t)xmmword_19FFB32D0, v17), v9 / (v14 * v5)));
  v22 = v358.i64[1];
  v23 = v358.i64[0];
  v24 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(a2 + 35, v358.i64[0], v358.i64[1]);
  if (v24)
  {
    v25 = (uint64_t *)a2[41];
    v26 = (uint64_t *)v24[4];
    if (v25 != v26)
    {
      v27 = (uint64_t *)v26[1];
      if (v27 != v25)
      {
        v28 = *v26;
        *(_QWORD *)(v28 + 8) = v27;
        *(_QWORD *)v26[1] = v28;
        v29 = *v25;
        *(_QWORD *)(v29 + 8) = v26;
        *v26 = v29;
        *v25 = (uint64_t)v26;
        v26[1] = (uint64_t)v25;
        v25 = (uint64_t *)a2[41];
      }
    }
    if (v25 != a2 + 40)
    {
      ++*((_DWORD *)a2 + 106);
      v30 = (_QWORD *)v25[4];
      if (!*v30 && !v30[2])
        ++*((_DWORD *)a2 + 108);
      if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_47);
      v31 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_DEBUG))
      {
        v32 = *v348;
        v33 = *((_QWORD *)v348 + 1);
        *(_DWORD *)buf = 134218752;
        *(double *)&buf[4] = v32;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v33;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v23;
        LOWORD(v374) = 2048;
        *(_QWORD *)((char *)&v374 + 2) = v22;
        _os_log_impl(&dword_19F029000, v31, OS_LOG_TYPE_DEBUG, "Found cached high precision altitude for coordinate:%f,%f key:%llu,%llu", buf, 0x2Au);
      }
      *a1 = v25[4];
      v34 = v25[5];
      a1[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)(v34 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      return;
    }
  }
  ++*((_DWORD *)a2 + 107);
  v350 = *(int64x2_t *)a3;
  v366 = 0;
  v367 = &v366;
  v368 = 0x4012000000;
  v369 = __Block_byref_object_copy__21223;
  v370 = __Block_byref_object_dispose__21224;
  v371 = "";
  v37 = cos(0.034906585 * *(double *)v350.i64) * -559.82 + 111132.92;
  v38 = v37 + cos(0.0698131701 * *(double *)v350.i64) * 1.175;
  v39 = v38 + cos(0.104719755 * *(double *)v350.i64) * -0.0023;
  v40 = tan(0.00872664626 * *(double *)v350.i64 + 0.78103484);
  v41 = log(v40);
  v42 = tan(0.00872664626 * *(double *)v350.i64 + 0.789761487);
  v43 = fabs((log(v42) - v41) * 0.159154943);
  v44 = tan(0.00872664626 * *(double *)v350.i64 + 0.785398163);
  v45 = log(v44);
  *(_QWORD *)&v46.f64[0] = vdupq_laneq_s64(v350, 1).u64[0];
  v46.f64[1] = v45;
  v372 = vcvtq_u64_f64(vmulq_n_f64(vmlaq_f64(v341, (float64x2_t)xmmword_19FFB32D0, v46), v39 / (v43 * v5)));
  v47 = a2 + 22;
  v48 = a2 + 17;
  v49 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(a2 + 17, v372.i64[0], v372.i64[1]);
  if (!v49)
    goto LABEL_30;
  v50 = (uint64_t *)a2[23];
  v51 = (uint64_t *)v49[4];
  if (v50 != v51)
  {
    v52 = (uint64_t *)v51[1];
    if (v52 != v50)
    {
      v53 = *v51;
      *(_QWORD *)(v53 + 8) = v52;
      *(_QWORD *)v51[1] = v53;
      v54 = *v50;
      *(_QWORD *)(v54 + 8) = v51;
      *v51 = v54;
      *v50 = (uint64_t)v51;
      v51[1] = (uint64_t)v50;
      v50 = (uint64_t *)a2[23];
    }
  }
  if (v50 == v47)
  {
LABEL_30:
    ++*((_DWORD *)a2 + 105);
    md::HighPrecisionAltitudeRequestor::vlLocalizer((md::HighPrecisionAltitudeRequestor *)a2);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v61)
    {
      v356 = 0;
      v357 = 0;
LABEL_381:

      goto LABEL_168;
    }
    v62 = atomic_load((unint64_t *)a2 + 55);
    if (v62 != -1)
    {
      *(_QWORD *)buf = &v363;
      __p[0] = buf;
      std::__call_once((std::once_flag::_State_type *)a2 + 55, __p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<md::HighPrecisionAltitudeRequestor::loadFrameworks(void)::$_0 &&>>);
    }
    v63 = (void *)objc_msgSend(objc_alloc((Class)getCLLocationClass[0]()), "initWithLatitude:longitude:", *(_OWORD *)&v350);
    if (!v63)
    {
      v356 = 0;
      v357 = 0;
LABEL_380:

      goto LABEL_381;
    }
    if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_47);
    v64 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      v66 = v367[6];
      v65 = v367[7];
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = v350.i64[0];
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v350.i64[1];
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v66;
      LOWORD(v374) = 2048;
      *(_QWORD *)((char *)&v374 + 2) = v65;
      _os_log_impl(&dword_19F029000, v64, OS_LOG_TYPE_DEBUG, "Requesting vlAltitude for coordinate:%f,%f key:%llu,%llu", buf, 0x2Au);
    }
    v337 = v63;
    v338 = v61;
    v67 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v67 + 1) = 0;
    v68 = (unint64_t *)(v67 + 8);
    *((_QWORD *)v67 + 2) = 0;
    *(_QWORD *)v67 = &off_1E42DBB00;
    *((_QWORD *)v67 + 3) = 850045863;
    *((_OWORD *)v67 + 2) = 0u;
    *((_OWORD *)v67 + 3) = 0u;
    *((_OWORD *)v67 + 4) = 0u;
    *(_OWORD *)(v67 + 73) = 0u;
    *((_QWORD *)v67 + 12) = v67 + 128;
    *((_QWORD *)v67 + 13) = v67 + 128;
    *((_QWORD *)v67 + 14) = v67 + 128;
    *((_QWORD *)v67 + 15) = 2;
    *((_QWORD *)v67 + 18) = &off_1E42B5410;
    *((_QWORD *)v67 + 19) = 0;
    v356 = v67 + 24;
    v357 = (std::__shared_weak_count *)v67;
    v69 = (void *)*a2;
    v339 = (std::__shared_weak_count *)a2[1];
    if (v339)
    {
      p_shared_weak_owners = (unint64_t *)&v339->__shared_weak_owners_;
      do
        v71 = __ldxr(p_shared_weak_owners);
      while (__stxr(v71 + 1, p_shared_weak_owners));
    }
    v72 = v63;
    v73 = a2[2];
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3321888768;
    *(_QWORD *)&buf[16] = ___ZN2md30HighPrecisionAltitudeRequestor17requestVLAltitudeEN3geo12Coordinate2DINS1_7DegreesEdEE_block_invoke;
    *(_QWORD *)&buf[24] = &unk_1E42E9F50;
    *((_QWORD *)&v374 + 1) = v67 + 24;
    v375 = (std::__shared_weak_count *)v67;
    do
      v74 = __ldxr(v68);
    while (__stxr(v74 + 1, v68));
    v376 = v350;
    *(_QWORD *)&v374 = &v366;
    v377 = v69;
    v378 = v339;
    if (v339)
    {
      v75 = (unint64_t *)&v339->__shared_weak_owners_;
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    objc_msgSend(v61, "determineAltitudesAtLocation:callbackQueue:callback:", v72, v73, buf, (char *)&v374 + 8);

    v77 = (uint64_t)v367;
    v79 = v367 + 6;
    v78 = (uint64_t)v367[6];
    v80 = (uint64_t)v367[7];
    v81 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(a2 + 17, v78, v80);
    if (v81)
    {
      v82 = (uint64_t *)a2[23];
      v83 = (uint64_t *)v81[4];
      if (v82 != v83)
      {
        v84 = (uint64_t *)v83[1];
        if (v84 != v82)
        {
          v85 = *v83;
          *(_QWORD *)(v85 + 8) = v84;
          *(_QWORD *)v83[1] = v85;
          v86 = *v82;
          *(_QWORD *)(v86 + 8) = v83;
          *v83 = v86;
          *v82 = (uint64_t)v83;
          v83[1] = (uint64_t)v82;
          v82 = (uint64_t *)a2[23];
        }
      }
      if (v82 != v47)
      {
        do
LABEL_365:
          v286 = __ldxr(v68);
        while (__stxr(v286 + 1, v68));
        v287 = (std::__shared_weak_count *)v82[5];
        v61 = v338;
        v82[4] = (uint64_t)(v67 + 24);
        v82[5] = (uint64_t)v67;
        v63 = v337;
        if (v287)
        {
          p_shared_owners = (unint64_t *)&v287->__shared_owners_;
          do
            v289 = __ldaxr(p_shared_owners);
          while (__stlxr(v289 - 1, p_shared_owners));
          if (!v289)
          {
            ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
            std::__shared_weak_count::__release_weak(v287);
          }
        }
        if (v378)
          std::__shared_weak_count::__release_weak(v378);
        v290 = v375;
        if (v375)
        {
          v291 = (unint64_t *)&v375->__shared_owners_;
          do
            v292 = __ldaxr(v291);
          while (__stlxr(v292 - 1, v291));
          if (!v292)
          {
            ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
            std::__shared_weak_count::__release_weak(v290);
          }
        }
        if (v339)
          std::__shared_weak_count::__release_weak(v339);
        goto LABEL_380;
      }
      v80 = *(_QWORD *)(v77 + 56);
    }
    v361 = 0;
    v362 = 0;
    v363 = 0;
    v364 = 0;
    v87 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(a2 + 17, v78, v80);
    if (v87)
    {
      v88 = v87;
      v89 = (uint64_t *)v87[4];
      v90 = *v89;
      *(_QWORD *)(v90 + 8) = v89[1];
      *(_QWORD *)v89[1] = v90;
      --a2[24];
      v91 = (std::__shared_weak_count *)v89[5];
      if (v91)
      {
        v92 = (unint64_t *)&v91->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      operator delete(v89);
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, a2 + 17, v88);
      if (__p[0])
        operator delete(__p[0]);
    }
    v94 = operator new(0x30uLL);
    v95 = v94;
    v94[1] = *v79;
    v96 = v364;
    *((_QWORD *)v94 + 4) = v363;
    *((_QWORD *)v94 + 5) = v96;
    if (v96)
    {
      v97 = (unint64_t *)&v96->__shared_owners_;
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    v99 = (_QWORD *)a2[23];
    *(_QWORD *)v94 = v47;
    *((_QWORD *)v94 + 1) = v99;
    *v99 = v94;
    v100 = a2[24] + 1;
    a2[23] = (uint64_t)v94;
    a2[24] = v100;
    v101 = *(_QWORD *)(v77 + 48);
    v102 = *(_QWORD *)(v77 + 56);
    v103 = v102
         + ((v101 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v101 - 0x61C8864680B583EBLL) >> 2)
         - 0x61C8864680B583EBLL;
    v104 = v103 ^ (v101 - 0x61C8864680B583EBLL);
    v105 = a2[18];
    v351 = v96;
    if (v105)
    {
      v106 = (uint8x8_t)vcnt_s8((int8x8_t)v105);
      v106.i16[0] = vaddlv_u8(v106);
      if (v106.u32[0] > 1uLL)
      {
        v77 = v103 ^ (v101 - 0x61C8864680B583EBLL);
        v107 = v77;
        if (v104 >= v105)
          v77 = v104 % v105;
      }
      else
      {
        v107 = v103 ^ (v101 - 0x61C8864680B583EBLL);
        v77 = v104 & (v105 - 1);
      }
      v108 = *(_QWORD **)(*v48 + 8 * v77);
      if (v108)
      {
        v109 = (_QWORD *)*v108;
        if (v109)
        {
          if (v106.u32[0] < 2uLL)
          {
            while (1)
            {
              v113 = v109[1];
              if (v113 == v107)
              {
                if (v109[2] == v101 && v109[3] == v102)
                  goto LABEL_153;
              }
              else if ((v113 & (v105 - 1)) != v77)
              {
                goto LABEL_92;
              }
              v109 = (_QWORD *)*v109;
              if (!v109)
                goto LABEL_92;
            }
          }
          do
          {
            v111 = v109[1];
            if (v111 == v107)
            {
              if (v109[2] == v101 && v109[3] == v102)
                goto LABEL_153;
            }
            else
            {
              if (v111 >= v105)
                v111 %= v105;
              if (v111 != v77)
                break;
            }
            v109 = (_QWORD *)*v109;
          }
          while (v109);
        }
      }
    }
    else
    {
      v107 = v103 ^ (v101 - 0x61C8864680B583EBLL);
    }
LABEL_92:
    v114 = operator new(0x28uLL);
    *v114 = 0;
    v114[1] = v107;
    *((_OWORD *)v114 + 1) = *v79;
    v114[4] = v95;
    v115 = (float)(unint64_t)(a2[20] + 1);
    v116 = *((float *)a2 + 42);
    if (v105 && (float)(v116 * (float)v105) >= v115)
    {
      v117 = v114;
      goto LABEL_143;
    }
    v117 = v114;
    v118 = 1;
    if (v105 >= 3)
      v118 = (v105 & (v105 - 1)) != 0;
    v119 = v118 | (2 * v105);
    v120 = vcvtps_u32_f32(v115 / v116);
    if (v119 <= v120)
      prime = v120;
    else
      prime = v119;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v105 = a2[18];
    }
    if (prime <= v105)
    {
      if (prime >= v105)
        goto LABEL_130;
      v133 = vcvtps_u32_f32((float)(unint64_t)a2[20] / *((float *)a2 + 42));
      if (v105 < 3 || (v134 = (uint8x8_t)vcnt_s8((int8x8_t)v105), v134.i16[0] = vaddlv_u8(v134), v134.u32[0] > 1uLL))
      {
        v133 = std::__next_prime(v133);
      }
      else
      {
        v135 = 1 << -(char)__clz(v133 - 1);
        if (v133 >= 2)
          v133 = v135;
      }
      if (prime <= v133)
        prime = v133;
      if (prime >= v105)
      {
        v105 = a2[18];
LABEL_130:
        if ((v105 & (v105 - 1)) != 0)
        {
          if (v107 >= v105)
            v77 = v107 % v105;
          else
            v77 = v107;
        }
        else
        {
          v77 = (v105 - 1) & v107;
        }
LABEL_143:
        v139 = (_QWORD *)*v48;
        v140 = *(_QWORD **)(*v48 + 8 * v77);
        if (v140)
        {
          *v117 = *v140;
        }
        else
        {
          *v117 = a2[19];
          a2[19] = (uint64_t)v117;
          v139[v77] = a2 + 19;
          if (!*v117)
            goto LABEL_152;
          v141 = *(_QWORD *)(*v117 + 8);
          if ((v105 & (v105 - 1)) != 0)
          {
            if (v141 >= v105)
              v141 %= v105;
          }
          else
          {
            v141 &= v105 - 1;
          }
          v140 = (_QWORD *)(*v48 + 8 * v141);
        }
        *v140 = v117;
LABEL_152:
        ++a2[20];
LABEL_153:
        if (v351)
        {
          v142 = (unint64_t *)&v351->__shared_owners_;
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if (!v143)
          {
            ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
            v144 = v351;
LABEL_339:
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        while (1)
        {
          v270 = a2[24];
          if (v270 <= a2[16])
            break;
          v271 = (uint64_t *)*v47;
          v272 = *(_QWORD *)(*v47 + 16);
          v273 = *(_QWORD *)(*v47 + 24);
          v274 = *(std::__shared_weak_count **)(*v47 + 40);
          if (v274)
          {
            v275 = (unint64_t *)&v274->__shared_owners_;
            do
              v276 = __ldxr(v275);
            while (__stxr(v276 + 1, v275));
            v271 = (uint64_t *)a2[22];
            v277 = (std::__shared_weak_count *)v271[5];
            v270 = a2[24];
          }
          else
          {
            v277 = 0;
          }
          v278 = *v271;
          *(_QWORD *)(v278 + 8) = v271[1];
          *(_QWORD *)v271[1] = v278;
          a2[24] = v270 - 1;
          if (v277)
          {
            v279 = (unint64_t *)&v277->__shared_owners_;
            do
              v280 = __ldaxr(v279);
            while (__stlxr(v280 - 1, v279));
            if (!v280)
            {
              ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
              std::__shared_weak_count::__release_weak(v277);
            }
          }
          operator delete(v271);
          v281 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(a2 + 17, v272, v273);
          if (v281)
          {
            std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, a2 + 17, v281);
            if (__p[0])
              operator delete(__p[0]);
          }
          if (v274)
          {
            v282 = (unint64_t *)&v274->__shared_owners_;
            do
              v283 = __ldaxr(v282);
            while (__stlxr(v283 - 1, v282));
            if (!v283)
            {
              ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
              v144 = v274;
              goto LABEL_339;
            }
          }
        }
        if (v362)
        {
          v284 = &v362->__shared_owners_;
          do
            v285 = __ldaxr((unint64_t *)v284);
          while (__stlxr(v285 - 1, (unint64_t *)v284));
          if (!v285)
          {
            ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
            std::__shared_weak_count::__release_weak(v362);
          }
        }
        v82 = (uint64_t *)a2[23];
        goto LABEL_365;
      }
      if (!prime)
      {
        v145 = (_QWORD *)*v48;
        *v48 = 0;
        if (v145)
          operator delete(v145);
        v105 = 0;
        a2[18] = 0;
        goto LABEL_130;
      }
    }
    if (prime >> 61)
      goto LABEL_338;
    v122 = operator new(8 * prime);
    v123 = (_QWORD *)*v48;
    *v48 = v122;
    if (v123)
      operator delete(v123);
    v124 = 0;
    a2[18] = prime;
    do
      *(_QWORD *)(*v48 + 8 * v124++) = 0;
    while (prime != v124);
    v126 = a2 + 19;
    v125 = (_QWORD *)a2[19];
    if (!v125)
    {
LABEL_129:
      v105 = prime;
      goto LABEL_130;
    }
    v127 = v125[1];
    v128 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v129 = v127 & v128;
      *(_QWORD *)(*v48 + 8 * v129) = v126;
      for (i = (_QWORD *)*v125; *v125; i = (_QWORD *)*v125)
      {
        v131 = i[1] & v128;
        if (v131 == v129)
        {
          v125 = i;
        }
        else if (*(_QWORD *)(*v48 + 8 * v131))
        {
          *v125 = *i;
          v132 = 8 * v131;
          *i = **(_QWORD **)(*v48 + v132);
          **(_QWORD **)(*v48 + v132) = i;
        }
        else
        {
          *(_QWORD *)(*v48 + 8 * v131) = v125;
          v125 = i;
          v129 = v131;
        }
      }
      goto LABEL_129;
    }
    if (v127 >= prime)
      v127 %= prime;
    *(_QWORD *)(*v48 + 8 * v127) = v126;
    v136 = (_QWORD *)*v125;
    if (!*v125)
      goto LABEL_129;
    while (1)
    {
      v138 = v136[1];
      if (v138 >= prime)
        v138 %= prime;
      if (v138 != v127)
      {
        if (!*(_QWORD *)(*v48 + 8 * v138))
        {
          *(_QWORD *)(*v48 + 8 * v138) = v125;
          goto LABEL_134;
        }
        *v125 = *v136;
        v137 = 8 * v138;
        *v136 = **(_QWORD **)(*v48 + v137);
        **(_QWORD **)(*v48 + v137) = v136;
        v136 = v125;
      }
      v138 = v127;
LABEL_134:
      v125 = v136;
      v136 = (_QWORD *)*v136;
      v127 = v138;
      if (!v136)
        goto LABEL_129;
    }
  }
  ++*((_DWORD *)a2 + 104);
  if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_47);
  v55 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_DEBUG))
  {
    v57 = v367[6];
    v56 = v367[7];
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = v350.i64[0];
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v350.i64[1];
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v57;
    LOWORD(v374) = 2048;
    *(_QWORD *)((char *)&v374 + 2) = v56;
    _os_log_impl(&dword_19F029000, v55, OS_LOG_TYPE_DEBUG, "Found cached vl request for coordinate:%f,%f key:%llu,%llu", buf, 0x2Au);
  }
  v58 = (std::__shared_weak_count *)v50[5];
  v356 = (char *)v50[4];
  v357 = v58;
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
LABEL_168:
  _Block_object_dispose(&v366, 8);
  v146 = *((double *)a2 + 9);
  v147 = *v348;
  v148 = cos(*v348 * 0.034906585) * -559.82 + 111132.92;
  v149 = v148 + cos(v147 * 0.0698131701) * 1.175;
  v150 = v149 + cos(v147 * 0.104719755) * -0.0023;
  v151 = v147 * 0.00872664626;
  v152 = tan(v147 * 0.00872664626 + 0.78103484);
  v153 = log(v152);
  v154 = tan(v151 + 0.789761487);
  v155 = fabs((log(v154) - v153) * 0.159154943);
  v352 = v348[1];
  v156 = tan(v151 + 0.785398163);
  v157 = log(v156);
  v158.f64[0] = v352;
  v158.f64[1] = v157;
  v159 = vcvtq_u64_f64(vmulq_n_f64(vmlaq_f64(v341, (float64x2_t)xmmword_19FFB32D0, v158), v150 / (v155 * v146)));
  v353 = a2 + 31;
  v160 = a2 + 26;
  v161 = v159.i64[0];
  v347 = v159;
  v162 = v159.i64[1];
  v163 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(a2 + 26, v159.i64[0], v159.i64[1]);
  if (v163)
  {
    v164 = (uint64_t *)a2[32];
    v165 = (uint64_t *)v163[4];
    if (v164 != v165)
    {
      v166 = (uint64_t *)v165[1];
      if (v166 != v164)
      {
        v167 = *v165;
        *(_QWORD *)(v167 + 8) = v166;
        *(_QWORD *)v165[1] = v167;
        v168 = *v164;
        *(_QWORD *)(v168 + 8) = v165;
        *v165 = v168;
        *v164 = (uint64_t)v165;
        v165[1] = (uint64_t)v164;
        v164 = (uint64_t *)a2[32];
      }
    }
    if (v164 != v353)
    {
      ++*((_DWORD *)a2 + 102);
      if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_47);
      v169 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_DEBUG))
      {
        v170 = *v348;
        v171 = *((_QWORD *)v348 + 1);
        *(_DWORD *)buf = 134218752;
        *(double *)&buf[4] = v170;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v171;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v161;
        LOWORD(v374) = 2048;
        *(_QWORD *)((char *)&v374 + 2) = v162;
        _os_log_impl(&dword_19F029000, v169, OS_LOG_TYPE_DEBUG, "Found cached undulation request for coordinate:%f,%f key:%llu,%llu", buf, 0x2Au);
      }
      v172 = (char *)v164[4];
      v173 = (std::__shared_weak_count *)v164[5];
      v354 = v172;
      v355 = v173;
      if (v173)
      {
        v174 = (unint64_t *)&v173->__shared_owners_;
        do
          v175 = __ldxr(v174);
        while (__stxr(v175 + 1, v174));
      }
      goto LABEL_420;
    }
  }
  ++*((_DWORD *)a2 + 103);
  v176 = (void *)a2[14];
  if (!v176)
  {
    v177 = atomic_load((unint64_t *)a2 + 55);
    if (v177 != -1)
    {
      *(_QWORD *)buf = __p;
      v366 = buf;
      std::__call_once((std::once_flag::_State_type *)a2 + 55, &v366, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<md::HighPrecisionAltitudeRequestor::loadFrameworks(void)::$_0 &&>>);
    }
    v178 = objc_alloc_init((Class)getCLLocationManagerClass[0]());
    v179 = (void *)a2[14];
    a2[14] = (uint64_t)v178;

    objc_msgSend((id)a2[14], "_setGroundAltitudeEnabled:", 1);
    v176 = (void *)a2[14];
  }
  v180 = v176;
  if (v180)
  {
    v181 = atomic_load((unint64_t *)a2 + 55);
    if (v181 != -1)
    {
      *(_QWORD *)buf = __p;
      v366 = buf;
      std::__call_once((std::once_flag::_State_type *)a2 + 55, &v366, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<md::HighPrecisionAltitudeRequestor::loadFrameworks(void)::$_0 &&>>);
    }
    v182 = objc_msgSend(objc_alloc((Class)getCLLocationClass[0]()), "initWithLatitude:longitude:", *v348, v348[1]);
    v183 = (void *)v182;
    if (!v182)
    {
      v354 = 0;
      v355 = 0;
LABEL_418:

      goto LABEL_419;
    }
    v345 = (void *)v182;
    if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_47);
    v184 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      v185 = *v348;
      v186 = *((_QWORD *)v348 + 1);
      *(_DWORD *)buf = 134218752;
      *(double *)&buf[4] = v185;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v186;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v161;
      LOWORD(v374) = 2048;
      *(_QWORD *)((char *)&v374 + 2) = v162;
      _os_log_impl(&dword_19F029000, v184, OS_LOG_TYPE_DEBUG, "Requesting undulation for coordinate:%f,%f key:%llu,%llu", buf, 0x2Au);
    }
    v346 = v180;
    v187 = (char *)operator new(0x80uLL);
    v188 = v187;
    *((_QWORD *)v187 + 1) = 0;
    v189 = (unint64_t *)(v187 + 8);
    *((_QWORD *)v187 + 2) = 0;
    *(_QWORD *)v187 = &off_1E42DBAC8;
    *((_QWORD *)v187 + 3) = 850045863;
    v190 = v187 + 24;
    *((_OWORD *)v187 + 2) = 0u;
    *((_OWORD *)v187 + 3) = 0u;
    *((_OWORD *)v187 + 4) = 0u;
    *(_OWORD *)(v187 + 73) = 0u;
    *((_QWORD *)v187 + 12) = 0;
    *((_QWORD *)v187 + 13) = &off_1E42B5410;
    *((_QWORD *)v187 + 14) = 0;
    v354 = v187 + 24;
    v355 = (std::__shared_weak_count *)v187;
    v192 = *(double *)a2;
    v191 = (std::__shared_weak_count *)a2[1];
    v342 = v162;
    if (v191)
    {
      v193 = (unint64_t *)&v191->__shared_weak_owners_;
      do
        v194 = __ldxr(v193);
      while (__stxr(v194 + 1, v193));
      v343 = a2[3];
      *(double *)buf = v192;
      *(_QWORD *)&buf[8] = v191;
      do
        v195 = __ldxr(v193);
      while (__stxr(v195 + 1, v193));
    }
    else
    {
      v343 = a2[3];
      *(_QWORD *)buf = *a2;
      *(_QWORD *)&buf[8] = 0;
    }
    v344 = v191;
    *(uint64x2_t *)&buf[16] = v347;
    v196 = *v348;
    v197 = *((_QWORD *)v348 + 1);
    *(double *)&v374 = *v348;
    *((_QWORD *)&v374 + 1) = v197;
    v375 = (std::__shared_weak_count *)(v187 + 24);
    v376.i64[0] = (uint64_t)v187;
    do
      v198 = __ldxr(v189);
    while (__stxr(v198 + 1, v189));
    v376.i64[1] = (uint64_t)&off_1E42B49B0;
    v199 = v345;
    v377 = v199;
    v200 = v346;
    v379 = v200;
    v369 = 0;
    v201 = (char *)operator new(0x68uLL);
    *(_QWORD *)v201 = &off_1E42D38C8;
    *((double *)v201 + 1) = v192;
    *((_QWORD *)v201 + 2) = *(_QWORD *)&buf[8];
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    *(_OWORD *)(v201 + 24) = *(_OWORD *)&buf[16];
    *((double *)v201 + 5) = v196;
    *((_QWORD *)v201 + 6) = v197;
    *((_QWORD *)v201 + 7) = v190;
    *((_QWORD *)v201 + 8) = v188;
    v375 = 0;
    v376.i64[0] = 0;
    *((_QWORD *)v201 + 9) = &off_1E42B49B0;
    *((_QWORD *)v201 + 10) = v199;
    v377 = 0;
    v379 = 0;
    *((_QWORD *)v201 + 12) = v200;
    v369 = (__n128 (*)(__n128 *, __n128 *))v201;
    geo::TaskQueue::async(&v359, v343, &v366);
    v202 = v360;
    v180 = v346;
    if (v360)
    {
      v203 = (unint64_t *)&v360->__shared_owners_;
      do
        v204 = __ldaxr(v203);
      while (__stlxr(v204 - 1, v203));
      if (!v204)
      {
        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
        std::__shared_weak_count::__release_weak(v202);
      }
    }
    v205 = v369;
    if ((char *)v369 == (char *)&v366)
    {
      v206 = 4;
      v205 = (__n128 (*)(__n128 *, __n128 *))&v366;
    }
    else
    {
      if (!v369)
      {
LABEL_214:

        v376.i64[1] = (uint64_t)&off_1E42B49B0;
        v207 = (std::__shared_weak_count *)v376.i64[0];
        if (v376.i64[0])
        {
          v208 = (unint64_t *)(v376.i64[0] + 8);
          do
            v209 = __ldaxr(v208);
          while (__stlxr(v209 - 1, v208));
          if (!v209)
          {
            ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
            std::__shared_weak_count::__release_weak(v207);
          }
        }
        if (*(_QWORD *)&buf[8])
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
        v210 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(a2 + 26, v161, v342);
        if (v210)
        {
          v211 = (uint64_t *)a2[32];
          v212 = (uint64_t *)v210[4];
          if (v211 != v212)
          {
            v213 = (uint64_t *)v212[1];
            if (v213 != v211)
            {
              v214 = *v212;
              *(_QWORD *)(v214 + 8) = v213;
              *(_QWORD *)v212[1] = v214;
              v215 = *v211;
              *(_QWORD *)(v215 + 8) = v212;
              *v212 = v215;
              *v211 = (uint64_t)v212;
              v212[1] = (uint64_t)v211;
              v211 = (uint64_t *)a2[32];
            }
          }
          if (v211 != v353)
          {
LABEL_408:
            if (v355)
            {
              v310 = (unint64_t *)&v355->__shared_owners_;
              do
                v311 = __ldxr(v310);
              while (__stxr(v311 + 1, v310));
            }
            v312 = (std::__shared_weak_count *)v211[5];
            v211[4] = (uint64_t)v354;
            v211[5] = (uint64_t)v355;
            v313 = v344;
            if (v312)
            {
              v314 = (unint64_t *)&v312->__shared_owners_;
              do
                v315 = __ldaxr(v314);
              while (__stlxr(v315 - 1, v314));
              if (!v315)
              {
                ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                std::__shared_weak_count::__release_weak(v312);
                v313 = v344;
              }
            }
            v183 = v345;
            if (v313)
              std::__shared_weak_count::__release_weak(v313);
            goto LABEL_418;
          }
        }
        v361 = 0;
        v362 = 0;
        v363 = 0;
        v364 = 0;
        v216 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(a2 + 26, v161, v342);
        if (v216)
        {
          v217 = v216;
          v218 = (uint64_t *)v216[4];
          v219 = *v218;
          *(_QWORD *)(v219 + 8) = v218[1];
          *(_QWORD *)v218[1] = v219;
          --a2[33];
          v200 = (std::__shared_weak_count *)v218[5];
          if (v200)
          {
            v220 = (unint64_t *)&v200->__shared_owners_;
            do
              v221 = __ldaxr(v220);
            while (__stlxr(v221 - 1, v220));
            if (!v221)
            {
              ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
              std::__shared_weak_count::__release_weak(v200);
            }
          }
          operator delete(v218);
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, a2 + 26, v217);
          if (__p[0])
            operator delete(__p[0]);
        }
        v222 = operator new(0x30uLL);
        v223 = v222;
        v222[1] = v347;
        v224 = v364;
        *((_QWORD *)v222 + 4) = v363;
        *((_QWORD *)v222 + 5) = v224;
        if (v224)
        {
          v225 = (unint64_t *)&v224->__shared_owners_;
          do
            v226 = __ldxr(v225);
          while (__stxr(v226 + 1, v225));
        }
        v227 = (_QWORD *)a2[32];
        *(_QWORD *)v222 = v353;
        *((_QWORD *)v222 + 1) = v227;
        *v227 = v222;
        v228 = a2[33] + 1;
        a2[32] = (uint64_t)v222;
        a2[33] = v228;
        v229 = v342 + ((v161 - 0x61C8864680B583EBLL) << 6) + ((unint64_t)(v161 - 0x61C8864680B583EBLL) >> 2);
        v230 = (v229 - 0x61C8864680B583EBLL) ^ (v161 - 0x61C8864680B583EBLL);
        v231 = a2[27];
        if (v231)
        {
          v232 = (uint8x8_t)vcnt_s8((int8x8_t)v231);
          v232.i16[0] = vaddlv_u8(v232);
          if (v232.u32[0] > 1uLL)
          {
            v200 = (std::__shared_weak_count *)((v229 - 0x61C8864680B583EBLL) ^ (v161 - 0x61C8864680B583EBLL));
            if (v230 >= v231)
              v200 = (std::__shared_weak_count *)(v230 % v231);
          }
          else
          {
            v200 = (std::__shared_weak_count *)(v230 & (v231 - 1));
          }
          v233 = *(_QWORD **)(*v160 + 8 * (_QWORD)v200);
          if (v233)
          {
            v234 = (_QWORD *)*v233;
            if (v234)
            {
              if (v232.u32[0] < 2uLL)
              {
                while (1)
                {
                  v238 = v234[1];
                  if (v238 == v230)
                  {
                    if (v234[2] == v161 && v234[3] == v342)
                      goto LABEL_324;
                  }
                  else if ((std::__shared_weak_count *)(v238 & (v231 - 1)) != v200)
                  {
                    goto LABEL_264;
                  }
                  v234 = (_QWORD *)*v234;
                  if (!v234)
                    goto LABEL_264;
                }
              }
              do
              {
                v236 = v234[1];
                if (v236 == v230)
                {
                  if (v234[2] == v161 && v234[3] == v342)
                    goto LABEL_324;
                }
                else
                {
                  if (v236 >= v231)
                    v236 %= v231;
                  if ((std::__shared_weak_count *)v236 != v200)
                    break;
                }
                v234 = (_QWORD *)*v234;
              }
              while (v234);
            }
          }
        }
LABEL_264:
        v239 = (uint64x2_t *)operator new(0x28uLL);
        v239->i64[0] = 0;
        v239->i64[1] = v230;
        v239[1] = v347;
        v239[2].i64[0] = (uint64_t)v223;
        v240 = (float)(unint64_t)(a2[29] + 1);
        v241 = *((float *)a2 + 60);
        if (v231 && (float)(v241 * (float)v231) >= v240)
        {
LABEL_314:
          v263 = (_QWORD *)*v160;
          v264 = *(uint64x2_t ***)(*v160 + 8 * (_QWORD)v200);
          if (v264)
          {
            v239->i64[0] = (uint64_t)*v264;
          }
          else
          {
            v239->i64[0] = a2[28];
            a2[28] = (uint64_t)v239;
            v263[(_QWORD)v200] = a2 + 28;
            if (!v239->i64[0])
              goto LABEL_323;
            v265 = *(_QWORD *)(v239->i64[0] + 8);
            if ((v231 & (v231 - 1)) != 0)
            {
              if (v265 >= v231)
                v265 %= v231;
            }
            else
            {
              v265 &= v231 - 1;
            }
            v264 = (uint64x2_t **)(*v160 + 8 * v265);
          }
          *v264 = v239;
LABEL_323:
          ++a2[29];
LABEL_324:
          if (v224)
          {
            v266 = (unint64_t *)&v224->__shared_owners_;
            do
              v267 = __ldaxr(v266);
            while (__stlxr(v267 - 1, v266));
            if (!v267)
            {
              ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
              v268 = v224;
LABEL_382:
              std::__shared_weak_count::__release_weak(v268);
            }
          }
          while (1)
          {
            v293 = a2[33];
            if (v293 <= a2[25])
              break;
            v294 = (uint64_t *)*v353;
            v295 = *(_QWORD *)(*v353 + 16);
            v296 = *(_QWORD *)(*v353 + 24);
            v297 = *(std::__shared_weak_count **)(*v353 + 40);
            if (v297)
            {
              v298 = (unint64_t *)&v297->__shared_owners_;
              do
                v299 = __ldxr(v298);
              while (__stxr(v299 + 1, v298));
              v294 = (uint64_t *)a2[31];
              v300 = (std::__shared_weak_count *)v294[5];
              v293 = a2[33];
            }
            else
            {
              v300 = 0;
            }
            v301 = *v294;
            *(_QWORD *)(v301 + 8) = v294[1];
            *(_QWORD *)v294[1] = v301;
            a2[33] = v293 - 1;
            if (v300)
            {
              v302 = (unint64_t *)&v300->__shared_owners_;
              do
                v303 = __ldaxr(v302);
              while (__stlxr(v303 - 1, v302));
              if (!v303)
              {
                ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
                std::__shared_weak_count::__release_weak(v300);
              }
            }
            operator delete(v294);
            v304 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(a2 + 26, v295, v296);
            if (v304)
            {
              std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, a2 + 26, v304);
              if (__p[0])
                operator delete(__p[0]);
            }
            if (v297)
            {
              v305 = (unint64_t *)&v297->__shared_owners_;
              do
                v306 = __ldaxr(v305);
              while (__stlxr(v306 - 1, v305));
              if (!v306)
              {
                ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                v268 = v297;
                goto LABEL_382;
              }
            }
          }
          v307 = v362;
          if (v362)
          {
            v308 = &v362->__shared_owners_;
            do
              v309 = __ldaxr((unint64_t *)v308);
            while (__stlxr(v309 - 1, (unint64_t *)v308));
            if (!v309)
            {
              ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
              std::__shared_weak_count::__release_weak(v307);
            }
          }
          v211 = (uint64_t *)a2[32];
          goto LABEL_408;
        }
        v242 = 1;
        if (v231 >= 3)
          v242 = (v231 & (v231 - 1)) != 0;
        v243 = v242 | (2 * v231);
        v244 = vcvtps_u32_f32(v240 / v241);
        if (v243 <= v244)
          v245 = v244;
        else
          v245 = v243;
        if (v245 == 1)
        {
          v245 = 2;
        }
        else if ((v245 & (v245 - 1)) != 0)
        {
          v245 = std::__next_prime(v245);
          v231 = a2[27];
        }
        if (v245 <= v231)
        {
          if (v245 >= v231)
            goto LABEL_301;
          v257 = vcvtps_u32_f32((float)(unint64_t)a2[29] / *((float *)a2 + 60));
          if (v231 < 3
            || (v258 = (uint8x8_t)vcnt_s8((int8x8_t)v231), v258.i16[0] = vaddlv_u8(v258), v258.u32[0] > 1uLL))
          {
            v257 = std::__next_prime(v257);
          }
          else
          {
            v259 = 1 << -(char)__clz(v257 - 1);
            if (v257 >= 2)
              v257 = v259;
          }
          if (v245 <= v257)
            v245 = v257;
          if (v245 >= v231)
          {
            v231 = a2[27];
LABEL_301:
            if ((v231 & (v231 - 1)) != 0)
            {
              if (v230 >= v231)
                v200 = (std::__shared_weak_count *)(v230 % v231);
              else
                v200 = (std::__shared_weak_count *)v230;
            }
            else
            {
              v200 = (std::__shared_weak_count *)((v231 - 1) & v230);
            }
            goto LABEL_314;
          }
          if (!v245)
          {
            v269 = (_QWORD *)*v160;
            *v160 = 0;
            if (v269)
              operator delete(v269);
            v231 = 0;
            a2[27] = 0;
            goto LABEL_301;
          }
        }
        if (!(v245 >> 61))
        {
          v246 = operator new(8 * v245);
          v247 = (_QWORD *)*v160;
          *v160 = v246;
          if (v247)
            operator delete(v247);
          v248 = 0;
          a2[27] = v245;
          do
            *(_QWORD *)(*v160 + 8 * v248++) = 0;
          while (v245 != v248);
          v250 = a2 + 28;
          v249 = (_QWORD *)a2[28];
          if (!v249)
            goto LABEL_300;
          v251 = v249[1];
          v252 = v245 - 1;
          if ((v245 & (v245 - 1)) == 0)
          {
            v253 = v251 & v252;
            *(_QWORD *)(*v160 + 8 * v253) = v250;
            for (j = (_QWORD *)*v249; *v249; j = (_QWORD *)*v249)
            {
              v255 = j[1] & v252;
              if (v255 == v253)
              {
                v249 = j;
              }
              else if (*(_QWORD *)(*v160 + 8 * v255))
              {
                *v249 = *j;
                v256 = 8 * v255;
                *j = **(_QWORD **)(*v160 + v256);
                **(_QWORD **)(*v160 + v256) = j;
              }
              else
              {
                *(_QWORD *)(*v160 + 8 * v255) = v249;
                v249 = j;
                v253 = v255;
              }
            }
LABEL_300:
            v231 = v245;
            goto LABEL_301;
          }
          if (v251 >= v245)
            v251 %= v245;
          *(_QWORD *)(*v160 + 8 * v251) = v250;
          v260 = (_QWORD *)*v249;
          if (!*v249)
            goto LABEL_300;
          while (1)
          {
            v262 = v260[1];
            if (v262 >= v245)
              v262 %= v245;
            if (v262 != v251)
            {
              if (!*(_QWORD *)(*v160 + 8 * v262))
              {
                *(_QWORD *)(*v160 + 8 * v262) = v249;
                goto LABEL_305;
              }
              *v249 = *v260;
              v261 = 8 * v262;
              *v260 = **(_QWORD **)(*v160 + v261);
              **(_QWORD **)(*v160 + v261) = v260;
              v260 = v249;
            }
            v262 = v251;
LABEL_305:
            v249 = v260;
            v260 = (_QWORD *)*v260;
            v251 = v262;
            if (!v260)
              goto LABEL_300;
          }
        }
LABEL_338:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      v206 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v205 + 8 * v206))();
    goto LABEL_214;
  }
  v354 = 0;
  v355 = 0;
LABEL_419:

  v172 = v354;
LABEL_420:
  if (v356)
    v316 = v172 == 0;
  else
    v316 = 1;
  if (v316)
  {
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_47);
    v317 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      v318 = *v348;
      v319 = *((_QWORD *)v348 + 1);
      *(_DWORD *)buf = 134218752;
      *(double *)&buf[4] = v318;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v319;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v358.i64[0];
      LOWORD(v374) = 2048;
      *(_QWORD *)((char *)&v374 + 2) = v358.i64[1];
      _os_log_impl(&dword_19F029000, v317, OS_LOG_TYPE_DEBUG, "Requesting high precision altitude for coordinate:%f,%f key:%llu,%llu", buf, 0x2Au);
    }
    v320 = operator new(0x70uLL);
    v321 = (uint64_t)(a2 + 34);
    v320[1] = 0;
    v322 = v320 + 1;
    v320[2] = 0;
    *v320 = &off_1E42DD818;
    v320[3] = v354;
    v323 = (char *)(v320 + 3);
    v320[4] = v355;
    if (v355)
    {
      v324 = (unint64_t *)&v355->__shared_owners_;
      do
        v325 = __ldxr(v324);
      while (__stxr(v325 + 1, v324));
    }
    v320[5] = v356;
    v320[6] = v357;
    if (v357)
    {
      v326 = (unint64_t *)&v357->__shared_owners_;
      do
        v327 = __ldxr(v326);
      while (__stxr(v327 + 1, v326));
    }
    v320[7] = v320 + 11;
    v320[8] = v320 + 11;
    v320[9] = v320 + 11;
    v320[10] = 2;
    *((_BYTE *)v320 + 104) = 0;
    *a1 = v323;
    a1[1] = v320;
    v328 = geo::Cache<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>,md::SpatialKeyHash,geo::LRUPolicy>::operator[](v321, v358.i64);
    do
      v329 = __ldxr(v322);
    while (__stxr(v329 + 1, v322));
    v330 = (std::__shared_weak_count *)v328[1];
    *v328 = (uint64_t)v323;
    v328[1] = (uint64_t)v320;
    if (v330)
    {
      v331 = (unint64_t *)&v330->__shared_owners_;
      do
        v332 = __ldaxr(v331);
      while (__stlxr(v332 - 1, v331));
      if (!v332)
      {
        ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
        std::__shared_weak_count::__release_weak(v330);
      }
    }
  }
  if (v355)
  {
    v333 = (unint64_t *)&v355->__shared_owners_;
    do
      v334 = __ldaxr(v333);
    while (__stlxr(v334 - 1, v333));
    if (!v334)
    {
      ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
      std::__shared_weak_count::__release_weak(v355);
    }
  }
  if (v357)
  {
    v335 = (unint64_t *)&v357->__shared_owners_;
    do
      v336 = __ldaxr(v335);
    while (__stlxr(v336 - 1, v335));
    if (!v336)
    {
      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
      std::__shared_weak_count::__release_weak(v357);
    }
  }
}

void sub_19FB3AE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v33);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  JUMPOUT(0x19FB3AE50);
}

uint64_t md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)(a1 + 64) = &off_1E42B49B0;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t std::__function::__func<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,std::allocator<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &off_1E42D38C8;

  *(_QWORD *)(a1 + 72) = &off_1E42B49B0;
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__function::__func<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,std::allocator<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &off_1E42D38C8;

  *(_QWORD *)(a1 + 72) = &off_1E42B49B0;
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,std::allocator<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x68uLL);
  *v2 = &off_1E42D38C8;
  std::__compressed_pair_elem<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,std::allocator<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D38C8;
  return std::__compressed_pair_elem<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,std::allocator<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)(a1 + 72) = &off_1E42B49B0;
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void std::__function::__func<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,std::allocator<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)(a1 + 72) = &off_1E42B49B0;
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete((void *)a1);
}

void std::__function::__func<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,std::allocator<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  double v5;
  double v6;
  uint64_t (*v7)(CLLocationCoordinate2D);
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 96);
  v3 = *(id *)(a1 + 80);
  objc_msgSend(v2, "_groundAltitudeAtLocation:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v4, "undulation");
    v6 = v5;
  }
  else
  {
    v7 = softLinkARGetFallbackUndulationValue;
    v8 = *(id *)(a1 + 80);
    v6 = ((double (*)(uint64_t))v7)(objc_msgSend(v8, "coordinate"));

    if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_47);
    v9 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(_QWORD *)(a1 + 48);
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_QWORD *)(a1 + 32);
      v15 = 134218752;
      v16 = v10;
      v17 = 2048;
      v18 = v11;
      v19 = 2048;
      v20 = v12;
      v21 = 2048;
      v22 = v13;
      _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_DEBUG, "Using fallback for failed undulation request for coordinate:%f,%f key:%llu,%llu", (uint8_t *)&v15, 0x2Au);
    }
  }
  v14 = *(_QWORD *)(a1 + 56);
  std::mutex::lock((std::mutex *)v14);
  objc_storeStrong((id *)(v14 + 88), 0);
  *(double *)(v14 + 72) = v6;
  *(_BYTE *)(v14 + 64) = 1;
  std::mutex::unlock((std::mutex *)v14);

}

void sub_19FB3B32C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t initARGetFallbackUndulationValue(CLLocationCoordinate2D a1)
{
  double longitude;
  double latitude;

  longitude = a1.longitude;
  latitude = a1.latitude;
  if (LoadARKit(void)::loadPredicate != -1)
    dispatch_once(&LoadARKit(void)::loadPredicate, &__block_literal_global_55);
  softLinkARGetFallbackUndulationValue = (uint64_t (*)(CLLocationCoordinate2D))dlsym((void *)LoadARKit(void)::frameworkLibrary, "ARGetFallbackUndulationValue");
  return ((uint64_t (*)(double, double))softLinkARGetFallbackUndulationValue)(latitude, longitude);
}

void ___ZL9LoadARKitv_block_invoke_21219()
{
  LoadARKit(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/ARKit.framework/ARKit", 2);
  if (!LoadARKit(void)::frameworkLibrary)
    NSLog((NSString *)CFSTR("### Failed to Soft Linked: /System/Library/Frameworks/ARKit.framework/ARKit"));
}

uint64_t std::__compressed_pair_elem<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  id v10;
  void *v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 64) = &off_1E42B49B0;
  *(_QWORD *)(a1 + 72) = 0;
  v10 = *(id *)(a2 + 72);
  v11 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v10;

  *(_QWORD *)(a1 + 88) = *(id *)(a2 + 88);
  return a1;
}

uint64_t geo::_retain_ptr<NSError * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5410;

  return a1;
}

void geo::_retain_ptr<NSError * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5410;

  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::UndulationRequest>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBAC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::UndulationRequest>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBAC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::UndulationRequest>::__on_zero_shared(uint64_t a1)
{
  std::mutex *v1;

  v1 = (std::mutex *)(a1 + 24);
  *(_QWORD *)(a1 + 104) = &off_1E42B5410;

  std::mutex::~mutex(v1);
}

__n128 __Block_byref_object_copy__21223(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void ___ZN2md30HighPrecisionAltitudeRequestor17requestVLAltitudeEN3geo12Coordinate2DINS1_7DegreesEdEE_block_invoke(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  _OWORD *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  char *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 *v54;
  _OWORD *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  void *v59;
  id v60;
  const char *v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  void *v77;
  id v78;
  id obj;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _BYTE buf[22];
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  const char *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a1[5];
  v78 = a2;
  v7 = v5;
  std::mutex::lock((std::mutex *)v6);
  v75 = a1 + 5;
  v8 = v7;
  v9 = v8;
  if (v8)
    v10 = v8;
  v11 = *(void **)(v6 + 128);
  *(_QWORD *)(v6 + 128) = v9;

  *(_QWORD *)(v6 + 80) = *(_QWORD *)(v6 + 72);
  v12 = objc_msgSend(v78, "count");
  v13 = *(_QWORD *)(v6 + 96);
  if (v13 >= v12)
    goto LABEL_21;
  v14 = *(_QWORD *)(v6 + 80);
  v15 = *(_QWORD *)(v6 + 88);
  v16 = *(_QWORD *)(v6 + 72);
  v17 = (1 << -(char)__clz(v13 + 1));
  if (v13 >= 0xFFFFFFFFFFFFFFFELL)
    v18 = 1;
  else
    v18 = v17;
  if (v18 <= v12)
    v19 = v12;
  else
    v19 = v18;
  v20 = (char *)malloc_type_malloc(8 * v19, 0x100004000313F17uLL);
  v21 = *(char **)(v6 + 72);
  v22 = *(char **)(v6 + 80);
  if (v21 != v22)
  {
    v23 = v22 - v21 - 8;
    v24 = v20;
    v25 = *(char **)(v6 + 72);
    if (v23 >= 0x18)
    {
      v24 = v20;
      v25 = *(char **)(v6 + 72);
      if ((unint64_t)(v20 - v21) >= 0x20)
      {
        v26 = (v23 >> 3) + 1;
        v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        v24 = &v20[v27];
        v28 = (__int128 *)(v21 + 16);
        v29 = v20 + 16;
        v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v31 = *v28;
          *(v29 - 1) = *(v28 - 1);
          *v29 = v31;
          v28 += 2;
          v29 += 2;
          v30 -= 4;
        }
        while (v30);
        if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_18;
        v25 = &v21[v27];
      }
    }
    do
    {
      v32 = *(_QWORD *)v25;
      v25 += 8;
      *(_QWORD *)v24 = v32;
      v24 += 8;
    }
    while (v25 != v22);
  }
LABEL_18:
  if (v16 != v15)
    free(v21);
  *(_QWORD *)(v6 + 72) = v20;
  *(_QWORD *)(v6 + 80) = &v20[v14 - v16];
  *(_QWORD *)(v6 + 96) = v19;
LABEL_21:
  v76 = a1;
  v77 = v9;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  obj = v78;
  v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v80, buf, 16);
  if (!v33)
    goto LABEL_45;
  v34 = *(_QWORD *)v81;
  do
  {
    for (i = 0; i != v33; ++i)
    {
      if (*(_QWORD *)v81 != v34)
        objc_enumerationMutation(obj);
      v37 = v7;
      objc_msgSend(*(id *)(*((_QWORD *)&v80 + 1) + 8 * i), "doubleValue");
      v39 = v38;
      v40 = *(_QWORD *)(v6 + 72);
      v36 = *(char **)(v6 + 80);
      v41 = (uint64_t)&v36[-v40] >> 3;
      v42 = *(_QWORD *)(v6 + 96);
      if (v42 < v41 + 1)
      {
        v43 = *(_QWORD *)(v6 + 88);
        v44 = (1 << -(char)__clz(v42 + 1));
        if (v42 >= 0xFFFFFFFFFFFFFFFELL)
          v44 = 1;
        if (v44 <= v41 + 1)
          v45 = v41 + 1;
        else
          v45 = v44;
        v46 = (char *)malloc_type_malloc(8 * v45, 0x100004000313F17uLL);
        v47 = *(char **)(v6 + 72);
        v48 = *(char **)(v6 + 80);
        if (v47 != v48)
        {
          v49 = v48 - v47 - 8;
          v50 = v46;
          v51 = *(char **)(v6 + 72);
          if (v49 < 0x18 || (v50 = v46, v51 = *(char **)(v6 + 72), (unint64_t)(v46 - v47) < 0x20))
          {
            do
            {
LABEL_41:
              v58 = *(_QWORD *)v51;
              v51 += 8;
              *(_QWORD *)v50 = v58;
              v50 += 8;
            }
            while (v51 != v48);
          }
          else
          {
            v52 = (v49 >> 3) + 1;
            v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
            v50 = &v46[v53];
            v54 = (__int128 *)(v47 + 16);
            v55 = v46 + 16;
            v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v57 = *v54;
              *(v55 - 1) = *(v54 - 1);
              *v55 = v57;
              v54 += 2;
              v55 += 2;
              v56 -= 4;
            }
            while (v56);
            if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v51 = &v47[v53];
              goto LABEL_41;
            }
          }
        }
        if (v40 != v43)
          free(v47);
        *(_QWORD *)(v6 + 72) = v46;
        v36 = &v46[8 * v41];
        *(_QWORD *)(v6 + 96) = v45;
      }
      *(_QWORD *)v36 = v39;
      *(_QWORD *)(v6 + 80) = v36 + 8;
      v7 = v37;
    }
    v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v80, buf, 16);
  }
  while (v33);
LABEL_45:

  *(_BYTE *)(v6 + 64) = 1;
  std::mutex::unlock((std::mutex *)v6);

  if (v77)
  {
    objc_msgSend(v77, "description");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    if (v59)
    {
      objc_msgSend(v77, "description");
      v60 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v61 = (const char *)objc_msgSend(v60, "UTF8String");

    }
    else
    {
      v61 = "";
    }

    if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_47);
    v62 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_ERROR))
    {
      v63 = v76[7];
      v64 = v76[8];
      v65 = *(_QWORD *)(v76[4] + 8);
      v67 = *(_QWORD *)(v65 + 48);
      v66 = *(_QWORD *)(v65 + 56);
      *(_DWORD *)buf = 134219010;
      *(_QWORD *)&buf[4] = v63;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v64;
      v85 = 2048;
      v86 = v67;
      v87 = 2048;
      v88 = v66;
      v89 = 2080;
      v90 = v61;
      _os_log_impl(&dword_19F029000, v62, OS_LOG_TYPE_ERROR, "VLAltitude request failed for coordinate:%f,%f key:%llu,%llu error:\"%s\"", buf, 0x34u);
    }
    v68 = (std::__shared_weak_count *)v76[10];
    if (v68)
    {
      v69 = std::__shared_weak_count::lock(v68);
      *(_QWORD *)&buf[8] = v69;
      if (v69)
      {
        v70 = v69;
        v71 = v76[9];
        *(_QWORD *)buf = v71;
        if (v71)
        {
          v72 = *(_QWORD *)(v71 + 368);
          if (v72)
            (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v72 + 48))(v72, v75);
        }
        p_shared_owners = (unint64_t *)&v70->__shared_owners_;
        do
          v74 = __ldaxr(p_shared_owners);
        while (__stlxr(v74 - 1, p_shared_owners));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
    }
  }

}

void sub_19FB3BAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  va_list va;

  va_start(va, a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_40c50_ZTSNSt3__110shared_ptrIN2md17VLAltitudeRequestEEE56c39_ZTSN3geo12Coordinate2DINS_7DegreesEdEE72c60_ZTSNSt3__18weak_ptrIN2md30HighPrecisionAltitudeRequestorEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  result[7] = a2[7];
  result[8] = a2[8];
  v5 = a2[10];
  result[9] = a2[9];
  result[10] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_ea8_40c50_ZTSNSt3__110shared_ptrIN2md17VLAltitudeRequestEEE5672c60_ZTSNSt3__18weak_ptrIN2md30HighPrecisionAltitudeRequestorEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void std::__shared_ptr_emplace<md::VLAltitudeRequest>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBB00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::VLAltitudeRequest>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBB00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::VLAltitudeRequest>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  *(_QWORD *)(a1 + 144) = &off_1E42B5410;

  v2 = *(void **)(a1 + 96);
  if (v2 != *(void **)(a1 + 112))
    free(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t ggl::DiffuseBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::DiffuseBuildingTopShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1ECE43B18 = 1;
          }
          ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          unk_1EE57E500 = &ggl::DiffuseBuildingTop::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
          qword_1EE57E508 = 0;
          if ((v95 & 1) == 0
          {
            ggl::DiffuseBuildingTop::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            *(_QWORD *)algn_1EE57E538 = ggl::Tile::View::reflection(void)::reflection;
            qword_1EE57E540 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1EE57E548 = ggl::Building::Style::reflection(void)::reflection;
            qword_1EE57E550 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1EE57E558 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1EE57E560 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1EE57E510 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
          unk_1EE57E518 = xmmword_19FFB37A0;
        }
      }
      ggl::DiffuseBuildingTop::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      ggl::DiffuseBuildingTopShader::typedReflection(v90);
      qword_1ECE31728 = (uint64_t)&ggl::DiffuseBuildingTopShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57E6C8 = 0;
        qword_1EE57E6D0 = (uint64_t)"";
        dword_1EE57E6D8 = 0;
        qword_1EE57E6E0 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57E6E8 = 1;
      }
      qword_1ECE31730 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE31738 = 1;
      qword_1ECE31740 = 0;
      unk_1ECE31748 = 0;
      qword_1ECE31750 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31758 = 0;
      if ((v93 & 1) == 0
      {
        ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57E578 = 0;
        qword_1EE57E580 = (uint64_t)"skyfog";
        dword_1EE57E588 = 3;
        qword_1EE57E590 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantSkyfogBinding(void)::reflection;
        unk_1EE57E598 = xmmword_19FFB3720;
        qword_1EE57E5A8 = 1;
        unk_1EE57E5B0 = "view";
        dword_1EE57E5B8 = 3;
        qword_1EE57E5C0 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE57E5C8 = vdupq_n_s64(2uLL);
        qword_1EE57E5D8 = 2;
        unk_1EE57E5E0 = "scale";
        dword_1EE57E5E8 = 3;
        qword_1EE57E5F0 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantScaleBinding(void)::reflection;
        unk_1EE57E5F8 = xmmword_19FFB3730;
        qword_1EE57E608 = 3;
        unk_1EE57E610 = "style";
        dword_1EE57E618 = 3;
        qword_1EE57E620 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantStyleBinding(void)::reflection;
        unk_1EE57E628 = xmmword_19FFB3740;
        qword_1EE57E638 = 4;
        unk_1EE57E640 = "gradient";
        dword_1EE57E648 = 3;
        qword_1EE57E650 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantGradientBinding(void)::reflection;
        unk_1EE57E658 = xmmword_19FFB3670;
        qword_1EE57E668 = 5;
        unk_1EE57E670 = "lightConfig";
        dword_1EE57E678 = 3;
        qword_1EE57E680 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1EE57E688 = xmmword_19FFB3750;
        qword_1EE57E698 = 6;
        unk_1EE57E6A0 = "fade";
        dword_1EE57E6A8 = 3;
        qword_1EE57E6B0 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantFadeBinding(void)::reflection;
        unk_1EE57E6B8 = 2;
      }
      qword_1ECE31760 = (uint64_t)&ggl::DiffuseBuildingTop::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE31768 = 7;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::DiffuseBuildingTop::CompressedMeshPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42BA730;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup::~CompressedMeshPipelineSetup(ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup::constantDataIsEnabled(ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

uint64_t ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup::textureIsEnabled(ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup *this)
{
  return 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int8x16_t *v16;
  int8x16_t *v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int8x16_t *v44;
  BOOL v46;
  uint64_t v47;
  unint64_t *v48;
  _QWORD *i64;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  int8x16_t *v87;
  unint64_t *v88;
  int64_t v89;

  v7 = (int8x16_t *)result;
LABEL_2:
  v86 = (unint64_t *)&a2[-1];
  v88 = &a2[-1].u64[1];
  v85 = &a2[-2].u64[1];
  v8 = (unint64_t *)v7;
  while (2)
  {
    v7 = (int8x16_t *)v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v88, v7->i64[0]);
        if ((_DWORD)result)
        {
          v38 = v7->i64[0];
          v7->i64[0] = *v88;
          *v88 = v38;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)v7, &v7->u64[1], v88);
      case 4:
        v39 = (unint64_t *)&v7[1];
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)v7, &v7->u64[1], (unint64_t *)&v7[1]);
        result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v88, v7[1].u64[0]);
        if ((_DWORD)result)
        {
          v40 = *v39;
          *v39 = *v88;
          *v88 = v40;
          result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v39, v7->u64[1]);
          if ((_DWORD)result)
          {
            v42 = v7->i64[1];
            v41 = v7[1].u64[0];
            v43 = v7->i64[0];
            v7->i64[1] = v41;
            v7[1].i64[0] = v42;
            result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v41, v43);
            if ((_DWORD)result)
              *v7 = vextq_s8(*v7, *v7, 8uLL);
          }
        }
        return result;
      case 5:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,0>((unint64_t *)v7, &v7->u64[1], (unint64_t *)&v7[1], &v7[1].u64[1], v88);
      default:
        if (v9 <= 191)
        {
          v44 = (int8x16_t *)&v7->u64[1];
          v46 = v7 == a2 || v44 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v46)
            {
              v47 = 0;
              v48 = (unint64_t *)v7;
              do
              {
                v51 = *v48;
                v50 = v48[1];
                v48 = (unint64_t *)v44;
                result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v50, v51);
                if ((_DWORD)result)
                {
                  v52 = *v48;
                  v53 = v47;
                  do
                  {
                    *(uint64_t *)((char *)&v7->i64[1] + v53) = *(uint64_t *)((char *)v7->i64 + v53);
                    if (!v53)
                    {
                      i64 = v7->i64;
                      goto LABEL_70;
                    }
                    result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v52, *(unint64_t *)((char *)&v7->u64[-1] + v53));
                    v53 -= 8;
                  }
                  while ((result & 1) != 0);
                  i64 = (uint64_t *)((char *)&v7->i64[1] + v53);
LABEL_70:
                  *i64 = v52;
                }
                v44 = (int8x16_t *)(v48 + 1);
                v47 += 8;
              }
              while (v48 + 1 != (unint64_t *)a2);
            }
          }
          else if (!v46)
          {
            do
            {
              v80 = v7->i64[0];
              v79 = v7->u64[1];
              v7 = v44;
              result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v79, v80);
              if ((_DWORD)result)
              {
                v81 = v7->i64[0];
                v82 = v7->i64;
                do
                {
                  v83 = v82;
                  v84 = *--v82;
                  *v83 = v84;
                  result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v81, *(v83 - 2));
                }
                while ((result & 1) != 0);
                *v82 = v81;
              }
              v44 = (int8x16_t *)&v7->u64[1];
            }
            while (&v7->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v54 = (unint64_t)(v10 - 2) >> 1;
            v87 = a2;
            v89 = v54;
            do
            {
              v55 = v54;
              if (v89 >= v54)
              {
                v56 = (2 * v54) | 1;
                v57 = (unint64_t *)v7 + v56;
                if (2 * v54 + 2 < v10
                  && md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v57, v57[1]))
                {
                  ++v57;
                  v56 = 2 * v55 + 2;
                }
                v58 = (unint64_t *)v7 + v55;
                result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v57, *v58);
                if ((result & 1) == 0)
                {
                  v59 = *v58;
                  do
                  {
                    v60 = v57;
                    *v58 = *v57;
                    if (v89 < v56)
                      break;
                    v61 = (2 * v56) | 1;
                    v57 = (unint64_t *)v7 + v61;
                    v62 = 2 * v56 + 2;
                    if (v62 < v10
                      && md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v57, v57[1]))
                    {
                      ++v57;
                      v61 = v62;
                    }
                    result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v57, v59);
                    v58 = v60;
                    v56 = v61;
                  }
                  while (!(_DWORD)result);
                  *v60 = v59;
                }
              }
              v54 = v55 - 1;
            }
            while (v55);
            v63 = (unint64_t)v9 >> 3;
            v64 = (unint64_t *)v87;
            do
            {
              v66 = v64;
              v67 = 0;
              v68 = v7->i64[0];
              v69 = v7->i64;
              do
              {
                v70 = &v69[v67 + 1];
                v71 = (2 * v67) | 1;
                v72 = 2 * v67 + 2;
                if (v72 < v63)
                {
                  result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v70, v69[v67 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v70;
                    v71 = v72;
                  }
                }
                *v69 = *v70;
                v69 = v70;
                v67 = v71;
              }
              while (v71 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
              v73 = v66 - 1;
              if (v70 == v73)
              {
                v64 = v73;
                *v70 = v68;
              }
              else
              {
                *v70 = *v73;
                v64 = v73;
                *v73 = v68;
                v74 = (char *)v70 - (char *)v7 + 8;
                if (v74 >= 9)
                {
                  v75 = (((unint64_t)v74 >> 3) - 2) >> 1;
                  v76 = (unint64_t *)v7 + v75;
                  result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v76, *v70);
                  if ((_DWORD)result)
                  {
                    v77 = *v70;
                    do
                    {
                      v78 = v76;
                      *v70 = *v76;
                      if (!v75)
                        break;
                      v75 = (v75 - 1) >> 1;
                      v76 = (unint64_t *)v7 + v75;
                      result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v76, v77);
                      v70 = v78;
                    }
                    while ((result & 1) != 0);
                    *v78 = v77;
                  }
                }
              }
            }
            while (v63-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (unint64_t *)v7 + ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(v12, (unint64_t *)v7, v88);
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)v7, v12, v88);
          v13 = v11;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(&v7->u64[1], &v7->u64[v13 - 1], v86);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)&v7[1], &v7->u64[v13 + 1], v85);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(&v7->u64[v13 - 1], v12, &v7->u64[v13 + 1]);
          v14 = v7->i64[0];
          v7->i64[0] = v7->i64[v13];
          v7->i64[v13] = v14;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        if (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v7[-1].u64[1], v7->i64[0]))
        {
          v29 = v7->i64[0];
          result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v7->i64[0], *v88);
          if ((result & 1) != 0)
          {
            v8 = (unint64_t *)v7;
            do
            {
              v30 = v8[1];
              ++v8;
              result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v29, v30);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v31 = &v7->u64[1];
            do
            {
              v8 = v31;
              if (v31 >= (unint64_t *)a2)
                break;
              ++v31;
              result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v29, *v8);
            }
            while (!(_DWORD)result);
          }
          v32 = (unint64_t *)a2;
          if (v8 < (unint64_t *)a2)
          {
            v32 = (unint64_t *)a2;
            do
            {
              v33 = *--v32;
              result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v29, v33);
            }
            while ((result & 1) != 0);
          }
          while (v8 < v32)
          {
            v34 = *v8;
            *v8 = *v32;
            *v32 = v34;
            do
            {
              v35 = v8[1];
              ++v8;
            }
            while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v29, v35));
            do
            {
              v36 = *--v32;
              result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v29, v36);
            }
            while ((result & 1) != 0);
          }
          v37 = v8 - 1;
          if (v8 - 1 != (unint64_t *)v7)
            v7->i64[0] = *v37;
          a4 = 0;
          *v37 = v29;
          continue;
        }
LABEL_11:
        v15 = v7->i64[0];
        v16 = v7;
        do
        {
          v17 = v16;
          v18 = v16->u64[1];
          v16 = (int8x16_t *)((char *)v16 + 8);
        }
        while (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v18, v15));
        v19 = a2;
        if (v17 == v7)
        {
          do
          {
            if (v16 >= a2)
              break;
            v21 = a2[-1].u64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
          }
          while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v21, v15));
        }
        else
        {
          do
          {
            v20 = a2[-1].u64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
          }
          while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v20, v15));
        }
        if (v16 < a2)
        {
          v22 = (uint64_t *)v16;
          v23 = (uint64_t *)a2;
          do
          {
            v24 = *v22;
            *v22 = *v23;
            *v23 = v24;
            do
            {
              v17 = (int8x16_t *)v22;
              v25 = v22[1];
              ++v22;
            }
            while (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v25, v15));
            do
              v26 = *--v23;
            while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v26, v15));
          }
          while (v22 < v23);
        }
        if (v17 != v7)
          v7->i64[0] = v17->i64[0];
        v17->i64[0] = v15;
        v27 = v16 >= a2;
        a2 = v19;
        if (!v27)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,false>(v7, v17, a3, a4 & 1);
          a4 = 0;
          v8 = &v17->u64[1];
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(v7, v17);
        v8 = &v17->u64[1];
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((int8x16_t *)&v17->u64[1], v19);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_30;
        }
        a2 = v17;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int8x16_t *v16;
  int8x16_t *v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int8x16_t *v44;
  BOOL v46;
  uint64_t v47;
  unint64_t *v48;
  _QWORD *i64;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  int8x16_t *v87;
  unint64_t *v88;
  int64_t v89;

  v7 = (int8x16_t *)result;
LABEL_2:
  v86 = (unint64_t *)&a2[-1];
  v88 = &a2[-1].u64[1];
  v85 = &a2[-2].u64[1];
  v8 = (unint64_t *)v7;
  while (2)
  {
    v7 = (int8x16_t *)v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v88, v7->i64[0]);
        if ((_DWORD)result)
        {
          v38 = v7->i64[0];
          v7->i64[0] = *v88;
          *v88 = v38;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((unint64_t *)v7, &v7->u64[1], v88);
      case 4:
        v39 = (unint64_t *)&v7[1];
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((unint64_t *)v7, &v7->u64[1], (unint64_t *)&v7[1]);
        result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v88, v7[1].u64[0]);
        if ((_DWORD)result)
        {
          v40 = *v39;
          *v39 = *v88;
          *v88 = v40;
          result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v39, v7->u64[1]);
          if ((_DWORD)result)
          {
            v42 = v7->i64[1];
            v41 = v7[1].u64[0];
            v43 = v7->i64[0];
            v7->i64[1] = v41;
            v7[1].i64[0] = v42;
            result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v41, v43);
            if ((_DWORD)result)
              *v7 = vextq_s8(*v7, *v7, 8uLL);
          }
        }
        return result;
      case 5:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,0>((unint64_t *)v7, &v7->u64[1], (unint64_t *)&v7[1], &v7[1].u64[1], v88);
      default:
        if (v9 <= 191)
        {
          v44 = (int8x16_t *)&v7->u64[1];
          v46 = v7 == a2 || v44 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v46)
            {
              v47 = 0;
              v48 = (unint64_t *)v7;
              do
              {
                v51 = *v48;
                v50 = v48[1];
                v48 = (unint64_t *)v44;
                result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v50, v51);
                if ((_DWORD)result)
                {
                  v52 = *v48;
                  v53 = v47;
                  do
                  {
                    *(uint64_t *)((char *)&v7->i64[1] + v53) = *(uint64_t *)((char *)v7->i64 + v53);
                    if (!v53)
                    {
                      i64 = v7->i64;
                      goto LABEL_70;
                    }
                    result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v52, *(unint64_t *)((char *)&v7->u64[-1] + v53));
                    v53 -= 8;
                  }
                  while ((result & 1) != 0);
                  i64 = (uint64_t *)((char *)&v7->i64[1] + v53);
LABEL_70:
                  *i64 = v52;
                }
                v44 = (int8x16_t *)(v48 + 1);
                v47 += 8;
              }
              while (v48 + 1 != (unint64_t *)a2);
            }
          }
          else if (!v46)
          {
            do
            {
              v80 = v7->i64[0];
              v79 = v7->u64[1];
              v7 = v44;
              result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v79, v80);
              if ((_DWORD)result)
              {
                v81 = v7->i64[0];
                v82 = v7->i64;
                do
                {
                  v83 = v82;
                  v84 = *--v82;
                  *v83 = v84;
                  result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v81, *(v83 - 2));
                }
                while ((result & 1) != 0);
                *v82 = v81;
              }
              v44 = (int8x16_t *)&v7->u64[1];
            }
            while (&v7->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v54 = (unint64_t)(v10 - 2) >> 1;
            v87 = a2;
            v89 = v54;
            do
            {
              v55 = v54;
              if (v89 >= v54)
              {
                v56 = (2 * v54) | 1;
                v57 = (unint64_t *)v7 + v56;
                if (2 * v54 + 2 < v10
                  && md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v57, v57[1]))
                {
                  ++v57;
                  v56 = 2 * v55 + 2;
                }
                v58 = (unint64_t *)v7 + v55;
                result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v57, *v58);
                if ((result & 1) == 0)
                {
                  v59 = *v58;
                  do
                  {
                    v60 = v57;
                    *v58 = *v57;
                    if (v89 < v56)
                      break;
                    v61 = (2 * v56) | 1;
                    v57 = (unint64_t *)v7 + v61;
                    v62 = 2 * v56 + 2;
                    if (v62 < v10
                      && md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v57, v57[1]))
                    {
                      ++v57;
                      v61 = v62;
                    }
                    result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v57, v59);
                    v58 = v60;
                    v56 = v61;
                  }
                  while (!(_DWORD)result);
                  *v60 = v59;
                }
              }
              v54 = v55 - 1;
            }
            while (v55);
            v63 = (unint64_t)v9 >> 3;
            v64 = (unint64_t *)v87;
            do
            {
              v66 = v64;
              v67 = 0;
              v68 = v7->i64[0];
              v69 = v7->i64;
              do
              {
                v70 = &v69[v67 + 1];
                v71 = (2 * v67) | 1;
                v72 = 2 * v67 + 2;
                if (v72 < v63)
                {
                  result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v70, v69[v67 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v70;
                    v71 = v72;
                  }
                }
                *v69 = *v70;
                v69 = v70;
                v67 = v71;
              }
              while (v71 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
              v73 = v66 - 1;
              if (v70 == v73)
              {
                v64 = v73;
                *v70 = v68;
              }
              else
              {
                *v70 = *v73;
                v64 = v73;
                *v73 = v68;
                v74 = (char *)v70 - (char *)v7 + 8;
                if (v74 >= 9)
                {
                  v75 = (((unint64_t)v74 >> 3) - 2) >> 1;
                  v76 = (unint64_t *)v7 + v75;
                  result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v76, *v70);
                  if ((_DWORD)result)
                  {
                    v77 = *v70;
                    do
                    {
                      v78 = v76;
                      *v70 = *v76;
                      if (!v75)
                        break;
                      v75 = (v75 - 1) >> 1;
                      v76 = (unint64_t *)v7 + v75;
                      result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v76, v77);
                      v70 = v78;
                    }
                    while ((result & 1) != 0);
                    *v78 = v77;
                  }
                }
              }
            }
            while (v63-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (unint64_t *)v7 + ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(v12, (unint64_t *)v7, v88);
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((unint64_t *)v7, v12, v88);
          v13 = v11;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(&v7->u64[1], &v7->u64[v13 - 1], v86);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((unint64_t *)&v7[1], &v7->u64[v13 + 1], v85);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(&v7->u64[v13 - 1], v12, &v7->u64[v13 + 1]);
          v14 = v7->i64[0];
          v7->i64[0] = v7->i64[v13];
          v7->i64[v13] = v14;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        if (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v7[-1].u64[1], v7->i64[0]))
        {
          v29 = v7->i64[0];
          result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v7->i64[0], *v88);
          if ((result & 1) != 0)
          {
            v8 = (unint64_t *)v7;
            do
            {
              v30 = v8[1];
              ++v8;
              result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v29, v30);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v31 = &v7->u64[1];
            do
            {
              v8 = v31;
              if (v31 >= (unint64_t *)a2)
                break;
              ++v31;
              result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v29, *v8);
            }
            while (!(_DWORD)result);
          }
          v32 = (unint64_t *)a2;
          if (v8 < (unint64_t *)a2)
          {
            v32 = (unint64_t *)a2;
            do
            {
              v33 = *--v32;
              result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v29, v33);
            }
            while ((result & 1) != 0);
          }
          while (v8 < v32)
          {
            v34 = *v8;
            *v8 = *v32;
            *v32 = v34;
            do
            {
              v35 = v8[1];
              ++v8;
            }
            while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v29, v35));
            do
            {
              v36 = *--v32;
              result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v29, v36);
            }
            while ((result & 1) != 0);
          }
          v37 = v8 - 1;
          if (v8 - 1 != (unint64_t *)v7)
            v7->i64[0] = *v37;
          a4 = 0;
          *v37 = v29;
          continue;
        }
LABEL_11:
        v15 = v7->i64[0];
        v16 = v7;
        do
        {
          v17 = v16;
          v18 = v16->u64[1];
          v16 = (int8x16_t *)((char *)v16 + 8);
        }
        while (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v18, v15));
        v19 = a2;
        if (v17 == v7)
        {
          do
          {
            if (v16 >= a2)
              break;
            v21 = a2[-1].u64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
          }
          while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v21, v15));
        }
        else
        {
          do
          {
            v20 = a2[-1].u64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
          }
          while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v20, v15));
        }
        if (v16 < a2)
        {
          v22 = (uint64_t *)v16;
          v23 = (uint64_t *)a2;
          do
          {
            v24 = *v22;
            *v22 = *v23;
            *v23 = v24;
            do
            {
              v17 = (int8x16_t *)v22;
              v25 = v22[1];
              ++v22;
            }
            while (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v25, v15));
            do
              v26 = *--v23;
            while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v26, v15));
          }
          while (v22 < v23);
        }
        if (v17 != v7)
          v7->i64[0] = v17->i64[0];
        v17->i64[0] = v15;
        v27 = v16 >= a2;
        a2 = v19;
        if (!v27)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,false>(v7, v17, a3, a4 & 1);
          a4 = 0;
          v8 = &v17->u64[1];
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(v7, v17);
        v8 = &v17->u64[1];
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((int8x16_t *)&v17->u64[1], v19);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_30;
        }
        a2 = v17;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

_QWORD *std::vector<md::RoadPosition *>::__assign_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      abort();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memmove(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, 8 * v17);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(unint64_t *a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5;
  char *v7;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  char *v24;
  char *v25;
  char *v26;
  size_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  __int128 *v50;
  _OWORD *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  _OWORD *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  void *v66;
  unint64_t v67;

  v5 = a5 - 1;
  if (a5 < 1)
    return;
  v7 = __src;
  v10 = *a1;
  v9 = (char *)a1[1];
  v11 = a2 - *a1;
  v12 = v11 >> 3;
  v13 = (char *)(*a1 + (v11 & 0xFFFFFFFFFFFFFFF8));
  v14 = (char *)a1[2];
  if (a5 > (v14 - v9) >> 3)
  {
    v15 = a5 + ((uint64_t)&v9[-v10] >> 3);
    if (v15 >> 61)
      abort();
    v16 = (uint64_t)&v14[-v10];
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v18 = v17;
      v19 = operator new(8 * v17);
      v17 = v18;
      v12 = v11 >> 3;
    }
    else
    {
      v19 = 0;
    }
    v44 = &v19[8 * v12];
    v45 = &v44[8 * a5];
    v46 = v5 & 0x1FFFFFFFFFFFFFFFLL;
    v47 = v44;
    if ((v5 & 0x1FFFFFFFFFFFFFFFuLL) >= 7)
    {
      v47 = &v19[8 * v12];
      if ((unint64_t)(&v19[v11 & 0xFFFFFFFFFFFFFFF8] - v7) >= 0x20)
      {
        v48 = (char *)v10;
        v49 = (v46 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v47 = &v44[8 * v49];
        v50 = (__int128 *)(v7 + 16);
        v51 = &v19[8 * v12 + 16];
        v52 = v49;
        do
        {
          v53 = *v50;
          *(v51 - 1) = *(v50 - 1);
          *v51 = v53;
          v50 += 2;
          v51 += 2;
          v52 -= 4;
        }
        while (v52);
        if (v46 + 1 == v49)
          goto LABEL_43;
        v7 += 8 * v49;
      }
    }
    do
    {
      v54 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v47 = v54;
      v47 += 8;
    }
    while (v47 != v45);
    v48 = (char *)*a1;
LABEL_43:
    if (v48 != v13)
    {
      v55 = (char *)((v11 & 0xFFFFFFFFFFFFFFF8) + v10);
      v56 = v55 - v48 - 8;
      if (v56 >= 0x68)
      {
        v57 = v13;
        if ((unint64_t)(v55 - &v19[v11 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
        {
          v58 = (v56 >> 3) + 1;
          v57 = &v13[-8 * (v58 & 0x3FFFFFFFFFFFFFFCLL)];
          v59 = 8 * v12 - 16;
          v60 = (__int128 *)(v10 + v59);
          v61 = &v19[v59];
          v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v63 = *v60;
            *(v61 - 1) = *(v60 - 1);
            *v61 = v63;
            v60 -= 2;
            v61 -= 2;
            v62 -= 4;
          }
          while (v62);
          v44 -= 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
          if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_52;
        }
      }
      else
      {
        v57 = v13;
      }
      do
      {
        v64 = *((_QWORD *)v57 - 1);
        v57 -= 8;
        *((_QWORD *)v44 - 1) = v64;
        v44 -= 8;
      }
      while (v57 != v48);
      v9 = (char *)a1[1];
    }
LABEL_52:
    v65 = &v19[8 * v17];
    if (v9 != v13)
      memmove(v45, v13, v9 - v13);
    v66 = (void *)*a1;
    *a1 = (unint64_t)v44;
    a1[1] = (unint64_t)&v45[v9 - v13];
    a1[2] = (unint64_t)v65;
    if (v66)
      operator delete(v66);
    return;
  }
  v20 = v9 - v13;
  v21 = (v9 - v13) >> 3;
  if (v21 >= a5)
  {
    v22 = &__src[8 * a5];
    v25 = (char *)a1[1];
LABEL_18:
    v26 = &v13[8 * a5];
    v27 = v25 - v26;
    v28 = (v25 - v26) >> 3;
    v29 = &v25[-8 * a5];
    v30 = v25;
    if (v29 < v9)
    {
      v31 = (v11 & 0xFFFFFFFFFFFFFFF8) + v27;
      v32 = (char *)(v31 + v10);
      v33 = v31 + v10 + 8;
      if ((unint64_t)v9 > v33)
        v33 = (unint64_t)v9;
      v34 = v33 + ~v10 - v31;
      v35 = v25 - v32;
      v36 = v34 >= 0x58 && v35 > 0x1F;
      v30 = v25;
      if (!v36)
        goto LABEL_61;
      v37 = (v34 >> 3) + 1;
      v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
      v29 += v38;
      v39 = v25 + 16;
      v40 = (__int128 *)(8 * v28 + 8 * v12 + v10 + 16);
      v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v42 = *v40;
        *(v39 - 1) = *(v40 - 1);
        *v39 = v42;
        v39 += 2;
        v40 += 2;
        v41 -= 4;
      }
      while (v41);
      v30 = &v25[v38];
      if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_61:
        do
        {
          v43 = *(_QWORD *)v29;
          v29 += 8;
          *(_QWORD *)v30 = v43;
          v30 += 8;
        }
        while (v29 < v9);
      }
    }
    a1[1] = (unint64_t)v30;
    if (v25 != v26)
      memmove(&v25[-8 * v28], v13, v27);
    if (v22 != v7)
      memmove(v13, v7, v22 - v7);
    return;
  }
  v22 = &__src[8 * v21];
  v23 = a4 - v22;
  if (a4 != v22)
  {
    v67 = *a1 + (v11 & 0xFFFFFFFFFFFFFFF8);
    v24 = &__src[8 * v21];
    memmove((void *)a1[1], v24, a4 - v22);
    v12 = v11 >> 3;
    v22 = v24;
    v13 = (char *)v67;
  }
  v25 = &v9[v23];
  a1[1] = (unint64_t)&v9[v23];
  if (v20 >= 1)
    goto LABEL_18;
}

unint64_t *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,md::RoadPosition **>(unint64_t *result, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v5 = *a2;
  v6 = *result;
  v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v5)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v7;
      *a3 = v5;
      v8 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v8;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v7 < v5)
    {
      *result = v7;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*a3 < v6)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*a4 < v5)
  {
    *a3 = *a4;
    *a4 = v5;
    v9 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v9;
      v10 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v10;
      }
    }
  }
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *result;
        if (*a2 < *result)
        {
          *result = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,md::RoadPosition **>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 < *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 < v12)
        {
          a1[1] = v13;
          *(a2 - 1) = v12;
          v31 = *a1;
          v30 = a1[1];
          if (v30 < *a1)
          {
            *a1 = v30;
            a1[1] = v31;
          }
        }
      }
      else
      {
        if (v13 >= v12)
        {
          *a1 = v12;
          a1[1] = v11;
          v36 = *(a2 - 1);
          if (v36 >= v11)
            return 1;
          a1[1] = v36;
        }
        else
        {
          *a1 = v13;
        }
        *(a2 - 1) = v11;
      }
      return 1;
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_35;
        }
LABEL_34:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
        goto LABEL_36;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_34;
      }
LABEL_35:
      v15 = v17;
LABEL_36:
      v32 = *(a2 - 1);
      if (v32 < v15)
      {
        *v16 = v32;
        *(a2 - 1) = v15;
        v33 = *v16;
        v34 = *v14;
        if (v33 < v34)
        {
          a1[1] = v33;
          a1[2] = v34;
          v35 = *a1;
          if (v33 < *a1)
          {
            *a1 = v33;
            a1[1] = v35;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,md::RoadPosition **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      if (v7 >= *a1)
      {
        if (v5 >= v7)
          goto LABEL_19;
        a1[1] = v5;
        *v6 = v7;
        v9 = a1;
        v10 = a1 + 1;
      }
      else
      {
        v9 = a1;
        v10 = a1 + 2;
        if (v5 < v7)
          goto LABEL_18;
        *a1 = v7;
        a1[1] = v8;
        v9 = a1 + 1;
        v10 = a1 + 2;
      }
      if (v5 >= v8)
        goto LABEL_19;
LABEL_18:
      *v9 = v5;
      *v10 = v8;
LABEL_19:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v26 = *v22;
        v27 = *v6;
        if (*v22 < v27)
        {
          v28 = i;
          do
          {
            *(unint64_t *)((char *)a1 + v28) = v27;
            v29 = v28 - 8;
            if (v28 == 8)
            {
              v25 = a1;
              goto LABEL_22;
            }
            v27 = *(unint64_t *)((char *)a1 + v28 - 16);
            v28 -= 8;
          }
          while (v26 < v27);
          v25 = (unint64_t *)((char *)a1 + v29);
LABEL_22:
          *v25 = v26;
          if (++v23 == 8)
            break;
        }
        v6 = v22++;
        if (v22 == a2)
          return 1;
      }
      return v22 + 1 == a2;
  }
}

unint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  double v7;
  double v8;
  unint64_t v9;
  int v10;
  double v11;
  double v12;
  unint64_t v13;
  int v14;
  double v15;
  double v16;
  unint64_t v17;
  int v18;
  double v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  double v25;
  double v26;

  v3 = *a2;
  v4 = *result;
  v5 = *(_DWORD *)(*a2 + 20);
  v6 = *(_DWORD *)(*result + 20);
  if (v5 != v6)
  {
    if (v5 >= v6)
      goto LABEL_4;
LABEL_9:
    v13 = *a3;
    v14 = *(_DWORD *)(*a3 + 20);
    if (v14 == v5)
    {
      v15 = *(double *)(v13 + 32);
      v16 = *(double *)(v3 + 32);
      if (v15 != v16)
      {
        if (v15 <= v16)
          goto LABEL_12;
LABEL_19:
        *result = v13;
        *a3 = v4;
        return result;
      }
      if (v13 < v3)
        goto LABEL_19;
    }
    else if (v14 < v5)
    {
      goto LABEL_19;
    }
LABEL_12:
    *result = v3;
    *a2 = v4;
    v17 = *a3;
    v18 = *(_DWORD *)(*a3 + 20);
    if (v18 == v6)
    {
      v19 = *(double *)(v17 + 32);
      v20 = *(double *)(v4 + 32);
      if (v19 == v20)
      {
        if (v17 >= v4)
          return result;
      }
      else if (v19 <= v20)
      {
        return result;
      }
    }
    else if (v18 >= v6)
    {
      return result;
    }
    *a2 = v17;
    *a3 = v4;
    return result;
  }
  v7 = *(double *)(v3 + 32);
  v8 = *(double *)(v4 + 32);
  if (v7 == v8)
  {
    if (v3 >= v4)
      goto LABEL_4;
    goto LABEL_9;
  }
  if (v7 > v8)
    goto LABEL_9;
LABEL_4:
  v9 = *a3;
  v10 = *(_DWORD *)(*a3 + 20);
  if (v10 == v5)
  {
    v11 = *(double *)(v9 + 32);
    v12 = *(double *)(v3 + 32);
    if (v11 == v12)
    {
      if (v9 >= v3)
        return result;
    }
    else if (v11 <= v12)
    {
      return result;
    }
  }
  else if (v10 >= v5)
  {
    return result;
  }
  *a2 = v9;
  *a3 = v3;
  v21 = *a2;
  v22 = *result;
  v23 = *(_DWORD *)(*a2 + 20);
  v24 = *(_DWORD *)(*result + 20);
  if (v23 != v24)
  {
    if (v23 >= v24)
      return result;
    goto LABEL_36;
  }
  v25 = *(double *)(v21 + 32);
  v26 = *(double *)(v22 + 32);
  if (v25 == v26)
  {
    if (v21 < v22)
    {
LABEL_36:
      *result = v21;
      *a2 = v22;
    }
  }
  else if (v25 > v26)
  {
    goto LABEL_36;
  }
  return result;
}

unint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  double v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  double v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  double v25;
  double v26;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  v11 = *(_DWORD *)(*a4 + 20);
  v12 = *(_DWORD *)(*a3 + 20);
  if (v11 == v12)
  {
    v13 = *(double *)(v9 + 32);
    v14 = *(double *)(v10 + 32);
    if (v13 == v14)
    {
      if (v9 >= v10)
        return result;
    }
    else if (v13 <= v14)
    {
      return result;
    }
  }
  else if (v11 >= v12)
  {
    return result;
  }
  *a3 = v9;
  *a4 = v10;
  v15 = *a3;
  v16 = *a2;
  v17 = *(_DWORD *)(*a3 + 20);
  v18 = *(_DWORD *)(*a2 + 20);
  if (v17 == v18)
  {
    v19 = *(double *)(v15 + 32);
    v20 = *(double *)(v16 + 32);
    if (v19 == v20)
    {
      if (v15 >= v16)
        return result;
    }
    else if (v19 <= v20)
    {
      return result;
    }
  }
  else if (v17 >= v18)
  {
    return result;
  }
  *a2 = v15;
  *a3 = v16;
  v21 = *a2;
  v22 = *a1;
  v23 = *(_DWORD *)(*a2 + 20);
  v24 = *(_DWORD *)(*a1 + 20);
  if (v23 == v24)
  {
    v25 = *(double *)(v21 + 32);
    v26 = *(double *)(v22 + 32);
    if (v25 == v26)
    {
      if (v21 >= v22)
        return result;
    }
    else if (v25 <= v26)
    {
      return result;
    }
  }
  else if (v23 >= v24)
  {
    return result;
  }
  *a1 = v21;
  *a2 = v22;
  return result;
}

unint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t *result;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  double v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  double v21;
  double v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  double v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  double v33;
  double v34;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  v13 = *(_DWORD *)(*a5 + 20);
  v14 = *(_DWORD *)(*a4 + 20);
  if (v13 == v14)
  {
    v15 = *(double *)(v11 + 32);
    v16 = *(double *)(v12 + 32);
    if (v15 == v16)
    {
      if (v11 >= v12)
        return result;
    }
    else if (v15 <= v16)
    {
      return result;
    }
  }
  else if (v13 >= v14)
  {
    return result;
  }
  *a4 = v11;
  *a5 = v12;
  v17 = *a4;
  v18 = *a3;
  v19 = *(_DWORD *)(*a4 + 20);
  v20 = *(_DWORD *)(*a3 + 20);
  if (v19 == v20)
  {
    v21 = *(double *)(v17 + 32);
    v22 = *(double *)(v18 + 32);
    if (v21 == v22)
    {
      if (v17 >= v18)
        return result;
    }
    else if (v21 <= v22)
    {
      return result;
    }
  }
  else if (v19 >= v20)
  {
    return result;
  }
  *a3 = v17;
  *a4 = v18;
  v23 = *a3;
  v24 = *a2;
  v25 = *(_DWORD *)(*a3 + 20);
  v26 = *(_DWORD *)(*a2 + 20);
  if (v25 == v26)
  {
    v27 = *(double *)(v23 + 32);
    v28 = *(double *)(v24 + 32);
    if (v27 == v28)
    {
      if (v23 >= v24)
        return result;
    }
    else if (v27 <= v28)
    {
      return result;
    }
  }
  else if (v25 >= v26)
  {
    return result;
  }
  *a2 = v23;
  *a3 = v24;
  v29 = *a2;
  v30 = *a1;
  v31 = *(_DWORD *)(*a2 + 20);
  v32 = *(_DWORD *)(*a1 + 20);
  if (v31 == v32)
  {
    v33 = *(double *)(v29 + 32);
    v34 = *(double *)(v30 + 32);
    if (v33 == v34)
    {
      if (v29 >= v30)
        return result;
    }
    else if (v33 <= v34)
    {
      return result;
    }
  }
  else if (v31 >= v32)
  {
    return result;
  }
  *a1 = v29;
  *a2 = v30;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  double v10;
  double v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  double v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  double v26;
  double v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *(_DWORD *)(v6 + 20);
      v9 = *(_DWORD *)(*a1 + 20);
      if (v8 == v9)
      {
        v10 = *(double *)(v6 + 32);
        v11 = *(double *)(v7 + 32);
        if (v10 == v11)
        {
          if (v6 >= v7)
            return result;
        }
        else if (v10 <= v11)
        {
          return result;
        }
      }
      else if (v8 >= v9)
      {
        return result;
      }
      *a1 = v6;
      *(a2 - 1) = v7;
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v12 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(a1, a1 + 1, a1 + 2);
      v13 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (2)
  {
    v17 = *v13;
    v18 = *v12;
    v19 = *(_DWORD *)(*v13 + 20);
    v20 = *(_DWORD *)(*v12 + 20);
    if (v19 == v20)
    {
      v21 = *(double *)(v17 + 32);
      v22 = *(double *)(v18 + 32);
      if (v21 == v22)
      {
        if (v17 >= v18)
          goto LABEL_10;
      }
      else if (v21 <= v22)
      {
        goto LABEL_10;
      }
    }
    else if (v19 >= v20)
    {
      goto LABEL_10;
    }
    *v13 = v18;
    v16 = a1;
    if (v12 == a1)
      goto LABEL_9;
    v23 = v14;
    while (1)
    {
      v24 = *(unint64_t *)((char *)a1 + v23 + 8);
      v25 = *(_DWORD *)(v24 + 20);
      if (v19 == v25)
        break;
      if (v19 >= v25)
        goto LABEL_28;
LABEL_21:
      --v12;
      *(unint64_t *)((char *)a1 + v23 + 16) = v24;
      v23 -= 8;
      if (v23 == -16)
      {
        v16 = a1;
        goto LABEL_9;
      }
    }
    v26 = *(double *)(v17 + 32);
    v27 = *(double *)(v24 + 32);
    if (v26 == v27)
    {
      if (v17 >= v24)
      {
        v16 = (unint64_t *)((char *)a1 + v23 + 16);
        goto LABEL_9;
      }
      goto LABEL_21;
    }
    if (v26 > v27)
      goto LABEL_21;
LABEL_28:
    v16 = v12;
LABEL_9:
    *v16 = v17;
    if (++v15 == 8)
      return v13 + 1 == a2;
LABEL_10:
    v12 = v13;
    v14 += 8;
    if (++v13 != a2)
      continue;
    return 1;
  }
}

BOOL md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  long double v7;
  long double v8;
  double v9;
  long double v10;
  double v11;
  __double2 v12;
  double v13;
  __double2 v14;
  uint64_t v15;
  uint64_t v16;
  long double v18;
  long double v19;
  double v20;
  long double v21;
  double v22;
  __double2 v23;
  double v24;
  __double2 v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  long double v30;
  long double v31;
  double v32;
  long double v33;
  double v34;
  __double2 v35;
  double v36;
  __double2 v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  long double v41;
  long double v42;
  double v43;
  long double v44;
  double v45;
  __double2 v46;
  double v47;
  __double2 v48;

  v4 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5 = v4;
  if (*(_BYTE *)(v4 + 44))
  {
    v6 = *(double *)(v4 + 8);
  }
  else
  {
    v7 = *(double *)(v4 + 24) * 6.28318531;
    v8 = exp(*(double *)(v4 + 32) * 6.28318531 + -3.14159265);
    v9 = atan(v8) * 2.0 + -1.57079633;
    v10 = fmod(v7, 6.28318531);
    v11 = fmod(v10 + 6.28318531, 6.28318531) + -3.14159265;
    v12 = __sincos_stret(v9);
    v13 = 6378137.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0);
    v14 = __sincos_stret(v11);
    v6 = v13 * v12.__cosval * v14.__sinval;
    *(double *)v5 = v13 * v12.__cosval * v14.__cosval;
    *(double *)(v5 + 8) = v6;
    *(double *)(v5 + 16) = v12.__sinval * 0.99330562 * v13;
    *(_BYTE *)(v5 + 44) = 1;
  }
  v15 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 56))(a2);
  v16 = v15;
  if (*(_BYTE *)(v15 + 44))
  {
    if (v6 == *(double *)(v15 + 8))
      return a1 < a2;
  }
  else
  {
    v18 = *(double *)(v15 + 24) * 6.28318531;
    v19 = exp(*(double *)(v15 + 32) * 6.28318531 + -3.14159265);
    v20 = atan(v19) * 2.0 + -1.57079633;
    v21 = fmod(v18, 6.28318531);
    v22 = fmod(v21 + 6.28318531, 6.28318531) + -3.14159265;
    v23 = __sincos_stret(v20);
    v24 = 6378137.0 / sqrt(v23.__sinval * v23.__sinval * -0.00669437999 + 1.0);
    v25 = __sincos_stret(v22);
    v26 = v24 * v23.__cosval * v25.__sinval;
    *(double *)v16 = v24 * v23.__cosval * v25.__cosval;
    *(double *)(v16 + 8) = v26;
    *(double *)(v16 + 16) = v23.__sinval * 0.99330562 * v24;
    *(_BYTE *)(v16 + 44) = 1;
    if (v6 == v26)
      return a1 < a2;
  }
  v27 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 56))(a1);
  v28 = v27;
  if (*(_BYTE *)(v27 + 44))
  {
    v29 = *(double *)(v27 + 8);
  }
  else
  {
    v30 = *(double *)(v27 + 24) * 6.28318531;
    v31 = exp(*(double *)(v27 + 32) * 6.28318531 + -3.14159265);
    v32 = atan(v31) * 2.0 + -1.57079633;
    v33 = fmod(v30, 6.28318531);
    v34 = fmod(v33 + 6.28318531, 6.28318531) + -3.14159265;
    v35 = __sincos_stret(v32);
    v36 = 6378137.0 / sqrt(v35.__sinval * v35.__sinval * -0.00669437999 + 1.0);
    v37 = __sincos_stret(v34);
    v29 = v36 * v35.__cosval * v37.__sinval;
    *(double *)v28 = v36 * v35.__cosval * v37.__cosval;
    *(double *)(v28 + 8) = v29;
    *(double *)(v28 + 16) = v35.__sinval * 0.99330562 * v36;
    *(_BYTE *)(v28 + 44) = 1;
  }
  v38 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 56))(a2);
  v39 = v38;
  if (*(_BYTE *)(v38 + 44))
  {
    v40 = *(double *)(v38 + 8);
  }
  else
  {
    v41 = *(double *)(v38 + 24) * 6.28318531;
    v42 = exp(*(double *)(v38 + 32) * 6.28318531 + -3.14159265);
    v43 = atan(v42) * 2.0 + -1.57079633;
    v44 = fmod(v41, 6.28318531);
    v45 = fmod(v44 + 6.28318531, 6.28318531) + -3.14159265;
    v46 = __sincos_stret(v43);
    v47 = 6378137.0 / sqrt(v46.__sinval * v46.__sinval * -0.00669437999 + 1.0);
    v48 = __sincos_stret(v45);
    v40 = v47 * v46.__cosval * v48.__sinval;
    *(double *)v39 = v47 * v46.__cosval * v48.__cosval;
    *(double *)(v39 + 8) = v40;
    *(double *)(v39 + 16) = v46.__sinval * 0.99330562 * v47;
    *(_BYTE *)(v39 + 44) = 1;
  }
  return v29 < v40;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  BOOL v6;
  _BOOL8 result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v6 = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a2, *a1);
  result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a3, *a2);
  if (v6)
  {
    v8 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v8;
    }
    else
    {
      *a1 = *a2;
      *a2 = v8;
      result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a3, v8);
      if (result)
      {
        v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if (result)
  {
    v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a2, *a1);
    if (result)
    {
      v10 = *a1;
      *a1 = *a2;
      *a2 = v10;
    }
  }
  return result;
}

BOOL std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BOOL8 result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(a1, a2, a3);
  if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a4, *a3))
  {
    v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a3, *a2))
    {
      v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a2, *a1))
      {
        v12 = *a1;
        *a1 = *a2;
        *a2 = v12;
      }
    }
  }
  result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a5, *a4);
  if (result)
  {
    v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a4, *a3);
    if (result)
    {
      v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a3, *a2);
      if (result)
      {
        v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*a2, *a1);
        if (result)
        {
          v17 = *a1;
          *a1 = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  int v10;
  _QWORD *i64;
  unint64_t v12;
  uint64_t v13;
  __int8 *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(a2[-1].u64[1], a1->i64[0]))
      {
        v6 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((unint64_t *)a1, &a1->u64[1], &a2[-1].u64[1]);
      return 1;
    case 4:
      v15 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1]);
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(a2[-1].u64[1], a1[1].u64[0]))
      {
        v16 = *v15;
        *v15 = a2[-1].u64[1];
        a2[-1].i64[1] = v16;
        if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v15, a1->u64[1]))
        {
          v18 = a1->i64[1];
          v17 = a1[1].u64[0];
          v19 = a1->i64[0];
          a1->i64[1] = v17;
          a1[1].i64[0] = v18;
          if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v17, v19))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,0>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a1[1].u64[1], &a2[-1].u64[1]);
      return 1;
    default:
      v7 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1]);
      v8 = &a1[1].u64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v8, *v7))
    {
      v12 = *v8;
      v13 = v9;
      do
      {
        v14 = &a1->i8[v13];
        *(uint64_t *)((char *)&a1[1].i64[1] + v13) = *(uint64_t *)((char *)a1[1].i64 + v13);
        if (v13 == -16)
        {
          i64 = a1->i64;
          goto LABEL_7;
        }
        v13 -= 8;
      }
      while (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v12, *((_QWORD *)v14 + 1)));
      i64 = (uint64_t *)((char *)&a1[1].i64[1] + v13);
LABEL_7:
      *i64 = v12;
      if (++v10 == 8)
        return v8 + 1 == (unint64_t *)a2;
    }
    v7 = v8;
    v9 += 8;
    if (++v8 == (unint64_t *)a2)
      return 1;
  }
}

BOOL md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  long double v7;
  long double v8;
  double v9;
  long double v10;
  double v11;
  __double2 v12;
  double v13;
  __double2 v14;
  uint64_t v15;
  uint64_t v16;
  long double v18;
  long double v19;
  double v20;
  long double v21;
  double v22;
  __double2 v23;
  double v24;
  __double2 v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  long double v30;
  long double v31;
  double v32;
  long double v33;
  double v34;
  __double2 v35;
  double v36;
  __double2 v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  long double v41;
  long double v42;
  double v43;
  long double v44;
  double v45;
  __double2 v46;
  double v47;
  __double2 v48;

  v4 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5 = v4;
  if (*(_BYTE *)(v4 + 44))
  {
    v6 = *(double *)v4;
  }
  else
  {
    v7 = *(double *)(v4 + 24) * 6.28318531;
    v8 = exp(*(double *)(v4 + 32) * 6.28318531 + -3.14159265);
    v9 = atan(v8) * 2.0 + -1.57079633;
    v10 = fmod(v7, 6.28318531);
    v11 = fmod(v10 + 6.28318531, 6.28318531) + -3.14159265;
    v12 = __sincos_stret(v9);
    v13 = 6378137.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0);
    v14 = __sincos_stret(v11);
    v6 = v13 * v12.__cosval * v14.__cosval;
    *(double *)v5 = v6;
    *(double *)(v5 + 8) = v13 * v12.__cosval * v14.__sinval;
    *(double *)(v5 + 16) = v12.__sinval * 0.99330562 * v13;
    *(_BYTE *)(v5 + 44) = 1;
  }
  v15 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 56))(a2);
  v16 = v15;
  if (*(_BYTE *)(v15 + 44))
  {
    if (v6 == *(double *)v15)
      return a1 < a2;
  }
  else
  {
    v18 = *(double *)(v15 + 24) * 6.28318531;
    v19 = exp(*(double *)(v15 + 32) * 6.28318531 + -3.14159265);
    v20 = atan(v19) * 2.0 + -1.57079633;
    v21 = fmod(v18, 6.28318531);
    v22 = fmod(v21 + 6.28318531, 6.28318531) + -3.14159265;
    v23 = __sincos_stret(v20);
    v24 = 6378137.0 / sqrt(v23.__sinval * v23.__sinval * -0.00669437999 + 1.0);
    v25 = __sincos_stret(v22);
    v26 = v24 * v23.__cosval * v25.__cosval;
    *(double *)v16 = v26;
    *(double *)(v16 + 8) = v24 * v23.__cosval * v25.__sinval;
    *(double *)(v16 + 16) = v23.__sinval * 0.99330562 * v24;
    *(_BYTE *)(v16 + 44) = 1;
    if (v6 == v26)
      return a1 < a2;
  }
  v27 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 56))(a1);
  v28 = v27;
  if (*(_BYTE *)(v27 + 44))
  {
    v29 = *(double *)v27;
  }
  else
  {
    v30 = *(double *)(v27 + 24) * 6.28318531;
    v31 = exp(*(double *)(v27 + 32) * 6.28318531 + -3.14159265);
    v32 = atan(v31) * 2.0 + -1.57079633;
    v33 = fmod(v30, 6.28318531);
    v34 = fmod(v33 + 6.28318531, 6.28318531) + -3.14159265;
    v35 = __sincos_stret(v32);
    v36 = 6378137.0 / sqrt(v35.__sinval * v35.__sinval * -0.00669437999 + 1.0);
    v37 = __sincos_stret(v34);
    v29 = v36 * v35.__cosval * v37.__cosval;
    *(double *)v28 = v29;
    *(double *)(v28 + 8) = v36 * v35.__cosval * v37.__sinval;
    *(double *)(v28 + 16) = v35.__sinval * 0.99330562 * v36;
    *(_BYTE *)(v28 + 44) = 1;
  }
  v38 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 56))(a2);
  v39 = v38;
  if (*(_BYTE *)(v38 + 44))
  {
    v40 = *(double *)v38;
  }
  else
  {
    v41 = *(double *)(v38 + 24) * 6.28318531;
    v42 = exp(*(double *)(v38 + 32) * 6.28318531 + -3.14159265);
    v43 = atan(v42) * 2.0 + -1.57079633;
    v44 = fmod(v41, 6.28318531);
    v45 = fmod(v44 + 6.28318531, 6.28318531) + -3.14159265;
    v46 = __sincos_stret(v43);
    v47 = 6378137.0 / sqrt(v46.__sinval * v46.__sinval * -0.00669437999 + 1.0);
    v48 = __sincos_stret(v45);
    v40 = v47 * v46.__cosval * v48.__cosval;
    *(double *)v39 = v40;
    *(double *)(v39 + 8) = v47 * v46.__cosval * v48.__sinval;
    *(double *)(v39 + 16) = v46.__sinval * 0.99330562 * v47;
    *(_BYTE *)(v39 + 44) = 1;
  }
  return v29 < v40;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  BOOL v6;
  _BOOL8 result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v6 = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a2, *a1);
  result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a3, *a2);
  if (v6)
  {
    v8 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v8;
    }
    else
    {
      *a1 = *a2;
      *a2 = v8;
      result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a3, v8);
      if (result)
      {
        v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if (result)
  {
    v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a2, *a1);
    if (result)
    {
      v10 = *a1;
      *a1 = *a2;
      *a2 = v10;
    }
  }
  return result;
}

BOOL std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BOOL8 result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(a1, a2, a3);
  if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a4, *a3))
  {
    v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a3, *a2))
    {
      v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a2, *a1))
      {
        v12 = *a1;
        *a1 = *a2;
        *a2 = v12;
      }
    }
  }
  result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a5, *a4);
  if (result)
  {
    v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a4, *a3);
    if (result)
    {
      v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a3, *a2);
      if (result)
      {
        v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*a2, *a1);
        if (result)
        {
          v17 = *a1;
          *a1 = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  int v10;
  _QWORD *i64;
  unint64_t v12;
  uint64_t v13;
  __int8 *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(a2[-1].u64[1], a1->i64[0]))
      {
        v6 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)a1, &a1->u64[1], &a2[-1].u64[1]);
      return 1;
    case 4:
      v15 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1]);
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(a2[-1].u64[1], a1[1].u64[0]))
      {
        v16 = *v15;
        *v15 = a2[-1].u64[1];
        a2[-1].i64[1] = v16;
        if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v15, a1->u64[1]))
        {
          v18 = a1->i64[1];
          v17 = a1[1].u64[0];
          v19 = a1->i64[0];
          a1->i64[1] = v17;
          a1[1].i64[0] = v18;
          if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v17, v19))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,0>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a1[1].u64[1], &a2[-1].u64[1]);
      return 1;
    default:
      v7 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1]);
      v8 = &a1[1].u64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v8, *v7))
    {
      v12 = *v8;
      v13 = v9;
      do
      {
        v14 = &a1->i8[v13];
        *(uint64_t *)((char *)&a1[1].i64[1] + v13) = *(uint64_t *)((char *)a1[1].i64 + v13);
        if (v13 == -16)
        {
          i64 = a1->i64;
          goto LABEL_7;
        }
        v13 -= 8;
      }
      while (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v12, *((_QWORD *)v14 + 1)));
      i64 = (uint64_t *)((char *)&a1[1].i64[1] + v13);
LABEL_7:
      *i64 = v12;
      if (++v10 == 8)
        return v8 + 1 == (unint64_t *)a2;
    }
    v7 = v8;
    v9 += 8;
    if (++v8 == (unint64_t *)a2)
      return 1;
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  md::LabelPoint *v8;
  double v9;
  md::LabelPoint *v10;
  unint64_t v11;
  unint64_t v12;
  md::LabelPoint *v13;
  double v14;
  md::LabelPoint *v15;
  uint64_t result;
  md::LabelPoint *v17;
  double v18;
  md::LabelPoint *v19;
  unint64_t v20;
  unint64_t v21;
  md::LabelPoint *v22;
  double v23;
  md::LabelPoint *v24;
  md::LabelPoint *v25;
  double v26;
  md::LabelPoint *v27;
  unint64_t v28;
  unint64_t v29;
  md::LabelPoint *v30;
  double v31;
  md::LabelPoint *v32;
  md::LabelPoint *v33;
  double v34;
  md::LabelPoint *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  md::LabelPoint *v39;
  double v40;
  md::LabelPoint *v41;
  unint64_t v42;
  md::LabelPoint *v43;
  double v44;
  md::LabelPoint *v45;
  md::LabelPoint *v46;
  double v47;
  md::LabelPoint *v48;

  v4 = a2;
  v5 = a1;
  v6 = *a2;
  v7 = *a1;
  v8 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a2 + 56))(*a2);
  v9 = *(double *)(md::LabelPoint::mercatorPoint(v8) + 8);
  v10 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 56))(v7);
  if (v9 == *(double *)(md::LabelPoint::mercatorPoint(v10) + 8))
  {
    if (v6 < v7)
      goto LABEL_3;
LABEL_7:
    v20 = *a3;
    v21 = *v4;
    v22 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a3 + 56))(*a3);
    v23 = *(double *)(md::LabelPoint::mercatorPoint(v22) + 8);
    v24 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 56))(v21);
    result = md::LabelPoint::mercatorPoint(v24);
    if (v23 == *(double *)(result + 8))
    {
      if (v20 >= v21)
        return result;
    }
    else
    {
      v33 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v20 + 56))(v20);
      v34 = *(double *)(md::LabelPoint::mercatorPoint(v33) + 8);
      v35 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 56))(v21);
      result = md::LabelPoint::mercatorPoint(v35);
      if (v34 >= *(double *)(result + 8))
        return result;
    }
    v36 = *v4;
    *v4 = *a3;
    *a3 = v36;
    v37 = *v4;
    v38 = *v5;
    v39 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*v4 + 56))(*v4);
    v40 = *(double *)(md::LabelPoint::mercatorPoint(v39) + 8);
    v41 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v38 + 56))(v38);
    result = md::LabelPoint::mercatorPoint(v41);
    if (v40 == *(double *)(result + 8))
    {
      if (v37 >= v38)
        return result;
    }
    else
    {
      v46 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v37 + 56))(v37);
      v47 = *(double *)(md::LabelPoint::mercatorPoint(v46) + 8);
      v48 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v38 + 56))(v38);
      result = md::LabelPoint::mercatorPoint(v48);
      if (v47 >= *(double *)(result + 8))
        return result;
    }
    goto LABEL_17;
  }
  v17 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 56))(v6);
  v18 = *(double *)(md::LabelPoint::mercatorPoint(v17) + 8);
  v19 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 56))(v7);
  if (v18 >= *(double *)(md::LabelPoint::mercatorPoint(v19) + 8))
    goto LABEL_7;
LABEL_3:
  v11 = *a3;
  v12 = *v4;
  v13 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a3 + 56))(*a3);
  v14 = *(double *)(md::LabelPoint::mercatorPoint(v13) + 8);
  v15 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v12 + 56))(v12);
  result = md::LabelPoint::mercatorPoint(v15);
  if (v14 == *(double *)(result + 8))
  {
    if (v11 < v12)
    {
LABEL_5:
      v4 = a3;
      goto LABEL_17;
    }
  }
  else
  {
    v25 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 56))(v11);
    v26 = *(double *)(md::LabelPoint::mercatorPoint(v25) + 8);
    v27 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v12 + 56))(v12);
    result = md::LabelPoint::mercatorPoint(v27);
    if (v26 < *(double *)(result + 8))
      goto LABEL_5;
  }
  v28 = *v5;
  *v5 = *v4;
  *v4 = v28;
  v29 = *a3;
  v30 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a3 + 56))(*a3);
  v31 = *(double *)(md::LabelPoint::mercatorPoint(v30) + 8);
  v32 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v28 + 56))(v28);
  result = md::LabelPoint::mercatorPoint(v32);
  if (v31 == *(double *)(result + 8))
  {
    v5 = v4;
    v4 = a3;
    if (v29 >= v28)
      return result;
    goto LABEL_17;
  }
  v43 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v29 + 56))(v29);
  v44 = *(double *)(md::LabelPoint::mercatorPoint(v43) + 8);
  v45 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v28 + 56))(v28);
  result = md::LabelPoint::mercatorPoint(v45);
  v5 = v4;
  v4 = a3;
  if (v44 < *(double *)(result + 8))
  {
LABEL_17:
    v42 = *v5;
    *v5 = *v4;
    *v4 = v42;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  md::LabelPoint *v10;
  double v11;
  md::LabelPoint *v12;
  uint64_t result;
  md::LabelPoint *v14;
  double v15;
  md::LabelPoint *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  md::LabelPoint *v20;
  double v21;
  md::LabelPoint *v22;
  md::LabelPoint *v23;
  double v24;
  md::LabelPoint *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  md::LabelPoint *v29;
  double v30;
  md::LabelPoint *v31;
  unint64_t v32;
  md::LabelPoint *v33;
  double v34;
  md::LabelPoint *v35;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(a1, a2, a3);
  v8 = *a4;
  v9 = *a3;
  v10 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a4 + 56))(*a4);
  v11 = *(double *)(md::LabelPoint::mercatorPoint(v10) + 8);
  v12 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v9 + 56))(v9);
  result = md::LabelPoint::mercatorPoint(v12);
  if (v11 == *(double *)(result + 8))
  {
    if (v8 >= v9)
      return result;
  }
  else
  {
    v14 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v8 + 56))(v8);
    v15 = *(double *)(md::LabelPoint::mercatorPoint(v14) + 8);
    v16 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v9 + 56))(v9);
    result = md::LabelPoint::mercatorPoint(v16);
    if (v15 >= *(double *)(result + 8))
      return result;
  }
  v17 = *a3;
  *a3 = *a4;
  *a4 = v17;
  v18 = *a3;
  v19 = *a2;
  v20 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a3 + 56))(*a3);
  v21 = *(double *)(md::LabelPoint::mercatorPoint(v20) + 8);
  v22 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v19 + 56))(v19);
  result = md::LabelPoint::mercatorPoint(v22);
  if (v21 == *(double *)(result + 8))
  {
    if (v18 >= v19)
      return result;
  }
  else
  {
    v23 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v18 + 56))(v18);
    v24 = *(double *)(md::LabelPoint::mercatorPoint(v23) + 8);
    v25 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v19 + 56))(v19);
    result = md::LabelPoint::mercatorPoint(v25);
    if (v24 >= *(double *)(result + 8))
      return result;
  }
  v26 = *a2;
  *a2 = *a3;
  *a3 = v26;
  v27 = *a2;
  v28 = *a1;
  v29 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a2 + 56))(*a2);
  v30 = *(double *)(md::LabelPoint::mercatorPoint(v29) + 8);
  v31 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v28 + 56))(v28);
  result = md::LabelPoint::mercatorPoint(v31);
  if (v30 == *(double *)(result + 8))
  {
    if (v27 >= v28)
      return result;
  }
  else
  {
    v33 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v27 + 56))(v27);
    v34 = *(double *)(md::LabelPoint::mercatorPoint(v33) + 8);
    v35 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v28 + 56))(v28);
    result = md::LabelPoint::mercatorPoint(v35);
    if (v34 >= *(double *)(result + 8))
      return result;
  }
  v32 = *a1;
  *a1 = *a2;
  *a2 = v32;
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;
  md::LabelPoint *v12;
  double v13;
  md::LabelPoint *v14;
  uint64_t result;
  md::LabelPoint *v16;
  double v17;
  md::LabelPoint *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  md::LabelPoint *v22;
  double v23;
  md::LabelPoint *v24;
  md::LabelPoint *v25;
  double v26;
  md::LabelPoint *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  md::LabelPoint *v31;
  double v32;
  md::LabelPoint *v33;
  md::LabelPoint *v34;
  double v35;
  md::LabelPoint *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  md::LabelPoint *v40;
  double v41;
  md::LabelPoint *v42;
  unint64_t v43;
  md::LabelPoint *v44;
  double v45;
  md::LabelPoint *v46;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(a1, a2, a3, a4);
  v10 = *a5;
  v11 = *a4;
  v12 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a5 + 56))(*a5);
  v13 = *(double *)(md::LabelPoint::mercatorPoint(v12) + 8);
  v14 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 56))(v11);
  result = md::LabelPoint::mercatorPoint(v14);
  if (v13 == *(double *)(result + 8))
  {
    if (v10 >= v11)
      return result;
  }
  else
  {
    v16 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 56))(v10);
    v17 = *(double *)(md::LabelPoint::mercatorPoint(v16) + 8);
    v18 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 56))(v11);
    result = md::LabelPoint::mercatorPoint(v18);
    if (v17 >= *(double *)(result + 8))
      return result;
  }
  v19 = *a4;
  *a4 = *a5;
  *a5 = v19;
  v20 = *a4;
  v21 = *a3;
  v22 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a4 + 56))(*a4);
  v23 = *(double *)(md::LabelPoint::mercatorPoint(v22) + 8);
  v24 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 56))(v21);
  result = md::LabelPoint::mercatorPoint(v24);
  if (v23 == *(double *)(result + 8))
  {
    if (v20 >= v21)
      return result;
  }
  else
  {
    v25 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v20 + 56))(v20);
    v26 = *(double *)(md::LabelPoint::mercatorPoint(v25) + 8);
    v27 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 56))(v21);
    result = md::LabelPoint::mercatorPoint(v27);
    if (v26 >= *(double *)(result + 8))
      return result;
  }
  v28 = *a3;
  *a3 = *a4;
  *a4 = v28;
  v29 = *a3;
  v30 = *a2;
  v31 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a3 + 56))(*a3);
  v32 = *(double *)(md::LabelPoint::mercatorPoint(v31) + 8);
  v33 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v30 + 56))(v30);
  result = md::LabelPoint::mercatorPoint(v33);
  if (v32 == *(double *)(result + 8))
  {
    if (v29 >= v30)
      return result;
  }
  else
  {
    v34 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v29 + 56))(v29);
    v35 = *(double *)(md::LabelPoint::mercatorPoint(v34) + 8);
    v36 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v30 + 56))(v30);
    result = md::LabelPoint::mercatorPoint(v36);
    if (v35 >= *(double *)(result + 8))
      return result;
  }
  v37 = *a2;
  *a2 = *a3;
  *a3 = v37;
  v38 = *a2;
  v39 = *a1;
  v40 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a2 + 56))(*a2);
  v41 = *(double *)(md::LabelPoint::mercatorPoint(v40) + 8);
  v42 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v39 + 56))(v39);
  result = md::LabelPoint::mercatorPoint(v42);
  if (v41 == *(double *)(result + 8))
  {
    if (v38 >= v39)
      return result;
  }
  else
  {
    v44 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v38 + 56))(v38);
    v45 = *(double *)(md::LabelPoint::mercatorPoint(v44) + 8);
    v46 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v39 + 56))(v39);
    result = md::LabelPoint::mercatorPoint(v46);
    if (v45 >= *(double *)(result + 8))
      return result;
  }
  v43 = *a1;
  *a1 = *a2;
  *a2 = v43;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  md::LabelPoint *v8;
  double v9;
  md::LabelPoint *v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  md::LabelPoint *v18;
  double v19;
  md::LabelPoint *v20;
  md::LabelPoint *v21;
  double v22;
  md::LabelPoint *v23;
  unint64_t v24;
  uint64_t v25;
  md::LabelPoint *v26;
  double v27;
  md::LabelPoint *v28;
  unint64_t v29;
  md::LabelPoint *v30;
  double v31;
  md::LabelPoint *v32;
  md::LabelPoint *v33;
  double v34;
  md::LabelPoint *v35;
  unint64_t v36;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 56))(v6);
      v9 = *(double *)(md::LabelPoint::mercatorPoint(v8) + 8);
      v10 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 56))(v7);
      if (v9 == *(double *)(md::LabelPoint::mercatorPoint(v10) + 8))
      {
        if (v6 >= v7)
          return 1;
      }
      else
      {
        v33 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 56))(v6);
        v34 = *(double *)(md::LabelPoint::mercatorPoint(v33) + 8);
        v35 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 56))(v7);
        if (v34 >= *(double *)(md::LabelPoint::mercatorPoint(v35) + 8))
          return 1;
      }
      v36 = *a1;
      *a1 = *(a2 - 1);
      *(a2 - 1) = v36;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(a1, a1 + 1, a1 + 2);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (2)
  {
    v16 = *v12;
    v17 = *v11;
    v18 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*v12 + 56))(*v12);
    v19 = *(double *)(md::LabelPoint::mercatorPoint(v18) + 8);
    v20 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v17 + 56))(v17);
    if (v19 == *(double *)(md::LabelPoint::mercatorPoint(v20) + 8))
    {
      if (v16 >= v17)
        goto LABEL_9;
    }
    else
    {
      v21 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v16 + 56))(v16);
      v22 = *(double *)(md::LabelPoint::mercatorPoint(v21) + 8);
      v23 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v17 + 56))(v17);
      if (v22 >= *(double *)(md::LabelPoint::mercatorPoint(v23) + 8))
        goto LABEL_9;
    }
    v24 = *v12;
    *v12 = *v11;
    v15 = a1;
    if (v11 == a1)
      goto LABEL_8;
    v25 = v13;
    while (1)
    {
      v29 = *(unint64_t *)((char *)a1 + v25 + 8);
      v30 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v24 + 56))(v24);
      v31 = *(double *)(md::LabelPoint::mercatorPoint(v30) + 8);
      v32 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v29 + 56))(v29);
      if (v31 != *(double *)(md::LabelPoint::mercatorPoint(v32) + 8))
        break;
      if (v24 >= v29)
      {
        v15 = v11;
        goto LABEL_8;
      }
LABEL_17:
      --v11;
      *(unint64_t *)((char *)a1 + v25 + 16) = *(unint64_t *)((char *)a1 + v25 + 8);
      v25 -= 8;
      if (v25 == -16)
      {
        v15 = a1;
        goto LABEL_8;
      }
    }
    v26 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v24 + 56))(v24);
    v27 = *(double *)(md::LabelPoint::mercatorPoint(v26) + 8);
    v28 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v29 + 56))(v29);
    if (v27 < *(double *)(md::LabelPoint::mercatorPoint(v28) + 8))
      goto LABEL_17;
    v15 = (unint64_t *)((char *)a1 + v25 + 16);
LABEL_8:
    *v15 = v24;
    if (++v14 == 8)
      return v12 + 1 == a2;
LABEL_9:
    v11 = v12;
    v13 += 8;
    if (++v12 != a2)
      continue;
    return 1;
  }
}

double *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  md::LabelPoint *v8;
  double v9;
  md::LabelPoint *v10;
  unint64_t v11;
  unint64_t v12;
  md::LabelPoint *v13;
  double v14;
  md::LabelPoint *v15;
  double *result;
  md::LabelPoint *v17;
  double v18;
  md::LabelPoint *v19;
  unint64_t v20;
  unint64_t v21;
  md::LabelPoint *v22;
  double v23;
  md::LabelPoint *v24;
  md::LabelPoint *v25;
  double v26;
  md::LabelPoint *v27;
  unint64_t v28;
  unint64_t v29;
  md::LabelPoint *v30;
  double v31;
  md::LabelPoint *v32;
  md::LabelPoint *v33;
  double v34;
  md::LabelPoint *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  md::LabelPoint *v39;
  double v40;
  md::LabelPoint *v41;
  unint64_t v42;
  md::LabelPoint *v43;
  double v44;
  md::LabelPoint *v45;
  md::LabelPoint *v46;
  double v47;
  md::LabelPoint *v48;

  v4 = a2;
  v5 = a1;
  v6 = *a2;
  v7 = *a1;
  v8 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a2 + 56))(*a2);
  v9 = *(double *)md::LabelPoint::mercatorPoint(v8);
  v10 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 56))(v7);
  if (v9 == *(double *)md::LabelPoint::mercatorPoint(v10))
  {
    if (v6 < v7)
      goto LABEL_3;
LABEL_7:
    v20 = *a3;
    v21 = *v4;
    v22 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a3 + 56))(*a3);
    v23 = *(double *)md::LabelPoint::mercatorPoint(v22);
    v24 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 56))(v21);
    result = (double *)md::LabelPoint::mercatorPoint(v24);
    if (v23 == *result)
    {
      if (v20 >= v21)
        return result;
    }
    else
    {
      v33 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v20 + 56))(v20);
      v34 = *(double *)md::LabelPoint::mercatorPoint(v33);
      v35 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 56))(v21);
      result = (double *)md::LabelPoint::mercatorPoint(v35);
      if (v34 >= *result)
        return result;
    }
    v36 = *v4;
    *v4 = *a3;
    *a3 = v36;
    v37 = *v4;
    v38 = *v5;
    v39 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*v4 + 56))(*v4);
    v40 = *(double *)md::LabelPoint::mercatorPoint(v39);
    v41 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v38 + 56))(v38);
    result = (double *)md::LabelPoint::mercatorPoint(v41);
    if (v40 == *result)
    {
      if (v37 >= v38)
        return result;
    }
    else
    {
      v46 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v37 + 56))(v37);
      v47 = *(double *)md::LabelPoint::mercatorPoint(v46);
      v48 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v38 + 56))(v38);
      result = (double *)md::LabelPoint::mercatorPoint(v48);
      if (v47 >= *result)
        return result;
    }
    goto LABEL_17;
  }
  v17 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 56))(v6);
  v18 = *(double *)md::LabelPoint::mercatorPoint(v17);
  v19 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 56))(v7);
  if (v18 >= *(double *)md::LabelPoint::mercatorPoint(v19))
    goto LABEL_7;
LABEL_3:
  v11 = *a3;
  v12 = *v4;
  v13 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a3 + 56))(*a3);
  v14 = *(double *)md::LabelPoint::mercatorPoint(v13);
  v15 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v12 + 56))(v12);
  result = (double *)md::LabelPoint::mercatorPoint(v15);
  if (v14 == *result)
  {
    if (v11 < v12)
    {
LABEL_5:
      v4 = a3;
      goto LABEL_17;
    }
  }
  else
  {
    v25 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 56))(v11);
    v26 = *(double *)md::LabelPoint::mercatorPoint(v25);
    v27 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v12 + 56))(v12);
    result = (double *)md::LabelPoint::mercatorPoint(v27);
    if (v26 < *result)
      goto LABEL_5;
  }
  v28 = *v5;
  *v5 = *v4;
  *v4 = v28;
  v29 = *a3;
  v30 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a3 + 56))(*a3);
  v31 = *(double *)md::LabelPoint::mercatorPoint(v30);
  v32 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v28 + 56))(v28);
  result = (double *)md::LabelPoint::mercatorPoint(v32);
  if (v31 == *result)
  {
    v5 = v4;
    v4 = a3;
    if (v29 >= v28)
      return result;
    goto LABEL_17;
  }
  v43 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v29 + 56))(v29);
  v44 = *(double *)md::LabelPoint::mercatorPoint(v43);
  v45 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v28 + 56))(v28);
  result = (double *)md::LabelPoint::mercatorPoint(v45);
  v5 = v4;
  v4 = a3;
  if (v44 < *result)
  {
LABEL_17:
    v42 = *v5;
    *v5 = *v4;
    *v4 = v42;
  }
  return result;
}

double *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  md::LabelPoint *v10;
  double v11;
  md::LabelPoint *v12;
  double *result;
  md::LabelPoint *v14;
  double v15;
  md::LabelPoint *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  md::LabelPoint *v20;
  double v21;
  md::LabelPoint *v22;
  md::LabelPoint *v23;
  double v24;
  md::LabelPoint *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  md::LabelPoint *v29;
  double v30;
  md::LabelPoint *v31;
  unint64_t v32;
  md::LabelPoint *v33;
  double v34;
  md::LabelPoint *v35;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(a1, a2, a3);
  v8 = *a4;
  v9 = *a3;
  v10 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a4 + 56))(*a4);
  v11 = *(double *)md::LabelPoint::mercatorPoint(v10);
  v12 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v9 + 56))(v9);
  result = (double *)md::LabelPoint::mercatorPoint(v12);
  if (v11 == *result)
  {
    if (v8 >= v9)
      return result;
  }
  else
  {
    v14 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v8 + 56))(v8);
    v15 = *(double *)md::LabelPoint::mercatorPoint(v14);
    v16 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v9 + 56))(v9);
    result = (double *)md::LabelPoint::mercatorPoint(v16);
    if (v15 >= *result)
      return result;
  }
  v17 = *a3;
  *a3 = *a4;
  *a4 = v17;
  v18 = *a3;
  v19 = *a2;
  v20 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a3 + 56))(*a3);
  v21 = *(double *)md::LabelPoint::mercatorPoint(v20);
  v22 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v19 + 56))(v19);
  result = (double *)md::LabelPoint::mercatorPoint(v22);
  if (v21 == *result)
  {
    if (v18 >= v19)
      return result;
  }
  else
  {
    v23 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v18 + 56))(v18);
    v24 = *(double *)md::LabelPoint::mercatorPoint(v23);
    v25 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v19 + 56))(v19);
    result = (double *)md::LabelPoint::mercatorPoint(v25);
    if (v24 >= *result)
      return result;
  }
  v26 = *a2;
  *a2 = *a3;
  *a3 = v26;
  v27 = *a2;
  v28 = *a1;
  v29 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a2 + 56))(*a2);
  v30 = *(double *)md::LabelPoint::mercatorPoint(v29);
  v31 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v28 + 56))(v28);
  result = (double *)md::LabelPoint::mercatorPoint(v31);
  if (v30 == *result)
  {
    if (v27 >= v28)
      return result;
  }
  else
  {
    v33 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v27 + 56))(v27);
    v34 = *(double *)md::LabelPoint::mercatorPoint(v33);
    v35 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v28 + 56))(v28);
    result = (double *)md::LabelPoint::mercatorPoint(v35);
    if (v34 >= *result)
      return result;
  }
  v32 = *a1;
  *a1 = *a2;
  *a2 = v32;
  return result;
}

double *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;
  md::LabelPoint *v12;
  double v13;
  md::LabelPoint *v14;
  double *result;
  md::LabelPoint *v16;
  double v17;
  md::LabelPoint *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  md::LabelPoint *v22;
  double v23;
  md::LabelPoint *v24;
  md::LabelPoint *v25;
  double v26;
  md::LabelPoint *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  md::LabelPoint *v31;
  double v32;
  md::LabelPoint *v33;
  md::LabelPoint *v34;
  double v35;
  md::LabelPoint *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  md::LabelPoint *v40;
  double v41;
  md::LabelPoint *v42;
  unint64_t v43;
  md::LabelPoint *v44;
  double v45;
  md::LabelPoint *v46;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(a1, a2, a3, a4);
  v10 = *a5;
  v11 = *a4;
  v12 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a5 + 56))(*a5);
  v13 = *(double *)md::LabelPoint::mercatorPoint(v12);
  v14 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 56))(v11);
  result = (double *)md::LabelPoint::mercatorPoint(v14);
  if (v13 == *result)
  {
    if (v10 >= v11)
      return result;
  }
  else
  {
    v16 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 56))(v10);
    v17 = *(double *)md::LabelPoint::mercatorPoint(v16);
    v18 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 56))(v11);
    result = (double *)md::LabelPoint::mercatorPoint(v18);
    if (v17 >= *result)
      return result;
  }
  v19 = *a4;
  *a4 = *a5;
  *a5 = v19;
  v20 = *a4;
  v21 = *a3;
  v22 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a4 + 56))(*a4);
  v23 = *(double *)md::LabelPoint::mercatorPoint(v22);
  v24 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 56))(v21);
  result = (double *)md::LabelPoint::mercatorPoint(v24);
  if (v23 == *result)
  {
    if (v20 >= v21)
      return result;
  }
  else
  {
    v25 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v20 + 56))(v20);
    v26 = *(double *)md::LabelPoint::mercatorPoint(v25);
    v27 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 56))(v21);
    result = (double *)md::LabelPoint::mercatorPoint(v27);
    if (v26 >= *result)
      return result;
  }
  v28 = *a3;
  *a3 = *a4;
  *a4 = v28;
  v29 = *a3;
  v30 = *a2;
  v31 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a3 + 56))(*a3);
  v32 = *(double *)md::LabelPoint::mercatorPoint(v31);
  v33 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v30 + 56))(v30);
  result = (double *)md::LabelPoint::mercatorPoint(v33);
  if (v32 == *result)
  {
    if (v29 >= v30)
      return result;
  }
  else
  {
    v34 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v29 + 56))(v29);
    v35 = *(double *)md::LabelPoint::mercatorPoint(v34);
    v36 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v30 + 56))(v30);
    result = (double *)md::LabelPoint::mercatorPoint(v36);
    if (v35 >= *result)
      return result;
  }
  v37 = *a2;
  *a2 = *a3;
  *a3 = v37;
  v38 = *a2;
  v39 = *a1;
  v40 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a2 + 56))(*a2);
  v41 = *(double *)md::LabelPoint::mercatorPoint(v40);
  v42 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v39 + 56))(v39);
  result = (double *)md::LabelPoint::mercatorPoint(v42);
  if (v41 == *result)
  {
    if (v38 >= v39)
      return result;
  }
  else
  {
    v44 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v38 + 56))(v38);
    v45 = *(double *)md::LabelPoint::mercatorPoint(v44);
    v46 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v39 + 56))(v39);
    result = (double *)md::LabelPoint::mercatorPoint(v46);
    if (v45 >= *result)
      return result;
  }
  v43 = *a1;
  *a1 = *a2;
  *a2 = v43;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  md::LabelPoint *v8;
  double v9;
  md::LabelPoint *v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  md::LabelPoint *v18;
  double v19;
  md::LabelPoint *v20;
  md::LabelPoint *v21;
  double v22;
  md::LabelPoint *v23;
  unint64_t v24;
  uint64_t v25;
  md::LabelPoint *v26;
  double v27;
  md::LabelPoint *v28;
  unint64_t v29;
  md::LabelPoint *v30;
  double v31;
  md::LabelPoint *v32;
  md::LabelPoint *v33;
  double v34;
  md::LabelPoint *v35;
  unint64_t v36;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 56))(v6);
      v9 = *(double *)md::LabelPoint::mercatorPoint(v8);
      v10 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 56))(v7);
      if (v9 == *(double *)md::LabelPoint::mercatorPoint(v10))
      {
        if (v6 >= v7)
          return 1;
      }
      else
      {
        v33 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 56))(v6);
        v34 = *(double *)md::LabelPoint::mercatorPoint(v33);
        v35 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 56))(v7);
        if (v34 >= *(double *)md::LabelPoint::mercatorPoint(v35))
          return 1;
      }
      v36 = *a1;
      *a1 = *(a2 - 1);
      *(a2 - 1) = v36;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(a1, a1 + 1, a1 + 2);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (2)
  {
    v16 = *v12;
    v17 = *v11;
    v18 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*v12 + 56))(*v12);
    v19 = *(double *)md::LabelPoint::mercatorPoint(v18);
    v20 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v17 + 56))(v17);
    if (v19 == *(double *)md::LabelPoint::mercatorPoint(v20))
    {
      if (v16 >= v17)
        goto LABEL_9;
    }
    else
    {
      v21 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v16 + 56))(v16);
      v22 = *(double *)md::LabelPoint::mercatorPoint(v21);
      v23 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v17 + 56))(v17);
      if (v22 >= *(double *)md::LabelPoint::mercatorPoint(v23))
        goto LABEL_9;
    }
    v24 = *v12;
    *v12 = *v11;
    v15 = a1;
    if (v11 == a1)
      goto LABEL_8;
    v25 = v13;
    while (1)
    {
      v29 = *(unint64_t *)((char *)a1 + v25 + 8);
      v30 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v24 + 56))(v24);
      v31 = *(double *)md::LabelPoint::mercatorPoint(v30);
      v32 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v29 + 56))(v29);
      if (v31 != *(double *)md::LabelPoint::mercatorPoint(v32))
        break;
      if (v24 >= v29)
      {
        v15 = v11;
        goto LABEL_8;
      }
LABEL_17:
      --v11;
      *(unint64_t *)((char *)a1 + v25 + 16) = *(unint64_t *)((char *)a1 + v25 + 8);
      v25 -= 8;
      if (v25 == -16)
      {
        v15 = a1;
        goto LABEL_8;
      }
    }
    v26 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v24 + 56))(v24);
    v27 = *(double *)md::LabelPoint::mercatorPoint(v26);
    v28 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v29 + 56))(v29);
    if (v27 < *(double *)md::LabelPoint::mercatorPoint(v28))
      goto LABEL_17;
    v15 = (unint64_t *)((char *)a1 + v25 + 16);
LABEL_8:
    *v15 = v24;
    if (++v14 == 8)
      return v12 + 1 == a2;
LABEL_9:
    v11 = v12;
    v13 += 8;
    if (++v12 != a2)
      continue;
    return 1;
  }
}

void std::__function::__func<md::LineLabelPlacer::createPlacements(unsigned char,md::RoadMetricsEntry const*,md::LabelManager *,BOOL,BOOL)::$_0,std::allocator<md::LineLabelPlacer::createPlacements(unsigned char,md::RoadMetricsEntry const*,md::LabelManager *,BOOL,BOOL)::$_0>,BOOL ()(md::LabelLineResolvedPosition const&,double)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LineLabelPlacer::createPlacements(unsigned char,md::RoadMetricsEntry const*,md::LabelManager *,BOOL,BOOL)::$_0,std::allocator<md::LineLabelPlacer::createPlacements(unsigned char,md::RoadMetricsEntry const*,md::LabelManager *,BOOL,BOOL)::$_0>,BOOL ()(md::LabelLineResolvedPosition const&,double)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4279A38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LineLabelPlacer::createPlacements(unsigned char,md::RoadMetricsEntry const*,md::LabelManager *,BOOL,BOOL)::$_0,std::allocator<md::LineLabelPlacer::createPlacements(unsigned char,md::RoadMetricsEntry const*,md::LabelManager *,BOOL,BOOL)::$_0>,BOOL ()(md::LabelLineResolvedPosition const&,double)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4279A38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LineLabelPlacer::createPlacements(unsigned char,md::RoadMetricsEntry const*,md::LabelManager *,BOOL,BOOL)::$_0,std::allocator<md::LineLabelPlacer::createPlacements(unsigned char,md::RoadMetricsEntry const*,md::LabelManager *,BOOL,BOOL)::$_0>,BOOL ()(md::LabelLineResolvedPosition const&,double)>::operator()(uint64_t a1, uint64_t a2, double *a3)
{
  double v4;
  float64x2_t *v5;
  float64x2_t *v6;
  uint64_t v7;
  float64x2_t *v8;
  float64x2_t *v9;
  float64x2_t *v10;
  float64x2_t v11;
  unint64_t v12;
  _OWORD *f64;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  float64x2_t *v20;

  if (!*(_BYTE *)(a1 + 16))
    return 0;
  v4 = *a3;
  v5 = (float64x2_t *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(a2 + 104));
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(float64x2_t **)v7;
  v9 = *(float64x2_t **)(v7 + 8);
  if (*(float64x2_t **)v7 == v9)
  {
LABEL_6:
    v12 = *(_QWORD *)(v7 + 16);
    if ((unint64_t)v9 >= v12)
    {
      v15 = v9 - v8;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        abort();
      v17 = v12 - (_QWORD)v8;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = (char *)operator new(16 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = (float64x2_t *)&v19[16 * v15];
      *v20 = *v6;
      f64 = (_OWORD *)v20[1].f64;
      if (v8 != v9)
      {
        do
        {
          v20[-1] = v9[-1];
          --v20;
          --v9;
        }
        while (v9 != v8);
        v8 = *(float64x2_t **)v7;
      }
      *(_QWORD *)v7 = v20;
      *(_QWORD *)(v7 + 8) = f64;
      *(_QWORD *)(v7 + 16) = &v19[16 * v18];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v9 = *v5;
      f64 = (_OWORD *)v9[1].f64;
    }
    result = 0;
    *(_QWORD *)(v7 + 8) = f64;
  }
  else
  {
    v10 = *(float64x2_t **)v7;
    while (1)
    {
      v11 = vsubq_f64(*v5, *v10);
      if (vaddvq_f64(vmulq_f64(v11, v11)) < v4)
        return 1;
      if (++v10 == v9)
        goto LABEL_6;
    }
  }
  return result;
}

void ggl::HillshadeFillMask::CompressedMeshPipelineSetup::~CompressedMeshPipelineSetup(ggl::HillshadeFillMask::CompressedMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::HillshadeFillMask::CompressedMeshPipelineSetup::constantDataIsEnabled(ggl::HillshadeFillMask::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::HillshadeFillMask::CompressedMeshPipelineSetup::textureIsEnabled(ggl::HillshadeFillMask::CompressedMeshPipelineSetup *this)
{
  return 0;
}

uint64_t md::MuninRoadGraphZData::MuninRoadGraphZData(uint64_t a1, _QWORD *a2, uint64_t **a3)
{
  __int128 v3;
  uint64_t v4;
  float64x2_t v5;
  float64x2_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  double v12;
  int64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  _QWORD *v29;
  _QWORD *v30;
  _BYTE *v31;
  _BYTE *v32;
  int64_t v33;
  char *v34;
  _BYTE *v35;
  _BYTE *v36;
  int64_t v37;
  char *v38;
  char *v39;
  char v40;
  uint64_t v41;
  unint64_t **v42;
  unint64_t *v43;
  unint64_t *v44;
  unint64_t v45;
  double v47;
  double v48;
  char *v49;
  char *v50;
  unint64_t v51;
  float v52;
  uint64_t v53;
  _QWORD *v54;
  float v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  double v59;
  long double v60;
  long double v61;
  long double v62;
  double v63;
  long double v64;
  double v65;
  long double v66;
  long double v67;
  double v68;
  double v69;
  double v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  double v78;
  double v79;
  uint64_t v80;
  double v81;
  double v82;
  unint64_t v83;
  double v84;
  double v85;
  double v86;
  double v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  double v91;
  double *v92;
  _BYTE *v93;
  _BYTE *v94;
  int64_t v95;
  uint64_t (**v96)();
  double *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  float64x2_t *v102;
  double v103;
  uint64_t v104;
  double v105;
  double v106;
  _BYTE *v107;
  _BYTE *v108;
  int64_t v109;
  int64_t *v110;
  int64_t *v111;
  int64_t *v112;
  int64_t *v113;
  int64_t *v114;
  int64_t v115;
  _QWORD *v116;
  double v117;
  int64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  _QWORD *v122;
  double *v123;
  double *v124;
  _QWORD *v125;
  BOOL v126;
  char *v127;
  _QWORD *v128;
  double *v129;
  double v130;
  char *v131;
  _QWORD *v132;
  double v133;
  double v134;
  double *v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  double v150;
  double v151;
  int v152;
  unint64_t v153;
  double *v154;
  double v155;
  unint64_t v156;
  double v157;
  double v158;
  double *v159;
  uint64_t v160;
  double v161;
  double v162;
  double v163;
  long double v164;
  long double v165;
  double v166;
  long double v167;
  __double2 v168;
  double v169;
  double v170;
  double v171;
  __double2 v172;
  double v173;
  double v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  int64x2_t *v181;
  int64x2_t *v182;
  unint64_t v183;
  int v184;
  unint64_t v185;
  uint64_t v186;
  int64x2_t *v187;
  float64x2_t *v188;
  float64x2_t v189;
  uint64_t v190;
  int64x2_t v191;
  int64x2_t *v192;
  uint64_t v193;
  char *v194;
  int64_t v195;
  int64x2_t *v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  double *v206;
  double v207;
  char *v208;
  char *v209;
  unint64_t v210;
  _QWORD *v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  size_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  unint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  __int128 *v228;
  uint64_t v229;
  __int128 v230;
  uint64_t v231;
  char *v232;
  char *v233;
  char *v234;
  unint64_t v235;
  int64_t v236;
  double *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  float64x2_t *v243;
  unint64_t v244;
  double *v245;
  uint64_t v246;
  double v247;
  unint64_t v248;
  double v249;
  unint64_t v250;
  uint64_t v251;
  double *v252;
  uint64_t *v253;
  uint64_t v254;
  double v255;
  double v256;
  unint64_t v257;
  double *v258;
  double *v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  char *v264;
  double *v265;
  unint64_t v266;
  uint64_t v267;
  _OWORD *v268;
  double *v269;
  uint64_t v270;
  __int128 v271;
  uint64_t v272;
  unint64_t v273;
  double *v274;
  double *v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  char *v280;
  double *v281;
  unint64_t v282;
  uint64_t v283;
  _OWORD *v284;
  double *v285;
  uint64_t v286;
  __int128 v287;
  uint64_t v288;
  double *v289;
  double v290;
  uint64_t *v291;
  _QWORD *v292;
  _QWORD *v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  double v298;
  long double v299;
  long double v300;
  long double v301;
  double v302;
  long double v303;
  double v304;
  long double v305;
  long double v306;
  long double v307;
  double v308;
  double v309;
  double v310;
  double v311;
  long double v312;
  long double v313;
  double v314;
  long double v315;
  double v316;
  __double2 v317;
  double v318;
  double v319;
  __double2 v320;
  double *v321;
  uint64_t *v322;
  uint64_t *v323;
  uint64_t v324;
  unint64_t v325;
  double *v326;
  char *v327;
  char *v328;
  unint64_t v329;
  double *v330;
  double *v331;
  uint64_t *v332;
  double *v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  unint64_t v337;
  _BYTE *v338;
  double *v339;
  unint64_t v340;
  uint64_t v341;
  _OWORD *v342;
  double *v343;
  uint64_t v344;
  __int128 v345;
  uint64_t v346;
  char *v347;
  unint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  _BYTE *v355;
  _QWORD *v356;
  _QWORD *v357;
  unint64_t v358;
  uint64_t v359;
  _OWORD *v360;
  char *v361;
  uint64_t v362;
  __int128 v363;
  uint64_t v364;
  uint64_t v365;
  BOOL v366;
  double *v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  _BYTE *v372;
  double *v373;
  unint64_t v374;
  double *v375;
  uint64_t v376;
  double *v377;
  uint64_t v378;
  uint64_t (***v379)();
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  float64x2_t *v384;
  unint64_t v385;
  double v386;
  double *v387;
  uint64_t v388;
  double v389;
  unint64_t v390;
  double v391;
  unint64_t v392;
  uint64_t v393;
  double *v394;
  uint64_t *v395;
  uint64_t v396;
  double v397;
  double v398;
  double v399;
  double v400;
  int8x8_t v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  uint8x8_t v405;
  unint64_t v406;
  float *v407;
  float *v408;
  char v409;
  _QWORD *v410;
  _QWORD *v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  double *v415;
  void *v416;
  void *v417;
  void *v418;
  uint64_t v419;
  _OWORD *v420;
  double *v421;
  uint64_t v422;
  __int128 v423;
  _QWORD *i;
  unint64_t prime;
  int8x8_t v426;
  unint64_t v427;
  uint8x8_t v428;
  uint64_t v429;
  _QWORD *v430;
  int64_t *v431;
  unint64_t v432;
  uint64_t v433;
  unint64_t v434;
  unint64_t v435;
  unint64_t v436;
  unint64_t v437;
  uint8x8_t v438;
  int64_t *v439;
  unint64_t v440;
  uint64_t v441;
  float v442;
  float v443;
  _BOOL8 v444;
  unint64_t v445;
  unint64_t v446;
  size_t v447;
  unint64_t v448;
  uint8x8_t v449;
  uint64_t v450;
  uint64_t v451;
  int64_t *v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t *v455;
  char *v456;
  unint64_t v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  uint8x8_t v462;
  uint64_t **v463;
  uint64_t *v464;
  uint64_t *v465;
  unint64_t v466;
  uint64_t v467;
  char *v468;
  float v469;
  float v470;
  _BOOL8 v471;
  unint64_t v472;
  unint64_t v473;
  size_t v474;
  void *v475;
  _QWORD *v476;
  uint64_t v477;
  _QWORD *v478;
  size_t v479;
  size_t v480;
  size_t v481;
  _QWORD *j;
  size_t v483;
  uint64_t v484;
  unint64_t v485;
  uint8x8_t v486;
  uint64_t v487;
  _QWORD *v488;
  uint64_t v489;
  size_t v490;
  _QWORD *v491;
  uint64_t *v492;
  unint64_t v493;
  uint64_t v494;
  unint64_t v495;
  unint64_t v496;
  float v497;
  BOOL v499;
  unint64_t v500;
  unint64_t v501;
  unint64_t v502;
  unint64_t v503;
  uint64_t v504;
  unint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  _QWORD *v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  _QWORD *v515;
  uint64_t v516;
  _QWORD *v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  char *v523;
  uint64_t v524;
  char *v525;
  char *v526;
  char *v527;
  unint64_t v528;
  double v529;
  unint64_t v530;
  double v531;
  uint64_t v532;
  double v533;
  double v534;
  double v535;
  double v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t *v539;
  float64x2_t *v540;
  uint64_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  unint64_t v550;
  uint64_t v551;
  double *v552;
  double *v553;
  double v554;
  double v555;
  double v556;
  unint64_t v557;
  double *v558;
  double *v559;
  uint64_t v560;
  unint64_t v561;
  uint64_t v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t v565;
  unint64_t v566;
  char *v567;
  double *v568;
  char *v569;
  char *v570;
  uint64_t v571;
  double *v572;
  uint64_t v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  unint64_t v580;
  uint64_t v581;
  float64x2_t *v582;
  float64x2_t *v583;
  float64x2_t v584;
  unint64_t v585;
  unint64_t v586;
  uint64_t v587;
  double *v588;
  double *v589;
  double v590;
  double v591;
  double v592;
  _QWORD *v593;
  uint64_t *v594;
  _QWORD *v595;
  char *v596;
  char *v597;
  char *v598;
  char *v599;
  uint64_t v600;
  uint64_t v601;
  int64_t v602;
  unint64_t v603;
  int64_t v604;
  _BYTE *v605;
  uint64_t v606;
  char *v607;
  uint64_t v608;
  uint64_t v609;
  int64_t v610;
  unint64_t v611;
  int64_t v612;
  _BYTE *v613;
  uint64_t v614;
  unint64_t v615;
  char *v616;
  uint64_t v617;
  unint64_t v618;
  _OWORD *v619;
  __int128 *v620;
  uint64_t v621;
  __int128 v622;
  uint64_t v623;
  _OWORD *v624;
  __int128 *v625;
  uint64_t v626;
  __int128 v627;
  uint64_t v628;
  _BYTE *v629;
  _BYTE *v630;
  int64_t v631;
  unint64_t v632;
  int64_t v633;
  _BYTE *v634;
  uint64_t v635;
  unint64_t v636;
  uint64_t v637;
  uint64_t v638;
  _OWORD *v639;
  __int128 *v640;
  uint64_t v641;
  __int128 v642;
  uint64_t v643;
  _BYTE *v644;
  _BYTE *v645;
  int64_t v646;
  unint64_t v647;
  int64_t v648;
  _BYTE *v649;
  uint64_t v650;
  unint64_t v651;
  uint64_t v652;
  uint64_t v653;
  _OWORD *v654;
  __int128 *v655;
  uint64_t v656;
  __int128 v657;
  uint64_t v658;
  _QWORD *v659;
  _QWORD *v660;
  uint64_t v661;
  uint64_t k;
  _QWORD *v663;
  _QWORD *v664;
  uint64_t v665;
  uint64_t m;
  _QWORD *v667;
  _QWORD *v668;
  uint64_t v669;
  uint64_t n;
  _QWORD *v671;
  uint64_t v672;
  uint64_t ii;
  _QWORD *v674;
  _QWORD *v675;
  uint64_t v676;
  uint64_t jj;
  _QWORD *v679;
  void *v680;
  void *v681;
  void *v682;
  void *v683;
  char *v684;
  int64_t *v685;
  uint64_t v686;
  uint64_t v687;
  float *v688;
  _QWORD *v689;
  uint64_t v691;
  uint64_t *v692;
  uint64_t v693;
  uint64_t *v694;
  _QWORD *v695;
  _QWORD *v696;
  _QWORD *v697;
  void *__p;
  float *v699;
  float64x2_t **v700;
  double **v701;
  char **v702;
  char *v703;
  double v704;
  size_t v705;
  unint64_t v707;
  char v708;
  _QWORD *v709;
  uint64_t *v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  unint64_t v715;
  uint64_t v716;
  uint64_t *v717;
  unint64_t v718;
  unint64_t v719;
  unint64_t v720;
  unint64_t v721;
  uint64_t v722;
  uint64_t v723;
  __int128 v724;
  float *v725;
  int64_t v726;
  int64_t v727;
  int64_t v728;
  unint64_t v729;
  int64_t v730;
  int64_t v731;
  int64_t v732;
  double v733[3];
  _QWORD v734[3];
  uint64_t (**v735)();
  uint64_t (**v736)();
  uint64_t (**v737)();
  uint64_t (***v738)();
  char *v739;
  char *v740;
  void *v741;
  void *v742;
  char *v743;
  void *v744;
  double *v745;
  uint64_t v746;
  double v747;
  float64x2_t v748;
  float64x2_t v749;
  double v750;
  double v751;
  double v752[3];
  double *v753;
  uint64_t v754;

  v4 = a1;
  v754 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  v696 = (_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  v694 = (uint64_t *)(a1 + 80);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  v693 = a1 + 120;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v700 = (float64x2_t **)(a1 + 176);
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 224) = 0u;
  v702 = (char **)(a1 + 224);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 1065353216;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  v699 = (float *)(a1 + 312);
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  v692 = (uint64_t *)(a1 + 392);
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  v5 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(float64x2_t *)(a1 + 8) = v5;
  v6 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(float64x2_t *)(a1 + 24) = v6;
  v7 = *a3;
  v8 = a3[1];
  if (*a3 != v8)
  {
    v9 = *a3;
    do
    {
      v10 = *v9;
      v9 += 2;
      v11 = 1 << *(_BYTE *)(v10 + 297);
      v12 = 1.0 / (double)v11;
      v13.i64[0] = vdup_lane_s32(*(int32x2_t *)(v10 + 300), 1).i32[0];
      v13.i64[1] = (int)(v11 + ~*(_QWORD *)(v10 + 300));
      v14 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v12, 0);
      v15 = vmulq_n_f64(vcvtq_f64_s64(v13), v12);
      v5 = vminnmq_f64(v15, v5);
      v6 = vmaxnmq_f64(v6, vaddq_f64(v15, v14));
    }
    while (v9 != v8);
    *(float64x2_t *)(a1 + 8) = v5;
    *(float64x2_t *)(a1 + 24) = v6;
    v16 = -1.79769313e308;
    v17 = 1.79769313e308;
    while (1)
    {
      v18 = *(_QWORD *)(*v7 + 168);
      v19 = *(_QWORD *)(*v7 + 176);
      if (v18 != v19)
      {
        v20 = v19 - v18 - 1864;
        if (v20 > 0x747)
        {
          v21 = v20 / 0x748 + 1;
          v22 = *(_QWORD *)(*v7 + 168);
          v23 = v21 & 0x7FFFFFFFFFFFFELL;
          v24 = v17;
          v25 = v16;
          do
          {
            v26 = *(double *)(v22 + 72);
            v27 = *(double *)(v22 + 1936);
            v17 = fmin(v26, v17);
            v24 = fmin(v27, v24);
            v16 = fmax(v16, v26);
            v25 = fmax(v25, v27);
            v22 += 3728;
            v23 -= 2;
          }
          while (v23);
          v16 = fmax(v16, v25);
          v17 = fmin(v17, v24);
          if (v21 == (v21 & 0x7FFFFFFFFFFFFELL))
            goto LABEL_5;
          v18 += 1864 * (v21 & 0x7FFFFFFFFFFFFELL);
        }
        do
        {
          v28 = *(double *)(v18 + 72);
          v17 = fmin(v28, v17);
          v16 = fmax(v16, v28);
          v18 += 1864;
        }
        while (v18 != v19);
      }
LABEL_5:
      v7 += 2;
      if (v7 == v8)
        goto LABEL_15;
    }
  }
  v17 = 1.79769313e308;
  v16 = -1.79769313e308;
LABEL_15:
  *(double *)(v4 + 160) = v17;
  *(double *)(v4 + 168) = v16;
  *(_QWORD *)(v4 + 184) = 0;
  *(_QWORD *)(v4 + 232) = 0;
  *(_QWORD *)(v4 + 256) = 0;
  v29 = (_QWORD *)a2[10];
  v695 = (_QWORD *)a2[11];
  if (v29 != v695)
  {
    v689 = (_QWORD *)(v4 + 352);
    v687 = v4 + 200;
    v701 = (double **)(v4 + 248);
    v725 = (float *)(v4 + 272);
    v688 = (float *)(v4 + 432);
    v711 = v4;
    do
    {
      v30 = (_QWORD *)*v29;
      v740 = 0;
      v741 = 0;
      v739 = 0;
      v31 = (_BYTE *)v30[97];
      v32 = (_BYTE *)v30[98];
      v33 = v32 - v31;
      if (v32 == v31)
      {
        v34 = 0;
      }
      else
      {
        if (v33 < 0)
          goto LABEL_833;
        v34 = (char *)operator new(v32 - v31);
        v739 = v34;
        v741 = &v34[8 * (v33 >> 3)];
        memcpy(v34, v31, v33);
        v740 = &v34[8 * (v33 >> 3)];
      }
      v742 = 0;
      v743 = 0;
      v744 = 0;
      v35 = (_BYTE *)v30[100];
      v36 = (_BYTE *)v30[101];
      v37 = v36 - v35;
      v703 = v34;
      v697 = v29;
      if (v36 == v35)
      {
        __p = 0;
      }
      else
      {
        if (v37 < 0)
          abort();
        v38 = (char *)operator new(v36 - v35);
        v39 = &v38[8 * (v37 >> 3)];
        v742 = v38;
        v744 = v39;
        __p = v38;
        memcpy(v38, v35, v37);
        v743 = v39;
      }
      v40 = 0;
      v41 = 0;
      while (2)
      {
        v708 = v40;
        v42 = (unint64_t **)&(&v739)[3 * v41];
        v44 = *v42;
        v43 = v42[1];
        while (v44 != v43)
        {
          v45 = *v44;
          v734[0] = v45;
          if (*(_BYTE *)(v45 + 68))
          {
            if (*(_BYTE *)(v45 + 68) == 2 && *(_BYTE *)(v45 + 69) == 1)
            {
              *((_BYTE *)std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v725, v45, v734)+ 24) = 2;
              ++v44;
            }
            else
            {
              v47 = *(double *)(v45 + 16);
              v48 = 10.0;
              if (*(_DWORD *)(v45 + 64))
                goto LABEL_48;
              v49 = *(char **)(v45 + 40);
              v50 = *(char **)(v45 + 48);
              if (v49 == v50)
              {
                v48 = 0.0;
                goto LABEL_48;
              }
              v51 = v50 - v49 - 8;
              if (v51 >= 8)
              {
                v53 = (v51 >> 3) + 1;
                v54 = v49 + 8;
                v55 = 0.0;
                v56 = v53 & 0x3FFFFFFFFFFFFFFELL;
                v57 = 0.0;
                do
                {
                  v55 = fmaxf(v55, *(float *)(*(v54 - 1) + 8));
                  v57 = fmaxf(v57, *(float *)(*v54 + 8));
                  v54 += 2;
                  v56 -= 2;
                }
                while (v56);
                v52 = fmaxf(v55, v57);
                if (v53 == (v53 & 0x3FFFFFFFFFFFFFFELL))
                  goto LABEL_47;
                v49 += 8 * (v53 & 0x3FFFFFFFFFFFFFFELL);
              }
              else
              {
                v52 = 0.0;
              }
              do
              {
                v58 = *(_QWORD *)v49;
                v49 += 8;
                v52 = fmaxf(v52, *(float *)(v58 + 8));
              }
              while (v49 != v50);
LABEL_47:
              v48 = v52;
LABEL_48:
              v59 = *(double *)(v45 + 24);
              v60 = exp(v59 * 6.28318531 + -3.14159265);
              v61 = atan(v60) * 114.591559 + -90.0;
              v62 = tan(v61 * 0.00872664626 + 0.789761487);
              v63 = log(v62);
              v64 = tan(v61 * 0.00872664626 + 0.78103484);
              v65 = fabs((v63 - log(v64)) * 0.159154943);
              v66 = cos(v61 * 0.034906585) * -559.82 + 111132.92;
              v67 = v66 + cos(v61 * 0.0698131701) * 1.175;
              v68 = v65 * v48 / (v67 + cos(v61 * 0.104719755) * -0.0023);
              if (*(double *)(v4 + 24) <= v47 - v68
                || (v69 = v68 + v68, *(double *)(v4 + 8) >= v68 + v68 + v47 - v68)
                || (v70 = v59 - v68, *(double *)(v4 + 32) <= v70)
                || *(double *)(v4 + 16) >= v69 + v70)
              {
                *((_BYTE *)std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v725, v45, v734)+ 24) = 3;
                ++v44;
              }
              else
              {
                *(_QWORD *)(v4 + 232) = *(_QWORD *)(v4 + 224);
                *(_QWORD *)(v4 + 256) = *(_QWORD *)(v4 + 248);
                v71 = *a3;
                v72 = a3[1];
                if (*a3 == v72)
                  goto LABEL_60;
                do
                {
                  v73 = *v71;
                  v71 += 2;
                  md::mun::MuninMetadata::neighborsWithinRadius(v73, (double *)(v45 + 16), (uint64_t)v702, (uint64_t)v701, 15.0);
                }
                while (v71 != v72);
                v74 = *(_QWORD *)(v4 + 224);
                v75 = *(_QWORD *)(v4 + 232) - v74;
                v34 = v703;
                if (!v75)
                {
LABEL_60:
                  *((_BYTE *)std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v725, v45, v734)+ 24) = 4;
                  ++v44;
                }
                else
                {
                  v76 = v75 >> 3;
                  if (v76 <= 1)
                    v76 = 1;
                  if (v76 > 1)
                  {
                    v77 = v76 & 0xFFFFFFFFFFFFFFFELL;
                    v80 = v74 + 8;
                    v81 = 1.79769313e308;
                    v82 = -1.79769313e308;
                    v83 = v76 & 0xFFFFFFFFFFFFFFFELL;
                    v84 = -1.79769313e308;
                    v85 = 1.79769313e308;
                    do
                    {
                      v86 = *(double *)(*(_QWORD *)(v80 - 8) + 72);
                      v87 = *(double *)(*(_QWORD *)v80 + 72);
                      v81 = fmin(v86, v81);
                      v85 = fmin(v87, v85);
                      v82 = fmax(v82, v86);
                      v84 = fmax(v84, v87);
                      v80 += 16;
                      v83 -= 2;
                    }
                    while (v83);
                    v78 = fmin(v81, v85);
                    v79 = fmax(v82, v84);
                    if (v76 == v77)
                      goto LABEL_66;
                  }
                  else
                  {
                    v77 = 0;
                    v78 = 1.79769313e308;
                    v79 = -1.79769313e308;
                  }
                  v88 = v76 - v77;
                  v89 = (uint64_t *)(v74 + 8 * v77);
                  do
                  {
                    v90 = *v89++;
                    v91 = *(double *)(v90 + 72);
                    v78 = fmin(v91, v78);
                    v79 = fmax(v79, v91);
                    --v88;
                  }
                  while (v88);
LABEL_66:
                  if (vabdd_f64(v79, v78) <= 6.0)
                  {
                    v92 = (double *)std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v699, v45, v734);
                    *(_QWORD *)(v4 + 184) = *(_QWORD *)(v4 + 176);
                    v736 = 0;
                    v737 = 0;
                    v735 = 0;
                    v94 = *(_BYTE **)(v4 + 248);
                    v93 = *(_BYTE **)(v4 + 256);
                    v95 = v93 - v94;
                    if (v93 == v94)
                    {
                      v96 = 0;
                    }
                    else
                    {
                      if (v95 < 0)
                        abort();
                      v96 = (uint64_t (**)())operator new(v93 - v94);
                      v735 = v96;
                      v737 = &v96[v95 >> 3];
                      memcpy(v96, v94, v95);
                      v736 = &v96[v95 >> 3];
                    }
                    *(_QWORD *)&v752[0] = &off_1E42D0280;
                    v753 = v752;
                    md::MuninLabelingUtils::computeWeightsForWeightedAverage(&v735, (uint64_t)v752, v700);
                    v97 = v753;
                    if (v753 == v752)
                    {
                      v97 = v752;
                      v98 = 4;
                    }
                    else
                    {
                      if (!v753)
                        goto LABEL_77;
                      v98 = 5;
                    }
                    (*(void (**)(void))(*(_QWORD *)v97 + 8 * v98))();
LABEL_77:
                    if (v96)
                    {
                      v736 = v96;
                      operator delete(v96);
                    }
                    v99 = *(uint64_t **)(v4 + 224);
                    v100 = *(_QWORD *)(v4 + 232) - (_QWORD)v99;
                    if (v100)
                    {
                      v101 = v100 >> 3;
                      v102 = *v700;
                      v103 = v92[3];
                      if (v101 <= 1)
                        v101 = 1;
                      do
                      {
                        v104 = *v99++;
                        v105 = *(double *)(v104 + 72);
                        v106 = v102->f64[0];
                        v102 = (float64x2_t *)((char *)v102 + 8);
                        v103 = v103 + v106 * v105;
                        v92[3] = v103;
                        --v101;
                      }
                      while (v101);
                    }
                    ++v44;
                  }
                  else
                  {
                    *((_BYTE *)std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v725, v45, v734)+ 24) = 5;
                    ++v44;
                  }
                }
              }
            }
          }
          else
          {
            *((_BYTE *)std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v725, v45, v734)+ 24) = 1;
            ++v44;
          }
        }
        v40 = 1;
        v41 = 1;
        if ((v708 & 1) == 0)
          continue;
        break;
      }
      if (__p)
        operator delete(__p);
      if (v34)
        operator delete(v34);
      v29 = v697 + 2;
    }
    while (v697 + 2 != v695);
    if (*(_QWORD *)(v4 + 336))
    {
      v108 = (_BYTE *)a2[7];
      v107 = (_BYTE *)a2[8];
      v109 = v107 - v108;
      if (v107 == v108)
      {
        v110 = 0;
        v111 = 0;
      }
      else
      {
        if (v109 < 0)
LABEL_833:
          abort();
        v110 = (int64_t *)operator new(v107 - v108);
        v111 = &v110[v109 >> 3];
        memcpy(v110, v108, v109);
      }
      *(_QWORD *)(v4 + 184) = *(_QWORD *)(v4 + 176);
      *(_QWORD *)(v4 + 208) = *(_QWORD *)(v4 + 200);
      *(_QWORD *)(v4 + 232) = *(_QWORD *)(v4 + 224);
      *(_QWORD *)(v4 + 256) = *(_QWORD *)(v4 + 248);
      if (v110 != v111)
      {
        v112 = v111;
        v113 = v110;
LABEL_95:
        while (1)
        {
          v109 = *v113;
          if (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v699, *(_QWORD *)(*v113 + 88))&& !std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v699, *(_QWORD *)(v109 + 96)))
          {
            break;
          }
          if (++v113 == v112)
            goto LABEL_104;
        }
        v114 = v112 - 1;
        while (v114 != v113)
        {
          v112 = v114;
          v115 = *v114;
          if (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v699, *(_QWORD *)(*v114 + 88)))
          {
            v116 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v699, *(_QWORD *)(v115 + 96));
            v114 = v112 - 1;
            if (!v116)
              continue;
          }
          *v113++ = v115;
          *v112 = v109;
          if (v113 != v112)
            goto LABEL_95;
          break;
        }
LABEL_104:
        if (v110 != v111)
        {
          v117 = 15.0;
          v118 = v110;
          while (1)
          {
            v109 = *v118;
            v729 = v109;
            if (*(double *)(v4 + 24) <= *(double *)(v109 + 104)
              || *(double *)(v711 + 8) >= *(double *)(v109 + 120)
              || *(double *)(v711 + 32) <= *(double *)(v109 + 112)
              || *(double *)(v711 + 16) >= *(double *)(v109 + 128))
            {
              goto LABEL_107;
            }
            v119 = *(_QWORD *)(v109 + 88);
            v120 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v699, v119);
            v121 = *(_QWORD *)(v109 + 96);
            v122 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v699, v121);
            v709 = v122;
            if (v122)
            {
              v123 = (double *)(v122 + 3);
            }
            else
            {
              if (!v120)
              {
                v292 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v725, v119);
                v293 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v725, v121);
                if (v292)
                  v294 = *((unsigned __int8 *)v292 + 24);
                else
                  v294 = 0;
                v365 = v693;
                if (v293)
                {
                  if (*((_BYTE *)v293 + 24))
                    v366 = v294 == 0;
                  else
                    v366 = 1;
                  if (v366)
                    v365 = v693;
                  else
                    v365 = (uint64_t)v689;
                }
                std::__hash_table<md::ComposedRoadEdge const*,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,std::allocator<md::ComposedRoadEdge const*>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,md::ComposedRoadEdge const*&>(v365, v109, v109);
                goto LABEL_107;
              }
              v123 = 0;
            }
            v124 = (double *)(v120 + 3);
            v125 = v120;
            v126 = v120 != 0;
            if (*(double *)(v109 + 144) <= v117)
            {
              std::__hash_table<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::__unordered_map_hasher<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,true>,std::__unordered_map_equal<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::equal_to<md::ComposedRoadEdge const*>,std::hash<md::ComposedRoadEdge const*>,true>,std::allocator<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,std::piecewise_construct_t const&,std::tuple<md::ComposedRoadEdge const* const&>,std::tuple<>>(v692, v109, &v729)[24] = v126;
              if (v125)
                v289 = v124;
              else
                v289 = v123;
              v290 = *v289;
              if (v125)
              {
                v291 = v692;
                if (v123)
                  v290 = *v124 + (*v123 - *v124) * 0.5;
              }
              else
              {
                v291 = v692;
              }
              v327 = std::__hash_table<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::__unordered_map_hasher<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,true>,std::__unordered_map_equal<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::equal_to<md::ComposedRoadEdge const*>,std::hash<md::ComposedRoadEdge const*>,true>,std::allocator<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,std::piecewise_construct_t const&,std::tuple<md::ComposedRoadEdge const* const&>,std::tuple<>>(v291, v109, &v729);
              v328 = v327;
              v330 = (double *)*((_QWORD *)v327 + 5);
              v329 = *((_QWORD *)v327 + 6);
              if ((unint64_t)v330 < v329)
              {
                *v330 = v290;
                v331 = v330 + 1;
                v332 = v692;
LABEL_339:
                *((_QWORD *)v328 + 5) = v331;
                v347 = std::__hash_table<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::__unordered_map_hasher<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,true>,std::__unordered_map_equal<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::equal_to<md::ComposedRoadEdge const*>,std::hash<md::ComposedRoadEdge const*>,true>,std::allocator<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,std::piecewise_construct_t const&,std::tuple<md::ComposedRoadEdge const* const&>,std::tuple<>>(v332, v729, &v729);
                v109 = (int64_t)v347;
                v349 = (char *)*((_QWORD *)v347 + 8);
                v348 = *((_QWORD *)v347 + 9);
                if ((unint64_t)v349 < v348)
                {
                  *(_QWORD *)v349 = 0x3FE0000000000000;
                  *((_QWORD *)v347 + 8) = v349 + 8;
                  goto LABEL_107;
                }
                v350 = (char *)*((_QWORD *)v347 + 7);
                v351 = (v349 - v350) >> 3;
                v352 = v351 + 1;
                if (!((unint64_t)(v351 + 1) >> 61))
                {
                  v353 = v348 - (_QWORD)v350;
                  if (v353 >> 2 > v352)
                    v352 = v353 >> 2;
                  if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8)
                    v354 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v354 = v352;
                  if (v354)
                  {
                    if (v354 >> 61)
                      goto LABEL_829;
                    v355 = operator new(8 * v354);
                  }
                  else
                  {
                    v355 = 0;
                  }
                  v356 = &v355[8 * v351];
                  *v356 = 0x3FE0000000000000;
                  v357 = v356 + 1;
                  if (v349 != v350)
                  {
                    v358 = v349 - 8 - v350;
                    if (v358 < 0x58)
                      goto LABEL_840;
                    if ((unint64_t)(v350 - v355) < 0x20)
                      goto LABEL_840;
                    v359 = (v358 >> 3) + 1;
                    v360 = &v355[v349 - v350 - 16];
                    v361 = v349 - 16;
                    v362 = v359 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v363 = *(_OWORD *)v361;
                      *(v360 - 1) = *((_OWORD *)v361 - 1);
                      *v360 = v363;
                      v360 -= 2;
                      v361 -= 32;
                      v362 -= 4;
                    }
                    while (v362);
                    v356 -= v359 & 0x3FFFFFFFFFFFFFFCLL;
                    v349 -= 8 * (v359 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v359 != (v359 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_840:
                      do
                      {
                        v364 = *((_QWORD *)v349 - 1);
                        v349 -= 8;
                        *--v356 = v364;
                      }
                      while (v349 != v350);
                    }
                  }
                  *(_QWORD *)(v109 + 56) = v356;
                  *(_QWORD *)(v109 + 64) = v357;
                  *(_QWORD *)(v109 + 72) = &v355[8 * v354];
                  if (v350)
                    operator delete(v350);
                  *(_QWORD *)(v109 + 64) = v357;
                  goto LABEL_107;
                }
LABEL_835:
                abort();
              }
              v333 = (double *)*((_QWORD *)v327 + 4);
              v334 = v330 - v333;
              v335 = v334 + 1;
              if ((unint64_t)(v334 + 1) >> 61)
                goto LABEL_835;
              v336 = v329 - (_QWORD)v333;
              if (v336 >> 2 > v335)
                v335 = v336 >> 2;
              if ((unint64_t)v336 >= 0x7FFFFFFFFFFFFFF8)
                v337 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v337 = v335;
              if (v337)
              {
                if (v337 >> 61)
                  goto LABEL_829;
                v338 = operator new(8 * v337);
              }
              else
              {
                v338 = 0;
              }
              v339 = (double *)&v338[8 * v334];
              *v339 = v290;
              v331 = v339 + 1;
              if (v330 == v333)
              {
                v332 = v692;
              }
              else
              {
                v340 = (char *)(v330 - 1) - (char *)v333;
                if (v340 < 0x58)
                {
                  v332 = v692;
                  goto LABEL_336;
                }
                v332 = v692;
                if ((unint64_t)((char *)v333 - v338) < 0x20)
                  goto LABEL_841;
                v341 = (v340 >> 3) + 1;
                v342 = &v338[(char *)v330 - (char *)v333 - 16];
                v343 = v330 - 2;
                v344 = v341 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v345 = *(_OWORD *)v343;
                  *(v342 - 1) = *((_OWORD *)v343 - 1);
                  *v342 = v345;
                  v342 -= 2;
                  v343 -= 4;
                  v344 -= 4;
                }
                while (v344);
                v339 -= v341 & 0x3FFFFFFFFFFFFFFCLL;
                v330 -= v341 & 0x3FFFFFFFFFFFFFFCLL;
                if (v341 != (v341 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_841:
                  do
                  {
LABEL_336:
                    v346 = *((_QWORD *)v330-- - 1);
                    *((_QWORD *)v339-- - 1) = v346;
                  }
                  while (v330 != v333);
                }
              }
              *((_QWORD *)v328 + 4) = v339;
              *((_QWORD *)v328 + 5) = v331;
              *((_QWORD *)v328 + 6) = &v338[8 * v337];
              if (v333)
                operator delete(v333);
              goto LABEL_339;
            }
            v127 = std::__hash_table<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::__unordered_map_hasher<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,true>,std::__unordered_map_equal<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::equal_to<md::ComposedRoadEdge const*>,std::hash<md::ComposedRoadEdge const*>,true>,std::allocator<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,std::piecewise_construct_t const&,std::tuple<md::ComposedRoadEdge const* const&>,std::tuple<>>(v692, v109, &v729);
            v127[24] = v126;
            md::ComposedRoadEdge::walker((md::ComposedRoadEdge *)&v739, v109, v125 != 0);
            v128 = v125;
            v129 = v125 ? v124 : v123;
            v130 = *v129;
            v131 = v127;
            v132 = (_QWORD *)v711;
            *(_QWORD *)(v711 + 184) = *(_QWORD *)(v711 + 176);
            *(_QWORD *)(v711 + 232) = *(_QWORD *)(v711 + 224);
            *(_QWORD *)(v711 + 256) = *(_QWORD *)(v711 + 248);
            *(_QWORD *)(v711 + 208) = *(_QWORD *)(v711 + 200);
            LOWORD(v734[0]) = 0;
            v691 = (uint64_t)(v131 + 80);
            v684 = v131;
            v685 = v111;
            v686 = (uint64_t)(v131 + 104);
            v734[1] = 0;
            v734[2] = 0;
            while (1)
            {
              v133 = v747;
              v134 = v747 + v117;
              if (v747 + v117 >= 0.0)
                break;
              v135 = (double *)v744;
              v136 = v746;
              v137 = 56 * v746 - 8;
              v138 = 15.0;
              do
              {
                if (!v136)
                  goto LABEL_303;
                v138 = v133 + v138;
                v746 = --v136;
                v133 = *(double *)((char *)v744 + v137);
                v747 = v133;
                v134 = v133 + v138;
                v137 -= 56;
              }
              while (v133 + v138 < 0.0);
              v139 = v133;
LABEL_134:
              v747 = v134;
              v144 = v134 < 0.0 || v139 < v134;
              if (v144
                || (v145 = (char *)&v135[7 * v136],
                    v146 = *((_QWORD *)v145 + 3),
                    v147 = *((_QWORD *)v145 + 4),
                    v147 == v146))
              {
LABEL_144:
                v152 = 0;
                v750 = v134;
                if (!v136)
                  goto LABEL_153;
LABEL_145:
                if (v136 == 1)
                {
                  v153 = 0;
                  goto LABEL_150;
                }
                v153 = v136 & 0xFFFFFFFFFFFFFFFELL;
                v154 = v135 + 13;
                v155 = 0.0;
                v156 = v136 & 0xFFFFFFFFFFFFFFFELL;
                do
                {
                  v157 = *(v154 - 7);
                  v158 = *v154;
                  v154 += 14;
                  v134 = v134 + v157;
                  v155 = v155 + v158;
                  v156 -= 2;
                }
                while (v156);
                v134 = v155 + v134;
                if (v136 != v153)
                {
LABEL_150:
                  v159 = &v135[7 * v153 + 6];
                  v160 = v136 - v153;
                  do
                  {
                    v161 = *v159;
                    v159 += 7;
                    v134 = v134 + v161;
                    --v160;
                  }
                  while (v160);
                }
                v750 = v134;
                goto LABEL_153;
              }
              v148 = 0;
              v149 = (v147 - v146) >> 3;
              if (v149 <= 1)
                v149 = 1;
              v150 = 0.0;
              while (1)
              {
                v151 = *(double *)(v146 + 8 * v148);
                if (v151 + v150 >= v134)
                  break;
                ++v148;
                v150 = v151 + v150;
                if (v149 == v148)
                  goto LABEL_144;
              }
              v188 = (float64x2_t *)(*(_QWORD *)&v135[7 * v136] + 16 * v148);
              v748 = vmlaq_n_f64(*v188, vsubq_f64(v188[1], *v188), (v134 - v150) / v151);
              v189 = vsubq_f64(v188[1], *v188);
              v749 = vmulq_n_f64(v189, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v189, v189))));
              v152 = 1;
              v750 = v134;
              if (v136)
                goto LABEL_145;
LABEL_153:
              if (!v152)
                goto LABEL_303;
              v162 = v134 / v751;
              if (v751 <= 0.0)
                v163 = 0.0;
              else
                v163 = v162;
              v164 = v748.f64[0] * 6.28318531;
              v165 = exp(v748.f64[1] * 6.28318531 + -3.14159265);
              v166 = atan(v165) * 2.0 + -1.57079633;
              v167 = fmod(v164, 6.28318531);
              v704 = fmod(v167 + 6.28318531, 6.28318531) + -3.14159265;
              v168 = __sincos_stret(v166);
              v169 = 6378137.0 / sqrt(v168.__sinval * v168.__sinval * -0.00669437999 + 1.0);
              v170 = v130;
              v171 = (v169 + v130) * v168.__cosval;
              v172 = __sincos_stret(v704);
              v173 = v171 * v172.__cosval;
              v174 = v171 * v172.__sinval;
              v130 = v170;
              v733[0] = v173;
              v733[1] = v174;
              v733[2] = (v170 + v169 * 0.99330562) * v168.__sinval;
              v132[29] = v132[28];
              v132[32] = v132[31];
              v175 = *a3;
              v176 = a3[1];
              if (*a3 == v176)
                goto LABEL_163;
              v109 = (int64_t)v702;
              do
              {
                v177 = *v175;
                v175 += 2;
                md::mun::MuninMetadata::neighborsWithinRadius(v177, v733, (uint64_t)v702, v701, 15.0);
              }
              while (v175 != v176);
              v178 = v132[28];
              v179 = v132[29];
              if (v178 == v179)
              {
LABEL_163:
                v184 = 1;
LABEL_188:
                SampleDeterminablityTracker::trackSample((uint64_t)v734, v184, v691, v686, v163);
                goto LABEL_189;
              }
              v180 = (v179 - v178) >> 3;
              v182 = (int64x2_t *)v132[25];
              v181 = (int64x2_t *)v132[26];
              v183 = ((char *)v181 - (char *)v182) >> 3;
              if (v180 <= v183)
              {
                if (v180 < v183)
                {
                  v181 = (int64x2_t *)((char *)v182 + 8 * v180);
                  v132[26] = v181;
                }
              }
              else
              {
                std::vector<unsigned long>::__append(v687, v180 - v183);
                v182 = *(int64x2_t **)(v711 + 200);
                v181 = *(int64x2_t **)(v711 + 208);
              }
              if (v182 == v181)
              {
LABEL_185:
                v109 = (int64_t)v181;
                goto LABEL_186;
              }
              v185 = (char *)v181 - (char *)v182 - 8;
              if (v185 < 0x18)
              {
                v186 = 0;
                v187 = v182;
                goto LABEL_175;
              }
              v190 = (v185 >> 3) + 1;
              v186 = v190 & 0x3FFFFFFFFFFFFFFCLL;
              v191 = (int64x2_t)xmmword_19FFB2E40;
              v192 = v182 + 1;
              v193 = v190 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v192[-1] = v191;
                *v192 = vaddq_s64(v191, vdupq_n_s64(2uLL));
                v191 = vaddq_s64(v191, vdupq_n_s64(4uLL));
                v192 += 2;
                v193 -= 4;
              }
              while (v193);
              if (v190 != v186)
              {
                v187 = (int64x2_t *)((char *)v182 + 8 * (v190 & 0x3FFFFFFFFFFFFFFCLL));
                do
                {
LABEL_175:
                  v187->i64[0] = v186;
                  v187 = (int64x2_t *)((char *)v187 + 8);
                  ++v186;
                }
                while (v187 != v181);
              }
              v194 = *v702;
              v109 = (int64_t)v182;
LABEL_177:
              while (1)
              {
                v195 = *(_QWORD *)v109;
                if (vabdd_f64(v170, *(double *)(*(_QWORD *)&v194[8 * *(_QWORD *)v109] + 72)) > 6.0)
                  break;
                v109 += 8;
                if ((int64x2_t *)v109 == v181)
                  goto LABEL_185;
              }
              v196 = (int64x2_t *)((char *)v181 - 8);
              while (v196 != (int64x2_t *)v109)
              {
                v181 = v196;
                v198 = v196->i64[0];
                v196 = (int64x2_t *)((char *)v196 - 8);
                v197 = v198;
                if (vabdd_f64(v170, *(double *)(*(_QWORD *)&v194[8 * v198] + 72)) <= 6.0)
                {
                  *(_QWORD *)v109 = v197;
                  v109 += 8;
                  v181->i64[0] = v195;
                  if ((int64x2_t *)v109 != v181)
                    goto LABEL_177;
                  break;
                }
              }
LABEL_186:
              if (v109 - (uint64_t)v182 < 8)
              {
                v184 = 2;
                goto LABEL_188;
              }
              SampleDeterminablityTracker::trackSample((uint64_t)v734, 0, v691, v686, v163);
              v199 = 0;
              if (v182 == (int64x2_t *)v109)
              {
                v211 = (_QWORD *)v711;
                v208 = *(char **)(v711 + 224);
                v210 = (uint64_t)(*(_QWORD *)(v711 + 232) - (_QWORD)v208) >> 3;
                goto LABEL_195;
              }
              do
              {
                v200 = v182->i64[0];
                v182 = (int64x2_t *)((char *)v182 + 8);
                v201 = v199;
                v202 = *v702;
                v203 = v200;
                v204 = v199;
                v205 = *(_QWORD *)&(*v702)[8 * v200];
                *(_QWORD *)&v202[v203 * 8] = *(_QWORD *)&(*v702)[8 * v199];
                *(_QWORD *)&v202[v204 * 8] = v205;
                v206 = *v701;
                v207 = (*v701)[v200];
                v206[v203] = (*v701)[v199];
                v206[v204] = v207;
                ++v199;
              }
              while (v182 != (int64x2_t *)v109);
              v208 = *(char **)(v711 + 224);
              v209 = *(char **)(v711 + 232);
              v210 = (v209 - v208) >> 3;
              if (v210 > v201)
              {
                v211 = (_QWORD *)v711;
LABEL_195:
                if (v210 > v199)
                  v211[29] = &v208[8 * v199];
LABEL_220:
                v225 = (uint64_t)v701;
                goto LABEL_221;
              }
              v212 = v199 - v210;
              v213 = *(_QWORD *)(v711 + 240);
              if (v199 - v210 > (v213 - (uint64_t)v209) >> 3)
              {
                if (v201 >= 0x1FFFFFFFFFFFFFFFLL)
                  goto LABEL_836;
                v214 = v213 - (_QWORD)v208;
                v215 = (v213 - (uint64_t)v208) >> 2;
                if (v215 <= v199)
                  v215 = v199;
                if (v214 >= 0x7FFFFFFFFFFFFFF8)
                  v216 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v216 = v215;
                if (v216 >> 61)
                  goto LABEL_829;
                v217 = (char *)operator new(8 * v216);
                v218 = 8 * v212;
                v219 = v217;
                v220 = &v217[8 * v210];
                v705 = v218;
                bzero(v220, v218);
                v221 = v209 - v208;
                if (v209 == v208)
                {
                  v208 = v209;
                  v223 = v220;
                  v224 = v219;
                }
                else
                {
                  v222 = v221 - 8;
                  if ((unint64_t)(v221 - 8) >= 0x58)
                  {
                    v224 = v219;
                    v223 = v220;
                    if ((unint64_t)(v208 - v219) < 0x20)
                      goto LABEL_216;
                    v226 = (v222 >> 3) + 1;
                    v227 = &v219[v209 - v208 - 16];
                    v228 = (__int128 *)(v209 - 16);
                    v229 = v226 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v230 = *v228;
                      *((_OWORD *)v227 - 1) = *(v228 - 1);
                      *(_OWORD *)v227 = v230;
                      v227 -= 32;
                      v228 -= 2;
                      v229 -= 4;
                    }
                    while (v229);
                    v223 = &v220[-8 * (v226 & 0x3FFFFFFFFFFFFFFCLL)];
                    v209 -= 8 * (v226 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v226 != (v226 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_216;
                  }
                  else
                  {
                    v223 = v220;
                    v224 = v219;
                    do
                    {
LABEL_216:
                      v231 = *((_QWORD *)v209 - 1);
                      v209 -= 8;
                      *((_QWORD *)v223 - 1) = v231;
                      v223 -= 8;
                    }
                    while (v209 != v208);
                    v208 = *v702;
                  }
                }
                v232 = &v224[8 * v216];
                v211 = (_QWORD *)v711;
                *(_QWORD *)(v711 + 224) = v223;
                *(_QWORD *)(v711 + 232) = &v220[v705];
                *(_QWORD *)(v711 + 240) = v232;
                if (v208)
                  operator delete(v208);
                goto LABEL_220;
              }
              if (v199 != v210)
              {
                bzero(*(void **)(v711 + 232), 8 * v212);
                v209 += 8 * v212;
              }
              v211 = (_QWORD *)v711;
              v225 = (uint64_t)v701;
              *(_QWORD *)(v711 + 232) = v209;
LABEL_221:
              v234 = (char *)v211[31];
              v233 = (char *)v211[32];
              v235 = (v233 - v234) >> 3;
              if (v199 <= v235)
              {
                if (v199 < v235)
                {
                  v233 = &v234[8 * v199];
                  v211[32] = v233;
                }
              }
              else
              {
                std::vector<double>::__append(v225, v199 - v235);
                v211 = (_QWORD *)v711;
                v234 = *(char **)(v711 + 248);
                v233 = *(char **)(v711 + 256);
              }
              v211[23] = v211[22];
              v731 = 0;
              v732 = 0;
              v730 = 0;
              if (v233 == v234)
              {
                v109 = 0;
              }
              else
              {
                v236 = v233 - v234;
                if (v233 - v234 < 0)
                  goto LABEL_836;
                v109 = (int64_t)operator new(v233 - v234);
                v730 = v109;
                v732 = v109 + 8 * (v236 >> 3);
                memcpy((void *)v109, v234, v236);
                v731 = v109 + 8 * (v236 >> 3);
              }
              *(_QWORD *)&v752[0] = &off_1E42D02C8;
              v753 = v752;
              md::MuninLabelingUtils::computeWeightsForWeightedAverage(&v730, (uint64_t)v752, v700);
              v237 = v753;
              v238 = v684;
              if (v753 == v752)
              {
                v237 = v752;
                v239 = 4;
              }
              else
              {
                if (!v753)
                  goto LABEL_234;
                v239 = 5;
              }
              (*(void (**)(void))(*(_QWORD *)v237 + 8 * v239))();
LABEL_234:
              if (v109)
              {
                v731 = v109;
                operator delete((void *)v109);
              }
              v240 = *(_QWORD *)(v711 + 224);
              v241 = *(_QWORD *)(v711 + 232) - v240;
              if (!v241)
              {
                v130 = 0.0;
                goto LABEL_247;
              }
              v242 = v241 >> 3;
              v243 = *v700;
              if (v242 <= 1)
                v242 = 1;
              if (v242 <= 1)
              {
                v244 = 0;
                v130 = 0.0;
LABEL_245:
                v250 = v242 - v244;
                v251 = v244;
                v252 = &v243->f64[v251];
                v253 = (uint64_t *)(v240 + v251 * 8);
                do
                {
                  v254 = *v253++;
                  v255 = *(double *)(v254 + 72);
                  v256 = *v252++;
                  v130 = v130 + v256 * v255;
                  --v250;
                }
                while (v250);
                goto LABEL_247;
              }
              v244 = v242 & 0xFFFFFFFFFFFFFFFELL;
              v245 = &v243->f64[1];
              v246 = v240 + 8;
              v247 = 0.0;
              v248 = v242 & 0xFFFFFFFFFFFFFFFELL;
              v249 = 0.0;
              do
              {
                v247 = v247 + *(v245 - 1) * *(double *)(*(_QWORD *)(v246 - 8) + 72);
                v249 = v249 + *v245 * *(double *)(*(_QWORD *)v246 + 72);
                v245 += 2;
                v246 += 16;
                v248 -= 2;
              }
              while (v248);
              v130 = v249 + v247;
              if (v242 != v244)
                goto LABEL_245;
LABEL_247:
              v258 = (double *)*((_QWORD *)v684 + 5);
              v257 = *((_QWORD *)v684 + 6);
              if ((unint64_t)v258 < v257)
              {
                *v258 = v130;
                v259 = v258 + 1;
                goto LABEL_270;
              }
              v109 = *((_QWORD *)v684 + 4);
              v260 = ((uint64_t)v258 - v109) >> 3;
              v261 = v260 + 1;
              if ((unint64_t)(v260 + 1) >> 61)
                goto LABEL_836;
              v262 = v257 - v109;
              if (v262 >> 2 > v261)
                v261 = v262 >> 2;
              if ((unint64_t)v262 >= 0x7FFFFFFFFFFFFFF8)
                v263 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v263 = v261;
              if (v263)
              {
                if (v263 >> 61)
                  goto LABEL_829;
                v264 = (char *)operator new(8 * v263);
              }
              else
              {
                v264 = 0;
              }
              v265 = (double *)&v264[8 * v260];
              *v265 = v130;
              v259 = v265 + 1;
              if (v258 == (double *)v109)
              {
                v238 = v684;
                goto LABEL_268;
              }
              v266 = (unint64_t)v258 - v109 - 8;
              if (v266 < 0x58)
              {
                v238 = v684;
                do
                {
LABEL_267:
                  v272 = *((_QWORD *)v258-- - 1);
                  *((_QWORD *)v265-- - 1) = v272;
                }
                while (v258 != (double *)v109);
                goto LABEL_268;
              }
              v238 = v684;
              if ((unint64_t)(v109 - (_QWORD)v264) < 0x20)
                goto LABEL_267;
              v267 = (v266 >> 3) + 1;
              v268 = (_OWORD *)((char *)v258 + (_QWORD)v264 - v109 - 16);
              v269 = v258 - 2;
              v270 = v267 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v271 = *(_OWORD *)v269;
                *(v268 - 1) = *((_OWORD *)v269 - 1);
                *v268 = v271;
                v268 -= 2;
                v269 -= 4;
                v270 -= 4;
              }
              while (v270);
              v265 -= v267 & 0x3FFFFFFFFFFFFFFCLL;
              v258 -= v267 & 0x3FFFFFFFFFFFFFFCLL;
              if (v267 != (v267 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_267;
LABEL_268:
              *((_QWORD *)v238 + 4) = v265;
              *((_QWORD *)v238 + 5) = v259;
              *((_QWORD *)v238 + 6) = &v264[8 * v263];
              if (v109)
                operator delete((void *)v109);
LABEL_270:
              *((_QWORD *)v238 + 5) = v259;
              v274 = (double *)*((_QWORD *)v238 + 8);
              v273 = *((_QWORD *)v238 + 9);
              if ((unint64_t)v274 >= v273)
              {
                v109 = *((_QWORD *)v238 + 7);
                v276 = ((uint64_t)v274 - v109) >> 3;
                v277 = v276 + 1;
                if ((unint64_t)(v276 + 1) >> 61)
LABEL_836:
                  abort();
                v278 = v273 - v109;
                if (v278 >> 2 > v277)
                  v277 = v278 >> 2;
                if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFF8)
                  v279 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v279 = v277;
                if (v279)
                {
                  if (v279 >> 61)
                    goto LABEL_829;
                  v280 = (char *)operator new(8 * v279);
                }
                else
                {
                  v280 = 0;
                }
                v281 = (double *)&v280[8 * v276];
                *v281 = v163;
                v275 = v281 + 1;
                if (v274 == (double *)v109)
                {
                  v238 = v684;
                }
                else
                {
                  v282 = (unint64_t)v274 - v109 - 8;
                  if (v282 < 0x58)
                  {
                    v238 = v684;
                    goto LABEL_290;
                  }
                  v238 = v684;
                  if ((unint64_t)(v109 - (_QWORD)v280) < 0x20)
                    goto LABEL_842;
                  v283 = (v282 >> 3) + 1;
                  v284 = (_OWORD *)((char *)v274 + (_QWORD)v280 - v109 - 16);
                  v285 = v274 - 2;
                  v286 = v283 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v287 = *(_OWORD *)v285;
                    *(v284 - 1) = *((_OWORD *)v285 - 1);
                    *v284 = v287;
                    v284 -= 2;
                    v285 -= 4;
                    v286 -= 4;
                  }
                  while (v286);
                  v281 -= v283 & 0x3FFFFFFFFFFFFFFCLL;
                  v274 -= v283 & 0x3FFFFFFFFFFFFFFCLL;
                  if (v283 != (v283 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_842:
                    do
                    {
LABEL_290:
                      v288 = *((_QWORD *)v274-- - 1);
                      *((_QWORD *)v281-- - 1) = v288;
                    }
                    while (v274 != (double *)v109);
                  }
                }
                *((_QWORD *)v238 + 7) = v281;
                *((_QWORD *)v238 + 8) = v275;
                *((_QWORD *)v238 + 9) = &v280[8 * v279];
                if (v109)
                  operator delete((void *)v109);
                goto LABEL_293;
              }
              *v274 = v163;
              v275 = v274 + 1;
LABEL_293:
              *((_QWORD *)v238 + 8) = v275;
LABEL_189:
              v132 = (_QWORD *)v711;
              v111 = v685;
              v128 = v125;
            }
            v140 = v746;
            v135 = (double *)v744;
            v139 = *((double *)v744 + 7 * v746 + 6);
            if (v134 <= v139)
              break;
            v141 = ((char *)v745 - (_BYTE *)v744) / 56;
            if (v746 == v141 - 1)
              goto LABEL_303;
            v134 = v747 - v139 + v117;
            v747 = 0.0;
            v142 = 56 * v746 + 104;
            v143 = v141 - 2;
            while (1)
            {
              v136 = v140 + 1;
              v139 = *(double *)((char *)v744 + v142);
              if (v134 <= v139)
              {
                v746 = v140 + 1;
                goto LABEL_134;
              }
              if (v143 == v140)
                break;
              v134 = v134 - v139;
              v142 += 56;
              ++v140;
            }
            v746 = v140 + 1;
LABEL_303:
            if (v128 && v709)
              goto LABEL_435;
            v295 = *((_QWORD *)v684 + 5);
            if (v295 == *((_QWORD *)v684 + 4))
              goto LABEL_435;
            v296 = 88;
            if (v128)
              v296 = 96;
            v297 = *(_QWORD *)(v729 + v296);
            v734[0] = v297;
            if (*(_OWORD *)&v748 == 0)
              goto LABEL_434;
            v298 = v748.f64[1];
            v299 = exp(v748.f64[1] * 6.28318531 + -3.14159265);
            v300 = atan(v299) * 114.591559 + -90.0;
            v301 = tan(v300 * 0.00872664626 + 0.789761487);
            v302 = log(v301);
            v303 = tan(v300 * 0.00872664626 + 0.78103484);
            v304 = fabs((v302 - log(v303)) * 0.159154943);
            v305 = cos(v300 * 0.034906585) * -559.82 + 111132.92;
            v306 = v305 + cos(v300 * 0.0698131701) * 1.175;
            v307 = v304 / (v306 + cos(v300 * 0.104719755) * -0.0023);
            v308 = *(double *)(v297 + 16);
            v309 = *(double *)(v297 + 24);
            v310 = ((v748.f64[0] - v308) * (v748.f64[0] - v308) + (v298 - v309) * (v298 - v309)) / (v307 * v307);
            if (v310 > 225.0)
              goto LABEL_434;
            v311 = *(double *)(v295 - 8);
            v312 = v308 * 6.28318531;
            v313 = exp(v309 * 6.28318531 + -3.14159265);
            v314 = atan(v313) * 2.0 + -1.57079633;
            v315 = fmod(v312, 6.28318531);
            v316 = fmod(v315 + 6.28318531, 6.28318531) + -3.14159265;
            v317 = __sincos_stret(v314);
            v318 = 6378137.0 / sqrt(v317.__sinval * v317.__sinval * -0.00669437999 + 1.0);
            v319 = (v318 + v311) * v317.__cosval;
            v320 = __sincos_stret(v316);
            v752[0] = v319 * v320.__cosval;
            v752[1] = v319 * v320.__sinval;
            v752[2] = (v311 + v318 * 0.99330562) * v317.__sinval;
            v132[29] = v132[28];
            v321 = (double *)v132[31];
            v132[32] = v321;
            v322 = *a3;
            v323 = a3[1];
            if (*a3 != v323)
            {
              do
              {
                v324 = *v322;
                v322 += 2;
                md::mun::MuninMetadata::neighborsWithinRadius(v324, v752, (uint64_t)v702, v701, 15.0);
              }
              while (v322 != v323);
              v321 = (double *)v132[32];
            }
            v325 = v132[33];
            if ((unint64_t)v321 < v325)
            {
              *v321 = v310;
              v326 = v321 + 1;
              goto LABEL_388;
            }
            v367 = *v701;
            v368 = (char *)v321 - (char *)*v701;
            v369 = (v368 >> 3) + 1;
            if (v369 >> 61)
              goto LABEL_837;
            v370 = v325 - (_QWORD)v367;
            if (v370 >> 2 > v369)
              v369 = v370 >> 2;
            if ((unint64_t)v370 >= 0x7FFFFFFFFFFFFFF8)
              v371 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v371 = v369;
            if (v371)
            {
              if (!(v371 >> 61))
              {
                v372 = operator new(8 * v371);
                goto LABEL_379;
              }
LABEL_829:
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            v372 = 0;
LABEL_379:
            v373 = (double *)&v372[8 * (v368 >> 3)];
            *v373 = v310;
            v326 = v373 + 1;
            if (v321 == v367)
            {
              v132 = (_QWORD *)v711;
            }
            else
            {
              v374 = (char *)(v321 - 1) - (char *)v367;
              if (v374 < 0x58 || (unint64_t)((char *)v321 - &v372[v368]) < 0x20)
              {
                v375 = v321;
                v132 = (_QWORD *)v711;
                goto LABEL_383;
              }
              v419 = (v374 >> 3) + 1;
              v375 = &v321[-(v419 & 0x3FFFFFFFFFFFFFFCLL)];
              v420 = &v372[v368 - 16];
              v421 = v321 - 2;
              v422 = v419 & 0x3FFFFFFFFFFFFFFCLL;
              v132 = (_QWORD *)v711;
              do
              {
                v423 = *(_OWORD *)v421;
                *(v420 - 1) = *((_OWORD *)v421 - 1);
                *v420 = v423;
                v420 -= 2;
                v421 -= 4;
                v422 -= 4;
              }
              while (v422);
              v373 -= v419 & 0x3FFFFFFFFFFFFFFCLL;
              if (v419 != (v419 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_383:
                  v376 = *((_QWORD *)v375-- - 1);
                  *((_QWORD *)v373-- - 1) = v376;
                }
                while (v375 != v367);
              }
            }
            v132[31] = v373;
            v132[32] = v326;
            v132[33] = &v372[8 * v371];
            if (v367)
              operator delete(v367);
LABEL_388:
            v132[32] = v326;
            v132[23] = v132[22];
            v727 = 0;
            v728 = 0;
            v726 = 0;
            v377 = (double *)v132[31];
            v378 = (char *)v326 - (char *)v377;
            if (v326 != v377)
            {
              if ((v378 & 0x8000000000000000) == 0)
              {
                v109 = (int64_t)operator new((char *)v326 - (char *)v377);
                v726 = v109;
                v728 = v109 + 8 * (v378 >> 3);
                memcpy((void *)v109, v377, (char *)v326 - (char *)v377);
                v727 = v109 + 8 * (v378 >> 3);
                v132 = (_QWORD *)v711;
                goto LABEL_392;
              }
LABEL_837:
              abort();
            }
            v109 = 0;
LABEL_392:
            v735 = &off_1E42D0238;
            v738 = &v735;
            md::MuninLabelingUtils::computeWeightsForWeightedAverage(&v726, (uint64_t)&v735, v700);
            v379 = v738;
            if (v738 == &v735)
            {
              v379 = &v735;
              v380 = 4;
LABEL_396:
              (*v379)[v380]();
            }
            else if (v738)
            {
              v380 = 5;
              goto LABEL_396;
            }
            if (v109)
            {
              v727 = v109;
              operator delete((void *)v109);
            }
            v381 = v132[28];
            v382 = v132[29] - v381;
            if (v382)
            {
              v383 = v382 >> 3;
              v384 = *v700;
              if (v383 <= 1)
                v383 = 1;
              if (v383 <= 1)
              {
                v385 = 0;
                v386 = 0.0;
                goto LABEL_408;
              }
              v385 = v383 & 0xFFFFFFFFFFFFFFFELL;
              v387 = &v384->f64[1];
              v388 = v381 + 8;
              v389 = 0.0;
              v390 = v383 & 0xFFFFFFFFFFFFFFFELL;
              v391 = 0.0;
              do
              {
                v389 = v389 + *(v387 - 1) * *(double *)(*(_QWORD *)(v388 - 8) + 72);
                v391 = v391 + *v387 * *(double *)(*(_QWORD *)v388 + 72);
                v387 += 2;
                v388 += 16;
                v390 -= 2;
              }
              while (v390);
              v386 = v391 + v389;
              if (v383 != v385)
              {
LABEL_408:
                v392 = v383 - v385;
                v393 = v385;
                v394 = &v384->f64[v393];
                v395 = (uint64_t *)(v381 + v393 * 8);
                do
                {
                  v396 = *v395++;
                  v397 = *(double *)(v396 + 72);
                  v398 = *v394++;
                  v386 = v386 + v398 * v397;
                  --v392;
                }
                while (v392);
              }
            }
            else
            {
              v386 = 0.0;
            }
            v399 = *(double *)(*((_QWORD *)v684 + 5) - 8);
            v400 = *(double *)(v132[23] - 8);
            *((double *)std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v699, v297, v734)+ 3) = v386 + v400 * v399;
            v401 = (int8x8_t)v132[35];
            if (!*(_QWORD *)&v401)
            {
              v409 = 0;
              goto LABEL_414;
            }
            v402 = 0x9DDFEA08EB382D69 * (((8 * v297) + 8) ^ HIDWORD(v297));
            v403 = 0x9DDFEA08EB382D69 * (HIDWORD(v297) ^ (v402 >> 47) ^ v402);
            v404 = 0x9DDFEA08EB382D69 * (v403 ^ (v403 >> 47));
            v405 = (uint8x8_t)vcnt_s8(v401);
            v405.i16[0] = vaddlv_u8(v405);
            if (v405.u32[0] > 1uLL)
            {
              v406 = v404;
              v407 = v688;
              v408 = v725;
              if (v404 >= *(_QWORD *)&v401)
                v406 = v404 % *(_QWORD *)&v401;
            }
            else
            {
              v406 = v404 & (*(_QWORD *)&v401 - 1);
              v407 = v688;
              v408 = v725;
            }
            v410 = *(_QWORD **)(*(_QWORD *)v408 + 8 * v406);
            if (!v410 || (v411 = (_QWORD *)*v410) == 0)
            {
LABEL_432:
              v409 = 0;
              goto LABEL_433;
            }
            if (v405.u32[0] < 2uLL)
            {
              v412 = *(_QWORD *)&v401 - 1;
              while (1)
              {
                v414 = v411[1];
                if (v404 == v414)
                {
                  if (v411[2] == v297)
                    goto LABEL_451;
                }
                else if ((v414 & v412) != v406)
                {
                  goto LABEL_432;
                }
                v411 = (_QWORD *)*v411;
                if (!v411)
                  goto LABEL_432;
              }
            }
            while (2)
            {
              v413 = v411[1];
              if (v404 != v413)
              {
                if (v413 >= *(_QWORD *)&v401)
                  v413 %= *(_QWORD *)&v401;
                if (v413 != v406)
                  goto LABEL_432;
                goto LABEL_422;
              }
              if (v411[2] != v297)
              {
LABEL_422:
                v411 = (_QWORD *)*v411;
                if (!v411)
                  goto LABEL_432;
                continue;
              }
              break;
            }
LABEL_451:
            v409 = *((_BYTE *)std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v408, v297, v734)+ 24);
LABEL_414:
            v407 = v688;
LABEL_433:
            *((_BYTE *)std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v407, v297, v734)+ 24) = v409;
            v135 = (double *)v744;
LABEL_434:
            v117 = 15.0;
LABEL_435:
            if (v135)
            {
              v415 = v745;
              v416 = v135;
              if (v745 != v135)
              {
                do
                {
                  v417 = (void *)*((_QWORD *)v415 - 4);
                  if (v417)
                  {
                    *((_QWORD *)v415 - 3) = v417;
                    operator delete(v417);
                  }
                  v418 = (void *)*((_QWORD *)v415 - 7);
                  if (v418)
                  {
                    *((_QWORD *)v415 - 6) = v418;
                    operator delete(v418);
                  }
                  v415 -= 7;
                }
                while (v415 != v135);
                v416 = v744;
              }
              v745 = v135;
              operator delete(v416);
            }
            if (v741)
            {
              v742 = v741;
              operator delete(v741);
            }
LABEL_107:
            ++v118;
            v4 = v711;
            if (v118 == v111)
              goto LABEL_452;
          }
          v136 = v746;
          goto LABEL_134;
        }
      }
LABEL_452:
      if (v110)
        operator delete(v110);
      for (i = *(_QWORD **)(v4 + 368); i; i = (_QWORD *)*i)
        std::__hash_table<md::ComposedRoadEdge const*,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,std::allocator<md::ComposedRoadEdge const*>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,md::ComposedRoadEdge const* const&>(v693, i[2], i[2]);
      prime = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 336) / *(float *)(v4 + 112));
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v426 = *(int8x8_t *)(v4 + 88);
      if (prime > *(_QWORD *)&v426)
        goto LABEL_461;
      if (prime < *(_QWORD *)&v426)
      {
        v427 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 104) / *(float *)(v4 + 112));
        if (*(_QWORD *)&v426 < 3uLL
          || (v428 = (uint8x8_t)vcnt_s8(v426), v428.i16[0] = vaddlv_u8(v428), v428.u32[0] > 1uLL))
        {
          v427 = std::__next_prime(v427);
        }
        else
        {
          v429 = 1 << -(char)__clz(v427 - 1);
          if (v427 >= 2)
            v427 = v429;
        }
        if (prime <= v427)
          prime = v427;
        if (prime < *(_QWORD *)&v426)
LABEL_461:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v694, prime);
      }
      v430 = *(_QWORD **)(v4 + 328);
      if (v430)
      {
        v431 = (int64_t *)(v711 + 96);
        v432 = *(_QWORD *)(v711 + 88);
        do
        {
          v433 = v430[3];
          v434 = v430[2];
          v435 = 0x9DDFEA08EB382D69 * (((8 * v434) + 8) ^ HIDWORD(v434));
          v436 = 0x9DDFEA08EB382D69 * (HIDWORD(v434) ^ (v435 >> 47) ^ v435);
          v437 = 0x9DDFEA08EB382D69 * (v436 ^ (v436 >> 47));
          if (v432)
          {
            v438 = (uint8x8_t)vcnt_s8((int8x8_t)v432);
            v438.i16[0] = vaddlv_u8(v438);
            if (v438.u32[0] > 1uLL)
            {
              prime = 0x9DDFEA08EB382D69 * (v436 ^ (v436 >> 47));
              if (v437 >= v432)
                prime = v437 % v432;
            }
            else
            {
              prime = v437 & (v432 - 1);
            }
            v439 = *(int64_t **)(*v694 + 8 * prime);
            if (v439)
            {
              v109 = *v439;
              if (*v439)
              {
                if (v438.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v441 = *(_QWORD *)(v109 + 8);
                    if (v441 == v437)
                    {
                      if (*(_QWORD *)(v109 + 16) == v434)
                        goto LABEL_532;
                    }
                    else if ((v441 & (v432 - 1)) != prime)
                    {
                      goto LABEL_494;
                    }
                    v109 = *(_QWORD *)v109;
                    if (!v109)
                      goto LABEL_494;
                  }
                }
                do
                {
                  v440 = *(_QWORD *)(v109 + 8);
                  if (v440 == v437)
                  {
                    if (*(_QWORD *)(v109 + 16) == v434)
                      goto LABEL_532;
                  }
                  else
                  {
                    if (v440 >= v432)
                      v440 %= v432;
                    if (v440 != prime)
                      break;
                  }
                  v109 = *(_QWORD *)v109;
                }
                while (v109);
              }
            }
          }
LABEL_494:
          v109 = (int64_t)operator new(0x20uLL);
          *(_QWORD *)v109 = 0;
          *(_QWORD *)(v109 + 8) = v437;
          *(_QWORD *)(v109 + 16) = v430[2];
          *(_QWORD *)(v109 + 24) = 0;
          v442 = (float)(unint64_t)(*(_QWORD *)(v711 + 104) + 1);
          v443 = *(float *)(v711 + 112);
          if (!v432 || (float)(v443 * (float)v432) < v442)
          {
            v444 = (v432 & (v432 - 1)) != 0;
            if (v432 < 3)
              v444 = 1;
            v445 = v444 | (2 * v432);
            v446 = vcvtps_u32_f32(v442 / v443);
            if (v445 <= v446)
              v447 = v446;
            else
              v447 = v445;
            if (v447 == 1)
            {
              v447 = 2;
            }
            else if ((v447 & (v447 - 1)) != 0)
            {
              v447 = std::__next_prime(v447);
              v432 = *(_QWORD *)(v711 + 88);
            }
            if (v447 > v432)
              goto LABEL_506;
            if (v447 < v432)
            {
              v448 = vcvtps_u32_f32((float)*(unint64_t *)(v711 + 104) / *(float *)(v711 + 112));
              if (v432 < 3
                || (v449 = (uint8x8_t)vcnt_s8((int8x8_t)v432), v449.i16[0] = vaddlv_u8(v449), v449.u32[0] > 1uLL))
              {
                v448 = std::__next_prime(v448);
              }
              else
              {
                v450 = 1 << -(char)__clz(v448 - 1);
                if (v448 >= 2)
                  v448 = v450;
              }
              if (v447 <= v448)
                v447 = v448;
              if (v447 < v432)
LABEL_506:
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v694, v447);
            }
            v432 = *(_QWORD *)(v711 + 88);
            if ((v432 & (v432 - 1)) != 0)
            {
              if (v437 >= v432)
                prime = v437 % v432;
              else
                prime = v437;
            }
            else
            {
              prime = (v432 - 1) & v437;
            }
          }
          v451 = *v694;
          v452 = *(int64_t **)(*v694 + 8 * prime);
          if (v452)
          {
            *(_QWORD *)v109 = *v452;
          }
          else
          {
            *(_QWORD *)v109 = *v431;
            *v431 = v109;
            *(_QWORD *)(v451 + 8 * prime) = v431;
            if (!*(_QWORD *)v109)
              goto LABEL_531;
            v453 = *(_QWORD *)(*(_QWORD *)v109 + 8);
            if ((v432 & (v432 - 1)) != 0)
            {
              if (v453 >= v432)
                v453 %= v432;
            }
            else
            {
              v453 &= v432 - 1;
            }
            v452 = (int64_t *)(*v694 + 8 * v453);
          }
          *v452 = v109;
LABEL_531:
          ++*(_QWORD *)(v711 + 104);
LABEL_532:
          *(_QWORD *)(v109 + 24) = v433;
          v430 = (_QWORD *)*v430;
        }
        while (v430);
      }
      v454 = v711;
      v455 = *(uint64_t **)(v711 + 408);
      if (v455)
      {
        v456 = (char *)(v711 + 56);
        while (1)
        {
          v457 = v455[2];
          if (v455[4] == v455[5] && v455[10] == v455[11] && v455[13] == v455[14])
            goto LABEL_536;
          v458 = 0x9DDFEA08EB382D69 * (((8 * v457) + 8) ^ HIDWORD(v457));
          v459 = 0x9DDFEA08EB382D69 * (HIDWORD(v457) ^ (v458 >> 47) ^ v458);
          v460 = 0x9DDFEA08EB382D69 * (v459 ^ (v459 >> 47));
          v461 = *(_QWORD *)(v454 + 48);
          if (v461)
          {
            v462 = (uint8x8_t)vcnt_s8((int8x8_t)v461);
            v462.i16[0] = vaddlv_u8(v462);
            if (v462.u32[0] > 1uLL)
            {
              v109 = 0x9DDFEA08EB382D69 * (v459 ^ (v459 >> 47));
              if (v460 >= v461)
                v109 = v460 % v461;
            }
            else
            {
              v109 = v460 & (v461 - 1);
            }
            v463 = *(uint64_t ***)(*v696 + 8 * v109);
            if (v463)
            {
              if (*v463)
              {
                v464 = *v463;
                v465 = *v463;
                if (v462.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v467 = v464[1];
                    if (v467 == v460)
                    {
                      if (v464[2] == v457)
                      {
                        v594 = v464;
                        goto LABEL_621;
                      }
                    }
                    else if ((v467 & (v461 - 1)) != v109)
                    {
                      goto LABEL_561;
                    }
                    v464 = (uint64_t *)*v464;
                    if (!v464)
                      goto LABEL_561;
                  }
                }
                do
                {
                  v466 = v465[1];
                  if (v466 == v460)
                  {
                    if (v465[2] == v457)
                    {
                      v594 = v465;
                      goto LABEL_621;
                    }
                  }
                  else
                  {
                    if (v466 >= v461)
                      v466 %= v461;
                    if (v466 != v109)
                      break;
                  }
                  v465 = (uint64_t *)*v465;
                }
                while (v465);
              }
            }
          }
LABEL_561:
          v468 = (char *)operator new(0x88uLL);
          v739 = v468;
          v740 = v456;
          *(_QWORD *)v468 = 0;
          *((_QWORD *)v468 + 1) = v460;
          *((_QWORD *)v468 + 2) = v457;
          *(_OWORD *)(v468 + 24) = 0u;
          *(_OWORD *)(v468 + 40) = 0u;
          *(_OWORD *)(v468 + 56) = 0u;
          *(_OWORD *)(v468 + 72) = 0u;
          *(_OWORD *)(v468 + 88) = 0u;
          *(_OWORD *)(v468 + 104) = 0u;
          *(_OWORD *)(v468 + 120) = 0u;
          LOBYTE(v741) = 1;
          v469 = (float)(unint64_t)(*(_QWORD *)(v454 + 64) + 1);
          v470 = *(float *)(v454 + 72);
          v594 = (uint64_t *)v468;
          if (!v461 || (float)(v470 * (float)v461) < v469)
            break;
LABEL_611:
          v491 = (_QWORD *)*v696;
          v492 = *(uint64_t **)(*v696 + 8 * v109);
          if (v492)
          {
            *v594 = *v492;
LABEL_619:
            *v492 = (uint64_t)v594;
            goto LABEL_620;
          }
          *v594 = *(_QWORD *)v456;
          *(_QWORD *)v456 = v594;
          v491[v109] = v456;
          if (*v594)
          {
            v493 = *(_QWORD *)(*v594 + 8);
            if ((v461 & (v461 - 1)) != 0)
            {
              if (v493 >= v461)
                v493 %= v461;
            }
            else
            {
              v493 &= v461 - 1;
            }
            v492 = (uint64_t *)(*v696 + 8 * v493);
            goto LABEL_619;
          }
LABEL_620:
          ++*(_QWORD *)(v454 + 64);
LABEL_621:
          *((_BYTE *)v594 + 24) = *((_BYTE *)v455 + 24);
          if (v594 != v455)
          {
            std::vector<gm::Range<double>>::__assign_with_size[abi:nn180100]<gm::Range<double>*,gm::Range<double>*>(v594 + 10, (char *)v455[10], (char *)v455[11], (v455[11] - v455[10]) >> 4);
            std::vector<gm::Range<double>>::__assign_with_size[abi:nn180100]<gm::Range<double>*,gm::Range<double>*>(v594 + 13, (char *)v455[13], (char *)v455[14], (v455[14] - v455[13]) >> 4);
          }
          v710 = v594;
          v494 = v455[5] - v455[4];
          if (v494)
          {
            v495 = 0;
            v496 = v494 >> 3;
            v707 = (unint64_t)(double)(((v494 >> 3) - 1) / 3uLL);
            v497 = (float)(unint64_t)(v494 >> 3);
            v716 = v494 >> 3;
            v717 = v455;
            while (1)
            {
              v500 = 0;
              v594[8] = v594[7];
              v594[5] = v594[4];
              v501 = vcvtms_u32_f32((float)(v497 / (float)((float)v495 + 1.0)) + 1.0);
              *(_QWORD *)&v3 = 0;
              v502 = v501;
              v718 = v501;
              v719 = v495;
              do
              {
                if (v496 >= v502)
                  v503 = v502;
                else
                  v503 = v496;
                if (v500)
                  v504 = v500 * v501 - 1;
                else
                  v504 = 0;
                v505 = v500 + 1;
                if (v496 >= (v500 + 1) * v501)
                  v506 = (v500 + 1) * v501;
                else
                  v506 = v496;
                v507 = v455[7];
                v508 = 8 * v504;
                v509 = (_QWORD *)(v507 + 8 * v504);
                v510 = 8 * v506;
                v511 = 8 * v506 - 8 * v504;
                if ((uint64_t)v511 < 8)
                  goto LABEL_633;
                v720 = v503;
                v721 = v500;
                v512 = v455[4];
                v513 = v506 - 1;
                v515 = (_QWORD *)v594[5];
                v514 = v594[6];
                v724 = v3;
                v722 = v506;
                v723 = 8 * v504;
                if ((unint64_t)v515 >= v514)
                {
                  v109 = v594[4];
                  v518 = ((uint64_t)v515 - v109) >> 4;
                  v519 = v518 + 1;
                  if ((unint64_t)(v518 + 1) >> 60)
                    abort();
                  v520 = v514 - v109;
                  if (v520 >> 3 > v519)
                    v519 = v520 >> 3;
                  if ((unint64_t)v520 >= 0x7FFFFFFFFFFFFFF0)
                    v521 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v521 = v519;
                  if (v521 >> 60)
                    goto LABEL_829;
                  v712 = v504;
                  v713 = v512;
                  v522 = v507;
                  v714 = v505;
                  v523 = (char *)operator new(16 * v521);
                  v507 = v522;
                  v524 = *(_QWORD *)(v522 + 8 * v513);
                  v525 = &v523[16 * v518];
                  *(_QWORD *)v525 = *v509;
                  *((_QWORD *)v525 + 1) = v524;
                  if (v515 == (_QWORD *)v109)
                  {
                    v527 = &v523[16 * v518];
                    v594 = v710;
                  }
                  else
                  {
                    v526 = &v523[16 * v518];
                    v594 = v710;
                    do
                    {
                      v527 = v526 - 16;
                      *((_OWORD *)v526 - 1) = *((_OWORD *)v515 - 1);
                      v515 -= 2;
                      v526 -= 16;
                    }
                    while (v515 != (_QWORD *)v109);
                  }
                  v517 = v525 + 16;
                  v594[4] = (uint64_t)v527;
                  v594[5] = (uint64_t)(v525 + 16);
                  v594[6] = (uint64_t)&v523[16 * v521];
                  if (v109)
                  {
                    operator delete((void *)v109);
                    v507 = v522;
                  }
                  v496 = v716;
                  v455 = v717;
                  v501 = v718;
                  v495 = v719;
                  v512 = v713;
                  v505 = v714;
                  v3 = v724;
                  v506 = v722;
                  v508 = v723;
                  v504 = v712;
                }
                else
                {
                  v516 = *(_QWORD *)(v507 + 8 * v513);
                  *v515 = *v509;
                  v515[1] = v516;
                  v517 = v515 + 2;
                }
                v594[5] = (uint64_t)v517;
                v528 = v511 >> 3;
                v529 = 0.0;
                if (v506 >= v504)
                  v530 = v511 >> 3;
                else
                  v530 = 0;
                if (v506 >= v504 && (v510 - v508) >> 3 != v530)
                {
LABEL_666:
                  v531 = 0.0;
                  goto LABEL_678;
                }
                if (v530 >= 2)
                {
                  if (v530 <= 3)
                  {
                    v532 = 0;
                    v533 = 0.0;
                    v534 = 0.0;
                    v535 = 0.0;
                    v536 = 0.0;
                    goto LABEL_675;
                  }
                  v532 = v530 & 0x1FFFFFFFFFFFFFFCLL;
                  v537 = 0uLL;
                  v538 = 0uLL;
                  v539 = (float64x2_t *)(v512 + v508 + 16);
                  v540 = (float64x2_t *)(v507 + v508 + 16);
                  v541 = v530 & 0x1FFFFFFFFFFFFFFCLL;
                  v542 = 0uLL;
                  v543 = 0uLL;
                  v544 = 0uLL;
                  v545 = 0uLL;
                  v546 = 0uLL;
                  v547 = 0uLL;
                  do
                  {
                    v548 = v540[-1];
                    v546 = vaddq_f64(v548, v546);
                    v547 = vaddq_f64(*v540, v547);
                    v549 = v539[-1];
                    v544 = vaddq_f64(v549, v544);
                    v545 = vaddq_f64(*v539, v545);
                    v537 = vmlaq_f64(v537, v548, v549);
                    v538 = vmlaq_f64(v538, *v540, *v539);
                    v542 = vmlaq_f64(v542, v548, v548);
                    v543 = vmlaq_f64(v543, *v540, *v540);
                    v539 += 2;
                    v540 += 2;
                    v541 -= 4;
                  }
                  while (v541);
                  v536 = vaddvq_f64(vaddq_f64(v547, v546));
                  v535 = vaddvq_f64(vaddq_f64(v545, v544));
                  v534 = vaddvq_f64(vaddq_f64(v543, v542));
                  v533 = vaddvq_f64(vaddq_f64(v538, v537));
                  if (v530 != v532)
                  {
LABEL_675:
                    v550 = v530 - v532;
                    v551 = v508 + 8 * v532;
                    v552 = (double *)(v512 + v551);
                    v553 = (double *)(v507 + v551);
                    do
                    {
                      v554 = *v553++;
                      v555 = v554;
                      v536 = v554 + v536;
                      v556 = *v552++;
                      v535 = v556 + v535;
                      v533 = v533 + v556 * v555;
                      v534 = v534 + v555 * v555;
                      --v550;
                    }
                    while (v550);
                  }
                  v529 = -(v535 * v536 - v533 * (double)v530) / -(v536 * v536 - v534 * (double)v530);
                  v531 = (v535 - v529 * v536) / (double)v530;
                  goto LABEL_678;
                }
                if (v506 < v504)
                  goto LABEL_666;
                v531 = *(double *)(v512 + v508);
LABEL_678:
                v558 = (double *)v594[8];
                v557 = v594[9];
                if ((unint64_t)v558 >= v557)
                {
                  v109 = v594[7];
                  v560 = ((uint64_t)v558 - v109) >> 4;
                  v561 = v560 + 1;
                  if ((unint64_t)(v560 + 1) >> 60)
                    abort();
                  v562 = v557 - v109;
                  if (v562 >> 3 > v561)
                    v561 = v562 >> 3;
                  if ((unint64_t)v562 >= 0x7FFFFFFFFFFFFFF0)
                    v563 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v563 = v561;
                  if (v563 >> 60)
                    goto LABEL_829;
                  v715 = v511 >> 3;
                  v564 = v512;
                  v565 = v507;
                  v566 = v505;
                  v567 = (char *)operator new(16 * v563);
                  v568 = (double *)&v567[16 * v560];
                  *v568 = v529;
                  v568[1] = v531;
                  if (v558 == (double *)v109)
                  {
                    v570 = &v567[16 * v560];
                  }
                  else
                  {
                    v569 = &v567[16 * v560];
                    do
                    {
                      v570 = v569 - 16;
                      *((_OWORD *)v569 - 1) = *((_OWORD *)v558 - 1);
                      v558 -= 2;
                      v569 -= 16;
                    }
                    while (v558 != (double *)v109);
                  }
                  v559 = v568 + 2;
                  v594[7] = (uint64_t)v570;
                  v594[8] = (uint64_t)(v568 + 2);
                  v594[9] = (uint64_t)&v567[16 * v563];
                  if (v109)
                    operator delete((void *)v109);
                  v454 = v711;
                  v496 = v716;
                  v455 = v717;
                  v501 = v718;
                  v495 = v719;
                  v505 = v566;
                  v3 = v724;
                  v507 = v565;
                  v512 = v564;
                  v506 = v722;
                  v508 = v723;
                  v528 = v715;
                }
                else
                {
                  *v558 = v529;
                  v558[1] = v531;
                  v559 = v558 + 2;
                  v454 = v711;
                }
                v594[8] = (uint64_t)v559;
                if (v506 >= v504)
                {
                  v571 = 8 * v720;
                  v572 = (double *)(v594[7] + 16 * v721);
                  v573 = *(uint64_t *)v572;
                  v574 = *((uint64_t *)v572 + 1);
                  if (v528 <= 1)
                    v575 = 1;
                  else
                    v575 = v528;
                  if (v575 <= 3)
                  {
                    v576 = 0;
LABEL_706:
                    v585 = (unint64_t)(v571 - v508) >> 3;
                    if (v585 <= 1)
                      v585 = 1;
                    v586 = v576 - v585;
                    v587 = v508 + 8 * v576;
                    v588 = (double *)(v512 + v587);
                    v589 = (double *)(v507 + v587);
                    do
                    {
                      v590 = *v589++;
                      v591 = *(double *)&v574 + *(double *)&v573 * v590;
                      v592 = *v588++;
                      *(double *)&v3 = fmax(vabdd_f64(v591, v592), *(double *)&v3);
                      v499 = __CFADD__(v586++, 1);
                    }
                    while (!v499);
                    goto LABEL_633;
                  }
                  v576 = v575 & 0x1FFFFFFFFFFFFFFCLL;
                  v577 = (float64x2_t)vdupq_lane_s64(v3, 0);
                  v578 = (float64x2_t)vdupq_lane_s64(v573, 0);
                  v579 = (float64x2_t)vdupq_lane_s64(v574, 0);
                  v580 = (unint64_t)(v571 - v508) >> 3;
                  if (v580 <= 1)
                    v580 = 1;
                  v581 = v580 & 0x1FFFFFFFFFFFFFFCLL;
                  v582 = (float64x2_t *)(v512 + v508 + 16);
                  v583 = (float64x2_t *)(v507 + v508 + 16);
                  v584 = v577;
                  do
                  {
                    v577 = vmaxnmq_f64(vabdq_f64(vmlaq_f64(v579, v583[-1], v578), v582[-1]), v577);
                    v584 = vmaxnmq_f64(vabdq_f64(vmlaq_f64(v579, *v583, v578), *v582), v584);
                    v582 += 2;
                    v583 += 2;
                    v581 -= 4;
                  }
                  while (v581);
                  *(double *)&v3 = vmaxnmvq_f64(vmaxnmq_f64(v577, v584));
                  if (v575 != v576)
                    goto LABEL_706;
                }
LABEL_633:
                v502 += v501;
                v500 = v505;
              }
              while (v505 <= v495);
              v499 = *(double *)&v3 <= 1.5 && *(double *)&v3 != -1.79769313e308 || v495++ >= v707;
              if (v499)
              {
                v594[16] = v3;
                v456 = (char *)(v711 + 56);
                break;
              }
            }
          }
LABEL_536:
          v455 = (uint64_t *)*v455;
          if (!v455)
            goto LABEL_721;
        }
        v471 = (v461 & (v461 - 1)) != 0;
        if (v461 < 3)
          v471 = 1;
        v472 = v471 | (2 * v461);
        v473 = vcvtps_u32_f32(v469 / v470);
        if (v472 <= v473)
          v474 = v473;
        else
          v474 = v472;
        if (v474 == 1)
        {
          v474 = 2;
        }
        else if ((v474 & (v474 - 1)) != 0)
        {
          v474 = std::__next_prime(v474);
          v461 = *(_QWORD *)(v454 + 48);
        }
        if (v474 <= v461)
        {
          if (v474 >= v461)
            goto LABEL_598;
          v485 = vcvtps_u32_f32((float)*(unint64_t *)(v454 + 64) / *(float *)(v454 + 72));
          if (v461 < 3
            || (v486 = (uint8x8_t)vcnt_s8((int8x8_t)v461), v486.i16[0] = vaddlv_u8(v486), v486.u32[0] > 1uLL))
          {
            v485 = std::__next_prime(v485);
          }
          else
          {
            v487 = 1 << -(char)__clz(v485 - 1);
            if (v485 >= 2)
              v485 = v487;
          }
          if (v474 <= v485)
            v474 = v485;
          if (v474 >= v461)
          {
            v461 = *(_QWORD *)(v454 + 48);
LABEL_598:
            if ((v461 & (v461 - 1)) != 0)
            {
              if (v460 >= v461)
                v109 = v460 % v461;
              else
                v109 = v460;
            }
            else
            {
              v109 = (v461 - 1) & v460;
            }
            goto LABEL_611;
          }
          if (!v474)
          {
            v593 = (_QWORD *)*v696;
            *v696 = 0;
            if (v593)
              operator delete(v593);
            v461 = 0;
            *(_QWORD *)(v454 + 48) = 0;
            goto LABEL_598;
          }
        }
        if (v474 >> 61)
          goto LABEL_829;
        v475 = operator new(8 * v474);
        v476 = (_QWORD *)*v696;
        *v696 = v475;
        if (v476)
          operator delete(v476);
        v477 = 0;
        *(_QWORD *)(v454 + 48) = v474;
        do
          *(_QWORD *)(*v696 + 8 * v477++) = 0;
        while (v474 != v477);
        v478 = *(_QWORD **)v456;
        if (!*(_QWORD *)v456)
        {
LABEL_597:
          v461 = v474;
          goto LABEL_598;
        }
        v479 = v478[1];
        v480 = v474 - 1;
        if ((v474 & (v474 - 1)) == 0)
        {
          v481 = v479 & v480;
          *(_QWORD *)(*v696 + 8 * v481) = v456;
          for (j = (_QWORD *)*v478; *v478; j = (_QWORD *)*v478)
          {
            v483 = j[1] & v480;
            if (v483 == v481)
            {
              v478 = j;
            }
            else if (*(_QWORD *)(*v696 + 8 * v483))
            {
              *v478 = *j;
              v484 = 8 * v483;
              *j = **(_QWORD **)(*v696 + v484);
              **(_QWORD **)(*v696 + v484) = j;
            }
            else
            {
              *(_QWORD *)(*v696 + 8 * v483) = v478;
              v478 = j;
              v481 = v483;
            }
          }
          goto LABEL_597;
        }
        if (v479 >= v474)
          v479 %= v474;
        *(_QWORD *)(*v696 + 8 * v479) = v456;
        v488 = (_QWORD *)*v478;
        if (!*v478)
          goto LABEL_597;
        while (1)
        {
          v490 = v488[1];
          if (v490 >= v474)
            v490 %= v474;
          if (v490 != v479)
          {
            if (!*(_QWORD *)(*v696 + 8 * v490))
            {
              *(_QWORD *)(*v696 + 8 * v490) = v478;
              goto LABEL_602;
            }
            *v478 = *v488;
            v489 = 8 * v490;
            *v488 = **(_QWORD **)(*v696 + v489);
            **(_QWORD **)(*v696 + v489) = v488;
            v488 = v478;
          }
          v490 = v479;
LABEL_602:
          v478 = v488;
          v488 = (_QWORD *)*v488;
          v479 = v490;
          if (!v488)
            goto LABEL_597;
        }
      }
LABEL_721:
      v595 = (_QWORD *)v454;
      v596 = *(char **)(v454 + 184);
      v597 = (char *)v595[22];
      if (v596 != v597)
      {
        v595[23] = v597;
        v596 = v597;
      }
      v599 = (char *)v595[25];
      v598 = (char *)v595[26];
      if (v598 != v599)
      {
        v595[26] = v599;
        v598 = v599;
      }
      v600 = v595[28];
      if (v595[29] != v600)
        v595[29] = v600;
      v601 = v595[31];
      if (v595[32] != v601)
        v595[32] = v601;
      v602 = v596 - v597;
      v603 = (v596 - v597) >> 3;
      if (v603 >= (uint64_t)(v595[24] - (_QWORD)v597) >> 3)
      {
        v4 = v711;
        goto LABEL_741;
      }
      v604 = v596 - v597;
      if (v596 == v597)
      {
        v606 = 8 * v603;
        v608 = 8 * v603;
        v4 = v711;
        goto LABEL_739;
      }
      if (v602 < 0)
        goto LABEL_829;
      v605 = operator new(v596 - v597);
      v606 = (uint64_t)&v605[8 * v603];
      if ((unint64_t)(v604 - 8) > 0x57 && (unint64_t)(v597 - v605) >= 0x20)
      {
        v618 = ((unint64_t)(v604 - 8) >> 3) + 1;
        v607 = &v596[-8 * (v618 & 0x3FFFFFFFFFFFFFFCLL)];
        v619 = &v605[v602 - 16];
        v620 = (__int128 *)(v596 - 16);
        v621 = v618 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v622 = *v620;
          *(v619 - 1) = *(v620 - 1);
          *v619 = v622;
          v619 -= 2;
          v620 -= 2;
          v621 -= 4;
        }
        while (v621);
        v608 = v606 - 8 * (v618 & 0x3FFFFFFFFFFFFFFCLL);
        v4 = v711;
        if (v618 == (v618 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_739:
          *(_QWORD *)(v4 + 176) = v608;
          *(_QWORD *)(v4 + 184) = v606;
          *(_QWORD *)(v4 + 192) = v606;
          if (v597)
          {
            operator delete(v597);
            v599 = *(char **)(v4 + 200);
            v598 = *(char **)(v4 + 208);
          }
LABEL_741:
          v610 = v598 - v599;
          v611 = (v598 - v599) >> 3;
          if (v611 >= (uint64_t)(*(_QWORD *)(v4 + 216) - (_QWORD)v599) >> 3)
            goto LABEL_759;
          v612 = v598 - v599;
          if (v598 == v599)
          {
            v614 = 8 * v611;
            v617 = 8 * v611;
            v4 = v711;
            goto LABEL_757;
          }
          if (v610 < 0)
            goto LABEL_829;
          v613 = operator new(v598 - v599);
          v614 = (uint64_t)&v613[8 * v611];
          v615 = v612 - 8;
          if ((unint64_t)(v612 - 8) > 0x57)
          {
            v4 = v711;
            if ((unint64_t)(v599 - v613) >= 0x20)
            {
              v623 = (v615 >> 3) + 1;
              v616 = &v598[-8 * (v623 & 0x3FFFFFFFFFFFFFFCLL)];
              v624 = &v613[v610 - 16];
              v625 = (__int128 *)(v598 - 16);
              v626 = v623 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v627 = *v625;
                *(v624 - 1) = *(v625 - 1);
                *v624 = v627;
                v624 -= 2;
                v625 -= 2;
                v626 -= 4;
              }
              while (v626);
              v617 = v614 - 8 * (v623 & 0x3FFFFFFFFFFFFFFCLL);
              if (v623 == (v623 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_757:
                *(_QWORD *)(v4 + 200) = v617;
                *(_QWORD *)(v4 + 208) = v614;
                *(_QWORD *)(v4 + 216) = v614;
                if (v599)
                  operator delete(v599);
LABEL_759:
                v629 = *(_BYTE **)(v4 + 232);
                v630 = *(_BYTE **)(v4 + 224);
                v631 = v629 - v630;
                v632 = (v629 - v630) >> 3;
                if (v632 >= (uint64_t)(*(_QWORD *)(v4 + 240) - (_QWORD)v630) >> 3)
                  goto LABEL_772;
                v633 = v629 - v630;
                if (v629 == v630)
                {
                  v635 = 8 * v632;
                  v637 = 8 * v632;
                  v4 = v711;
                  goto LABEL_770;
                }
                if (v631 < 0)
                  goto LABEL_829;
                v634 = operator new(v629 - v630);
                v635 = (uint64_t)&v634[8 * v632];
                v636 = v633 - 8;
                if ((unint64_t)(v633 - 8) >= 0x58)
                {
                  v637 = (uint64_t)&v634[8 * v632];
                  v4 = v711;
                  if ((unint64_t)(v630 - v634) >= 0x20)
                  {
                    v638 = (v636 >> 3) + 1;
                    v639 = &v634[v631 - 16];
                    v640 = (__int128 *)(v629 - 16);
                    v641 = v638 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v642 = *v640;
                      *(v639 - 1) = *(v640 - 1);
                      *v639 = v642;
                      v639 -= 2;
                      v640 -= 2;
                      v641 -= 4;
                    }
                    while (v641);
                    v637 = v635 - 8 * (v638 & 0x3FFFFFFFFFFFFFFCLL);
                    v629 -= 8 * (v638 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v638 == (v638 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_770:
                      *(_QWORD *)(v4 + 224) = v637;
                      *(_QWORD *)(v4 + 232) = v635;
                      *(_QWORD *)(v4 + 240) = v635;
                      if (v630)
                        operator delete(v630);
LABEL_772:
                      v644 = *(_BYTE **)(v4 + 256);
                      v645 = *(_BYTE **)(v4 + 248);
                      v646 = v644 - v645;
                      v647 = (v644 - v645) >> 3;
                      if (v647 >= (uint64_t)(*(_QWORD *)(v4 + 264) - (_QWORD)v645) >> 3)
                      {
LABEL_785:
                        if (*(_QWORD *)(v4 + 296))
                        {
                          v659 = *(_QWORD **)(v4 + 288);
                          if (v659)
                          {
                            do
                            {
                              v660 = (_QWORD *)*v659;
                              operator delete(v659);
                              v659 = v660;
                            }
                            while (v660);
                          }
                          *(_QWORD *)(v4 + 288) = 0;
                          v661 = *(_QWORD *)(v4 + 280);
                          if (v661)
                          {
                            for (k = 0; k != v661; ++k)
                              *(_QWORD *)(*(_QWORD *)v725 + 8 * k) = 0;
                          }
                          *(_QWORD *)(v4 + 296) = 0;
                        }
                        if (*(_QWORD *)(v4 + 336))
                        {
                          v663 = *(_QWORD **)(v4 + 328);
                          if (v663)
                          {
                            do
                            {
                              v664 = (_QWORD *)*v663;
                              operator delete(v663);
                              v663 = v664;
                            }
                            while (v664);
                          }
                          *(_QWORD *)(v4 + 328) = 0;
                          v665 = *(_QWORD *)(v4 + 320);
                          if (v665)
                          {
                            for (m = 0; m != v665; ++m)
                              *(_QWORD *)(*(_QWORD *)v699 + 8 * m) = 0;
                          }
                          *(_QWORD *)(v4 + 336) = 0;
                        }
                        if (*(_QWORD *)(v4 + 376))
                        {
                          v667 = *(_QWORD **)(v4 + 368);
                          if (v667)
                          {
                            do
                            {
                              v668 = (_QWORD *)*v667;
                              operator delete(v667);
                              v667 = v668;
                            }
                            while (v668);
                          }
                          *(_QWORD *)(v4 + 368) = 0;
                          v669 = *(_QWORD *)(v4 + 360);
                          if (v669)
                          {
                            for (n = 0; n != v669; ++n)
                              *(_QWORD *)(*v689 + 8 * n) = 0;
                          }
                          *(_QWORD *)(v4 + 376) = 0;
                        }
                        if (*(_QWORD *)(v4 + 416))
                        {
                          v671 = *(_QWORD **)(v4 + 408);
                          if (v671)
                          {
                            do
                            {
                              v679 = (_QWORD *)*v671;
                              v680 = (void *)v671[13];
                              if (v680)
                              {
                                v671[14] = v680;
                                operator delete(v680);
                              }
                              v681 = (void *)v671[10];
                              if (v681)
                              {
                                v671[11] = v681;
                                operator delete(v681);
                              }
                              v682 = (void *)v671[7];
                              if (v682)
                              {
                                v671[8] = v682;
                                operator delete(v682);
                              }
                              v683 = (void *)v671[4];
                              if (v683)
                              {
                                v671[5] = v683;
                                operator delete(v683);
                              }
                              operator delete(v671);
                              v671 = v679;
                            }
                            while (v679);
                          }
                          *(_QWORD *)(v4 + 408) = 0;
                          v672 = *(_QWORD *)(v4 + 400);
                          if (v672)
                          {
                            for (ii = 0; ii != v672; ++ii)
                              *(_QWORD *)(*v692 + 8 * ii) = 0;
                          }
                          *(_QWORD *)(v4 + 416) = 0;
                        }
                        if (*(_QWORD *)(v4 + 456))
                        {
                          v674 = *(_QWORD **)(v4 + 448);
                          if (v674)
                          {
                            do
                            {
                              v675 = (_QWORD *)*v674;
                              operator delete(v674);
                              v674 = v675;
                            }
                            while (v675);
                          }
                          *(_QWORD *)(v4 + 448) = 0;
                          v676 = *(_QWORD *)(v4 + 440);
                          if (v676)
                          {
                            for (jj = 0; jj != v676; ++jj)
                              *(_QWORD *)(*(_QWORD *)v688 + 8 * jj) = 0;
                          }
                          *(_QWORD *)(v4 + 456) = 0;
                        }
                        return v4;
                      }
                      v648 = v644 - v645;
                      if (v644 == v645)
                      {
                        v650 = 8 * v647;
                        v652 = 8 * v647;
                        v4 = v711;
                        goto LABEL_783;
                      }
                      if (v646 < 0)
                        goto LABEL_829;
                      v649 = operator new(v644 - v645);
                      v650 = (uint64_t)&v649[8 * v647];
                      v651 = v648 - 8;
                      if ((unint64_t)(v648 - 8) > 0x57)
                      {
                        v652 = (uint64_t)&v649[8 * v647];
                        v4 = v711;
                        if ((unint64_t)(v645 - v649) >= 0x20)
                        {
                          v653 = (v651 >> 3) + 1;
                          v654 = &v649[v646 - 16];
                          v655 = (__int128 *)(v644 - 16);
                          v656 = v653 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v657 = *v655;
                            *(v654 - 1) = *(v655 - 1);
                            *v654 = v657;
                            v654 -= 2;
                            v655 -= 2;
                            v656 -= 4;
                          }
                          while (v656);
                          v652 = v650 - 8 * (v653 & 0x3FFFFFFFFFFFFFFCLL);
                          v644 -= 8 * (v653 & 0x3FFFFFFFFFFFFFFCLL);
                          if (v653 == (v653 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_783:
                            *(_QWORD *)(v4 + 248) = v652;
                            *(_QWORD *)(v4 + 256) = v650;
                            *(_QWORD *)(v4 + 264) = v650;
                            if (v645)
                              operator delete(v645);
                            goto LABEL_785;
                          }
                        }
                      }
                      else
                      {
                        v652 = (uint64_t)&v649[8 * v647];
                        v4 = v711;
                      }
                      do
                      {
                        v658 = *((_QWORD *)v644 - 1);
                        v644 -= 8;
                        *(_QWORD *)(v652 - 8) = v658;
                        v652 -= 8;
                      }
                      while (v644 != v645);
                      goto LABEL_783;
                    }
                  }
                }
                else
                {
                  v637 = (uint64_t)&v634[8 * v632];
                  v4 = v711;
                }
                do
                {
                  v643 = *((_QWORD *)v629 - 1);
                  v629 -= 8;
                  *(_QWORD *)(v637 - 8) = v643;
                  v637 -= 8;
                }
                while (v629 != v630);
                goto LABEL_770;
              }
            }
            else
            {
              v616 = v598;
              v617 = (uint64_t)&v613[8 * v611];
            }
          }
          else
          {
            v616 = v598;
            v617 = (uint64_t)&v613[8 * v611];
            v4 = v711;
          }
          do
          {
            v628 = *((_QWORD *)v616 - 1);
            v616 -= 8;
            *(_QWORD *)(v617 - 8) = v628;
            v617 -= 8;
          }
          while (v616 != v599);
          goto LABEL_757;
        }
      }
      else
      {
        v607 = v596;
        v608 = (uint64_t)&v605[8 * v603];
        v4 = v711;
      }
      do
      {
        v609 = *((_QWORD *)v607 - 1);
        v607 -= 8;
        *(_QWORD *)(v608 - 8) = v609;
        v608 -= 8;
      }
      while (v607 != v597);
      goto LABEL_739;
    }
  }
  return v4;
}

void sub_19FB43EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, void **a16, uint64_t a17, uint64_t a18, void **a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void **a26,void **a27,void **a28,void **a29,void *__p,uint64_t a31,uint64_t a32,_QWORD *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  void *v67;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  _QWORD *v75;
  _QWORD *v76;
  void *v77;
  _QWORD *v78;
  _QWORD *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  _QWORD *v85;
  _QWORD *v86;
  void *v87;
  _QWORD *v88;
  _QWORD *v89;
  void *v90;

  md::ComposedRoadEdgeWalker::~ComposedRoadEdgeWalker((md::ComposedRoadEdgeWalker *)&a67);
  if (v67)
    operator delete(v67);
  v69 = (_QWORD *)a33[56];
  if (v69)
  {
    do
    {
      v70 = (_QWORD *)*v69;
      operator delete(v69);
      v69 = v70;
    }
    while (v70);
  }
  v71 = *a15;
  *a15 = 0;
  if (v71)
    operator delete(v71);
  std::__hash_table<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::__unordered_map_hasher<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,true>,std::__unordered_map_equal<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::equal_to<md::ComposedRoadEdge const*>,std::hash<md::ComposedRoadEdge const*>,true>,std::allocator<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>>>::~__hash_table(a18);
  v72 = (_QWORD *)a33[46];
  if (v72)
  {
    do
    {
      v73 = (_QWORD *)*v72;
      operator delete(v72);
      v72 = v73;
    }
    while (v73);
  }
  v74 = *a16;
  *a16 = 0;
  if (v74)
    operator delete(v74);
  v75 = (_QWORD *)a33[41];
  if (v75)
  {
    do
    {
      v76 = (_QWORD *)*v75;
      operator delete(v75);
      v75 = v76;
    }
    while (v76);
  }
  v77 = *a26;
  *a26 = 0;
  if (v77)
    operator delete(v77);
  v78 = (_QWORD *)a33[36];
  if (v78)
  {
    do
    {
      v79 = (_QWORD *)*v78;
      operator delete(v78);
      v78 = v79;
    }
    while (v79);
  }
  v80 = *a47;
  *a47 = 0;
  if (v80)
    operator delete(v80);
  v81 = *a28;
  if (*a28)
  {
    a33[32] = v81;
    operator delete(v81);
  }
  v82 = *a29;
  if (*a29)
  {
    a33[29] = v82;
    operator delete(v82);
  }
  v83 = *a14;
  if (*a14)
  {
    a33[26] = v83;
    operator delete(v83);
  }
  v84 = *a27;
  if (*a27)
  {
    a33[23] = v84;
    operator delete(v84);
  }
  v85 = (_QWORD *)a33[17];
  if (v85)
  {
    do
    {
      v86 = (_QWORD *)*v85;
      operator delete(v85);
      v85 = v86;
    }
    while (v86);
  }
  v87 = *a19;
  *a19 = 0;
  if (v87)
    operator delete(v87);
  v88 = (_QWORD *)a33[12];
  if (v88)
  {
    do
    {
      v89 = (_QWORD *)*v88;
      operator delete(v88);
      v88 = v89;
    }
    while (v89);
  }
  v90 = *a20;
  *a20 = 0;
  if (v90)
    operator delete(v90);
  std::__hash_table<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::__unordered_map_hasher<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,true>,std::__unordered_map_equal<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::equal_to<md::ComposedRoadEdge const*>,std::hash<md::ComposedRoadEdge const*>,true>,std::allocator<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>>>::~__hash_table(a23);
  _Unwind_Resume(a1);
}

void std::__hash_table<md::ComposedRoadEdge const*,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,std::allocator<md::ComposedRoadEdge const*>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,md::ComposedRoadEdge const* const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = v7 ^ (v7 >> 47);
  v9 = 0x9DDFEA08EB382D69 * v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2)
                return;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_22;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2)
              return;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  v16 = operator new(0x18uLL);
  *v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_34;
    if (prime < v10)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v10)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *v16 = *v27;
LABEL_58:
    *v27 = v16;
    goto LABEL_59;
  }
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v26 + 8 * v3) = a1 + 16;
  if (*v16)
  {
    v28 = *(_QWORD *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10)
        v28 %= v10;
    }
    else
    {
      v28 &= v10 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19FB444B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<gm::Range<double>>::__assign_with_size[abi:nn180100]<gm::Range<double>*,gm::Range<double>*>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_22;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_22:
      abort();
    v13 = 2 * v12;
    result = operator new(16 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZInfo>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v2 = (void *)v1[13];
      if (v2)
      {
        v1[14] = v2;
        operator delete(v2);
      }
      v3 = (void *)v1[10];
      if (v3)
      {
        v1[11] = v3;
        operator delete(v3);
      }
      v4 = (void *)v1[7];
      if (v4)
      {
        v1[8] = v4;
        operator delete(v4);
      }
      v5 = (void *)v1[4];
      if (v5)
      {
        v1[5] = v5;
        operator delete(v5);
      }
    }
    operator delete(v1);
  }
}

void std::__hash_table<md::ComposedRoadEdge const*,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,std::allocator<md::ComposedRoadEdge const*>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,md::ComposedRoadEdge const*&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = v7 ^ (v7 >> 47);
  v9 = 0x9DDFEA08EB382D69 * v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2)
                return;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_22;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2)
              return;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  v16 = operator new(0x18uLL);
  *v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_34;
    if (prime < v10)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v10)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *v16 = *v27;
LABEL_58:
    *v27 = v16;
    goto LABEL_59;
  }
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v26 + 8 * v3) = a1 + 16;
  if (*v16)
  {
    v28 = *(_QWORD *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10)
        v28 %= v10;
    }
    else
    {
      v28 &= v10 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19FB44974(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::__unordered_map_hasher<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,true>,std::__unordered_map_equal<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::equal_to<md::ComposedRoadEdge const*>,std::hash<md::ComposedRoadEdge const*>,true>,std::allocator<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,std::piecewise_construct_t const&,std::tuple<md::ComposedRoadEdge const* const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  void *v42;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*a1 + 8 * v3);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = *((_QWORD *)v12 + 1);
            if (v14 == v8)
            {
              if (*((_QWORD *)v12 + 2) == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = *(char **)v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_QWORD *)v12 + 2) == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = a1 + 2;
  v12 = (char *)operator new(0x80uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_QWORD *)v12 + 2) = *a3;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *((_QWORD *)v12 + 15) = 0;
  v16 = (float)(unint64_t)(a1[3] + 1);
  v17 = *((float *)a1 + 8);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = a1[1];
    }
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_59;
      v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime >= v9)
      {
        v9 = a1[1];
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v42 = (void *)*a1;
        *a1 = 0;
        if (v42)
          operator delete(v42);
        v9 = 0;
        a1[1] = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v22 = operator new(8 * prime);
    v23 = (void *)*a1;
    *a1 = (uint64_t)v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v24++) = 0;
    while (prime != v24);
    v25 = (_QWORD *)*v15;
    if (!*v15)
    {
LABEL_58:
      v9 = prime;
      goto LABEL_59;
    }
    v26 = v25[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*a1 + 8 * v28) = v15;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v30))
        {
          *v25 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*a1 + v31);
          **(_QWORD **)(*a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v30) = v25;
          v25 = i;
          v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*a1 + 8 * v26) = v15;
    v35 = (_QWORD *)*v25;
    if (!*v25)
      goto LABEL_58;
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 != v26)
      {
        if (!*(_QWORD *)(*a1 + 8 * v37))
        {
          *(_QWORD *)(*a1 + 8 * v37) = v25;
          goto LABEL_63;
        }
        *v25 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*a1 + v36);
        **(_QWORD **)(*a1 + v36) = v35;
        v35 = v25;
      }
      v37 = v26;
LABEL_63:
      v25 = v35;
      v35 = (_QWORD *)*v35;
      v26 = v37;
      if (!v35)
        goto LABEL_58;
    }
  }
LABEL_72:
  v38 = *a1;
  v39 = *(_QWORD **)(*a1 + 8 * v3);
  if (v39)
  {
    *(_QWORD *)v12 = *v39;
LABEL_80:
    *v39 = v12;
    goto LABEL_81;
  }
  *(_QWORD *)v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v38 + 8 * v3) = v15;
  if (*(_QWORD *)v12)
  {
    v40 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9)
        v40 %= v9;
    }
    else
    {
      v40 &= v9 - 1;
    }
    v39 = (_QWORD *)(*a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v12;
}

void sub_19FB44E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZInfo>,void *>>>>::reset[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v42;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  v12[3] = 0;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_59;
      v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v42 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v42)
          operator delete(v42);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = operator new(8 * prime);
    v22 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v21;
    if (v22)
      operator delete(v22);
    v23 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    v25 = (uint64_t *)(a1 + 4);
    v24 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v24)
    {
LABEL_58:
      v9 = prime;
      goto LABEL_59;
    }
    v26 = v24[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v25;
      for (i = (_QWORD *)*v24; *v24; i = (_QWORD *)*v24)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v24 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
        {
          *v24 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v31);
          **(_QWORD **)(*(_QWORD *)a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v24;
          v24 = i;
          v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v25;
    v35 = (_QWORD *)*v24;
    if (!*v24)
      goto LABEL_58;
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 != v26)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v24;
          goto LABEL_63;
        }
        *v24 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*(_QWORD *)a1 + v36);
        **(_QWORD **)(*(_QWORD *)a1 + v36) = v35;
        v35 = v24;
      }
      v37 = v26;
LABEL_63:
      v24 = v35;
      v35 = (_QWORD *)*v35;
      v26 = v37;
      if (!v35)
        goto LABEL_58;
    }
  }
LABEL_72:
  v38 = *(_QWORD **)a1;
  v39 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v39)
  {
    *v12 = *v39;
LABEL_80:
    *v39 = v12;
    goto LABEL_81;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v38[v3] = a1 + 4;
  if (*v12)
  {
    v40 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9)
        v40 %= v9;
    }
    else
    {
      v40 &= v9 - 1;
    }
    v39 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

void sub_19FB452D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v42;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  *((_BYTE *)v12 + 24) = 0;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_59;
      v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v42 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v42)
          operator delete(v42);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = operator new(8 * prime);
    v22 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v21;
    if (v22)
      operator delete(v22);
    v23 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    v25 = (uint64_t *)(a1 + 4);
    v24 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v24)
    {
LABEL_58:
      v9 = prime;
      goto LABEL_59;
    }
    v26 = v24[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v25;
      for (i = (_QWORD *)*v24; *v24; i = (_QWORD *)*v24)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v24 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
        {
          *v24 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v31);
          **(_QWORD **)(*(_QWORD *)a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v24;
          v24 = i;
          v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v25;
    v35 = (_QWORD *)*v24;
    if (!*v24)
      goto LABEL_58;
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 != v26)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v24;
          goto LABEL_63;
        }
        *v24 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*(_QWORD *)a1 + v36);
        **(_QWORD **)(*(_QWORD *)a1 + v36) = v35;
        v35 = v24;
      }
      v37 = v26;
LABEL_63:
      v24 = v35;
      v35 = (_QWORD *)*v35;
      v26 = v37;
      if (!v35)
        goto LABEL_58;
    }
  }
LABEL_72:
  v38 = *(_QWORD **)a1;
  v39 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v39)
  {
    *v12 = *v39;
LABEL_80:
    *v39 = v12;
    goto LABEL_81;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v38[v3] = a1 + 4;
  if (*v12)
  {
    v40 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9)
        v40 %= v9;
    }
    else
    {
      v40 &= v9 - 1;
    }
    v39 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

void sub_19FB4576C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::ComposedRoadEdgeWalker::~ComposedRoadEdgeWalker(md::ComposedRoadEdgeWalker *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(_QWORD *)(v3 - 24) = v5;
          operator delete(v5);
        }
        v6 = *(void **)(v3 - 56);
        if (v6)
        {
          *(_QWORD *)(v3 - 48) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  v7 = (void *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 3) = v7;
    operator delete(v7);
  }
}

void std::__function::__func<md::MuninRoadGraphZData::processEdges(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,std::vector<md::ComposedRoadEdge const*>)::$_1,std::allocator<md::MuninRoadGraphZData::processEdges(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,std::vector<md::ComposedRoadEdge const*>)::$_1>,double ()(double const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MuninRoadGraphZData::processEdges(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,std::vector<md::ComposedRoadEdge const*>)::$_1,std::allocator<md::MuninRoadGraphZData::processEdges(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,std::vector<md::ComposedRoadEdge const*>)::$_1>,double ()(double const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D0238;
  return result;
}

void std::__function::__func<md::MuninRoadGraphZData::processEdges(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,std::vector<md::ComposedRoadEdge const*>)::$_1,std::allocator<md::MuninRoadGraphZData::processEdges(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,std::vector<md::ComposedRoadEdge const*>)::$_1>,double ()(double const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D0238;
}

double std::__function::__func<md::MuninRoadGraphZData::processEdges(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,std::vector<md::ComposedRoadEdge const*>)::$_1,std::allocator<md::MuninRoadGraphZData::processEdges(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,std::vector<md::ComposedRoadEdge const*>)::$_1>,double ()(double const&)>::operator()(uint64_t a1, double *a2)
{
  double result;

  result = 10.0;
  if (*a2 >= 0.1)
    return 1.0 / *a2;
  return result;
}

void SampleDeterminablityTracker::trackSample(uint64_t a1, int a2, uint64_t a3, uint64_t a4, double a5)
{
  unint64_t v9;
  double *v10;
  char *v11;
  unint64_t v12;
  double *v13;
  double *v14;
  unint64_t v15;
  double *v16;
  double *v17;
  unint64_t v18;
  double *v19;
  double *v20;
  double *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  double *v29;
  char *v30;
  char *v31;
  double *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  double *v39;
  char *v40;
  char *v41;
  double *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  double *v49;
  char *v50;
  char *v51;
  double *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  double *v59;
  char *v60;
  char *v61;

  switch(a2)
  {
    case 2:
      if (*(_BYTE *)a1)
      {
        v13 = *(double **)(a3 + 8);
        v12 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v13 >= v12)
        {
          v32 = *(double **)a3;
          v33 = ((uint64_t)v13 - *(_QWORD *)a3) >> 4;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 60)
            goto LABEL_74;
          v35 = v12 - (_QWORD)v32;
          if (v35 >> 3 > v34)
            v34 = v35 >> 3;
          v25 = (unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0;
          v36 = 0xFFFFFFFFFFFFFFFLL;
          if (!v25)
            v36 = v34;
          if (v36 >> 60)
            goto LABEL_75;
          v37 = 16 * v36;
          v38 = (char *)operator new(16 * v36);
          v39 = (double *)&v38[16 * v33];
          v40 = &v38[v37];
          *v39 = *(double *)(a1 + 8);
          v39[1] = a5;
          v14 = v39 + 2;
          if (v13 == v32)
          {
            v41 = &v38[16 * v33];
          }
          else
          {
            do
            {
              v41 = (char *)(v39 - 2);
              *((_OWORD *)v39 - 1) = *((_OWORD *)v13 - 1);
              v13 -= 2;
              v39 -= 2;
            }
            while (v13 != v32);
          }
          *(_QWORD *)a3 = v41;
          *(_QWORD *)(a3 + 8) = v14;
          *(_QWORD *)(a3 + 16) = v40;
          if (v32)
            operator delete(v32);
        }
        else
        {
          *v13 = *(double *)(a1 + 8);
          v13[1] = a5;
          v14 = v13 + 2;
        }
        *(_QWORD *)(a3 + 8) = v14;
        *(_BYTE *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
      if (!*(_BYTE *)(a1 + 1))
      {
        *(_BYTE *)(a1 + 1) = 1;
LABEL_72:
        *(double *)(a1 + 16) = a5;
      }
      break;
    case 1:
      if (*(_BYTE *)(a1 + 1))
      {
        v16 = *(double **)(a4 + 8);
        v15 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v16 >= v15)
        {
          v42 = *(double **)a4;
          v43 = ((uint64_t)v16 - *(_QWORD *)a4) >> 4;
          v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 60)
            goto LABEL_74;
          v45 = v15 - (_QWORD)v42;
          if (v45 >> 3 > v44)
            v44 = v45 >> 3;
          v25 = (unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0;
          v46 = 0xFFFFFFFFFFFFFFFLL;
          if (!v25)
            v46 = v44;
          if (v46 >> 60)
            goto LABEL_75;
          v47 = 16 * v46;
          v48 = (char *)operator new(16 * v46);
          v49 = (double *)&v48[16 * v43];
          v50 = &v48[v47];
          *v49 = *(double *)(a1 + 16);
          v49[1] = a5;
          v17 = v49 + 2;
          if (v16 == v42)
          {
            v51 = &v48[16 * v43];
          }
          else
          {
            do
            {
              v51 = (char *)(v49 - 2);
              *((_OWORD *)v49 - 1) = *((_OWORD *)v16 - 1);
              v16 -= 2;
              v49 -= 2;
            }
            while (v16 != v42);
          }
          *(_QWORD *)a4 = v51;
          *(_QWORD *)(a4 + 8) = v17;
          *(_QWORD *)(a4 + 16) = v50;
          if (v42)
            operator delete(v42);
        }
        else
        {
          *v16 = *(double *)(a1 + 16);
          v16[1] = a5;
          v17 = v16 + 2;
        }
        *(_QWORD *)(a4 + 8) = v17;
        *(_BYTE *)(a1 + 1) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      if (!*(_BYTE *)a1)
        *(double *)(a1 + 8) = a5;
      break;
    case 0:
      if (*(_BYTE *)a1)
      {
        v10 = *(double **)(a3 + 8);
        v9 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v10 < v9)
        {
          *v10 = *(double *)(a1 + 8);
          v10[1] = a5;
          v11 = (char *)(v10 + 2);
LABEL_55:
          *(_QWORD *)(a3 + 8) = v11;
          *(_BYTE *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          return;
        }
        v21 = *(double **)a3;
        v22 = ((uint64_t)v10 - *(_QWORD *)a3) >> 4;
        v23 = v22 + 1;
        if (!((unint64_t)(v22 + 1) >> 60))
        {
          v24 = v9 - (_QWORD)v21;
          if (v24 >> 3 > v23)
            v23 = v24 >> 3;
          v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0;
          v26 = 0xFFFFFFFFFFFFFFFLL;
          if (!v25)
            v26 = v23;
          if (!(v26 >> 60))
          {
            v27 = 16 * v26;
            v28 = (char *)operator new(16 * v26);
            v29 = (double *)&v28[16 * v22];
            v30 = &v28[v27];
            *v29 = *(double *)(a1 + 8);
            v29[1] = a5;
            v11 = (char *)(v29 + 2);
            if (v10 == v21)
            {
              v31 = &v28[16 * v22];
            }
            else
            {
              do
              {
                v31 = (char *)(v29 - 2);
                *((_OWORD *)v29 - 1) = *((_OWORD *)v10 - 1);
                v10 -= 2;
                v29 -= 2;
              }
              while (v10 != v21);
            }
            *(_QWORD *)a3 = v31;
            *(_QWORD *)(a3 + 8) = v11;
            *(_QWORD *)(a3 + 16) = v30;
            if (v21)
              operator delete(v21);
            goto LABEL_55;
          }
LABEL_75:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
LABEL_74:
        abort();
      }
      if (*(_BYTE *)(a1 + 1))
      {
        v19 = *(double **)(a4 + 8);
        v18 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v19 >= v18)
        {
          v52 = *(double **)a4;
          v53 = ((uint64_t)v19 - *(_QWORD *)a4) >> 4;
          v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 60)
            goto LABEL_74;
          v55 = v18 - (_QWORD)v52;
          if (v55 >> 3 > v54)
            v54 = v55 >> 3;
          v25 = (unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0;
          v56 = 0xFFFFFFFFFFFFFFFLL;
          if (!v25)
            v56 = v54;
          if (v56 >> 60)
            goto LABEL_75;
          v57 = 16 * v56;
          v58 = (char *)operator new(16 * v56);
          v59 = (double *)&v58[16 * v53];
          v60 = &v58[v57];
          *v59 = *(double *)(a1 + 16);
          v59[1] = a5;
          v20 = v59 + 2;
          if (v19 == v52)
          {
            v61 = &v58[16 * v53];
          }
          else
          {
            do
            {
              v61 = (char *)(v59 - 2);
              *((_OWORD *)v59 - 1) = *((_OWORD *)v19 - 1);
              v19 -= 2;
              v59 -= 2;
            }
            while (v19 != v52);
          }
          *(_QWORD *)a4 = v61;
          *(_QWORD *)(a4 + 8) = v20;
          *(_QWORD *)(a4 + 16) = v60;
          if (v52)
            operator delete(v52);
        }
        else
        {
          *v19 = *(double *)(a1 + 16);
          v19[1] = a5;
          v20 = v19 + 2;
        }
        *(_QWORD *)(a4 + 8) = v20;
        *(_BYTE *)(a1 + 1) = 0;
        goto LABEL_72;
      }
      break;
  }
}

void std::__function::__func<md::MuninRoadGraphZData::walkComposedEdge(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,md::ComposedRoadEdgeWalker &,double,md::ComposedRoadEdgeZSamplingInfo &)::$_1,std::allocator<md::MuninRoadGraphZData::walkComposedEdge(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,md::ComposedRoadEdgeWalker &,double,md::ComposedRoadEdgeZSamplingInfo &)::$_1>,double ()(double const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MuninRoadGraphZData::walkComposedEdge(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,md::ComposedRoadEdgeWalker &,double,md::ComposedRoadEdgeZSamplingInfo &)::$_1,std::allocator<md::MuninRoadGraphZData::walkComposedEdge(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,md::ComposedRoadEdgeWalker &,double,md::ComposedRoadEdgeZSamplingInfo &)::$_1>,double ()(double const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D02C8;
  return result;
}

void std::__function::__func<md::MuninRoadGraphZData::walkComposedEdge(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,md::ComposedRoadEdgeWalker &,double,md::ComposedRoadEdgeZSamplingInfo &)::$_1,std::allocator<md::MuninRoadGraphZData::walkComposedEdge(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,md::ComposedRoadEdgeWalker &,double,md::ComposedRoadEdgeZSamplingInfo &)::$_1>,double ()(double const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D02C8;
}

double std::__function::__func<md::MuninRoadGraphZData::walkComposedEdge(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,md::ComposedRoadEdgeWalker &,double,md::ComposedRoadEdgeZSamplingInfo &)::$_1,std::allocator<md::MuninRoadGraphZData::walkComposedEdge(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,md::ComposedRoadEdgeWalker &,double,md::ComposedRoadEdgeZSamplingInfo &)::$_1>,double ()(double const&)>::operator()(uint64_t a1, double *a2)
{
  double result;

  result = 10.0;
  if (*a2 >= 0.1)
    return 1.0 / *a2;
  return result;
}

void std::__function::__func<md::MuninRoadGraphZData::processJunctions(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&)::$_0,std::allocator<md::MuninRoadGraphZData::processJunctions(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&)::$_0>,double ()(double const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MuninRoadGraphZData::processJunctions(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&)::$_0,std::allocator<md::MuninRoadGraphZData::processJunctions(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&)::$_0>,double ()(double const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D0280;
  return result;
}

void std::__function::__func<md::MuninRoadGraphZData::processJunctions(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&)::$_0,std::allocator<md::MuninRoadGraphZData::processJunctions(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&)::$_0>,double ()(double const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D0280;
}

double std::__function::__func<md::MuninRoadGraphZData::processJunctions(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&)::$_0,std::allocator<md::MuninRoadGraphZData::processJunctions(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&)::$_0>,double ()(double const&)>::operator()(uint64_t a1, double *a2)
{
  double result;

  result = 10.0;
  if (*a2 >= 0.1)
    return 1.0 / *a2;
  return result;
}

uint64_t *md::FrameGraphPassBuilder::addAttachmentInput(uint64_t *result, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  unsigned int v6;
  uint64_t **v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;

  v3 = result;
  v5 = (uint64_t **)(result + 11);
  v4 = (uint64_t *)result[11];
  if (v4)
  {
    v6 = *a2;
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v4;
        v8 = (unsigned __int8 *)v4[4];
        v9 = *v8;
        if (v6 == v9)
          break;
        if (v6 >= v9)
        {
          if (v9 >= v6)
            return result;
          goto LABEL_10;
        }
LABEL_3:
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_13;
      }
      if (*((_QWORD *)a2 + 3) + (unint64_t)*((unsigned int *)a2 + 5) < *((_QWORD *)v8 + 3)
                                                                             + (unint64_t)*((unsigned int *)v8 + 5))
        goto LABEL_3;
      if (*((_QWORD *)v8 + 3) + (unint64_t)*((unsigned int *)v8 + 5) >= *((_QWORD *)a2 + 3)
                                                                              + (unint64_t)*((unsigned int *)a2
                                                                                                  + 5))
        return result;
LABEL_10:
      v5 = v7 + 1;
      v4 = v7[1];
      if (!v4)
        goto LABEL_13;
    }
  }
  v7 = (uint64_t **)(result + 11);
LABEL_13:
  v10 = (uint64_t *)operator new(0x28uLL);
  v10[4] = (uint64_t)a2;
  *v10 = 0;
  v10[1] = 0;
  v10[2] = (uint64_t)v7;
  *v5 = v10;
  v11 = *(_QWORD *)v3[10];
  if (v11)
  {
    v3[10] = v11;
    v12 = *v5;
  }
  else
  {
    v12 = v10;
  }
  result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[11], v12);
  ++v3[12];
  return result;
}

uint64_t *md::FrameGraphPassBuilder::dependsOn(uint64_t *result, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t **v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v3 = result;
  v5 = (uint64_t **)(result + 8);
  v4 = result[8];
  if (v4)
  {
    v6 = *a2;
    while (1)
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = **(unsigned __int8 **)(v4 + 32);
        if (v6 >= v8)
          break;
        v4 = *v7;
        v5 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= v6)
        break;
      v5 = (uint64_t **)(v7 + 1);
      v4 = v7[1];
      if (!v4)
        goto LABEL_9;
    }
  }
  else
  {
    v7 = result + 8;
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = (uint64_t)a2;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v5 = v9;
    v10 = *(_QWORD *)v3[7];
    if (v10)
    {
      v3[7] = v10;
      v11 = *v5;
    }
    else
    {
      v11 = v9;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[8], v11);
    ++v3[9];
  }
  return result;
}

void sub_19FB46108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB4611C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void sub_19FB464A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB466A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB46888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FB469D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FB46E88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB46E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19FB4719C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB471AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19FB4741C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,char a25)
{
  void *v25;
  void *v26;
  id *v27;
  id *v28;

  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_19FB476D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,char a25)
{
  void *v25;

  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

void sub_19FB47958(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB48178(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FB49014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  void *v35;
  void *v36;
  void *v37;
  id *v38;
  uint64_t v39;

  objc_destroyWeak(v38);
  objc_destroyWeak((id *)(v39 - 168));

  _Unwind_Resume(a1);
}

void sub_19FB49414(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB49484(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB49718(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FB4AA74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19FB4AE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19FB4B0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB4B684(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB4B828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FB4B980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FB4BFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);

  _Unwind_Resume(a1);
}

void sub_19FB4C1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, id location)
{
  void *v16;
  void *v17;
  void *v18;
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_19FB4C494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FB4C640(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB4CA34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB4CA48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void sub_19FB4D670(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB4D68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_19FB4D81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FB4D974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FB4DC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FB4DD08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB4E138(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB4E22C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB4E2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB4E564(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB4E574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_72c39_ZTSN3geo12Coordinate3DINS_7RadiansEdEE(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[4].n128_u64[1] = a2[4].n128_u64[1];
  result = a2[5];
  a1[5] = result;
  return result;
}

void sub_19FB4E8D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19FB4EA4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19FB4EB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_40c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE96c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  result = *(double *)(a2 + 144);
  *(double *)(a1 + 144) = result;
  return result;
}

void sub_19FB4F2A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB4F378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_88c39_ZTSN3geo12Coordinate2DINS_7RadiansEdEE(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  result = *(double *)(a2 + 96);
  *(double *)(a1 + 96) = result;
  return result;
}

void sub_19FB4F400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB4F51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FB4F5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB4F67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FB4F70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB4F818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FB4F8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB4FA1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19FB4FA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB4FC0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB4FE94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FB50440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t *v13;
  void *v14;
  va_list va;

  va_start(va, a13);

  std::unordered_set<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::~unordered_set[abi:nn180100](v13);
  std::unordered_set<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::~unordered_set[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19FB5054C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19FB506A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB50DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19FB51888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19FB51F80(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  va_list va;

  va_start(va, a15);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FB52B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  uint64_t v5;
  va_list va;

  va_start(va, a3);

  md::RoadSignTextMetrics::~RoadSignTextMetrics((md::RoadSignTextMetrics *)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v5 - 160);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v5 - 136);
  _Unwind_Resume(a1);
}

void sub_19FB52BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;

  v31 = *(std::__shared_weak_count **)(v29 + 184);
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = *(std::__shared_weak_count **)(v29 + 168);
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_19FB52D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB52FD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB5311C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FB54DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_19FB556FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19FB56100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_19FB56A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,char a58)
{
  void *v58;
  void *v59;
  void *v60;
  void *v61;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void sub_19FB56EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_19FB56F3C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FB5718C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_19FB574A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB576EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB58028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id *__p,id *a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  id *v49;
  id *v50;

  if (__p)
  {
    v49 = a42;
    v50 = __p;
    if (a42 != __p)
    {
      do
      {

        if (*((char *)v49 - 9) < 0)
          operator delete(*(v49 - 4));
        v49 -= 4;
      }
      while (v49 != __p);
      v50 = __p;
    }
    operator delete(v50);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19FB58300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19FB5878C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unordered_map<GeoCodecsConnectivityJunction *,long,std::hash<GeoCodecsConnectivityJunction *>,std::equal_to<GeoCodecsConnectivityJunction *>,geo::StdAllocator<std::pair<GeoCodecsConnectivityJunction * const,long>,mdm::Allocator>>::~unordered_map[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19FB58CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a30, 8);
  if (a36)
  {
    a37 = a36;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a39 + 40))(a39, a36, a38 - a36);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__21786(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  a1[4].n128_u64[1] = a2[4].n128_u64[1];
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__21787(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 48);
  if (v1)
  {
    *(_QWORD *)(result + 56) = v1;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 72) + 40))(*(_QWORD *)(result + 72), v1, *(_QWORD *)(result + 64) - v1);
  }
  return result;
}

__n128 __Block_byref_object_copy__15(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  unsigned int *v9;
  unint64_t i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  __n128 v15;
  uint64_t v16;
  int *v17;
  __n128 v18;
  __n128 v19;
  unsigned int v20;
  unsigned int v21;
  float v22;
  unint64_t v23;
  unint64_t k;
  BOOL v25;
  float v26;
  unint64_t m;
  float v28;
  BOOL v29;
  float v31;
  unint64_t v33;
  unsigned int v34;
  BOOL v35;
  float v36;
  BOOL v37;
  unsigned int v38;
  float v39;
  BOOL v40;
  __n128 v41;
  unint64_t v42;
  unsigned int v43;
  BOOL v44;
  float v45;
  float v46;
  float v47;
  unint64_t j;
  unsigned int v49;
  float v50;
  unsigned int v51;
  BOOL v52;
  float v53;
  BOOL v54;
  unsigned int v55;
  float v56;
  BOOL v57;
  float v58;
  _OWORD *v59;
  BOOL v61;
  uint64_t v62;
  _OWORD *v63;
  unint64_t v64;
  _OWORD *v65;
  unsigned int v66;
  float v67;
  float v68;
  unint64_t v69;
  uint64_t v70;
  float *v71;
  unsigned int v72;
  float v73;
  int64_t v74;
  int64_t v75;
  unint64_t v76;
  int64_t v77;
  uint64_t v78;
  unsigned int v79;
  BOOL v80;
  float v81;
  float v82;
  unint64_t v83;
  unsigned int v84;
  float v85;
  float v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  BOOL v91;
  float v92;
  float v93;
  float v94;
  uint64_t v95;
  uint64_t v97;
  unint64_t v98;
  _OWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  float v105;
  float v106;
  _OWORD *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  float *v111;
  unsigned int v112;
  float v113;
  float v114;
  unint64_t v115;
  float *v116;
  unint64_t v117;
  float v118;
  uint64_t v119;
  unsigned int v120;
  float v121;
  float v122;
  unint64_t v123;
  uint64_t v124;
  unsigned int v125;
  BOOL v126;
  float v127;
  __n128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;

void sub_19FB5A38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t VectorTileMapper::mapNodeJunctionToTile(geo::MapNode **a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  geo::MapNode::tile(*a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "vectorTilePtr");
    v6 = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)())v12->__on_zero_shared)();
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    v6 = 0;
  }

  if (!geo::codec::TileKeyEquals((_QWORD *)(a2 + 4), (_QWORD *)(v6 + 4)) || *(_DWORD *)a2 != *(_DWORD *)v6)
    return 0;
  result = geo::MapNode::junction(*a1);
  if (!result)
    return result;
  v10 = (result - *(_QWORD *)(v6 + 688)) >> 5;
  if (v10 < *(_QWORD *)(a2 + 696))
    return *(_QWORD *)(a2 + 688) + 32 * v10;
  else
    return 0;
}

void sub_19FB5A4F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(uint64_t a1, int *a2, uint64_t a3, __n128 result)
{
  unsigned int v4;
  BOOL v5;
  float v6;
  BOOL v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v4 = *a2;
  v5 = *a2 >= *(_DWORD *)a1;
  if (*a2 != *(_DWORD *)a1)
  {
LABEL_4:
    if (!v5)
      goto LABEL_5;
LABEL_11:
    if (*(_DWORD *)a3 == v4)
    {
      result.n128_u32[0] = *(_DWORD *)(a3 + 4);
      v10 = *((float *)a2 + 1);
      if (vabds_f32(result.n128_f32[0], v10) >= 0.00000011921)
      {
        if (result.n128_f32[0] >= v10)
          return result;
      }
      else if (*(_QWORD *)(a3 + 8) >= *((_QWORD *)a2 + 1))
      {
        return result;
      }
    }
    else if (*(_DWORD *)a3 >= v4)
    {
      return result;
    }
    result = *(__n128 *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(__n128 *)a3 = result;
    if (*a2 == *(_DWORD *)a1)
    {
      result.n128_u32[0] = a2[1];
      v12 = *(float *)(a1 + 4);
      if (vabds_f32(result.n128_f32[0], v12) >= 0.00000011921)
      {
        if (result.n128_f32[0] >= v12)
          return result;
      }
      else if (*((_QWORD *)a2 + 1) >= *(_QWORD *)(a1 + 8))
      {
        return result;
      }
    }
    else if (*a2 >= *(_DWORD *)a1)
    {
      return result;
    }
    result = *(__n128 *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(__n128 *)a2 = result;
    return result;
  }
  result.n128_u32[0] = a2[1];
  v6 = *(float *)(a1 + 4);
  if (vabds_f32(result.n128_f32[0], v6) < 0.00000011921)
  {
    v5 = *((_QWORD *)a2 + 1) >= *(_QWORD *)(a1 + 8);
    goto LABEL_4;
  }
  if (result.n128_f32[0] >= v6)
    goto LABEL_11;
LABEL_5:
  v7 = *(_DWORD *)a3 >= v4;
  if (*(_DWORD *)a3 == v4)
  {
    v8 = *(float *)(a3 + 4);
    v9 = *((float *)a2 + 1);
    if (vabds_f32(v8, v9) >= 0.00000011921)
    {
      if (v8 < v9)
        goto LABEL_9;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(a3 + 8) >= *((_QWORD *)a2 + 1);
  }
  if (!v7)
  {
LABEL_9:
    result = *(__n128 *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a3;
LABEL_33:
    *(__n128 *)a3 = result;
    return result;
  }
LABEL_18:
  result = *(__n128 *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(__n128 *)a2 = result;
  if (*(_DWORD *)a3 == *a2)
  {
    result.n128_u32[0] = *(_DWORD *)(a3 + 4);
    v11 = *((float *)a2 + 1);
    if (vabds_f32(result.n128_f32[0], v11) >= 0.00000011921)
    {
      if (result.n128_f32[0] < v11)
      {
LABEL_32:
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        goto LABEL_33;
      }
    }
    else if (*(_QWORD *)(a3 + 8) < *((_QWORD *)a2 + 1))
    {
      goto LABEL_32;
    }
  }
  else if (*(_DWORD *)a3 < *a2)
  {
    goto LABEL_32;
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  __n128 result;
  BOOL v10;
  float v11;
  BOOL v12;
  float v13;
  BOOL v14;
  float v15;

  result.n128_u64[0] = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(a1, (int *)a2, a3, a5).n128_u64[0];
  v10 = *(_DWORD *)a4 >= *(_DWORD *)a3;
  if (*(_DWORD *)a4 != *(_DWORD *)a3)
  {
LABEL_4:
    if (v10)
      return result;
    goto LABEL_8;
  }
  result.n128_u32[0] = *(_DWORD *)(a4 + 4);
  v11 = *(float *)(a3 + 4);
  if (vabds_f32(result.n128_f32[0], v11) < 0.00000011921)
  {
    v10 = *(_QWORD *)(a4 + 8) >= *(_QWORD *)(a3 + 8);
    goto LABEL_4;
  }
  if (result.n128_f32[0] >= v11)
    return result;
LABEL_8:
  result = *(__n128 *)a3;
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(__n128 *)a4 = result;
  v12 = *(_DWORD *)a3 >= *(_DWORD *)a2;
  if (*(_DWORD *)a3 != *(_DWORD *)a2)
    goto LABEL_11;
  result.n128_u32[0] = *(_DWORD *)(a3 + 4);
  v13 = *(float *)(a2 + 4);
  if (vabds_f32(result.n128_f32[0], v13) < 0.00000011921)
  {
    v12 = *(_QWORD *)(a3 + 8) >= *(_QWORD *)(a2 + 8);
LABEL_11:
    if (v12)
      return result;
    goto LABEL_15;
  }
  if (result.n128_f32[0] >= v13)
    return result;
LABEL_15:
  result = *(__n128 *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(__n128 *)a3 = result;
  v14 = *(_DWORD *)a2 >= *(_DWORD *)a1;
  if (*(_DWORD *)a2 != *(_DWORD *)a1)
    goto LABEL_18;
  result.n128_u32[0] = *(_DWORD *)(a2 + 4);
  v15 = *(float *)(a1 + 4);
  if (vabds_f32(result.n128_f32[0], v15) < 0.00000011921)
  {
    v14 = *(_QWORD *)(a2 + 8) >= *(_QWORD *)(a1 + 8);
LABEL_18:
    if (v14)
      return result;
    goto LABEL_19;
  }
  if (result.n128_f32[0] >= v15)
    return result;
LABEL_19:
  result = *(__n128 *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(__n128 *)a2 = result;
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  __n128 result;
  BOOL v12;
  float v13;
  BOOL v14;
  float v15;
  BOOL v16;
  float v17;
  BOOL v18;
  float v19;

  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(a1, a2, a3, a4, a6).n128_u64[0];
  v12 = *(_DWORD *)a5 >= *(_DWORD *)a4;
  if (*(_DWORD *)a5 != *(_DWORD *)a4)
  {
LABEL_4:
    if (v12)
      return result;
    goto LABEL_8;
  }
  result.n128_u32[0] = *(_DWORD *)(a5 + 4);
  v13 = *(float *)(a4 + 4);
  if (vabds_f32(result.n128_f32[0], v13) < 0.00000011921)
  {
    v12 = *(_QWORD *)(a5 + 8) >= *(_QWORD *)(a4 + 8);
    goto LABEL_4;
  }
  if (result.n128_f32[0] >= v13)
    return result;
LABEL_8:
  result = *(__n128 *)a4;
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(__n128 *)a5 = result;
  v14 = *(_DWORD *)a4 >= *(_DWORD *)a3;
  if (*(_DWORD *)a4 != *(_DWORD *)a3)
    goto LABEL_11;
  result.n128_u32[0] = *(_DWORD *)(a4 + 4);
  v15 = *(float *)(a3 + 4);
  if (vabds_f32(result.n128_f32[0], v15) < 0.00000011921)
  {
    v14 = *(_QWORD *)(a4 + 8) >= *(_QWORD *)(a3 + 8);
LABEL_11:
    if (v14)
      return result;
    goto LABEL_15;
  }
  if (result.n128_f32[0] >= v15)
    return result;
LABEL_15:
  result = *(__n128 *)a3;
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(__n128 *)a4 = result;
  v16 = *(_DWORD *)a3 >= *(_DWORD *)a2;
  if (*(_DWORD *)a3 != *(_DWORD *)a2)
    goto LABEL_18;
  result.n128_u32[0] = *(_DWORD *)(a3 + 4);
  v17 = *(float *)(a2 + 4);
  if (vabds_f32(result.n128_f32[0], v17) < 0.00000011921)
  {
    v16 = *(_QWORD *)(a3 + 8) >= *(_QWORD *)(a2 + 8);
LABEL_18:
    if (v16)
      return result;
    goto LABEL_22;
  }
  if (result.n128_f32[0] >= v17)
    return result;
LABEL_22:
  result = *(__n128 *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(__n128 *)a3 = result;
  v18 = *(_DWORD *)a2 >= *(_DWORD *)a1;
  if (*(_DWORD *)a2 != *(_DWORD *)a1)
    goto LABEL_25;
  result.n128_u32[0] = *(_DWORD *)(a2 + 4);
  v19 = *(float *)(a1 + 4);
  if (vabds_f32(result.n128_f32[0], v19) < 0.00000011921)
  {
    v18 = *(_QWORD *)(a2 + 8) >= *(_QWORD *)(a1 + 8);
LABEL_25:
    if (v18)
      return result;
    goto LABEL_26;
  }
  if (result.n128_f32[0] >= v19)
    return result;
LABEL_26:
  result = *(__n128 *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(__n128 *)a2 = result;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  _OWORD *v7;
  unsigned int v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  float v17;
  float v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  __int128 v23;

  v5 = (a2 - a1) >> 4;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = (_OWORD *)(a2 - 16);
      v8 = *(_DWORD *)(a2 - 16);
      if (v8 == *(_DWORD *)a1)
      {
        v9 = *(float *)(a2 - 12);
        v10 = *(float *)(a1 + 4);
        if (vabds_f32(v9, v10) >= 0.00000011921)
        {
          if (v9 >= v10)
            return result;
        }
        else if (*(_QWORD *)(a2 - 8) >= *(_QWORD *)(a1 + 8))
        {
          return result;
        }
      }
      else if (v8 >= *(_DWORD *)a1)
      {
        return result;
      }
      v23 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *v7;
      *v7 = v23;
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(a1, (int *)(a1 + 16), a2 - 16, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(a1, a1 + 16, a1 + 32, a2 - 16, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16, a3);
      return 1;
    default:
      v11 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(a1, (int *)(a1 + 16), a1 + 32, a3);
      v12 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (2)
  {
    v16 = *(_DWORD *)v12;
    if (*(_DWORD *)v12 == *(_DWORD *)v11)
    {
      v17 = *(float *)(v12 + 4);
      v18 = *(float *)(v11 + 4);
      if (vabds_f32(v17, v18) >= 0.00000011921)
      {
        if (v17 >= v18)
          goto LABEL_10;
      }
      else if (*(_QWORD *)(v12 + 8) >= *(_QWORD *)(v11 + 8))
      {
        goto LABEL_10;
      }
    }
    else
    {
      if (v16 >= *(_DWORD *)v11)
        goto LABEL_10;
      v17 = *(float *)(v12 + 4);
    }
    v19 = *(_QWORD *)(v12 + 8);
    *(_OWORD *)v12 = *(_OWORD *)v11;
    v15 = a1;
    if (v11 == a1)
      goto LABEL_9;
    v20 = v13;
    while (1)
    {
      v21 = *(_DWORD *)(a1 + v20 + 16);
      if (v16 != v21)
        break;
      v22 = *(float *)(a1 + v20 + 20);
      if (vabds_f32(v17, v22) >= 0.00000011921)
      {
        if (v17 >= v22)
        {
LABEL_27:
          v15 = v11;
          goto LABEL_9;
        }
      }
      else if (v19 >= *(_QWORD *)(a1 + v20 + 24))
      {
        goto LABEL_27;
      }
LABEL_21:
      v11 -= 16;
      *(_OWORD *)(a1 + v20 + 32) = *(_OWORD *)(a1 + v20 + 16);
      v20 -= 16;
      if (v20 == -32)
      {
        v15 = a1;
        goto LABEL_9;
      }
    }
    if (v16 < v21)
      goto LABEL_21;
    v15 = a1 + v20 + 32;
LABEL_9:
    *(_DWORD *)v15 = v16;
    *(float *)(v15 + 4) = v17;
    *(_QWORD *)(v15 + 8) = v19;
    if (++v14 == 8)
      return v12 + 16 == a2;
LABEL_10:
    v11 = v12;
    v13 += 16;
    v12 += 16;
    if (v12 != a2)
      continue;
    return 1;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<GeoCodecsConnectivityJunction *,long>,std::__unordered_map_hasher<GeoCodecsConnectivityJunction *,std::__hash_value_type<GeoCodecsConnectivityJunction *,long>,std::hash<GeoCodecsConnectivityJunction *>,std::equal_to<GeoCodecsConnectivityJunction *>,true>,std::__unordered_map_equal<GeoCodecsConnectivityJunction *,std::__hash_value_type<GeoCodecsConnectivityJunction *,long>,std::equal_to<GeoCodecsConnectivityJunction *>,std::hash<GeoCodecsConnectivityJunction *>,true>,geo::StdAllocator<std::__hash_value_type<GeoCodecsConnectivityJunction *,long>,mdm::Allocator>>::__emplace_unique_key_args<GeoCodecsConnectivityJunction *,std::piecewise_construct_t const&,std::tuple<GeoCodecsConnectivityJunction * const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD **a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v41;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 4) + 16))(*((_QWORD *)a1 + 4), 32, 8);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = **a3;
  v12[3] = 0;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 5) + 1);
  v16 = a1[12];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v9 = *((_QWORD *)a1 + 1);
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_58;
      v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 5) / a1[12]);
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
LABEL_58:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 - 1) & v8;
        }
        goto LABEL_71;
      }
      if (!prime)
      {
        v41 = *(_QWORD *)a1;
        *(_QWORD *)a1 = 0;
        if (v41)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v41, 8 * *((_QWORD *)a1 + 1));
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_58;
      }
    }
    v21 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(**((_QWORD **)a1 + 2) + 16))(*((_QWORD *)a1 + 2), 8 * prime, 8);
    v22 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v21;
    if (v22)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v22, 8 * *((_QWORD *)a1 + 1));
    v23 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    v25 = (uint64_t *)(a1 + 6);
    v24 = (_QWORD *)*((_QWORD *)a1 + 3);
    if (!v24)
    {
LABEL_57:
      v9 = prime;
      goto LABEL_58;
    }
    v26 = v24[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v25;
      for (i = (_QWORD *)*v24; *v24; i = (_QWORD *)*v24)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v24 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
        {
          *v24 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v31);
          **(_QWORD **)(*(_QWORD *)a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v24;
          v24 = i;
          v28 = v30;
        }
      }
      goto LABEL_57;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v25;
    v35 = (_QWORD *)*v24;
    if (!*v24)
      goto LABEL_57;
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 != v26)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v24;
          goto LABEL_62;
        }
        *v24 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*(_QWORD *)a1 + v36);
        **(_QWORD **)(*(_QWORD *)a1 + v36) = v35;
        v35 = v24;
      }
      v37 = v26;
LABEL_62:
      v24 = v35;
      v35 = (_QWORD *)*v35;
      v26 = v37;
      if (!v35)
        goto LABEL_57;
    }
  }
LABEL_71:
  v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v38)
  {
    *v12 = *v38;
LABEL_79:
    *v38 = v12;
    goto LABEL_80;
  }
  *v12 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = v12;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 6;
  if (*v12)
  {
    v39 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v39 >= v9)
        v39 %= v9;
    }
    else
    {
      v39 &= v9 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_79;
  }
LABEL_80:
  ++*((_QWORD *)a1 + 5);
  return v12;
}

void sub_19FB5B0B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 32) + 40))(*(_QWORD *)(v1 + 32), v2, 32);
  _Unwind_Resume(a1);
}

uint64_t *std::unordered_map<GeoCodecsConnectivityJunction *,long,std::hash<GeoCodecsConnectivityJunction *>,std::equal_to<GeoCodecsConnectivityJunction *>,geo::StdAllocator<std::pair<GeoCodecsConnectivityJunction * const,long>,mdm::Allocator>>::~unordered_map[abi:nn180100](uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      (*(void (**)(uint64_t))(*(_QWORD *)a1[4] + 40))(a1[4]);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *a1;
  *a1 = 0;
  if (v4)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v4, 8 * a1[1]);
  return a1;
}

uint64_t std::pair<std::string,VKLabelNavJunction * {__strong}>::~pair(uint64_t a1)
{

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::pair<std::string,VKLabelNavJunction * {__strong}>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;

    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19FB5B288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FB5B3D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FB5B884(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::make_shared[abi:nn180100]<md::NavCurrentRoadSign,NSString * {__strong},std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &,gm::Matrix<float,2,1> const&,float,VKRoadSignArtwork * {__strong}&,short &,void>(uint64_t a1, void *a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t *a5, float *a6, void **a7, __int16 *a8)
{
  char *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  float v19;
  void *v20;
  __int16 v21;
  id v22;
  unint64_t *v23;
  unint64_t v24;
  id v25;
  id v26;
  const char *v27;
  unsigned __int8 v28;
  uint64_t v29;
  size_t v30;
  size_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  VKRoadSignArtwork *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  std::__shared_weak_count *v44;
  unsigned __int8 v45;
  void (***v46)(md::NavRoadSignLabelPart *__hidden);
  uint64_t v47;
  void (**v48)(md::NavRoadSignLabelPart *__hidden);
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  geo::read_write_lock *v56;
  const char *v57;
  malloc_zone_t *zone;
  uint64_t v59;
  geo::read_write_lock *v60;
  const char *v61;
  malloc_zone_t *v62;
  _QWORD *v64;
  VKRoadSignArtwork *v65;
  md::RoadSignLabelIcon *v66;
  std::__shared_weak_count *v67;

  v15 = (char *)operator new(0x180uLL);
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)v15 = &off_1E42DBDA0;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = *a5;
  v19 = *a6;
  v20 = *a7;
  v21 = *a8;
  v22 = a2;
  v65 = v20;
  if (a4)
  {
    v23 = (unint64_t *)&a4->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = v22;
  *((_QWORD *)v15 + 4) = 0;
  *((_QWORD *)v15 + 5) = 0;
  *((_QWORD *)v15 + 3) = &off_1E42AF5A8;
  v15[48] = 0;
  *(_WORD *)(v15 + 49) = 1;
  v15[51] = 0;
  v26 = objc_retainAutorelease(v25);
  v27 = (const char *)objc_msgSend(v26, "UTF8String");
  {
    v55 = operator new();
    *(_QWORD *)(v55 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v55 + 24) = "VectorKitLabels";
    *(_OWORD *)(v55 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v55 = &off_1E42B5668;
    *(_QWORD *)(v55 + 8) = "VectorKitLabels";
    *(_OWORD *)(v55 + 72) = 0u;
    *(_OWORD *)(v55 + 88) = 0u;
    *(_OWORD *)(v55 + 104) = 0u;
    *(_OWORD *)(v55 + 120) = 0u;
    *(_OWORD *)(v55 + 136) = 0u;
    *(_OWORD *)(v55 + 152) = 0u;
    *(_OWORD *)(v55 + 168) = 0u;
    *(_OWORD *)(v55 + 184) = 0u;
    *(_OWORD *)(v55 + 200) = 0u;
    *(_OWORD *)(v55 + 216) = 0u;
    *(_OWORD *)(v55 + 232) = 0u;
    *(_QWORD *)(v55 + 248) = 0;
    *(_OWORD *)(v55 + 56) = 0u;
    v56 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v55 + 56), 0);
    if ((_DWORD)v56)
      geo::read_write_lock::logFailure(v56, (uint64_t)"initialization", v57);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v55 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v55 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v55;
  }
  v29 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)v15 + 10) = mdm::Allocator::instance(void)::alloc;
  v30 = strlen(v27);
  if (v30 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v31 = v30;
  if (v30 >= 0x17)
  {
    v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v33 = v30 | 7;
    v34 = v33 + 1;
    v32 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v33 + 1, 1);
    *((_QWORD *)v15 + 8) = v31;
    *((_QWORD *)v15 + 9) = v34 | 0x8000000000000000;
    *((_QWORD *)v15 + 7) = v32;
    goto LABEL_15;
  }
  v32 = v15 + 56;
  v15[79] = v30;
  if (v30)
LABEL_15:
    memmove(v32, v27, v31);
  *((_BYTE *)v32 + v31) = 0;
  *((_QWORD *)v15 + 11) = 0;
  *((_QWORD *)v15 + 12) = 0;
  *((_QWORD *)v15 + 13) = a3;
  *((_QWORD *)v15 + 14) = a4;
  v35 = v65;
  if (a4)
  {
    v36 = (unint64_t *)&a4->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v15[128] = 0;
  *((_QWORD *)v15 + 15) = 0;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_OWORD *)(v15 + 168) = 0u;
  *(_OWORD *)(v15 + 184) = 0u;
  *(_OWORD *)(v15 + 200) = 0u;
  *((_DWORD *)v15 + 54) = 0;
  *(_QWORD *)(v15 + 220) = 1065353216;
  *((_WORD *)v15 + 114) = 256;
  *(_OWORD *)(v15 + 232) = 0u;
  *(_OWORD *)(v15 + 248) = 0u;
  *((_DWORD *)v15 + 66) = 0;
  *(_QWORD *)(v15 + 268) = 1065353216;
  *(_DWORD *)(v15 + 275) = 0;
  *((_DWORD *)v15 + 73) = 0;
  *((_WORD *)v15 + 144) = 0;
  *((_QWORD *)v15 + 35) = 0;
  *((_DWORD *)v15 + 74) = 1065353216;
  v15[300] = 0;
  v15[304] = 0;
  *((_DWORD *)v15 + 77) = 1056964608;
  *((_QWORD *)v15 + 39) = 0;
  *(_QWORD *)(v15 + 322) = 0;
  *(_QWORD *)(v15 + 330) = 0;
  *(_QWORD *)(v15 + 338) = 0;
  *(_DWORD *)(v15 + 345) = 0;
  v15[349] = 1;
  *(_QWORD *)(v15 + 366) = 0;
  *(_QWORD *)(v15 + 350) = 0;
  *(_QWORD *)(v15 + 358) = 0;
  *((_WORD *)v15 + 187) = 0;
  *(_QWORD *)(v15 + 324) = v18;
  *((_WORD *)v15 + 160) = 257;

  if (a4)
  {
    v38 = (unint64_t *)&a4->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  *((_QWORD *)v15 + 3) = &off_1E42951E0;
  *((_DWORD *)v15 + 94) = 0;
  -[VKRoadSignArtwork localRenderBounds](v65, "localRenderBounds", a1);
  v42 = v41 - v40;
  v43 = v19 * (float)v21;
  *((_DWORD *)v15 + 70) = 0;
  *((float *)v15 + 71) = v43 + (float)(v42 * 0.5);
  *((float *)v15 + 94) = v42 + v43;
  v44 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v44->__shared_owners_ = 0;
  v44->__shared_weak_owners_ = 0;
  v44->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB9B0;
  v66 = md::RoadSignLabelIcon::RoadSignLabelIcon((md::RoadSignLabelIcon *)&v44[1], v65);
  v67 = v44;
  {
    v59 = operator new();
    *(_QWORD *)(v59 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v59 + 24) = "VectorKitLabels";
    *(_OWORD *)(v59 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v59 = &off_1E42B5668;
    *(_QWORD *)(v59 + 8) = "VectorKitLabels";
    *(_OWORD *)(v59 + 72) = 0u;
    *(_OWORD *)(v59 + 88) = 0u;
    *(_OWORD *)(v59 + 104) = 0u;
    *(_OWORD *)(v59 + 120) = 0u;
    *(_OWORD *)(v59 + 136) = 0u;
    *(_OWORD *)(v59 + 152) = 0u;
    *(_OWORD *)(v59 + 168) = 0u;
    *(_OWORD *)(v59 + 184) = 0u;
    *(_OWORD *)(v59 + 200) = 0u;
    *(_OWORD *)(v59 + 216) = 0u;
    *(_OWORD *)(v59 + 232) = 0u;
    *(_QWORD *)(v59 + 248) = 0;
    *(_OWORD *)(v59 + 56) = 0u;
    v60 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v59 + 56), 0);
    if ((_DWORD)v60)
      geo::read_write_lock::logFailure(v60, (uint64_t)"initialization", v61);
    v62 = malloc_create_zone(0, 0);
    *(_QWORD *)(v59 + 48) = v62;
    malloc_set_zone_name(v62, "VectorKitLabels");
    *(_QWORD *)(v59 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v59;
    v35 = v65;
  }
  v46 = (void (***)(md::NavRoadSignLabelPart *__hidden))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 848, 8);
  md::IconLabelPart::IconLabelPart((uint64_t)v46, &v66);
  *(_BYTE *)(v47 + 766) = 9;
  *(_BYTE *)(v47 + 768) = 0;
  *(_OWORD *)(v47 + 816) = 0u;
  *(_OWORD *)(v47 + 832) = 0u;
  *(_OWORD *)(v47 + 776) = 0u;
  *(_OWORD *)(v47 + 792) = 0u;
  *(_BYTE *)(v47 + 808) = 0;
  *(_BYTE *)(v47 + 557) = 3;
  *(_BYTE *)(v47 + 656) = 3;
  *(_BYTE *)(v47 + 664) = 0;
  v48 = off_1E42997C0;
  *(_QWORD *)v47 = off_1E42997C0;
  v49 = *((_QWORD *)v15 + 39);
  *((_QWORD *)v15 + 39) = v46;
  if (v49)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v48 = *v46;
  }
  ((void (*)(void (***)(md::NavRoadSignLabelPart *__hidden), char *))v48[3])(v46, v15 + 200);
  v50 = v67;
  if (v67)
  {
    v51 = (unint64_t *)&v67->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }

  if (a4)
  {
    v53 = (unint64_t *)&a4->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  *v64 = v15 + 24;
  v64[1] = v15;
}

void sub_19FB5BF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12)
{
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  void *v14;
  md::NavLabel *v15;
  std::__shared_weak_count *v16;
  void *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21;

  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v18);
  md::NavLabel::~NavLabel(v15);

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::NavCurrentRoadSign>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBDA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::NavCurrentRoadSign>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBDA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::NavCurrentRoadSign>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

int *gss::RenderStyle<gss::ScenePropertyID>::styleValueForKeyAtZ<int>(uint64_t a1, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned int v26;
  uint64_t v27;
  int *result;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned __int8 *v36;
  unint64_t v37;
  _BYTE *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned int v41;

  v4 = *(_QWORD *)(a1 + 16 * a3 + 16);
  if (v4)
  {
    v6 = a1 + 16 * a3;
    v7 = *(unsigned __int16 *)(v6 + 56);
    if (!*(_WORD *)(v6 + 56))
      return gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<int>(*(int **)(v4 + 72), 0x42u, a2, a4);
    v8 = *(_QWORD *)(v6 + 48);
    v9 = v8 + 8 * v7;
    if (a2 >= 0x17)
      v10 = 23;
    else
      v10 = a2;
    while (1)
    {
      v12 = *(uint64_t **)(*(_QWORD *)v8 + 72);
      if (!v12)
        goto LABEL_8;
      v15 = *v12;
      v14 = v12 + 2;
      v13 = v15;
      v16 = v15 + 80 * *((unsigned __int8 *)v14 + a2);
      v17 = *(unsigned __int16 *)(v16 + 10);
      if (!*(_WORD *)(v16 + 10))
      {
        v11 = 0;
        goto LABEL_7;
      }
      v18 = *(unsigned __int8 **)v16;
      if (!*(_BYTE *)(v16 + 15))
        break;
      v19 = *(unsigned __int8 **)v16;
      v20 = v17;
      if (v17 >= 0x1E)
      {
        do
        {
          v23 = v20 >> 1;
          v24 = &v19[v20 >> 1];
          v26 = *v24;
          v25 = v24 + 1;
          v20 += ~(v20 >> 1);
          if (v26 < 0x42)
            v19 = v25;
          else
            v20 = v23;
        }
        while (v20);
        if (v19 == &v18[v17] || *v19 != 66)
          goto LABEL_8;
        goto LABEL_28;
      }
      v21 = 0;
      while (1)
      {
        v22 = v18[v21];
        if (v22 >= 0x42)
          break;
        if (v17 == ++v21)
          goto LABEL_8;
      }
      if (v22 == 66)
        v11 = v21;
      else
        v11 = v17;
LABEL_7:
      if ((_DWORD)v17 != v11)
      {
        v29 = *((unsigned __int8 *)v14 + v10);
        v30 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
        v31 = (unsigned __int8 *)*(unsigned __int16 *)(v30 + 42);
        if (!*(_WORD *)(v30 + 42))
          return &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        v32 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
        v33 = *(_QWORD *)(v32 + 32);
        if (*(_BYTE *)(v32 + 47))
        {
          if (v31 < 0x1E)
          {
            v34 = 0;
            result = &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            while (1)
            {
              v35 = v34[v33];
              if (v35 >= 0x42)
                break;
              if (v31 == ++v34)
                return result;
            }
            if (v35 != 66)
              LOWORD(v34) = (_WORD)v31;
            if (v31 <= (unsigned __int16)v34)
              return &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            return (int *)(v33 + *(unsigned __int16 *)(v13 + 80 * v29 + 40) + 4 * (unsigned __int16)v34);
          }
          v34 = *(unsigned __int8 **)(v32 + 32);
          v37 = (unint64_t)v31;
          do
          {
            v38 = (_BYTE *)(v37 >> 1);
            v39 = &v34[v37 >> 1];
            v41 = *v39;
            v40 = v39 + 1;
            v37 += ~(v37 >> 1);
            if (v41 < 0x42)
              v34 = v40;
            else
              v37 = (unint64_t)v38;
          }
          while (v37);
          if (v34 == &v31[v33] || *v34 != 66)
            return &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        else
        {
          v36 = v31;
          v34 = *(unsigned __int8 **)(v32 + 32);
          while (*v34 != 66)
          {
            ++v34;
            if (!--v36)
            {
              LOWORD(v34) = v33 + (_WORD)v31;
              break;
            }
          }
        }
        LOWORD(v34) = (_WORD)v34 - v33;
        if (v31 <= (unsigned __int16)v34)
          return &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        return (int *)(v33 + *(unsigned __int16 *)(v13 + 80 * v29 + 40) + 4 * (unsigned __int16)v34);
      }
LABEL_8:
      v8 += 8;
      if (v8 == v9)
        return gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<int>(*(int **)(v4 + 72), 0x42u, a2, a4);
    }
    v27 = *(unsigned __int16 *)(v16 + 10);
    v19 = *(unsigned __int8 **)v16;
    while (*v19 != 66)
    {
      ++v19;
      if (!--v27)
      {
        LOWORD(v19) = (_WORD)v18 + v17;
        break;
      }
    }
LABEL_28:
    v11 = (_WORD)v19 - (_WORD)v18;
    goto LABEL_7;
  }
  if (a4)
    *a4 = 0;
  return (int *)gss::defaultValueForKey<gss::ScenePropertyID,int>(66);
}

unsigned __int8 *gss::RenderStyle<gss::ScenePropertyID>::styleValueForKeyAtZ<BOOL>(unsigned __int8 *result, unsigned int a2, int a3, _BYTE *a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unsigned int v18;
  char *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned __int16 v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unint64_t v54;
  _BYTE *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned int v58;
  unint64_t v59;
  _BYTE *v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  unsigned int v63;
  uint64_t v64;

  v4 = *(_QWORD *)&result[16 * a3 + 16];
  if (!v4)
  {
    if (a4)
      *a4 = 0;
    return (unsigned __int8 *)gss::defaultValueForKey<gss::ScenePropertyID,BOOL>();
  }
  v5 = (char *)&result[16 * a3];
  v6 = *((unsigned __int16 *)v5 + 28);
  if (!*((_WORD *)v5 + 28))
  {
LABEL_32:
    v24 = *(uint64_t **)(v4 + 72);
    if (v24)
    {
      v25 = a2 >= 0x17 ? 23 : a2;
      v26 = *((unsigned __int8 *)v24 + v25 + 16);
      v27 = *v24;
      v28 = v27 + 80 * v26;
      v29 = *(unsigned __int16 *)(v28 + 10);
      if (*(_WORD *)(v28 + 10))
      {
        v30 = *(unsigned __int8 **)v28;
        if (!*(_BYTE *)(v28 + 15))
        {
          v40 = *(unsigned __int16 *)(v28 + 10);
          v41 = *(unsigned __int8 **)v28;
          while (*v41 != 62)
          {
            ++v41;
            if (!--v40)
            {
              LOWORD(v41) = (_WORD)v30 + v29;
              break;
            }
          }
LABEL_65:
          if ((_DWORD)v29 != (unsigned __int16)((_WORD)v41 - (_WORD)v30))
            goto LABEL_73;
          goto LABEL_66;
        }
        if (v29 < 0x1E)
        {
          v31 = 0;
          while (1)
          {
            v32 = v30[v31];
            if (v32 >= 0x3E)
              break;
            if (v29 == ++v31)
              goto LABEL_66;
          }
          if (v32 == 62)
            v47 = v31;
          else
            v47 = v29;
          if ((_DWORD)v29 != v47)
          {
LABEL_73:
            v48 = v27 + 80 * v26;
            v49 = (unsigned __int8 *)*(unsigned __int16 *)(v48 + 26);
            if (!*(_WORD *)(v48 + 26))
              return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            v50 = v27 + 80 * v26;
            v37 = *(_QWORD *)(v50 + 16);
            if (*(_BYTE *)(v50 + 31))
            {
              if (v49 < 0x1E)
              {
                v38 = 0;
                result = (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
                while (1)
                {
                  v51 = v38[v37];
                  if (v51 >= 0x3E)
                    break;
                  if (v49 == ++v38)
                    return result;
                }
                if (v51 != 62)
                  LOWORD(v38) = (_WORD)v49;
                if ((_DWORD)v49 == (unsigned __int16)v38)
                  return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
                goto LABEL_115;
              }
              v38 = *(unsigned __int8 **)(v50 + 16);
              v59 = (unint64_t)v49;
              do
              {
                v60 = (_BYTE *)(v59 >> 1);
                v61 = &v38[v59 >> 1];
                v63 = *v61;
                v62 = v61 + 1;
                v59 += ~(v59 >> 1);
                if (v63 < 0x3E)
                  v38 = v62;
                else
                  v59 = (unint64_t)v60;
              }
              while (v59);
              if (v38 == &v49[v37] || *v38 != 62)
                return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            }
            else
            {
              v53 = v49;
              v38 = *(unsigned __int8 **)(v50 + 16);
              while (*v38 != 62)
              {
                ++v38;
                if (!--v53)
                {
                  LOWORD(v38) = v37 + (_WORD)v49;
                  break;
                }
              }
            }
            LOWORD(v38) = (_WORD)v38 - v37;
            if ((_DWORD)v49 == (unsigned __int16)v38)
              return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
LABEL_115:
            if (v49 > (unsigned __int16)v38)
            {
              v64 = v27 + 80 * v26;
              return (unsigned __int8 *)(v37 + *(unsigned __int16 *)(v64 + 24) + (unsigned __int16)v38);
            }
            return result;
          }
          goto LABEL_66;
        }
        v41 = *(unsigned __int8 **)v28;
        v42 = v29;
        do
        {
          v43 = v42 >> 1;
          v44 = &v41[v42 >> 1];
          v46 = *v44;
          v45 = v44 + 1;
          v42 += ~(v42 >> 1);
          if (v46 < 0x3E)
            v41 = v45;
          else
            v42 = v43;
        }
        while (v42);
        if (v41 != &v30[v29] && *v41 == 62)
          goto LABEL_65;
      }
    }
LABEL_66:
    if (a4)
      *a4 = 0;
    return (unsigned __int8 *)gss::defaultValueForKey<gss::ScenePropertyID,BOOL>();
  }
  v7 = *((_QWORD *)v5 + 6);
  v8 = v7 + 8 * v6;
  if (a2 >= 0x17)
    v9 = 23;
  else
    v9 = a2;
  while (1)
  {
    v11 = *(uint64_t **)(*(_QWORD *)v7 + 72);
    if (!v11)
      goto LABEL_8;
    v14 = *v11;
    v13 = v11 + 2;
    v12 = v14;
    result = (unsigned __int8 *)(v14 + 80 * *((unsigned __int8 *)v13 + a2));
    v15 = (unsigned __int8 *)*((unsigned __int16 *)result + 5);
    if (!*((_WORD *)result + 5))
    {
      v10 = 0;
      goto LABEL_7;
    }
    v16 = *(unsigned __int8 **)result;
    if (!result[15])
    {
      v23 = *((unsigned __int16 *)result + 5);
      result = *(unsigned __int8 **)result;
      while (*result != 62)
      {
        ++result;
        if (!--v23)
        {
          result = &v15[(_QWORD)v16];
          break;
        }
      }
LABEL_28:
      v10 = (_WORD)result - (_WORD)v16;
      goto LABEL_7;
    }
    result = *(unsigned __int8 **)result;
    v17 = (unint64_t)v15;
    if (v15 >= 0x1E)
    {
      do
      {
        v19 = (char *)(v17 >> 1);
        v20 = &result[v17 >> 1];
        v22 = *v20;
        v21 = v20 + 1;
        v17 += ~(v17 >> 1);
        if (v22 < 0x3E)
          result = v21;
        else
          v17 = (unint64_t)v19;
      }
      while (v17);
      if (result == &v15[(_QWORD)v16] || *result != 62)
        goto LABEL_8;
      goto LABEL_28;
    }
    result = 0;
    while (1)
    {
      v18 = result[(_QWORD)v16];
      if (v18 >= 0x3E)
        break;
      if (v15 == ++result)
        goto LABEL_8;
    }
    v10 = v18 == 62 ? (unsigned __int16)result : (unsigned __int16)v15;
LABEL_7:
    if ((_DWORD)v15 != v10)
      break;
LABEL_8:
    v7 += 8;
    if (v7 == v8)
      goto LABEL_32;
  }
  v33 = *((unsigned __int8 *)v13 + v9);
  v34 = v12 + 80 * *((unsigned __int8 *)v13 + v9);
  v35 = (unsigned __int8 *)*(unsigned __int16 *)(v34 + 26);
  if (!*(_WORD *)(v34 + 26))
    return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  v36 = v12 + 80 * *((unsigned __int8 *)v13 + v9);
  v37 = *(_QWORD *)(v36 + 16);
  if (!*(_BYTE *)(v36 + 31))
  {
    v52 = v35;
    v38 = *(unsigned __int8 **)(v36 + 16);
    while (*v38 != 62)
    {
      ++v38;
      if (!--v52)
      {
        LOWORD(v38) = v37 + (_WORD)v35;
        break;
      }
    }
LABEL_95:
    LOWORD(v38) = (_WORD)v38 - v37;
    if (v35 > (unsigned __int16)v38)
      goto LABEL_109;
    return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  if (v35 >= 0x1E)
  {
    v38 = *(unsigned __int8 **)(v36 + 16);
    v54 = (unint64_t)v35;
    do
    {
      v55 = (_BYTE *)(v54 >> 1);
      v56 = &v38[v54 >> 1];
      v58 = *v56;
      v57 = v56 + 1;
      v54 += ~(v54 >> 1);
      if (v58 < 0x3E)
        v38 = v57;
      else
        v54 = (unint64_t)v55;
    }
    while (v54);
    if (v38 == &v35[v37] || *v38 != 62)
      return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    goto LABEL_95;
  }
  v38 = 0;
  result = (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  while (1)
  {
    v39 = v38[v37];
    if (v39 >= 0x3E)
      break;
    if (v35 == ++v38)
      return result;
  }
  if (v39 != 62)
    LOWORD(v38) = (_WORD)v35;
  if (v35 > (unsigned __int16)v38)
  {
LABEL_109:
    v64 = v12 + 80 * v33;
    return (unsigned __int8 *)(v37 + *(unsigned __int16 *)(v64 + 24) + (unsigned __int16)v38);
  }
  return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
}

_OWORD *std::vector<std::shared_ptr<md::NavLabel>,geo::StdAllocator<std::shared_ptr<md::NavLabel>,mdm::Allocator>>::push_back[abi:nn180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _OWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 16))
  {
    result = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a1, (__int128 *)a2);
  }
  else
  {
    if (v3)
    {
      v4 = *(_QWORD *)(a2 + 8);
      *v3 = *(_QWORD *)a2;
      v3[1] = v4;
      if (v4)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }
    }
    result = v3 + 2;
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t std::__hash_table<std::shared_ptr<md::LabelTile>,std::hash<std::shared_ptr<md::LabelTile>>,std::equal_to<std::shared_ptr<md::LabelTile>>,geo::StdAllocator<std::shared_ptr<md::LabelTile>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<md::LabelTile>,std::shared_ptr<md::LabelTile> const&>(unint64_t result, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  int8x8_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;

  v5 = result;
  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(result + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)result + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return result;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return result;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 32) + 16))(*(_QWORD *)(result + 32), 32, 8);
  v15 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = v8;
  *(_QWORD *)(result + 16) = *a3;
  v16 = a3[1];
  *(_QWORD *)(result + 24) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (float)(unint64_t)(*(_QWORD *)(v5 + 40) + 1);
  v20 = *(float *)(v5 + 48);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    if (v24 == 1)
    {
      v24 = 2;
    }
    else if ((v24 & (v24 - 1)) != 0)
    {
      result = std::__next_prime(v24);
      v24 = result;
    }
    v25 = *(int8x8_t *)(v5 + 8);
    if (v24 > *(_QWORD *)&v25)
      goto LABEL_37;
    if (v24 < *(_QWORD *)&v25)
    {
      result = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 40) / *(float *)(v5 + 48));
      if (*(_QWORD *)&v25 < 3uLL || (v26 = (uint8x8_t)vcnt_s8(v25), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        result = std::__next_prime(result);
      }
      else
      {
        v27 = 1 << -(char)__clz(result - 1);
        if (result >= 2)
          result = v27;
      }
      if (v24 <= result)
        v24 = result;
      if (v24 < *(_QWORD *)&v25)
LABEL_37:
        result = std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(v5, v24);
    }
    v9 = *(_QWORD *)(v5 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v28 = *(unint64_t **)(*(_QWORD *)v5 + 8 * v3);
  if (v28)
  {
    *(_QWORD *)v15 = *v28;
LABEL_61:
    *v28 = v15;
    goto LABEL_62;
  }
  *(_QWORD *)v15 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 24) = v15;
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v3) = v5 + 24;
  if (*(_QWORD *)v15)
  {
    v29 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v29 >= v9)
        v29 %= v9;
    }
    else
    {
      v29 &= v9 - 1;
    }
    v28 = (unint64_t *)(*(_QWORD *)v5 + 8 * v29);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(v5 + 40);
  return result;
}

void sub_19FB5CB34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t std::unordered_set<std::shared_ptr<md::LabelTile>,std::hash<std::shared_ptr<md::LabelTile>>,std::equal_to<std::shared_ptr<md::LabelTile>>,geo::StdAllocator<std::shared_ptr<md::LabelTile>,mdm::Allocator>>::unordered_set(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t prime;
  int8x8_t v7;
  BOOL v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *i;

  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v7 = *(int8x8_t *)(a1 + 8);
    v8 = prime >= *(_QWORD *)&v7;
    if (prime > *(_QWORD *)&v7)
      goto LABEL_17;
  }
  else
  {
    v7 = 0;
    v8 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v8)
  {
    v9 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
    if (*(_QWORD *)&v7 < 3uLL || (v10 = (uint8x8_t)vcnt_s8(v7), v10.i16[0] = vaddlv_u8(v10), v10.u32[0] > 1uLL))
    {
      v9 = std::__next_prime(v9);
    }
    else
    {
      v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2)
        v9 = v11;
    }
    if (prime <= v9)
      prime = v9;
    if (prime < *(_QWORD *)&v7)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 24); i; i = (_QWORD *)*i)
    std::__hash_table<std::shared_ptr<md::LabelTile>,std::hash<std::shared_ptr<md::LabelTile>>,std::equal_to<std::shared_ptr<md::LabelTile>>,geo::StdAllocator<std::shared_ptr<md::LabelTile>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<md::LabelTile>,std::shared_ptr<md::LabelTile> const&>(a1, i[2], i + 2);
  return a1;
}

void sub_19FB5CCAC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unordered_set<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::shared_ptr<md::LabelTile>,std::hash<std::shared_ptr<md::LabelTile>>,std::equal_to<std::shared_ptr<md::LabelTile>>,geo::StdAllocator<std::shared_ptr<md::LabelTile>,mdm::Allocator>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::shared_ptr<md::LabelTile>,void *> *>>(_QWORD *result, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  v3 = (unint64_t)result;
  v4 = result[1];
  if (!v4)
    goto LABEL_5;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*result + 8 * i) = 0;
  result[5] = 0;
  v6 = (_QWORD *)result[3];
  result[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v16 = a2[2];
      v15 = a2[3];
      if (v15)
      {
        v17 = (unint64_t *)(v15 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = (std::__shared_weak_count *)v6[3];
      v6[2] = v16;
      v6[3] = v15;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v14 = (_QWORD *)*v6;
      result = (_QWORD *)std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__node_insert_multi(v3, v6);
      a2 = (_QWORD *)*a2;
      v6 = v14;
      if (!v14)
        goto LABEL_5;
    }
    do
    {
      v22 = v6;
      v6 = (_QWORD *)*v6;
      v23 = (std::__shared_weak_count *)v22[3];
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 32) + 40))(*(_QWORD *)(v3 + 32), v22, 32);
    }
    while (v6);
  }
  else
  {
LABEL_5:
    while (a2)
    {
      v7 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 32) + 16))(*(_QWORD *)(v3 + 32), 32, 8);
      *v7 = 0;
      v7[1] = 0;
      v8 = a2[2];
      v9 = a2[3];
      v7[2] = v8;
      v7[3] = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        v8 = v7[2];
      }
      v12 = HIDWORD(v8);
      v13 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
      v7[1] = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) ^ ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) >> 47));
      result = (_QWORD *)std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__node_insert_multi(v3, v7);
      a2 = (_QWORD *)*a2;
    }
  }
  return result;
}

void sub_19FB5CE90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 32) + 40))(*(_QWORD *)(v1 + 32), v2, 32);
  _Unwind_Resume(a1);
}

unint64_t __copy_helper_block_ea8_32c135_ZTSNSt3__113unordered_setINS_10shared_ptrIN2md9LabelTileEEENS_4hashIS4_EENS_8equal_toIS4_EEN3geo12StdAllocatorIS4_N3mdm9AllocatorEEEEE(uint64_t a1, uint64_t a2)
{
  return std::unordered_set<std::shared_ptr<md::LabelTile>,std::hash<std::shared_ptr<md::LabelTile>>,std::equal_to<std::shared_ptr<md::LabelTile>>,geo::StdAllocator<std::shared_ptr<md::LabelTile>,mdm::Allocator>>::unordered_set(a1 + 32, a2 + 32);
}

uint64_t __destroy_helper_block_ea8_32c135_ZTSNSt3__113unordered_setINS_10shared_ptrIN2md9LabelTileEEENS_4hashIS4_EENS_8equal_toIS4_EEN3geo12StdAllocatorIS4_N3mdm9AllocatorEEEEE(uint64_t result)
{
  uint64_t v1;
  _QWORD *i;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = result;
  for (i = *(_QWORD **)(result + 56);
        i;
        result = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v1 + 64) + 40))(*(_QWORD *)(v1 + 64), v4, 32))
  {
    v4 = i;
    i = (_QWORD *)*i;
    v5 = (std::__shared_weak_count *)v4[3];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 48) + 40))(*(_QWORD *)(v1 + 48), v3, 8 * *(_QWORD *)(v1 + 40));
  return result;
}

void sub_19FB5D028(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ggl::TransitNodeRGB::BasePipelineSetup::constantDataIsEnabled(ggl::TransitNodeRGB::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::TransitNodeRGB::BasePipelineSetup::textureIsEnabled(ggl::TransitNodeRGB::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void sub_19FB5D1BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB5D2F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB5D688(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FB5D6B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB5D8CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB5DB48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFF78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFF78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::PrefilteredLine::PrefilteredLineMesh::~PrefilteredLineMesh(ggl::PrefilteredLine::PrefilteredLineMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::PrefilteredLine::PrefilteredLineMesh::~PrefilteredLineMesh(ggl::PrefilteredLine::PrefilteredLineMesh *this)
{
  ggl::Mesh::~Mesh((ggl::PrefilteredLine::PrefilteredLineMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::PrefilteredLine::PrefilteredLineMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::PrefilteredLine::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::PrefilteredLine::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PrefilteredLine::PrefilteredLinePipelineSetup::~PrefilteredLinePipelineSetup(ggl::PrefilteredLine::PrefilteredLinePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::PrefilteredLine::PrefilteredLinePipelineSetup::constantDataIsEnabled(ggl::PrefilteredLine::PrefilteredLinePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::PrefilteredLine::PrefilteredLinePipelineSetup::textureIsEnabled(ggl::PrefilteredLine::PrefilteredLinePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void md::SelectedTransitLayerDataSource::~SelectedTransitLayerDataSource(md::SelectedTransitLayerDataSource *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42A7CB0;
  *((_QWORD *)this + 102) = &off_1E42B4E70;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 100);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42A7CB0;
  *((_QWORD *)this + 102) = &off_1E42B4E70;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 100);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::SelectedTransitLayerDataSource::constructRequests(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned __int8 *v8;
  int32x2_t *v9;
  __int32 v10;
  uint64_t v11;
  uint64_t v12;
  char v13[4];
  int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _BYTE v18[4];
  int32x2_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a2 != a3)
  {
    v20 = v3;
    v21 = v4;
    v6 = a2;
    do
    {
      v8 = (unsigned __int8 *)*v6;
      v9 = *(int32x2_t **)(*v6 + 16);
      v10 = v9[1].i32[0];
      v18[0] = v9[1].i32[1];
      v18[1] = v10;
      v19 = vrev64_s32(*v9);
      if (*(_QWORD *)(a1 + 824) && *(_DWORD *)(a1 + 840) > v10)
      {
        v11 = *v8;
        v12 = *((_QWORD *)v8 + 14);
        v13[0] = 0;
        if (v8[96])
        {
          v14 = *((_DWORD *)v8 + 25);
          v13[0] = 1;
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _BYTE *, uint64_t, char *))(*(_QWORD *)a1 + 144))(&v15, a1, v11, v18, v12, v13);
        if (v13[0])
          v13[0] = 0;
        gdc::LayerDataRequest::request(*v6, (uint64_t)&v15, 0);
        if (v16 != v17)
          free(v16);
      }
      v6 += 2;
    }
    while (v6 != a3);
  }
}

void md::SelectedTransitLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  float v26;
  id v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41[3];
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  __int128 v48;

  v8 = (unsigned __int16 *)*a3;
  v9 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v9)
  {
    while (*v8 != *(unsigned __int16 *)(a1 + 584))
    {
      v8 += 24;
      if (v8 == v9)
        goto LABEL_16;
    }
  }
  if (v8 == v9 || *((_QWORD *)v8 + 4) != 1)
  {
LABEL_16:
    v11 = 0;
LABEL_17:
    v46 = v11;
    v47 = 0;
    if (!v11)
      goto LABEL_15;
    goto LABEL_18;
  }
  v10 = *((_QWORD *)v8 + 3);
  v11 = *(_QWORD *)(v10 + 112);
  v12 = *(std::__shared_weak_count **)(v10 + 120);
  if (!v12)
    goto LABEL_17;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v46 = v11;
  v47 = v12;
  v15 = (unint64_t *)&v12->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v11 = v46;
    if (!v46)
    {
LABEL_15:
      v44 = 0;
      v45 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v11 = v46;
    if (!v46)
      goto LABEL_15;
  }
LABEL_18:
  v19 = *(_QWORD *)(v11 + 144);
  v18 = *(std::__shared_weak_count **)(v11 + 152);
  v44 = v19;
  v45 = v18;
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
LABEL_21:
  sp_mut = std::__get_sp_mut((const void *)(a1 + 792));
  std::__sp_mut::lock(sp_mut);
  v23 = *(std::__shared_weak_count **)(a1 + 800);
  v42 = *(_QWORD *)(a1 + 792);
  v43 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  std::__sp_mut::unlock(sp_mut);
  memset(v41, 0, sizeof(v41));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v41);
  v26 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 808)));
  v27 = *(id *)(a1 + 760);
  v28 = *(_QWORD *)(a1 + 776);
  v29 = (char *)operator new(0x578uLL);
  *(_OWORD *)(v29 + 8) = 0u;
  *(_QWORD *)v29 = &off_1E42DB5C0;
  v48 = 0u;
  v30 = md::TransitTileData::TransitTileData((uint64_t)(v29 + 24), a2, &v44, &v42, v27, v28, &v48, (uint64_t)v41, v26);
  v31 = v41[0];
  *a4 = v30;
  a4[1] = (uint64_t)v29;

  if (v31)
    operator delete(v31);
  v32 = v43;
  if (!v43)
    goto LABEL_30;
  v33 = (unint64_t *)&v43->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    v35 = v45;
    if (!v45)
      goto LABEL_34;
  }
  else
  {
LABEL_30:
    v35 = v45;
    if (!v45)
      goto LABEL_34;
  }
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    v38 = v47;
    if (!v47)
      return;
    goto LABEL_35;
  }
LABEL_34:
  v38 = v47;
  if (!v47)
    return;
LABEL_35:
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
}

void sub_19FB5E570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  std::__shared_weak_count *v17;
  void *v18;
  void *v20;

  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v20);

  if (__p)
    operator delete(__p);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t md::SelectedTransitLayerDataSource::resourceKeyForType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  int v10;
  int32x2_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v12 = vrev64_s32(*(int32x2_t *)(a2 + 4));
  v13 = *(unsigned __int8 *)(a2 + 1);
  v14 = objc_msgSend(*(id *)(a1 + 824), "muid");
  v15 = GEOTransitLineSelectionAdditionalInfoMake();
  v16 = v9;
  if (*(_BYTE *)a4)
    v10 = *(_DWORD *)(a4 + 4);
  else
    v10 = 2147483646;
  return gdc::ResourceKey::ResourceKey(a5, *(_WORD *)(a1 + 584), (uint64_t)&v12, 0x28uLL, a3, v10);
}

uint64_t geo::_retain_ptr<GEOMapItemIdentifier * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4E70;

  return a1;
}

void geo::_retain_ptr<GEOMapItemIdentifier * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4E70;

  JUMPOUT(0x1A1AF4E00);
}

void md::SelectedTransitLayerDataSource::setSelectedLine(gdc::LayerDataStore **this, GEOMapItemIdentifier *a2, int a3)
{
  GEOMapItemIdentifier *v5;
  gdc::LayerDataStore *v6;
  GEOMapItemIdentifier *v7;
  gdc::LayerDataStore *v8;
  GEOMapItemIdentifier *v9;

  v9 = a2;
  if (!-[GEOMapItemIdentifier isEqual:](v9, "isEqual:", this[103]) || *((_DWORD *)this + 210) != a3)
  {
    gdc::LayerDataStore::clearAllData(this[2]);
    v5 = v9;
    v6 = v5;
    if (v5)
      v7 = v5;
    v8 = this[103];
    this[103] = v6;

    *((_DWORD *)this + 210) = a3;
  }

}

void sub_19FB5E74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB5E8C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19FB5E978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)MDARController;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FB5EB54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FB5ED1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FB5EE58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB5EEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB5F018(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id initAVCaptureSessionInterruptionReasonKey(void)
{
  id *v0;

  if (LoadAVFoundation(void)::loadPredicate != -1)
    dispatch_once(&LoadAVFoundation(void)::loadPredicate, &__block_literal_global_114_22011);
  v0 = (id *)dlsym((void *)LoadAVFoundation(void)::frameworkLibrary, "AVCaptureSessionInterruptionReasonKey");
  objc_storeStrong((id *)&constantAVCaptureSessionInterruptionReasonKey, *v0);
  getAVCaptureSessionInterruptionReasonKey = (uint64_t (*)(void))AVCaptureSessionInterruptionReasonKeyFunction;
  return (id)constantAVCaptureSessionInterruptionReasonKey;
}

id AVCaptureSessionInterruptionReasonKeyFunction(void)
{
  return (id)constantAVCaptureSessionInterruptionReasonKey;
}

void ___ZL16LoadAVFoundationv_block_invoke()
{
  LoadAVFoundation(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
  if (!LoadAVFoundation(void)::frameworkLibrary)
    NSLog((NSString *)CFSTR("### Failed to Soft Linked: /System/Library/Frameworks/AVFoundation.framework/AVFoundation"));
}

Class initARSession(void)
{
  Class result;

  if (LoadARKit(void)::loadPredicate != -1)
    dispatch_once(&LoadARKit(void)::loadPredicate, &__block_literal_global_22025);
  result = objc_getClass("ARSession");
  classARSession = (uint64_t)result;
  getARSessionClass = (uint64_t (*)(void))ARSessionFunction;
  return result;
}

id ARSessionFunction(void)
{
  return (id)classARSession;
}

Class initARPositionalTrackingConfiguration(void)
{
  Class result;

  if (LoadARKit(void)::loadPredicate != -1)
    dispatch_once(&LoadARKit(void)::loadPredicate, &__block_literal_global_22025);
  result = objc_getClass("ARPositionalTrackingConfiguration");
  classARPositionalTrackingConfiguration = (uint64_t)result;
  getARPositionalTrackingConfigurationClass = (uint64_t (*)(void))ARPositionalTrackingConfigurationFunction;
  return result;
}

id ARPositionalTrackingConfigurationFunction(void)
{
  return (id)classARPositionalTrackingConfiguration;
}

id initAVCaptureSessionWasInterruptedNotification(void)
{
  id *v0;

  if (LoadAVFoundation(void)::loadPredicate != -1)
    dispatch_once(&LoadAVFoundation(void)::loadPredicate, &__block_literal_global_114_22011);
  v0 = (id *)dlsym((void *)LoadAVFoundation(void)::frameworkLibrary, "AVCaptureSessionWasInterruptedNotification");
  objc_storeStrong((id *)&constantAVCaptureSessionWasInterruptedNotification, *v0);
  getAVCaptureSessionWasInterruptedNotification = (uint64_t (*)(void))AVCaptureSessionWasInterruptedNotificationFunction;
  return (id)constantAVCaptureSessionWasInterruptedNotification;
}

id AVCaptureSessionWasInterruptedNotificationFunction(void)
{
  return (id)constantAVCaptureSessionWasInterruptedNotification;
}

void ___ZL9LoadARKitv_block_invoke_22030()
{
  LoadARKit(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/ARKit.framework/ARKit", 2);
  if (!LoadARKit(void)::frameworkLibrary)
    NSLog((NSString *)CFSTR("### Failed to Soft Linked: /System/Library/Frameworks/ARKit.framework/ARKit"));
}

void sub_19FB5F430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FB5F4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FB5F57C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB5F62C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB5F6EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB5F7A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::TrafficSkeletonResourceFetcher::~TrafficSkeletonResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

unint64_t md::TrafficSkeletonResourceFetcher::tileKey(uint64_t a1, void *a2)
{
  id v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  objc_msgSend(v3, "size");
  objc_msgSend(v3, "scale");
  v4 = *(_DWORD *)(a1 + 556);
  v5 = GEOTileKeyMake();
  v6 = 128;
  if (v4 > 0x19 || ((1 << v4) & 0x200101C) == 0)
    v6 = (unint64_t)(v4 == 26) << 7;
  v8 = v6 | v5 & 0xFFFFFFFFFFFFFF7FLL;

  return v8;
}

void sub_19FB5F8DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::TrafficSkeletonTileDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TrafficSkeletonTileDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD498;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TrafficSkeletonTileDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::BufferData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::BufferData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE500;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::BufferData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::MeshSetStorage::buildSubIndexData(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];

  if (*(_BYTE *)(a2 + 40) && a3 && *a3 == a2 && (v6 = a3[9], v7 = a3[6], v6 + a5 <= (unint64_t)(a3[7] - v7)))
  {
    v9 = v7 + v6;
    v10 = v7 + v6 + a5;
    a3[9] = v6 + a5;
    v11 = *(_QWORD **)(a2 + 64);
    v12 = operator new(0xF8uLL);
    v13 = v12;
    v12[1] = 0;
    v12[2] = 0;
    *v12 = &off_1E42E5228;
    v14 = v12 + 3;
    v15 = v11[1];
    v16 = (std::__shared_weak_count *)v11[4];
    v20[0] = v11[3];
    v20[1] = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
      ggl::BufferData::BufferData((uint64_t)(v12 + 3), v15, v20, v9 * v11[1], v10 * v11[1], 1);
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    else
    {
      ggl::BufferData::BufferData((uint64_t)(v12 + 3), v15, v20, v9 * v15, v10 * v15, 1);
    }
    v13[3] = &off_1E42BD0F8;
    v13[28] = &unk_1E42BD118;
    v13[29] = a4;
    *((_DWORD *)v13 + 60) = 0;
    v13[4] = v11[1];
    *a1 = v14;
    a1[1] = v13;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void md::mun::MuninViewData::~MuninViewData(md::mun::MuninViewData *this)
{
  md::mun::MuninViewData::~MuninViewData(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;

  *(_QWORD *)this = &off_1E42ABAE8;
  v2 = (void *)*((_QWORD *)this + 65);
  if (v2)
  {
    *((_QWORD *)this + 66) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 60);
  if (v3 != *((void **)this + 62))
    free(v3);
  v4 = *((_QWORD *)this + 22);
  if (v4)
  {
    v5 = *((_QWORD *)this + 23);
    v6 = (void *)*((_QWORD *)this + 22);
    if (v5 == v4)
    {
LABEL_21:
      *((_QWORD *)this + 23) = v4;
      operator delete(v6);
      goto LABEL_22;
    }
    while (1)
    {
      v7 = *(std::__shared_weak_count **)(v5 - 64);
      if (!v7)
        goto LABEL_13;
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        v10 = *(std::__shared_weak_count **)(v5 - 80);
        if (v10)
        {
LABEL_14:
          v11 = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      else
      {
LABEL_13:
        v10 = *(std::__shared_weak_count **)(v5 - 80);
        if (v10)
          goto LABEL_14;
      }
      v5 -= 88;
      if (v5 == v4)
      {
        v6 = (void *)*((_QWORD *)this + 22);
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  *(_QWORD *)this = &off_1E42B4768;
  if (*((_BYTE *)this + 112))
    *((_BYTE *)this + 112) = 0;
  v13 = (void *)*((_QWORD *)this + 4);
  if (v13 != *((void **)this + 6))
    free(v13);
}

uint64_t md::stringFromLabelOutcome(uint64_t result, int a2)
{
  const char *v2;
  unsigned __int16 v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  switch(a2)
  {
    case 0:
      *(_BYTE *)(result + 23) = 10;
      *(_WORD *)(result + 8) = 28271;
      v2 = "NoPosition";
      goto LABEL_41;
    case 1:
      *(_BYTE *)(result + 23) = 7;
      *(_DWORD *)result = 1951625038;
      *(_DWORD *)(result + 3) = 1701607796;
      return result;
    case 2:
      *(_BYTE *)(result + 23) = 9;
      *(_BYTE *)(result + 8) = 110;
      v2 = "OffScreen";
      goto LABEL_41;
    case 3:
      *(_BYTE *)(result + 23) = 7;
      *(_DWORD *)result = 1885957187;
      v3 = 28784;
      goto LABEL_24;
    case 4:
      *(_BYTE *)(result + 23) = 9;
      *(_BYTE *)(result + 8) = 118;
      v2 = "HideInNav";
      goto LABEL_41;
    case 5:
      *(_BYTE *)(result + 23) = 9;
      *(_BYTE *)(result + 8) = 101;
      v2 = "DebugHide";
      goto LABEL_41;
    case 6:
      *(_BYTE *)(result + 23) = 7;
      *(_DWORD *)result = 540811386;
      *(_DWORD *)(result + 3) = 1852402976;
      return result;
    case 7:
      *(_BYTE *)(result + 23) = 7;
      *(_DWORD *)result = 540942458;
      *(_DWORD *)(result + 3) = 2019650848;
      return result;
    case 8:
      *(_BYTE *)(result + 23) = 10;
      *(_WORD *)(result + 8) = 25964;
      v2 = "NotVisible";
      goto LABEL_41;
    case 9:
      *(_BYTE *)(result + 23) = 12;
      *(_DWORD *)(result + 8) = 1684630625;
      v2 = "HikerInvalid";
      goto LABEL_41;
    case 10:
      *(_BYTE *)(result + 23) = 13;
      v4 = "MatrixInvalid";
      goto LABEL_39;
    case 11:
      *(_BYTE *)(result + 23) = 17;
      *(_BYTE *)(result + 16) = 115;
      v5 = "LoadingGlyphInfos";
      goto LABEL_44;
    case 12:
      *(_BYTE *)(result + 23) = 12;
      *(_DWORD *)(result + 8) = 1936680558;
      v2 = "NoGlyphInfos";
      goto LABEL_41;
    case 13:
      *(_BYTE *)(result + 23) = 7;
      *(_DWORD *)result = 1968271182;
      *(_DWORD *)(result + 3) = 1935958389;
      return result;
    case 14:
      *(_BYTE *)(result + 23) = 6;
      *(_DWORD *)result = 1700032334;
      *(_WORD *)(result + 4) = 29816;
      return result;
    case 15:
      *(_BYTE *)(result + 23) = 14;
      v6 = "LoadingArtwork";
      goto LABEL_37;
    case 16:
      *(_BYTE *)(result + 23) = 9;
      *(_BYTE *)(result + 8) = 107;
      v2 = "NoArtwork";
      goto LABEL_41;
    case 17:
      *(_BYTE *)(result + 23) = 16;
      v5 = "DuplicateArtwork";
      goto LABEL_44;
    case 18:
      *(_BYTE *)(result + 23) = 6;
      *(_DWORD *)result = 1802398027;
      *(_WORD *)(result + 4) = 25701;
      return result;
    case 19:
      *(_BYTE *)(result + 23) = 12;
      *(_DWORD *)(result + 8) = 1684370529;
      v2 = "Extrapolated";
      goto LABEL_41;
    case 20:
      *(_BYTE *)(result + 23) = 8;
      v7 = 0x64696C6C6F43;
      goto LABEL_26;
    case 21:
      *(_BYTE *)(result + 23) = 7;
      *(_DWORD *)result = 1969513796;
      v3 = 28789;
LABEL_24:
      *(_DWORD *)(result + 3) = v3 | 0x64650000;
      return result;
    case 22:
      *(_BYTE *)(result + 23) = 8;
      v7 = 0x64756C63634FLL;
LABEL_26:
      *(_QWORD *)result = v7 & 0xFFFFFFFFFFFFLL | 0x6465000000000000;
      return result;
    case 23:
      *(_BYTE *)(result + 23) = 16;
      v5 = "BuildingOccluded";
      goto LABEL_44;
    case 24:
      *(_BYTE *)(result + 23) = 14;
      v6 = "GroundOccluded";
      goto LABEL_37;
    case 25:
      *(_BYTE *)(result + 23) = 22;
      qmemcpy((void *)result, "RequestingExternalMesh", 22);
      return result;
    case 26:
      *(_BYTE *)(result + 23) = 18;
      *(_WORD *)(result + 16) = 26739;
      v5 = "FailedExternalMesh";
      goto LABEL_44;
    case 27:
      *(_BYTE *)(result + 23) = 12;
      *(_DWORD *)(result + 8) = 1702521171;
      v2 = "ZeroTextSize";
      goto LABEL_41;
    case 28:
      *(_BYTE *)(result + 23) = 10;
      *(_WORD *)(result + 8) = 28261;
      v2 = "Overridden";
      goto LABEL_41;
    case 29:
      *(_BYTE *)(result + 23) = 9;
      *(_BYTE *)(result + 8) = 101;
      v2 = "SceneHide";
      goto LABEL_41;
    case 30:
      *(_BYTE *)(result + 23) = 14;
      v6 = "DeactivateHide";
      goto LABEL_37;
    case 31:
      *(_BYTE *)(result + 23) = 8;
      *(_QWORD *)result = 0x7973754268746150;
      return result;
    case 32:
      *(_BYTE *)(result + 23) = 14;
      v6 = "NotDisplayable";
LABEL_37:
      *(_QWORD *)result = *(_QWORD *)v6;
      *(_QWORD *)(result + 6) = *(_QWORD *)(v6 + 6);
      return result;
    case 33:
      *(_BYTE *)(result + 23) = 13;
      v4 = "FeatureHidden";
LABEL_39:
      *(_QWORD *)result = *(_QWORD *)v4;
      *(_QWORD *)(result + 5) = *(_QWORD *)(v4 + 5);
      return result;
    case 34:
      *(_BYTE *)(result + 23) = 9;
      *(_BYTE *)(result + 8) = 103;
      v2 = "NotFacing";
LABEL_41:
      *(_QWORD *)result = *(_QWORD *)v2;
      return result;
    case 35:
      *(_BYTE *)(result + 23) = 16;
      v5 = "CurvedUpsideDown";
      goto LABEL_44;
    case 36:
      *(_BYTE *)(result + 23) = 16;
      v5 = "MaxLabelsReached";
LABEL_44:
      *(_OWORD *)result = *(_OWORD *)v5;
      break;
    case 37:
      *(_BYTE *)(result + 23) = 2;
      *(_WORD *)result = 19279;
      break;
    case 38:
      *(_BYTE *)(result + 23) = 4;
      *(_DWORD *)result = 1701736270;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t mre::GGLResourceStore::createTexture(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_mutex_base *v12;
  unint64_t v13;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v4 = operator new();
  v5 = v4;
  v6 = *a2;
  v7 = *((unsigned int *)a2 + 2);
  v8 = *((unsigned int *)a2 + 3);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 56) = 0x100000001;
  *(_DWORD *)(v4 + 64) = v8;
  *(_DWORD *)(v4 + 68) = v7;
  *(_QWORD *)(v4 + 72) = 0x100000001;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)v4 = &off_1E42BE438;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 40) = &unk_1E42BE458;
  *(_QWORD *)(v4 + 48) = "";
  *(_DWORD *)(v4 + 104) = 1;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  *(_WORD *)(v4 + 128) = 0;
  *(_BYTE *)(v4 + 130) = 1;
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 136) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 144) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(v4 + 80) = v6;
  v12 = (std::__shared_mutex_base *)(a1 + 104);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 104));
  *(_QWORD *)&v15 = v5;
  *((_QWORD *)&v15 + 1) = v5;
  v16 = v6;
  v17 = v7 | (v8 << 32);
  v18 = 0;
  v13 = geo::packed_array<mre::TextureStorage,geo::handle<mre::Texture>>::push_back((_QWORD *)(a1 + 576), &v15);
  std::__shared_mutex_base::unlock(v12);
  return v13;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_mutex_base *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  char v25;

  v4 = operator new();
  v5 = v4;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *(_DWORD *)(v6 + 12);
  *(_DWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 56) = 0x100000001;
  *(_DWORD *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 68) = v10;
  *(_QWORD *)(v4 + 72) = 0x100000001;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)v4 = &off_1E42BE438;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 40) = &unk_1E42BE458;
  *(_QWORD *)(v4 + 48) = "";
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(v6 + 8);
  *(_QWORD *)(v4 + 112) = v6;
  *(_QWORD *)(v4 + 120) = v7;
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_WORD *)(v4 + 128) = 0;
  *(_BYTE *)(v4 + 130) = 1;
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 136) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 144) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(v4 + 80) = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v16 = (unint64_t *)&v7->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v18 = (std::__shared_mutex_base *)(a1 + 104);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 104));
  *(_QWORD *)&v22 = v5;
  *((_QWORD *)&v22 + 1) = v5;
  v19 = *(unsigned int *)(v5 + 68) | ((unint64_t)*(unsigned int *)(v5 + 64) << 32);
  v23 = *(_QWORD *)(v5 + 80);
  v24 = v19;
  v25 = 0;
  v20 = geo::packed_array<mre::TextureStorage,geo::handle<mre::Texture>>::push_back((_QWORD *)(a1 + 576), &v22);
  std::__shared_mutex_base::unlock(v18);
  return v20;
}

unint64_t mre::GGLResourceStore::createBuffer(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_mutex_base *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _QWORD *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;

  v4 = operator new();
  v5 = *((unsigned __int8 *)a2 + 4);
  v6 = *((unsigned __int8 *)a2 + 5);
  v7 = *a2;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  *(_QWORD *)v4 = &off_1E42BC138;
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 36) = v5;
  *(_BYTE *)(v4 + 37) = 3;
  *(_WORD *)(v4 + 38) = v6;
  v8 = (std::__shared_mutex_base *)(a1 + 272);
  *(_QWORD *)(v4 + 40) = v7;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 272));
  v9 = *(_QWORD *)(a1 + 680);
  if (*(_QWORD *)(a1 + 672) == v9)
  {
    v12 = ((*(_QWORD *)(a1 + 728) - *(_QWORD *)(a1 + 720)) >> 5) | 0x100000000;
    v13 = *(uint64_t **)(a1 + 704);
    v14 = *(_QWORD *)(a1 + 712);
    if ((unint64_t)v13 >= v14)
    {
      v16 = *(uint64_t **)(a1 + 696);
      v17 = (char *)v13 - (char *)v16;
      v18 = v13 - v16;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61)
        goto LABEL_67;
      v20 = v14 - (_QWORD)v16;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 61)
          goto LABEL_68;
        v22 = operator new(8 * v21);
        v17 = (char *)v13 - (char *)v16;
      }
      else
      {
        v22 = 0;
      }
      v23 = (uint64_t *)&v22[8 * v18];
      v24 = &v22[8 * v21];
      *v23 = v12;
      v15 = v23 + 1;
      if (v13 == v16)
      {
        v16 = v13;
      }
      else
      {
        v25 = (char *)v13 - (char *)v16 - 8;
        if (v25 < 0x58)
          goto LABEL_71;
        if ((unint64_t)((char *)v13 - v22 - v17) < 0x20)
          goto LABEL_71;
        v26 = (v25 >> 3) + 1;
        v27 = &v22[8 * v18 - 16];
        v28 = v13 - 2;
        v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          *v27 = v30;
          v27 -= 2;
          v28 -= 4;
          v29 -= 4;
        }
        while (v29);
        v23 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_71:
          do
          {
            v31 = *--v13;
            *--v23 = v31;
          }
          while (v13 != v16);
          v16 = *(uint64_t **)(a1 + 696);
        }
      }
      *(_QWORD *)(a1 + 696) = v23;
      *(_QWORD *)(a1 + 704) = v15;
      *(_QWORD *)(a1 + 712) = v24;
      if (v16)
        operator delete(v16);
      v8 = (std::__shared_mutex_base *)(a1 + 272);
    }
    else
    {
      *v13 = v12;
      v15 = v13 + 1;
    }
    *(_QWORD *)(a1 + 704) = v15;
    v11 = *(v15 - 1);
  }
  else
  {
    v10 = *(_QWORD *)(v9 - 8);
    *(_QWORD *)(a1 + 680) = v9 - 8;
    *(_DWORD *)(*(_QWORD *)(a1 + 696) + 8 * v10) = (*(_QWORD *)(a1 + 728) - *(_QWORD *)(a1 + 720)) >> 5;
    *(_DWORD *)(*(_QWORD *)(a1 + 696) + 8 * v10 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 696)
                                                                                           + 8 * v10
                                                                                           + 4) << 32)
                                                      + 0x100000000) >> 32;
    v11 = v10 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 696) + 8 * v10 + 4) << 32);
  }
  v32 = (v6 << 40) | (v5 << 32) | v7;
  v33 = *(uint64_t **)(a1 + 728);
  v34 = *(_QWORD *)(a1 + 736);
  if ((unint64_t)v33 >= v34)
  {
    v36 = *(uint64_t **)(a1 + 720);
    v37 = ((char *)v33 - (char *)v36) >> 5;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 59)
      goto LABEL_67;
    v39 = v34 - (_QWORD)v36;
    if (v39 >> 4 > v38)
      v38 = v39 >> 4;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFE0)
      v40 = 0x7FFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    if (v40)
    {
      if (v40 >> 59)
        goto LABEL_68;
      v41 = (char *)operator new(32 * v40);
    }
    else
    {
      v41 = 0;
    }
    v42 = &v41[32 * v37];
    *(_QWORD *)v42 = v4;
    *((_QWORD *)v42 + 1) = v4;
    *((_QWORD *)v42 + 2) = v32;
    v42[24] = 0;
    v35 = v42 + 32;
    if (v33 != v36)
    {
      do
      {
        v43 = *((_OWORD *)v33 - 2);
        *(_OWORD *)(v42 - 23) = *(_OWORD *)((char *)v33 - 23);
        *((_OWORD *)v42 - 2) = v43;
        v42 -= 32;
        v33 -= 4;
      }
      while (v33 != v36);
      v33 = *(uint64_t **)(a1 + 720);
    }
    *(_QWORD *)(a1 + 720) = v42;
    *(_QWORD *)(a1 + 728) = v35;
    *(_QWORD *)(a1 + 736) = &v41[32 * v40];
    if (v33)
      operator delete(v33);
  }
  else
  {
    *v33 = v4;
    v33[1] = v4;
    v33[2] = v32;
    v35 = v33 + 4;
    *((_BYTE *)v33 + 24) = 0;
  }
  *(_QWORD *)(a1 + 728) = v35;
  v44 = *(char **)(a1 + 752);
  v45 = *(_QWORD *)(a1 + 760);
  if ((unint64_t)v44 < v45)
  {
    *(_QWORD *)v44 = v11;
    v46 = v44 + 8;
    goto LABEL_66;
  }
  v47 = *(char **)(a1 + 744);
  v48 = (v44 - v47) >> 3;
  v49 = v48 + 1;
  if ((unint64_t)(v48 + 1) >> 61)
LABEL_67:
    abort();
  v50 = v45 - (_QWORD)v47;
  if (v50 >> 2 > v49)
    v49 = v50 >> 2;
  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
    v51 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v51 = v49;
  if (v51)
  {
    if (!(v51 >> 61))
    {
      v52 = operator new(8 * v51);
      goto LABEL_57;
    }
LABEL_68:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v52 = 0;
LABEL_57:
  v53 = &v52[8 * v48];
  v54 = &v52[8 * v51];
  *v53 = v11;
  v46 = v53 + 1;
  if (v44 != v47)
  {
    v55 = v44 - v47 - 8;
    if (v55 < 0x58)
      goto LABEL_72;
    if ((unint64_t)(v47 - v52) < 0x20)
      goto LABEL_72;
    v56 = (v55 >> 3) + 1;
    v57 = &v52[8 * v48 - 16];
    v58 = v44 - 16;
    v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v60 = *(_OWORD *)v58;
      *(v57 - 1) = *((_OWORD *)v58 - 1);
      *v57 = v60;
      v57 -= 2;
      v58 -= 32;
      v59 -= 4;
    }
    while (v59);
    v53 -= v56 & 0x3FFFFFFFFFFFFFFCLL;
    v44 -= 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
    if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_72:
      do
      {
        v61 = *((_QWORD *)v44 - 1);
        v44 -= 8;
        *--v53 = v61;
      }
      while (v44 != v47);
    }
  }
  *(_QWORD *)(a1 + 744) = v53;
  *(_QWORD *)(a1 + 752) = v46;
  *(_QWORD *)(a1 + 760) = v54;
  if (v47)
    operator delete(v47);
LABEL_66:
  *(_QWORD *)(a1 + 752) = v46;
  std::__shared_mutex_base::unlock(v8);
  return v11;
}

uint64_t mre::GGLResourceStore::getTextureDescriptor(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (std::__shared_mutex_base *)(a1 + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 600);
  if (a2 < (unint64_t)((*(_QWORD *)(a1 + 608) - v5) >> 3)
    && ((v6 = *(_QWORD *)(v5 + 8 * a2)) != 0 ? (v7 = HIDWORD(a2) == HIDWORD(v6)) : (v7 = 0), v7))
  {
    v9 = *(_QWORD *)(a1 + 624) + 40 * v6;
    v8 = *(_QWORD *)(a1 + 632);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 632);
    v9 = v8;
  }
  if (v9 == v8)
    v10 = 0;
  else
    v10 = v9;
  std::__shared_mutex_base::unlock_shared(v4);
  if (v10)
    return v10 + 16;
  else
    return 0;
}

uint64_t mre::GGLResourceStore::getBufferDescriptor(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (std::__shared_mutex_base *)(a1 + 272);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 272));
  v5 = *(_QWORD *)(a1 + 696);
  if (a2 < (unint64_t)((*(_QWORD *)(a1 + 704) - v5) >> 3)
    && ((v6 = *(_QWORD *)(v5 + 8 * a2)) != 0 ? (v7 = HIDWORD(a2) == HIDWORD(v6)) : (v7 = 0), v7))
  {
    v9 = *(_QWORD *)(a1 + 720) + 32 * *(_QWORD *)(v5 + 8 * a2);
    v8 = *(_QWORD *)(a1 + 728);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 728);
    v9 = v8;
  }
  if (v9 == v8)
    v10 = 0;
  else
    v10 = v9;
  std::__shared_mutex_base::unlock_shared(v4);
  if (v10)
    return v10 + 16;
  else
    return 0;
}

uint64_t mre::GGLResourceStore::getTexture(uint64_t a1, unint64_t a2, int a3)
{
  std::__shared_mutex_base *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v17;

  v17 = a2;
  v6 = (std::__shared_mutex_base *)(a1 + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 104));
  v7 = 576;
  if (a3)
    v7 = 480;
  v8 = (_QWORD *)(a1 + v7);
  v9 = v8[3];
  if (a2 < (unint64_t)((v8[4] - v9) >> 3)
    && ((v10 = *(_QWORD *)(v9 + 8 * a2)) != 0 ? (v11 = HIDWORD(a2) == HIDWORD(v10)) : (v11 = 0), v11))
  {
    v12 = v8[7];
    v13 = v8[6] + 40 * v10;
  }
  else
  {
    v12 = v8[7];
    v13 = v12;
  }
  std::__shared_mutex_base::unlock_shared(v6);
  if (a3)
  {
    v14 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(a1 + 440), a2, &v17);
    ++v14[3];
  }
  if (v13 == v12)
    v15 = 0;
  else
    v15 = v13;
  if (v15)
    return v15 + 8;
  else
    return 0;
}

uint64_t mre::GGLResourceStore::getBuffer(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (std::__shared_mutex_base *)(a1 + 272);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 272));
  v5 = *(_QWORD *)(a1 + 696);
  if (a2 < (unint64_t)((*(_QWORD *)(a1 + 704) - v5) >> 3)
    && ((v6 = *(_QWORD *)(v5 + 8 * a2)) != 0 ? (v7 = HIDWORD(a2) == HIDWORD(v6)) : (v7 = 0), v7))
  {
    v9 = *(_QWORD *)(a1 + 720) + 32 * *(_QWORD *)(v5 + 8 * a2);
    v8 = *(_QWORD *)(a1 + 728);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 728);
    v9 = v8;
  }
  if (v9 == v8)
    v10 = 0;
  else
    v10 = v9;
  std::__shared_mutex_base::unlock_shared(v4);
  if (v10)
    return v10 + 8;
  else
    return 0;
}

uint64_t mre::GGLResourceStore::releaseTexture(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v13;

  v4 = (std::__shared_mutex_base *)(a1 + 104);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 600);
  if (a2 < (unint64_t)((*(_QWORD *)(a1 + 608) - v5) >> 3)
    && (v6 = *(_QWORD *)(v5 + 8 * a2)) != 0
    && HIDWORD(a2) == HIDWORD(v6)
    && (v7 = *(_QWORD *)(a1 + 624),
        v8 = v6,
        v9 = (_QWORD *)(v7 + 40 * v6),
        v10 = *(_QWORD **)(a1 + 632),
        v9 != v10))
  {
    if (*v9 && !*(_BYTE *)(v7 + 40 * v8 + 32))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v9 + 8))(*v9);
      v10 = *(_QWORD **)(a1 + 632);
    }
    if (v10 != v9)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 648)
                                    + 0x6666666666666668 * (((unint64_t)v9 - *(_QWORD *)(a1 + 624)) >> 3)) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 600) + 8 * *(_QWORD *)(*(_QWORD *)(a1 + 648) + 0x6666666666666668 * (((unint64_t)v9 - *(_QWORD *)(a1 + 624)) >> 3)) + 4) << 32);
      geo::packed_array<mre::TextureStorage,geo::handle<mre::Texture>>::erase(a1 + 576, &v13);
    }
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  std::__shared_mutex_base::unlock(v4);
  return v11;
}

uint64_t mre::GGLResourceStore::releaseBuffer(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  unint64_t *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  unint64_t *v32;
  uint64_t v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _BYTE v46[32];

  v4 = (std::__shared_mutex_base *)(a1 + 272);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 272));
  v5 = *(_QWORD *)(a1 + 696);
  if (a2 < (unint64_t)((*(_QWORD *)(a1 + 704) - v5) >> 3)
    && (v6 = *(_QWORD *)(v5 + 8 * a2)) != 0
    && HIDWORD(a2) == HIDWORD(v6)
    && (v7 = *(_QWORD *)(a1 + 720), v8 = (_QWORD *)(v7 + 32 * v6), v9 = *(_QWORD **)(a1 + 728), v8 != v9))
  {
    if (*v8 && !*(_BYTE *)(v7 + 32 * v6 + 24))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 8))(*v8);
      v9 = *(_QWORD **)(a1 + 728);
    }
    if (v9 != v8)
    {
      v10 = *(_QWORD *)(a1 + 720);
      v11 = *(_QWORD *)(a1 + 744);
      v12 = *(_QWORD *)(v11 + (((uint64_t)v8 - v10) >> 2));
      v13 = *(_QWORD *)(a1 + 696);
      if (v12 < (*(_QWORD *)(a1 + 704) - v13) >> 3)
      {
        v14 = *(_QWORD *)(v13 + 8 * v12);
        if (v14)
        {
          if (HIDWORD(*(_QWORD *)(v13 + 8 * *(_QWORD *)(v11 + (((uint64_t)v8 - v10) >> 2)))) == HIDWORD(v14))
          {
            v15 = *(unint64_t **)(a1 + 680);
            v16 = *(_QWORD *)(a1 + 688);
            if ((unint64_t)v15 >= v16)
            {
              v20 = *(unint64_t **)(a1 + 672);
              v21 = (char *)v15 - (char *)v20;
              v22 = v15 - v20;
              v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 61)
                abort();
              v24 = v16 - (_QWORD)v20;
              if (v24 >> 2 > v23)
                v23 = v24 >> 2;
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
                v25 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v25 = v23;
              if (v25)
              {
                if (v25 >> 61)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v26 = operator new(8 * v25);
                v21 = (char *)v15 - (char *)v20;
                v22 = v15 - v20;
              }
              else
              {
                v26 = 0;
              }
              v27 = (unint64_t *)&v26[8 * v22];
              v28 = &v26[8 * v25];
              *v27 = v12;
              v17 = v27 + 1;
              if (v15 != v20)
              {
                v29 = (char *)v15 - (char *)v20 - 8;
                if (v29 < 0x58)
                  goto LABEL_41;
                if ((unint64_t)((char *)v15 - v26 - v21) < 0x20)
                  goto LABEL_41;
                v30 = (v29 >> 3) + 1;
                v31 = &v26[8 * v22 - 16];
                v32 = v15 - 2;
                v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v34 = *(_OWORD *)v32;
                  *(v31 - 1) = *((_OWORD *)v32 - 1);
                  *v31 = v34;
                  v31 -= 2;
                  v32 -= 4;
                  v33 -= 4;
                }
                while (v33);
                v27 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
                v15 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
                if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_41:
                  do
                  {
                    v35 = *--v15;
                    *--v27 = v35;
                  }
                  while (v15 != v20);
                }
              }
              *(_QWORD *)(a1 + 672) = v27;
              *(_QWORD *)(a1 + 680) = v17;
              *(_QWORD *)(a1 + 688) = v28;
              if (v20)
              {
                operator delete(v20);
                v13 = *(_QWORD *)(a1 + 696);
                v9 = *(_QWORD **)(a1 + 728);
                v10 = *(_QWORD *)(a1 + 720);
                v11 = *(_QWORD *)(a1 + 744);
              }
            }
            else
            {
              *v15 = v12;
              v17 = v15 + 1;
            }
            *(_QWORD *)(a1 + 680) = v17;
            v36 = *(_QWORD *)(v13 + 8 * v12);
            v37 = v36;
            v38 = *(_QWORD *)(v11 + (((uint64_t)v9 - v10) >> 2) - 8);
            v39 = (_OWORD *)(v10 + 32 * v36);
            *(_OWORD *)v46 = *v39;
            v40 = *v39;
            *(_OWORD *)&v46[16] = v39[1];
            v41 = *(_OWORD *)((char *)v9 - 23);
            *v39 = *((_OWORD *)v9 - 2);
            *(_OWORD *)((char *)v39 + 9) = v41;
            *(_OWORD *)((char *)v9 - 23) = *(_OWORD *)&v46[9];
            *((_OWORD *)v9 - 2) = v40;
            *(_DWORD *)(*(_QWORD *)(a1 + 696) + 8 * v38) = v36;
            v42 = *(_QWORD *)(a1 + 744);
            v37 *= 8;
            v43 = *(_QWORD *)(v42 + v37);
            v44 = *(_QWORD **)(a1 + 752);
            v45 = *--v44;
            *(_QWORD *)(v42 + v37) = v45;
            *v44 = v43;
            *(_QWORD *)(a1 + 728) -= 32;
            *(_QWORD *)(a1 + 752) = v44;
            *(_DWORD *)(*(_QWORD *)(a1 + 696) + 8 * v12 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 696) + 8 * v12 + 4) << 32)
                                                              + 0x100000000) >> 32;
            *(_DWORD *)(*(_QWORD *)(a1 + 696) + 8 * v12) = (*(_QWORD *)(a1 + 704) - *(_QWORD *)(a1 + 696)) >> 3;
          }
        }
      }
    }
    v18 = 1;
  }
  else
  {
    v18 = 0;
  }
  std::__shared_mutex_base::unlock(v4);
  return v18;
}

void mre::GGLResourceStore::~GGLResourceStore(mre::GGLResourceStore *this)
{
  mre::GGLResourceStore::~GGLResourceStore(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  *(_QWORD *)this = off_1E42C2AD8;
  v2 = (_BYTE *)*((_QWORD *)this + 90);
  v3 = (_BYTE *)*((_QWORD *)this + 91);
  while (v2 != v3)
  {
    if (!v2[24])
    {
      if (*(_QWORD *)v2)
        (*(void (**)(_QWORD))(**(_QWORD **)v2 + 8))(*(_QWORD *)v2);
    }
    v2 += 32;
  }
  v4 = (_BYTE *)*((_QWORD *)this + 78);
  v5 = (_BYTE *)*((_QWORD *)this + 79);
  while (v4 != v5)
  {
    if (!v4[32] && *(_QWORD *)v4)
      (*(void (**)(_QWORD))(**(_QWORD **)v4 + 8))(*(_QWORD *)v4);
    v4 += 40;
  }
  v6 = (void *)*((_QWORD *)this + 93);
  if (v6)
  {
    *((_QWORD *)this + 94) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 90);
  if (v7)
  {
    *((_QWORD *)this + 91) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 87);
  if (v8)
  {
    *((_QWORD *)this + 88) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 84);
  if (v9)
  {
    *((_QWORD *)this + 85) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 81);
  if (v10)
  {
    *((_QWORD *)this + 82) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 78);
  if (v11)
  {
    *((_QWORD *)this + 79) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 75);
  if (v12)
  {
    *((_QWORD *)this + 76) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 72);
  if (v13)
  {
    *((_QWORD *)this + 73) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 69);
  if (v14)
  {
    *((_QWORD *)this + 70) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 66);
  if (v15)
  {
    *((_QWORD *)this + 67) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 63);
  if (v16)
  {
    *((_QWORD *)this + 64) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 60);
  if (v17)
  {
    *((_QWORD *)this + 61) = v17;
    operator delete(v17);
  }
  v18 = (_QWORD *)*((_QWORD *)this + 57);
  if (v18)
  {
    do
    {
      v19 = (_QWORD *)*v18;
      operator delete(v18);
      v18 = v19;
    }
    while (v19);
  }
  v20 = (void *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v20)
    operator delete(v20);
  std::condition_variable::~condition_variable((std::condition_variable *)this + 8);
  std::condition_variable::~condition_variable((std::condition_variable *)this + 7);
  std::mutex::~mutex((std::mutex *)((char *)this + 272));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 216));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 168));
  std::mutex::~mutex((std::mutex *)((char *)this + 104));
  v21 = (_QWORD *)*((_QWORD *)this + 10);
  if (v21)
  {
    do
    {
      v22 = (_QWORD *)*v21;
      operator delete(v21);
      v21 = v22;
    }
    while (v22);
  }
  v23 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v23)
    operator delete(v23);
  v24 = (_QWORD *)*((_QWORD *)this + 5);
  if (v24)
  {
    do
    {
      v25 = (_QWORD *)*v24;
      operator delete(v24);
      v24 = v25;
    }
    while (v25);
  }
  v26 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v26)
    operator delete(v26);
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

__n128 geo::packed_array<mre::TextureStorage,geo::handle<mre::Texture>>::erase(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 result;
  __int128 v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v2 < (*(_QWORD *)(a1 + 32) - v3) >> 3)
  {
    v4 = *(_QWORD *)(v3 + 8 * v2);
    v6 = v4 == 0;
    v5 = HIDWORD(v4);
    v6 = !v6 && HIDWORD(*a2) == (_DWORD)v5;
    if (v6)
    {
      v10 = *(unint64_t **)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v10 >= v9)
      {
        v12 = *(unint64_t **)a1;
        v13 = (uint64_t)v10 - *(_QWORD *)a1;
        v14 = v13 >> 3;
        v15 = (v13 >> 3) + 1;
        if (v15 >> 61)
          abort();
        v16 = v9 - (_QWORD)v12;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = (unint64_t *)&v18[8 * v14];
        v20 = &v18[8 * v17];
        *v19 = v2;
        v11 = v19 + 1;
        if (v10 != v12)
        {
          v21 = (char *)v10 - (char *)v12 - 8;
          if (v21 < 0x58)
            goto LABEL_34;
          if ((unint64_t)((char *)v10 - v18 - v13) < 0x20)
            goto LABEL_34;
          v22 = (v21 >> 3) + 1;
          v23 = &v18[8 * v14 - 16];
          v24 = v10 - 2;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_34:
            do
            {
              v27 = *--v10;
              *--v19 = v27;
            }
            while (v10 != v12);
          }
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = v20;
        if (v12)
        {
          operator delete(v12);
          v3 = *(_QWORD *)(a1 + 24);
        }
      }
      else
      {
        *v10 = v2;
        v11 = v10 + 1;
      }
      *(_QWORD *)(a1 + 8) = v11;
      v28 = *(_QWORD *)(v3 + 8 * *(unsigned int *)a2);
      v30 = *(_QWORD *)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 0x6666666666666668 * ((unint64_t)(v29 - v30) >> 3) - 8);
      v32 = v30 + 40 * v28;
      v33 = *(_QWORD *)(v32 + 32);
      result = *(__n128 *)v32;
      v35 = *(_OWORD *)(v32 + 16);
      v36 = *(_BYTE *)(v29 - 8);
      v37 = *(_OWORD *)(v29 - 24);
      *(_OWORD *)v32 = *(_OWORD *)(v29 - 40);
      *(_OWORD *)(v32 + 16) = v37;
      *(_BYTE *)(v32 + 32) = v36;
      *(_OWORD *)(v29 - 24) = v35;
      *(__n128 *)(v29 - 40) = result;
      *(_BYTE *)(v29 - 8) = v33;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8 * v31) = v28;
      v38 = 8 * v28;
      v39 = *(_QWORD *)(a1 + 72);
      v40 = *(_QWORD **)(a1 + 80);
      v41 = *(_QWORD *)(v39 + v38);
      v42 = *--v40;
      *(_QWORD *)(v39 + v38) = v42;
      *v40 = v41;
      *(_QWORD *)(a1 + 56) -= 40;
      *(_QWORD *)(a1 + 80) = v40;
      v43 = 8 * *(unsigned int *)a2;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v43 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 24) + v43 + 4) << 32)
                                                   + 0x100000000) >> 32;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v43) = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    }
  }
  return result;
}

unint64_t geo::packed_array<mre::TextureStorage,geo::handle<mre::Texture>>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  _QWORD *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;

  v4 = a1[1];
  if (*a1 == v4)
  {
    v7 = (-858993459 * ((a1[7] - a1[6]) >> 3)) | 0x100000000;
    v9 = (uint64_t *)a1[4];
    v8 = a1[5];
    if ((unint64_t)v9 >= v8)
    {
      v11 = (uint64_t *)a1[3];
      v12 = v9 - v11;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        goto LABEL_66;
      v14 = v8 - (_QWORD)v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          goto LABEL_67;
        v16 = operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = (uint64_t *)&v16[8 * v12];
      v18 = &v16[8 * v15];
      *v17 = v7;
      v10 = v17 + 1;
      if (v9 == v11)
      {
        v11 = v9;
      }
      else
      {
        v19 = (char *)v9 - (char *)v11 - 8;
        if (v19 < 0x58)
          goto LABEL_70;
        if ((unint64_t)((char *)v11 - v16) < 0x20)
          goto LABEL_70;
        v20 = (v19 >> 3) + 1;
        v21 = &v16[8 * v12 - 16];
        v22 = v9 - 2;
        v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 4;
          v23 -= 4;
        }
        while (v23);
        v17 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        v9 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_70:
          do
          {
            v25 = *--v9;
            *--v17 = v25;
          }
          while (v9 != v11);
          v11 = (uint64_t *)a1[3];
        }
      }
      a1[3] = v17;
      a1[4] = v10;
      a1[5] = v18;
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[4] = v10;
    v6 = *(v10 - 1);
  }
  else
  {
    v5 = *(_QWORD *)(v4 - 8);
    a1[1] = v4 - 8;
    *(_DWORD *)(a1[3] + 8 * v5) = -858993459 * ((a1[7] - a1[6]) >> 3);
    *(_DWORD *)(a1[3] + 8 * v5 + 4) = (((unint64_t)*(unsigned int *)(a1[3] + 8 * v5 + 4) << 32) + 0x100000000) >> 32;
    v6 = v5 | ((unint64_t)*(unsigned int *)(a1[3] + 8 * v5 + 4) << 32);
  }
  v27 = (char *)a1[7];
  v26 = a1[8];
  if ((unint64_t)v27 >= v26)
  {
    v31 = (char *)a1[6];
    v32 = 0xCCCCCCCCCCCCCCCDLL * ((v27 - v31) >> 3) + 1;
    if (v32 > 0x666666666666666)
      goto LABEL_66;
    v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v26 - (_QWORD)v31) >> 3);
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0x333333333333333)
      v34 = 0x666666666666666;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 > 0x666666666666666)
        goto LABEL_67;
      v35 = (char *)operator new(40 * v34);
    }
    else
    {
      v35 = 0;
    }
    v36 = &v35[8 * ((v27 - v31) >> 3)];
    v37 = a2[1];
    *(_OWORD *)v36 = *a2;
    *((_OWORD *)v36 + 1) = v37;
    *((_QWORD *)v36 + 4) = *((_QWORD *)a2 + 4);
    v30 = v36 + 40;
    if (v27 != v31)
    {
      do
      {
        v38 = *(_OWORD *)(v27 - 40);
        v39 = *(_OWORD *)(v27 - 24);
        *(v36 - 8) = *(v27 - 8);
        *(_OWORD *)(v36 - 24) = v39;
        *(_OWORD *)(v36 - 40) = v38;
        v36 -= 40;
        v27 -= 40;
      }
      while (v27 != v31);
      v27 = (char *)a1[6];
    }
    a1[6] = v36;
    a1[7] = v30;
    a1[8] = &v35[40 * v34];
    if (v27)
      operator delete(v27);
  }
  else
  {
    v28 = *a2;
    v29 = a2[1];
    *((_QWORD *)v27 + 4) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v27 = v28;
    *((_OWORD *)v27 + 1) = v29;
    v30 = v27 + 40;
  }
  a1[7] = v30;
  v41 = (char *)a1[10];
  v40 = a1[11];
  if ((unint64_t)v41 < v40)
  {
    *(_QWORD *)v41 = v6;
    v42 = v41 + 8;
    goto LABEL_65;
  }
  v43 = (char *)a1[9];
  v44 = (v41 - v43) >> 3;
  v45 = v44 + 1;
  if ((unint64_t)(v44 + 1) >> 61)
LABEL_66:
    abort();
  v46 = v40 - (_QWORD)v43;
  if (v46 >> 2 > v45)
    v45 = v46 >> 2;
  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
    v47 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v47 = v45;
  if (v47)
  {
    if (!(v47 >> 61))
    {
      v48 = operator new(8 * v47);
      goto LABEL_56;
    }
LABEL_67:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v48 = 0;
LABEL_56:
  v49 = &v48[8 * v44];
  v50 = &v48[8 * v47];
  *v49 = v6;
  v42 = v49 + 1;
  if (v41 != v43)
  {
    v51 = v41 - v43 - 8;
    if (v51 < 0x58)
      goto LABEL_71;
    if ((unint64_t)(v43 - v48) < 0x20)
      goto LABEL_71;
    v52 = (v51 >> 3) + 1;
    v53 = &v48[8 * v44 - 16];
    v54 = v41 - 16;
    v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v56 = *(_OWORD *)v54;
      *(v53 - 1) = *((_OWORD *)v54 - 1);
      *v53 = v56;
      v53 -= 2;
      v54 -= 32;
      v55 -= 4;
    }
    while (v55);
    v49 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
    v41 -= 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
    if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_71:
      do
      {
        v57 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *--v49 = v57;
      }
      while (v41 != v43);
    }
  }
  a1[9] = v49;
  a1[10] = v42;
  a1[11] = v50;
  if (v43)
    operator delete(v43);
LABEL_65:
  a1[10] = v42;
  return v6;
}

_QWORD *mre::GGLResourceStore::updateUnmanagedTexture(uint64_t a1, unint64_t a2, uint64_t a3)
{
  std::__shared_mutex_base *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v13;
  _QWORD *result;
  unint64_t v15;

  v15 = a2;
  v6 = (std::__shared_mutex_base *)(a1 + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 104));
  v7 = *(_QWORD *)(a1 + 504);
  if (a2 < (unint64_t)((*(_QWORD *)(a1 + 512) - v7) >> 3)
    && ((v8 = *(_QWORD *)(v7 + 8 * a2)) != 0 ? (v9 = HIDWORD(a2) == HIDWORD(v8)) : (v9 = 0), v9))
  {
    v11 = (_QWORD *)(*(_QWORD *)(a1 + 528) + 40 * v8);
    v10 = *(_QWORD **)(a1 + 536);
  }
  else
  {
    v10 = *(_QWORD **)(a1 + 536);
    v11 = v10;
  }
  std::__shared_mutex_base::unlock_shared(v6);
  if (v11 != v10 && v11 != 0)
  {
    std::__shared_mutex_base::lock(v6);
    *v11 = a3;
    v11[1] = a3;
    if (a3)
    {
      v13 = *(unsigned int *)(a3 + 68) | ((unint64_t)*(unsigned int *)(a3 + 64) << 32);
      v11[2] = *(_QWORD *)(a3 + 80);
      v11[3] = v13;
    }
    std::__shared_mutex_base::unlock(v6);
  }
  result = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(a1 + 440), a2, &v15);
  ++result[3];
  return result;
}

uint64_t md::LabelSettingsStyleCache::muninPointStyle(md::LabelSettingsStyleCache *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  float v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  gss::Allocator *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  gss::Allocator *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int *v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  float v55;
  _QWORD *v56;
  std::__shared_weak_count *v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned __int8 v60;
  gss::Allocator *v61;
  std::__shared_weak_count *v62;
  char v63;

  result = *((_QWORD *)this + 2);
  if (!result)
  {
    v3 = operator new();
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    v4 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v3;
    if (v4)
    {
      MEMORY[0x1A1AF4E00](v4, 0x1000C40D77C405DLL);
      v3 = *((_QWORD *)this + 2);
    }
    *(_BYTE *)(v3 + 4) = 4;
    *(_DWORD *)v3 = 20;
    *(_DWORD *)(v3 + 16) = 1092616192;
    *(_QWORD *)(v3 + 8) = 0x4170000042A00000;
    v55 = 45.0;
    v5 = gss::Allocator::instance((gss::Allocator *)v3);
    v59 = v5;
    v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 8, 4);
    v7 = v6;
    v56 = v6;
    v58 = v6 + 1;
    if (v6)
      *v6 = 65611;
    v57 = (std::__shared_weak_count *)(v6 + 1);
    md::LabelSettingsStyleCache::styleQueryForAttributes((unint64_t *)&v61, *(_QWORD *)this, (uint64_t)&v56);
    if (v7)
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 40))(v5, v7, 8);
    v8 = (unint64_t)v61;
    if (v61)
    {
      v9 = v62;
      if (v62)
      {
        p_shared_owners = (unint64_t *)&v62->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v57 = v9;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      else
      {
        v57 = 0;
      }
      v58 = 0;
      v59 = 0;
      v56 = (_QWORD *)v8;
      v60 = 0;
      v14 = (*(uint64_t (**)(unint64_t, _QWORD **))(*(_QWORD *)v8 + 48))(v8, &v58);
      v60 = v14;
      if (v9)
      {
        v15 = (unint64_t *)&v9->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        v14 = v60;
      }
      if (v14)
      {
        overrideValueWithStyle<(gss::PropertyID)346,unsigned int>(v56[3], *((_DWORD **)this + 2));
        overrideValueWithStyle<(gss::PropertyID)357,float>(v56[3], (_DWORD *)(*((_QWORD *)this + 2) + 8));
        overrideValueWithStyle<(gss::PropertyID)359,float>(v56[3], (_DWORD *)(*((_QWORD *)this + 2) + 12));
        overrideValueWithStyle<(gss::PropertyID)360,float>(v56[3], (_DWORD *)(*((_QWORD *)this + 2) + 16));
        overrideValueWithStyle<(gss::PropertyID)361,float>(v56[3], &v55);
      }
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v56);
      v13 = v55 * 0.017453;
    }
    else
    {
      v13 = 0.7854;
    }
    *(float *)(*((_QWORD *)this + 2) + 20) = cosf(v13);
    v18 = v62;
    if (v62)
    {
      v19 = (unint64_t *)&v62->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = *((_QWORD *)this + 2);
    *(_BYTE *)(v21 + 28) = 3;
    *(_DWORD *)(v21 + 24) = 10;
    v22 = gss::Allocator::instance(v17);
    v59 = v22;
    v23 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, 8, 4);
    v24 = v23;
    v56 = v23;
    v58 = v23 + 1;
    if (v23)
      *v23 = 0x20001004BLL;
    v57 = (std::__shared_weak_count *)(v23 + 1);
    md::LabelSettingsStyleCache::styleQueryForAttributes((unint64_t *)&v61, *(_QWORD *)this, (uint64_t)&v56);
    if (v24)
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v22 + 40))(v22, v24, 8);
    v25 = v61;
    if (v61)
    {
      v26 = v62;
      if (v62)
      {
        v27 = (unint64_t *)&v62->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        v57 = v26;
        do
          v29 = __ldxr(v27);
        while (__stxr(v29 + 1, v27));
      }
      else
      {
        v57 = 0;
      }
      v58 = 0;
      v59 = 0;
      v56 = v25;
      v60 = 0;
      v30 = (*(uint64_t (**)(gss::Allocator *, _QWORD **))(*(_QWORD *)v25 + 48))(v25, &v58);
      v60 = v30;
      if (v26)
      {
        v31 = (unint64_t *)&v26->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        v30 = v60;
      }
      if (v30)
        overrideValueWithStyle<(gss::PropertyID)346,unsigned int>(v56[3], (_DWORD *)(*((_QWORD *)this + 2) + 24));
      v25 = (gss::Allocator *)gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v56);
    }
    v33 = v62;
    if (v62)
    {
      v34 = (unint64_t *)&v62->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = *((_QWORD *)this + 2);
    *(_BYTE *)(v36 + 36) = 3;
    *(_DWORD *)(v36 + 32) = 10;
    *(_DWORD *)(v36 + 44) = 1148518400;
    v37 = gss::Allocator::instance(v25);
    v59 = v37;
    v38 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, 8, 4);
    v39 = v38;
    v56 = v38;
    v58 = v38 + 1;
    if (v38)
      *v38 = 0x30001004BLL;
    v57 = (std::__shared_weak_count *)(v38 + 1);
    md::LabelSettingsStyleCache::styleQueryForAttributes((unint64_t *)&v61, *(_QWORD *)this, (uint64_t)&v56);
    if (v39)
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v37 + 40))(v37, v39, 8);
    v40 = (unint64_t)v61;
    if (v61)
    {
      v41 = v62;
      if (v62)
      {
        v42 = (unint64_t *)&v62->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
        v57 = v41;
        do
          v44 = __ldxr(v42);
        while (__stxr(v44 + 1, v42));
      }
      else
      {
        v57 = 0;
      }
      v58 = 0;
      v59 = 0;
      v56 = (_QWORD *)v40;
      v60 = 0;
      v45 = (*(uint64_t (**)(unint64_t, _QWORD **))(*(_QWORD *)v40 + 48))(v40, &v58);
      v60 = v45;
      if (v41)
      {
        v46 = (unint64_t *)&v41->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
        v45 = v60;
      }
      if (v45)
      {
        overrideValueWithStyle<(gss::PropertyID)346,unsigned int>(v56[3], (_DWORD *)(*((_QWORD *)this + 2) + 32));
        overrideValueWithStyle<(gss::PropertyID)357,float>(v56[3], (_DWORD *)(*((_QWORD *)this + 2) + 44));
        v48 = v56[3];
        v49 = *(unsigned __int8 *)(v48 + 12);
        if (v49 == 2)
        {
          LOBYTE(v55) = 1;
          v63 = 1;
          v50 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v48, 0x164u, 0, &v55);
          gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v48, 0x164u, 1u, &v63);
          v51 = *v50;
        }
        else
        {
          v51 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v56[3], 0x164u, v49, 0);
        }
        *(_DWORD *)(*((_QWORD *)this + 2) + 40) = v51;
      }
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v56);
    }
    v52 = v62;
    if (v62)
    {
      v53 = (unint64_t *)&v62->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    return *((_QWORD *)this + 2);
  }
  return result;
}

void sub_19FB61EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a11);
  v18 = a17;
  if (a17)
  {
    p_shared_owners = (unint64_t *)&a17->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t overrideValueWithStyle<(gss::PropertyID)346,unsigned int>(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t result;
  int *v6;
  int v7;
  char v8;
  char v9;

  v4 = *(unsigned __int8 *)(a1 + 12);
  if (v4 != 2)
  {
    result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x15Au, *(unsigned __int8 *)(a1 + 12));
    if (!(_DWORD)result)
      return result;
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(a1, 0x15Au, v4, 0);
    v7 = *(_DWORD *)result;
    goto LABEL_7;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x15Au, 0) & 1) != 0
    || (result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x15Au, 1u), (result & 1) != 0))
  {
    v9 = 1;
    v8 = 1;
    v6 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(a1, 0x15Au, 0, &v9);
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(a1, 0x15Au, 1u, &v8);
    v7 = *v6;
LABEL_7:
    *a2 = v7;
  }
  return result;
}

uint64_t overrideValueWithStyle<(gss::PropertyID)357,float>(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t result;
  int *v6;
  int v7;
  char v8;
  char v9;

  v4 = *(unsigned __int8 *)(a1 + 12);
  if (v4 != 2)
  {
    result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x165u, *(unsigned __int8 *)(a1 + 12));
    if (!(_DWORD)result)
      return result;
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x165u, v4, 0);
    v7 = *(_DWORD *)result;
    goto LABEL_7;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x165u, 0) & 1) != 0
    || (result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x165u, 1u), (result & 1) != 0))
  {
    v9 = 1;
    v8 = 1;
    v6 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x165u, 0, &v9);
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x165u, 1u, &v8);
    v7 = *v6;
LABEL_7:
    *a2 = v7;
  }
  return result;
}

uint64_t overrideValueWithStyle<(gss::PropertyID)359,float>(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t result;
  int *v6;
  int v7;
  char v8;
  char v9;

  v4 = *(unsigned __int8 *)(a1 + 12);
  if (v4 != 2)
  {
    result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x167u, *(unsigned __int8 *)(a1 + 12));
    if (!(_DWORD)result)
      return result;
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x167u, v4, 0);
    v7 = *(_DWORD *)result;
    goto LABEL_7;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x167u, 0) & 1) != 0
    || (result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x167u, 1u), (result & 1) != 0))
  {
    v9 = 1;
    v8 = 1;
    v6 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x167u, 0, &v9);
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x167u, 1u, &v8);
    v7 = *v6;
LABEL_7:
    *a2 = v7;
  }
  return result;
}

uint64_t overrideValueWithStyle<(gss::PropertyID)360,float>(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t result;
  int *v6;
  int v7;
  char v8;
  char v9;

  v4 = *(unsigned __int8 *)(a1 + 12);
  if (v4 != 2)
  {
    result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x168u, *(unsigned __int8 *)(a1 + 12));
    if (!(_DWORD)result)
      return result;
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x168u, v4, 0);
    v7 = *(_DWORD *)result;
    goto LABEL_7;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x168u, 0) & 1) != 0
    || (result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x168u, 1u), (result & 1) != 0))
  {
    v9 = 1;
    v8 = 1;
    v6 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x168u, 0, &v9);
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x168u, 1u, &v8);
    v7 = *v6;
LABEL_7:
    *a2 = v7;
  }
  return result;
}

uint64_t overrideValueWithStyle<(gss::PropertyID)361,float>(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t result;
  int *v6;
  int v7;
  char v8;
  char v9;

  v4 = *(unsigned __int8 *)(a1 + 12);
  if (v4 != 2)
  {
    result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x169u, *(unsigned __int8 *)(a1 + 12));
    if (!(_DWORD)result)
      return result;
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x169u, v4, 0);
    v7 = *(_DWORD *)result;
    goto LABEL_7;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x169u, 0) & 1) != 0
    || (result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x169u, 1u), (result & 1) != 0))
  {
    v9 = 1;
    v8 = 1;
    v6 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x169u, 0, &v9);
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x169u, 1u, &v8);
    v7 = *v6;
LABEL_7:
    *a2 = v7;
  }
  return result;
}

uint64_t md::LabelSettingsStyleCache::muninRoadStyle(md::LabelSettingsStyleCache *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  gss::Allocator *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  gss::Allocator *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  float v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v33;
  int *v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  int *v40;
  int v41;
  gss::Allocator *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  gss::Allocator *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int *v58;
  int v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  gss::Allocator *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  int v69;
  _QWORD *v70;
  std::__shared_weak_count *v71;
  _QWORD *v72;
  uint64_t v73;
  unsigned __int8 v74;
  char v75;
  char v76;

  result = *((_QWORD *)this + 3);
  if (result)
    return result;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_QWORD *)(v3 + 32) = 0;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v3;
  if (v4)
  {
    MEMORY[0x1A1AF4E00](v4, 0x1000C40005DEF19);
    v3 = *((_QWORD *)this + 3);
  }
  *(_BYTE *)v3 = 4;
  *(_DWORD *)(v3 + 4) = 5;
  *(_QWORD *)(v3 + 8) = 0x42A0000041700000;
  v5 = gss::Allocator::instance((gss::Allocator *)v3);
  v73 = v5;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 8, 4);
  v7 = v6;
  v70 = v6;
  v72 = v6 + 1;
  if (v6)
    *v6 = 0x10001004BLL;
  v71 = (std::__shared_weak_count *)(v6 + 1);
  md::LabelSettingsStyleCache::styleQueryForAttributes((unint64_t *)&v65, *(_QWORD *)this, (uint64_t)&v70);
  if (v7)
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 40))(v5, v7, 8);
  v8 = v65;
  if (v65)
  {
    v9 = (std::__shared_weak_count *)v66;
    if (v66)
    {
      v10 = (unint64_t *)(v66 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v71 = v9;
      do
        v12 = __ldxr(v10);
      while (__stxr(v12 + 1, v10));
    }
    else
    {
      v71 = 0;
    }
    v72 = 0;
    v73 = 0;
    v70 = v8;
    v74 = 0;
    v13 = (*(uint64_t (**)(gss::Allocator *, _QWORD **))(*(_QWORD *)v8 + 48))(v8, &v72);
    v74 = v13;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      v13 = v74;
    }
    if (v13)
    {
      overrideValueWithStyle<(gss::PropertyID)346,unsigned int>(v70[3], (_DWORD *)(*((_QWORD *)this + 3) + 4));
      overrideValueWithStyle<(gss::PropertyID)359,float>(v70[3], (_DWORD *)(*((_QWORD *)this + 3) + 8));
      overrideValueWithStyle<(gss::PropertyID)360,float>(v70[3], (_DWORD *)(*((_QWORD *)this + 3) + 12));
    }
    v8 = (gss::Allocator *)gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v70);
  }
  v16 = (std::__shared_weak_count *)v66;
  if (v66)
  {
    v17 = (unint64_t *)(v66 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *((_QWORD *)this + 3);
  *(_DWORD *)(v19 + 24) = -1073741824;
  *(_QWORD *)(v19 + 16) = 0x4080000040000000;
  v69 = 1114636288;
  v68 = gss::Allocator::instance(v8);
  v20 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, 16, 4);
  v65 = v20;
  v67 = (char *)v20 + 16;
  if (v20)
    *(_QWORD *)v20 = 0x10001004BLL;
  *((_QWORD *)v20 + 1) = 0x10001004FLL;
  v66 = (unint64_t)v20 + 16;
  md::LabelSettingsStyleCache::styleQueryForAttributes(&v63, *(_QWORD *)this, (uint64_t)&v65);
  v21 = v63;
  if (v63)
  {
    v22 = v64;
    if (v64)
    {
      v23 = (unint64_t *)&v64->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v71 = v22;
      do
        v25 = __ldxr(v23);
      while (__stxr(v25 + 1, v23));
    }
    else
    {
      v71 = 0;
    }
    v72 = 0;
    v73 = 0;
    v70 = (_QWORD *)v21;
    v74 = 0;
    v27 = (*(uint64_t (**)(unint64_t, _QWORD **))(*(_QWORD *)v21 + 48))(v21, &v72);
    v74 = v27;
    if (v22)
    {
      v28 = (unint64_t *)&v22->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      v27 = v74;
    }
    if (!v27)
      goto LABEL_63;
    v30 = *((_QWORD *)this + 3);
    v31 = v70;
    v32 = v70[3];
    v33 = *(unsigned __int8 *)(v32 + 12);
    if (v33 == 2)
    {
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v32, 0x15Cu, 0) & 1) == 0
        && (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v32, 0x15Cu, 1u) & 1) == 0)
      {
LABEL_55:
        overrideValueWithStyle<(gss::PropertyID)347,float>(v31[3], (_DWORD *)(v30 + 16));
        v36 = *((_QWORD *)this + 3);
        v37 = v70;
        v38 = v70[3];
        v39 = *(unsigned __int8 *)(v38 + 12);
        if (v39 == 2)
        {
          if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v38, 0x166u, 0) & 1) == 0
            && (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v38, 0x166u, 1u) & 1) == 0)
          {
            goto LABEL_62;
          }
          v76 = 1;
          v75 = 1;
          v40 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v38, 0x166u, 0, &v76);
          gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v38, 0x166u, 1u, &v75);
          v41 = *v40;
        }
        else
        {
          if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v38, 0x166u, *(unsigned __int8 *)(v38 + 12)))
          {
LABEL_62:
            overrideValueWithStyle<(gss::PropertyID)361,float>(v37[3], &v69);
LABEL_63:
            gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v70);
            v26 = *(float *)&v69;
            goto LABEL_64;
          }
          v41 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v38, 0x166u, v39, 0);
        }
        *(_DWORD *)(v36 + 20) = v41;
        v37 = v70;
        goto LABEL_62;
      }
      v76 = 1;
      v75 = 1;
      v34 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v32, 0x15Cu, 0, &v76);
      gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v32, 0x15Cu, 1u, &v75);
      v35 = *v34;
    }
    else
    {
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v32, 0x15Cu, *(unsigned __int8 *)(v32 + 12)))goto LABEL_55;
      v35 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v32, 0x15Cu, v33, 0);
    }
    *(_DWORD *)(v30 + 24) = v35;
    v30 = *((_QWORD *)this + 3);
    v31 = v70;
    goto LABEL_55;
  }
  v26 = 60.0;
LABEL_64:
  *(float *)(*((_QWORD *)this + 3) + 28) = cosf(v26 * 0.017453);
  v43 = v64;
  if (v64)
  {
    v44 = (unint64_t *)&v64->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v65)
  {
    v66 = (unint64_t)v65;
    v42 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, gss::Allocator *, int64_t))(*(_QWORD *)v68 + 40))(v68, v65, v67 - (char *)v65);
  }
  *(_QWORD *)(*((_QWORD *)this + 3) + 32) = 0x40000000;
  v68 = gss::Allocator::instance(v42);
  v46 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, 16, 4);
  v65 = v46;
  v67 = (char *)v46 + 16;
  if (v46)
    *(_QWORD *)v46 = 0x10001004BLL;
  *((_QWORD *)v46 + 1) = 0x20001004FLL;
  v66 = (unint64_t)v46 + 16;
  md::LabelSettingsStyleCache::styleQueryForAttributes(&v63, *(_QWORD *)this, (uint64_t)&v65);
  v47 = v63;
  if (!v63)
    goto LABEL_96;
  v48 = v64;
  if (v64)
  {
    v49 = (unint64_t *)&v64->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    v71 = v48;
    do
      v51 = __ldxr(v49);
    while (__stxr(v51 + 1, v49));
  }
  else
  {
    v71 = 0;
  }
  v72 = 0;
  v73 = 0;
  v70 = (_QWORD *)v47;
  v74 = 0;
  v52 = (*(uint64_t (**)(unint64_t, _QWORD **))(*(_QWORD *)v47 + 48))(v47, &v72);
  v74 = v52;
  if (v48)
  {
    v53 = (unint64_t *)&v48->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    v52 = v74;
  }
  if (v52)
  {
    overrideValueWithStyle<(gss::PropertyID)347,float>(v70[3], (_DWORD *)(*((_QWORD *)this + 3) + 32));
    v55 = *((_QWORD *)this + 3);
    v56 = v70[3];
    v57 = *(unsigned __int8 *)(v56 + 12);
    if (v57 == 2)
    {
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v56, 0x16Au, 0) & 1) == 0
        && (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v56, 0x16Au, 1u) & 1) == 0)
      {
        goto LABEL_95;
      }
      LOBYTE(v69) = 1;
      v76 = 1;
      v58 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v56, 0x16Au, 0, &v69);
      gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v56, 0x16Au, 1u, &v76);
      v59 = *v58;
      goto LABEL_94;
    }
    if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v56, 0x16Au, *(unsigned __int8 *)(v56 + 12)))
    {
      v59 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v56, 0x16Au, v57, 0);
LABEL_94:
      *(_DWORD *)(v55 + 36) = v59;
    }
  }
LABEL_95:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v70);
LABEL_96:
  v60 = v64;
  if (v64)
  {
    v61 = (unint64_t *)&v64->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (v65)
    (*(void (**)(uint64_t, gss::Allocator *, int64_t))(*(_QWORD *)v68 + 40))(v68, v65, v67 - (char *)v65);
  return *((_QWORD *)this + 3);
}

void sub_19FB62CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;

  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  if (a18)
  {
    v24 = (unint64_t *)&a18->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  if (v20)
  {
    v26 = (unint64_t *)&v20->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (a11)
  {
    v28 = (unint64_t *)&a11->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 40))(a15);
  _Unwind_Resume(exception_object);
}

uint64_t overrideValueWithStyle<(gss::PropertyID)347,float>(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t result;
  int *v6;
  int v7;
  char v8;
  char v9;

  v4 = *(unsigned __int8 *)(a1 + 12);
  if (v4 != 2)
  {
    result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x15Bu, *(unsigned __int8 *)(a1 + 12));
    if (!(_DWORD)result)
      return result;
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x15Bu, v4, 0);
    v7 = *(_DWORD *)result;
    goto LABEL_7;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x15Bu, 0) & 1) != 0
    || (result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x15Bu, 1u), (result & 1) != 0))
  {
    v9 = 1;
    v8 = 1;
    v6 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x15Bu, 0, &v9);
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x15Bu, 1u, &v8);
    v7 = *v6;
LABEL_7:
    *a2 = v7;
  }
  return result;
}

uint64_t md::LabelSettingsStyleCache::styleCaps(md::LabelSettingsStyleCache *this)
{
  uint64_t result;
  uint64_t v3;
  gss::Allocator *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  const void *v18;
  const void *p_p;
  void *v20;
  BOOL v21;
  uint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void *__p;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD v30[5];
  char v31;
  std::string v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  _QWORD v35[2];
  unsigned __int8 v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  const void *v39[4];

  result = *((_QWORD *)this + 9);
  if (result)
    return result;
  v3 = operator new();
  *(_WORD *)v3 = 0;
  *(_BYTE *)(v3 + 2) = 0;
  v4 = (gss::Allocator *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v3;
  if (v4)
    v4 = (gss::Allocator *)MEMORY[0x1A1AF4E00](v4, 0x1000C4033FC2DF1);
  v5 = gss::Allocator::instance(v4);
  v30[0] = v5;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 8, 4);
  v7 = v6;
  __p = v6;
  v29 = v6 + 1;
  if (v6)
    *v6 = 0xC0001004BLL;
  v28 = v6 + 1;
  md::LabelSettingsStyleCache::styleQueryForAttributes(&v37, *(_QWORD *)this, (uint64_t)&__p);
  if (v7)
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 40))(v5, v7, 8);
  v8 = v37;
  if (v37)
  {
    v9 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v34 = v9;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v34 = 0;
    }
    v35[0] = 0;
    v35[1] = 0;
    v33 = v8;
    v36 = 0;
    v13 = (*(uint64_t (**)(unint64_t, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v35);
    v36 = v13;
    if (v9)
    {
      v14 = (unint64_t *)&v9->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      v13 = v36;
    }
    if (!v13)
      goto LABEL_38;
    v16 = *(_QWORD *)(v33 + 24);
    v17 = *(unsigned __int8 *)(v16 + 12);
    if (v17 == 2)
    {
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v33 + 24), 0x1C7u, 0) & 1) != 0)
        goto LABEL_27;
      v17 = 1;
    }
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v16, 0x1C7u, v17))
    {
LABEL_38:
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v33);
      goto LABEL_39;
    }
LABEL_27:
    gss::RenderStyleHelper<gss::PropertyID,std::string>::valueForKey(&v32, 0x1C7u, 1, v16, 0);
    md::StyleSettingsParser::StyleSettingsParser((uint64_t)&__p, (uint64_t)&v32);
    v18 = (const void *)HIBYTE(v29);
    if (SHIBYTE(v29) >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (SHIBYTE(v29) < 0)
      v18 = v28;
    v39[0] = p_p;
    v39[1] = v18;
    md::StyleSettingsParser::parseNode((uint64_t)&__p, (uint64_t)v30, (unsigned __int8 **)v39);
    if (!v31)
    {
      v20 = operator new(0x20uLL);
      v39[0] = v20;
      *(_OWORD *)&v39[1] = xmmword_19FFB3620;
      strcpy((char *)v20, "ignoreIconShadowsForLayout");
      **((_BYTE **)this + 9) = (unsigned __int16)md::StyleSettingsObjectNode::getValue<BOOL>((uint64_t)v30, v39) > 0x100u;
      operator delete(v20);
      HIBYTE(v39[2]) = 20;
      strcpy((char *)v39, "collideWithRouteLine");
      v21 = (unsigned __int16)md::StyleSettingsObjectNode::getValue<BOOL>((uint64_t)v30, v39) > 0x100u;
      v22 = *((_QWORD *)this + 9);
      *(_BYTE *)(v22 + 1) = v21;
      v23 = operator new(0x28uLL);
      v39[0] = v23;
      *(_OWORD *)&v39[1] = xmmword_19FFB3C00;
      strcpy((char *)v23, "useLabelOffsetForGeographicLines");
      *(_BYTE *)(v22 + 2) = (unsigned __int16)md::StyleSettingsObjectNode::getValue<BOOL>((uint64_t)v30, v39) > 0x100u;
      operator delete(v23);
    }
    v30[0] = &off_1E429F8B0;
    std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::destroy((char *)v30[3]);
    if (SHIBYTE(v29) < 0)
      operator delete(__p);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    goto LABEL_38;
  }
LABEL_39:
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return *((_QWORD *)this + 9);
}

void sub_19FB63444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;

  std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::destroy(a19);
  if (a15 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a28);
  v33 = *(std::__shared_weak_count **)(v31 - 88);
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void md::RoadTileData::~RoadTileData(md::RoadTileData *this)
{
  md::RoadTileData::~RoadTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;

  *(_QWORD *)this = &off_1E428D520;
  *((_QWORD *)this + 79) = &unk_1E428D560;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 115);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 113);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 113);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *((_QWORD *)this + 109);
  if (v8)
  {
    v9 = *((_QWORD *)this + 110);
    v10 = (void *)*((_QWORD *)this + 109);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 109);
    }
    *((_QWORD *)this + 110) = v8;
    operator delete(v10);
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 108);
  if (!v14)
    goto LABEL_26;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_26:
    v17 = *((_QWORD *)this + 103);
    if (!v17)
      goto LABEL_28;
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  v17 = *((_QWORD *)this + 103);
  if (v17)
  {
LABEL_27:
    *((_QWORD *)this + 104) = v17;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 106) + 40))(*((_QWORD *)this + 106), v17, *((_QWORD *)this + 105) - v17);
  }
LABEL_28:
  v18 = (_QWORD *)*((_QWORD *)this + 99);
  while (v18)
  {
    v26 = v18;
    v18 = (_QWORD *)*v18;
    v27 = (void *)v26[4];
    if (v27)
    {
      v26[5] = v27;
      operator delete(v27);
    }
    v28 = (std::__shared_weak_count *)v26[3];
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 100) + 40))(*((_QWORD *)this + 100), v26, 56);
  }
  v19 = *((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v19)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 98) + 40))(*((_QWORD *)this + 98), v19, 8 * *((_QWORD *)this + 97));
  v20 = *((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  md::MapTileData::~MapTileData(this);
}

void md::RoadTileData::updateWithContext(uint64_t a1, md::LayoutContext *this, int a3, uint64_t *a4)
{
  _QWORD *v7;
  int8x8_t v8;
  uint8x8_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  int v18;
  double v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  double v24;
  uint64_t v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  __int128 v38;
  double v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  _QWORD *v47;
  unint64_t v48;
  float32x2_t *v49;
  float32_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _DWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  _DWORD *v57;
  _OWORD v58[8];
  float64x2_t v59;
  float64_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  __int128 v65;
  double v66;
  double v67;
  double v68;
  double v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  _BYTE v78[80];
  __int128 v79;
  __int128 v80;
  __int128 v81;

  v7 = (_QWORD *)*((_QWORD *)this + 1);
  v8 = (int8x8_t)v7[1];
  if (!*(_QWORD *)&v8)
    goto LABEL_24;
  v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v8 <= 0x1AF456233693CD46uLL)
      v10 = 0x1AF456233693CD46uLL % *(_QWORD *)&v8;
  }
  else
  {
    v10 = (*(_QWORD *)&v8 - 1) & 0x1AF456233693CD46;
  }
  v11 = *(_QWORD **)(*v7 + 8 * v10);
  if (!v11)
    goto LABEL_24;
  v12 = (_QWORD *)*v11;
  if (!v12)
    goto LABEL_24;
  if (v9.u32[0] < 2uLL)
  {
    v13 = *(_QWORD *)&v8 - 1;
    while (1)
    {
      v15 = v12[1];
      if (v15 == 0x1AF456233693CD46)
      {
        if (v12[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v15 & v13) != v10)
      {
        goto LABEL_24;
      }
      v12 = (_QWORD *)*v12;
      if (!v12)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v14 = v12[1];
    if (v14 == 0x1AF456233693CD46)
      break;
    if (v14 >= *(_QWORD *)&v8)
      v14 %= *(_QWORD *)&v8;
    if (v14 != v10)
      goto LABEL_24;
LABEL_11:
    v12 = (_QWORD *)*v12;
    if (!v12)
      goto LABEL_24;
  }
  if (v12[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v16 = v12[5];
  if (*(_QWORD *)(v16 + 8) == 0x1AF456233693CD46)
  {
    v17 = *(double **)(v16 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v17 = 0;
LABEL_25:
  v18 = 1 << *(_BYTE *)(a1 + 169);
  v19 = 1.0 / (double)v18;
  v20 = *(_DWORD *)(a1 + 172);
  v21 = *(_DWORD *)(a1 + 176);
  md::LayoutContext::frameState(this);
  if (*(unsigned __int8 *)(v22 + 128) - 1 > 2)
  {
    v39 = (double)a3;
    if (!a3)
      v39 = -0.0;
    memset(&v78[8], 0, 32);
    *(double *)v78 = 1.0 / (double)v18;
    *(double *)&v78[40] = *(double *)v78;
    memset(&v78[48], 0, 32);
    *(double *)&v79 = *(double *)v78;
    *((_QWORD *)&v79 + 1) = 0;
    *(double *)&v80 = v39 + v19 * (double)v21;
    *((double *)&v80 + 1) = v19 * (double)(v18 + ~v20);
    v38 = xmmword_19FFB33A0;
  }
  else
  {
    v23 = 1 << *(_BYTE *)(a1 + 169);
    v24 = 1.0 / (double)v23;
    v25 = *(int *)(a1 + 176);
    v26 = v23 + ~*(_DWORD *)(a1 + 172);
    *(double *)v78 = v24 * (double)v25;
    *(double *)&v78[8] = v24 * (double)v26;
    *(double *)&v78[16] = v24 + (double)v25 * v24;
    *(double *)&v78[24] = v24 + (double)v26 * v24;
    gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v59, (double *)v78, 0.0, 0.0);
    *((_QWORD *)&v79 + 1) = 0;
    memset(&v78[8], 0, 72);
    v80 = v65;
    *(double *)&v81 = v66;
    *((_QWORD *)&v81 + 1) = 0x3FF0000000000000;
    *(double *)v78 = v67 - *(double *)&v65;
    *(double *)&v78[40] = v68 - *((double *)&v65 + 1);
    *(double *)&v79 = v69 - v66;
    v27 = v62;
    v28 = v63;
    v29 = v27 + v27;
    v30 = (v27 + v27) * v27;
    v31 = (v28 + v28) * v28;
    v32 = v61;
    v33 = v32 + v32;
    v34 = (v32 + v32) * v62;
    v35 = (v28 + v28) * v64;
    v36 = v63 * (v32 + v32);
    v37 = 1.0 - (v32 + v32) * v32;
    v70.f64[0] = 1.0 - (v30 + v31);
    v70.f64[1] = v35 + v34;
    v72.f64[0] = v34 - v35;
    v72.f64[1] = v37 - v31;
    v74.f64[0] = v64 * v29 + v36;
    v74.f64[1] = v29 * v63 - v64 * v33;
    v71.f64[0] = v36 - v64 * v29;
    v73 = (float64x2_t)COERCE_UNSIGNED_INT64(v64 * v33 + v29 * v63);
    v75.f64[0] = v37 - v30;
    v71.f64[1] = 0.0;
    v75.f64[1] = 0.0;
    v76 = v59;
    v77.f64[0] = v60;
    v77.f64[1] = 1.0;
    gm::operator*<double,4,4,4>((double *)v58, v70.f64, (double *)v78);
    *(_OWORD *)v78 = v58[0];
    *(_OWORD *)&v78[16] = v58[1];
    *(_OWORD *)&v78[32] = v58[2];
    *(_OWORD *)&v78[48] = v58[3];
    *(_OWORD *)&v78[64] = v58[4];
    v79 = v58[5];
    v38 = v58[7];
    v80 = v58[6];
  }
  v81 = v38;
  gm::operator*<double,4,4,4>(v70.f64, v17 + 101, (double *)v78);
  v40 = vcvt_f32_f64(v71);
  v41 = vcvt_f32_f64(v72);
  v42 = vcvt_f32_f64(v73);
  v43 = vcvt_f32_f64(v74);
  v44 = vcvt_f32_f64(v75);
  v45 = vcvt_f32_f64(v76);
  v46 = vcvt_f32_f64(v77);
  v47 = *(_QWORD **)(a1 + 896);
  v48 = v47[1];
  v49 = (float32x2_t *)v47[9];
  *v49 = vcvt_f32_f64(v70);
  v49[1] = v40;
  v49[2] = v41;
  v49[3] = v42;
  v49[4] = v43;
  v49[5] = v44;
  v49[6] = v45;
  v49[7] = v46;
  v50 = v17[471] * v17[173] / (v17[171] * v19);
  v49[8].f32[0] = v50;
  if (v47[8] > v48)
    v48 = v47[8];
  v47[7] = 0;
  v47[8] = v48;
  v51 = *a4;
  v52 = *(_QWORD *)(v51 + 8);
  if ((*(_BYTE *)(v51 + 16) & 2) == 0)
  {
    v53 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v53 != -1)
    {
      *(_QWORD *)&v70.f64[0] = &v59;
      *(_QWORD *)&v58[0] = &v70;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v58, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  if (v52)
    v54 = *(_DWORD **)(v51 + 72);
  else
    v54 = 0;
  v55 = *(_QWORD **)(a1 + 912);
  v56 = v55[1];
  if (v56)
    v57 = (_DWORD *)v55[9];
  else
    v57 = 0;
  *v57 = *v54;
  v57[1] = v54[1];
  v57[2] = v54[2];
  v57[3] = v54[3];
  v57[4] = v54[4];
  v57[5] = v54[5];
  v57[6] = v54[6];
  v57[8] = v54[8];
  v57[9] = v54[9];
  v57[10] = v54[10];
  v57[11] = v54[11];
  v57[12] = v54[12];
  v57[13] = v54[13];
  v57[14] = v54[14];
  v57[15] = v54[15];
  v57[16] = v54[16];
  v57[17] = v54[17];
  v57[18] = v54[18];
  v57[19] = v54[19];
  v57[20] = v54[20];
  v57[21] = v54[21];
  v57[22] = v54[22];
  v57[23] = v54[23];
  v57[24] = v54[24];
  v57[25] = v54[25];
  v57[26] = v54[26];
  v57[27] = v54[27];
  v57[28] = v54[28];
  v57[29] = v54[29];
  v57[30] = v54[30];
  v57[31] = v54[31];
  v57[32] = v54[32];
  v57[33] = v54[33];
  v57[34] = v54[34];
  v57[35] = v54[35];
  v57[36] = v54[36];
  v57[37] = v54[37];
  v57[38] = v54[38];
  v57[39] = v54[39];
  v57[40] = v54[40];
  v57[41] = v54[41];
  v57[42] = v54[42];
  v57[43] = v54[43];
  v57[44] = v54[44];
  v57[45] = v54[45];
  v57[46] = v54[46];
  v57[47] = v54[47];
  v57[48] = v54[48];
  v57[49] = v54[49];
  v57[50] = v54[50];
  v57[51] = v54[51];
  v57[52] = v54[52];
  v57[53] = v54[53];
  v57[54] = v54[54];
  v57[55] = v54[55];
  v57[56] = v54[56];
  v57[57] = v54[57];
  v57[58] = v54[58];
  v57[59] = v54[59];
  v57[60] = v54[60];
  v57[61] = v54[61];
  v57[62] = v54[62];
  v57[63] = v54[63];
  v57[64] = v54[64];
  v57[65] = v54[65];
  v57[66] = v54[66];
  v57[67] = v54[67];
  v57[68] = v54[68];
  v57[69] = v54[69];
  v57[70] = v54[70];
  v57[71] = v54[71];
  if (v57 && v56)
  {
    if (v55[8] > v56)
      v56 = v55[8];
    v55[7] = 0;
    v55[8] = v56;
  }
}

void md::ARAssetOcclusionMeshLayerDataSource::~ARAssetOcclusionMeshLayerDataSource(md::ARAssetOcclusionMeshLayerDataSource *this)
{
  gdc::LayerDataSource::~LayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::ARAssetOcclusionMeshLayerDataSource::constructRequests(uint64_t a1, char **a2, char **a3)
{
  uint64_t v3;
  uint64_t v4;
  char **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  char *v15;
  _BYTE v16[2];
  __int16 v17;
  unsigned int v18;
  void *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char v23[32];
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  void *v29;
  char v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34[8];
  uint64_t v35;
  uint64_t v36;

  if (a2 != a3)
  {
    v35 = v3;
    v36 = v4;
    v6 = a2;
    do
    {
      v7 = *v6;
      v26 = **v6;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v27, (uint64_t)(v7 + 8));
      v30 = 0;
      if (v7[96])
      {
        v31 = *((_DWORD *)v7 + 25);
        v30 = 1;
      }
      v32 = *((_QWORD *)v7 + 13);
      v9 = *(_QWORD *)v28;
      v8 = *((_QWORD *)v28 + 1);
      v10 = *((_QWORD *)*v6 + 14);
      v16[0] = **v6;
      v17 = v8;
      v18 = 0x80000000;
      v19 = v23;
      v20 = v23;
      v21 = v23;
      v22 = 32;
      v24 = 0;
      v33 = v9;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v19, v23, (char *)&v33, v34);
      v33 = 0;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v19, v20, (char *)&v33, v34);
      v11 = (unsigned __int8 *)v19;
      v12 = v20 - (_BYTE *)v19;
      if (v20 == v19)
      {
        v13 = 0;
      }
      else
      {
        v13 = 0;
        if (v12 <= 1)
          v12 = 1;
        do
        {
          v14 = *v11++;
          v13 ^= (v13 << 6) + (v13 >> 2) - 0x61C8864680B583EBLL + v14;
          --v12;
        }
        while (v12);
      }
      v24 = v13;
      v25 = v10;
      v15 = *v6;
      v6 += 2;
      gdc::LayerDataRequest::request((uint64_t)v15, (uint64_t)v16, 0);
      if (v19 != v21)
        free(v19);
      if (v30)
        v30 = 0;
      if (v28 != v29)
        free(v28);
    }
    while (v6 != a3);
  }
}

void md::ARAssetOcclusionMeshLayerDataSource::createLayerData(uint64_t a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t (****v31)();
  uint64_t (****v32)();
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t (***v37)();
  uint64_t (***v38)();
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  void *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  void ***v45;
  void ***v46;
  uint64_t (***v52)();
  void **v53;
  void **v54;
  double v55;
  int32x4_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  void *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  char *v65;
  float32x4_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *__p[2];
  char *v72;
  float32x4_t v73;
  void *v74[2];
  uint64_t v75;
  uint64_t (**v76)();
  __int128 *v77;
  uint64_t (***v78)();
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    while (*(_WORD *)v6 != 28)
    {
      v6 += 48;
      if (v6 == v7)
        goto LABEL_15;
    }
  }
  if (v6 == v7 || *(_QWORD *)(v6 + 32) != 1)
  {
LABEL_15:
    v9 = 0;
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(v6 + 24);
  v9 = *(_QWORD *)(v8 + 112);
  v10 = *(std::__shared_weak_count **)(v8 + 120);
  if (!v10)
  {
LABEL_16:
    v69 = v9;
    v70 = 0;
    goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v69 = v9;
  v70 = v10;
  v13 = (unint64_t *)&v10->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_17:
  v16 = *a2;
  v17 = a2[1];
  if (*a2 != v17)
  {
    while (*(_WORD *)v16 != 42)
    {
      v16 += 48;
      if (v16 == v17)
        goto LABEL_31;
    }
  }
  if (v16 == v17 || *(_QWORD *)(v16 + 32) != 1)
  {
LABEL_31:
    v19 = 0;
    goto LABEL_32;
  }
  v18 = *(_QWORD *)(v16 + 24);
  v19 = *(_QWORD *)(v18 + 112);
  v20 = *(std::__shared_weak_count **)(v18 + 120);
  if (!v20)
  {
LABEL_32:
    v67 = v19;
    v68 = 0;
    goto LABEL_33;
  }
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  v67 = v19;
  v68 = v20;
  v23 = (unint64_t *)&v20->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 - 1, v23));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_33:
  if (!(v69 | v67))
  {
    *a3 = 0;
    a3[1] = 0;
    v43 = v68;
    if (!v68)
      goto LABEL_87;
    goto LABEL_83;
  }
  v26 = operator new(0xE8uLL);
  v27 = v26;
  v26[1] = 0;
  v26[2] = 0;
  *v26 = &off_1E42DCEB0;
  v26[3] = &off_1E42B4768;
  v65 = (char *)(v26 + 3);
  do
  {
    v28 = __ldaxr(gdc::LayerData::nextId(void)::idGenerator);
    v29 = v28 + 1;
  }
  while (__stlxr(v29, gdc::LayerData::nextId(void)::idGenerator));
  *((_DWORD *)v26 + 8) = v29;
  *((_BYTE *)v26 + 40) = *(_BYTE *)a1;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v26 + 6), a1 + 8);
  *((_BYTE *)v27 + 136) = 0;
  if (*(_BYTE *)(a1 + 96))
  {
    *((_DWORD *)v27 + 35) = *(_DWORD *)(a1 + 100);
    *((_BYTE *)v27 + 136) = 1;
  }
  v27[18] = *(_QWORD *)(a1 + 104);
  v27[19] = 0;
  *((_BYTE *)v27 + 184) = 1;
  v27[21] = 0;
  v27[22] = 0;
  v27[20] = 0;
  v27[3] = &off_1E42A0020;
  v30 = **(_QWORD **)(a1 + 16);
  v27[25] = 0;
  v27[24] = v30;
  v27[26] = 0;
  v27[27] = 0;
  *((_BYTE *)v27 + 224) = v67 != 0;
  if (!v67)
  {
    if (!v69)
      goto LABEL_82;
    if (!*(_QWORD *)(v69 + 152))
      goto LABEL_82;
    v44 = *(_QWORD *)(v69 + 152);
    v45 = *(void ****)(v44 + 208);
    v46 = *(void ****)(v44 + 216);
    if (v45 == v46)
      goto LABEL_82;
    __asm { FMOV            V0.4S, #1.0 }
    v66 = _Q0;
    while (1)
    {
      v79 = xmmword_19FFB5880;
      v80 = xmmword_19FFB5880;
      v81 = xmmword_19FFB5880;
      v82 = xmmword_19FFB5880;
      v83 = xmmword_19FFB5880;
      v84 = xmmword_19FFB5880;
      v85 = 0xFF7FFFFF7F7FFFFFLL;
      v76 = &off_1E42D1D80;
      v77 = &v79;
      v52 = &v76;
      v78 = &v76;
      v53 = *v45;
      v54 = v45[1];
      if (*v45 == v54)
        goto LABEL_77;
      v52 = &v76;
      do
      {
        __p[0] = *v53;
        LODWORD(__p[1]) = 1187205120;
        if (!v52
          || (((void (*)(uint64_t (***)(), void **))(*v52)[6])(v52, __p),
              *(float *)&__p[1] = -*(float *)&__p[1],
              !v78))
        {
LABEL_93:
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
        }
        ((void (*)(uint64_t (***)(), void **))(*v78)[6])(v78, __p);
        v53 = (void **)((char *)v53 + 12);
        v52 = v78;
      }
      while (v53 != v54);
      if (v78 == &v76)
        break;
      if (v78)
      {
        v57 = 5;
        goto LABEL_78;
      }
LABEL_79:
      v74[0] = 0;
      v74[1] = 0;
      v75 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v72 = 0;
      v73 = v66;
      geo::DiscreteOrientedPolytope<arComponents::XY26DOPTraits<float>>::extractVertices((uint64_t)&v79, (char **)v74, (uint64_t)__p, v66, v55, v56);
      v58 = v27[26];
      if (v58 < v27[27])
      {
        *(_OWORD *)v58 = *(_OWORD *)v74;
        *(_QWORD *)(v58 + 16) = v75;
        v27[26] = v58 + 24;
      }
      else
      {
        v59 = std::vector<md::OcclusionMesh>::__emplace_back_slow_path<std::vector<gm::Matrix<float,3,1>>>((char **)v27 + 25, (uint64_t)v74);
        v60 = v74[0];
        v27[26] = v59;
        if (v60)
          operator delete(v60);
      }
      v45 += 19;
      if (v45 == v46)
        goto LABEL_82;
    }
    v52 = &v76;
LABEL_77:
    v57 = 4;
LABEL_78:
    (*v52)[v57]();
    goto LABEL_79;
  }
  v31 = *(uint64_t (*****)())(v67 + 144);
  v32 = *(uint64_t (*****)())(v67 + 152);
  if (v31 != v32)
  {
    while (1)
    {
      __p[0] = 0;
      __p[1] = 0;
      v72 = 0;
      v33 = (char *)v31[1] - (char *)*v31;
      if (v33)
      {
        v34 = 0xAAAAAAAAAAAAAAABLL * (v33 >> 2);
        v35 = 2 * v34;
        if (2 * v34 >= 0x1555555555555556)
          abort();
        __p[0] = operator new(24 * v34);
        __p[1] = __p[0];
        v72 = (char *)__p[0] + 12 * v35;
      }
      *(_QWORD *)&v79 = &off_1E42D1D38;
      *((_QWORD *)&v79 + 1) = __p;
      v36 = &v79;
      *((_QWORD *)&v80 + 1) = &v79;
      v38 = *v31;
      v37 = v31[1];
      if (*v31 == v37)
        goto LABEL_55;
      v36 = &v79;
      do
      {
        v76 = *v38;
        LODWORD(v77) = 1187205120;
        if (!v36)
          goto LABEL_93;
        (*(void (**)(__int128 *, uint64_t (***)()))(*(_QWORD *)v36 + 48))(v36, &v76);
        *(float *)&v77 = -*(float *)&v77;
        if (!*((_QWORD *)&v80 + 1))
          goto LABEL_93;
        (*(void (**)(_QWORD, uint64_t (***)()))(**((_QWORD **)&v80 + 1) + 48))(*((_QWORD *)&v80 + 1), &v76);
        v38 = (uint64_t (***)())((char *)v38 + 12);
        v36 = (__int128 *)*((_QWORD *)&v80 + 1);
      }
      while (v38 != v37);
      if (*((__int128 **)&v80 + 1) == &v79)
        break;
      if (*((_QWORD *)&v80 + 1))
      {
        v39 = 5;
        goto LABEL_56;
      }
LABEL_57:
      v40 = (_QWORD *)v27[26];
      if ((unint64_t)v40 < v27[27])
      {
        *v40 = 0;
        v40[1] = 0;
        v40[2] = 0;
        *(_OWORD *)v40 = *(_OWORD *)__p;
        v40[2] = v72;
        v27[26] = v40 + 3;
      }
      else
      {
        v41 = std::vector<md::OcclusionMesh>::__emplace_back_slow_path<std::vector<gm::Matrix<float,3,1>>>((char **)v27 + 25, (uint64_t)__p);
        v42 = __p[0];
        v27[26] = v41;
        if (v42)
        {
          __p[1] = v42;
          operator delete(v42);
        }
      }
      v31 += 19;
      if (v31 == v32)
        goto LABEL_82;
    }
    v36 = &v79;
LABEL_55:
    v39 = 4;
LABEL_56:
    (*(void (**)(void))(*(_QWORD *)v36 + 8 * v39))();
    goto LABEL_57;
  }
LABEL_82:
  *a3 = v65;
  a3[1] = v27;
  v43 = v68;
  if (!v68)
    goto LABEL_87;
LABEL_83:
  v61 = (unint64_t *)&v43->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
LABEL_87:
  if (v70)
  {
    v63 = (unint64_t *)&v70->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_19FB6476C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t md::ARAssetOcclusionMeshLayerDataSource::descriptionForKey@<X0>(const gdc::LayerDataRequestKey *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  unint64_t v19;
  const void **v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  unint64_t v30;
  void *__p[2];
  __int128 v32;
  int v33;
  uint64_t v34[20];

  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v34[0] = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v8;
  *(uint64_t *)((char *)&v26 + *(_QWORD *)(v8 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v26 + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v10, &v27);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v26 = v5 + 24;
  v34[0] = v6;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  v27 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v32 = 0u;
  v33 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v26, (uint64_t)"gdc::LayerDataRequestKey<Type:", 30);
  v12 = *((unsigned __int16 *)a1 + 4);
  if (v12 > 0x51)
    v13 = "<Invalid>";
  else
    v13 = off_1E42F61C0[v12];
  v14 = strlen(v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v26, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v26, (uint64_t)", Asset ID: ", 12);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)", Type: ", 8);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)", UniqueId: ", 12);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)">", 1);
  if ((v33 & 0x10) != 0)
  {
    v19 = *((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1) < v30)
    {
      *((_QWORD *)&v32 + 1) = v30;
      v19 = v30;
    }
    v20 = (const void **)&v29;
  }
  else
  {
    if ((v33 & 8) == 0)
    {
      v18 = 0;
      a2[23] = 0;
      goto LABEL_19;
    }
    v20 = (const void **)v28;
    v19 = v28[2];
  }
  v21 = *v20;
  v18 = v19 - (_QWORD)*v20;
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v18 >= 0x17)
  {
    v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v22 = v18 | 7;
    v23 = v22 + 1;
    v24 = operator new(v22 + 1);
    *((_QWORD *)a2 + 1) = v18;
    *((_QWORD *)a2 + 2) = v23 | 0x8000000000000000;
    *(_QWORD *)a2 = v24;
    a2 = v24;
    goto LABEL_18;
  }
  a2[23] = v18;
  if (v18)
LABEL_18:
    memmove(a2, v21, v18);
LABEL_19:
  a2[v18] = 0;
  v26 = *v7;
  *(uint64_t *)((char *)&v26 + *(_QWORD *)(v26 - 24)) = v7[3];
  v27 = v11 + 16;
  if (SBYTE7(v32) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v34);
}

void sub_19FB64B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](a10);
  _Unwind_Resume(a1);
}

void sub_19FB64B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::ARAssetOcclusionMeshData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCEB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ARAssetOcclusionMeshData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCEB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::ARAssetOcclusionMeshData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<md::DaVinciDecalBuilder::DecalDescription>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<md::DaVinciDecalBuilder::DecalDescription>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[4];
      if (v3)
      {
        v2[5] = v3;
        operator delete(v3);
      }
      v4 = (std::__shared_weak_count *)v2[3];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

void md::DaVinciDecalBuilder::buildBatch(int64x2_t *a1, uint64_t a2, uint64_t a3, float *a4, float *a5, geo::codec::VectorTile **a6, uint64_t a7)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  int64x2_t v16;
  _BYTE *v17;
  void *v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float32x4_t v50;
  int32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  float32x4_t v59;
  int8x16_t v60;
  int32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x16_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unsigned int v73;
  _QWORD *v74;
  unint64_t v75;
  char *v76;
  size_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 *v80;
  __int16 v81;
  __int16 v82;
  __int16 v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint8x8_t v87;
  unint64_t v88;
  int v89;
  unsigned __int16 *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v99;
  unint64_t v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t **v106;
  uint64_t *v107;
  uint64_t v109;
  unint64_t v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t **v115;
  uint64_t *v116;
  uint64_t v118;
  unint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  void *v123;
  _QWORD *v124;
  std::__shared_weak_count *v125;
  unint64_t *p_shared_owners;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  char ***v134;
  void **v135;
  uint64_t *v136;
  __guard *v137;
  unsigned int v138;
  int64_t v139;
  float *v140;
  unint64_t v141;
  uint8x8_t v142;
  unint64_t v143;
  uint64_t **v144;
  uint64_t *v145;
  unint64_t v146;
  float *v147;
  uint64_t **v148;
  uint64_t *v149;
  float *v150;
  float *v151;
  _QWORD *v152;
  float v153;
  _BOOL8 v154;
  unint64_t v155;
  unint64_t v156;
  size_t prime;
  unint64_t v158;
  uint8x8_t v159;
  uint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  unint64_t v163;
  char *v164;
  int64_t v165;
  unint64_t v166;
  unint64_t v167;
  void *v168;
  void *v169;
  _QWORD *v170;
  _QWORD *v171;
  void *v172;
  _QWORD *v173;
  uint64_t v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  int v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  uint64_t v194;
  __n128 v195;
  __n128 *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  int v202;
  int v203;
  int v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  char *v208;
  int v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  _QWORD *v218;
  _QWORD *v219;
  void *v220;
  void *v221;
  _QWORD *v222;
  __int128 v223;
  unsigned __int8 v224;
  _QWORD *v225;
  uint64_t v226;
  __int128 v227;
  unsigned __int8 v228;
  unsigned __int8 v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  __n128 v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  std::__shared_weak_count *v261;
  uint64_t v262;
  std::__shared_count v263;
  uint64_t v264;
  size_t v265;
  std::__shared_weak_count_vtbl *v266;
  unint64_t v267;
  uint64_t *v268;
  uint64_t *v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  BOOL v287;
  BOOL v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  int v294;
  uint64_t v295;
  int v296;
  unsigned __int8 v297;
  int v298;
  uint64_t v299;
  geo::read_write_lock *v300;
  const char *v301;
  malloc_zone_t *zone;
  int v303;
  uint64_t v304;
  geo::read_write_lock *v305;
  const char *v306;
  malloc_zone_t *v307;
  int v308;
  uint64_t v309;
  uint64_t v313;
  _QWORD *v314;
  unsigned int v315;
  geo::codec::VectorTile **v316;
  uint64_t *v318;
  char *v319;
  char *v320;
  float *v321;
  float *v322;
  float *v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  size_t __n;
  __int128 v328;
  int64x2_t v329;
  __n128 v330;
  __int128 v331;
  uint64_t v332;
  int v333;
  void *v334[2];
  void *v335[2];
  int v336;
  __int128 v337;
  uint64_t v338;
  _OWORD v339[4];
  uint64_t v340;
  void *v341;
  void *v342;
  uint64_t v343;
  void *__src;
  _BYTE *v345;
  char *v346;
  void *v347;
  _BYTE *v348;
  char *v349;
  unsigned int v350;
  void *v351[4];
  __int128 v352;
  uint64_t v353;
  int v354;
  int v355;
  _BYTE v356[24];
  _BYTE *v357;
  __int128 v358;
  unint64_t v359;
  float v360;
  int v361;
  uint64_t v362;
  float v363;
  int v364;
  unint64_t v365;
  float v366;
  int v367;
  __n128 v368;
  __int128 v369;
  float v370;
  uint64_t v371;

  v371 = *MEMORY[0x1E0C80C00];
  v348 = 0;
  v346 = 0;
  v347 = 0;
  v349 = 0;
  __src = 0;
  v345 = 0;
  v341 = 0;
  v342 = 0;
  v343 = 0;
  v7 = (char *)a5 - (char *)a4;
  if (a5 == a4)
  {
    v320 = 0;
    v221 = 0;
    v139 = 0;
    v329 = 0u;
    goto LABEL_258;
  }
  v8 = 0x6DB6DB6DB6DB6DB7 * (v7 >> 3);
  if (v8 > 0x2E8BA2E8BA2E8BALL
    || (v10 = (unint64_t)a4,
        v12 = (char *)operator new(0xB6DB6DB6DB6DB6E8 * (v7 >> 3)),
        v329 = vdupq_n_s64((unint64_t)v12),
        v7 < 0)
    || (v347 = operator new(0x2492492492492494 * (v7 >> 3)),
        v348 = v347,
        v349 = (char *)v347 + 0x2492492492492494 * (v7 >> 3),
        ((v8 >> 59) & 7) != 0))
  {
    abort();
  }
  v13 = &v12[0xB6DB6DB6DB6DB6E8 * (v7 >> 3)];
  __src = operator new(0xB6DB6DB6DB6DB6E0 * (v7 >> 3));
  v345 = __src;
  v346 = (char *)__src - 0x4924924924924920 * (v7 >> 3);
  v14 = (uint64_t *)(a2 + 80);
  v330.n128_u64[0] = (unint64_t)&v369;
  v15 = 12;
  v316 = a6;
  v318 = v14;
LABEL_7:
  v17 = v348;
  v18 = v347;
  v340 = 0;
  v19 = geo::codec::VectorTile::daVinciVertices(*a6);
  __n = (size_t)v18;
  *(_QWORD *)&v328 = v17;
  v20 = *(float *)(v10 + 12);
  v323 = (float *)(v10 + 12);
  v340 = v19 + 12 * *(unsigned int *)(*(_QWORD *)v10 + 4);
  v21 = *(float *)(v10 + 24);
  v321 = (float *)(v10 + 24);
  v22 = *(float *)(v10 + 28);
  v23 = *(float *)(v10 + 32);
  v24 = *(float *)(v10 + 36);
  v26 = *(float *)(v10 + 16);
  v25 = *(float *)(v10 + 20);
  v27 = (float)-(float)((float)(v25 * v22) - (float)(v26 * v23)) - (float)((float)(v25 * v22) - (float)(v26 * v23));
  v28 = (float)-(float)((float)(v20 * v23) - (float)(v25 * v21)) - (float)((float)(v20 * v23) - (float)(v25 * v21));
  v29 = (float)-(float)((float)(v26 * v21) - (float)(v20 * v22)) - (float)((float)(v26 * v21) - (float)(v20 * v22));
  *(float *)&v30 = -(float)((float)(v29 * v21) - (float)((float)-(float)(v26 - (float)(v27 * v23)) - (float)(v28 * v24)));
  *(float *)&v31 = -(float)((float)((float)(v20 + (float)(v27 * v24)) + (float)(v28 * v23)) - (float)(v29 * v22));
  v32 = -(float)((float)((float)(v25 + (float)(v27 * v22)) + (float)(v29 * v24)) - (float)(v28 * v21));
  v33 = v22 * -2.0;
  v34 = -(float)(v22 * (float)(v22 * -2.0));
  v35 = 1.0 - (float)(v34 - (float)(v23 * (float)(v23 * -2.0)));
  v36 = v21 * -2.0;
  v37 = -(float)(v22 * (float)(v21 * -2.0));
  v38 = (float)(v23 * -2.0) * v24;
  v39 = -(float)(v23 * (float)(v21 * -2.0));
  v40 = v24 * v33;
  v41 = (float)(v24 * v33) - (float)(v23 * (float)(v21 * -2.0));
  v42 = (float)((float)(v21 * -2.0) * v21) + 1.0;
  v43 = v42 - (float)-(float)(v23 * (float)(v23 * -2.0));
  v44 = -(float)(v23 * v33);
  v45 = v24 * v36;
  v46 = v45 + v44;
  *(float *)&v358 = v35;
  *((float *)&v358 + 1) = v38 + v37;
  *(float *)&v359 = v37 - v38;
  *((float *)&v359 + 1) = v43;
  *(float *)&v362 = v41;
  *((float *)&v362 + 1) = v44 - v45;
  *((float *)&v358 + 2) = v39 - v40;
  v360 = v45 + v44;
  v363 = v42 - v34;
  HIDWORD(v358) = 0;
  v361 = 0;
  v364 = 0;
  v365 = __PAIR64__(v30, v31);
  v366 = v32;
  v367 = 1065353216;
  v47 = *(float *)(v10 + 40);
  v322 = (float *)(v10 + 40);
  v48 = *(float *)(v10 + 44);
  v49 = *(float *)(v10 + 48);
  v50 = (float32x4_t)vzip1q_s32((int32x4_t)COERCE_UNSIGNED_INT(1.0 / v47), (int32x4_t)COERCE_UNSIGNED_INT(1.0 / v47));
  v51.i64[1] = 0x3F80000000000000;
  v52 = (int8x16_t)vmulq_f32(v50, (float32x4_t)xmmword_19FFB34C0);
  v53 = vmlaq_f32((float32x4_t)vextq_s8(v52, v52, 8uLL), (float32x4_t)xmmword_19FFB3590, v50);
  v50.i32[0] = 0;
  v50.f32[1] = -1.0 / v48;
  v54 = (float32x4_t)vzip1q_s32((int32x4_t)v50.u64[0], (int32x4_t)v50.u64[0]);
  v55 = (int8x16_t)vmulq_f32(v54, (float32x4_t)xmmword_19FFB34C0);
  *(float32x4_t *)v351 = v53;
  *(float32x4_t *)&v351[2] = vmlaq_f32((float32x4_t)vextq_s8(v55, v55, 8uLL), (float32x4_t)xmmword_19FFB3590, v54);
  v56 = vmulq_n_f32((float32x4_t)xmmword_19FFB3580, 1.0 / v49);
  v51.i64[0] = v358;
  v57 = (float32x4_t)vzip1q_s32(v51, v51);
  v58 = (int8x16_t)vmulq_f32(v57, *(float32x4_t *)&v351[1]);
  v53.i64[1] = (uint64_t)v351[3];
  v59 = (float32x4_t)vzip1q_s32((int32x4_t)v359, (int32x4_t)v359);
  v60 = (int8x16_t)vmulq_f32(v59, *(float32x4_t *)&v351[1]);
  v339[0] = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v58, v58, 8uLL), v53, v57), v56, v39 - v40);
  v339[1] = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v60, v60, 8uLL), v53, v59), v56, v46);
  v61.i64[0] = v362;
  v59.i64[0] = v365;
  v62 = (float32x4_t)vzip1q_s32(v61, v61);
  v63 = (int8x16_t)vmulq_f32(v62, *(float32x4_t *)&v351[1]);
  v64 = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v63, v63, 8uLL), v53, v62), v56, v363);
  v65 = (float32x4_t)vzip1q_s32((int32x4_t)v59, (int32x4_t)v59);
  v66 = (int8x16_t)vmulq_f32(v65, *(float32x4_t *)&v351[1]);
  v339[2] = v64;
  v339[3] = vaddq_f32(vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v66, v66, 8uLL), v53, v65), v56, v32), (float32x4_t)xmmword_19FFB3CB0);
  *(float *)&v337 = -(float)(v47 * 0.5);
  *((float *)&v337 + 1) = -(float)(v48 * 0.5);
  *((float *)&v337 + 2) = -(float)(v49 * 0.5);
  *((float *)&v337 + 3) = v47 * 0.5;
  *(float *)&v338 = v48 * 0.5;
  *((float *)&v338 + 1) = v49 * 0.5;
  *(_OWORD *)v334 = 0u;
  *(_OWORD *)v335 = 0u;
  v336 = 1065353216;
  v333 = 0;
  v67 = *(_QWORD *)v10;
  v68 = *(unsigned __int16 *)(v10 + 8);
  v357 = 0;
  v69 = operator new(0x60uLL);
  *v69 = &off_1E42CFC98;
  v69[1] = v10;
  *(_QWORD *)&v324 = v10;
  v69[2] = a6;
  v69[3] = &v340;
  v69[4] = &v358;
  v69[5] = &v337;
  v69[6] = &v333;
  v69[7] = v334;
  v69[8] = v339;
  v69[9] = &__src;
  v69[10] = &v341;
  v69[11] = &v347;
  v357 = v69;
  *(_QWORD *)&v331 = v67;
  if (!std::__hash_table<std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::__unordered_map_hasher<GeoCodecsDaVinciMesh *,std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::hash<GeoCodecsDaVinciMesh *>,std::equal_to<GeoCodecsDaVinciMesh *>,true>,std::__unordered_map_equal<GeoCodecsDaVinciMesh *,std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::equal_to<GeoCodecsDaVinciMesh *>,std::hash<GeoCodecsDaVinciMesh *>,true>,std::allocator<std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>>>::__emplace_unique_key_args<GeoCodecsDaVinciMesh *,std::piecewise_construct_t const&,std::tuple<GeoCodecsDaVinciMesh * const&>,std::tuple<>>(v14, v67, (uint64_t *)&v331)[3])
  {
    v70 = geo::codec::VectorTile::daVinciIndices(*a6);
    v71 = *(unsigned int *)(v67 + 12);
    v72 = operator new(0x30uLL);
    v10 = (unint64_t)v72;
    v72[1] = 0;
    v72[2] = 0;
    *v72 = &off_1E42DB5F8;
    v73 = *(_DWORD *)(v67 + 16);
    v72[3] = 0;
    v74 = v72 + 3;
    v72[4] = 0;
    v72[5] = 0;
    if (v73 <= 2)
    {
      memset(v351, 0, sizeof(v351));
      LODWORD(v352) = 1065353216;
      goto LABEL_102;
    }
    v315 = v68;
    v319 = v13;
    v313 = v70 + 2 * v71;
    v314 = v72 + 3;
    v75 = v73 / 3uLL;
    v76 = (char *)operator new(12 * v75);
    v77 = 12 * ((12 * v75 - 12) / 0xC) + 12;
    bzero(v76, v77);
    v78 = 0;
    *(_QWORD *)(v10 + 24) = v76;
    *(_QWORD *)(v10 + 32) = &v76[v77];
    *(_QWORD *)(v10 + 40) = &v76[12 * v75];
    memset(v351, 0, sizeof(v351));
    LODWORD(v352) = 1065353216;
    if (v75 <= 1)
      v79 = 1;
    else
      v79 = v75;
    v80 = (__int16 *)(v70 + 2 * v71 + 4);
    do
    {
      v81 = *(v80 - 2);
      v82 = *(v80 - 1);
      v83 = *v80;
      v80 += 3;
      LOWORD(v350) = v81;
      HIWORD(v350) = v82;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,std::__unordered_map_hasher<std::pair<unsigned short,unsigned short>,std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,md::HashEdges,std::equal_to<std::pair<unsigned short,unsigned short>>,true>,std::__unordered_map_equal<std::pair<unsigned short,unsigned short>,std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,std::equal_to<std::pair<unsigned short,unsigned short>>,md::HashEdges,true>,std::allocator<std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>>>::__emplace_unique_key_args<std::pair<unsigned short,unsigned short>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned short,unsigned short>&&>,std::tuple<>>((float *)v351, v350, &v350)+ 5) = v78;
      LOWORD(v350) = v82;
      HIWORD(v350) = v83;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,std::__unordered_map_hasher<std::pair<unsigned short,unsigned short>,std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,md::HashEdges,std::equal_to<std::pair<unsigned short,unsigned short>>,true>,std::__unordered_map_equal<std::pair<unsigned short,unsigned short>,std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,std::equal_to<std::pair<unsigned short,unsigned short>>,md::HashEdges,true>,std::allocator<std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>>>::__emplace_unique_key_args<std::pair<unsigned short,unsigned short>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned short,unsigned short>&&>,std::tuple<>>((float *)v351, v350, &v350)+ 5) = v78;
      LOWORD(v350) = v83;
      HIWORD(v350) = v81;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,std::__unordered_map_hasher<std::pair<unsigned short,unsigned short>,std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,md::HashEdges,std::equal_to<std::pair<unsigned short,unsigned short>>,true>,std::__unordered_map_equal<std::pair<unsigned short,unsigned short>,std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,std::equal_to<std::pair<unsigned short,unsigned short>>,md::HashEdges,true>,std::allocator<std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>>>::__emplace_unique_key_args<std::pair<unsigned short,unsigned short>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned short,unsigned short>&&>,std::tuple<>>((float *)v351, v350, &v350)+ 5) = v78++;
    }
    while (v79 != v78);
    v84 = (unint64_t)v351[1];
    v74 = v314;
    v85 = *v314;
    if (!v351[1])
    {
      v14 = v318;
      v13 = v319;
      v68 = v315;
      do
      {
        *(_QWORD *)v85 = -1;
        *(_DWORD *)(v85 + 8) = -1;
        v85 += 12;
        --v79;
      }
      while (v79);
LABEL_102:
      v121 = v351[2];
      if (v351[2])
      {
        do
        {
          v122 = (_QWORD *)*v121;
          operator delete(v121);
          v121 = v122;
        }
        while (v122);
      }
      v123 = v351[0];
      v351[0] = 0;
      if (v123)
        operator delete(v123);
      v368.n128_u64[0] = (unint64_t)v74;
      v368.n128_u64[1] = v10;
      v124 = std::__hash_table<std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::__unordered_map_hasher<GeoCodecsDaVinciMesh *,std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::hash<GeoCodecsDaVinciMesh *>,std::equal_to<GeoCodecsDaVinciMesh *>,true>,std::__unordered_map_equal<GeoCodecsDaVinciMesh *,std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::equal_to<GeoCodecsDaVinciMesh *>,std::hash<GeoCodecsDaVinciMesh *>,true>,std::allocator<std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>>>::__emplace_unique_key_args<GeoCodecsDaVinciMesh *,std::piecewise_construct_t const&,std::tuple<GeoCodecsDaVinciMesh * const&>,std::tuple<>>(v14, v67, (uint64_t *)&v331);
      v368 = 0uLL;
      v125 = (std::__shared_weak_count *)v124[4];
      v124[3] = v74;
      v124[4] = v10;
      if (!v125)
        goto LABEL_110;
      p_shared_owners = (unint64_t *)&v125->__shared_owners_;
      do
        v127 = __ldaxr(p_shared_owners);
      while (__stlxr(v127 - 1, p_shared_owners));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
        v128 = (std::__shared_weak_count *)v368.n128_u64[1];
        if (v368.n128_u64[1])
          goto LABEL_111;
      }
      else
      {
LABEL_110:
        v128 = (std::__shared_weak_count *)v368.n128_u64[1];
        if (v368.n128_u64[1])
        {
LABEL_111:
          v129 = (unint64_t *)&v128->__shared_owners_;
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 - 1, v129));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
            std::__shared_weak_count::__release_weak(v128);
          }
        }
      }
      v67 = v331;
      goto LABEL_117;
    }
    v86 = 0;
    v87 = (uint8x8_t)vcnt_s8((int8x8_t)v351[1]);
    v87.i16[0] = vaddlv_u8(v87);
    v88 = (unint64_t)v351[1] - 1;
    v14 = v318;
    v13 = v319;
    v68 = v315;
LABEL_19:
    v90 = (unsigned __int16 *)(v313 + 6 * v86);
    v91 = *v90;
    v92 = v90[1];
    v93 = (v92 - 0x61C8864680B583EBLL + (v91 >> 2) + (v91 << 6)) ^ v91;
    if (v87.u32[0] > 1uLL)
    {
      v94 = (v92 - 0x61C8864680B583EBLL + (v91 >> 2) + (v91 << 6)) ^ v91;
      if (v93 >= v84)
        v94 = v93 % v84;
    }
    else
    {
      v94 = v93 & v88;
    }
    v95 = v351[0];
    v96 = (uint64_t **)*((_QWORD *)v351[0] + v94);
    if (!v96 || (v97 = *v96) == 0)
    {
LABEL_44:
      v102 = -1;
      goto LABEL_45;
    }
    if (v87.u32[0] < 2uLL)
    {
      while (1)
      {
        v99 = v97[1];
        if (v99 == v93)
        {
          if (*((unsigned __int16 *)v97 + 8) == (_DWORD)v92 && *((unsigned __int16 *)v97 + 9) == (_DWORD)v91)
            goto LABEL_97;
        }
        else if ((v99 & v88) != v94)
        {
          goto LABEL_44;
        }
        v97 = (uint64_t *)*v97;
        if (!v97)
          goto LABEL_44;
      }
    }
    while (1)
    {
      v101 = v97[1];
      if (v101 == v93)
      {
        if (*((unsigned __int16 *)v97 + 8) == (_DWORD)v92 && *((unsigned __int16 *)v97 + 9) == (_DWORD)v91)
        {
LABEL_97:
          v102 = *((_DWORD *)v97 + 5);
LABEL_45:
          v103 = v90[2];
          *(_DWORD *)(v85 + 12 * v86) = v102;
          v104 = (v103 - 0x61C8864680B583EBLL + (v92 >> 2) + (v92 << 6)) ^ v92;
          if (v87.u32[0] >= 2uLL)
          {
            v105 = (v103 - 0x61C8864680B583EBLL + (v92 >> 2) + (v92 << 6)) ^ v92;
            if (v104 >= v84)
              v105 = v104 % v84;
          }
          else
          {
            v105 = v104 & v88;
          }
          v106 = (uint64_t **)v95[v105];
          if (!v106 || (v107 = *v106) == 0)
          {
LABEL_70:
            v112 = -1;
            goto LABEL_71;
          }
          if (v87.u32[0] >= 2uLL)
          {
            while (1)
            {
              v111 = v107[1];
              if (v111 == v104)
              {
                if (*((unsigned __int16 *)v107 + 8) == (_DWORD)v103 && *((unsigned __int16 *)v107 + 9) == (_DWORD)v92)
                  goto LABEL_98;
              }
              else
              {
                if (v111 >= v84)
                  v111 %= v84;
                if (v111 != v105)
                  goto LABEL_70;
              }
              v107 = (uint64_t *)*v107;
              if (!v107)
                goto LABEL_70;
            }
          }
          while (2)
          {
            v109 = v107[1];
            if (v109 != v104)
            {
              if ((v109 & v88) != v105)
                goto LABEL_70;
              goto LABEL_57;
            }
            if (*((unsigned __int16 *)v107 + 8) != (_DWORD)v103 || *((unsigned __int16 *)v107 + 9) != (_DWORD)v92)
            {
LABEL_57:
              v107 = (uint64_t *)*v107;
              if (!v107)
                goto LABEL_70;
              continue;
            }
            break;
          }
LABEL_98:
          v112 = *((_DWORD *)v107 + 5);
LABEL_71:
          *(_DWORD *)(v85 + 12 * v86 + 4) = v112;
          v113 = (v91 - 0x61C8864680B583EBLL + (v103 >> 2) + (v103 << 6)) ^ v103;
          if (v87.u32[0] >= 2uLL)
          {
            v114 = (v91 - 0x61C8864680B583EBLL + (v103 >> 2) + (v103 << 6)) ^ v103;
            if (v113 >= v84)
              v114 = v113 % v84;
          }
          else
          {
            v114 = v113 & v88;
          }
          v115 = (uint64_t **)v95[v114];
          if (!v115 || (v116 = *v115) == 0)
          {
LABEL_17:
            v89 = -1;
            goto LABEL_18;
          }
          if (v87.u32[0] >= 2uLL)
          {
            while (1)
            {
              v120 = v116[1];
              if (v120 == v113)
              {
                if (*((unsigned __int16 *)v116 + 8) == (_DWORD)v91 && *((unsigned __int16 *)v116 + 9) == (_DWORD)v103)
                  goto LABEL_99;
              }
              else
              {
                if (v120 >= v84)
                  v120 %= v84;
                if (v120 != v114)
                  goto LABEL_17;
              }
              v116 = (uint64_t *)*v116;
              if (!v116)
                goto LABEL_17;
            }
          }
          while (2)
          {
            v118 = v116[1];
            if (v118 != v113)
            {
              if ((v118 & v88) != v114)
                goto LABEL_17;
              goto LABEL_83;
            }
            if (*((unsigned __int16 *)v116 + 8) != (_DWORD)v91 || *((unsigned __int16 *)v116 + 9) != (_DWORD)v103)
            {
LABEL_83:
              v116 = (uint64_t *)*v116;
              if (!v116)
                goto LABEL_17;
              continue;
            }
            break;
          }
LABEL_99:
          v89 = *((_DWORD *)v116 + 5);
LABEL_18:
          *(_DWORD *)(v85 + 12 * v86++ + 8) = v89;
          if (v86 == v79)
            goto LABEL_102;
          goto LABEL_19;
        }
      }
      else
      {
        if (v101 >= v84)
          v101 %= v84;
        if (v101 != v94)
          goto LABEL_44;
      }
      v97 = (uint64_t *)*v97;
      if (!v97)
        goto LABEL_44;
    }
  }
LABEL_117:
  v131 = (_QWORD *)std::__hash_table<std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::__unordered_map_hasher<GeoCodecsDaVinciMesh *,std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::hash<GeoCodecsDaVinciMesh *>,std::equal_to<GeoCodecsDaVinciMesh *>,true>,std::__unordered_map_equal<GeoCodecsDaVinciMesh *,std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::equal_to<GeoCodecsDaVinciMesh *>,std::hash<GeoCodecsDaVinciMesh *>,true>,std::allocator<std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>>>::__emplace_unique_key_args<GeoCodecsDaVinciMesh *,std::piecewise_construct_t const&,std::tuple<GeoCodecsDaVinciMesh * const&>,std::tuple<>>(v14, v67, (uint64_t *)&v331)[3];
  v368 = 0u;
  v369 = 0u;
  v370 = 1.0;
  v352 = 0u;
  memset(v351, 0, sizeof(v351));
  std::deque<unsigned int>::__add_back_capacity((uint64_t)v351);
  v132 = *((_QWORD *)&v352 + 1);
  v133 = v352;
  v134 = (char ***)v351[2];
  v135 = (void **)v351[1];
  *(_DWORD *)(*(_QWORD *)((char *)v351[1] + ((((_QWORD)v352 + *((_QWORD *)&v352 + 1)) >> 7) & 0x1FFFFFFFFFFFFF8))
            + 4 * ((v352 + *((_QWORD *)&v352 + 1)) & 0x3FF)) = v68;
  v136 = (uint64_t *)(v132 + 1);
  if (v132 == -1)
    goto LABEL_211;
  v320 = v13;
  while (1)
  {
    v137 = (__guard *)v351[1];
    v138 = *(_DWORD *)(*(_QWORD *)((char *)v351[1] + ((v133 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v133 & 0x3FF));
    v136 = (uint64_t *)((char *)v136 - 1);
    v139 = v133 + 1;
    *((_QWORD *)&v352 + 1) = v136;
    *(_QWORD *)&v352 = v133 + 1;
    if (v133 + 1 >= 0x800)
    {
      v137 = (__guard *)((char *)v351[1] + 8);
      operator delete(*(void **)v351[1]);
      v139 = v133 - 1023;
      v351[1] = v137;
      *(_QWORD *)&v352 = v133 - 1023;
    }
    v350 = v138;
    if (!v357)
      break;
    if ((*(unsigned int (**)(_BYTE *, unsigned int *))(*(_QWORD *)v357 + 48))(v357, &v350))
    {
      v68 = 0;
      while (1)
      {
        v140 = (float *)*(unsigned int *)(*v131 + 12 * v138 + 4 * v68);
        if ((_DWORD)v140 != -1)
          break;
LABEL_126:
        if (++v68 == 3)
          goto LABEL_119;
      }
      v141 = v368.n128_u64[1];
      if (v368.n128_u64[1])
      {
        v142 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v368.n128_i8[8]);
        v142.i16[0] = vaddlv_u8(v142);
        if (v142.u32[0] > 1uLL)
        {
          v143 = *(unsigned int *)(*v131 + 12 * v138 + 4 * v68);
          if (v368.n128_u64[1] <= (unint64_t)v140)
            v143 = (unint64_t)v140 % v368.n128_u64[1];
        }
        else
        {
          v143 = (v368.n128_u32[2] - 1) & v140;
        }
        v144 = *(uint64_t ***)(v368.n128_u64[0] + 8 * v143);
        if (v144)
        {
          v145 = *v144;
          if (v145)
          {
            if (v142.u32[0] < 2uLL)
            {
              while (1)
              {
                v147 = (float *)v145[1];
                if (v147 == v140)
                {
                  if (*((_DWORD *)v145 + 4) == (_DWORD)v140)
                    goto LABEL_126;
                }
                else if (((unint64_t)v147 & (v368.n128_u64[1] - 1)) != v143)
                {
                  goto LABEL_148;
                }
                v145 = (uint64_t *)*v145;
                if (!v145)
                  goto LABEL_148;
              }
            }
            do
            {
              v146 = v145[1];
              if ((float *)v146 == v140)
              {
                if (*((_DWORD *)v145 + 4) == (_DWORD)v140)
                  goto LABEL_126;
              }
              else
              {
                if (v146 >= v368.n128_u64[1])
                  v146 %= v368.n128_u64[1];
                if (v146 != v143)
                  break;
              }
              v145 = (uint64_t *)*v145;
            }
            while (v145);
          }
        }
LABEL_148:
        if (v142.u32[0] > 1uLL)
        {
          v10 = *(unsigned int *)(*v131 + 12 * v138 + 4 * v68);
          if (v368.n128_u64[1] <= (unint64_t)v140)
            v10 = (unint64_t)v140 % v368.n128_u64[1];
        }
        else
        {
          v10 = (v368.n128_u32[2] - 1) & v140;
        }
        v148 = *(uint64_t ***)(v368.n128_u64[0] + 8 * v10);
        if (v148)
        {
          v149 = *v148;
          if (v149)
          {
            if (v142.u32[0] < 2uLL)
            {
              while (1)
              {
                v151 = (float *)v149[1];
                if (v151 == v140)
                {
                  if (*((_DWORD *)v149 + 4) == (_DWORD)v140)
                    goto LABEL_205;
                }
                else if (((unint64_t)v151 & (v368.n128_u64[1] - 1)) != v10)
                {
                  goto LABEL_167;
                }
                v149 = (uint64_t *)*v149;
                if (!v149)
                  goto LABEL_167;
              }
            }
            do
            {
              v150 = (float *)v149[1];
              if (v150 == v140)
              {
                if (*((_DWORD *)v149 + 4) == (_DWORD)v140)
                  goto LABEL_205;
              }
              else
              {
                if ((unint64_t)v150 >= v368.n128_u64[1])
                  v150 = (float *)((unint64_t)v150 % v368.n128_u64[1]);
                if (v150 != (float *)v10)
                  break;
              }
              v149 = (uint64_t *)*v149;
            }
            while (v149);
          }
        }
      }
LABEL_167:
      v152 = operator new(0x18uLL);
      *v152 = 0;
      v152[1] = v140;
      *((_DWORD *)v152 + 4) = (_DWORD)v140;
      v153 = (float)(unint64_t)(*((_QWORD *)&v369 + 1) + 1);
      if (!v141 || (float)(v370 * (float)v141) < v153)
      {
        v154 = (v141 & (v141 - 1)) != 0;
        if (v141 < 3)
          v154 = 1;
        v155 = v154 | (2 * v141);
        v156 = vcvtps_u32_f32(v153 / v370);
        if (v155 <= v156)
          prime = v156;
        else
          prime = v155;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v141 = v368.n128_u64[1];
        }
        if (prime > v141)
          goto LABEL_179;
        if (prime < v141)
        {
          v158 = vcvtps_u32_f32((float)*((unint64_t *)&v369 + 1) / v370);
          if (v141 < 3
            || (v159 = (uint8x8_t)vcnt_s8((int8x8_t)v141), v159.i16[0] = vaddlv_u8(v159), v159.u32[0] > 1uLL))
          {
            v158 = std::__next_prime(v158);
          }
          else
          {
            v160 = 1 << -(char)__clz(v158 - 1);
            if (v158 >= 2)
              v158 = v160;
          }
          if (prime <= v158)
            prime = v158;
          if (prime < v141)
LABEL_179:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)&v368, prime);
        }
        v141 = v368.n128_u64[1];
        if ((v141 & (v141 - 1)) != 0)
        {
          if (v368.n128_u64[1] <= (unint64_t)v140)
            v10 = (unint64_t)v140 % v368.n128_u64[1];
          else
            v10 = (unint64_t)v140;
        }
        else
        {
          v10 = (v368.n128_u32[2] - 1) & v140;
        }
      }
      v161 = v368.n128_u64[0];
      v162 = *(_QWORD **)(v368.n128_u64[0] + 8 * v10);
      if (v162)
      {
        *v152 = *v162;
        goto LABEL_203;
      }
      *v152 = v369;
      *(_QWORD *)&v369 = v152;
      *(_QWORD *)(v161 + 8 * v10) = &v369;
      if (*v152)
      {
        v163 = *(_QWORD *)(*v152 + 8);
        if ((v141 & (v141 - 1)) != 0)
        {
          if (v163 >= v141)
            v163 %= v141;
        }
        else
        {
          v163 &= v141 - 1;
        }
        v162 = (_QWORD *)(v368.n128_u64[0] + 8 * v163);
LABEL_203:
        *v162 = v152;
      }
      ++*((_QWORD *)&v369 + 1);
LABEL_205:
      v134 = (char ***)v351[2];
      v164 = (char *)v351[1];
      if (v351[2] == v351[1])
        v165 = 0;
      else
        v165 = (((char *)v351[2] - (char *)v351[1]) << 7) - 1;
      v166 = (unint64_t)v136 + v139;
      if ((uint64_t *)v165 == (uint64_t *)((char *)v136 + v139))
      {
        std::deque<unsigned int>::__add_back_capacity((uint64_t)v351);
        v164 = (char *)v351[1];
        v134 = (char ***)v351[2];
        v136 = (uint64_t *)*((_QWORD *)&v352 + 1);
        v139 = v352;
        v166 = v352 + *((_QWORD *)&v352 + 1);
      }
      *(_DWORD *)(*(_QWORD *)&v164[(v166 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v166 & 0x3FF)) = (_DWORD)v140;
      v136 = (uint64_t *)((char *)v136 + 1);
      *((_QWORD *)&v352 + 1) = v136;
      goto LABEL_126;
    }
LABEL_119:
    v133 = v139;
    if (!v136)
    {
      v135 = (void **)v351[1];
      v13 = v320;
LABEL_211:
      if ((unint64_t)((char *)v134 - (char *)v135) >= 0x11)
      {
        v167 = (char *)v134 - (char *)v135;
        do
        {
          v168 = *v135++;
          operator delete(v168);
          v351[1] = v135;
          v167 -= 8;
        }
        while (v167 > 0x10);
      }
      while (v135 != (void **)v134)
      {
        v169 = *v135++;
        operator delete(v169);
      }
      if (v351[0])
        operator delete(v351[0]);
      v170 = (_QWORD *)v369;
      if ((_QWORD)v369)
      {
        do
        {
          v171 = (_QWORD *)*v170;
          operator delete(v170);
          v170 = v171;
        }
        while (v171);
      }
      v172 = (void *)v368.n128_u64[0];
      v368.n128_u64[0] = 0;
      if (v172)
        operator delete(v172);
      v173 = v357;
      if (v357 == v356)
      {
        v173 = v356;
        v174 = 4;
LABEL_227:
        (*(void (**)(void))(*v173 + 8 * v174))();
      }
      else if (v357)
      {
        v174 = 5;
        goto LABEL_227;
      }
      v175 = fmaxf(*((float *)&v337 + 3) - *(float *)&v337, *(float *)&v338 - *((float *)&v337 + 1));
      *((float *)&v337 + 2) = v175 * -0.5;
      *((float *)&v338 + 1) = v175 * 0.5;
      v176 = *(float *)(v324 + 28);
      v177 = *(float *)(v324 + 32);
      v178 = *(float *)(v324 + 36);
      v179 = v176 + v176;
      v180 = (float)(v176 + v176) * v176;
      v181 = (float)(v177 + v177) * v177;
      v183 = *(_DWORD *)(v324 + 20);
      v182 = *(float *)(v324 + 24);
      v184 = (float)(v182 + v182) * v176;
      v185 = (float)(v177 + v177) * v178;
      v186 = v184 - v185;
      v187 = v177 * (float)(v182 + v182);
      v188 = v178 * v179;
      v189 = v185 + v184;
      v190 = (float)(v178 * v179) + v187;
      *(float *)v351 = 1.0 - (float)(v180 + v181);
      *((float *)v351 + 1) = v189;
      v191 = 1.0 - (float)((float)(v182 + v182) * v182);
      v192 = v179 * v177;
      *(float *)&v351[2] = v186;
      *((float *)&v351[2] + 1) = v191 - v181;
      v193 = v178 * (float)(v182 + v182);
      *(float *)&v352 = v190;
      *((float *)&v352 + 1) = v192 - v193;
      *(float *)&v351[1] = v187 - v188;
      v351[3] = (void *)COERCE_UNSIGNED_INT(v193 + v192);
      *((float *)&v352 + 2) = v191 - v180;
      HIDWORD(v351[1]) = 0;
      HIDWORD(v352) = 0;
      v194 = *(_QWORD *)(v324 + 12);
      v354 = v183;
      v353 = v194;
      v355 = 1065353216;
      v331 = xmmword_19FFB3470;
      v332 = 0x80000000800000;
      v368.n128_u64[0] = (unint64_t)&off_1E42D8AB0;
      v368.n128_u64[1] = (unint64_t)&v331;
      *(_QWORD *)&v369 = v351;
      *((_QWORD *)&v369 + 1) = &v368;
      v195.n128_u64[0] = (unint64_t)gm::Box<float,3>::forEachCorner((uint64_t *)&v337, (uint64_t)&v368);
      v196 = (__n128 *)*((_QWORD *)&v369 + 1);
      if (*((__n128 **)&v369 + 1) == &v368)
      {
        v196 = &v368;
        v197 = 4;
LABEL_232:
        (*(void (**)(__n128))(v196->n128_u64[0] + 8 * v197))(v195);
      }
      else if (*((_QWORD *)&v369 + 1))
      {
        v197 = 5;
        goto LABEL_232;
      }
      v198 = (uint64_t)(v328 - __n) >> 1;
      v337 = v331;
      v338 = v332;
      v199 = (v348 - (_BYTE *)v347) >> 1;
      v200 = v329.i64[1];
      if (v329.i64[1] >= (unint64_t)v13)
      {
        v206 = 0x2E8BA2E8BA2E8BA3 * ((v329.i64[1] - v329.i64[0]) >> 3) + 1;
        if (v206 > 0x2E8BA2E8BA2E8BALL)
          abort();
        if (0x5D1745D1745D1746 * ((uint64_t)&v13[-v329.i64[0]] >> 3) > v206)
          v206 = 0x5D1745D1745D1746 * ((uint64_t)&v13[-v329.i64[0]] >> 3);
        if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v13[-v329.i64[0]] >> 3)) >= 0x1745D1745D1745DLL)
          v207 = 0x2E8BA2E8BA2E8BALL;
        else
          v207 = v206;
        if (v207)
        {
          if (v207 > 0x2E8BA2E8BA2E8BALL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v208 = (char *)operator new(88 * v207);
        }
        else
        {
          v208 = 0;
        }
        v209 = v333;
        v210 = &v208[8 * ((v329.i64[1] - v329.i64[0]) >> 3)];
        *(_QWORD *)v210 = *(_QWORD *)v323;
        *((float *)v210 + 2) = v323[2];
        *(_QWORD *)(v210 + 12) = *(_QWORD *)v321;
        *((float *)v210 + 5) = v321[2];
        *((_DWORD *)v210 + 6) = *(_DWORD *)(v324 + 36);
        *(_QWORD *)(v210 + 28) = *(_QWORD *)v322;
        *((float *)v210 + 9) = v322[2];
        *((_DWORD *)v210 + 10) = v209;
        *((_QWORD *)v210 + 6) = v198;
        *((_QWORD *)v210 + 7) = v199;
        *((_QWORD *)v210 + 10) = v338;
        *((_OWORD *)v210 + 4) = v337;
        v211 = (uint64_t)v210;
        if (v329.i64[1] == v329.i64[0])
        {
          a6 = v316;
        }
        else
        {
          a6 = v316;
          do
          {
            v212 = *(_QWORD *)(v200 - 88);
            v200 -= 88;
            v213 = *(_DWORD *)(v200 + 8);
            *(_QWORD *)(v211 - 88) = v212;
            v211 -= 88;
            *(_DWORD *)(v211 + 8) = v213;
            v214 = *(_QWORD *)(v200 + 12);
            *(_DWORD *)(v211 + 20) = *(_DWORD *)(v200 + 20);
            *(_QWORD *)(v211 + 12) = v214;
            *(_DWORD *)(v211 + 24) = *(_DWORD *)(v200 + 24);
            v215 = *(_OWORD *)(v200 + 28);
            v216 = *(_OWORD *)(v200 + 44);
            v217 = *(_OWORD *)(v200 + 60);
            *(_OWORD *)(v211 + 72) = *(_OWORD *)(v200 + 72);
            *(_OWORD *)(v211 + 60) = v217;
            *(_OWORD *)(v211 + 44) = v216;
            *(_OWORD *)(v211 + 28) = v215;
          }
          while (v200 != v329.i64[0]);
          v200 = v329.i64[0];
        }
        v13 = &v208[88 * v207];
        v205 = (uint64_t)(v210 + 88);
        v329.i64[0] = v211;
        if (v200)
          operator delete((void *)v200);
      }
      else
      {
        v201 = v333;
        v202 = *((_DWORD *)v323 + 2);
        *(_QWORD *)v329.i64[1] = *(_QWORD *)v323;
        *(_DWORD *)(v329.i64[1] + 8) = v202;
        v203 = *((_DWORD *)v321 + 2);
        *(_QWORD *)(v329.i64[1] + 12) = *(_QWORD *)v321;
        *(_DWORD *)(v329.i64[1] + 20) = v203;
        *(_DWORD *)(v329.i64[1] + 24) = *(_DWORD *)(v324 + 36);
        v204 = *((_DWORD *)v322 + 2);
        *(_QWORD *)(v329.i64[1] + 28) = *(_QWORD *)v322;
        *(_DWORD *)(v329.i64[1] + 36) = v204;
        *(_DWORD *)(v329.i64[1] + 40) = v201;
        *(_QWORD *)(v329.i64[1] + 48) = v198;
        *(_QWORD *)(v329.i64[1] + 56) = v199;
        *(_OWORD *)(v329.i64[1] + 64) = v337;
        *(_QWORD *)(v329.i64[1] + 80) = v338;
        v205 = v329.i64[1] + 88;
        a6 = v316;
      }
      v218 = v335[0];
      if (v335[0])
      {
        do
        {
          v219 = (_QWORD *)*v218;
          operator delete(v218);
          v218 = v219;
        }
        while (v219);
      }
      v220 = v334[0];
      v334[0] = 0;
      if (v220)
        operator delete(v220);
      v16.i64[0] = v329.i64[0];
      v16.i64[1] = v205;
      v329 = v16;
      v10 = v324 + 56;
      v14 = v318;
      if ((float *)(v324 + 56) == a5)
      {
        v320 = v13;
        v7 = (uint64_t)v348;
        v221 = v347;
        v139 = v345 - (_BYTE *)__src;
LABEL_258:
        v222 = operator new(0xF8uLL);
        v222[1] = 0;
        v222[2] = 0;
        *v222 = &off_1E42E06B0;
        v222[3] = &off_1E42B5748;
        v222[4] = 8;
        *((_DWORD *)v222 + 10) = 1;
        v222[6] = 0;
        v222[7] = 0;
        v222[8] = 0;
        v222[9] = v139;
        v223 = 0uLL;
        *((_OWORD *)v222 + 5) = 0u;
        *((_OWORD *)v222 + 6) = 0u;
        v222[14] = 0;
        v131 = &unk_1ECE44000;
        if ((v224 & 1) == 0)
        {
          v223 = 0uLL;
          if (v294)
          {
            v295 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v295, "GeoGL", 0xA3D02C1100000005);
            v223 = 0uLL;
          }
        }
        v222[15] = ggl::Allocator::instance(void)::alloc;
        v222[16] = 0;
        *((_OWORD *)v222 + 11) = v223;
        *((_OWORD *)v222 + 12) = v223;
        v222[26] = 0;
        v222[27] = -1;
        *((_OWORD *)v222 + 9) = xmmword_19FFB2DD0;
        *((_OWORD *)v222 + 10) = v223;
        v328 = xmmword_19FFB2DD0;
        *((_DWORD *)v222 + 34) = 0;
        v134 = &ggl::DaVinci::texturedPositionCompressedVboReflection;
        v222[29] = "Decal Vertex Data";
        v222[30] = &ggl::DaVinci::texturedPositionCompressedVboReflection;
        v222[3] = &off_1E42B83E0;
        v222[28] = &unk_1E42B8400;
        v351[0] = v222 + 3;
        v351[1] = v222;
        v225 = operator new(0xF8uLL);
        __n = v7 - (_QWORD)v221;
        v68 = (v7 - (uint64_t)v221) >> 1;
        v225[1] = 0;
        v225[2] = 0;
        *v225 = &off_1E42E5228;
        v226 = ggl::BufferData::BufferData((uint64_t)(v225 + 3), 2, 1, 0, 6, v68);
        v225[28] = &unk_1E42BD118;
        v225[29] = "Decal Index Data";
        *((_DWORD *)v225 + 60) = 0;
        v225[3] = &off_1E42BD0F8;
        v225[4] = 2;
        v368.n128_u64[0] = v226;
        v368.n128_u64[1] = (unint64_t)v225;
        v15 = (uint64_t)operator new(0xA8uLL);
        *(_QWORD *)(v15 + 8) = 0;
        *(_QWORD *)(v15 + 16) = 0;
        *(_QWORD *)v15 = &off_1E42E4C78;
        v227 = *(_OWORD *)v351;
        v351[0] = 0;
        v351[1] = 0;
        v330 = v368;
        v368 = 0uLL;
        v136 = &ggl::MeshTyped<ggl::DaVinci::TexturedPositionCompressedVbo>::typedReflection(void)::r;
        if ((v228 & 1) == 0)
        {
          v324 = v227;
          v227 = v324;
          if (v296)
          {
            if ((v297 & 1) == 0)
              goto LABEL_400;
            goto LABEL_388;
          }
        }
        goto LABEL_260;
      }
      goto LABEL_7;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
LABEL_400:
  {
    ggl::MeshTyped<ggl::DaVinci::TexturedPositionCompressedVbo>::attributesReflection(void)::r = (uint64_t)v134;
  }
LABEL_388:
  *v136 = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedPositionCompressedVbo>::attributesReflection(void)::r;
  v136[1] = 1;
  v227 = v324;
LABEL_260:
  *(_QWORD *)(v15 + 88) = 0;
  *(_QWORD *)(v15 + 56) = 0;
  *(_QWORD *)(v15 + 64) = 0;
  *(_DWORD *)(v15 + 72) = 0;
  *(_QWORD *)(v15 + 24) = &off_1E42BBC08;
  *(_QWORD *)(v15 + 32) = "Decal Mesh";
  *(_QWORD *)(v15 + 40) = &unk_1E42BBC28;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 80) = v136;
  *(_QWORD *)(v15 + 96) = 0;
  *(_QWORD *)(v15 + 104) = 0;
  v229 = atomic_load((unsigned __int8 *)v137);
  if ((v229 & 1) == 0)
  {
    v325 = v227;
    v227 = v325;
    if (v298)
    {
      v299 = operator new();
      *(_QWORD *)(v299 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v299 + 24) = "GeoGL";
      *(_OWORD *)(v299 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v299 = &off_1E42B5668;
      *(_QWORD *)(v299 + 8) = "GeoGL";
      *(_OWORD *)(v299 + 72) = 0u;
      *(_OWORD *)(v299 + 88) = 0u;
      *(_OWORD *)(v299 + 104) = 0u;
      *(_OWORD *)(v299 + 120) = 0u;
      *(_OWORD *)(v299 + 136) = 0u;
      *(_OWORD *)(v299 + 152) = 0u;
      *(_OWORD *)(v299 + 168) = 0u;
      *(_OWORD *)(v299 + 184) = 0u;
      *(_OWORD *)(v299 + 200) = 0u;
      *(_OWORD *)(v299 + 216) = 0u;
      *(_OWORD *)(v299 + 232) = 0u;
      *(_QWORD *)(v299 + 248) = 0;
      *(_OWORD *)(v299 + 56) = 0u;
      v300 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v299 + 56), 0);
      if ((_DWORD)v300)
        geo::read_write_lock::logFailure(v300, (uint64_t)"initialization", v301);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v299 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v299 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      v131[495] = v299;
      v227 = v325;
    }
  }
  v230 = v131[495];
  *(_QWORD *)(v15 + 144) = 0;
  *(_QWORD *)(v15 + 120) = 0;
  *(_QWORD *)(v15 + 128) = 0;
  *(_QWORD *)(v15 + 112) = v230;
  LOBYTE(v230) = atomic_load((unsigned __int8 *)v137);
  if ((v230 & 1) == 0)
  {
    v326 = v227;
    v227 = v326;
    if (v303)
    {
      v304 = operator new();
      *(_QWORD *)(v304 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v304 + 24) = "GeoGL";
      *(_OWORD *)(v304 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v304 = &off_1E42B5668;
      *(_QWORD *)(v304 + 8) = "GeoGL";
      *(_OWORD *)(v304 + 72) = 0u;
      *(_OWORD *)(v304 + 88) = 0u;
      *(_OWORD *)(v304 + 104) = 0u;
      *(_OWORD *)(v304 + 120) = 0u;
      *(_OWORD *)(v304 + 136) = 0u;
      *(_OWORD *)(v304 + 152) = 0u;
      *(_OWORD *)(v304 + 168) = 0u;
      *(_OWORD *)(v304 + 184) = 0u;
      *(_OWORD *)(v304 + 200) = 0u;
      *(_OWORD *)(v304 + 216) = 0u;
      *(_OWORD *)(v304 + 232) = 0u;
      *(_QWORD *)(v304 + 248) = 0;
      *(_OWORD *)(v304 + 56) = 0u;
      v305 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v304 + 56), 0);
      if ((_DWORD)v305)
        geo::read_write_lock::logFailure(v305, (uint64_t)"initialization", v306);
      v307 = malloc_create_zone(0, 0);
      *(_QWORD *)(v304 + 48) = v307;
      malloc_set_zone_name(v307, "GeoGL");
      *(_QWORD *)(v304 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      v131[495] = v304;
      v227 = v326;
    }
  }
  *(_QWORD *)(v15 + 152) = v131[495];
  *(_QWORD *)(v15 + 160) = 0;
  *(_QWORD *)(v15 + 136) = v15 + 144;
  *(_QWORD *)(v15 + 24) = &off_1E42BE038;
  *(_QWORD *)(v15 + 40) = &unk_1E42BE058;
  v358 = v227;
  v231 = (std::__shared_weak_count *)*((_QWORD *)&v227 + 1);
  if (*((_QWORD *)&v227 + 1))
  {
    v232 = (unint64_t *)(*((_QWORD *)&v227 + 1) + 8);
    do
      v233 = __ldxr(v232);
    while (__stxr(v233 + 1, v232));
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v15 + 88, (uint64_t *)&v358, (uint64_t *)&v359, 1uLL);
  v234 = (std::__shared_weak_count *)*((_QWORD *)&v358 + 1);
  v235 = v330;
  if (*((_QWORD *)&v358 + 1))
  {
    v236 = (unint64_t *)(*((_QWORD *)&v358 + 1) + 8);
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v234->__on_zero_shared)(v234, v330);
      std::__shared_weak_count::__release_weak(v234);
      v235 = v330;
    }
  }
  v238 = (std::__shared_weak_count *)v235.n128_u64[1];
  if (v235.n128_u64[1])
  {
    v239 = (unint64_t *)(v235.n128_u64[1] + 8);
    do
      v240 = __ldxr(v239);
    while (__stxr(v240 + 1, v239));
  }
  v241 = *(std::__shared_weak_count **)(v15 + 128);
  *(__n128 *)(v15 + 120) = v235;
  if (v241)
  {
    v242 = (unint64_t *)&v241->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  *(_QWORD *)(v15 + 24) = &off_1E42BC860;
  *(_QWORD *)(v15 + 40) = &unk_1E42BC880;
  if (v238)
  {
    v244 = (unint64_t *)&v238->__shared_owners_;
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  if (v231)
  {
    v246 = (unint64_t *)&v231->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  *(_QWORD *)&v339[0] = v15 + 24;
  *((_QWORD *)&v339[0] + 1) = v15;
  v248 = (std::__shared_weak_count *)v368.n128_u64[1];
  if (v368.n128_u64[1])
  {
    v249 = (unint64_t *)(v368.n128_u64[1] + 8);
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
    }
  }
  v251 = v139 >> 3;
  v252 = (std::__shared_weak_count *)v351[1];
  if (v351[1])
  {
    v253 = (unint64_t *)((char *)v351[1] + 8);
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v255 = *(_QWORD *)&v339[0];
  v256 = **(_QWORD **)(*(_QWORD *)&v339[0] + 64);
  v257 = *(_QWORD *)(v256 + 8) * v251;
  if (v257)
  {
    if (a7 && *(_BYTE *)(v256 + 17) != 2)
      v258 = (void *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a7 + 56))(a7, **(_QWORD **)(*(_QWORD *)&v339[0] + 64), 0, v257, 1, 1);
    else
      v258 = *(void **)(v256 + 72);
  }
  else
  {
    v258 = 0;
  }
  memcpy(v258, __src, v139);
  if (v258 && a7 && v257 && *(_BYTE *)(v256 + 17) != 2)
    (*(void (**)(uint64_t, void *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a7 + 64))(a7, v258, v256, 0, v257, 1, 1);
  v259 = (std::__shared_weak_count *)operator new(0xE0uLL);
  v259->__shared_owners_ = 0;
  v260 = (unint64_t *)&v259->__shared_owners_;
  v259->__shared_weak_owners_ = 0;
  v259->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF488;
  v259[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
  v261 = v259 + 1;
  v262 = qword_1EE5517E8;
  v259[1].__shared_owners_ = qword_1EE5517E8;
  LODWORD(v259[1].__shared_weak_owners_) = 769;
  v259[2].__vftable = 0;
  v259[2].__shared_owners_ = 0;
  v259[2].__shared_weak_owners_ = 0;
  v259[3].__vftable = (std::__shared_weak_count_vtbl *)(v251 * v262);
  v263 = (std::__shared_count)0;
  *(_OWORD *)&v259[3].__shared_owners_ = 0u;
  v259[4].std::__shared_count = 0u;
  v259[4].__shared_weak_owners_ = 0;
  LOBYTE(v262) = atomic_load((unsigned __int8 *)v137);
  if ((v262 & 1) == 0)
  {
    v263 = (std::__shared_count)0;
    if (v308)
    {
      v309 = operator new();
      v131[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v309, "GeoGL", 0xA3D02C1100000005);
      v263 = (std::__shared_count)0;
    }
  }
  v259[5].__vftable = (std::__shared_weak_count_vtbl *)v131[495];
  v259[5].__shared_owners_ = 0;
  *((std::__shared_count *)v259 + 11) = v263;
  v259[8].std::__shared_count = v263;
  v259[8].__shared_weak_owners_ = 0;
  v259[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
  *((std::__shared_count *)v259 + 10) = v263;
  v259[6].std::__shared_count = (std::__shared_count)v328;
  LODWORD(v259[5].__shared_weak_owners_) = 0;
  v259[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6F28;
  v264 = v259[1].__shared_owners_ * v251;
  v265 = v139 >> 1;
  *(_QWORD *)&v358 = v259 + 1;
  *((_QWORD *)&v358 + 1) = v259;
  if (v264)
  {
    if (!a7 || BYTE1(v259[1].__shared_weak_owners_) == 2)
      v266 = v259[4].__vftable;
    else
      v266 = (std::__shared_weak_count_vtbl *)(*(uint64_t (**)(uint64_t, std::__shared_weak_count *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a7 + 56))(a7, v261, 0, v264, 1, 1);
    memcpy(v266, v341, v265);
    if (v266 && a7 && BYTE1(v259[1].__shared_weak_owners_) != 2)
      (*(void (**)(uint64_t, std::__shared_weak_count_vtbl *, std::__shared_weak_count *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a7 + 64))(a7, v266, v261, 0, v264, 1, 1);
  }
  else
  {
    memcpy(0, v341, v265);
  }
  do
    v267 = __ldxr(v260);
  while (__stxr(v267 + 1, v260));
  v269 = (uint64_t *)(v255 + 120);
  v268 = *(uint64_t **)(v255 + 120);
  if (v268)
  {
    while (1)
    {
      v269 = v268;
      if (!v268[4])
        break;
      v268 = (uint64_t *)*v268;
      if (!*v269)
        goto LABEL_324;
    }
LABEL_328:
    v273 = (unint64_t *)&v259->__shared_owners_;
    do
      v274 = __ldxr(v273);
    while (__stxr(v274 + 1, v273));
    v270 = v269;
  }
  else
  {
LABEL_324:
    v270 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v255 + 128) + 16))(*(_QWORD *)(v255 + 128), 56, 8);
    *v270 = 0;
    v270[1] = 0;
    v270[5] = 0;
    v270[6] = 0;
    v270[4] = 0;
    v270[2] = (uint64_t)v269;
    *v269 = (uint64_t)v270;
    v271 = **(_QWORD **)(v255 + 112);
    v272 = v270;
    if (v271)
    {
      *(_QWORD *)(v255 + 112) = v271;
      v272 = (uint64_t *)*v269;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v255 + 120), v272);
    ++*(_QWORD *)(v255 + 136);
    if (v259)
    {
      v269 = v270;
      goto LABEL_328;
    }
  }
  v275 = (std::__shared_weak_count *)v270[6];
  v270[5] = (uint64_t)v261;
  v270[6] = (uint64_t)v259;
  if (v275)
  {
    v276 = (unint64_t *)&v275->__shared_owners_;
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  if (v259)
  {
    v278 = (unint64_t *)&v259->__shared_owners_;
    do
      v279 = __ldaxr(v278);
    while (__stlxr(v279 - 1, v278));
    if (!v279)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
  v280 = (std::__shared_weak_count *)*((_QWORD *)&v358 + 1);
  if (*((_QWORD *)&v358 + 1))
  {
    v281 = (unint64_t *)(*((_QWORD *)&v358 + 1) + 8);
    do
      v282 = __ldaxr(v281);
    while (__stlxr(v282 - 1, v281));
    if (!v282)
    {
      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
      std::__shared_weak_count::__release_weak(v280);
    }
  }
  v283 = *(_QWORD *)&v339[0];
  v284 = *(_QWORD *)(*(_QWORD *)&v339[0] + 96);
  v285 = *(_QWORD *)(v284 + 8) * v68;
  if (v285)
  {
    if (a7 && *(_BYTE *)(v284 + 17) != 2)
      v286 = (void *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a7 + 56))(a7, *(_QWORD *)(*(_QWORD *)&v339[0] + 96), 0, v285, 1, 1);
    else
      v286 = *(void **)(v284 + 72);
    memcpy(v286, v347, __n);
    if (v286)
      v287 = a7 == 0;
    else
      v287 = 1;
    v288 = v287 || v285 == 0;
    if (!v288 && *(_BYTE *)(v284 + 17) != 2)
      (*(void (**)(uint64_t, void *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a7 + 64))(a7, v286, v284, 0, v285, 1, 1);
  }
  else
  {
    memcpy(0, v347, __n);
  }
  if (!a3)
  {
    a1->i8[0] = 0;
    v289 = (std::__shared_weak_count *)*((_QWORD *)&v339[0] + 1);
    if (!*((_QWORD *)&v339[0] + 1))
      goto LABEL_372;
    goto LABEL_368;
  }
  v289 = (std::__shared_weak_count *)*((_QWORD *)&v339[0] + 1);
  if (*((_QWORD *)&v339[0] + 1))
  {
    v290 = (unint64_t *)(*((_QWORD *)&v339[0] + 1) + 8);
    do
      v291 = __ldxr(v290);
    while (__stxr(v291 + 1, v290));
  }
  a1->i8[0] = 1;
  a1->i64[1] = v283;
  a1[1].i64[0] = (uint64_t)v289;
  a1[1].i64[1] = a3;
  a1[2] = v329;
  v329.i64[0] = 0;
  a1[3].i64[0] = (uint64_t)v320;
  if (v289)
  {
LABEL_368:
    v292 = (unint64_t *)&v289->__shared_owners_;
    do
      v293 = __ldaxr(v292);
    while (__stlxr(v293 - 1, v292));
    if (!v293)
    {
      ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
      std::__shared_weak_count::__release_weak(v289);
    }
  }
LABEL_372:
  if (v341)
  {
    v342 = v341;
    operator delete(v341);
  }
  if (__src)
  {
    v345 = __src;
    operator delete(__src);
  }
  if (v347)
  {
    v348 = v347;
    operator delete(v347);
  }
  if (v329.i64[0])
    operator delete((void *)v329.i64[0]);
}

void sub_19FB66B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  uint64_t a68;
  void *a70;
  uint64_t a71;
  uint64_t v71;
  void *v73;
  void *v74;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v71 - 256);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  if (a67)
  {
    a68 = (uint64_t)a67;
    operator delete(a67);
    v73 = a70;
    if (!a70)
    {
LABEL_3:
      v74 = (void *)STACK[0x200];
      if (!STACK[0x200])
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v73 = a70;
    if (!a70)
      goto LABEL_3;
  }
  a71 = (uint64_t)v73;
  operator delete(v73);
  v74 = (void *)STACK[0x200];
  if (!STACK[0x200])
  {
LABEL_5:
    if (a37)
      operator delete(a37);
    _Unwind_Resume(a1);
  }
LABEL_4:
  STACK[0x208] = (unint64_t)v74;
  operator delete(v74);
  goto LABEL_5;
}

_QWORD *std::construct_at[abi:nn180100]<md::DaVinciDecalBatch,md::DaVinciDecalBatch const&,md::DaVinciDecalBatch*>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  int64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a1[2] = a2[2];
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v6 = (uint64_t *)a2[3];
  v7 = (uint64_t *)a2[4];
  v8 = (char *)v7 - (char *)v6;
  if (v7 != v6)
  {
    v9 = 0x2E8BA2E8BA2E8BA3 * (v8 >> 3);
    if (v9 >= 0x2E8BA2E8BA2E8BBLL)
      abort();
    v10 = (char *)operator new(v8);
    a1[3] = v10;
    a1[4] = v10;
    a1[5] = &v10[88 * v9];
    do
    {
      v11 = *v6;
      *((_DWORD *)v10 + 2) = *((_DWORD *)v6 + 2);
      *(_QWORD *)v10 = v11;
      v12 = *(uint64_t *)((char *)v6 + 12);
      *((_DWORD *)v10 + 5) = *((_DWORD *)v6 + 5);
      *(_QWORD *)(v10 + 12) = v12;
      *((_DWORD *)v10 + 6) = *((_DWORD *)v6 + 6);
      v13 = *(_OWORD *)((char *)v6 + 28);
      v14 = *(_OWORD *)((char *)v6 + 44);
      v15 = *(_OWORD *)((char *)v6 + 60);
      *(_OWORD *)(v10 + 72) = *(_OWORD *)(v6 + 9);
      *(_OWORD *)(v10 + 60) = v15;
      *(_OWORD *)(v10 + 44) = v14;
      *(_OWORD *)(v10 + 28) = v13;
      v10 += 88;
      v6 += 11;
    }
    while (v6 != v7);
    a1[4] = v10;
  }
  return a1;
}

void sub_19FB66DCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<md::DaVinciDecalBatch>::__push_back_slow_path<md::DaVinciDecalBatch const&>(void **a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v21 = &v7[48 * v2];
  v23 = &v7[48 * v6];
  std::construct_at[abi:nn180100]<md::DaVinciDecalBatch,md::DaVinciDecalBatch const&,md::DaVinciDecalBatch*>(v21, a2);
  v8 = v21;
  v9 = (char *)*a1;
  v10 = (char *)a1[1];
  if (v10 == *a1)
  {
    v15 = (char *)a1[1];
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = &v21[v11];
      v13 = &v10[v11];
      *((_OWORD *)v12 - 3) = *(_OWORD *)&v10[v11 - 48];
      *((_QWORD *)v13 - 6) = 0;
      *((_QWORD *)v13 - 5) = 0;
      v14 = *(_QWORD *)&v10[v11 - 32];
      *((_QWORD *)v12 - 2) = 0;
      *((_QWORD *)v12 - 1) = 0;
      *((_QWORD *)v12 - 4) = v14;
      *((_QWORD *)v12 - 3) = 0;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)&v10[v11 - 24];
      *((_QWORD *)v12 - 1) = *(_QWORD *)&v10[v11 - 8];
      *((_QWORD *)v13 - 3) = 0;
      *((_QWORD *)v13 - 2) = 0;
      *((_QWORD *)v13 - 1) = 0;
      v11 -= 48;
    }
    while (&v10[v11] != v9);
    v8 = &v21[v11];
    v15 = (char *)*a1;
    v10 = (char *)a1[1];
  }
  *a1 = v8;
  a1[1] = v21 + 48;
  a1[2] = v23;
  if (v10 == v15)
  {
    if (v10)
LABEL_18:
      operator delete(v10);
  }
  else
  {
    do
    {
      v22 = v10 - 48;
      v17 = (void *)*((_QWORD *)v10 - 3);
      if (v17)
      {
        *((_QWORD *)v10 - 2) = v17;
        operator delete(v17);
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)v10 - 5);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v10 -= 48;
    }
    while (v22 != v15);
    v10 = v15;
    if (v15)
      goto LABEL_18;
  }
  return v21 + 48;
}

void sub_19FB66FF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<md::DaVinciDecalBatch>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t geo::optional<md::DaVinciDecalBatch>::~optional(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(_BYTE *)a1)
  {
    v2 = *(void **)(a1 + 32);
    if (v2)
    {
      *(_QWORD *)(a1 + 40) = v2;
      operator delete(v2);
    }
    v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void **std::vector<md::DaVinciDecalBatch>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v6 = (std::__shared_weak_count *)*((_QWORD *)v3 - 5);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__split_buffer<md::DaVinciDecalBatch>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
    v5 = *(std::__shared_weak_count **)(i - 40);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_emplace<ggl::DaVinci::TexturedPositionCompressedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::TexturedPositionCompressedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4C78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::TexturedPositionCompressedMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::__hash_table<std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::__unordered_map_hasher<GeoCodecsDaVinciMesh *,std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::hash<GeoCodecsDaVinciMesh *>,std::equal_to<GeoCodecsDaVinciMesh *>,true>,std::__unordered_map_equal<GeoCodecsDaVinciMesh *,std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::equal_to<GeoCodecsDaVinciMesh *>,std::hash<GeoCodecsDaVinciMesh *>,true>,std::allocator<std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>>>::__emplace_unique_key_args<GeoCodecsDaVinciMesh *,std::piecewise_construct_t const&,std::tuple<GeoCodecsDaVinciMesh * const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *i;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  void *v43;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = a1 + 2;
  v12 = operator new(0x28uLL);
  *v12 = 0;
  v12[1] = v8;
  v16 = *a3;
  v12[3] = 0;
  v12[4] = 0;
  v12[2] = v16;
  v17 = (float)(unint64_t)(a1[3] + 1);
  v18 = *((float *)a1 + 8);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = a1[1];
    }
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_59;
      v33 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (prime <= v33)
        prime = v33;
      if (prime >= v9)
      {
        v9 = a1[1];
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v43 = (void *)*a1;
        *a1 = 0;
        if (v43)
          operator delete(v43);
        v9 = 0;
        a1[1] = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v23 = operator new(8 * prime);
    v24 = (void *)*a1;
    *a1 = (uint64_t)v23;
    if (v24)
      operator delete(v24);
    v25 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v25++) = 0;
    while (prime != v25);
    v26 = (_QWORD *)*v15;
    if (!*v15)
    {
LABEL_58:
      v9 = prime;
      goto LABEL_59;
    }
    v27 = v26[1];
    v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v29 = v27 & v28;
      *(_QWORD *)(*a1 + 8 * v29) = v15;
      for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
      {
        v31 = i[1] & v28;
        if (v31 == v29)
        {
          v26 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v31))
        {
          *v26 = *i;
          v32 = 8 * v31;
          *i = **(_QWORD **)(*a1 + v32);
          **(_QWORD **)(*a1 + v32) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v31) = v26;
          v26 = i;
          v29 = v31;
        }
      }
      goto LABEL_58;
    }
    if (v27 >= prime)
      v27 %= prime;
    *(_QWORD *)(*a1 + 8 * v27) = v15;
    v36 = (_QWORD *)*v26;
    if (!*v26)
      goto LABEL_58;
    while (1)
    {
      v38 = v36[1];
      if (v38 >= prime)
        v38 %= prime;
      if (v38 != v27)
      {
        if (!*(_QWORD *)(*a1 + 8 * v38))
        {
          *(_QWORD *)(*a1 + 8 * v38) = v26;
          goto LABEL_63;
        }
        *v26 = *v36;
        v37 = 8 * v38;
        *v36 = **(_QWORD **)(*a1 + v37);
        **(_QWORD **)(*a1 + v37) = v36;
        v36 = v26;
      }
      v38 = v27;
LABEL_63:
      v26 = v36;
      v36 = (_QWORD *)*v36;
      v27 = v38;
      if (!v36)
        goto LABEL_58;
    }
  }
LABEL_72:
  v39 = *a1;
  v40 = *(_QWORD **)(*a1 + 8 * v3);
  if (v40)
  {
    *v12 = *v40;
LABEL_80:
    *v40 = v12;
    goto LABEL_81;
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v39 + 8 * v3) = v15;
  if (*v12)
  {
    v41 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v41 >= v9)
        v41 %= v9;
    }
    else
    {
      v41 &= v9 - 1;
    }
    v40 = (_QWORD *)(*a1 + 8 * v41);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v12;
}

void sub_19FB676AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::deque<unsigned int>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  BOOL v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 *v86;
  _OWORD *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  _OWORD *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_86:
      *(_QWORD *)v5 = v8;
      goto LABEL_87;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v33 = (v5 - v9) >> 2;
      if (v5 == v9)
        v33 = 1;
      if (!(v33 >> 61))
      {
        v34 = v33 >> 2;
        v35 = 8 * v33;
        v36 = (char *)operator new(8 * v33);
        v37 = &v36[8 * v34];
        v38 = &v36[v35];
        v40 = v5 - v7;
        v39 = v5 == v7;
        v5 = v37;
        if (!v39)
        {
          v5 = &v37[v40 & 0xFFFFFFFFFFFFFFF8];
          v41 = v40 - 8;
          if ((unint64_t)(v40 - 8) >= 0x38)
          {
            v83 = &v36[8 * v34];
            v42 = v83;
            if ((unint64_t)(v83 - v7) >= 0x20)
            {
              v84 = (v41 >> 3) + 1;
              v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
              v42 = &v37[v85];
              v86 = (__int128 *)(v6 + 3);
              v87 = v83 + 16;
              v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v89 = *v86;
                *(v87 - 1) = *(v86 - 1);
                *v87 = v89;
                v86 += 2;
                v87 += 2;
                v88 -= 4;
              }
              while (v88);
              if (v84 == (v84 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_79;
              v7 += v85;
            }
          }
          else
          {
            v42 = &v36[8 * v34];
          }
          do
          {
            v90 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v42 = v90;
            v42 += 8;
          }
          while (v42 != v5);
        }
        goto LABEL_79;
      }
LABEL_103:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_86;
  }
  v18 = *(char **)(a1 + 16);
  v17 = *(char **)(a1 + 24);
  v20 = *(char **)a1;
  v19 = *(char **)(a1 + 8);
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*(_QWORD *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_87:
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      v43 = v19;
      goto LABEL_85;
    }
    v68 = (v17 - v19) >> 2;
    if (v18 == v19)
      v68 = 1;
    if (v68 >> 61)
      goto LABEL_103;
    v69 = (v68 + 3) >> 2;
    v70 = 8 * v68;
    v71 = (char *)operator new(8 * v68);
    v43 = &v71[8 * v69];
    v72 = &v71[v70];
    v73 = v43;
    if (v18 != v19)
    {
      v73 = &v43[8 * v22];
      v74 = &v71[8 * v69];
      v75 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        v76 = &v71[8 * v69];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) >= 0x20)
        {
          v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
          v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
          v74 = &v43[v78];
          v79 = (__int128 *)(v19 + 16);
          v80 = v76 + 16;
          v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v82 = *v79;
            *(v80 - 1) = *(v79 - 1);
            *v80 = v82;
            v79 += 2;
            v80 += 2;
            v81 -= 4;
          }
          while (v81);
          if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(_QWORD *)a1 = v71;
            *(_QWORD *)(a1 + 8) = v43;
            *(_QWORD *)(a1 + 16) = v73;
            *(_QWORD *)(a1 + 24) = v72;
LABEL_84:
            operator delete(v19);
            v43 = *(char **)(a1 + 8);
LABEL_85:
            *((_QWORD *)v43 - 1) = v25;
            v7 = *(char **)(a1 + 8);
            v5 = *(char **)(a1 + 16);
            *(_QWORD *)(a1 + 8) = v7 - 8;
            v8 = *((_QWORD *)v7 - 1);
            *(_QWORD *)(a1 + 8) = v7;
            if (v5 != *(char **)(a1 + 24))
              goto LABEL_86;
            v9 = *(char **)a1;
            v10 = (uint64_t)&v7[-*(_QWORD *)a1];
            if ((unint64_t)v7 <= *(_QWORD *)a1)
            {
              v92 = (v5 - v9) >> 2;
              if (v5 == v9)
                v92 = 1;
              if (!(v92 >> 61))
              {
                v93 = v92 >> 2;
                v94 = 8 * v92;
                v36 = (char *)operator new(8 * v92);
                v37 = &v36[8 * v93];
                v38 = &v36[v94];
                v95 = v5 - v7;
                v39 = v5 == v7;
                v5 = v37;
                if (!v39)
                {
                  v5 = &v37[v95 & 0xFFFFFFFFFFFFFFF8];
                  v96 = v95 - 8;
                  if ((unint64_t)(v95 - 8) >= 0x38)
                  {
                    v98 = &v36[8 * v93];
                    v97 = v98;
                    if ((unint64_t)(v98 - v7) >= 0x20)
                    {
                      v99 = (v96 >> 3) + 1;
                      v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
                      v97 = &v37[v100];
                      v101 = (__int128 *)(v7 + 16);
                      v102 = v98 + 16;
                      v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v104 = *v101;
                        *(v102 - 1) = *(v101 - 1);
                        *v102 = v104;
                        v101 += 2;
                        v102 += 2;
                        v103 -= 4;
                      }
                      while (v103);
                      if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_79;
                      v7 += v100;
                    }
                  }
                  else
                  {
                    v97 = &v36[8 * v93];
                  }
                  do
                  {
                    v105 = *(_QWORD *)v7;
                    v7 += 8;
                    *(_QWORD *)v97 = v105;
                    v97 += 8;
                  }
                  while (v97 != v5);
                }
LABEL_79:
                *(_QWORD *)a1 = v36;
                *(_QWORD *)(a1 + 8) = v37;
                *(_QWORD *)(a1 + 16) = v5;
                *(_QWORD *)(a1 + 24) = v38;
                if (v9)
                {
                  operator delete(v9);
                  v5 = *(char **)(a1 + 16);
                }
                goto LABEL_86;
              }
              goto LABEL_103;
            }
            goto LABEL_5;
          }
          v75 = &v19[v78];
        }
      }
      do
      {
        v91 = *(_QWORD *)v75;
        v75 += 8;
        *(_QWORD *)v74 = v91;
        v74 += 8;
      }
      while (v74 != v73);
    }
    *(_QWORD *)a1 = v71;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = v73;
    *(_QWORD *)(a1 + 24) = v72;
    if (!v19)
      goto LABEL_85;
    goto LABEL_84;
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_103;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = &v28[8 * v22];
  v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v44 = 1;
      else
        v44 = v21 >> 2;
      if (v44 >> 61)
        goto LABEL_103;
      v30 = (char *)operator new(8 * v44);
      v31 = &v30[8 * v44];
      operator delete(v28);
      v19 = *(char **)(a1 + 8);
      v18 = *(char **)(a1 + 16);
      v28 = v30;
    }
    else
    {
      v32 = v22 + 2;
      if (v22 >= -1)
        v32 = v22 + 1;
      v30 -= 8 * (v32 >> 1);
    }
  }
  *(_QWORD *)v30 = v29;
  v45 = v30 + 8;
  if (v18 != v19)
  {
    while (v30 != v28)
    {
      v49 = v30;
      v47 = v45;
LABEL_41:
      v50 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v49 - 1) = v50;
      v46 = v49 - 8;
      v45 = v47;
      v30 = v46;
      if (v18 == *(char **)(a1 + 8))
        goto LABEL_38;
    }
    if (v45 < v31)
    {
      v51 = (v31 - v45) >> 3;
      if (v51 >= -1)
        v52 = v51 + 1;
      else
        v52 = v51 + 2;
      v47 = &v45[8 * (v52 >> 1)];
      v49 = &v30[8 * (v52 >> 1)];
      if (v45 == v30)
      {
        v28 = v45;
      }
      else
      {
        memmove(&v30[8 * (v52 >> 1)], v30, v45 - v30);
        v28 = v30;
      }
      goto LABEL_41;
    }
    if (v31 == v30)
      v53 = 1;
    else
      v53 = (v31 - v30) >> 2;
    if (v53 >> 61)
      goto LABEL_103;
    v54 = (char *)operator new(8 * v53);
    v28 = v54;
    v55 = (v53 + 3) >> 2;
    v49 = &v54[8 * v55];
    v47 = v49;
    v56 = v45 - v30;
    if (v45 != v30)
    {
      v47 = &v49[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      v58 = &v54[8 * v55];
      v59 = v30;
      if (v57 >= 0x38)
      {
        v60 = 8 * v55;
        v58 = &v54[8 * v55];
        v59 = v30;
        if ((unint64_t)(v58 - v30) >= 0x20)
        {
          v61 = (v57 >> 3) + 1;
          v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          v58 = &v49[v62];
          v63 = (__int128 *)(v30 + 16);
          v64 = &v54[v60 + 16];
          v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v66 = *v63;
            *((_OWORD *)v64 - 1) = *(v63 - 1);
            *(_OWORD *)v64 = v66;
            v63 += 2;
            v64 += 32;
            v65 -= 4;
          }
          while (v65);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_61;
          v59 = &v30[v62];
        }
      }
      do
      {
        v67 = *(_QWORD *)v59;
        v59 += 8;
        *(_QWORD *)v58 = v67;
        v58 += 8;
      }
      while (v58 != v47);
    }
LABEL_61:
    v31 = &v54[8 * v53];
    operator delete(v30);
    goto LABEL_41;
  }
  v46 = v30;
  v47 = v30 + 8;
LABEL_38:
  v48 = *(char **)a1;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v46;
  *(_QWORD *)(a1 + 16) = v47;
  *(_QWORD *)(a1 + 24) = v31;
  if (v48)
    operator delete(v48);
}

void sub_19FB67CC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<unsigned int>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_emplace<md::TriConnectivity>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB5F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TriConnectivity>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB5F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::TriConnectivity>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<md::DaVinciDecalBuilder::buildBatch(std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,unsigned long long,std::vector<md::DaVinciDecalBuilder::DecalDescription> const&,std::shared_ptr<geo::codec::VectorTile> const&,ggl::ResourceAccessor *)::$_0,std::allocator<md::DaVinciDecalBuilder::buildBatch(std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,unsigned long long,std::vector<md::DaVinciDecalBuilder::DecalDescription> const&,std::shared_ptr<geo::codec::VectorTile> const&,ggl::ResourceAccessor *)::$_0>,BOOL ()(unsigned int)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::DaVinciDecalBuilder::buildBatch(std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,unsigned long long,std::vector<md::DaVinciDecalBuilder::DecalDescription> const&,std::shared_ptr<geo::codec::VectorTile> const&,ggl::ResourceAccessor *)::$_0,std::allocator<md::DaVinciDecalBuilder::buildBatch(std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,unsigned long long,std::vector<md::DaVinciDecalBuilder::DecalDescription> const&,std::shared_ptr<geo::codec::VectorTile> const&,ggl::ResourceAccessor *)::$_0>,BOOL ()(unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = &off_1E42CFC98;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::DaVinciDecalBuilder::buildBatch(std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,unsigned long long,std::vector<md::DaVinciDecalBuilder::DecalDescription> const&,std::shared_ptr<geo::codec::VectorTile> const&,ggl::ResourceAccessor *)::$_0,std::allocator<md::DaVinciDecalBuilder::buildBatch(std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,unsigned long long,std::vector<md::DaVinciDecalBuilder::DecalDescription> const&,std::shared_ptr<geo::codec::VectorTile> const&,ggl::ResourceAccessor *)::$_0>,BOOL ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_1E42CFC98;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t std::__function::__func<md::DaVinciDecalBuilder::buildBatch(std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,unsigned long long,std::vector<md::DaVinciDecalBuilder::DecalDescription> const&,std::shared_ptr<geo::codec::VectorTile> const&,ggl::ResourceAccessor *)::$_0,std::allocator<md::DaVinciDecalBuilder::buildBatch(std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,unsigned long long,std::vector<md::DaVinciDecalBuilder::DecalDescription> const&,std::shared_ptr<geo::codec::VectorTile> const&,ggl::ResourceAccessor *)::$_0>,BOOL ()(unsigned int)>::operator()(uint64_t a1, _DWORD *a2)
{
  unsigned int v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float *v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  float *v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t result;
  int *v34;
  int v35;
  uint64_t v36;
  _WORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int8x8_t v41;
  uint8x8_t v42;
  unint64_t v43;
  uint64_t ***v44;
  uint64_t **v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  float *v49;
  float v50;
  float v51;
  float v52;
  float *v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  int v59;
  unsigned int v60;
  void **v61;
  unint64_t v62;
  float *v63;
  char *v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  char *v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  _OWORD *v76;
  float *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char **v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _BYTE *v99;
  _WORD *v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  _OWORD *v104;
  char *v105;
  uint64_t v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  _WORD *v121;
  unint64_t v122;
  uint64_t v123;
  _OWORD *v124;
  char *v125;
  unint64_t v126;
  __int128 v127;
  __int16 v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  unsigned int v142;
  unsigned int v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  __int16 v150;

  v3 = *(_DWORD *)(**(_QWORD **)(a1 + 8) + 12) + 3 * *a2;
  v4 = (float *)(**(_QWORD **)(a1 + 24)
               + 12
               * *(unsigned __int16 *)(geo::codec::VectorTile::daVinciIndices(**(geo::codec::VectorTile ***)(a1 + 16))
                                     + 2 * v3));
  v6 = *v4;
  v5 = v4[1];
  v7 = v4[2];
  v8 = *(float **)(a1 + 32);
  v140 = v8[13];
  v141 = v8[1];
  v144 = v6;
  v146 = v5;
  v138 = v8[9];
  v139 = v8[5];
  v148 = v7;
  v9 = (float)((float)(v8[12] + (float)(*v8 * v6)) + (float)(v8[4] * v5)) + (float)(v8[8] * v7);
  v133 = v8[14];
  v134 = v8[2];
  v135 = v8[10];
  v136 = v8[6];
  v10 = (float *)(**(_QWORD **)(a1 + 24)
                + 12
                * *(unsigned __int16 *)(geo::codec::VectorTile::daVinciIndices(**(geo::codec::VectorTile ***)(a1 + 16))
                                      + 2 * (v3 + 1)));
  v12 = *v10;
  v11 = v10[1];
  v13 = v10[2];
  v14 = *(float **)(a1 + 32);
  v137 = v14[1];
  v15 = v14[13];
  v16 = v14[5];
  v17 = v14[9];
  v18 = (float)((float)(v14[12] + (float)(*v14 * v12)) + (float)(v14[4] * v11)) + (float)(v14[8] * v13);
  v129 = v14[14];
  v130 = v14[2];
  v131 = v14[10];
  v132 = v14[6];
  v19 = geo::codec::VectorTile::daVinciIndices(**(geo::codec::VectorTile ***)(a1 + 16));
  v143 = v3;
  v20 = *(float **)(a1 + 32);
  v21 = (float *)(**(_QWORD **)(a1 + 24) + 12 * *(unsigned __int16 *)(v19 + 2 * (v3 + 2)));
  v23 = *v21;
  v22 = v21[1];
  v24 = v21[2];
  v25 = (float)((float)(v20[12] + (float)(*v20 * *v21)) + (float)(v20[4] * v22)) + (float)(v20[8] * v24);
  v26 = *(float **)(a1 + 40);
  if (v26[3] > fminf(v25, fminf(v18, fminf(v9, 3.4028e38))) && *v26 < fmaxf(fmaxf(fmaxf(v9, -3.4028e38), v18), v25))
  {
    v27 = (float)((float)(v140 + (float)(v141 * v144)) + (float)(v139 * v146)) + (float)(v138 * v148);
    v28 = (float)((float)(v15 + (float)(v137 * v12)) + (float)(v16 * v11)) + (float)(v17 * v13);
    v29 = (float)((float)(v20[13] + (float)(v20[1] * v23)) + (float)(v20[5] * v22)) + (float)(v20[9] * v24);
    if (v26[4] > fminf(v29, fminf(v28, fminf(v27, 3.4028e38)))
      && v26[1] < fmaxf(fmaxf(fmaxf(v27, -3.4028e38), v28), v29))
    {
      v30 = (float)((float)(v133 + (float)(v134 * v144)) + (float)(v136 * v146)) + (float)(v135 * v148);
      v31 = (float)((float)(v129 + (float)(v130 * v12)) + (float)(v132 * v11)) + (float)(v131 * v13);
      v32 = (float)((float)(v20[14] + (float)(v20[2] * v23)) + (float)(v20[6] * v22)) + (float)(v20[10] * v24);
      if (v26[5] > fminf(v32, fminf(v31, fminf(v30, 3.4028e38)))
        && v26[2] < fmaxf(fmaxf(fmaxf(v30, -3.4028e38), v31), v32))
      {
        v142 = 1;
LABEL_10:
        v36 = 0;
        while (1)
        {
          v38 = geo::codec::VectorTile::daVinciIndices(**(geo::codec::VectorTile ***)(a1 + 16));
          v39 = *(unsigned __int16 *)(v38 + 2 * (v143 + v36));
          v150 = *(_WORD *)(v38 + 2 * (v143 + v36));
          v40 = *(_QWORD *)(a1 + 56);
          v41 = *(int8x8_t *)(v40 + 8);
          if (v41)
          {
            v42 = (uint8x8_t)vcnt_s8(v41);
            v42.i16[0] = vaddlv_u8(v42);
            if (v42.u32[0] > 1uLL)
            {
              v43 = v39;
              if (*(_QWORD *)&v41 <= v39)
                v43 = v39 % *(_QWORD *)&v41;
            }
            else
            {
              v43 = (v41.i32[0] - 1) & v39;
            }
            v44 = *(uint64_t ****)(*(_QWORD *)v40 + 8 * v43);
            if (v44)
            {
              v45 = *v44;
              if (v45)
              {
                if (v42.u32[0] < 2uLL)
                {
                  v46 = *(_QWORD *)&v41 - 1;
                  while (1)
                  {
                    v48 = v45[1];
                    if (v48 == (uint64_t *)v39)
                    {
                      if (*((unsigned __int16 *)v45 + 8) == (_DWORD)v39)
                        goto LABEL_82;
                    }
                    else if (((unint64_t)v48 & v46) != v43)
                    {
                      goto LABEL_33;
                    }
                    v45 = (uint64_t **)*v45;
                    if (!v45)
                      goto LABEL_33;
                  }
                }
                do
                {
                  v47 = (unint64_t)v45[1];
                  if (v47 == v39)
                  {
                    if (*((unsigned __int16 *)v45 + 8) == (_DWORD)v39)
                      goto LABEL_82;
                  }
                  else
                  {
                    if (v47 >= *(_QWORD *)&v41)
                      v47 %= *(_QWORD *)&v41;
                    if (v47 != v43)
                      break;
                  }
                  v45 = (uint64_t **)*v45;
                }
                while (v45);
              }
            }
          }
LABEL_33:
          v49 = (float *)(**(_QWORD **)(a1 + 24) + 12 * v39);
          v50 = *v49;
          v51 = v49[1];
          v52 = v49[2];
          v53 = *(float **)(a1 + 64);
          v54 = *v53;
          v55 = v53[4];
          v147 = v53[5];
          v149 = v53[1];
          v56 = v53[12];
          v145 = v53[13];
          v58 = v53[8];
          v57 = v53[9];
          v59 = (unsigned __int16)(int)(float)(v50 * 16804.0) | ((unsigned __int16)(int)(float)(v51 * 16804.0) << 16);
          v60 = (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 8) - **(_DWORD **)(a1 + 72)) >> 3;
          *((_WORD *)std::__hash_table<std::__hash_value_type<unsigned short,unsigned short>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((float *)v40, v39, &v150)+ 9) = v60;
          v61 = *(void ***)(a1 + 72);
          v63 = (float *)v61[1];
          v62 = (unint64_t)v61[2];
          if ((unint64_t)v63 < v62)
          {
            *(_DWORD *)v63 = v59;
            v63[1] = v52;
            v64 = (char *)(v63 + 2);
            goto LABEL_57;
          }
          v65 = (float *)*v61;
          v66 = (char *)v63 - (_BYTE *)*v61;
          v67 = v66 >> 3;
          v68 = (v66 >> 3) + 1;
          if (v68 >> 61)
            goto LABEL_105;
          v69 = v62 - (_QWORD)v65;
          if (v69 >> 2 > v68)
            v68 = v69 >> 2;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
            v70 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v70 = v68;
          if (v70)
          {
            if (v70 >> 61)
              goto LABEL_106;
            v71 = operator new(8 * v70);
          }
          else
          {
            v71 = 0;
          }
          v72 = &v71[8 * v67];
          *(_DWORD *)v72 = v59;
          *((float *)v72 + 1) = v52;
          if (v63 == v65)
          {
            v74 = &v71[8 * v67];
            goto LABEL_55;
          }
          v73 = (char *)(v63 - 2) - (char *)v65;
          if (v73 >= 0x58)
          {
            v74 = &v71[8 * v67];
            if ((unint64_t)((char *)v63 - &v71[v66]) >= 0x20)
            {
              v75 = (v73 >> 3) + 1;
              v76 = &v71[8 * v67 - 16];
              v77 = v63 - 4;
              v78 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *(_OWORD *)v77;
                *(v76 - 1) = *((_OWORD *)v77 - 1);
                *v76 = v79;
                v76 -= 2;
                v77 -= 8;
                v78 -= 4;
              }
              while (v78);
              v74 = &v72[-8 * (v75 & 0x3FFFFFFFFFFFFFFCLL)];
              v63 -= 2 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_54;
            }
          }
          else
          {
            v74 = &v71[8 * v67];
          }
          do
          {
            v80 = *((_QWORD *)v63 - 1);
            v63 -= 2;
            *((_QWORD *)v74 - 1) = v80;
            v74 -= 8;
          }
          while (v63 != v65);
LABEL_54:
          v63 = (float *)*v61;
LABEL_55:
          v64 = v72 + 8;
          *v61 = v74;
          v61[1] = v72 + 8;
          v61[2] = &v71[8 * v70];
          if (v63)
            operator delete(v63);
LABEL_57:
          _S0 = (float)((float)(v56 + (float)(v54 * v50)) + (float)(v55 * v51)) + (float)(v58 * v52);
          _S1 = (float)((float)(v145 + (float)(v149 * v50)) + (float)(v147 * v51)) + (float)(v57 * v52);
          __asm
          {
            FCVT            H9, S0
            FCVT            H8, S1
          }
          v61[1] = v64;
          v89 = *(char ***)(a1 + 80);
          v91 = v89[1];
          v90 = (unint64_t)v89[2];
          if ((unint64_t)v91 < v90)
          {
            *(_WORD *)v91 = _H9;
            *((_WORD *)v91 + 1) = _H8;
            v92 = v91 + 4;
            goto LABEL_81;
          }
          v93 = *v89;
          v94 = v91 - *v89;
          v95 = v94 >> 2;
          v96 = (v94 >> 2) + 1;
          if (v96 >> 62)
            goto LABEL_105;
          v97 = v90 - (_QWORD)v93;
          if (v97 >> 1 > v96)
            v96 = v97 >> 1;
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL)
            v98 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v98 = v96;
          if (v98)
          {
            if (v98 >> 62)
              goto LABEL_106;
            v99 = operator new(4 * v98);
          }
          else
          {
            v99 = 0;
          }
          v100 = &v99[4 * v95];
          *v100 = _H9;
          v100[1] = _H8;
          if (v91 == v93)
          {
            v102 = &v99[4 * v95];
            goto LABEL_79;
          }
          v101 = v91 - 4 - v93;
          if (v101 >= 0x2C)
          {
            v102 = &v99[4 * v95];
            if ((unint64_t)(v91 - &v99[v94]) >= 0x20)
            {
              v103 = (v101 >> 2) + 1;
              v104 = &v99[4 * v95 - 16];
              v105 = v91 - 16;
              v106 = v103 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v107 = *(_OWORD *)v105;
                *(v104 - 1) = *((_OWORD *)v105 - 1);
                *v104 = v107;
                v104 -= 2;
                v105 -= 32;
                v106 -= 8;
              }
              while (v106);
              v102 = (char *)&v100[-2 * (v103 & 0x7FFFFFFFFFFFFFF8)];
              v91 -= 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
              if (v103 == (v103 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_78;
            }
          }
          else
          {
            v102 = &v99[4 * v95];
          }
          do
          {
            v108 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *((_DWORD *)v102 - 1) = v108;
            v102 -= 4;
          }
          while (v91 != v93);
LABEL_78:
          v91 = *v89;
LABEL_79:
          v92 = (char *)(v100 + 2);
          *v89 = v102;
          v89[1] = (char *)(v100 + 2);
          v89[2] = &v99[4 * v98];
          if (v91)
            operator delete(v91);
LABEL_81:
          v89[1] = v92;
          v40 = *(_QWORD *)(a1 + 56);
LABEL_82:
          v109 = *(_QWORD *)(a1 + 88);
          v110 = std::__hash_table<std::__hash_value_type<unsigned short,unsigned short>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((float *)v40, v39, &v150);
          v111 = v110;
          v113 = *(char **)(v109 + 8);
          v112 = *(_QWORD *)(v109 + 16);
          if ((unint64_t)v113 < v112)
          {
            *(_WORD *)v113 = *((_WORD *)v110 + 9);
            v37 = v113 + 2;
          }
          else
          {
            v114 = *(char **)v109;
            v115 = (uint64_t)&v113[-*(_QWORD *)v109];
            if (v115 <= -3)
LABEL_105:
              abort();
            v116 = v115 >> 1;
            v117 = v112 - (_QWORD)v114;
            if (v117 <= (v115 >> 1) + 1)
              v118 = v116 + 1;
            else
              v118 = v117;
            if (v117 >= 0x7FFFFFFFFFFFFFFELL)
              v119 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v119 = v118;
            if (v119)
            {
              if (v119 < 0)
LABEL_106:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v120 = operator new(2 * v119);
            }
            else
            {
              v120 = 0;
            }
            v121 = &v120[2 * v116];
            *v121 = *((_WORD *)v111 + 9);
            v37 = v121 + 1;
            if (v113 != v114)
            {
              v122 = v113 - 2 - v114;
              if (v122 < 0x1E)
                goto LABEL_109;
              if ((unint64_t)(v113 - &v120[v115 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
                goto LABEL_109;
              v123 = (v122 >> 1) + 1;
              v124 = &v120[2 * v116 - 16];
              v125 = v113 - 16;
              v126 = v123 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v127 = *(_OWORD *)v125;
                *(v124 - 1) = *((_OWORD *)v125 - 1);
                *v124 = v127;
                v124 -= 2;
                v125 -= 32;
                v126 -= 16;
              }
              while (v126);
              v121 -= v123 & 0xFFFFFFFFFFFFFFF0;
              v113 -= 2 * (v123 & 0xFFFFFFFFFFFFFFF0);
              if (v123 != (v123 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_109:
                do
                {
                  v128 = *((_WORD *)v113 - 1);
                  v113 -= 2;
                  *--v121 = v128;
                }
                while (v113 != v114);
              }
            }
            *(_QWORD *)v109 = v121;
            *(_QWORD *)(v109 + 8) = v37;
            *(_QWORD *)(v109 + 16) = &v120[2 * v119];
            if (v114)
              operator delete(v114);
          }
          *(_QWORD *)(v109 + 8) = v37;
          if (++v36 == 3)
          {
            v34 = *(int **)(a1 + 48);
            v35 = *v34;
            result = v142;
            goto LABEL_104;
          }
        }
      }
    }
  }
  result = 0;
  v34 = *(int **)(a1 + 48);
  v35 = *v34;
  if (!*v34)
  {
    v142 = 0;
    goto LABEL_10;
  }
LABEL_104:
  *v34 = v35 + result;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned short,unsigned short>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(float *a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v40;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  *((_WORD *)v10 + 9) = 0;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = ((_DWORD)v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v40 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v19 = operator new(8 * prime);
    v20 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v19;
    if (v20)
      operator delete(v20);
    v21 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    v23 = (uint64_t *)(a1 + 4);
    v22 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v22)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v24 = v22[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v23;
      for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v22 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
        {
          *v22 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v29);
          **(_QWORD **)(*(_QWORD *)a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v22;
          v22 = i;
          v26 = v28;
        }
      }
      goto LABEL_58;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v23;
    v33 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_58;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v22;
          goto LABEL_63;
        }
        *v22 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*(_QWORD *)a1 + v34);
        **(_QWORD **)(*(_QWORD *)a1 + v34) = v33;
        v33 = v22;
      }
      v35 = v24;
LABEL_63:
      v22 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_58;
    }
  }
LABEL_72:
  v36 = *(_QWORD **)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v36[v3] = a1 + 4;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_19FB68B9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedPositionCompressedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E06B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedPositionCompressedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E06B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedPositionCompressedVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelImageLoader>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBEF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelImageLoader>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBEF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelImageLoader>>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void md::LabelImageLoader::~LabelImageLoader(md::LabelImageLoader *this)
{
  std::mutex *v2;
  uint64_t sig;
  std::mutex *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = (std::mutex *)*((_QWORD *)this + 15);
  if (v2)
  {
    std::mutex::lock(*((std::mutex **)this + 15));
    sig = v2[1].__m_.__sig;
    std::mutex::unlock(v2);
    if (sig)
    {
      v4 = (std::mutex *)*((_QWORD *)this + 15);
      std::mutex::lock(v4);
      v4[1].__m_.__sig = 0;
      std::mutex::unlock(v4);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (_QWORD *)*((_QWORD *)this + 7);
  while (v8)
  {
    v10 = v8;
    v8 = (_QWORD *)*v8;
    v11 = (std::__shared_weak_count *)v10[5];
    if (v11)
      std::__shared_weak_count::__release_weak(v11);
    v12 = (std::__shared_weak_count *)v10[3];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v10, 64);
  }
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), v9, 8 * *((_QWORD *)this + 5));
  std::__list_imp<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,geo::StdAllocator<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,mdm::Allocator>>::clear((uint64_t *)this);
}

void sub_19FB68D88(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_QWORD **)(v1 + 56);
  while (v6)
  {
    v8 = v6;
    v6 = (_QWORD *)*v6;
    v9 = (std::__shared_weak_count *)v8[5];
    if (v9)
      std::__shared_weak_count::__release_weak(v9);
    v10 = (std::__shared_weak_count *)v8[3];
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v1 + 64) + 40))(*(_QWORD *)(v1 + 64), v8, 64);
  }
  v7 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v7)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 48) + 40))(*(_QWORD *)(v1 + 48), v7, 8 * *(_QWORD *)(v1 + 40));
  std::__list_imp<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,geo::StdAllocator<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,mdm::Allocator>>::clear((uint64_t *)v1);
  _Unwind_Resume(a1);
}

_QWORD *md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::~$_0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

_QWORD *std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *a1 = &off_1E42CD4A8;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[5];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *a1 = &off_1E42CD4A8;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[5];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_1E42CD4A8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(result + 56);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(result + 48);
  *(_QWORD *)(a2 + 56) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *(_QWORD *)(result + 72);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(result + 64);
  *(_QWORD *)(a2 + 72) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::destroy[abi:nn180100]((_QWORD *)(a1 + 8));
}

_QWORD *std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_1E42D9A28;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_1E42D9A28;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E42D9A28;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D99E0;
  return result;
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D9A70;
  return result;
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D9A70;
}

void std::__function::__alloc_func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::destroy[abi:nn180100](_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

BOOL md::LabelShieldEntry::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 1;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 1;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 1;
  }
LABEL_16:
  if (*((_QWORD *)a1 + 4) != *((_QWORD *)v6 + 4) || *((_DWORD *)a1 + 10) != *((_DWORD *)v6 + 10))
    return 1;
  return a1[44] != v6[44];
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 40);
      if (v3)
        std::__shared_weak_count::__release_weak(v3);
      v4 = *(std::__shared_weak_count **)(v2 + 24);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 64);
  }
  return a1;
}

void **md::LabelImageKey::setDebugInfo(void **result, uint64_t a2)
{
  void **v3;
  void **v4;
  size_t v5;
  __int128 v6;
  void *v7;
  size_t v8;
  char v9;
  __int128 v10;
  void *v11;
  size_t v12;

  *((_DWORD *)result + 52) = *(_DWORD *)a2;
  if (result + 26 != (void **)a2)
  {
    v3 = result;
    v4 = result + 27;
    v5 = *(unsigned __int8 *)(a2 + 31);
    if (*((char *)v3 + 239) < 0)
    {
      if ((v5 & 0x80u) == 0)
        v7 = (void *)(a2 + 8);
      else
        v7 = *(void **)(a2 + 8);
      if ((v5 & 0x80u) == 0)
        v8 = v5;
      else
        v8 = *(_QWORD *)(a2 + 16);
      std::string::__assign_no_alias<false>(v4, v7, v8);
    }
    else if ((v5 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 8);
      v4[2] = *(void **)(a2 + 24);
      *(_OWORD *)v4 = v6;
    }
    result = v3 + 30;
    v9 = *(_BYTE *)(a2 + 55);
    if (*((char *)v3 + 263) < 0)
    {
      if (v9 >= 0)
        v11 = (void *)(a2 + 32);
      else
        v11 = *(void **)(a2 + 32);
      if (v9 >= 0)
        v12 = *(unsigned __int8 *)(a2 + 55);
      else
        v12 = *(_QWORD *)(a2 + 40);
      return std::string::__assign_no_alias<false>(result, v11, v12);
    }
    else if ((*(_BYTE *)(a2 + 55) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
    }
    else
    {
      v10 = *(_OWORD *)(a2 + 32);
      v3[32] = *(void **)(a2 + 48);
      *(_OWORD *)result = v10;
    }
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<md::ShieldLabelIcon>::__shared_ptr_emplace[abi:nn180100]<std::shared_ptr<md::LabelImageKey const> const&,std::shared_ptr<grl::IconImage> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const&,std::allocator<md::ShieldLabelIcon>,0>(uint64_t a1, _QWORD *a2, uint64_t a3, std::__shared_weak_count *a4, __int128 *a5)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD **v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E42DB518;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  *(_QWORD *)(a1 + 24) = &off_1E42AF880;
  *(_QWORD *)(a1 + 32) = &off_1E42B5430;
  *(_QWORD *)(a1 + 40) = 0;
  v9 = a2[1];
  *(_QWORD *)(a1 + 56) = *a2;
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 176) = a3;
  *(_OWORD *)(a1 + 72) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 88) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 1065353216;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 24) = off_1E4290C80;
  *(_QWORD *)(a1 + 184) = a4;
  if (a4)
  {
    v12 = (unint64_t *)&a4->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (_QWORD **)(a1 + 192);
  *(_QWORD *)(a1 + 216) = *((_QWORD *)a5 + 3);
  if (*((char *)a5 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v14, *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v15 = *a5;
    *(_QWORD *)(a1 + 208) = *((_QWORD *)a5 + 2);
    *(_OWORD *)v14 = v15;
  }
  if (a4)
  {
    v16 = (unint64_t *)&a4->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  return a1;
}

void sub_19FB699FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  md::LabelIcon *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v3);
  md::LabelIcon::~LabelIcon(v4);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void md::LabelIcon::~LabelIcon(md::LabelIcon *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E42AF880;
  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    v3 = *((_QWORD *)this + 15);
    v4 = (void *)*((_QWORD *)this + 14);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 14);
    }
    *((_QWORD *)this + 15) = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *((_QWORD *)this + 1) = &off_1E42B5430;

}

{
  md::LabelIcon::~LabelIcon(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::LabelIcon::isIconRTL(md::LabelIcon *this)
{
  return 0;
}

uint64_t md::LabelIcon::text(md::LabelIcon *this)
{
  return 0;
}

void md::LabelIcon::labelTextColor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void std::__shared_ptr_emplace<md::ShieldLabelIcon>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ShieldLabelIcon>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB518;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::ShieldLabelIcon>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::PointLabelIcon>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::PointLabelIcon>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::PointLabelIcon>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::HighlightHelper::debugTileToString(std::string *this, const QuadTile *a2)
{
  std::string *v4;
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;

  std::to_string(&v17, a2->_xIdx);
  v4 = std::string::append(&v17, ".", 1uLL);
  v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v16, a2->_yIdx);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v16;
  else
    v6 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  else
    size = v16.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v18, (const std::string::value_type *)v6, size);
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v19, ".", 1uLL);
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v15, a2->_level);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v15;
  else
    v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    v13 = v15.__r_.__value_.__l.__size_;
  v14 = std::string::append(&v20, (const std::string::value_type *)v12, v13);
  *this = *v14;
  v14->__r_.__value_.__r.__words[0] = 0;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_22;
    }
  }
  else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v19.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v16.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_25:
    operator delete(v17.__r_.__value_.__l.__data_);
    return;
  }
LABEL_24:
  operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_25;
}

void sub_19FB69DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 41) < 0)
  {
    operator delete(*(void **)(v30 - 64));
    if ((*(char *)(v30 - 73) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v30 - 73) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v30 - 96));
  if ((a18 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a30 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(__p);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a24 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a25);
  if ((a24 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a19);
  _Unwind_Resume(exception_object);
}

void md::HighlightHelper::debugTileToString(std::string *a1, uint64_t a2)
{
  std::string *v4;
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;

  std::to_string(&v17, (*(_QWORD *)a2 >> 14) & 0x3FFFFFF);
  v4 = std::string::append(&v17, ".", 1uLL);
  v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v16, *(_DWORD *)(a2 + 5) & 0x3FFFFFF);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v16;
  else
    v6 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  else
    size = v16.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v18, (const std::string::value_type *)v6, size);
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v19, ".", 1uLL);
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v15, (*(_DWORD *)a2 >> 8) & 0x3F);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v15;
  else
    v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    v13 = v15.__r_.__value_.__l.__size_;
  v14 = std::string::append(&v20, (const std::string::value_type *)v12, v13);
  *a1 = *v14;
  v14->__r_.__value_.__r.__words[0] = 0;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_22;
    }
  }
  else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v19.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v16.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_25:
    operator delete(v17.__r_.__value_.__l.__data_);
    return;
  }
LABEL_24:
  operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_25;
}

void sub_19FB6A028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 41) < 0)
  {
    operator delete(*(void **)(v30 - 64));
    if ((*(char *)(v30 - 73) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v30 - 73) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v30 - 96));
  if ((a18 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a30 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(__p);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a24 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a25);
  if ((a24 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a19);
  _Unwind_Resume(exception_object);
}

void md::HighlightHelper::mercatorToScreenPoints(uint64_t a1, double **a2, uint64_t a3)
{
  float32x2_t *v6;
  float32x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  float32x2_t v21;
  double *v22;
  double *v23;
  float32x2_t *v24;
  double v25;
  float64x2_t *v26;
  double v27;
  float64x2_t v28;
  double v29;
  double v30;
  long double v31;
  long double v32;
  double v33;
  long double v34;
  double v35;
  __double2 v36;
  double v37;
  __double2 v38;
  double v39;
  double v40;
  double v41;
  float32x2_t v42;
  unint64_t v43;
  float32x2_t *v44;
  float32x2_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  float32x2_t *v52;
  unint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  float32x2_t *v56;
  uint64_t v57;
  __int128 v58;
  float32x2_t v59;

  v6 = *(float32x2_t **)a3;
  v7 = *(float32x2_t **)(a3 + 8);
  v8 = (uint64_t)v7 - *(_QWORD *)a3;
  v9 = v8 >> 3;
  v10 = (v8 >> 3) + (((char *)a2[1] - (char *)*a2) >> 4);
  if (v10 <= (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)a3) >> 3)
    goto LABEL_13;
  if (v10 >> 61)
LABEL_43:
    abort();
  v11 = 8 * v10;
  v12 = (char *)operator new(8 * v10);
  v13 = &v12[8 * v9];
  v14 = v13;
  if (v7 != v6)
  {
    v15 = (char *)v7 - (char *)v6 - 8;
    if (v15 < 0x58)
    {
      v14 = &v12[8 * v9];
      do
      {
LABEL_10:
        v21 = v7[-1];
        --v7;
        *((float32x2_t *)v14 - 1) = v21;
        v14 -= 8;
      }
      while (v7 != v6);
      goto LABEL_11;
    }
    v14 = &v12[8 * v9];
    if ((unint64_t)((char *)v7 - v8 - v12) < 0x20)
      goto LABEL_10;
    v16 = (v15 >> 3) + 1;
    v17 = &v12[8 * v9 - 16];
    v18 = (__int128 *)&v7[-2];
    v19 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v20 = *v18;
      *((_OWORD *)v17 - 1) = *(v18 - 1);
      *(_OWORD *)v17 = v20;
      v17 -= 32;
      v18 -= 2;
      v19 -= 4;
    }
    while (v19);
    v14 = &v13[-8 * (v16 & 0x3FFFFFFFFFFFFFFCLL)];
    v7 -= v16 & 0x3FFFFFFFFFFFFFFCLL;
    if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_10;
  }
LABEL_11:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v13;
  *(_QWORD *)(a3 + 16) = &v12[v11];
  if (v6)
    operator delete(v6);
LABEL_13:
  v22 = *a2;
  v23 = a2[1];
  if (*a2 != v23)
  {
    do
    {
      v25 = *v22;
      if (*(_BYTE *)(a1 + 16))
      {
        v26 = *(float64x2_t **)(a1 + 8);
        v27 = v22[1];
        v28 = vmlaq_n_f64(vmlaq_n_f64(v26[6], *v26, v25), v26[2], v27);
        v29 = v26[1].f64[1] * v25;
        v30 = v26[3].f64[1] * v27;
      }
      else
      {
        v31 = v25 * 6.28318531;
        v32 = exp(v22[1] * 6.28318531 + -3.14159265);
        v33 = atan(v32) * 2.0 + -1.57079633;
        v34 = fmod(v31, 6.28318531);
        v35 = fmod(v34 + 6.28318531, 6.28318531) + -3.14159265;
        v36 = __sincos_stret(v33);
        v37 = 6378137.0 / sqrt(v36.__sinval * v36.__sinval * -0.00669437999 + 1.0);
        v38 = __sincos_stret(v35);
        v39 = v37 * v36.__cosval * v38.__cosval;
        v40 = v37 * v36.__cosval * v38.__sinval;
        v41 = v36.__sinval * 0.99330562 * v37;
        v26 = *(float64x2_t **)(a1 + 8);
        v28 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v26[6], *v26, v39), v26[2], v40), v26[4], v41);
        v30 = v39 * v26[1].f64[1] + v26[3].f64[1] * v40;
        v29 = v26[5].f64[1] * v41;
      }
      v42 = vcvt_f32_f64(vmulq_n_f64(v28, 1.0 / (v30 + v29 + v26[7].f64[1])));
      v44 = *(float32x2_t **)(a3 + 8);
      v43 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v44 < v43)
      {
        *v44 = v42;
        v24 = v44 + 1;
      }
      else
      {
        v45 = *(float32x2_t **)a3;
        v46 = (uint64_t)v44 - *(_QWORD *)a3;
        v47 = v46 >> 3;
        v48 = (v46 >> 3) + 1;
        if (v48 >> 61)
          goto LABEL_43;
        v49 = v43 - (_QWORD)v45;
        if (v49 >> 2 > v48)
          v48 = v49 >> 2;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          if (v50 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v51 = operator new(8 * v50);
        }
        else
        {
          v51 = 0;
        }
        v52 = (float32x2_t *)&v51[8 * v47];
        *v52 = v42;
        v24 = v52 + 1;
        if (v44 == v45)
        {
          v45 = v44;
        }
        else
        {
          v53 = (char *)&v44[-1] - (char *)v45;
          if (v53 < 0x58)
            goto LABEL_47;
          if ((unint64_t)((char *)v44 - &v51[v46]) < 0x20)
            goto LABEL_47;
          v54 = (v53 >> 3) + 1;
          v55 = &v51[8 * v47 - 16];
          v56 = v44 - 2;
          v57 = v54 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v58 = *(_OWORD *)v56->f32;
            *(v55 - 1) = *(_OWORD *)v56[-2].f32;
            *v55 = v58;
            v55 -= 2;
            v56 -= 4;
            v57 -= 4;
          }
          while (v57);
          v52 -= v54 & 0x3FFFFFFFFFFFFFFCLL;
          v44 -= v54 & 0x3FFFFFFFFFFFFFFCLL;
          if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_47:
            do
            {
              v59 = v44[-1];
              --v44;
              v52[-1] = v59;
              --v52;
            }
            while (v44 != v45);
            v45 = *(float32x2_t **)a3;
          }
        }
        *(_QWORD *)a3 = v52;
        *(_QWORD *)(a3 + 8) = v24;
        *(_QWORD *)(a3 + 16) = &v51[8 * v50];
        if (v45)
          operator delete(v45);
      }
      *(_QWORD *)(a3 + 8) = v24;
      v22 += 2;
    }
    while (v22 != v23);
  }
}

void md::HighlightHelper::tileToMercatorPoints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7;
  int v8;
  int v9;
  float64x2_t *v10;
  float64x2_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  double v19;
  int64x2_t v20;
  float64x2_t *v21;
  float64x2_t *v22;
  float64x2_t v23;
  unint64_t v24;
  float64x2_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  float64x2_t *v31;
  float64x2_t v32;
  float64x2_t v33;
  int v34;
  float64x2_t v35;

  v7 = *(_BYTE *)(a1 + 169);
  v8 = *(_DWORD *)(a1 + 172);
  v9 = *(_DWORD *)(a1 + 176);
  v10 = *(float64x2_t **)a4;
  v11 = *(float64x2_t **)(a4 + 8);
  v12 = ((uint64_t)v11 - *(_QWORD *)a4) >> 4;
  v13 = v12 + a3;
  if (v12 + a3 > (unint64_t)((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)a4) >> 4))
  {
    v34 = *(_DWORD *)(a1 + 176);
    if (v13 >> 60)
LABEL_29:
      abort();
    v14 = 16 * v13;
    v15 = (char *)operator new(16 * v13);
    v16 = &v15[16 * v12];
    if (v11 != v10)
    {
      v17 = &v15[16 * v12];
      do
      {
        v16 = v17 - 16;
        *((float64x2_t *)v17 - 1) = v11[-1];
        --v11;
        v17 -= 16;
      }
      while (v11 != v10);
    }
    *(_QWORD *)a4 = v16;
    *(_QWORD *)(a4 + 8) = &v15[16 * v12];
    *(_QWORD *)(a4 + 16) = &v15[v14];
    v9 = v34;
    if (v10)
    {
      operator delete(v10);
      v9 = v34;
    }
  }
  if (a3)
  {
    v18 = 0;
    v19 = 1.0 / (double)(1 << v7);
    v20.i64[0] = v9;
    v20.i64[1] = (1 << v7) + ~v8;
    v21 = *(float64x2_t **)(a4 + 8);
    v33 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(fmax(v19, 0.0)), 0);
    v35 = vmulq_n_f64(vcvtq_f64_s64(v20), v19);
    do
    {
      v23 = vmlaq_f64(v35, vcvtq_f64_f32(*(float32x2_t *)(a2 + 8 * v18)), v33);
      v24 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v21 < v24)
      {
        *v21 = v23;
        v22 = v21 + 1;
      }
      else
      {
        v25 = *(float64x2_t **)a4;
        v26 = ((uint64_t)v21 - *(_QWORD *)a4) >> 4;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 60)
          goto LABEL_29;
        v28 = v24 - (_QWORD)v25;
        if (v28 >> 3 > v27)
          v27 = v28 >> 3;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
          v29 = 0xFFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v32 = v23;
          if (v29 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v30 = (char *)operator new(16 * v29);
          v23 = v32;
        }
        else
        {
          v30 = 0;
        }
        v31 = (float64x2_t *)&v30[16 * v26];
        *v31 = v23;
        v22 = v31 + 1;
        if (v21 != v25)
        {
          do
          {
            v31[-1] = v21[-1];
            --v31;
            --v21;
          }
          while (v21 != v25);
          v21 = *(float64x2_t **)a4;
        }
        *(_QWORD *)a4 = v31;
        *(_QWORD *)(a4 + 8) = v22;
        *(_QWORD *)(a4 + 16) = &v30[16 * v29];
        if (v21)
          operator delete(v21);
      }
      *(_QWORD *)(a4 + 8) = v22;
      ++v18;
      v21 = v22;
    }
    while (v18 != a3);
  }
}

uint64_t md::HighlightHelper::hitTest(float *a1, float *a2, float *a3, double a4, double a5, float a6)
{
  float32x4_t v6;
  uint64_t v7;
  float v8;
  uint64_t v10;
  float32x2_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t *v19;
  float64x2_t v20;
  unint64_t v26;
  float32x4_t v27;
  const float *i32;
  int32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  float32x2_t *v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float v51;
  float32x2_t v52;
  float32x4x2_t v53;

  if (a1 == a2)
    return 0;
  v7 = (char *)a2 - (char *)a1;
  if ((char *)a2 - (char *)a1 == 8)
  {
    v8 = (float)((float)(*(float *)&a4 - *a1) * (float)(*(float *)&a4 - *a1))
       + (float)((float)(*(float *)&a5 - a1[1]) * (float)(*(float *)&a5 - a1[1]));
    if (v8 >= a6)
      return 0;
    goto LABEL_11;
  }
  if ((unint64_t)v7 < 9)
  {
    v8 = 3.4028e38;
    goto LABEL_10;
  }
  v10 = v7 >> 3;
  v11 = *(float32x2_t *)a1;
  v12 = v10 - 1;
  if ((unint64_t)(v10 - 1) >= 8)
  {
    v14 = v12 & 0xFFFFFFFFFFFFFFF8;
    v6.i64[1] = *(_QWORD *)a1;
    v15 = (float32x4_t)vdupq_lane_s32((int32x2_t)v11, 0);
    v16 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    v17 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
    v18 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v19 = (int32x4_t *)(a1 + 10);
    v20 = (float64x2_t)vdupq_n_s64(0x3CD203AF9EE75616uLL);
    __asm { FMOV            V16.4S, #1.0 }
    v26 = v12 & 0xFFFFFFFFFFFFFFF8;
    v27 = v18;
    do
    {
      i32 = (const float *)v19[-2].i32;
      v53 = vld2q_f32(i32);
      v30 = *v19;
      v29 = v19[1];
      v19 += 4;
      v31 = (float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v53.val[0], 0xCuLL);
      v15 = (float32x4_t)vuzp1q_s32(v30, v29);
      v32 = (float32x4_t)vextq_s8((int8x16_t)v6, (int8x16_t)v53.val[1], 0xCuLL);
      v6 = (float32x4_t)vuzp2q_s32(v30, v29);
      v33 = (float32x4_t)vextq_s8((int8x16_t)v53.val[0], (int8x16_t)v15, 0xCuLL);
      v34 = (float32x4_t)vextq_s8((int8x16_t)v53.val[1], (int8x16_t)v6, 0xCuLL);
      v35 = vsubq_f32(v53.val[0], v31);
      v36 = vsubq_f32(v15, v33);
      v53.val[0] = vsubq_f32(v53.val[1], v32);
      v53.val[1] = vsubq_f32(v6, v34);
      v37 = vmlaq_f32(vmulq_f32(v35, v35), v53.val[0], v53.val[0]);
      v38 = vmlaq_f32(vmulq_f32(v36, v36), v53.val[1], v53.val[1]);
      v39 = (float32x4_t)vbicq_s8((int8x16_t)vminnmq_f32(vmaxnmq_f32(vdivq_f32(vmlaq_f32(vmulq_f32(vsubq_f32(v16, v31), v35), v53.val[0], vsubq_f32(v17, v32)), v37), (float32x4_t)0), _Q16), (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v20, vcvtq_f64_f32(*(float32x2_t *)v37.f32)), (int32x4_t)vcgeq_f64(v20, vcvt_hight_f64_f32(v37))));
      v40 = (float32x4_t)vbicq_s8((int8x16_t)vminnmq_f32(vmaxnmq_f32(vdivq_f32(vmlaq_f32(vmulq_f32(vsubq_f32(v16, v33), v36), v53.val[1], vsubq_f32(v17, v34)), v38), (float32x4_t)0), _Q16), (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v20, vcvtq_f64_f32(*(float32x2_t *)v38.f32)), (int32x4_t)vcgeq_f64(v20, vcvt_hight_f64_f32(v38))));
      v41 = vsubq_f32(v16, vmlaq_f32(v31, v35, v39));
      v42 = vmlaq_f32(v32, v53.val[0], v39);
      v43 = vmlaq_f32(v34, v53.val[1], v40);
      v53.val[0] = vsubq_f32(v16, vmlaq_f32(v33, v36, v40));
      v53.val[1] = vsubq_f32(v17, v42);
      v44 = vsubq_f32(v17, v43);
      v18 = vminnmq_f32(vmlaq_f32(vmulq_f32(v41, v41), v53.val[1], v53.val[1]), v18);
      v27 = vminnmq_f32(vmlaq_f32(vmulq_f32(v53.val[0], v53.val[0]), v44, v44), v27);
      v26 -= 8;
    }
    while (v26);
    v8 = vminnmvq_f32(vminnmq_f32(v18, v27));
    if (v12 == v14)
      goto LABEL_10;
    v13 = v14 | 1;
    v11 = (float32x2_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
  }
  else
  {
    v8 = 3.4028e38;
    v13 = 1;
  }
  HIDWORD(a4) = LODWORD(a5);
  v45 = v10 - v13;
  v46 = (float32x2_t *)&a1[2 * v13];
  do
  {
    v48 = *v46;
    v49 = vsub_f32(*v46, v11);
    v50 = vmul_f32(v49, v49);
    v51 = 0.0;
    if (vaddv_f32(v50) > 1.0e-15)
    {
      v52 = vmul_f32(vsub_f32(*(float32x2_t *)&a4, v11), v49);
      v51 = fminf(fmaxf(vdiv_f32(vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v52, 1), v52), vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v50, 1), v50)).f32[0], 0.0), 1.0);
    }
    v47 = vsub_f32(*(float32x2_t *)&a4, vmla_n_f32(v11, v49, v51));
    v8 = fminf(vaddv_f32(vmul_f32(v47, v47)), v8);
    ++v46;
    v11 = v48;
    --v45;
  }
  while (v45);
LABEL_10:
  if (v8 >= a6)
    return 0;
LABEL_11:
  *a3 = v8;
  return 1;
}

id md::HighlightHelper::debugAttributesToString(md::HighlightHelper *this, const gss::FeatureAttributeSet *a2)
{
  void **v2;
  void *v3;
  void *__p[2];
  char v6;

  gss::attributesToString((uint64_t *)this, 0, 0, 0x1000uLL, __p);
  if (v6 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_19FB6A9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id md::HighlightHelper::debugAttributesToString(gss::Allocator *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  int *v19;
  int v20;
  void **v21;
  void *v22;
  void *__p[2];
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(unsigned __int8 *)(*(_QWORD *)a1 + 33);
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v3 = gss::Allocator::instance(a1);
  v29 = v3;
  if (v2)
  {
    v4 = 8 * v2;
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v4, 4);
    v6 = 0;
    v26 = v5;
    v28 = v5 + v4;
    do
    {
      if (v5 + v6)
      {
        v7 = v5 + v6;
        *(_DWORD *)v7 = 0;
        *(_WORD *)(v7 + 4) = 0;
      }
      v6 += 8;
    }
    while (v4 != v6);
    v27 = v5 + v4;
  }
  else
  {
    v5 = 0;
  }
  v8 = *(unsigned __int8 *)(*(_QWORD *)a1 + 33);
  if (*(_BYTE *)(*(_QWORD *)a1 + 33))
  {
    v9 = **(_QWORD **)a1;
    if ((_DWORD)v8 == 1)
    {
      v10 = 0;
    }
    else
    {
      v10 = v8 & 0xFE;
      v11 = v5 + 8;
      v12 = (int *)(v9 + 8);
      v13 = v10;
      do
      {
        v14 = *v12;
        *(_DWORD *)(v11 - 8) = *(v12 - 2);
        *(_DWORD *)v11 = v14;
        v15 = v12[1];
        *(_WORD *)(v11 - 4) = *(v12 - 1);
        *(_WORD *)(v11 + 4) = v15;
        v11 += 16;
        v12 += 4;
        v13 -= 2;
      }
      while (v13);
      if (v10 == v8)
        goto LABEL_16;
    }
    v16 = v8 - v10;
    v17 = (8 * v10) | 4;
    v18 = (_WORD *)(v5 + v17);
    v19 = (int *)(v9 + v17);
    do
    {
      *((_DWORD *)v18 - 1) = *(v19 - 1);
      v20 = *v19;
      v19 += 2;
      *v18 = v20;
      v18 += 4;
      --v16;
    }
    while (v16);
  }
LABEL_16:
  gss::attributesToString(&v26, 0, 0, 0x1000uLL, __p);
  if (v25 >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if (v25 < 0)
    operator delete(__p[0]);
  if (v26)
  {
    v27 = v26;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 40))(v29, v26, v28 - v26);
  }
  return v22;
}

void sub_19FB6AB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v20;

  if (a15 < 0)
  {
    operator delete(__p);
    v20 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v20 = a16;
    if (!a16)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a19 + 40))(a19, v20, a18 - v20);
  _Unwind_Resume(exception_object);
}

id md::HighlightHelper::debugClientAttributesToString(uint64_t a1)
{
  uint64_t **v1;
  uint64_t v2;
  void **v3;
  void *v4;
  uint64_t v6;
  unsigned __int16 v7;
  char v8;
  void *__p[2];
  char v10;

  if (a1)
  {
    gss::StylesheetQuery<gss::PropertyID>::debugClientAttributes(&v6, a1);
    v1 = gss::attributesToString((unsigned __int16 *)&v6, 0, 0, 0x1000uLL, __p);
    if (!v8 && v6)
    {
      v2 = gss::Allocator::instance((gss::Allocator *)v1);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, v6, v7);
    }
    if (v10 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

void sub_19FB6AC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19FB6AC94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va);
  _Unwind_Resume(a1);
}

void md::HighlightHelper::appendLinesUsingPrefix(md::HighlightHelper *this, NSString *a2, NSString *a3, NSMutableString *a4)
{
  md::HighlightHelper *v6;
  NSString *v7;
  void *v8;
  void *v9;
  int v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = this;
  v7 = a3;
  -[NSString componentsSeparatedByString:](a2, "componentsSeparatedByString:", CFSTR("\n"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "lastObject");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isEqualToString:", &stru_1E4315B30);

  if (v10)
  {
    objc_msgSend(v8, "subarrayWithRange:", 0, objc_msgSend(v8, "count") - 1);
    v11 = objc_claimAutoreleasedReturnValue();

    v8 = (void *)v11;
  }
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v12 = v8;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v17;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v17 != v14)
          objc_enumerationMutation(v12);
        -[NSString appendFormat:](v7, "appendFormat:", CFSTR("%@%@\n"), v6, *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v15++), (_QWORD)v16);
      }
      while (v13 != v15);
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v13);
  }

}

void sub_19FB6AE34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t md::HighlightHelper::to_string(md::HighlightHelper *this, const QuadTile *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  const void **v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  md::HighlightHelper *v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  unint64_t v24;
  void *__p[2];
  __int128 v26;
  int v27;
  uint64_t v28[19];
  char v29;

  v3 = MEMORY[0x1E0DE4FE0];
  v4 = MEMORY[0x1E0DE4FE0] + 64;
  v5 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v28[0] = MEMORY[0x1E0DE4FE0] + 64;
  v20 = v6;
  *(uint64_t *)((char *)&v20 + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v20 + *(_QWORD *)(v20 - 24));
  std::ios_base::init(v8, &v21);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v20 = v3 + 24;
  v28[0] = v4;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x1E0DE4FB8];
  v21 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v26 = 0u;
  v27 = 16;
  v10 = (_QWORD *)std::ostream::operator<<();
  v29 = 46;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)&v29, 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  v29 = 46;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)&v29, 1);
  std::ostream::operator<<();
  if ((v27 & 0x10) != 0)
  {
    v13 = *((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1) < v24)
    {
      *((_QWORD *)&v26 + 1) = v24;
      v13 = v24;
    }
    v14 = (const void **)&v23;
  }
  else
  {
    if ((v27 & 8) == 0)
    {
      v12 = 0;
      *((_BYTE *)this + 23) = 0;
      goto LABEL_16;
    }
    v14 = (const void **)v22;
    v13 = v22[2];
  }
  v15 = *v14;
  v12 = v13 - (_QWORD)*v14;
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v12 >= 0x17)
  {
    v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v16 = v12 | 7;
    v17 = v16 + 1;
    v18 = (md::HighlightHelper *)operator new(v16 + 1);
    *((_QWORD *)this + 1) = v12;
    *((_QWORD *)this + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)this = v18;
    this = v18;
    goto LABEL_15;
  }
  *((_BYTE *)this + 23) = v12;
  if (v12)
LABEL_15:
    memmove(this, v15, v12);
LABEL_16:
  *((_BYTE *)this + v12) = 0;
  v20 = *v5;
  *(uint64_t *)((char *)&v20 + *(_QWORD *)(v20 - 24)) = v5[3];
  v21 = v9 + 16;
  if (SBYTE7(v26) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v28);
}

void sub_19FB6B0A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

void sub_19FB6B0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::DaVinciElevationRasterLayerDataSource::~DaVinciElevationRasterLayerDataSource(md::DaVinciElevationRasterLayerDataSource *this)
{
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::DaVinciElevationRaster>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC938;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::DaVinciElevationRaster>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC938;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::DaVinciElevationRaster>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::StandardLabeler::debugHighlightFeatureMarker(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v8[2];
  _DWORD v9[4];
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 296);
    v11 = *(_QWORD *)(v2 + 288);
    v12 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
  }
  else
  {
    v3 = 0;
    v11 = 0;
    v12 = 0;
  }
  v8[1] = 0;
  v9[0] = 0;
  v8[0] = 0;
  v9[3] = -1;
  *(_QWORD *)&v9[1] = -1;
  v10 = 0;
  md::StandardLabeler::setDebugHighlight(a1, &v11, v8);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

