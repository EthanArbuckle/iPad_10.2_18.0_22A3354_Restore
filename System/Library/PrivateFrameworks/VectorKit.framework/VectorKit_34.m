void sub_19FD66E64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 152);
  if (v3 == (_QWORD *)(v1 - 176))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 176);
  }
  else
  {
    if (!v3)
      _Unwind_Resume(exception_object);
    v4 = 5;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  _Unwind_Resume(exception_object);
}

void md::Logic<md::ARRenderEntityGenerationLogic,md::ARRenderEntityGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

_QWORD *gdc::RegistryView<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>::each<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}>(_QWORD *result, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count **v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  arComponents::AlbedoTextureComponent *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  int *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  __int128 *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  __int128 *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  arComponents::AlbedoTextureComponent *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  __int128 *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  __int128 *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  int *v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  _QWORD *v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  _QWORD *v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  _QWORD *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  __int128 *v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  __int128 *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  arComponents::AlbedoTextureComponent *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  __int128 *v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  __int128 *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  int *v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  _QWORD *v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  _QWORD *v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  _QWORD *v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  __int128 *v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  arComponents::AlbedoTextureComponent *v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  __int128 *v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t *v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  __int128 *v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  int *v352;
  std::__shared_weak_count **v353;
  uint64_t v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  _QWORD *v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  _QWORD *v372;
  uint64_t v373;
  _QWORD *v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  _QWORD *v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  _QWORD *v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  __int128 *v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  __int128 *v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  arComponents::AlbedoTextureComponent *v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  __int128 *v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t *v439;
  uint64_t v440;
  unint64_t v441;
  uint64_t v442;
  __int128 *v443;
  uint64_t v444;
  unint64_t v445;
  uint64_t v446;
  int *v447;
  uint64_t v448;
  unint64_t v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  _QWORD *v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  _QWORD *v466;
  uint64_t v467;
  _QWORD *v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t v476;
  uint64_t v477;
  _QWORD *v479;
  uint64_t v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  _QWORD *v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  uint64_t v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  __int128 *v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t v524;
  arComponents::AlbedoTextureComponent *v525;
  uint64_t v526;
  unint64_t v527;
  uint64_t v528;
  __int128 *v529;
  uint64_t v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t *v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  __int128 *v537;
  uint64_t v538;
  unint64_t v539;
  uint64_t v540;
  int *v541;
  uint64_t v542;
  unint64_t v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  _QWORD *v554;
  uint64_t v555;
  uint64_t v556;
  unint64_t v557;
  uint64_t v558;
  uint64_t v559;
  _QWORD *v560;
  uint64_t v561;
  _QWORD *v563;
  uint64_t v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  uint64_t v571;
  _QWORD *v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t v576;
  unint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unint64_t v580;
  uint64_t v581;
  _QWORD *v583;
  uint64_t v584;
  unint64_t v585;
  uint64_t v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  unint64_t v592;
  uint64_t v593;
  uint64_t v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unint64_t v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t v608;
  unint64_t v609;
  uint64_t v610;
  __int128 *v611;
  uint64_t v612;
  unint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  unint64_t v617;
  uint64_t v618;
  __int128 *v619;
  uint64_t v620;
  unint64_t v621;
  uint64_t v622;
  __int128 *v623;
  uint64_t v624;
  unint64_t v625;
  uint64_t v626;
  uint64_t *v627;
  uint64_t v628;
  unint64_t v629;
  uint64_t v630;
  __int128 *v631;
  uint64_t v632;
  unint64_t v633;
  uint64_t v634;
  int *v635;
  uint64_t v636;
  unint64_t v637;
  unint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  unint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  _QWORD *v648;
  uint64_t v649;
  uint64_t v650;
  unint64_t v651;
  uint64_t v652;
  uint64_t v653;
  _QWORD *v654;
  uint64_t v655;
  _QWORD *v657;
  uint64_t v658;
  unint64_t v659;
  uint64_t v660;
  unint64_t v661;
  uint64_t v662;
  uint64_t v663;
  unint64_t v664;
  uint64_t v665;
  _QWORD *v667;
  uint64_t v668;
  unint64_t v669;
  uint64_t v670;
  unint64_t v671;
  uint64_t v672;
  uint64_t v673;
  unint64_t v674;
  uint64_t v675;
  _QWORD *v677;
  uint64_t v678;
  unint64_t v679;
  uint64_t v680;
  unint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  unint64_t v686;
  uint64_t v687;
  uint64_t v688;
  unint64_t v689;
  uint64_t v690;
  uint64_t v691;
  unint64_t v692;
  uint64_t v693;
  uint64_t v694;
  unint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  unint64_t v699;
  uint64_t v700;
  unint64_t v701;
  uint64_t v702;
  unint64_t v703;
  uint64_t v704;
  __int128 *v705;
  uint64_t v706;
  unint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  unint64_t v711;
  uint64_t v712;
  __int128 *v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  arComponents::AlbedoTextureComponent *v717;
  uint64_t v718;
  unint64_t v719;
  uint64_t v720;
  uint64_t *v721;
  uint64_t v722;
  unint64_t v723;
  uint64_t v724;
  __int128 *v725;
  uint64_t v726;
  unint64_t v727;
  uint64_t v728;
  int *v729;
  uint64_t *v730;
  uint64_t v731;
  unint64_t v732;
  unint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  unint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  _QWORD *v743;
  uint64_t v744;
  uint64_t v745;
  unint64_t v746;
  uint64_t v747;
  uint64_t v748;
  _QWORD *v749;
  uint64_t v750;
  _QWORD *v752;
  uint64_t v753;
  unint64_t v754;
  uint64_t v755;
  unint64_t v756;
  uint64_t v757;
  uint64_t v758;
  unint64_t v759;
  uint64_t v760;
  _QWORD *v762;
  uint64_t v763;
  unint64_t v764;
  uint64_t v765;
  unint64_t v766;
  uint64_t v767;
  uint64_t v768;
  unint64_t v769;
  uint64_t v770;
  _QWORD *v772;
  uint64_t v773;
  unint64_t v774;
  uint64_t v775;
  unint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  unint64_t v781;
  uint64_t v782;
  uint64_t v783;
  unint64_t v784;
  uint64_t v785;
  uint64_t v786;
  unint64_t v787;
  uint64_t v788;
  uint64_t v789;
  unint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  unint64_t v794;
  uint64_t v795;
  unint64_t v796;
  uint64_t v797;
  unint64_t v798;
  uint64_t v799;
  __int128 *v800;
  uint64_t v801;
  unint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  unint64_t v806;
  uint64_t v807;
  __int128 *v808;
  uint64_t v809;
  unint64_t v810;
  uint64_t v811;
  arComponents::AlbedoTextureComponent *v812;
  uint64_t v813;
  unint64_t v814;
  uint64_t v815;
  __int128 *v816;
  uint64_t v817;
  unint64_t v818;
  uint64_t v819;
  __int128 *v820;
  uint64_t v821;
  unint64_t v822;
  uint64_t v823;
  int *v824;
  __int128 *v825;
  uint64_t v826;
  unint64_t v827;
  unint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  unint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  _QWORD *v838;
  uint64_t v839;
  uint64_t v840;
  unint64_t v841;
  uint64_t v842;
  uint64_t v843;
  _QWORD *v844;
  uint64_t v845;
  _QWORD *v847;
  uint64_t v848;
  unint64_t v849;
  uint64_t v850;
  unint64_t v851;
  uint64_t v852;
  uint64_t v853;
  unint64_t v854;
  uint64_t v855;
  _QWORD *v857;
  uint64_t v858;
  unint64_t v859;
  uint64_t v860;
  unint64_t v861;
  uint64_t v862;
  uint64_t v863;
  unint64_t v864;
  uint64_t v865;
  _QWORD *v867;
  uint64_t v868;
  unint64_t v869;
  uint64_t v870;
  unint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  unint64_t v876;
  uint64_t v877;
  uint64_t v878;
  unint64_t v879;
  uint64_t v880;
  uint64_t v881;
  unint64_t v882;
  uint64_t v883;
  uint64_t v884;
  unint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  unint64_t v889;
  uint64_t v890;
  unint64_t v891;
  uint64_t v892;
  unint64_t v893;
  uint64_t v894;
  __int128 *v895;
  uint64_t v896;
  unint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  unint64_t v901;
  uint64_t v902;
  __int128 *v903;
  uint64_t v904;
  unint64_t v905;
  uint64_t v906;
  arComponents::AlbedoTextureComponent *v907;
  uint64_t v908;
  unint64_t v909;
  uint64_t v910;
  __int128 *v911;
  uint64_t v912;
  unint64_t v913;
  uint64_t v914;
  uint64_t *v915;
  uint64_t v916;
  unint64_t v917;
  uint64_t v918;
  __int128 *v919;
  int *v920;
  uint64_t v921;
  unint64_t v922;
  unint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  unint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  _QWORD *v933;
  uint64_t v934;
  uint64_t v935;
  unint64_t v936;
  uint64_t v937;
  uint64_t v938;
  _QWORD *v939;
  uint64_t v940;
  _QWORD *v942;
  uint64_t v943;
  unint64_t v944;
  uint64_t v945;
  unint64_t v946;
  uint64_t v947;
  uint64_t v948;
  unint64_t v949;
  uint64_t v950;
  _QWORD *v952;
  uint64_t v953;
  unint64_t v954;
  uint64_t v955;
  unint64_t v956;
  uint64_t v957;
  uint64_t v958;
  unint64_t v959;
  uint64_t v960;
  _QWORD *v962;
  uint64_t v963;
  unint64_t v964;
  uint64_t v965;
  unint64_t v966;
  uint64_t v967;
  uint64_t v968;
  unint64_t v969;
  uint64_t v970;
  _QWORD *v971;
  uint64_t v972;
  unint64_t v973;
  uint64_t v974;
  uint64_t v975;
  unint64_t v976;
  uint64_t v977;
  uint64_t v978;
  unint64_t v979;
  uint64_t v980;
  uint64_t v981;
  unint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  unint64_t v986;
  uint64_t v987;
  unint64_t v988;
  uint64_t v989;
  unint64_t v990;
  uint64_t v991;
  __int128 *v992;
  uint64_t v993;
  unint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  unint64_t v998;
  uint64_t v999;
  __int128 *v1000;
  uint64_t v1001;
  unint64_t v1002;
  uint64_t v1003;
  arComponents::AlbedoTextureComponent *v1004;
  uint64_t v1005;
  unint64_t v1006;
  uint64_t v1007;
  __int128 *v1008;
  uint64_t v1009;
  unint64_t v1010;
  uint64_t v1011;
  uint64_t *v1012;
  uint64_t v1013;
  unint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  unint64_t v1022;
  unint64_t v1023;
  _QWORD *v1024;
  _QWORD *v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  __int128 *v1030;
  __int128 *v1031;
  __int128 *v1032;
  __int128 *v1033;
  __int128 *v1034;
  __int128 *v1035;
  __int128 *v1036;
  __int128 *v1037;
  __int128 *v1038;
  _QWORD *v1039;
  _QWORD *v1040;
  _QWORD *v1041;
  _QWORD *v1042;
  _QWORD *v1043;
  _QWORD *v1044;
  _QWORD *v1045;
  _QWORD *v1046;
  _QWORD *v1047;
  _QWORD *v1048;
  _QWORD *v1049;
  _QWORD *v1050;
  _QWORD *v1051;
  _QWORD *v1052;
  _QWORD *v1053;
  _QWORD *v1054;
  _QWORD *v1055;
  _QWORD *v1056;
  _QWORD *v1057;
  unint64_t v1058;
  unint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  unint64_t v1069;
  unint64_t v1070;
  unint64_t v1071;
  unint64_t v1072;
  unint64_t v1073;
  unint64_t v1074;
  unint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  unint64_t v1078;
  unint64_t v1079;
  unint64_t v1080;
  unint64_t v1081;
  unint64_t v1082;
  unint64_t v1083;
  unint64_t v1084;
  uint64_t v1085;
  unint64_t v1086;
  unint64_t v1087;
  _QWORD *v1088;
  _QWORD *v1089;
  _QWORD *v1090;
  _QWORD *v1091;
  _QWORD *v1092;
  _QWORD *v1093;
  _QWORD *v1094;
  unint64_t v1095;
  _QWORD *v1096;
  _QWORD *v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  unint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  unint64_t v1108;
  unint64_t v1109;
  unint64_t v1110;
  unint64_t v1111;
  unint64_t v1112;
  unint64_t v1113;
  unint64_t v1114;
  _QWORD *v1115;
  unint64_t v1116;
  unint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  unint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  unint64_t v1138;
  unint64_t v1139;
  unint64_t v1140;
  unint64_t v1141;
  unint64_t v1142;
  unint64_t v1143;
  unint64_t v1144;
  uint64_t v1145;
  unint64_t v1146;
  unint64_t v1147;
  _QWORD *v1148;
  _QWORD *v1149;
  _QWORD *v1150;
  _QWORD *v1151;
  _QWORD *v1152;
  _QWORD *v1153;
  _QWORD *v1154;
  uint64_t v1155;
  _QWORD *v1156;
  _QWORD *v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  unint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  unint64_t v1168;
  unint64_t v1169;
  unint64_t v1170;
  unint64_t v1171;
  unint64_t v1172;
  unint64_t v1173;
  unint64_t v1174;
  _QWORD *v1175;
  unint64_t v1176;
  unint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  unint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  unint64_t v1198;
  unint64_t v1199;
  unint64_t v1200;
  unint64_t v1201;
  unint64_t v1202;
  unint64_t v1203;
  unint64_t v1204;
  uint64_t v1205;
  unint64_t v1206;
  unint64_t v1207;
  _QWORD *v1208;
  _QWORD *v1209;
  _QWORD *v1210;
  _QWORD *v1211;
  _QWORD *v1212;
  _QWORD *v1213;
  _QWORD *v1214;
  uint64_t v1215;
  _QWORD *v1216;
  _QWORD *v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  unint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  unint64_t v1228;
  unint64_t v1229;
  unint64_t v1230;
  unint64_t v1231;
  unint64_t v1232;
  unint64_t v1233;
  unint64_t v1234;
  _QWORD *v1235;
  unint64_t v1236;
  unint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  unint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  unint64_t v1258;
  unint64_t v1259;
  unint64_t v1260;
  unint64_t v1261;
  unint64_t v1262;
  unint64_t v1263;
  unint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  _QWORD *v1268;
  _QWORD *v1269;
  _QWORD *v1270;
  _QWORD *v1271;
  _QWORD *v1272;
  _QWORD *v1273;
  _QWORD *v1274;
  uint64_t v1275;
  unint64_t v1276;
  unint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  unint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  unint64_t v1288;
  unint64_t v1289;
  unint64_t v1290;
  unint64_t v1291;
  unint64_t v1292;
  unint64_t v1293;
  unint64_t v1294;
  uint64_t v1295;
  __int128 v1296;
  uint64_t v1297;

  v3 = *result;
  v2 = result[1];
  v4 = *result + 32;
  if (!*result)
    v4 = 0;
  if (v2)
    v5 = v2 + 32;
  else
    v5 = 0;
  v6 = result[2];
  v7 = result[3];
  if (v6)
    v8 = v6 + 32;
  else
    v8 = 0;
  if (v7)
    v9 = v7 + 32;
  else
    v9 = 0;
  v10 = result[4];
  v11 = result[5];
  if (v10)
    v12 = v10 + 32;
  else
    v12 = 0;
  if (v11)
    v13 = v11 + 32;
  else
    v13 = 0;
  v14 = result[6];
  v15 = result[7];
  if (v14)
    v16 = v14 + 32;
  else
    v16 = 0;
  if (v15)
    v17 = v15 + 32;
  else
    v17 = 0;
  v19 = result[8];
  v18 = result[9];
  v20 = (_QWORD *)(v19 + 32);
  if (!v19)
    v20 = 0;
  v21 = (_QWORD *)(v18 + 32);
  if (!v18)
    v21 = 0;
  if (*(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24) >= *(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24))
    v5 = v4;
  if (*(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24) < *(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24))
    v5 = v8;
  if (*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24) < *(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24))
    v5 = v9;
  if (*(_QWORD *)(v12 + 32) - *(_QWORD *)(v12 + 24) < *(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24))
    v5 = v12;
  if (*(_QWORD *)(v13 + 32) - *(_QWORD *)(v13 + 24) < *(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24))
    v5 = v13;
  if (*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24) < *(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24))
    v5 = v16;
  if (*(_QWORD *)(v17 + 32) - *(_QWORD *)(v17 + 24) >= *(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24))
    v17 = v5;
  if (v20[4] - v20[3] >= *(_QWORD *)(v17 + 32) - *(_QWORD *)(v17 + 24))
    v20 = (_QWORD *)v17;
  if (v21[4] - v21[3] >= v20[4] - v20[3])
    v21 = v20;
  if ((_QWORD *)v4 == v21)
  {
    v1296 = *a2;
    v1297 = *((_QWORD *)a2 + 2);
    v41 = *(_QWORD *)(v3 + 56);
    v40 = *(_QWORD *)(v3 + 64);
    while (v41 != v40)
    {
      v69 = (_QWORD *)result[1];
      v70 = *(unsigned int *)(v41 + 4);
      v71 = v70 >> 7;
      v72 = v69[4];
      if (v70 >> 7 < (v69[5] - v72) >> 3)
      {
        v73 = *(_QWORD *)(v72 + 8 * v71);
        if (v73)
        {
          v74 = v70 & 0x7F;
          v75 = *(unsigned __int16 *)(v73 + 2 * v74);
          v78 = v69 + 7;
          v76 = v69[7];
          v77 = v78[1];
          if (v75 < (v77 - v76) >> 3)
          {
            v79 = v76 + 8 * v75;
            if (v79 != v77 && *(_DWORD *)(v79 + 4) == (_DWORD)v70)
            {
              v81 = (_QWORD *)result[2];
              v82 = v81[4];
              v83 = (v81[5] - v82) >> 3;
              if (v71 < v83)
              {
                v84 = *(_QWORD *)(v82 + 8 * v71);
                if (v84)
                {
                  v85 = *(unsigned __int16 *)(v84 + 2 * v74);
                  v86 = v81[7];
                  v87 = v81[8];
                  v88 = (v87 - v86) >> 3;
                  if (v88 > v85)
                  {
                    v89 = v86 + 8 * v85;
                    if (v89 != v87 && *(_DWORD *)(v89 + 4) == (_DWORD)v70)
                    {
                      v91 = (_QWORD *)result[3];
                      v92 = v91[4];
                      v93 = (v91[5] - v92) >> 3;
                      if (v71 < v93)
                      {
                        v94 = *(_QWORD *)(v92 + 8 * v71);
                        if (v94)
                        {
                          v95 = *(unsigned __int16 *)(v94 + 2 * v74);
                          v96 = v91[7];
                          v97 = v91[8];
                          v98 = (v97 - v96) >> 3;
                          if (v98 > v95)
                          {
                            v99 = v96 + 8 * v95;
                            if (v99 != v97 && *(_DWORD *)(v99 + 4) == (_DWORD)v70)
                            {
                              v101 = (_QWORD *)result[4];
                              v102 = v101[4];
                              v103 = (v101[5] - v102) >> 3;
                              if (v71 < v103)
                              {
                                v104 = *(_QWORD *)(v102 + 8 * v71);
                                if (v104)
                                {
                                  v105 = *(unsigned __int16 *)(v104 + 2 * v74);
                                  v106 = v101[7];
                                  v107 = v101[8];
                                  v108 = (v107 - v106) >> 3;
                                  if (v108 > v105)
                                  {
                                    v109 = v106 + 8 * v105;
                                    if (v109 != v107 && *(_DWORD *)(v109 + 4) == (_DWORD)v70)
                                    {
                                      v111 = (_QWORD *)result[5];
                                      v1276 = (uint64_t)(v111[5] - v111[4]) >> 3;
                                      v1286 = v111[4];
                                      if (v71 < v1276)
                                      {
                                        v112 = *(_QWORD *)(v1286 + 8 * v71);
                                        if (v112)
                                        {
                                          v113 = *(unsigned __int16 *)(v112 + 2 * v74);
                                          v1266 = result[5];
                                          v1246 = v111[7];
                                          v1256 = v111[8];
                                          v1236 = (v1256 - v1246) >> 3;
                                          if (v1236 > v113)
                                          {
                                            v114 = v1246 + 8 * v113;
                                            if (v114 != v1256 && *(_DWORD *)(v114 + 4) == (_DWORD)v70)
                                            {
                                              v1216 = (_QWORD *)result[6];
                                              v1226 = v1216[4];
                                              v1206 = (v1216[5] - v1226) >> 3;
                                              if (v71 < v1206)
                                              {
                                                v115 = *(_QWORD *)(v1226 + 8 * v71);
                                                if (v115)
                                                {
                                                  v116 = *(unsigned __int16 *)(v115 + 2 * v74);
                                                  v1196 = v1216[8];
                                                  v1186 = v1216[7];
                                                  v1176 = (v1196 - v1186) >> 3;
                                                  if (v1176 > v116)
                                                  {
                                                    v117 = v1186 + 8 * v116;
                                                    if (v117 != v1196 && *(_DWORD *)(v117 + 4) == (_DWORD)v70)
                                                    {
                                                      v1156 = (_QWORD *)result[7];
                                                      v1166 = v1156[4];
                                                      v1146 = (v1156[5] - v1166) >> 3;
                                                      if (v71 < v1146)
                                                      {
                                                        v118 = *(_QWORD *)(v1166 + 8 * v71);
                                                        if (v118)
                                                        {
                                                          v119 = *(unsigned __int16 *)(v118 + 2 * v74);
                                                          v1126 = v1156[7];
                                                          v1136 = v1156[8];
                                                          v1116 = (v1136 - v1126) >> 3;
                                                          if (v1116 > v119)
                                                          {
                                                            v120 = v1126 + 8 * v119;
                                                            if (v120 != v1136 && *(_DWORD *)(v120 + 4) == (_DWORD)v70)
                                                            {
                                                              v1096 = (_QWORD *)result[8];
                                                              v1106 = v1096[4];
                                                              v1086 = (v1096[5] - v1106) >> 3;
                                                              if (v71 < v1086)
                                                              {
                                                                v121 = *(_QWORD *)(v1106 + 8 * v71);
                                                                if (v121)
                                                                {
                                                                  v122 = *(unsigned __int16 *)(v121 + 2 * v74);
                                                                  v1067 = v1096[7];
                                                                  v1076 = v1096[8];
                                                                  v1058 = (v1076 - v1067) >> 3;
                                                                  if (v1058 > v122)
                                                                  {
                                                                    v123 = v1067 + 8 * v122;
                                                                    if (v123 != v1076
                                                                      && *(_DWORD *)(v123 + 4) == (_DWORD)v70)
                                                                    {
                                                                      v1024 = (_QWORD *)result[9];
                                                                      v124 = v1024[4];
                                                                      v1022 = (v1024[5] - v124) >> 3;
                                                                      if (v71 < v1022)
                                                                      {
                                                                        v125 = *(_QWORD *)(v124 + 8 * v71);
                                                                        if (v125)
                                                                        {
                                                                          v126 = *(unsigned __int16 *)(v125 + 2 * v74);
                                                                          v1018 = v1024[7];
                                                                          v1020 = v1024[8];
                                                                          v127 = (v1020 - v1018) >> 3;
                                                                          if (v127 > v126)
                                                                          {
                                                                            v128 = v1018 + 8 * v126;
                                                                            if (v128 != v1020
                                                                              && *(_DWORD *)(v128 + 4) == (_DWORD)v70)
                                                                            {
                                                                              v1016 = v40;
                                                                              v1030 = a2;
                                                                              v1039 = v21;
                                                                              v1048 = result;
                                                                              v129 = *(_QWORD *)v41;
                                                                              v130 = HIDWORD(*(_QWORD *)v41);
                                                                              v131 = *(_QWORD *)v41 >> 39;
                                                                              if (v131 < v83
                                                                                && (v132 = *(_QWORD *)(v82 + 8 * v131)) != 0
                                                                                && (v133 = *(unsigned __int16 *)(v132 + 2 * (HIDWORD(v129) & 0x7F)),
                                                                                    v88 > v133)
                                                                                && (v134 = v86 + 8 * v133, v134 != v87)
                                                                                && *(_DWORD *)(v134 + 4) == (_DWORD)v130)
                                                                              {
                                                                                v135 = (__int128 *)(v81[10]
                                                                                                  + 80 * v133);
                                                                              }
                                                                              else
                                                                              {
                                                                                v135 = (__int128 *)v81[11];
                                                                              }
                                                                              if (v131 < v93
                                                                                && (v136 = *(_QWORD *)(v92 + 8 * v131)) != 0
                                                                                && (v137 = *(unsigned __int16 *)(v136 + 2 * (HIDWORD(v129) & 0x7F)),
                                                                                    v98 > v137)
                                                                                && (v138 = v96 + 8 * v137, v138 != v97)
                                                                                && *(_DWORD *)(v138 + 4) == (_DWORD)v130)
                                                                              {
                                                                                v139 = v91[10] + 16 * v137;
                                                                              }
                                                                              else
                                                                              {
                                                                                v139 = v91[11];
                                                                              }
                                                                              if (v131 < v103
                                                                                && (v140 = *(_QWORD *)(v102 + 8 * v131)) != 0
                                                                                && (v141 = *(unsigned __int16 *)(v140 + 2 * (HIDWORD(v129) & 0x7F)),
                                                                                    v108 > v141)
                                                                                && (v142 = v106 + 8 * v141, v142 != v107)
                                                                                && *(_DWORD *)(v142 + 4) == (_DWORD)v130)
                                                                              {
                                                                                v143 = (__int128 *)(v101[10]
                                                                                                  + 24 * v141);
                                                                              }
                                                                              else
                                                                              {
                                                                                v143 = (__int128 *)v101[11];
                                                                              }
                                                                              if (v131 < v1276
                                                                                && (v144 = *(_QWORD *)(v1286 + 8 * v131)) != 0
                                                                                && (v145 = *(unsigned __int16 *)(v144 + 2 * (HIDWORD(v129) & 0x7F)),
                                                                                    v1236 > v145)
                                                                                && (v146 = v1246 + 8 * v145,
                                                                                    v146 != v1256)
                                                                                && *(_DWORD *)(v146 + 4) == (_DWORD)v130)
                                                                              {
                                                                                v147 = (arComponents::AlbedoTextureComponent *)(*(_QWORD *)(v1266 + 80) + 48 * v145);
                                                                              }
                                                                              else
                                                                              {
                                                                                v147 = *(arComponents::AlbedoTextureComponent **)(v1266 + 88);
                                                                              }
                                                                              if (v131 < v1206
                                                                                && (v148 = *(_QWORD *)(v1226 + 8 * v131)) != 0
                                                                                && (v149 = *(unsigned __int16 *)(v148 + 2 * (HIDWORD(v129) & 0x7F)),
                                                                                    v1176 > v149)
                                                                                && (v150 = v1186 + 8 * v149,
                                                                                    v150 != v1196)
                                                                                && *(_DWORD *)(v150 + 4) == (_DWORD)v130)
                                                                              {
                                                                                v151 = (__int128 *)(v1216[10] + 16 * v149);
                                                                              }
                                                                              else
                                                                              {
                                                                                v151 = (__int128 *)v1216[11];
                                                                              }
                                                                              if (v131 < v1146
                                                                                && (v152 = *(_QWORD *)(v1166 + 8 * v131)) != 0
                                                                                && (v153 = *(unsigned __int16 *)(v152 + 2 * (HIDWORD(v129) & 0x7F)),
                                                                                    v1116 > v153)
                                                                                && (v154 = v1126 + 8 * v153,
                                                                                    v154 != v1136)
                                                                                && *(_DWORD *)(v154 + 4) == (_DWORD)v130)
                                                                              {
                                                                                v155 = (uint64_t *)(v1156[10] + 8 * v153);
                                                                              }
                                                                              else
                                                                              {
                                                                                v155 = (uint64_t *)v1156[11];
                                                                              }
                                                                              if (v131 < v1086
                                                                                && (v156 = *(_QWORD *)(v1106 + 8 * v131)) != 0
                                                                                && (v157 = *(unsigned __int16 *)(v156 + 2 * (HIDWORD(v129) & 0x7F)),
                                                                                    v1058 > v157)
                                                                                && (v158 = v1067 + 8 * v157,
                                                                                    v158 != v1076)
                                                                                && *(_DWORD *)(v158 + 4) == (_DWORD)v130)
                                                                              {
                                                                                v159 = (__int128 *)(v1096[10] + 16 * v157);
                                                                              }
                                                                              else
                                                                              {
                                                                                v159 = (__int128 *)v1096[11];
                                                                              }
                                                                              if (v131 < v1022
                                                                                && (v160 = *(_QWORD *)(v124 + 8 * v131)) != 0
                                                                                && (v161 = *(unsigned __int16 *)(v160 + 2 * (HIDWORD(v129) & 0x7F)),
                                                                                    v127 > v161)
                                                                                && (v162 = v1018 + 8 * v161,
                                                                                    v162 != v1020)
                                                                                && *(_DWORD *)(v162 + 4) == (_DWORD)v130)
                                                                              {
                                                                                v68 = (int *)(v1024[10] + 4 * v161);
                                                                              }
                                                                              else
                                                                              {
                                                                                v68 = (int *)v1024[11];
                                                                              }
                                                                              md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v129, v135, *(_QWORD *)v139, *(std::__shared_weak_count **)(v139 + 8), v143, v147, v151, v155, v159, v68);
                                                                              v21 = v1039;
                                                                              result = v1048;
                                                                              a2 = v1030;
                                                                              v40 = v1016;
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v41 += 8;
    }
  }
  v22 = (_QWORD *)result[1];
  v23 = v22 + 4;
  if (!v22)
    v23 = 0;
  if (v23 == v21)
  {
    v1296 = *a2;
    v1297 = *((_QWORD *)a2 + 2);
    v43 = v22[7];
    v42 = v22[8];
    while (v43 != v42)
    {
      v164 = *result;
      v165 = *(unsigned int *)(v43 + 4);
      v166 = v165 >> 7;
      v167 = *(_QWORD *)(*result + 32);
      if (v165 >> 7 < (*(_QWORD *)(*result + 40) - v167) >> 3)
      {
        v168 = *(_QWORD *)(v167 + 8 * v166);
        if (v168)
        {
          v169 = v165 & 0x7F;
          v170 = *(unsigned __int16 *)(v168 + 2 * v169);
          v173 = v164 + 56;
          v171 = *(_QWORD *)(v164 + 56);
          v172 = *(_QWORD *)(v173 + 8);
          if (v170 < (v172 - v171) >> 3)
          {
            v174 = v171 + 8 * v170;
            if (v174 != v172 && *(_DWORD *)(v174 + 4) == (_DWORD)v165)
            {
              v176 = (_QWORD *)result[2];
              v177 = v176[4];
              v178 = (v176[5] - v177) >> 3;
              if (v166 < v178)
              {
                v179 = *(_QWORD *)(v177 + 8 * v166);
                if (v179)
                {
                  v180 = *(unsigned __int16 *)(v179 + 2 * v169);
                  v181 = v176[7];
                  v182 = v176[8];
                  v183 = (v182 - v181) >> 3;
                  if (v183 > v180)
                  {
                    v184 = v181 + 8 * v180;
                    if (v184 != v182 && *(_DWORD *)(v184 + 4) == (_DWORD)v165)
                    {
                      v186 = (_QWORD *)result[3];
                      v187 = v186[4];
                      v188 = (v186[5] - v187) >> 3;
                      if (v166 < v188)
                      {
                        v189 = *(_QWORD *)(v187 + 8 * v166);
                        if (v189)
                        {
                          v190 = *(unsigned __int16 *)(v189 + 2 * v169);
                          v191 = v186[7];
                          v192 = v186[8];
                          v193 = (v192 - v191) >> 3;
                          if (v193 > v190)
                          {
                            v194 = v191 + 8 * v190;
                            if (v194 != v192 && *(_DWORD *)(v194 + 4) == (_DWORD)v165)
                            {
                              v196 = (_QWORD *)result[4];
                              v197 = v196[4];
                              v198 = (v196[5] - v197) >> 3;
                              if (v166 < v198)
                              {
                                v199 = *(_QWORD *)(v197 + 8 * v166);
                                if (v199)
                                {
                                  v200 = *(unsigned __int16 *)(v199 + 2 * v169);
                                  v201 = v196[7];
                                  v202 = v196[8];
                                  v203 = (v202 - v201) >> 3;
                                  if (v203 > v200)
                                  {
                                    v204 = v201 + 8 * v200;
                                    if (v204 != v202 && *(_DWORD *)(v204 + 4) == (_DWORD)v165)
                                    {
                                      v206 = (_QWORD *)result[5];
                                      v1277 = (uint64_t)(v206[5] - v206[4]) >> 3;
                                      v1287 = v206[4];
                                      if (v166 < v1277)
                                      {
                                        v207 = *(_QWORD *)(v1287 + 8 * v166);
                                        if (v207)
                                        {
                                          v208 = *(unsigned __int16 *)(v207 + 2 * v169);
                                          v1267 = result[5];
                                          v1247 = v206[7];
                                          v1257 = v206[8];
                                          v1237 = (v1257 - v1247) >> 3;
                                          if (v1237 > v208)
                                          {
                                            v209 = v1247 + 8 * v208;
                                            if (v209 != v1257 && *(_DWORD *)(v209 + 4) == (_DWORD)v165)
                                            {
                                              v1217 = (_QWORD *)result[6];
                                              v1227 = v1217[4];
                                              v1207 = (v1217[5] - v1227) >> 3;
                                              if (v166 < v1207)
                                              {
                                                v210 = *(_QWORD *)(v1227 + 8 * v166);
                                                if (v210)
                                                {
                                                  v211 = *(unsigned __int16 *)(v210 + 2 * v169);
                                                  v1197 = v1217[8];
                                                  v1187 = v1217[7];
                                                  v1177 = (v1197 - v1187) >> 3;
                                                  if (v1177 > v211)
                                                  {
                                                    v212 = v1187 + 8 * v211;
                                                    if (v212 != v1197 && *(_DWORD *)(v212 + 4) == (_DWORD)v165)
                                                    {
                                                      v1157 = (_QWORD *)result[7];
                                                      v1167 = v1157[4];
                                                      v1147 = (v1157[5] - v1167) >> 3;
                                                      if (v166 < v1147)
                                                      {
                                                        v213 = *(_QWORD *)(v1167 + 8 * v166);
                                                        if (v213)
                                                        {
                                                          v214 = *(unsigned __int16 *)(v213 + 2 * v169);
                                                          v1127 = v1157[7];
                                                          v1137 = v1157[8];
                                                          v1117 = (v1137 - v1127) >> 3;
                                                          if (v1117 > v214)
                                                          {
                                                            v215 = v1127 + 8 * v214;
                                                            if (v215 != v1137 && *(_DWORD *)(v215 + 4) == (_DWORD)v165)
                                                            {
                                                              v1097 = (_QWORD *)result[8];
                                                              v1107 = v1097[4];
                                                              v1087 = (v1097[5] - v1107) >> 3;
                                                              if (v166 < v1087)
                                                              {
                                                                v216 = *(_QWORD *)(v1107 + 8 * v166);
                                                                if (v216)
                                                                {
                                                                  v217 = *(unsigned __int16 *)(v216 + 2 * v169);
                                                                  v1068 = v1097[7];
                                                                  v1077 = v1097[8];
                                                                  v1059 = (v1077 - v1068) >> 3;
                                                                  if (v1059 > v217)
                                                                  {
                                                                    v218 = v1068 + 8 * v217;
                                                                    if (v218 != v1077
                                                                      && *(_DWORD *)(v218 + 4) == (_DWORD)v165)
                                                                    {
                                                                      v1025 = (_QWORD *)result[9];
                                                                      v219 = v1025[4];
                                                                      v1023 = (v1025[5] - v219) >> 3;
                                                                      if (v166 < v1023)
                                                                      {
                                                                        v220 = *(_QWORD *)(v219 + 8 * v166);
                                                                        if (v220)
                                                                        {
                                                                          v221 = *(unsigned __int16 *)(v220 + 2 * v169);
                                                                          v1019 = v1025[7];
                                                                          v1021 = v1025[8];
                                                                          v222 = (v1021 - v1019) >> 3;
                                                                          if (v222 > v221)
                                                                          {
                                                                            v223 = v1019 + 8 * v221;
                                                                            if (v223 != v1021
                                                                              && *(_DWORD *)(v223 + 4) == (_DWORD)v165)
                                                                            {
                                                                              v1017 = v42;
                                                                              v1031 = a2;
                                                                              v1040 = v21;
                                                                              v1049 = result;
                                                                              v224 = *(_QWORD *)v43;
                                                                              v225 = HIDWORD(*(_QWORD *)v43);
                                                                              v226 = *(_QWORD *)v43 >> 39;
                                                                              if (v226 < v178
                                                                                && (v227 = *(_QWORD *)(v177 + 8 * v226)) != 0
                                                                                && (v228 = *(unsigned __int16 *)(v227 + 2 * (HIDWORD(v224) & 0x7F)),
                                                                                    v183 > v228)
                                                                                && (v229 = v181 + 8 * v228, v229 != v182)
                                                                                && *(_DWORD *)(v229 + 4) == (_DWORD)v225)
                                                                              {
                                                                                v230 = (__int128 *)(v176[10]
                                                                                                  + 80 * v228);
                                                                              }
                                                                              else
                                                                              {
                                                                                v230 = (__int128 *)v176[11];
                                                                              }
                                                                              if (v226 < v188
                                                                                && (v231 = *(_QWORD *)(v187 + 8 * v226)) != 0
                                                                                && (v232 = *(unsigned __int16 *)(v231 + 2 * (HIDWORD(v224) & 0x7F)),
                                                                                    v193 > v232)
                                                                                && (v233 = v191 + 8 * v232, v233 != v192)
                                                                                && *(_DWORD *)(v233 + 4) == (_DWORD)v225)
                                                                              {
                                                                                v234 = v186[10] + 16 * v232;
                                                                              }
                                                                              else
                                                                              {
                                                                                v234 = v186[11];
                                                                              }
                                                                              if (v226 < v198
                                                                                && (v235 = *(_QWORD *)(v197 + 8 * v226)) != 0
                                                                                && (v236 = *(unsigned __int16 *)(v235 + 2 * (HIDWORD(v224) & 0x7F)),
                                                                                    v203 > v236)
                                                                                && (v237 = v201 + 8 * v236, v237 != v202)
                                                                                && *(_DWORD *)(v237 + 4) == (_DWORD)v225)
                                                                              {
                                                                                v238 = (__int128 *)(v196[10]
                                                                                                  + 24 * v236);
                                                                              }
                                                                              else
                                                                              {
                                                                                v238 = (__int128 *)v196[11];
                                                                              }
                                                                              if (v226 < v1277
                                                                                && (v239 = *(_QWORD *)(v1287 + 8 * v226)) != 0
                                                                                && (v240 = *(unsigned __int16 *)(v239 + 2 * (HIDWORD(v224) & 0x7F)),
                                                                                    v1237 > v240)
                                                                                && (v241 = v1247 + 8 * v240,
                                                                                    v241 != v1257)
                                                                                && *(_DWORD *)(v241 + 4) == (_DWORD)v225)
                                                                              {
                                                                                v242 = (arComponents::AlbedoTextureComponent *)(*(_QWORD *)(v1267 + 80) + 48 * v240);
                                                                              }
                                                                              else
                                                                              {
                                                                                v242 = *(arComponents::AlbedoTextureComponent **)(v1267 + 88);
                                                                              }
                                                                              if (v226 < v1207
                                                                                && (v243 = *(_QWORD *)(v1227 + 8 * v226)) != 0
                                                                                && (v244 = *(unsigned __int16 *)(v243 + 2 * (HIDWORD(v224) & 0x7F)),
                                                                                    v1177 > v244)
                                                                                && (v245 = v1187 + 8 * v244,
                                                                                    v245 != v1197)
                                                                                && *(_DWORD *)(v245 + 4) == (_DWORD)v225)
                                                                              {
                                                                                v246 = (__int128 *)(v1217[10] + 16 * v244);
                                                                              }
                                                                              else
                                                                              {
                                                                                v246 = (__int128 *)v1217[11];
                                                                              }
                                                                              if (v226 < v1147
                                                                                && (v247 = *(_QWORD *)(v1167 + 8 * v226)) != 0
                                                                                && (v248 = *(unsigned __int16 *)(v247 + 2 * (HIDWORD(v224) & 0x7F)),
                                                                                    v1117 > v248)
                                                                                && (v249 = v1127 + 8 * v248,
                                                                                    v249 != v1137)
                                                                                && *(_DWORD *)(v249 + 4) == (_DWORD)v225)
                                                                              {
                                                                                v250 = (uint64_t *)(v1157[10] + 8 * v248);
                                                                              }
                                                                              else
                                                                              {
                                                                                v250 = (uint64_t *)v1157[11];
                                                                              }
                                                                              if (v226 < v1087
                                                                                && (v251 = *(_QWORD *)(v1107 + 8 * v226)) != 0
                                                                                && (v252 = *(unsigned __int16 *)(v251 + 2 * (HIDWORD(v224) & 0x7F)),
                                                                                    v1059 > v252)
                                                                                && (v253 = v1068 + 8 * v252,
                                                                                    v253 != v1077)
                                                                                && *(_DWORD *)(v253 + 4) == (_DWORD)v225)
                                                                              {
                                                                                v254 = (__int128 *)(v1097[10] + 16 * v252);
                                                                              }
                                                                              else
                                                                              {
                                                                                v254 = (__int128 *)v1097[11];
                                                                              }
                                                                              if (v226 < v1023
                                                                                && (v255 = *(_QWORD *)(v219 + 8 * v226)) != 0
                                                                                && (v256 = *(unsigned __int16 *)(v255 + 2 * (HIDWORD(v224) & 0x7F)),
                                                                                    v222 > v256)
                                                                                && (v257 = v1019 + 8 * v256,
                                                                                    v257 != v1021)
                                                                                && *(_DWORD *)(v257 + 4) == (_DWORD)v225)
                                                                              {
                                                                                v163 = (int *)(v1025[10] + 4 * v256);
                                                                              }
                                                                              else
                                                                              {
                                                                                v163 = (int *)v1025[11];
                                                                              }
                                                                              md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v224, v230, *(_QWORD *)v234, *(std::__shared_weak_count **)(v234 + 8), v238, v242, v246, v250, v254, v163);
                                                                              v21 = v1040;
                                                                              result = v1049;
                                                                              a2 = v1031;
                                                                              v42 = v1017;
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v43 += 8;
    }
  }
  v24 = (_QWORD *)result[2];
  v25 = v24 + 4;
  if (!v24)
    v25 = 0;
  if (v25 == v21)
  {
    v1296 = *a2;
    v1297 = *((_QWORD *)a2 + 2);
    v44 = v24[7];
    v45 = v24[8];
    if (v44 != v45)
    {
      v46 = (__int128 *)v24[10];
      do
      {
        v259 = *result;
        v260 = *(unsigned int *)(v44 + 4);
        v261 = v260 >> 7;
        v262 = *(_QWORD *)(*result + 32);
        if (v260 >> 7 < (*(_QWORD *)(*result + 40) - v262) >> 3)
        {
          v263 = *(_QWORD *)(v262 + 8 * v261);
          if (v263)
          {
            v264 = v260 & 0x7F;
            v265 = *(unsigned __int16 *)(v263 + 2 * v264);
            v268 = v259 + 56;
            v266 = *(_QWORD *)(v259 + 56);
            v267 = *(_QWORD *)(v268 + 8);
            if (v265 < (v267 - v266) >> 3)
            {
              v269 = v266 + 8 * v265;
              if (v269 != v267 && *(_DWORD *)(v269 + 4) == (_DWORD)v260)
              {
                v271 = (_QWORD *)result[1];
                v272 = v271[4];
                if (v261 < (v271[5] - v272) >> 3)
                {
                  v273 = *(_QWORD *)(v272 + 8 * v261);
                  if (v273)
                  {
                    v274 = *(unsigned __int16 *)(v273 + 2 * v264);
                    v277 = v271 + 7;
                    v275 = v271[7];
                    v276 = v277[1];
                    if (v274 < (v276 - v275) >> 3)
                    {
                      v278 = v275 + 8 * v274;
                      if (v278 != v276 && *(_DWORD *)(v278 + 4) == (_DWORD)v260)
                      {
                        v280 = (_QWORD *)result[3];
                        v281 = v280[4];
                        v282 = (v280[5] - v281) >> 3;
                        if (v261 < v282)
                        {
                          v283 = *(_QWORD *)(v281 + 8 * v261);
                          if (v283)
                          {
                            v284 = *(unsigned __int16 *)(v283 + 2 * v264);
                            v286 = v280[7];
                            v285 = v280[8];
                            v287 = (v285 - v286) >> 3;
                            if (v287 > v284)
                            {
                              v288 = v286 + 8 * v284;
                              if (v288 != v285 && *(_DWORD *)(v288 + 4) == (_DWORD)v260)
                              {
                                v290 = (_QWORD *)result[4];
                                v291 = v290[4];
                                v292 = (v290[5] - v291) >> 3;
                                if (v261 < v292)
                                {
                                  v293 = *(_QWORD *)(v291 + 8 * v261);
                                  if (v293)
                                  {
                                    v294 = *(unsigned __int16 *)(v293 + 2 * v264);
                                    v296 = v290[7];
                                    v295 = v290[8];
                                    v297 = (v295 - v296) >> 3;
                                    if (v297 > v294)
                                    {
                                      v298 = v296 + 8 * v294;
                                      if (v298 != v295 && *(_DWORD *)(v298 + 4) == (_DWORD)v260)
                                      {
                                        v300 = (_QWORD *)result[5];
                                        v301 = v300[4];
                                        v302 = (v300[5] - v301) >> 3;
                                        if (v261 < v302)
                                        {
                                          v303 = *(_QWORD *)(v301 + 8 * v261);
                                          if (v303)
                                          {
                                            v304 = *(unsigned __int16 *)(v303 + 2 * v264);
                                            v306 = v300[7];
                                            v305 = v300[8];
                                            v1288 = (v305 - v306) >> 3;
                                            if (v1288 > v304)
                                            {
                                              v307 = v306 + 8 * v304;
                                              if (v307 != v305 && *(_DWORD *)(v307 + 4) == (_DWORD)v260)
                                              {
                                                v1268 = (_QWORD *)result[6];
                                                v1278 = v1268[4];
                                                v1258 = (v1268[5] - v1278) >> 3;
                                                if (v261 < v1258)
                                                {
                                                  v308 = *(_QWORD *)(v1278 + 8 * v261);
                                                  if (v308)
                                                  {
                                                    v309 = *(unsigned __int16 *)(v308 + 2 * v264);
                                                    v1238 = v1268[7];
                                                    v1248 = v1268[8];
                                                    v1228 = (v1248 - v1238) >> 3;
                                                    if (v1228 > v309)
                                                    {
                                                      v310 = v1238 + 8 * v309;
                                                      if (v310 != v1248 && *(_DWORD *)(v310 + 4) == (_DWORD)v260)
                                                      {
                                                        v1208 = (_QWORD *)result[7];
                                                        v1218 = v1208[4];
                                                        v1198 = (v1208[5] - v1218) >> 3;
                                                        if (v261 < v1198)
                                                        {
                                                          v311 = *(_QWORD *)(v1218 + 8 * v261);
                                                          if (v311)
                                                          {
                                                            v312 = *(unsigned __int16 *)(v311 + 2 * v264);
                                                            v1178 = v1208[7];
                                                            v1188 = v1208[8];
                                                            v1168 = (v1188 - v1178) >> 3;
                                                            if (v1168 > v312)
                                                            {
                                                              v313 = v1178 + 8 * v312;
                                                              if (v313 != v1188
                                                                && *(_DWORD *)(v313 + 4) == (_DWORD)v260)
                                                              {
                                                                v1148 = (_QWORD *)result[8];
                                                                v1158 = v1148[4];
                                                                v1138 = (v1148[5] - v1158) >> 3;
                                                                if (v261 < v1138)
                                                                {
                                                                  v314 = *(_QWORD *)(v1158 + 8 * v261);
                                                                  if (v314)
                                                                  {
                                                                    v315 = *(unsigned __int16 *)(v314 + 2 * v264);
                                                                    v1118 = v1148[7];
                                                                    v1128 = v1148[8];
                                                                    v1108 = (v1128 - v1118) >> 3;
                                                                    if (v1108 > v315)
                                                                    {
                                                                      v316 = v1118 + 8 * v315;
                                                                      if (v316 != v1128
                                                                        && *(_DWORD *)(v316 + 4) == (_DWORD)v260)
                                                                      {
                                                                        v1088 = (_QWORD *)result[9];
                                                                        v1098 = v1088[4];
                                                                        v1078 = (v1088[5] - v1098) >> 3;
                                                                        if (v261 < v1078)
                                                                        {
                                                                          v317 = *(_QWORD *)(v1098 + 8 * v261);
                                                                          if (v317)
                                                                          {
                                                                            v318 = *(unsigned __int16 *)(v317 + 2 * v264);
                                                                            v319 = v1088[7];
                                                                            v320 = v1088[8];
                                                                            v1069 = (v320 - v319) >> 3;
                                                                            if (v1069 > v318)
                                                                            {
                                                                              v321 = v319 + 8 * v318;
                                                                              if (v321 != v320
                                                                                && *(_DWORD *)(v321 + 4) == (_DWORD)v260)
                                                                              {
                                                                                v1050 = result;
                                                                                v1060 = v45;
                                                                                v1032 = a2;
                                                                                v1041 = v21;
                                                                                v1026 = v44;
                                                                                v322 = *(_QWORD *)v44;
                                                                                v323 = HIDWORD(*(_QWORD *)v44);
                                                                                v324 = *(_QWORD *)v44 >> 39;
                                                                                if (v324 < v282
                                                                                  && (v325 = *(_QWORD *)(v281 + 8 * v324)) != 0
                                                                                  && (v326 = *(unsigned __int16 *)(v325 + 2 * (HIDWORD(v322) & 0x7F)),
                                                                                      v287 > v326)
                                                                                  && (v327 = v286 + 8 * v326,
                                                                                      v327 != v285)
                                                                                  && *(_DWORD *)(v327 + 4) == (_DWORD)v323)
                                                                                {
                                                                                  v328 = v280[10] + 16 * v326;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v328 = v280[11];
                                                                                }
                                                                                if (v324 < v292
                                                                                  && (v329 = *(_QWORD *)(v291 + 8 * v324)) != 0
                                                                                  && (v330 = *(unsigned __int16 *)(v329 + 2 * (HIDWORD(v322) & 0x7F)),
                                                                                      v297 > v330)
                                                                                  && (v331 = v296 + 8 * v330,
                                                                                      v331 != v295)
                                                                                  && *(_DWORD *)(v331 + 4) == (_DWORD)v323)
                                                                                {
                                                                                  v332 = (__int128 *)(v290[10] + 24 * v330);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v332 = (__int128 *)v290[11];
                                                                                }
                                                                                if (v324 < v302
                                                                                  && (v333 = *(_QWORD *)(v301 + 8 * v324)) != 0
                                                                                  && (v334 = *(unsigned __int16 *)(v333 + 2 * (HIDWORD(v322) & 0x7F)),
                                                                                      v1288 > v334)
                                                                                  && (v335 = v306 + 8 * v334,
                                                                                      v335 != v305)
                                                                                  && *(_DWORD *)(v335 + 4) == (_DWORD)v323)
                                                                                {
                                                                                  v336 = (arComponents::AlbedoTextureComponent *)(v300[10] + 48 * v334);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v336 = (arComponents::AlbedoTextureComponent *)v300[11];
                                                                                }
                                                                                if (v324 < v1258
                                                                                  && (v337 = *(_QWORD *)(v1278 + 8 * v324)) != 0
                                                                                  && (v338 = *(unsigned __int16 *)(v337 + 2 * (HIDWORD(v322) & 0x7F)),
                                                                                      v1228 > v338)
                                                                                  && (v339 = v1238 + 8 * v338,
                                                                                      v339 != v1248)
                                                                                  && *(_DWORD *)(v339 + 4) == (_DWORD)v323)
                                                                                {
                                                                                  v340 = (__int128 *)(v1268[10] + 16 * v338);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v340 = (__int128 *)v1268[11];
                                                                                }
                                                                                if (v324 < v1198
                                                                                  && (v341 = *(_QWORD *)(v1218 + 8 * v324)) != 0
                                                                                  && (v342 = *(unsigned __int16 *)(v341 + 2 * (HIDWORD(v322) & 0x7F)),
                                                                                      v1168 > v342)
                                                                                  && (v343 = v1178 + 8 * v342,
                                                                                      v343 != v1188)
                                                                                  && *(_DWORD *)(v343 + 4) == (_DWORD)v323)
                                                                                {
                                                                                  v344 = (uint64_t *)(v1208[10] + 8 * v342);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v344 = (uint64_t *)v1208[11];
                                                                                }
                                                                                if (v324 < v1138
                                                                                  && (v345 = *(_QWORD *)(v1158 + 8 * v324)) != 0
                                                                                  && (v346 = *(unsigned __int16 *)(v345 + 2 * (HIDWORD(v322) & 0x7F)),
                                                                                      v1108 > v346)
                                                                                  && (v347 = v1118 + 8 * v346,
                                                                                      v347 != v1128)
                                                                                  && *(_DWORD *)(v347 + 4) == (_DWORD)v323)
                                                                                {
                                                                                  v348 = (__int128 *)(v1148[10] + 16 * v346);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v348 = (__int128 *)v1148[11];
                                                                                }
                                                                                if (v324 < v1078
                                                                                  && (v349 = *(_QWORD *)(v1098 + 8 * v324)) != 0
                                                                                  && (v350 = *(unsigned __int16 *)(v349 + 2 * (HIDWORD(v322) & 0x7F)),
                                                                                      v1069 > v350)
                                                                                  && (v351 = v319 + 8 * v350,
                                                                                      v351 != v320)
                                                                                  && *(_DWORD *)(v351 + 4) == (_DWORD)v323)
                                                                                {
                                                                                  v258 = (int *)(v1088[10] + 4 * v350);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v258 = (int *)v1088[11];
                                                                                }
                                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v322, v46, *(_QWORD *)v328, *(std::__shared_weak_count **)(v328 + 8), v332, v336, v340, v344, v348, v258);
                                                                                v21 = v1041;
                                                                                result = v1050;
                                                                                v44 = v1026;
                                                                                a2 = v1032;
                                                                                v45 = v1060;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v46 += 5;
        v44 += 8;
      }
      while (v44 != v45);
    }
  }
  v26 = (_QWORD *)result[3];
  v27 = v26 + 4;
  if (!v26)
    v27 = 0;
  if (v27 == v21)
  {
    v1296 = *a2;
    v1297 = *((_QWORD *)a2 + 2);
    v48 = v26[7];
    v47 = v26[8];
    if (v48 != v47)
    {
      v49 = (std::__shared_weak_count **)(v26[10] + 8);
      do
      {
        v354 = *result;
        v355 = *(unsigned int *)(v48 + 4);
        v356 = v355 >> 7;
        v357 = *(_QWORD *)(*result + 32);
        if (v355 >> 7 < (*(_QWORD *)(*result + 40) - v357) >> 3)
        {
          v358 = *(_QWORD *)(v357 + 8 * v356);
          if (v358)
          {
            v359 = v355 & 0x7F;
            v360 = *(unsigned __int16 *)(v358 + 2 * v359);
            v363 = v354 + 56;
            v361 = *(_QWORD *)(v354 + 56);
            v362 = *(_QWORD *)(v363 + 8);
            if (v360 < (v362 - v361) >> 3)
            {
              v364 = v361 + 8 * v360;
              if (v364 != v362 && *(_DWORD *)(v364 + 4) == (_DWORD)v355)
              {
                v366 = (_QWORD *)result[1];
                v367 = v366[4];
                if (v356 < (v366[5] - v367) >> 3)
                {
                  v368 = *(_QWORD *)(v367 + 8 * v356);
                  if (v368)
                  {
                    v369 = *(unsigned __int16 *)(v368 + 2 * v359);
                    v372 = v366 + 7;
                    v370 = v366[7];
                    v371 = v372[1];
                    if (v369 < (v371 - v370) >> 3)
                    {
                      v373 = v370 + 8 * v369;
                      if (v373 != v371 && *(_DWORD *)(v373 + 4) == (_DWORD)v355)
                      {
                        v375 = (_QWORD *)result[2];
                        v376 = v375[4];
                        v377 = (v375[5] - v376) >> 3;
                        if (v356 < v377)
                        {
                          v378 = *(_QWORD *)(v376 + 8 * v356);
                          if (v378)
                          {
                            v379 = *(unsigned __int16 *)(v378 + 2 * v359);
                            v381 = v375[7];
                            v380 = v375[8];
                            v382 = (v380 - v381) >> 3;
                            if (v382 > v379)
                            {
                              v383 = v381 + 8 * v379;
                              if (v383 != v380 && *(_DWORD *)(v383 + 4) == (_DWORD)v355)
                              {
                                v385 = (_QWORD *)result[4];
                                v386 = v385[4];
                                v387 = (v385[5] - v386) >> 3;
                                if (v356 < v387)
                                {
                                  v388 = *(_QWORD *)(v386 + 8 * v356);
                                  if (v388)
                                  {
                                    v389 = *(unsigned __int16 *)(v388 + 2 * v359);
                                    v391 = v385[7];
                                    v390 = v385[8];
                                    v392 = (v390 - v391) >> 3;
                                    if (v392 > v389)
                                    {
                                      v393 = v391 + 8 * v389;
                                      if (v393 != v390 && *(_DWORD *)(v393 + 4) == (_DWORD)v355)
                                      {
                                        v395 = (_QWORD *)result[5];
                                        v396 = v395[4];
                                        v397 = (v395[5] - v396) >> 3;
                                        if (v356 < v397)
                                        {
                                          v398 = *(_QWORD *)(v396 + 8 * v356);
                                          if (v398)
                                          {
                                            v399 = *(unsigned __int16 *)(v398 + 2 * v359);
                                            v401 = v395[7];
                                            v400 = v395[8];
                                            v1289 = (v400 - v401) >> 3;
                                            if (v1289 > v399)
                                            {
                                              v402 = v401 + 8 * v399;
                                              if (v402 != v400 && *(_DWORD *)(v402 + 4) == (_DWORD)v355)
                                              {
                                                v1269 = (_QWORD *)result[6];
                                                v1279 = v1269[4];
                                                v1259 = (v1269[5] - v1279) >> 3;
                                                if (v356 < v1259)
                                                {
                                                  v403 = *(_QWORD *)(v1279 + 8 * v356);
                                                  if (v403)
                                                  {
                                                    v404 = *(unsigned __int16 *)(v403 + 2 * v359);
                                                    v1239 = v1269[7];
                                                    v1249 = v1269[8];
                                                    v1229 = (v1249 - v1239) >> 3;
                                                    if (v1229 > v404)
                                                    {
                                                      v405 = v1239 + 8 * v404;
                                                      if (v405 != v1249 && *(_DWORD *)(v405 + 4) == (_DWORD)v355)
                                                      {
                                                        v1209 = (_QWORD *)result[7];
                                                        v1219 = v1209[4];
                                                        v1199 = (v1209[5] - v1219) >> 3;
                                                        if (v356 < v1199)
                                                        {
                                                          v406 = *(_QWORD *)(v1219 + 8 * v356);
                                                          if (v406)
                                                          {
                                                            v407 = *(unsigned __int16 *)(v406 + 2 * v359);
                                                            v1179 = v1209[7];
                                                            v1189 = v1209[8];
                                                            v1169 = (v1189 - v1179) >> 3;
                                                            if (v1169 > v407)
                                                            {
                                                              v408 = v1179 + 8 * v407;
                                                              if (v408 != v1189
                                                                && *(_DWORD *)(v408 + 4) == (_DWORD)v355)
                                                              {
                                                                v1149 = (_QWORD *)result[8];
                                                                v1159 = v1149[4];
                                                                v1139 = (v1149[5] - v1159) >> 3;
                                                                if (v356 < v1139)
                                                                {
                                                                  v409 = *(_QWORD *)(v1159 + 8 * v356);
                                                                  if (v409)
                                                                  {
                                                                    v410 = *(unsigned __int16 *)(v409 + 2 * v359);
                                                                    v1119 = v1149[7];
                                                                    v1129 = v1149[8];
                                                                    v1109 = (v1129 - v1119) >> 3;
                                                                    if (v1109 > v410)
                                                                    {
                                                                      v411 = v1119 + 8 * v410;
                                                                      if (v411 != v1129
                                                                        && *(_DWORD *)(v411 + 4) == (_DWORD)v355)
                                                                      {
                                                                        v1089 = (_QWORD *)result[9];
                                                                        v1099 = v1089[4];
                                                                        v1079 = (v1089[5] - v1099) >> 3;
                                                                        if (v356 < v1079)
                                                                        {
                                                                          v412 = *(_QWORD *)(v1099 + 8 * v356);
                                                                          if (v412)
                                                                          {
                                                                            v413 = *(unsigned __int16 *)(v412 + 2 * v359);
                                                                            v414 = v1089[7];
                                                                            v415 = v1089[8];
                                                                            v1070 = (v415 - v414) >> 3;
                                                                            if (v1070 > v413)
                                                                            {
                                                                              v416 = v414 + 8 * v413;
                                                                              if (v416 != v415
                                                                                && *(_DWORD *)(v416 + 4) == (_DWORD)v355)
                                                                              {
                                                                                v1051 = result;
                                                                                v1061 = v47;
                                                                                v1033 = a2;
                                                                                v1042 = v21;
                                                                                v417 = *(_QWORD *)v48;
                                                                                v418 = HIDWORD(*(_QWORD *)v48);
                                                                                v419 = *(_QWORD *)v48 >> 39;
                                                                                if (v419 < v377
                                                                                  && (v420 = *(_QWORD *)(v376 + 8 * v419)) != 0
                                                                                  && (v421 = *(unsigned __int16 *)(v420 + 2 * (HIDWORD(v417) & 0x7F)),
                                                                                      v382 > v421)
                                                                                  && (v422 = v381 + 8 * v421,
                                                                                      v422 != v380)
                                                                                  && *(_DWORD *)(v422 + 4) == (_DWORD)v418)
                                                                                {
                                                                                  v423 = (__int128 *)(v375[10] + 80 * v421);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v423 = (__int128 *)v375[11];
                                                                                }
                                                                                if (v419 < v387
                                                                                  && (v424 = *(_QWORD *)(v386 + 8 * v419)) != 0
                                                                                  && (v425 = *(unsigned __int16 *)(v424 + 2 * (HIDWORD(v417) & 0x7F)),
                                                                                      v392 > v425)
                                                                                  && (v426 = v391 + 8 * v425,
                                                                                      v426 != v390)
                                                                                  && *(_DWORD *)(v426 + 4) == (_DWORD)v418)
                                                                                {
                                                                                  v427 = (__int128 *)(v385[10] + 24 * v425);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v427 = (__int128 *)v385[11];
                                                                                }
                                                                                if (v419 < v397
                                                                                  && (v428 = *(_QWORD *)(v396 + 8 * v419)) != 0
                                                                                  && (v429 = *(unsigned __int16 *)(v428 + 2 * (HIDWORD(v417) & 0x7F)),
                                                                                      v1289 > v429)
                                                                                  && (v430 = v401 + 8 * v429,
                                                                                      v430 != v400)
                                                                                  && *(_DWORD *)(v430 + 4) == (_DWORD)v418)
                                                                                {
                                                                                  v431 = (arComponents::AlbedoTextureComponent *)(v395[10] + 48 * v429);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v431 = (arComponents::AlbedoTextureComponent *)v395[11];
                                                                                }
                                                                                if (v419 < v1259
                                                                                  && (v432 = *(_QWORD *)(v1279 + 8 * v419)) != 0
                                                                                  && (v433 = *(unsigned __int16 *)(v432 + 2 * (HIDWORD(v417) & 0x7F)),
                                                                                      v1229 > v433)
                                                                                  && (v434 = v1239 + 8 * v433,
                                                                                      v434 != v1249)
                                                                                  && *(_DWORD *)(v434 + 4) == (_DWORD)v418)
                                                                                {
                                                                                  v435 = (__int128 *)(v1269[10] + 16 * v433);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v435 = (__int128 *)v1269[11];
                                                                                }
                                                                                if (v419 < v1199
                                                                                  && (v436 = *(_QWORD *)(v1219 + 8 * v419)) != 0
                                                                                  && (v437 = *(unsigned __int16 *)(v436 + 2 * (HIDWORD(v417) & 0x7F)),
                                                                                      v1169 > v437)
                                                                                  && (v438 = v1179 + 8 * v437,
                                                                                      v438 != v1189)
                                                                                  && *(_DWORD *)(v438 + 4) == (_DWORD)v418)
                                                                                {
                                                                                  v439 = (uint64_t *)(v1209[10] + 8 * v437);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v439 = (uint64_t *)v1209[11];
                                                                                }
                                                                                if (v419 < v1139
                                                                                  && (v440 = *(_QWORD *)(v1159 + 8 * v419)) != 0
                                                                                  && (v441 = *(unsigned __int16 *)(v440 + 2 * (HIDWORD(v417) & 0x7F)),
                                                                                      v1109 > v441)
                                                                                  && (v442 = v1119 + 8 * v441,
                                                                                      v442 != v1129)
                                                                                  && *(_DWORD *)(v442 + 4) == (_DWORD)v418)
                                                                                {
                                                                                  v443 = (__int128 *)(v1149[10] + 16 * v441);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v443 = (__int128 *)v1149[11];
                                                                                }
                                                                                if (v419 < v1079
                                                                                  && (v444 = *(_QWORD *)(v1099 + 8 * v419)) != 0
                                                                                  && (v445 = *(unsigned __int16 *)(v444 + 2 * (HIDWORD(v417) & 0x7F)),
                                                                                      v1070 > v445)
                                                                                  && (v446 = v414 + 8 * v445,
                                                                                      v446 != v415)
                                                                                  && *(_DWORD *)(v446 + 4) == (_DWORD)v418)
                                                                                {
                                                                                  v352 = (int *)(v1089[10] + 4 * v445);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v352 = (int *)v1089[11];
                                                                                }
                                                                                v353 = v49;
                                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v417, v423, (uint64_t)*(v49 - 1), *v49, v427, v431, v435, v439, v443, v352);
                                                                                v49 = v353;
                                                                                v21 = v1042;
                                                                                result = v1051;
                                                                                a2 = v1033;
                                                                                v47 = v1061;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v48 += 8;
        v49 += 2;
      }
      while (v48 != v47);
    }
  }
  v28 = (_QWORD *)result[4];
  v29 = v28 + 4;
  if (!v28)
    v29 = 0;
  if (v29 == v21)
  {
    v1296 = *a2;
    v1297 = *((_QWORD *)a2 + 2);
    v50 = v28[7];
    v51 = v28[8];
    if (v50 != v51)
    {
      v52 = (__int128 *)v28[10];
      do
      {
        v448 = *result;
        v449 = *(unsigned int *)(v50 + 4);
        v450 = v449 >> 7;
        v451 = *(_QWORD *)(*result + 32);
        if (v449 >> 7 < (*(_QWORD *)(*result + 40) - v451) >> 3)
        {
          v452 = *(_QWORD *)(v451 + 8 * v450);
          if (v452)
          {
            v453 = v449 & 0x7F;
            v454 = *(unsigned __int16 *)(v452 + 2 * v453);
            v457 = v448 + 56;
            v455 = *(_QWORD *)(v448 + 56);
            v456 = *(_QWORD *)(v457 + 8);
            if (v454 < (v456 - v455) >> 3)
            {
              v458 = v455 + 8 * v454;
              if (v458 != v456 && *(_DWORD *)(v458 + 4) == (_DWORD)v449)
              {
                v460 = (_QWORD *)result[1];
                v461 = v460[4];
                if (v450 < (v460[5] - v461) >> 3)
                {
                  v462 = *(_QWORD *)(v461 + 8 * v450);
                  if (v462)
                  {
                    v463 = *(unsigned __int16 *)(v462 + 2 * v453);
                    v466 = v460 + 7;
                    v464 = v460[7];
                    v465 = v466[1];
                    if (v463 < (v465 - v464) >> 3)
                    {
                      v467 = v464 + 8 * v463;
                      if (v467 != v465 && *(_DWORD *)(v467 + 4) == (_DWORD)v449)
                      {
                        v469 = (_QWORD *)result[2];
                        v470 = v469[4];
                        v471 = (v469[5] - v470) >> 3;
                        if (v450 < v471)
                        {
                          v472 = *(_QWORD *)(v470 + 8 * v450);
                          if (v472)
                          {
                            v473 = *(unsigned __int16 *)(v472 + 2 * v453);
                            v474 = v469[7];
                            v475 = v469[8];
                            v476 = (v475 - v474) >> 3;
                            if (v476 > v473)
                            {
                              v477 = v474 + 8 * v473;
                              if (v477 != v475 && *(_DWORD *)(v477 + 4) == (_DWORD)v449)
                              {
                                v479 = (_QWORD *)result[3];
                                v480 = v479[4];
                                v481 = (v479[5] - v480) >> 3;
                                if (v450 < v481)
                                {
                                  v482 = *(_QWORD *)(v480 + 8 * v450);
                                  if (v482)
                                  {
                                    v483 = *(unsigned __int16 *)(v482 + 2 * v453);
                                    v485 = v479[7];
                                    v484 = v479[8];
                                    v486 = (v484 - v485) >> 3;
                                    if (v486 > v483)
                                    {
                                      v487 = v485 + 8 * v483;
                                      if (v487 != v484 && *(_DWORD *)(v487 + 4) == (_DWORD)v449)
                                      {
                                        v489 = (_QWORD *)result[5];
                                        v490 = v489[4];
                                        v491 = (v489[5] - v490) >> 3;
                                        if (v450 < v491)
                                        {
                                          v492 = *(_QWORD *)(v490 + 8 * v450);
                                          if (v492)
                                          {
                                            v493 = *(unsigned __int16 *)(v492 + 2 * v453);
                                            v495 = v489[7];
                                            v494 = v489[8];
                                            v1290 = (v494 - v495) >> 3;
                                            if (v1290 > v493)
                                            {
                                              v496 = v495 + 8 * v493;
                                              if (v496 != v494 && *(_DWORD *)(v496 + 4) == (_DWORD)v449)
                                              {
                                                v1270 = (_QWORD *)result[6];
                                                v1280 = v1270[4];
                                                v1260 = (v1270[5] - v1280) >> 3;
                                                if (v450 < v1260)
                                                {
                                                  v497 = *(_QWORD *)(v1280 + 8 * v450);
                                                  if (v497)
                                                  {
                                                    v498 = *(unsigned __int16 *)(v497 + 2 * v453);
                                                    v1240 = v1270[7];
                                                    v1250 = v1270[8];
                                                    v1230 = (v1250 - v1240) >> 3;
                                                    if (v1230 > v498)
                                                    {
                                                      v499 = v1240 + 8 * v498;
                                                      if (v499 != v1250 && *(_DWORD *)(v499 + 4) == (_DWORD)v449)
                                                      {
                                                        v1210 = (_QWORD *)result[7];
                                                        v1220 = v1210[4];
                                                        v1200 = (v1210[5] - v1220) >> 3;
                                                        if (v450 < v1200)
                                                        {
                                                          v500 = *(_QWORD *)(v1220 + 8 * v450);
                                                          if (v500)
                                                          {
                                                            v501 = *(unsigned __int16 *)(v500 + 2 * v453);
                                                            v1180 = v1210[7];
                                                            v1190 = v1210[8];
                                                            v1170 = (v1190 - v1180) >> 3;
                                                            if (v1170 > v501)
                                                            {
                                                              v502 = v1180 + 8 * v501;
                                                              if (v502 != v1190
                                                                && *(_DWORD *)(v502 + 4) == (_DWORD)v449)
                                                              {
                                                                v1150 = (_QWORD *)result[8];
                                                                v1160 = v1150[4];
                                                                v1140 = (v1150[5] - v1160) >> 3;
                                                                if (v450 < v1140)
                                                                {
                                                                  v503 = *(_QWORD *)(v1160 + 8 * v450);
                                                                  if (v503)
                                                                  {
                                                                    v504 = *(unsigned __int16 *)(v503 + 2 * v453);
                                                                    v1120 = v1150[7];
                                                                    v1130 = v1150[8];
                                                                    v1110 = (v1130 - v1120) >> 3;
                                                                    if (v1110 > v504)
                                                                    {
                                                                      v505 = v1120 + 8 * v504;
                                                                      if (v505 != v1130
                                                                        && *(_DWORD *)(v505 + 4) == (_DWORD)v449)
                                                                      {
                                                                        v1090 = (_QWORD *)result[9];
                                                                        v1100 = v1090[4];
                                                                        v1080 = (v1090[5] - v1100) >> 3;
                                                                        if (v450 < v1080)
                                                                        {
                                                                          v506 = *(_QWORD *)(v1100 + 8 * v450);
                                                                          if (v506)
                                                                          {
                                                                            v507 = *(unsigned __int16 *)(v506 + 2 * v453);
                                                                            v508 = v1090[7];
                                                                            v509 = v1090[8];
                                                                            v1071 = (v509 - v508) >> 3;
                                                                            if (v1071 > v507)
                                                                            {
                                                                              v510 = v508 + 8 * v507;
                                                                              if (v510 != v509
                                                                                && *(_DWORD *)(v510 + 4) == (_DWORD)v449)
                                                                              {
                                                                                v1052 = result;
                                                                                v1062 = v51;
                                                                                v1034 = a2;
                                                                                v1043 = v21;
                                                                                v1027 = v50;
                                                                                v511 = *(_QWORD *)v50;
                                                                                v512 = HIDWORD(*(_QWORD *)v50);
                                                                                v513 = *(_QWORD *)v50 >> 39;
                                                                                if (v513 < v471
                                                                                  && (v514 = *(_QWORD *)(v470 + 8 * v513)) != 0
                                                                                  && (v515 = *(unsigned __int16 *)(v514 + 2 * (HIDWORD(v511) & 0x7F)),
                                                                                      v476 > v515)
                                                                                  && (v516 = v474 + 8 * v515,
                                                                                      v516 != v475)
                                                                                  && *(_DWORD *)(v516 + 4) == (_DWORD)v512)
                                                                                {
                                                                                  v517 = (__int128 *)(v469[10] + 80 * v515);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v517 = (__int128 *)v469[11];
                                                                                }
                                                                                if (v513 < v481
                                                                                  && (v518 = *(_QWORD *)(v480 + 8 * v513)) != 0
                                                                                  && (v519 = *(unsigned __int16 *)(v518 + 2 * (HIDWORD(v511) & 0x7F)),
                                                                                      v486 > v519)
                                                                                  && (v520 = v485 + 8 * v519,
                                                                                      v520 != v484)
                                                                                  && *(_DWORD *)(v520 + 4) == (_DWORD)v512)
                                                                                {
                                                                                  v521 = v479[10] + 16 * v519;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v521 = v479[11];
                                                                                }
                                                                                if (v513 < v491
                                                                                  && (v522 = *(_QWORD *)(v490 + 8 * v513)) != 0
                                                                                  && (v523 = *(unsigned __int16 *)(v522 + 2 * (HIDWORD(v511) & 0x7F)),
                                                                                      v1290 > v523)
                                                                                  && (v524 = v495 + 8 * v523,
                                                                                      v524 != v494)
                                                                                  && *(_DWORD *)(v524 + 4) == (_DWORD)v512)
                                                                                {
                                                                                  v525 = (arComponents::AlbedoTextureComponent *)(v489[10] + 48 * v523);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v525 = (arComponents::AlbedoTextureComponent *)v489[11];
                                                                                }
                                                                                if (v513 < v1260
                                                                                  && (v526 = *(_QWORD *)(v1280 + 8 * v513)) != 0
                                                                                  && (v527 = *(unsigned __int16 *)(v526 + 2 * (HIDWORD(v511) & 0x7F)),
                                                                                      v1230 > v527)
                                                                                  && (v528 = v1240 + 8 * v527,
                                                                                      v528 != v1250)
                                                                                  && *(_DWORD *)(v528 + 4) == (_DWORD)v512)
                                                                                {
                                                                                  v529 = (__int128 *)(v1270[10] + 16 * v527);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v529 = (__int128 *)v1270[11];
                                                                                }
                                                                                if (v513 < v1200
                                                                                  && (v530 = *(_QWORD *)(v1220 + 8 * v513)) != 0
                                                                                  && (v531 = *(unsigned __int16 *)(v530 + 2 * (HIDWORD(v511) & 0x7F)),
                                                                                      v1170 > v531)
                                                                                  && (v532 = v1180 + 8 * v531,
                                                                                      v532 != v1190)
                                                                                  && *(_DWORD *)(v532 + 4) == (_DWORD)v512)
                                                                                {
                                                                                  v533 = (uint64_t *)(v1210[10] + 8 * v531);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v533 = (uint64_t *)v1210[11];
                                                                                }
                                                                                if (v513 < v1140
                                                                                  && (v534 = *(_QWORD *)(v1160 + 8 * v513)) != 0
                                                                                  && (v535 = *(unsigned __int16 *)(v534 + 2 * (HIDWORD(v511) & 0x7F)),
                                                                                      v1110 > v535)
                                                                                  && (v536 = v1120 + 8 * v535,
                                                                                      v536 != v1130)
                                                                                  && *(_DWORD *)(v536 + 4) == (_DWORD)v512)
                                                                                {
                                                                                  v537 = (__int128 *)(v1150[10] + 16 * v535);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v537 = (__int128 *)v1150[11];
                                                                                }
                                                                                if (v513 < v1080
                                                                                  && (v538 = *(_QWORD *)(v1100 + 8 * v513)) != 0
                                                                                  && (v539 = *(unsigned __int16 *)(v538 + 2 * (HIDWORD(v511) & 0x7F)),
                                                                                      v1071 > v539)
                                                                                  && (v540 = v508 + 8 * v539,
                                                                                      v540 != v509)
                                                                                  && *(_DWORD *)(v540 + 4) == (_DWORD)v512)
                                                                                {
                                                                                  v447 = (int *)(v1090[10] + 4 * v539);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v447 = (int *)v1090[11];
                                                                                }
                                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v511, v517, *(_QWORD *)v521, *(std::__shared_weak_count **)(v521 + 8), v52, v525, v529, v533, v537, v447);
                                                                                v21 = v1043;
                                                                                result = v1052;
                                                                                v50 = v1027;
                                                                                a2 = v1034;
                                                                                v51 = v1062;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v52 = (__int128 *)((char *)v52 + 24);
        v50 += 8;
      }
      while (v50 != v51);
    }
  }
  v30 = (_QWORD *)result[5];
  v31 = v30 + 4;
  if (!v30)
    v31 = 0;
  if (v31 == v21)
  {
    v1296 = *a2;
    v1297 = *((_QWORD *)a2 + 2);
    v53 = v30[7];
    v54 = v30[8];
    if (v53 != v54)
    {
      v55 = (arComponents::AlbedoTextureComponent *)v30[10];
      do
      {
        v542 = *result;
        v543 = *(unsigned int *)(v53 + 4);
        v544 = v543 >> 7;
        v545 = *(_QWORD *)(*result + 32);
        if (v543 >> 7 < (*(_QWORD *)(*result + 40) - v545) >> 3)
        {
          v546 = *(_QWORD *)(v545 + 8 * v544);
          if (v546)
          {
            v547 = v543 & 0x7F;
            v548 = *(unsigned __int16 *)(v546 + 2 * v547);
            v551 = v542 + 56;
            v549 = *(_QWORD *)(v542 + 56);
            v550 = *(_QWORD *)(v551 + 8);
            if (v548 < (v550 - v549) >> 3)
            {
              v552 = v549 + 8 * v548;
              if (v552 != v550 && *(_DWORD *)(v552 + 4) == (_DWORD)v543)
              {
                v554 = (_QWORD *)result[1];
                v555 = v554[4];
                if (v544 < (v554[5] - v555) >> 3)
                {
                  v556 = *(_QWORD *)(v555 + 8 * v544);
                  if (v556)
                  {
                    v557 = *(unsigned __int16 *)(v556 + 2 * v547);
                    v560 = v554 + 7;
                    v558 = v554[7];
                    v559 = v560[1];
                    if (v557 < (v559 - v558) >> 3)
                    {
                      v561 = v558 + 8 * v557;
                      if (v561 != v559 && *(_DWORD *)(v561 + 4) == (_DWORD)v543)
                      {
                        v563 = (_QWORD *)result[2];
                        v564 = v563[4];
                        v565 = (v563[5] - v564) >> 3;
                        if (v544 < v565)
                        {
                          v566 = *(_QWORD *)(v564 + 8 * v544);
                          if (v566)
                          {
                            v567 = *(unsigned __int16 *)(v566 + 2 * v547);
                            v568 = v563[7];
                            v569 = v563[8];
                            v570 = (v569 - v568) >> 3;
                            if (v570 > v567)
                            {
                              v571 = v568 + 8 * v567;
                              if (v571 != v569 && *(_DWORD *)(v571 + 4) == (_DWORD)v543)
                              {
                                v573 = (_QWORD *)result[3];
                                v574 = v573[4];
                                v575 = (v573[5] - v574) >> 3;
                                if (v544 < v575)
                                {
                                  v576 = *(_QWORD *)(v574 + 8 * v544);
                                  if (v576)
                                  {
                                    v577 = *(unsigned __int16 *)(v576 + 2 * v547);
                                    v579 = v573[7];
                                    v578 = v573[8];
                                    v580 = (v578 - v579) >> 3;
                                    if (v580 > v577)
                                    {
                                      v581 = v579 + 8 * v577;
                                      if (v581 != v578 && *(_DWORD *)(v581 + 4) == (_DWORD)v543)
                                      {
                                        v583 = (_QWORD *)result[4];
                                        v584 = v583[4];
                                        v585 = (v583[5] - v584) >> 3;
                                        if (v544 < v585)
                                        {
                                          v586 = *(_QWORD *)(v584 + 8 * v544);
                                          if (v586)
                                          {
                                            v587 = *(unsigned __int16 *)(v586 + 2 * v547);
                                            v589 = v583[7];
                                            v588 = v583[8];
                                            v1291 = (v588 - v589) >> 3;
                                            if (v1291 > v587)
                                            {
                                              v590 = v589 + 8 * v587;
                                              if (v590 != v588 && *(_DWORD *)(v590 + 4) == (_DWORD)v543)
                                              {
                                                v1271 = (_QWORD *)result[6];
                                                v1281 = v1271[4];
                                                v1261 = (v1271[5] - v1281) >> 3;
                                                if (v544 < v1261)
                                                {
                                                  v591 = *(_QWORD *)(v1281 + 8 * v544);
                                                  if (v591)
                                                  {
                                                    v592 = *(unsigned __int16 *)(v591 + 2 * v547);
                                                    v1241 = v1271[7];
                                                    v1251 = v1271[8];
                                                    v1231 = (v1251 - v1241) >> 3;
                                                    if (v1231 > v592)
                                                    {
                                                      v593 = v1241 + 8 * v592;
                                                      if (v593 != v1251 && *(_DWORD *)(v593 + 4) == (_DWORD)v543)
                                                      {
                                                        v1211 = (_QWORD *)result[7];
                                                        v1221 = v1211[4];
                                                        v1201 = (v1211[5] - v1221) >> 3;
                                                        if (v544 < v1201)
                                                        {
                                                          v594 = *(_QWORD *)(v1221 + 8 * v544);
                                                          if (v594)
                                                          {
                                                            v595 = *(unsigned __int16 *)(v594 + 2 * v547);
                                                            v1181 = v1211[7];
                                                            v1191 = v1211[8];
                                                            v1171 = (v1191 - v1181) >> 3;
                                                            if (v1171 > v595)
                                                            {
                                                              v596 = v1181 + 8 * v595;
                                                              if (v596 != v1191
                                                                && *(_DWORD *)(v596 + 4) == (_DWORD)v543)
                                                              {
                                                                v1151 = (_QWORD *)result[8];
                                                                v1161 = v1151[4];
                                                                v1141 = (v1151[5] - v1161) >> 3;
                                                                if (v544 < v1141)
                                                                {
                                                                  v597 = *(_QWORD *)(v1161 + 8 * v544);
                                                                  if (v597)
                                                                  {
                                                                    v598 = *(unsigned __int16 *)(v597 + 2 * v547);
                                                                    v1121 = v1151[7];
                                                                    v1131 = v1151[8];
                                                                    v1111 = (v1131 - v1121) >> 3;
                                                                    if (v1111 > v598)
                                                                    {
                                                                      v599 = v1121 + 8 * v598;
                                                                      if (v599 != v1131
                                                                        && *(_DWORD *)(v599 + 4) == (_DWORD)v543)
                                                                      {
                                                                        v1091 = (_QWORD *)result[9];
                                                                        v1101 = v1091[4];
                                                                        v1081 = (v1091[5] - v1101) >> 3;
                                                                        if (v544 < v1081)
                                                                        {
                                                                          v600 = *(_QWORD *)(v1101 + 8 * v544);
                                                                          if (v600)
                                                                          {
                                                                            v601 = *(unsigned __int16 *)(v600 + 2 * v547);
                                                                            v602 = v1091[7];
                                                                            v603 = v1091[8];
                                                                            v1072 = (v603 - v602) >> 3;
                                                                            if (v1072 > v601)
                                                                            {
                                                                              v604 = v602 + 8 * v601;
                                                                              if (v604 != v603
                                                                                && *(_DWORD *)(v604 + 4) == (_DWORD)v543)
                                                                              {
                                                                                v1053 = result;
                                                                                v1063 = v54;
                                                                                v1035 = a2;
                                                                                v1044 = v21;
                                                                                v1028 = v53;
                                                                                v605 = *(_QWORD *)v53;
                                                                                v606 = HIDWORD(*(_QWORD *)v53);
                                                                                v607 = *(_QWORD *)v53 >> 39;
                                                                                if (v607 < v565
                                                                                  && (v608 = *(_QWORD *)(v564 + 8 * v607)) != 0
                                                                                  && (v609 = *(unsigned __int16 *)(v608 + 2 * (HIDWORD(v605) & 0x7F)),
                                                                                      v570 > v609)
                                                                                  && (v610 = v568 + 8 * v609,
                                                                                      v610 != v569)
                                                                                  && *(_DWORD *)(v610 + 4) == (_DWORD)v606)
                                                                                {
                                                                                  v611 = (__int128 *)(v563[10] + 80 * v609);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v611 = (__int128 *)v563[11];
                                                                                }
                                                                                if (v607 < v575
                                                                                  && (v612 = *(_QWORD *)(v574 + 8 * v607)) != 0
                                                                                  && (v613 = *(unsigned __int16 *)(v612 + 2 * (HIDWORD(v605) & 0x7F)),
                                                                                      v580 > v613)
                                                                                  && (v614 = v579 + 8 * v613,
                                                                                      v614 != v578)
                                                                                  && *(_DWORD *)(v614 + 4) == (_DWORD)v606)
                                                                                {
                                                                                  v615 = v573[10] + 16 * v613;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v615 = v573[11];
                                                                                }
                                                                                if (v607 < v585
                                                                                  && (v616 = *(_QWORD *)(v584 + 8 * v607)) != 0
                                                                                  && (v617 = *(unsigned __int16 *)(v616 + 2 * (HIDWORD(v605) & 0x7F)),
                                                                                      v1291 > v617)
                                                                                  && (v618 = v589 + 8 * v617,
                                                                                      v618 != v588)
                                                                                  && *(_DWORD *)(v618 + 4) == (_DWORD)v606)
                                                                                {
                                                                                  v619 = (__int128 *)(v583[10] + 24 * v617);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v619 = (__int128 *)v583[11];
                                                                                }
                                                                                if (v607 < v1261
                                                                                  && (v620 = *(_QWORD *)(v1281 + 8 * v607)) != 0
                                                                                  && (v621 = *(unsigned __int16 *)(v620 + 2 * (HIDWORD(v605) & 0x7F)),
                                                                                      v1231 > v621)
                                                                                  && (v622 = v1241 + 8 * v621,
                                                                                      v622 != v1251)
                                                                                  && *(_DWORD *)(v622 + 4) == (_DWORD)v606)
                                                                                {
                                                                                  v623 = (__int128 *)(v1271[10] + 16 * v621);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v623 = (__int128 *)v1271[11];
                                                                                }
                                                                                if (v607 < v1201
                                                                                  && (v624 = *(_QWORD *)(v1221 + 8 * v607)) != 0
                                                                                  && (v625 = *(unsigned __int16 *)(v624 + 2 * (HIDWORD(v605) & 0x7F)),
                                                                                      v1171 > v625)
                                                                                  && (v626 = v1181 + 8 * v625,
                                                                                      v626 != v1191)
                                                                                  && *(_DWORD *)(v626 + 4) == (_DWORD)v606)
                                                                                {
                                                                                  v627 = (uint64_t *)(v1211[10] + 8 * v625);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v627 = (uint64_t *)v1211[11];
                                                                                }
                                                                                if (v607 < v1141
                                                                                  && (v628 = *(_QWORD *)(v1161 + 8 * v607)) != 0
                                                                                  && (v629 = *(unsigned __int16 *)(v628 + 2 * (HIDWORD(v605) & 0x7F)),
                                                                                      v1111 > v629)
                                                                                  && (v630 = v1121 + 8 * v629,
                                                                                      v630 != v1131)
                                                                                  && *(_DWORD *)(v630 + 4) == (_DWORD)v606)
                                                                                {
                                                                                  v631 = (__int128 *)(v1151[10] + 16 * v629);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v631 = (__int128 *)v1151[11];
                                                                                }
                                                                                if (v607 < v1081
                                                                                  && (v632 = *(_QWORD *)(v1101 + 8 * v607)) != 0
                                                                                  && (v633 = *(unsigned __int16 *)(v632 + 2 * (HIDWORD(v605) & 0x7F)),
                                                                                      v1072 > v633)
                                                                                  && (v634 = v602 + 8 * v633,
                                                                                      v634 != v603)
                                                                                  && *(_DWORD *)(v634 + 4) == (_DWORD)v606)
                                                                                {
                                                                                  v541 = (int *)(v1091[10] + 4 * v633);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v541 = (int *)v1091[11];
                                                                                }
                                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v605, v611, *(_QWORD *)v615, *(std::__shared_weak_count **)(v615 + 8), v619, v55, v623, v627, v631, v541);
                                                                                v21 = v1044;
                                                                                result = v1053;
                                                                                v53 = v1028;
                                                                                a2 = v1035;
                                                                                v54 = v1063;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v55 = (arComponents::AlbedoTextureComponent *)((char *)v55 + 48);
        v53 += 8;
      }
      while (v53 != v54);
    }
  }
  v32 = (_QWORD *)result[6];
  v33 = v32 + 4;
  if (!v32)
    v33 = 0;
  if (v33 == v21)
  {
    v1296 = *a2;
    v1297 = *((_QWORD *)a2 + 2);
    v56 = v32[7];
    v57 = v32[8];
    if (v56 != v57)
    {
      v58 = (__int128 *)v32[10];
      do
      {
        v636 = *result;
        v637 = *(unsigned int *)(v56 + 4);
        v638 = v637 >> 7;
        v639 = *(_QWORD *)(*result + 32);
        if (v637 >> 7 < (*(_QWORD *)(*result + 40) - v639) >> 3)
        {
          v640 = *(_QWORD *)(v639 + 8 * v638);
          if (v640)
          {
            v641 = v637 & 0x7F;
            v642 = *(unsigned __int16 *)(v640 + 2 * v641);
            v645 = v636 + 56;
            v643 = *(_QWORD *)(v636 + 56);
            v644 = *(_QWORD *)(v645 + 8);
            if (v642 < (v644 - v643) >> 3)
            {
              v646 = v643 + 8 * v642;
              if (v646 != v644 && *(_DWORD *)(v646 + 4) == (_DWORD)v637)
              {
                v648 = (_QWORD *)result[1];
                v649 = v648[4];
                if (v638 < (v648[5] - v649) >> 3)
                {
                  v650 = *(_QWORD *)(v649 + 8 * v638);
                  if (v650)
                  {
                    v651 = *(unsigned __int16 *)(v650 + 2 * v641);
                    v654 = v648 + 7;
                    v652 = v648[7];
                    v653 = v654[1];
                    if (v651 < (v653 - v652) >> 3)
                    {
                      v655 = v652 + 8 * v651;
                      if (v655 != v653 && *(_DWORD *)(v655 + 4) == (_DWORD)v637)
                      {
                        v657 = (_QWORD *)result[2];
                        v658 = v657[4];
                        v659 = (v657[5] - v658) >> 3;
                        if (v638 < v659)
                        {
                          v660 = *(_QWORD *)(v658 + 8 * v638);
                          if (v660)
                          {
                            v661 = *(unsigned __int16 *)(v660 + 2 * v641);
                            v662 = v657[7];
                            v663 = v657[8];
                            v664 = (v663 - v662) >> 3;
                            if (v664 > v661)
                            {
                              v665 = v662 + 8 * v661;
                              if (v665 != v663 && *(_DWORD *)(v665 + 4) == (_DWORD)v637)
                              {
                                v667 = (_QWORD *)result[3];
                                v668 = v667[4];
                                v669 = (v667[5] - v668) >> 3;
                                if (v638 < v669)
                                {
                                  v670 = *(_QWORD *)(v668 + 8 * v638);
                                  if (v670)
                                  {
                                    v671 = *(unsigned __int16 *)(v670 + 2 * v641);
                                    v673 = v667[7];
                                    v672 = v667[8];
                                    v674 = (v672 - v673) >> 3;
                                    if (v674 > v671)
                                    {
                                      v675 = v673 + 8 * v671;
                                      if (v675 != v672 && *(_DWORD *)(v675 + 4) == (_DWORD)v637)
                                      {
                                        v677 = (_QWORD *)result[4];
                                        v678 = v677[4];
                                        v679 = (v677[5] - v678) >> 3;
                                        if (v638 < v679)
                                        {
                                          v680 = *(_QWORD *)(v678 + 8 * v638);
                                          if (v680)
                                          {
                                            v681 = *(unsigned __int16 *)(v680 + 2 * v641);
                                            v683 = v677[7];
                                            v682 = v677[8];
                                            v1292 = (v682 - v683) >> 3;
                                            if (v1292 > v681)
                                            {
                                              v684 = v683 + 8 * v681;
                                              if (v684 != v682 && *(_DWORD *)(v684 + 4) == (_DWORD)v637)
                                              {
                                                v1272 = (_QWORD *)result[5];
                                                v1282 = v1272[4];
                                                v1262 = (v1272[5] - v1282) >> 3;
                                                if (v638 < v1262)
                                                {
                                                  v685 = *(_QWORD *)(v1282 + 8 * v638);
                                                  if (v685)
                                                  {
                                                    v686 = *(unsigned __int16 *)(v685 + 2 * v641);
                                                    v1242 = v1272[7];
                                                    v1252 = v1272[8];
                                                    v1232 = (v1252 - v1242) >> 3;
                                                    if (v1232 > v686)
                                                    {
                                                      v687 = v1242 + 8 * v686;
                                                      if (v687 != v1252 && *(_DWORD *)(v687 + 4) == (_DWORD)v637)
                                                      {
                                                        v1212 = (_QWORD *)result[7];
                                                        v1222 = v1212[4];
                                                        v1202 = (v1212[5] - v1222) >> 3;
                                                        if (v638 < v1202)
                                                        {
                                                          v688 = *(_QWORD *)(v1222 + 8 * v638);
                                                          if (v688)
                                                          {
                                                            v689 = *(unsigned __int16 *)(v688 + 2 * v641);
                                                            v1182 = v1212[7];
                                                            v1192 = v1212[8];
                                                            v1172 = (v1192 - v1182) >> 3;
                                                            if (v1172 > v689)
                                                            {
                                                              v690 = v1182 + 8 * v689;
                                                              if (v690 != v1192
                                                                && *(_DWORD *)(v690 + 4) == (_DWORD)v637)
                                                              {
                                                                v1152 = (_QWORD *)result[8];
                                                                v1162 = v1152[4];
                                                                v1142 = (v1152[5] - v1162) >> 3;
                                                                if (v638 < v1142)
                                                                {
                                                                  v691 = *(_QWORD *)(v1162 + 8 * v638);
                                                                  if (v691)
                                                                  {
                                                                    v692 = *(unsigned __int16 *)(v691 + 2 * v641);
                                                                    v1122 = v1152[7];
                                                                    v1132 = v1152[8];
                                                                    v1112 = (v1132 - v1122) >> 3;
                                                                    if (v1112 > v692)
                                                                    {
                                                                      v693 = v1122 + 8 * v692;
                                                                      if (v693 != v1132
                                                                        && *(_DWORD *)(v693 + 4) == (_DWORD)v637)
                                                                      {
                                                                        v1092 = (_QWORD *)result[9];
                                                                        v1102 = v1092[4];
                                                                        v1082 = (v1092[5] - v1102) >> 3;
                                                                        if (v638 < v1082)
                                                                        {
                                                                          v694 = *(_QWORD *)(v1102 + 8 * v638);
                                                                          if (v694)
                                                                          {
                                                                            v695 = *(unsigned __int16 *)(v694 + 2 * v641);
                                                                            v696 = v1092[7];
                                                                            v697 = v1092[8];
                                                                            v1073 = (v697 - v696) >> 3;
                                                                            if (v1073 > v695)
                                                                            {
                                                                              v698 = v696 + 8 * v695;
                                                                              if (v698 != v697
                                                                                && *(_DWORD *)(v698 + 4) == (_DWORD)v637)
                                                                              {
                                                                                v1054 = result;
                                                                                v1064 = v57;
                                                                                v1036 = a2;
                                                                                v1045 = v21;
                                                                                v1029 = v56;
                                                                                v699 = *(_QWORD *)v56;
                                                                                v700 = HIDWORD(*(_QWORD *)v56);
                                                                                v701 = *(_QWORD *)v56 >> 39;
                                                                                if (v701 < v659
                                                                                  && (v702 = *(_QWORD *)(v658 + 8 * v701)) != 0
                                                                                  && (v703 = *(unsigned __int16 *)(v702 + 2 * (HIDWORD(v699) & 0x7F)),
                                                                                      v664 > v703)
                                                                                  && (v704 = v662 + 8 * v703,
                                                                                      v704 != v663)
                                                                                  && *(_DWORD *)(v704 + 4) == (_DWORD)v700)
                                                                                {
                                                                                  v705 = (__int128 *)(v657[10] + 80 * v703);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v705 = (__int128 *)v657[11];
                                                                                }
                                                                                if (v701 < v669
                                                                                  && (v706 = *(_QWORD *)(v668 + 8 * v701)) != 0
                                                                                  && (v707 = *(unsigned __int16 *)(v706 + 2 * (HIDWORD(v699) & 0x7F)),
                                                                                      v674 > v707)
                                                                                  && (v708 = v673 + 8 * v707,
                                                                                      v708 != v672)
                                                                                  && *(_DWORD *)(v708 + 4) == (_DWORD)v700)
                                                                                {
                                                                                  v709 = v667[10] + 16 * v707;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v709 = v667[11];
                                                                                }
                                                                                if (v701 < v679
                                                                                  && (v710 = *(_QWORD *)(v678 + 8 * v701)) != 0
                                                                                  && (v711 = *(unsigned __int16 *)(v710 + 2 * (HIDWORD(v699) & 0x7F)),
                                                                                      v1292 > v711)
                                                                                  && (v712 = v683 + 8 * v711,
                                                                                      v712 != v682)
                                                                                  && *(_DWORD *)(v712 + 4) == (_DWORD)v700)
                                                                                {
                                                                                  v713 = (__int128 *)(v677[10] + 24 * v711);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v713 = (__int128 *)v677[11];
                                                                                }
                                                                                if (v701 < v1262
                                                                                  && (v714 = *(_QWORD *)(v1282 + 8 * v701)) != 0
                                                                                  && (v715 = *(unsigned __int16 *)(v714 + 2 * (HIDWORD(v699) & 0x7F)),
                                                                                      v1232 > v715)
                                                                                  && (v716 = v1242 + 8 * v715,
                                                                                      v716 != v1252)
                                                                                  && *(_DWORD *)(v716 + 4) == (_DWORD)v700)
                                                                                {
                                                                                  v717 = (arComponents::AlbedoTextureComponent *)(v1272[10] + 48 * v715);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v717 = (arComponents::AlbedoTextureComponent *)v1272[11];
                                                                                }
                                                                                if (v701 < v1202
                                                                                  && (v718 = *(_QWORD *)(v1222 + 8 * v701)) != 0
                                                                                  && (v719 = *(unsigned __int16 *)(v718 + 2 * (HIDWORD(v699) & 0x7F)),
                                                                                      v1172 > v719)
                                                                                  && (v720 = v1182 + 8 * v719,
                                                                                      v720 != v1192)
                                                                                  && *(_DWORD *)(v720 + 4) == (_DWORD)v700)
                                                                                {
                                                                                  v721 = (uint64_t *)(v1212[10] + 8 * v719);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v721 = (uint64_t *)v1212[11];
                                                                                }
                                                                                if (v701 < v1142
                                                                                  && (v722 = *(_QWORD *)(v1162 + 8 * v701)) != 0
                                                                                  && (v723 = *(unsigned __int16 *)(v722 + 2 * (HIDWORD(v699) & 0x7F)),
                                                                                      v1112 > v723)
                                                                                  && (v724 = v1122 + 8 * v723,
                                                                                      v724 != v1132)
                                                                                  && *(_DWORD *)(v724 + 4) == (_DWORD)v700)
                                                                                {
                                                                                  v725 = (__int128 *)(v1152[10] + 16 * v723);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v725 = (__int128 *)v1152[11];
                                                                                }
                                                                                if (v701 < v1082
                                                                                  && (v726 = *(_QWORD *)(v1102 + 8 * v701)) != 0
                                                                                  && (v727 = *(unsigned __int16 *)(v726 + 2 * (HIDWORD(v699) & 0x7F)),
                                                                                      v1073 > v727)
                                                                                  && (v728 = v696 + 8 * v727,
                                                                                      v728 != v697)
                                                                                  && *(_DWORD *)(v728 + 4) == (_DWORD)v700)
                                                                                {
                                                                                  v635 = (int *)(v1092[10] + 4 * v727);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v635 = (int *)v1092[11];
                                                                                }
                                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v699, v705, *(_QWORD *)v709, *(std::__shared_weak_count **)(v709 + 8), v713, v717, v58, v721, v725, v635);
                                                                                v21 = v1045;
                                                                                result = v1054;
                                                                                v56 = v1029;
                                                                                a2 = v1036;
                                                                                v57 = v1064;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v58;
        v56 += 8;
      }
      while (v56 != v57);
    }
  }
  v34 = (_QWORD *)result[7];
  v35 = v34 + 4;
  if (!v34)
    v35 = 0;
  if (v35 == v21)
  {
    v1296 = *a2;
    v1297 = *((_QWORD *)a2 + 2);
    v60 = v34[7];
    v59 = v34[8];
    if (v60 != v59)
    {
      v61 = (uint64_t *)v34[10];
      do
      {
        v731 = *result;
        v732 = *(unsigned int *)(v60 + 4);
        v733 = v732 >> 7;
        v734 = *(_QWORD *)(*result + 32);
        if (v732 >> 7 < (*(_QWORD *)(*result + 40) - v734) >> 3)
        {
          v735 = *(_QWORD *)(v734 + 8 * v733);
          if (v735)
          {
            v736 = v732 & 0x7F;
            v737 = *(unsigned __int16 *)(v735 + 2 * v736);
            v740 = v731 + 56;
            v738 = *(_QWORD *)(v731 + 56);
            v739 = *(_QWORD *)(v740 + 8);
            if (v737 < (v739 - v738) >> 3)
            {
              v741 = v738 + 8 * v737;
              if (v741 != v739 && *(_DWORD *)(v741 + 4) == (_DWORD)v732)
              {
                v743 = (_QWORD *)result[1];
                v744 = v743[4];
                if (v733 < (v743[5] - v744) >> 3)
                {
                  v745 = *(_QWORD *)(v744 + 8 * v733);
                  if (v745)
                  {
                    v746 = *(unsigned __int16 *)(v745 + 2 * v736);
                    v749 = v743 + 7;
                    v747 = v743[7];
                    v748 = v749[1];
                    if (v746 < (v748 - v747) >> 3)
                    {
                      v750 = v747 + 8 * v746;
                      if (v750 != v748 && *(_DWORD *)(v750 + 4) == (_DWORD)v732)
                      {
                        v752 = (_QWORD *)result[2];
                        v753 = v752[4];
                        v754 = (v752[5] - v753) >> 3;
                        if (v733 < v754)
                        {
                          v755 = *(_QWORD *)(v753 + 8 * v733);
                          if (v755)
                          {
                            v756 = *(unsigned __int16 *)(v755 + 2 * v736);
                            v757 = v752[7];
                            v758 = v752[8];
                            v759 = (v758 - v757) >> 3;
                            if (v759 > v756)
                            {
                              v760 = v757 + 8 * v756;
                              if (v760 != v758 && *(_DWORD *)(v760 + 4) == (_DWORD)v732)
                              {
                                v762 = (_QWORD *)result[3];
                                v763 = v762[4];
                                v764 = (v762[5] - v763) >> 3;
                                if (v733 < v764)
                                {
                                  v765 = *(_QWORD *)(v763 + 8 * v733);
                                  if (v765)
                                  {
                                    v766 = *(unsigned __int16 *)(v765 + 2 * v736);
                                    v768 = v762[7];
                                    v767 = v762[8];
                                    v769 = (v767 - v768) >> 3;
                                    if (v769 > v766)
                                    {
                                      v770 = v768 + 8 * v766;
                                      if (v770 != v767 && *(_DWORD *)(v770 + 4) == (_DWORD)v732)
                                      {
                                        v772 = (_QWORD *)result[4];
                                        v773 = v772[4];
                                        v774 = (v772[5] - v773) >> 3;
                                        if (v733 < v774)
                                        {
                                          v775 = *(_QWORD *)(v773 + 8 * v733);
                                          if (v775)
                                          {
                                            v776 = *(unsigned __int16 *)(v775 + 2 * v736);
                                            v778 = v772[7];
                                            v777 = v772[8];
                                            v1293 = (v777 - v778) >> 3;
                                            if (v1293 > v776)
                                            {
                                              v779 = v778 + 8 * v776;
                                              if (v779 != v777 && *(_DWORD *)(v779 + 4) == (_DWORD)v732)
                                              {
                                                v1273 = (_QWORD *)result[5];
                                                v1283 = v1273[4];
                                                v1263 = (v1273[5] - v1283) >> 3;
                                                if (v733 < v1263)
                                                {
                                                  v780 = *(_QWORD *)(v1283 + 8 * v733);
                                                  if (v780)
                                                  {
                                                    v781 = *(unsigned __int16 *)(v780 + 2 * v736);
                                                    v1243 = v1273[7];
                                                    v1253 = v1273[8];
                                                    v1233 = (v1253 - v1243) >> 3;
                                                    if (v1233 > v781)
                                                    {
                                                      v782 = v1243 + 8 * v781;
                                                      if (v782 != v1253 && *(_DWORD *)(v782 + 4) == (_DWORD)v732)
                                                      {
                                                        v1213 = (_QWORD *)result[6];
                                                        v1223 = v1213[4];
                                                        v1203 = (v1213[5] - v1223) >> 3;
                                                        if (v733 < v1203)
                                                        {
                                                          v783 = *(_QWORD *)(v1223 + 8 * v733);
                                                          if (v783)
                                                          {
                                                            v784 = *(unsigned __int16 *)(v783 + 2 * v736);
                                                            v1183 = v1213[7];
                                                            v1193 = v1213[8];
                                                            v1173 = (v1193 - v1183) >> 3;
                                                            if (v1173 > v784)
                                                            {
                                                              v785 = v1183 + 8 * v784;
                                                              if (v785 != v1193
                                                                && *(_DWORD *)(v785 + 4) == (_DWORD)v732)
                                                              {
                                                                v1153 = (_QWORD *)result[8];
                                                                v1163 = v1153[4];
                                                                v1143 = (v1153[5] - v1163) >> 3;
                                                                if (v733 < v1143)
                                                                {
                                                                  v786 = *(_QWORD *)(v1163 + 8 * v733);
                                                                  if (v786)
                                                                  {
                                                                    v787 = *(unsigned __int16 *)(v786 + 2 * v736);
                                                                    v1123 = v1153[7];
                                                                    v1133 = v1153[8];
                                                                    v1113 = (v1133 - v1123) >> 3;
                                                                    if (v1113 > v787)
                                                                    {
                                                                      v788 = v1123 + 8 * v787;
                                                                      if (v788 != v1133
                                                                        && *(_DWORD *)(v788 + 4) == (_DWORD)v732)
                                                                      {
                                                                        v1093 = (_QWORD *)result[9];
                                                                        v1103 = v1093[4];
                                                                        v1083 = (v1093[5] - v1103) >> 3;
                                                                        if (v733 < v1083)
                                                                        {
                                                                          v789 = *(_QWORD *)(v1103 + 8 * v733);
                                                                          if (v789)
                                                                          {
                                                                            v790 = *(unsigned __int16 *)(v789 + 2 * v736);
                                                                            v791 = v1093[7];
                                                                            v792 = v1093[8];
                                                                            v1074 = (v792 - v791) >> 3;
                                                                            if (v1074 > v790)
                                                                            {
                                                                              v793 = v791 + 8 * v790;
                                                                              if (v793 != v792
                                                                                && *(_DWORD *)(v793 + 4) == (_DWORD)v732)
                                                                              {
                                                                                v1055 = result;
                                                                                v1065 = v59;
                                                                                v1037 = a2;
                                                                                v1046 = v21;
                                                                                v794 = *(_QWORD *)v60;
                                                                                v795 = HIDWORD(*(_QWORD *)v60);
                                                                                v796 = *(_QWORD *)v60 >> 39;
                                                                                if (v796 < v754
                                                                                  && (v797 = *(_QWORD *)(v753 + 8 * v796)) != 0
                                                                                  && (v798 = *(unsigned __int16 *)(v797 + 2 * (HIDWORD(v794) & 0x7F)),
                                                                                      v759 > v798)
                                                                                  && (v799 = v757 + 8 * v798,
                                                                                      v799 != v758)
                                                                                  && *(_DWORD *)(v799 + 4) == (_DWORD)v795)
                                                                                {
                                                                                  v800 = (__int128 *)(v752[10] + 80 * v798);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v800 = (__int128 *)v752[11];
                                                                                }
                                                                                if (v796 < v764
                                                                                  && (v801 = *(_QWORD *)(v763 + 8 * v796)) != 0
                                                                                  && (v802 = *(unsigned __int16 *)(v801 + 2 * (HIDWORD(v794) & 0x7F)),
                                                                                      v769 > v802)
                                                                                  && (v803 = v768 + 8 * v802,
                                                                                      v803 != v767)
                                                                                  && *(_DWORD *)(v803 + 4) == (_DWORD)v795)
                                                                                {
                                                                                  v804 = v762[10] + 16 * v802;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v804 = v762[11];
                                                                                }
                                                                                if (v796 < v774
                                                                                  && (v805 = *(_QWORD *)(v773 + 8 * v796)) != 0
                                                                                  && (v806 = *(unsigned __int16 *)(v805 + 2 * (HIDWORD(v794) & 0x7F)),
                                                                                      v1293 > v806)
                                                                                  && (v807 = v778 + 8 * v806,
                                                                                      v807 != v777)
                                                                                  && *(_DWORD *)(v807 + 4) == (_DWORD)v795)
                                                                                {
                                                                                  v808 = (__int128 *)(v772[10] + 24 * v806);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v808 = (__int128 *)v772[11];
                                                                                }
                                                                                if (v796 < v1263
                                                                                  && (v809 = *(_QWORD *)(v1283 + 8 * v796)) != 0
                                                                                  && (v810 = *(unsigned __int16 *)(v809 + 2 * (HIDWORD(v794) & 0x7F)),
                                                                                      v1233 > v810)
                                                                                  && (v811 = v1243 + 8 * v810,
                                                                                      v811 != v1253)
                                                                                  && *(_DWORD *)(v811 + 4) == (_DWORD)v795)
                                                                                {
                                                                                  v812 = (arComponents::AlbedoTextureComponent *)(v1273[10] + 48 * v810);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v812 = (arComponents::AlbedoTextureComponent *)v1273[11];
                                                                                }
                                                                                if (v796 < v1203
                                                                                  && (v813 = *(_QWORD *)(v1223 + 8 * v796)) != 0
                                                                                  && (v814 = *(unsigned __int16 *)(v813 + 2 * (HIDWORD(v794) & 0x7F)),
                                                                                      v1173 > v814)
                                                                                  && (v815 = v1183 + 8 * v814,
                                                                                      v815 != v1193)
                                                                                  && *(_DWORD *)(v815 + 4) == (_DWORD)v795)
                                                                                {
                                                                                  v816 = (__int128 *)(v1213[10] + 16 * v814);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v816 = (__int128 *)v1213[11];
                                                                                }
                                                                                if (v796 < v1143
                                                                                  && (v817 = *(_QWORD *)(v1163 + 8 * v796)) != 0
                                                                                  && (v818 = *(unsigned __int16 *)(v817 + 2 * (HIDWORD(v794) & 0x7F)),
                                                                                      v1113 > v818)
                                                                                  && (v819 = v1123 + 8 * v818,
                                                                                      v819 != v1133)
                                                                                  && *(_DWORD *)(v819 + 4) == (_DWORD)v795)
                                                                                {
                                                                                  v820 = (__int128 *)(v1153[10] + 16 * v818);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v820 = (__int128 *)v1153[11];
                                                                                }
                                                                                if (v796 < v1083
                                                                                  && (v821 = *(_QWORD *)(v1103 + 8 * v796)) != 0
                                                                                  && (v822 = *(unsigned __int16 *)(v821 + 2 * (HIDWORD(v794) & 0x7F)),
                                                                                      v1074 > v822)
                                                                                  && (v823 = v791 + 8 * v822,
                                                                                      v823 != v792)
                                                                                  && *(_DWORD *)(v823 + 4) == (_DWORD)v795)
                                                                                {
                                                                                  v729 = (int *)(v1093[10] + 4 * v822);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v729 = (int *)v1093[11];
                                                                                }
                                                                                v730 = v61;
                                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v794, v800, *(_QWORD *)v804, *(std::__shared_weak_count **)(v804 + 8), v808, v812, v816, v61, v820, v729);
                                                                                v61 = v730;
                                                                                v21 = v1046;
                                                                                result = v1055;
                                                                                a2 = v1037;
                                                                                v59 = v1065;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v61;
        v60 += 8;
      }
      while (v60 != v59);
    }
  }
  v36 = (_QWORD *)result[8];
  v37 = v36 + 4;
  if (!v36)
    v37 = 0;
  if (v37 == v21)
  {
    v1296 = *a2;
    v1297 = *((_QWORD *)a2 + 2);
    v63 = v36[7];
    v62 = v36[8];
    if (v63 != v62)
    {
      v64 = (__int128 *)v36[10];
      do
      {
        v826 = *result;
        v827 = *(unsigned int *)(v63 + 4);
        v828 = v827 >> 7;
        v829 = *(_QWORD *)(*result + 32);
        if (v827 >> 7 < (*(_QWORD *)(*result + 40) - v829) >> 3)
        {
          v830 = *(_QWORD *)(v829 + 8 * v828);
          if (v830)
          {
            v831 = v827 & 0x7F;
            v832 = *(unsigned __int16 *)(v830 + 2 * v831);
            v835 = v826 + 56;
            v833 = *(_QWORD *)(v826 + 56);
            v834 = *(_QWORD *)(v835 + 8);
            if (v832 < (v834 - v833) >> 3)
            {
              v836 = v833 + 8 * v832;
              if (v836 != v834 && *(_DWORD *)(v836 + 4) == (_DWORD)v827)
              {
                v838 = (_QWORD *)result[1];
                v839 = v838[4];
                if (v828 < (v838[5] - v839) >> 3)
                {
                  v840 = *(_QWORD *)(v839 + 8 * v828);
                  if (v840)
                  {
                    v841 = *(unsigned __int16 *)(v840 + 2 * v831);
                    v844 = v838 + 7;
                    v842 = v838[7];
                    v843 = v844[1];
                    if (v841 < (v843 - v842) >> 3)
                    {
                      v845 = v842 + 8 * v841;
                      if (v845 != v843 && *(_DWORD *)(v845 + 4) == (_DWORD)v827)
                      {
                        v847 = (_QWORD *)result[2];
                        v848 = v847[4];
                        v849 = (v847[5] - v848) >> 3;
                        if (v828 < v849)
                        {
                          v850 = *(_QWORD *)(v848 + 8 * v828);
                          if (v850)
                          {
                            v851 = *(unsigned __int16 *)(v850 + 2 * v831);
                            v852 = v847[7];
                            v853 = v847[8];
                            v854 = (v853 - v852) >> 3;
                            if (v854 > v851)
                            {
                              v855 = v852 + 8 * v851;
                              if (v855 != v853 && *(_DWORD *)(v855 + 4) == (_DWORD)v827)
                              {
                                v857 = (_QWORD *)result[3];
                                v858 = v857[4];
                                v859 = (v857[5] - v858) >> 3;
                                if (v828 < v859)
                                {
                                  v860 = *(_QWORD *)(v858 + 8 * v828);
                                  if (v860)
                                  {
                                    v861 = *(unsigned __int16 *)(v860 + 2 * v831);
                                    v863 = v857[7];
                                    v862 = v857[8];
                                    v864 = (v862 - v863) >> 3;
                                    if (v864 > v861)
                                    {
                                      v865 = v863 + 8 * v861;
                                      if (v865 != v862 && *(_DWORD *)(v865 + 4) == (_DWORD)v827)
                                      {
                                        v867 = (_QWORD *)result[4];
                                        v868 = v867[4];
                                        v869 = (v867[5] - v868) >> 3;
                                        if (v828 < v869)
                                        {
                                          v870 = *(_QWORD *)(v868 + 8 * v828);
                                          if (v870)
                                          {
                                            v871 = *(unsigned __int16 *)(v870 + 2 * v831);
                                            v873 = v867[7];
                                            v872 = v867[8];
                                            v1294 = (v872 - v873) >> 3;
                                            if (v1294 > v871)
                                            {
                                              v874 = v873 + 8 * v871;
                                              if (v874 != v872 && *(_DWORD *)(v874 + 4) == (_DWORD)v827)
                                              {
                                                v1274 = (_QWORD *)result[5];
                                                v1284 = v1274[4];
                                                v1264 = (v1274[5] - v1284) >> 3;
                                                if (v828 < v1264)
                                                {
                                                  v875 = *(_QWORD *)(v1284 + 8 * v828);
                                                  if (v875)
                                                  {
                                                    v876 = *(unsigned __int16 *)(v875 + 2 * v831);
                                                    v1244 = v1274[7];
                                                    v1254 = v1274[8];
                                                    v1234 = (v1254 - v1244) >> 3;
                                                    if (v1234 > v876)
                                                    {
                                                      v877 = v1244 + 8 * v876;
                                                      if (v877 != v1254 && *(_DWORD *)(v877 + 4) == (_DWORD)v827)
                                                      {
                                                        v1214 = (_QWORD *)result[6];
                                                        v1224 = v1214[4];
                                                        v1204 = (v1214[5] - v1224) >> 3;
                                                        if (v828 < v1204)
                                                        {
                                                          v878 = *(_QWORD *)(v1224 + 8 * v828);
                                                          if (v878)
                                                          {
                                                            v879 = *(unsigned __int16 *)(v878 + 2 * v831);
                                                            v1184 = v1214[7];
                                                            v1194 = v1214[8];
                                                            v1174 = (v1194 - v1184) >> 3;
                                                            if (v1174 > v879)
                                                            {
                                                              v880 = v1184 + 8 * v879;
                                                              if (v880 != v1194
                                                                && *(_DWORD *)(v880 + 4) == (_DWORD)v827)
                                                              {
                                                                v1154 = (_QWORD *)result[7];
                                                                v1164 = v1154[4];
                                                                v1144 = (v1154[5] - v1164) >> 3;
                                                                if (v828 < v1144)
                                                                {
                                                                  v881 = *(_QWORD *)(v1164 + 8 * v828);
                                                                  if (v881)
                                                                  {
                                                                    v882 = *(unsigned __int16 *)(v881 + 2 * v831);
                                                                    v1124 = v1154[7];
                                                                    v1134 = v1154[8];
                                                                    v1114 = (v1134 - v1124) >> 3;
                                                                    if (v1114 > v882)
                                                                    {
                                                                      v883 = v1124 + 8 * v882;
                                                                      if (v883 != v1134
                                                                        && *(_DWORD *)(v883 + 4) == (_DWORD)v827)
                                                                      {
                                                                        v1094 = (_QWORD *)result[9];
                                                                        v1104 = v1094[4];
                                                                        v1084 = (v1094[5] - v1104) >> 3;
                                                                        if (v828 < v1084)
                                                                        {
                                                                          v884 = *(_QWORD *)(v1104 + 8 * v828);
                                                                          if (v884)
                                                                          {
                                                                            v885 = *(unsigned __int16 *)(v884 + 2 * v831);
                                                                            v886 = v1094[7];
                                                                            v887 = v1094[8];
                                                                            v1075 = (v887 - v886) >> 3;
                                                                            if (v1075 > v885)
                                                                            {
                                                                              v888 = v886 + 8 * v885;
                                                                              if (v888 != v887
                                                                                && *(_DWORD *)(v888 + 4) == (_DWORD)v827)
                                                                              {
                                                                                v1056 = result;
                                                                                v1066 = v62;
                                                                                v1038 = a2;
                                                                                v1047 = v21;
                                                                                v889 = *(_QWORD *)v63;
                                                                                v890 = HIDWORD(*(_QWORD *)v63);
                                                                                v891 = *(_QWORD *)v63 >> 39;
                                                                                if (v891 < v849
                                                                                  && (v892 = *(_QWORD *)(v848 + 8 * v891)) != 0
                                                                                  && (v893 = *(unsigned __int16 *)(v892 + 2 * (HIDWORD(v889) & 0x7F)),
                                                                                      v854 > v893)
                                                                                  && (v894 = v852 + 8 * v893,
                                                                                      v894 != v853)
                                                                                  && *(_DWORD *)(v894 + 4) == (_DWORD)v890)
                                                                                {
                                                                                  v895 = (__int128 *)(v847[10] + 80 * v893);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v895 = (__int128 *)v847[11];
                                                                                }
                                                                                if (v891 < v859
                                                                                  && (v896 = *(_QWORD *)(v858 + 8 * v891)) != 0
                                                                                  && (v897 = *(unsigned __int16 *)(v896 + 2 * (HIDWORD(v889) & 0x7F)),
                                                                                      v864 > v897)
                                                                                  && (v898 = v863 + 8 * v897,
                                                                                      v898 != v862)
                                                                                  && *(_DWORD *)(v898 + 4) == (_DWORD)v890)
                                                                                {
                                                                                  v899 = v857[10] + 16 * v897;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v899 = v857[11];
                                                                                }
                                                                                if (v891 < v869
                                                                                  && (v900 = *(_QWORD *)(v868 + 8 * v891)) != 0
                                                                                  && (v901 = *(unsigned __int16 *)(v900 + 2 * (HIDWORD(v889) & 0x7F)),
                                                                                      v1294 > v901)
                                                                                  && (v902 = v873 + 8 * v901,
                                                                                      v902 != v872)
                                                                                  && *(_DWORD *)(v902 + 4) == (_DWORD)v890)
                                                                                {
                                                                                  v903 = (__int128 *)(v867[10] + 24 * v901);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v903 = (__int128 *)v867[11];
                                                                                }
                                                                                if (v891 < v1264
                                                                                  && (v904 = *(_QWORD *)(v1284 + 8 * v891)) != 0
                                                                                  && (v905 = *(unsigned __int16 *)(v904 + 2 * (HIDWORD(v889) & 0x7F)),
                                                                                      v1234 > v905)
                                                                                  && (v906 = v1244 + 8 * v905,
                                                                                      v906 != v1254)
                                                                                  && *(_DWORD *)(v906 + 4) == (_DWORD)v890)
                                                                                {
                                                                                  v907 = (arComponents::AlbedoTextureComponent *)(v1274[10] + 48 * v905);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v907 = (arComponents::AlbedoTextureComponent *)v1274[11];
                                                                                }
                                                                                if (v891 < v1204
                                                                                  && (v908 = *(_QWORD *)(v1224 + 8 * v891)) != 0
                                                                                  && (v909 = *(unsigned __int16 *)(v908 + 2 * (HIDWORD(v889) & 0x7F)),
                                                                                      v1174 > v909)
                                                                                  && (v910 = v1184 + 8 * v909,
                                                                                      v910 != v1194)
                                                                                  && *(_DWORD *)(v910 + 4) == (_DWORD)v890)
                                                                                {
                                                                                  v911 = (__int128 *)(v1214[10] + 16 * v909);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v911 = (__int128 *)v1214[11];
                                                                                }
                                                                                if (v891 < v1144
                                                                                  && (v912 = *(_QWORD *)(v1164 + 8 * v891)) != 0
                                                                                  && (v913 = *(unsigned __int16 *)(v912 + 2 * (HIDWORD(v889) & 0x7F)),
                                                                                      v1114 > v913)
                                                                                  && (v914 = v1124 + 8 * v913,
                                                                                      v914 != v1134)
                                                                                  && *(_DWORD *)(v914 + 4) == (_DWORD)v890)
                                                                                {
                                                                                  v915 = (uint64_t *)(v1154[10] + 8 * v913);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v915 = (uint64_t *)v1154[11];
                                                                                }
                                                                                if (v891 < v1084
                                                                                  && (v916 = *(_QWORD *)(v1104 + 8 * v891)) != 0
                                                                                  && (v917 = *(unsigned __int16 *)(v916 + 2 * (HIDWORD(v889) & 0x7F)),
                                                                                      v1075 > v917)
                                                                                  && (v918 = v886 + 8 * v917,
                                                                                      v918 != v887)
                                                                                  && *(_DWORD *)(v918 + 4) == (_DWORD)v890)
                                                                                {
                                                                                  v824 = (int *)(v1094[10] + 4 * v917);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v824 = (int *)v1094[11];
                                                                                }
                                                                                v825 = v64;
                                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v889, v895, *(_QWORD *)v899, *(std::__shared_weak_count **)(v899 + 8), v903, v907, v911, v915, v64, v824);
                                                                                v64 = v825;
                                                                                v21 = v1047;
                                                                                result = v1056;
                                                                                a2 = v1038;
                                                                                v62 = v1066;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v64;
        v63 += 8;
      }
      while (v63 != v62);
    }
  }
  v38 = (_QWORD *)result[9];
  v39 = v38 + 4;
  if (!v38)
    v39 = 0;
  if (v39 == v21)
  {
    v1296 = *a2;
    v1297 = *((_QWORD *)a2 + 2);
    v66 = v38[7];
    v65 = v38[8];
    if (v66 != v65)
    {
      v67 = (int *)v38[10];
      do
      {
        v921 = *result;
        v922 = *(unsigned int *)(v66 + 4);
        v923 = v922 >> 7;
        v924 = *(_QWORD *)(*result + 32);
        if (v922 >> 7 < (*(_QWORD *)(*result + 40) - v924) >> 3)
        {
          v925 = *(_QWORD *)(v924 + 8 * v923);
          if (v925)
          {
            v926 = v922 & 0x7F;
            v927 = *(unsigned __int16 *)(v925 + 2 * v926);
            v930 = v921 + 56;
            v928 = *(_QWORD *)(v921 + 56);
            v929 = *(_QWORD *)(v930 + 8);
            if (v927 < (v929 - v928) >> 3)
            {
              v931 = v928 + 8 * v927;
              if (v931 != v929 && *(_DWORD *)(v931 + 4) == (_DWORD)v922)
              {
                v933 = (_QWORD *)result[1];
                v934 = v933[4];
                if (v923 < (v933[5] - v934) >> 3)
                {
                  v935 = *(_QWORD *)(v934 + 8 * v923);
                  if (v935)
                  {
                    v936 = *(unsigned __int16 *)(v935 + 2 * v926);
                    v939 = v933 + 7;
                    v937 = v933[7];
                    v938 = v939[1];
                    if (v936 < (v938 - v937) >> 3)
                    {
                      v940 = v937 + 8 * v936;
                      if (v940 != v938 && *(_DWORD *)(v940 + 4) == (_DWORD)v922)
                      {
                        v942 = (_QWORD *)result[2];
                        v943 = v942[4];
                        v944 = (v942[5] - v943) >> 3;
                        if (v923 < v944)
                        {
                          v945 = *(_QWORD *)(v943 + 8 * v923);
                          if (v945)
                          {
                            v946 = *(unsigned __int16 *)(v945 + 2 * v926);
                            v947 = v942[7];
                            v948 = v942[8];
                            v949 = (v948 - v947) >> 3;
                            if (v949 > v946)
                            {
                              v950 = v947 + 8 * v946;
                              if (v950 != v948 && *(_DWORD *)(v950 + 4) == (_DWORD)v922)
                              {
                                v952 = (_QWORD *)result[3];
                                v953 = v952[4];
                                v954 = (v952[5] - v953) >> 3;
                                if (v923 < v954)
                                {
                                  v955 = *(_QWORD *)(v953 + 8 * v923);
                                  if (v955)
                                  {
                                    v956 = *(unsigned __int16 *)(v955 + 2 * v926);
                                    v957 = v952[7];
                                    v958 = v952[8];
                                    v959 = (v958 - v957) >> 3;
                                    if (v959 > v956)
                                    {
                                      v960 = v957 + 8 * v956;
                                      if (v960 != v958 && *(_DWORD *)(v960 + 4) == (_DWORD)v922)
                                      {
                                        v962 = (_QWORD *)result[4];
                                        v963 = v962[4];
                                        v964 = (v962[5] - v963) >> 3;
                                        if (v923 < v964)
                                        {
                                          v965 = *(_QWORD *)(v963 + 8 * v923);
                                          if (v965)
                                          {
                                            v966 = *(unsigned __int16 *)(v965 + 2 * v926);
                                            v967 = v962[7];
                                            v968 = v962[8];
                                            v969 = (v968 - v967) >> 3;
                                            if (v969 > v966)
                                            {
                                              v970 = v967 + 8 * v966;
                                              if (v970 != v968 && *(_DWORD *)(v970 + 4) == (_DWORD)v922)
                                              {
                                                v971 = (_QWORD *)result[5];
                                                v1285 = (uint64_t)(v971[5] - v971[4]) >> 3;
                                                v1295 = v971[4];
                                                if (v923 < v1285)
                                                {
                                                  v972 = *(_QWORD *)(v1295 + 8 * v923);
                                                  if (v972)
                                                  {
                                                    v973 = *(unsigned __int16 *)(v972 + 2 * v926);
                                                    v1265 = v971[7];
                                                    v1275 = v971[8];
                                                    v1255 = (v1275 - v1265) >> 3;
                                                    if (v1255 > v973)
                                                    {
                                                      v974 = v1265 + 8 * v973;
                                                      if (v974 != v1275 && *(_DWORD *)(v974 + 4) == (_DWORD)v922)
                                                      {
                                                        v1235 = (_QWORD *)result[6];
                                                        v1245 = v1235[4];
                                                        v1225 = (v1235[5] - v1245) >> 3;
                                                        if (v923 < v1225)
                                                        {
                                                          v975 = *(_QWORD *)(v1245 + 8 * v923);
                                                          if (v975)
                                                          {
                                                            v976 = *(unsigned __int16 *)(v975 + 2 * v926);
                                                            v1205 = v1235[7];
                                                            v1215 = v1235[8];
                                                            v1195 = (v1215 - v1205) >> 3;
                                                            if (v1195 > v976)
                                                            {
                                                              v977 = v1205 + 8 * v976;
                                                              if (v977 != v1215
                                                                && *(_DWORD *)(v977 + 4) == (_DWORD)v922)
                                                              {
                                                                v1175 = (_QWORD *)result[7];
                                                                v1185 = v1175[4];
                                                                v1165 = (v1175[5] - v1185) >> 3;
                                                                if (v923 < v1165)
                                                                {
                                                                  v978 = *(_QWORD *)(v1185 + 8 * v923);
                                                                  if (v978)
                                                                  {
                                                                    v979 = *(unsigned __int16 *)(v978 + 2 * v926);
                                                                    v1145 = v1175[7];
                                                                    v1155 = v1175[8];
                                                                    v1135 = (v1155 - v1145) >> 3;
                                                                    if (v1135 > v979)
                                                                    {
                                                                      v980 = v1145 + 8 * v979;
                                                                      if (v980 != v1155
                                                                        && *(_DWORD *)(v980 + 4) == (_DWORD)v922)
                                                                      {
                                                                        v1115 = (_QWORD *)result[8];
                                                                        v1125 = v1115[4];
                                                                        v1105 = (v1115[5] - v1125) >> 3;
                                                                        if (v923 < v1105)
                                                                        {
                                                                          v981 = *(_QWORD *)(v1125 + 8 * v923);
                                                                          if (v981)
                                                                          {
                                                                            v982 = *(unsigned __int16 *)(v981 + 2 * v926);
                                                                            v984 = v1115[7];
                                                                            v983 = v1115[8];
                                                                            v1095 = (v983 - v984) >> 3;
                                                                            if (v1095 > v982)
                                                                            {
                                                                              v985 = v984 + 8 * v982;
                                                                              if (v985 != v983
                                                                                && *(_DWORD *)(v985 + 4) == (_DWORD)v922)
                                                                              {
                                                                                v1085 = v65;
                                                                                v1057 = result;
                                                                                v986 = *(_QWORD *)v66;
                                                                                v987 = HIDWORD(*(_QWORD *)v66);
                                                                                v988 = *(_QWORD *)v66 >> 39;
                                                                                if (v988 < v944
                                                                                  && (v989 = *(_QWORD *)(v943 + 8 * v988)) != 0
                                                                                  && (v990 = *(unsigned __int16 *)(v989 + 2 * (HIDWORD(v986) & 0x7F)),
                                                                                      v949 > v990)
                                                                                  && (v991 = v947 + 8 * v990,
                                                                                      v991 != v948)
                                                                                  && *(_DWORD *)(v991 + 4) == (_DWORD)v987)
                                                                                {
                                                                                  v992 = (__int128 *)(v942[10] + 80 * v990);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v992 = (__int128 *)v942[11];
                                                                                }
                                                                                if (v988 < v954
                                                                                  && (v993 = *(_QWORD *)(v953 + 8 * v988)) != 0
                                                                                  && (v994 = *(unsigned __int16 *)(v993 + 2 * (HIDWORD(v986) & 0x7F)),
                                                                                      v959 > v994)
                                                                                  && (v995 = v957 + 8 * v994,
                                                                                      v995 != v958)
                                                                                  && *(_DWORD *)(v995 + 4) == (_DWORD)v987)
                                                                                {
                                                                                  v996 = v952[10] + 16 * v994;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v996 = v952[11];
                                                                                }
                                                                                if (v988 < v964
                                                                                  && (v997 = *(_QWORD *)(v963 + 8 * v988)) != 0
                                                                                  && (v998 = *(unsigned __int16 *)(v997 + 2 * (HIDWORD(v986) & 0x7F)),
                                                                                      v969 > v998)
                                                                                  && (v999 = v967 + 8 * v998,
                                                                                      v999 != v968)
                                                                                  && *(_DWORD *)(v999 + 4) == (_DWORD)v987)
                                                                                {
                                                                                  v1000 = (__int128 *)(v962[10] + 24 * v998);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v1000 = (__int128 *)v962[11];
                                                                                }
                                                                                if (v988 < v1285
                                                                                  && (v1001 = *(_QWORD *)(v1295 + 8 * v988)) != 0
                                                                                  && (v1002 = *(unsigned __int16 *)(v1001 + 2 * (HIDWORD(v986) & 0x7F)),
                                                                                      v1255 > v1002)
                                                                                  && (v1003 = v1265 + 8 * v1002,
                                                                                      v1003 != v1275)
                                                                                  && *(_DWORD *)(v1003 + 4) == (_DWORD)v987)
                                                                                {
                                                                                  v1004 = (arComponents::AlbedoTextureComponent *)(v971[10] + 48 * v1002);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v1004 = (arComponents::AlbedoTextureComponent *)v971[11];
                                                                                }
                                                                                if (v988 < v1225
                                                                                  && (v1005 = *(_QWORD *)(v1245 + 8 * v988)) != 0
                                                                                  && (v1006 = *(unsigned __int16 *)(v1005 + 2 * (HIDWORD(v986) & 0x7F)),
                                                                                      v1195 > v1006)
                                                                                  && (v1007 = v1205 + 8 * v1006,
                                                                                      v1007 != v1215)
                                                                                  && *(_DWORD *)(v1007 + 4) == (_DWORD)v987)
                                                                                {
                                                                                  v1008 = (__int128 *)(v1235[10] + 16 * v1006);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v1008 = (__int128 *)v1235[11];
                                                                                }
                                                                                if (v988 < v1165
                                                                                  && (v1009 = *(_QWORD *)(v1185 + 8 * v988)) != 0
                                                                                  && (v1010 = *(unsigned __int16 *)(v1009 + 2 * (HIDWORD(v986) & 0x7F)),
                                                                                      v1135 > v1010)
                                                                                  && (v1011 = v1145 + 8 * v1010,
                                                                                      v1011 != v1155)
                                                                                  && *(_DWORD *)(v1011 + 4) == (_DWORD)v987)
                                                                                {
                                                                                  v1012 = (uint64_t *)(v1175[10] + 8 * v1010);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v1012 = (uint64_t *)v1175[11];
                                                                                }
                                                                                if (v988 < v1105
                                                                                  && (v1013 = *(_QWORD *)(v1125 + 8 * v988)) != 0
                                                                                  && (v1014 = *(unsigned __int16 *)(v1013 + 2 * (HIDWORD(v986) & 0x7F)),
                                                                                      v1095 > v1014)
                                                                                  && (v1015 = v984 + 8 * v1014,
                                                                                      v1015 != v983)
                                                                                  && *(_DWORD *)(v1015 + 4) == (_DWORD)v987)
                                                                                {
                                                                                  v919 = (__int128 *)(v1115[10] + 16 * v1014);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v919 = (__int128 *)v1115[11];
                                                                                }
                                                                                v920 = v67;
                                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v986, v992, *(_QWORD *)v996, *(std::__shared_weak_count **)(v996 + 8), v1000, v1004, v1008, v1012, v919, v67);
                                                                                v67 = v920;
                                                                                result = v1057;
                                                                                v65 = v1085;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v67;
        v66 += 8;
      }
      while (v66 != v65);
    }
  }
  return result;
}

void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::VisibilityAlpha&)#1}::operator()(uint64_t *a1, unint64_t a2, __int128 *a3, uint64_t a4, std::__shared_weak_count *a5, __int128 *a6, int *a7)
{
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  int v66;

  v46 = *a3;
  v47 = *((_QWORD *)a3 + 2);
  v48 = *(__int128 *)((char *)a3 + 24);
  v49 = *((_QWORD *)a3 + 5);
  v9 = *((_QWORD *)a3 + 6);
  v50 = *(__int128 *)((char *)a3 + 56);
  v51 = *((_QWORD *)a3 + 9);
  v52 = 0;
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v52 = a5;
  }
  v53 = *a6;
  v54 = *((_QWORD *)a6 + 2);
  v12 = *a7;
  v13 = *a1;
  v59 = v46;
  v61 = v48;
  v60 = v47;
  v62 = v49;
  v63 = v9;
  v64 = v50;
  v65 = v51;
  v58 = 0;
  if (a5)
  {
    v14 = (unint64_t *)&a5->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v58 = a5;
  }
  v57 = a4;
  v55 = v53;
  v56 = v54;
  v66 = v12;
  v16 = *(_QWORD *)(v13 + 24);
  if (!v16)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    goto LABEL_46;
  }
  v17 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t *, __int128 *, int *))(*(_QWORD *)v16 + 48))(v16, &v59, &v57, &v55, &v66);
  v18 = v58;
  if (v58)
  {
    v19 = (unint64_t *)&v58->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = a1[1];
  v23 = *(uint64_t **)(v21 + 8);
  v22 = *(_QWORD *)(v21 + 16);
  if ((unint64_t)v23 < v22)
  {
    *v23 = v17;
    v24 = v23 + 1;
    goto LABEL_38;
  }
  v25 = *(uint64_t **)v21;
  v26 = (uint64_t)v23 - *(_QWORD *)v21;
  v27 = v26 >> 3;
  v28 = (v26 >> 3) + 1;
  if (v28 >> 61)
    abort();
  v29 = v22 - (_QWORD)v25;
  if (v29 >> 2 > v28)
    v28 = v29 >> 2;
  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
    v30 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v30 = v28;
  if (!v30)
  {
    v31 = 0;
    goto LABEL_27;
  }
  if (v30 >> 61)
LABEL_46:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v31 = operator new(8 * v30);
LABEL_27:
  v32 = (uint64_t *)&v31[8 * v27];
  v33 = &v31[8 * v30];
  *v32 = v17;
  v24 = v32 + 1;
  if (v23 == v25)
  {
    v25 = v23;
  }
  else
  {
    v34 = (char *)v23 - (char *)v25 - 8;
    if (v34 < 0x58)
      goto LABEL_49;
    if ((unint64_t)((char *)v23 - v31 - v26) < 0x20)
      goto LABEL_49;
    v35 = (v34 >> 3) + 1;
    v36 = &v31[8 * v27 - 16];
    v37 = v23 - 2;
    v38 = v35 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *v36 = v39;
      v36 -= 2;
      v37 -= 4;
      v38 -= 4;
    }
    while (v38);
    v32 -= v35 & 0x3FFFFFFFFFFFFFFCLL;
    v23 -= v35 & 0x3FFFFFFFFFFFFFFCLL;
    if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        v40 = *--v23;
        *--v32 = v40;
      }
      while (v23 != v25);
      v25 = *(uint64_t **)v21;
    }
  }
  *(_QWORD *)v21 = v32;
  *(_QWORD *)(v21 + 8) = v24;
  *(_QWORD *)(v21 + 16) = v33;
  if (v25)
    operator delete(v25);
LABEL_38:
  *(_QWORD *)(v21 + 8) = v24;
  v41 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(*(_QWORD *)a1[2]);
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v41, a2);
  v42 = *(_QWORD *)a1[2];
  *(_QWORD *)&v59 = v17;
  v43 = (uint64_t *)gdc::Registry::storage<arComponents::CopiedEntity>(v42);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v43, a2, &v59);
  if (v52)
  {
    v44 = (unint64_t *)&v52->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
}

void sub_19FD6B3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::tuple<arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>::~tuple((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()(uint64_t *a1, unint64_t a2, __int128 *a3, uint64_t a4, std::__shared_weak_count *a5, __int128 *a6, __int128 *a7, int *a8)
{
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  uint64_t *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  int v69;

  v47 = *a3;
  v48 = *((_QWORD *)a3 + 2);
  v49 = *(__int128 *)((char *)a3 + 24);
  v50 = *((_QWORD *)a3 + 5);
  v10 = *((_QWORD *)a3 + 6);
  v51 = *(__int128 *)((char *)a3 + 56);
  v52 = *((_QWORD *)a3 + 9);
  v53 = 0;
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v53 = a5;
  }
  v54 = *a6;
  v55 = *((_QWORD *)a6 + 2);
  v56 = *a7;
  v13 = *a8;
  v14 = *a1;
  v62 = v47;
  v64 = v49;
  v63 = v48;
  v65 = v50;
  v66 = v10;
  v67 = v51;
  v68 = v52;
  v61 = 0;
  if (a5)
  {
    v15 = (unint64_t *)&a5->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v61 = a5;
  }
  v60 = a4;
  v59 = v55;
  v57 = v56;
  v58 = v54;
  v69 = v13;
  v17 = *(_QWORD *)(v14 + 24);
  if (!v17)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    goto LABEL_46;
  }
  v18 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t *, __int128 *, __int128 *, int *))(*(_QWORD *)v17 + 48))(v17, &v62, &v60, &v58, &v57, &v69);
  v19 = v61;
  if (v61)
  {
    v20 = (unint64_t *)&v61->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = a1[1];
  v24 = *(uint64_t **)(v22 + 8);
  v23 = *(_QWORD *)(v22 + 16);
  if ((unint64_t)v24 < v23)
  {
    *v24 = v18;
    v25 = v24 + 1;
    goto LABEL_38;
  }
  v26 = *(uint64_t **)v22;
  v27 = (uint64_t)v24 - *(_QWORD *)v22;
  v28 = v27 >> 3;
  v29 = (v27 >> 3) + 1;
  if (v29 >> 61)
    abort();
  v30 = v23 - (_QWORD)v26;
  if (v30 >> 2 > v29)
    v29 = v30 >> 2;
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
    v31 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v31 = v29;
  if (!v31)
  {
    v32 = 0;
    goto LABEL_27;
  }
  if (v31 >> 61)
LABEL_46:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v32 = operator new(8 * v31);
LABEL_27:
  v33 = (uint64_t *)&v32[8 * v28];
  v34 = &v32[8 * v31];
  *v33 = v18;
  v25 = v33 + 1;
  if (v24 == v26)
  {
    v26 = v24;
  }
  else
  {
    v35 = (char *)v24 - (char *)v26 - 8;
    if (v35 < 0x58)
      goto LABEL_49;
    if ((unint64_t)((char *)v24 - v32 - v27) < 0x20)
      goto LABEL_49;
    v36 = (v35 >> 3) + 1;
    v37 = &v32[8 * v28 - 16];
    v38 = v24 - 2;
    v39 = v36 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v40 = *(_OWORD *)v38;
      *(v37 - 1) = *((_OWORD *)v38 - 1);
      *v37 = v40;
      v37 -= 2;
      v38 -= 4;
      v39 -= 4;
    }
    while (v39);
    v33 -= v36 & 0x3FFFFFFFFFFFFFFCLL;
    v24 -= v36 & 0x3FFFFFFFFFFFFFFCLL;
    if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        v41 = *--v24;
        *--v33 = v41;
      }
      while (v24 != v26);
      v26 = *(uint64_t **)v22;
    }
  }
  *(_QWORD *)v22 = v33;
  *(_QWORD *)(v22 + 8) = v25;
  *(_QWORD *)(v22 + 16) = v34;
  if (v26)
    operator delete(v26);
LABEL_38:
  *(_QWORD *)(v22 + 8) = v25;
  v42 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(*(_QWORD *)a1[2]);
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v42, a2);
  v43 = *(_QWORD *)a1[2];
  *(_QWORD *)&v62 = v18;
  v44 = (uint64_t *)gdc::Registry::storage<arComponents::CopiedEntity>(v43);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v44, a2, &v62);
  if (v53)
  {
    v45 = (unint64_t *)&v53->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
}

void sub_19FD6B770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::tuple<arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>::~tuple((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()(uint64_t *a1, unint64_t a2, __int128 *a3, uint64_t a4, uint64_t *a5, __int128 *a6, uint64_t *a7, __int128 *a8, __int128 *a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  void *v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t (**v74)();
  id v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;

  v56 = *a3;
  v57 = *((_QWORD *)a3 + 2);
  v58 = *(__int128 *)((char *)a3 + 24);
  v59 = *((_QWORD *)a3 + 5);
  v12 = *((_QWORD *)a3 + 6);
  v60 = *(__int128 *)((char *)a3 + 56);
  v61 = *((_QWORD *)a3 + 9);
  v62 = 0;
  v13 = *a5;
  v14 = a5[1];
  v15 = (std::__shared_weak_count *)a5[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v62 = v15;
  }
  v18 = (id)a5[4];
  v64 = *a6;
  v19 = *a7;
  v63 = v18;
  v65 = *a8;
  v66 = *((_QWORD *)a8 + 2);
  v67 = *a9;
  v20 = *a1;
  v77 = v56;
  v79 = v58;
  v78 = v57;
  v80 = v59;
  v81 = v12;
  v82 = v60;
  v83 = v61;
  v76 = a4;
  v73 = 0;
  v74 = &off_1E42B5430;
  v71 = v13;
  v72 = 0;
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v73 = v15;
  }
  v72 = v14;
  v75 = v18;
  v70 = v66;
  v68 = v67;
  v69 = v65;
  v85 = v64;
  v84 = v19;
  v23 = *(_QWORD *)(v20 + 24);
  if (!v23)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    goto LABEL_46;
  }
  v24 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t *, uint64_t *, __int128 *, uint64_t *, __int128 *, __int128 *))(*(_QWORD *)v23 + 48))(v23, &v77, &v76, &v71, &v85, &v84, &v69, &v68);
  v74 = &off_1E42B5430;

  v25 = v73;
  if (v73)
  {
    v26 = (unint64_t *)&v73->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = a1[1];
  v30 = *(uint64_t **)(v28 + 8);
  v29 = *(_QWORD *)(v28 + 16);
  if ((unint64_t)v30 < v29)
  {
    *v30 = v24;
    v31 = v30 + 1;
    goto LABEL_38;
  }
  v32 = *(uint64_t **)v28;
  v33 = (uint64_t)v30 - *(_QWORD *)v28;
  v34 = v33 >> 3;
  v35 = (v33 >> 3) + 1;
  if (v35 >> 61)
    abort();
  v36 = v29 - (_QWORD)v32;
  if (v36 >> 2 > v35)
    v35 = v36 >> 2;
  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
    v37 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v37 = v35;
  if (!v37)
  {
    v38 = 0;
    goto LABEL_27;
  }
  if (v37 >> 61)
LABEL_46:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v38 = operator new(8 * v37);
LABEL_27:
  v39 = (uint64_t *)&v38[8 * v34];
  v40 = &v38[8 * v37];
  *v39 = v24;
  v31 = v39 + 1;
  if (v30 == v32)
  {
    v32 = v30;
  }
  else
  {
    v41 = (char *)v30 - (char *)v32 - 8;
    if (v41 < 0x58)
      goto LABEL_49;
    if ((unint64_t)((char *)v30 - v38 - v33) < 0x20)
      goto LABEL_49;
    v42 = (v41 >> 3) + 1;
    v43 = &v38[8 * v34 - 16];
    v44 = v30 - 2;
    v45 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      *v43 = v46;
      v43 -= 2;
      v44 -= 4;
      v45 -= 4;
    }
    while (v45);
    v39 -= v42 & 0x3FFFFFFFFFFFFFFCLL;
    v30 -= v42 & 0x3FFFFFFFFFFFFFFCLL;
    if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        v47 = *--v30;
        *--v39 = v47;
      }
      while (v30 != v32);
      v32 = *(uint64_t **)v28;
    }
  }
  *(_QWORD *)v28 = v39;
  *(_QWORD *)(v28 + 8) = v31;
  *(_QWORD *)(v28 + 16) = v40;
  if (v32)
    operator delete(v32);
LABEL_38:
  *(_QWORD *)(v28 + 8) = v31;
  v48 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(*(_QWORD *)a1[2]);
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v48, a2);
  v49 = *(_QWORD *)a1[2];
  *(_QWORD *)&v77 = v24;
  v50 = (uint64_t *)gdc::Registry::storage<arComponents::CopiedEntity>(v49);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v50, a2, &v77);

  if (v62)
  {
    v51 = (unint64_t *)&v62->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
}

void sub_19FD6BBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::tuple<arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>::~tuple((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::AREnvironmentProbeTexture&)#1}::operator()(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  id v6;
  std::__shared_weak_count *v7;
  void *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  std::__shared_weak_count *v45;
  id v46[2];
  std::__shared_weak_count *v47;

  v6 = *(id *)a3;
  v44 = v6;
  v8 = *(void **)(a3 + 8);
  v7 = *(std::__shared_weak_count **)(a3 + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v45 = v7;
    v11 = *a1;
    v46[0] = v6;
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  else
  {
    v45 = 0;
    v11 = *a1;
    v46[0] = v6;
  }
  v46[1] = v8;
  v47 = v7;
  v14 = *(_QWORD *)(v11 + 24);
  if (!v14)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    goto LABEL_45;
  }
  v15 = (void *)(*(uint64_t (**)(uint64_t, id *))(*(_QWORD *)v14 + 48))(v14, v46);
  v16 = v47;
  if (v47)
  {
    v17 = (unint64_t *)&v47->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  v19 = a1[1];
  v21 = *(_QWORD **)(v19 + 8);
  v20 = *(_QWORD *)(v19 + 16);
  if ((unint64_t)v21 < v20)
  {
    *v21 = v15;
    v22 = v21 + 1;
    goto LABEL_37;
  }
  v23 = *(_BYTE **)v19;
  v24 = (uint64_t)v21 - *(_QWORD *)v19;
  v25 = v24 >> 3;
  v26 = (v24 >> 3) + 1;
  if (v26 >> 61)
    abort();
  v27 = v20 - (_QWORD)v23;
  if (v27 >> 2 > v26)
    v26 = v27 >> 2;
  if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
    v28 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v28 = v26;
  if (!v28)
  {
    v29 = 0;
    goto LABEL_26;
  }
  if (v28 >> 61)
LABEL_45:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v29 = operator new(8 * v28);
LABEL_26:
  v30 = &v29[8 * v25];
  v31 = &v29[8 * v28];
  *v30 = v15;
  v22 = v30 + 1;
  if (v21 == (_QWORD *)v23)
  {
    v23 = v21;
  }
  else
  {
    v32 = (char *)v21 - v23 - 8;
    if (v32 < 0x58)
      goto LABEL_48;
    if ((unint64_t)((char *)v21 - v29 - v24) < 0x20)
      goto LABEL_48;
    v33 = (v32 >> 3) + 1;
    v34 = &v29[8 * v25 - 16];
    v35 = (__int128 *)(v21 - 2);
    v36 = v33 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *v35;
      *(v34 - 1) = *(v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    v30 -= v33 & 0x3FFFFFFFFFFFFFFCLL;
    v21 -= v33 & 0x3FFFFFFFFFFFFFFCLL;
    if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_48:
      do
      {
        v38 = *--v21;
        *--v30 = v38;
      }
      while (v21 != (_QWORD *)v23);
      v23 = *(_BYTE **)v19;
    }
  }
  *(_QWORD *)v19 = v30;
  *(_QWORD *)(v19 + 8) = v22;
  *(_QWORD *)(v19 + 16) = v31;
  if (v23)
    operator delete(v23);
LABEL_37:
  *(_QWORD *)(v19 + 8) = v22;
  v39 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(*(_QWORD *)a1[2]);
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v39, a2);
  v40 = *(_QWORD *)a1[2];
  v46[0] = v15;
  v41 = (uint64_t *)gdc::Registry::storage<arComponents::CopiedEntity>(v40);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v41, a2, v46);
  if (v45)
  {
    v42 = (unint64_t *)&v45->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }

}

void sub_19FD6BEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<VKARWalkingFeature * {__strong},std::shared_ptr<md::LabelFeature>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::ECSHelpers::updateTagComponent<arComponents::IsVisible>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *i;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;

  v66 = a2;
  v67 = a1;
  result = gdc::Registry::storage<arComponents::CopiedEntity>(a1);
  v7 = (_QWORD *)result;
  if ((a3 & 1) != 0)
  {
    v8 = *(unint64_t **)(result + 56);
    v9 = *(unint64_t **)(result + 64);
    if (v8 != v9)
    {
      for (i = *(unint64_t **)(result + 80); ; ++i)
      {
        v14 = *v8;
        v15 = (_QWORD *)gdc::Registry::storage<arComponents::IsVisible>(a1);
        v16 = v15[4];
        if (v14 >> 39 >= (v15[5] - v16) >> 3)
          break;
        v17 = *(_QWORD *)(v16 + 8 * (v14 >> 39));
        if (!v17)
          break;
        v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v14) & 0x7F));
        v19 = v15[7];
        v20 = v15[8];
        if (v18 >= (v20 - v19) >> 3)
          goto LABEL_13;
        v21 = v19 + 8 * v18;
        if (*(_DWORD *)(v21 + 4) == HIDWORD(v14))
          v22 = v21;
        else
          v22 = v15[8];
LABEL_14:
        v23 = *i;
        v24 = (_QWORD *)gdc::Registry::storage<arComponents::IsVisible>(a2);
        v25 = v24[4];
        if (v23 >> 39 < (v24[5] - v25) >> 3 && (v26 = *(_QWORD *)(v25 + 8 * (v23 >> 39))) != 0)
        {
          v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F));
          v29 = v24[7];
          v28 = v24[8];
          if (v27 < (v28 - v29) >> 3)
          {
            v30 = v29 + 8 * v27;
            if (*(_DWORD *)(v30 + 4) != HIDWORD(v23))
              v30 = v24[8];
            goto LABEL_22;
          }
        }
        else
        {
          v28 = v24[8];
        }
        v30 = v28;
LABEL_22:
        if (v22 != v20 && v30 == v28)
        {
          v11 = *i;
          v12 = (uint64_t *)gdc::Registry::storage<arComponents::IsVisible>(a2);
          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v12, v11);
        }
        else if (v22 == v20 && v30 != v28)
        {
          v32 = (_QWORD *)gdc::Registry::storage<arComponents::IsVisible>(a2);
          gdc::ComponentStorageWrapper<arComponents::IsVisible>::remove(v32, *i);
        }
        v13 = (_QWORD *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>(a1);
        result = gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>::remove(v13, v14);
        if (++v8 == v9)
          return result;
      }
      v20 = v15[8];
LABEL_13:
      v22 = v20;
      goto LABEL_14;
    }
  }
  else
  {
    result = gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>(a1);
    v33 = (_QWORD *)result;
    v34 = result + 32;
    v36 = v7[7];
    v35 = v7[8];
    if (*(_QWORD *)(result + 64) - *(_QWORD *)(result + 56) >= (unint64_t)(v35 - v36))
      v37 = v7 + 4;
    else
      v37 = (_QWORD *)(result + 32);
    if (v7 + 4 == v37)
    {
      v68 = &v67;
      v69 = &v66;
      if (v36 != v35)
      {
        v38 = (unint64_t *)v7[10];
        do
        {
          v39 = *(unsigned int *)(v36 + 4);
          v40 = v33[4];
          if (v39 >> 7 < (v33[5] - v40) >> 3)
          {
            v41 = *(_QWORD *)(v40 + 8 * (v39 >> 7));
            if (v41)
            {
              v42 = *(unsigned __int16 *)(v41 + 2 * (v39 & 0x7F));
              v44 = v33[7];
              v43 = v33[8];
              if (v42 < (v43 - v44) >> 3)
              {
                v45 = v44 + 8 * v42;
                if (v45 != v43 && *(_DWORD *)(v45 + 4) == (_DWORD)v39)
                  result = md::ECSHelpers::updateTagComponent<arComponents::IsVisible>(gdc::Registry *,gdc::Registry *,BOOL)::{lambda(gdc::Entity,arComponents::CopiedEntity &)#1}::operator()(&v68, *(_QWORD *)v36, v38);
              }
            }
          }
          ++v38;
          v36 += 8;
        }
        while (v36 != v35);
      }
    }
    if ((_QWORD *)v34 == v37)
    {
      v68 = &v67;
      v69 = &v66;
      v48 = v33[7];
      v47 = v33[8];
      while (v48 != v47)
      {
        v50 = *(unsigned int *)(v48 + 4);
        v51 = v7[4];
        v52 = (v7[5] - v51) >> 3;
        if (v50 >> 7 < v52)
        {
          v53 = *(_QWORD *)(v51 + 8 * (v50 >> 7));
          if (v53)
          {
            v54 = *(unsigned __int16 *)(v53 + 2 * (v50 & 0x7F));
            v56 = v7[7];
            v55 = v7[8];
            v57 = (v55 - v56) >> 3;
            if (v57 > v54)
            {
              v58 = v56 + 8 * v54;
              if (v58 != v55 && *(_DWORD *)(v58 + 4) == (_DWORD)v50)
              {
                v60 = *(_QWORD *)v48;
                v61 = *(_QWORD *)v48 >> 39;
                if (v61 < v52
                  && (v62 = *(_QWORD *)(v51 + 8 * v61)) != 0
                  && (v63 = *(unsigned __int16 *)(v62 + 2 * (HIDWORD(v60) & 0x7F)), v57 > v63)
                  && ((v64 = v56 + 8 * v63, v64 != v55) ? (v65 = *(_DWORD *)(v64 + 4) == HIDWORD(v60)) : (v65 = 0), v65))
                {
                  v49 = (unint64_t *)(v7[10] + 8 * v63);
                }
                else
                {
                  v49 = (unint64_t *)v7[11];
                }
                result = md::ECSHelpers::updateTagComponent<arComponents::IsVisible>(gdc::Registry *,gdc::Registry *,BOOL)::{lambda(gdc::Entity,arComponents::CopiedEntity &)#1}::operator()(&v68, v60, v49);
              }
            }
          }
        }
        v48 += 8;
      }
    }
  }
  return result;
}

uint64_t gdc::Registry::storage<arComponents::CopiedEntity>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x3DAC51DBC96F761DLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x3DAC51DBC96F761DLL;
      if (*(_QWORD *)&v3 <= 0x3DAC51DBC96F761DuLL)
        v5 = 0x3DAC51DBC96F761DuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x3DAC51DBC96F761DLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x3DAC51DBC96F761DLL)
            {
              if (v7[2] == 0x3DAC51DBC96F761DLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x3DAC51DBC96F761DLL)
          {
            if (v7[2] == 0x3DAC51DBC96F761DLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::CopiedEntity]";
  *(_QWORD *)(v11 + 24) = 26;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1848;
  *(_QWORD *)(v11 + 8) = 0x3DAC51DBC96F761DLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x3DAC51DBC96F761DuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x3DAC51DBC96F761DLL;
  v15[1] = "arComponents::CopiedEntity]";
  v15[2] = 26;
  gdc::Registry::_registerStorageDataSignals(a1, 0x3DAC51DBC96F761DLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FD6C43C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::QueuedForDeletionAfterLayout>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>();
}

uint64_t gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE0C3110899EA91FELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE0C3110899EA91FELL;
      if (*(_QWORD *)&v3 <= 0xE0C3110899EA91FELL)
        v5 = 0xE0C3110899EA91FELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE0C3110899EA91FELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE0C3110899EA91FELL)
            {
              if (v7[2] == 0xE0C3110899EA91FELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE0C3110899EA91FELL)
          {
            if (v7[2] == 0xE0C3110899EA91FELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>]";
  *(_QWORD *)(v11 + 24) = 67;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B23B8;
  *(_QWORD *)(v11 + 8) = 0xE0C3110899EA91FELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE0C3110899EA91FELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE0C3110899EA91FELL;
  v15[1] = "arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>]";
  v15[2] = 67;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE0C3110899EA91FELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FD6C740(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::QueuedForDeletionAfterLayout>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::QueuedForDeletionAfterLayout>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::CopiedEntity>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CopiedEntity>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::CopiedEntity>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CopiedEntity>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

BOOL md::ECSHelpers::updateTagComponent<arComponents::IsVisible>(gdc::Registry *,gdc::Registry *,BOOL)::{lambda(gdc::Entity,arComponents::CopiedEntity &)#1}::operator()(uint64_t **a1, unint64_t a2, unint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;

  v6 = (_QWORD *)gdc::Registry::storage<arComponents::IsVisible>(**a1);
  v7 = v6[4];
  if (a2 >> 39 >= (v6[5] - v7) >> 3 || (v8 = *(_QWORD *)(v7 + 8 * (a2 >> 39))) == 0)
  {
    v11 = v6[8];
    goto LABEL_8;
  }
  v9 = *(unsigned __int16 *)(v8 + 2 * (HIDWORD(a2) & 0x7F));
  v10 = v6[7];
  v11 = v6[8];
  if (v9 >= (v11 - v10) >> 3)
  {
LABEL_8:
    v13 = v11;
    goto LABEL_9;
  }
  v12 = v10 + 8 * v9;
  if (*(_DWORD *)(v12 + 4) == HIDWORD(a2))
    v13 = v12;
  else
    v13 = v6[8];
LABEL_9:
  v14 = *a3;
  v15 = (_QWORD *)gdc::Registry::storage<arComponents::IsVisible>(*a1[1]);
  v16 = v15[4];
  if (v14 >> 39 >= (v15[5] - v16) >> 3 || (v17 = *(_QWORD *)(v16 + 8 * (v14 >> 39))) == 0)
  {
    v19 = v15[8];
    goto LABEL_16;
  }
  v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v14) & 0x7F));
  v20 = v15[7];
  v19 = v15[8];
  if (v18 >= (v19 - v20) >> 3)
  {
LABEL_16:
    v21 = v19;
    goto LABEL_17;
  }
  v21 = v20 + 8 * v18;
  if (*(_DWORD *)(v21 + 4) != HIDWORD(v14))
    v21 = v15[8];
LABEL_17:
  if (v13 != v11 && v21 == v19)
  {
    v25 = *a3;
    v26 = (uint64_t *)gdc::Registry::storage<arComponents::IsVisible>(*a1[1]);
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v26, v25);
  }
  else if (v13 == v11 && v21 != v19)
  {
    v24 = (_QWORD *)gdc::Registry::storage<arComponents::IsVisible>(*a1[1]);
    gdc::ComponentStorageWrapper<arComponents::IsVisible>::remove(v24, *a3);
  }
  v27 = (_QWORD *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>(**a1);
  return gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>::remove(v27, a2);
}

void std::__function::__func<void md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::AREnvironmentProbeTexture)#1},std::allocator<void md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::AREnvironmentProbeTexture)#1}>,gdc::Entity ()(arComponents::AREnvironmentProbeTexture)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<void md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::AREnvironmentProbeTexture)#1},std::allocator<void md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::AREnvironmentProbeTexture)#1}>,gdc::Entity ()(arComponents::AREnvironmentProbeTexture)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8708;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::AREnvironmentProbeTexture)#1},std::allocator<void md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::AREnvironmentProbeTexture)#1}>,gdc::Entity ()(arComponents::AREnvironmentProbeTexture)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8708;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<void md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::AREnvironmentProbeTexture)#1},std::allocator<void md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::AREnvironmentProbeTexture)#1}>,gdc::Entity ()(arComponents::AREnvironmentProbeTexture)>::operator()(uint64_t a1, uint64_t a2)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  gdc::Registry *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  id v15[3];

  v15[0] = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v15[1] = v4;
  v15[2] = v5;
  v8 = **(gdc::Registry ***)(a1 + 8);
  v9 = gdc::Registry::create(v8);
  v10 = (uint64_t *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>((uint64_t)v8);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v10, v9);
  v11 = (uint64_t *)gdc::Registry::storage<arComponents::AREnvironmentProbeTexture>((uint64_t)v8);
  gdc::ComponentStorageWrapper<arComponents::AREnvironmentProbeTexture>::emplace(v11, v9, (uint64_t)v15);
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return v9;
}

void sub_19FD6CD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t std::tuple<arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>::~tuple(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)(a1 + 112) = &off_1E42B5430;

  v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8678;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8678;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, __int128 *a5, uint64_t *a6, uint64_t a7, __int128 *a8)
{
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  id v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  gdc::Registry *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[2];
  std::__shared_weak_count *v40;
  uint64_t (**v41)();
  id v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;

  v13 = *a3;
  v44 = *(_OWORD *)a2;
  v45 = *(_QWORD *)(a2 + 16);
  v46 = *(_OWORD *)(a2 + 24);
  v47 = *(_QWORD *)(a2 + 40);
  v48 = *(_QWORD *)(a2 + 48);
  v50 = *(_QWORD *)(a2 + 72);
  v49 = *(_OWORD *)(a2 + 56);
  v43 = v13;
  v40 = 0;
  v41 = &off_1E42B5430;
  v14 = *(_QWORD *)(a4 + 8);
  v39[0] = *(_QWORD *)a4;
  v15 = *(std::__shared_weak_count **)(a4 + 16);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v40 = v15;
  }
  v39[1] = v14;
  v18 = *(id *)(a4 + 32);
  v42 = v18;
  v19 = *a5;
  v20 = *a6;
  v21 = *(_OWORD *)a7;
  v38 = *(_QWORD *)(a7 + 16);
  v36 = *a8;
  v37 = v21;
  v22 = **(gdc::Registry ***)(a1 + 8);
  v52 = v19;
  v51 = v20;
  v23 = gdc::Registry::create(v22);
  v24 = (uint64_t *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>((uint64_t)v22);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v24, v23);
  v25 = (uint64_t *)gdc::Registry::storage<arComponents::StandardPipeline>((uint64_t)v22);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v25, v23);
  v26 = (uint64_t *)gdc::Registry::storage<arComponents::WorldTransform>((uint64_t)v22);
  gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v26, v23, &v44);
  v27 = (uint64_t *)gdc::Registry::storage<arComponents::MeshDataComponent>((uint64_t)v22);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v27, v23, &v43);
  v28 = gdc::Registry::storage<arComponents::AlbedoTextureComponent>((uint64_t)v22);
  gdc::ComponentStorageWrapper<arComponents::AlbedoTextureComponent>::emplace(v28, v23, (uint64_t)v39);
  v29 = (uint64_t *)gdc::Registry::storage<arComponents::AlbedoTextureUVMapping>((uint64_t)v22);
  gdc::ComponentStorageWrapper<md::components::AlbedoTint>::emplace(v29, v23, (uint64_t)&v52);
  v30 = (uint64_t *)gdc::Registry::storage<arComponents::AlbedoTextureUVScale>((uint64_t)v22);
  gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVScale>::emplace(v30, v23, (uint64_t)&v51);
  v31 = (uint64_t *)gdc::Registry::storage<arComponents::Boundary>((uint64_t)v22);
  gdc::ComponentStorageWrapper<arComponents::Boundary>::emplace(v31, v23, &v37);
  v32 = (uint64_t *)gdc::Registry::storage<arComponents::StyleColor>((uint64_t)v22);
  gdc::ComponentStorageWrapper<md::components::AlbedoTint>::emplace(v32, v23, (uint64_t)&v36);
  v41 = &off_1E42B5430;

  if (v15)
  {
    v33 = (unint64_t *)&v15->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v23;
}

void sub_19FD6D064(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::tuple<arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>::~tuple(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C85E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C85E8;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, __int128 *a5, int *a6)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  gdc::Registry *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  int v35;

  v6 = *a3;
  v7 = (std::__shared_weak_count *)a3[1];
  v28 = *(_OWORD *)a2;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = *(_OWORD *)(a2 + 24);
  v31 = *(_QWORD *)(a2 + 40);
  v32 = *(_QWORD *)(a2 + 48);
  v34 = *(_QWORD *)(a2 + 72);
  v33 = *(_OWORD *)(a2 + 56);
  v27 = 0;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v27 = v7;
  }
  v26 = v6;
  v10 = *(_OWORD *)a4;
  v25 = *(_QWORD *)(a4 + 16);
  v23 = *a5;
  v24 = v10;
  v11 = **(gdc::Registry ***)(a1 + 8);
  v35 = *a6;
  v12 = gdc::Registry::create(v11);
  v13 = (uint64_t *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>((uint64_t)v11);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v13, v12);
  v14 = (uint64_t *)gdc::Registry::storage<arComponents::ShadowPipeline>((uint64_t)v11);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v14, v12);
  v15 = (uint64_t *)gdc::Registry::storage<arComponents::WorldTransform>((uint64_t)v11);
  gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v15, v12, &v28);
  v16 = (uint64_t *)gdc::Registry::storage<arComponents::MeshComponent>((uint64_t)v11);
  gdc::ComponentStorageWrapper<arComponents::MeshComponent>::emplace(v16, v12, &v26);
  v17 = (uint64_t *)gdc::Registry::storage<arComponents::Boundary>((uint64_t)v11);
  gdc::ComponentStorageWrapper<arComponents::Boundary>::emplace(v17, v12, &v24);
  v18 = (uint64_t *)gdc::Registry::storage<arComponents::StyleColor>((uint64_t)v11);
  gdc::ComponentStorageWrapper<md::components::AlbedoTint>::emplace(v18, v12, (uint64_t)&v23);
  v19 = (uint64_t *)gdc::Registry::storage<arComponents::VisibilityAlpha>((uint64_t)v11);
  gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v19, v12, &v35);
  if (v7)
  {
    v20 = (unint64_t *)&v7->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v12;
}

void sub_19FD6D2E0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C86C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C86C0;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  gdc::Registry *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;

  v5 = *a3;
  v6 = (std::__shared_weak_count *)a3[1];
  v24 = *(_OWORD *)a2;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = *(_OWORD *)(a2 + 24);
  v27 = *(_QWORD *)(a2 + 40);
  v28 = *(_QWORD *)(a2 + 48);
  v29 = *(_OWORD *)(a2 + 56);
  v30 = *(_QWORD *)(a2 + 72);
  v23 = 0;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v23 = v6;
  }
  v22 = v5;
  v20 = *(_OWORD *)a4;
  v21 = *(_QWORD *)(a4 + 16);
  v9 = **(gdc::Registry ***)(a1 + 8);
  v31 = *a5;
  v10 = gdc::Registry::create(v9);
  v11 = (uint64_t *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>((uint64_t)v9);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v11, v10);
  v12 = (uint64_t *)gdc::Registry::storage<arComponents::OcclusionPipeline>((uint64_t)v9);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v12, v10);
  v13 = (uint64_t *)gdc::Registry::storage<arComponents::WorldTransform>((uint64_t)v9);
  gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v13, v10, &v24);
  v14 = (uint64_t *)gdc::Registry::storage<arComponents::MeshComponent>((uint64_t)v9);
  gdc::ComponentStorageWrapper<arComponents::MeshComponent>::emplace(v14, v10, &v22);
  v15 = (uint64_t *)gdc::Registry::storage<arComponents::Boundary>((uint64_t)v9);
  gdc::ComponentStorageWrapper<arComponents::Boundary>::emplace(v15, v10, &v20);
  v16 = (uint64_t *)gdc::Registry::storage<arComponents::VisibilityAlpha>((uint64_t)v9);
  gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v16, v10, &v31);
  if (v6)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v10;
}

void sub_19FD6D4E4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()(uint64_t *a1, unint64_t a2, __int128 *a3, uint64_t a4, std::__shared_weak_count *a5, __int128 *a6, arComponents::AlbedoTextureComponent *a7, __int128 *a8, uint64_t *a9, __int128 *a10, int *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t **v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  uint64_t *v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  __int128 v68;
  uint64_t v69;
  _QWORD v70[2];
  std::__shared_weak_count *v71;
  uint64_t (**v72)();
  id v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  int v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t (**v82)();
  id v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  __int128 v97;

  v59 = *a3;
  v60 = *((_QWORD *)a3 + 2);
  v61 = *(__int128 *)((char *)a3 + 24);
  v62 = *((_QWORD *)a3 + 5);
  v63 = *((_QWORD *)a3 + 6);
  v64 = *(__int128 *)((char *)a3 + 56);
  v65 = *((_QWORD *)a3 + 9);
  v67 = 0;
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v66 = a4;
    v67 = a5;
  }
  else
  {
    v66 = a4;
  }
  v68 = *a6;
  v69 = *((_QWORD *)a6 + 2);
  arComponents::AlbedoTextureComponent::AlbedoTextureComponent((arComponents::AlbedoTextureComponent *)v70, a7);
  v74 = *a8;
  v75 = *a9;
  v76 = *a10;
  v77 = *a11;
  v16 = *a1;
  v88 = v59;
  v90 = v61;
  v89 = v60;
  v91 = v62;
  v92 = v63;
  v93 = v64;
  v94 = v65;
  v86 = 0;
  v87 = 0;
  if (v67)
  {
    v17 = (unint64_t *)&v67->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v87 = v67;
  }
  v86 = v66;
  v84 = v68;
  v85 = v69;
  v81 = 0;
  v82 = &off_1E42B5430;
  v19 = v70[1];
  v79 = v70[0];
  v80 = 0;
  v20 = v71;
  if (v71)
  {
    v21 = (unint64_t *)&v71->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v81 = v20;
  }
  v80 = v19;
  v83 = v73;
  v78 = v76;
  v97 = v74;
  v96 = v75;
  v95 = v77;
  v23 = *(_QWORD *)(v16 + 24);
  if (!v23)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    goto LABEL_60;
  }
  v24 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t *, __int128 *, uint64_t *, __int128 *, uint64_t *, __int128 *, int *))(*(_QWORD *)v23 + 48))(v23, &v88, &v86, &v84, &v79, &v97, &v96, &v78, &v95);
  v82 = &off_1E42B5430;

  v25 = v81;
  if (v81)
  {
    v26 = (unint64_t *)&v81->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v87;
  if (v87)
  {
    v29 = (unint64_t *)&v87->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (uint64_t **)a1[1];
  v33 = v31[1];
  v32 = (unint64_t)v31[2];
  if ((unint64_t)v33 < v32)
  {
    *v33 = v24;
    v34 = v33 + 1;
    goto LABEL_47;
  }
  v35 = *v31;
  v36 = (char *)v33 - (char *)*v31;
  v37 = v36 >> 3;
  v38 = (v36 >> 3) + 1;
  if (v38 >> 61)
    abort();
  v39 = v32 - (_QWORD)v35;
  if (v39 >> 2 > v38)
    v38 = v39 >> 2;
  if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
    v40 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v40 = v38;
  if (!v40)
  {
    v41 = 0;
    goto LABEL_37;
  }
  if (v40 >> 61)
LABEL_60:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v41 = operator new(8 * v40);
LABEL_37:
  v42 = (uint64_t *)&v41[8 * v37];
  v43 = (uint64_t *)&v41[8 * v40];
  *v42 = v24;
  v34 = v42 + 1;
  if (v33 != v35)
  {
    v44 = (char *)v33 - (char *)v35 - 8;
    if (v44 < 0x58)
      goto LABEL_63;
    if ((unint64_t)((char *)v33 - v41 - v36) < 0x20)
      goto LABEL_63;
    v45 = (v44 >> 3) + 1;
    v46 = &v41[8 * v37 - 16];
    v47 = v33 - 2;
    v48 = v45 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v49 = *(_OWORD *)v47;
      *(v46 - 1) = *((_OWORD *)v47 - 1);
      *v46 = v49;
      v46 -= 2;
      v47 -= 4;
      v48 -= 4;
    }
    while (v48);
    v42 -= v45 & 0x3FFFFFFFFFFFFFFCLL;
    v33 -= v45 & 0x3FFFFFFFFFFFFFFCLL;
    if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_63:
      do
      {
        v50 = *--v33;
        *--v42 = v50;
      }
      while (v33 != v35);
    }
    v33 = *v31;
  }
  *v31 = v42;
  v31[1] = v34;
  v31[2] = v43;
  if (v33)
    operator delete(v33);
LABEL_47:
  v31[1] = v34;
  v51 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(*(_QWORD *)a1[2]);
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v51, a2);
  v52 = *(_QWORD *)a1[2];
  *(_QWORD *)&v88 = v24;
  v53 = (uint64_t *)gdc::Registry::storage<arComponents::CopiedEntity>(v52);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v53, a2, &v88);
  v72 = &off_1E42B5430;

  v54 = v71;
  if (v71)
  {
    v55 = (unint64_t *)&v71->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v67)
  {
    v57 = (unint64_t *)&v67->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
}

void sub_19FD6D9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::tuple<arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>::~tuple((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>::~tuple(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 144) = &off_1E42B5430;

  v2 = *(std::__shared_weak_count **)(a1 + 136);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8630;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8630;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t *a7, __int128 *a8, int *a9)
{
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  id v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  gdc::Registry *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v45;
  _QWORD v46[2];
  std::__shared_weak_count *v47;
  uint64_t (**v48)();
  id v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  __int128 v63;

  v13 = *a3;
  v14 = (std::__shared_weak_count *)a3[1];
  v54 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  v56 = *(_OWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a2 + 40);
  v55 = v15;
  v57 = v16;
  v58 = *(_QWORD *)(a2 + 48);
  v60 = *(_QWORD *)(a2 + 72);
  v59 = *(_OWORD *)(a2 + 56);
  v53 = 0;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v53 = v14;
  }
  v52 = v13;
  v50 = *(_OWORD *)a4;
  v51 = *(_QWORD *)(a4 + 16);
  v47 = 0;
  v48 = &off_1E42B5430;
  v19 = *(_QWORD *)(a5 + 8);
  v46[0] = *(_QWORD *)a5;
  v20 = *(std::__shared_weak_count **)(a5 + 16);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v47 = v20;
  }
  v46[1] = v19;
  v23 = *(id *)(a5 + 32);
  v49 = v23;
  v24 = *a6;
  v25 = *a7;
  v45 = *a8;
  v26 = *a9;
  v27 = **(gdc::Registry ***)(a1 + 8);
  v63 = v24;
  v62 = v25;
  v61 = v26;
  v28 = gdc::Registry::create(v27);
  v29 = (uint64_t *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>((uint64_t)v27);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v29, v28);
  v30 = (uint64_t *)gdc::Registry::storage<arComponents::StandardPipeline>((uint64_t)v27);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v30, v28);
  v31 = (uint64_t *)gdc::Registry::storage<arComponents::WorldTransform>((uint64_t)v27);
  gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v31, v28, &v54);
  v32 = (uint64_t *)gdc::Registry::storage<arComponents::MeshComponent>((uint64_t)v27);
  gdc::ComponentStorageWrapper<arComponents::MeshComponent>::emplace(v32, v28, &v52);
  v33 = (uint64_t *)gdc::Registry::storage<arComponents::Boundary>((uint64_t)v27);
  gdc::ComponentStorageWrapper<arComponents::Boundary>::emplace(v33, v28, &v50);
  v34 = gdc::Registry::storage<arComponents::AlbedoTextureComponent>((uint64_t)v27);
  gdc::ComponentStorageWrapper<arComponents::AlbedoTextureComponent>::emplace(v34, v28, (uint64_t)v46);
  v35 = (uint64_t *)gdc::Registry::storage<arComponents::AlbedoTextureUVMapping>((uint64_t)v27);
  gdc::ComponentStorageWrapper<md::components::AlbedoTint>::emplace(v35, v28, (uint64_t)&v63);
  v36 = (uint64_t *)gdc::Registry::storage<arComponents::AlbedoTextureUVScale>((uint64_t)v27);
  gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVScale>::emplace(v36, v28, (uint64_t)&v62);
  v37 = (uint64_t *)gdc::Registry::storage<arComponents::StyleColor>((uint64_t)v27);
  gdc::ComponentStorageWrapper<md::components::AlbedoTint>::emplace(v37, v28, (uint64_t)&v45);
  v38 = (uint64_t *)gdc::Registry::storage<arComponents::VisibilityAlpha>((uint64_t)v27);
  gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v38, v28, &v61);
  v48 = &off_1E42B5430;

  if (v20)
  {
    v39 = (unint64_t *)&v20->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v41 = v53;
  if (v53)
  {
    v42 = (unint64_t *)&v53->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  return v28;
}

void sub_19FD6DDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  std::__shared_weak_count *v22;
  void *v23;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;

  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (a22)
  {
    v27 = (unint64_t *)&a22->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    goto LABEL_117;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x37F8C546A65FE3EELL;
    if (a3 <= 0x37F8C546A65FE3EELL)
      v4 = 0x37F8C546A65FE3EELL % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x37F8C546A65FE3EELL;
  }
  v9 = *(_QWORD **)(a2 + 8 * v4);
  if (!v9)
    goto LABEL_25;
  v10 = (_QWORD *)*v9;
  if (!v10)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v12 = v10[1];
      if (v12 == 0x37F8C546A65FE3EELL)
      {
        if (v10[2] == 0x37F8C546A65FE3EELL)
          goto LABEL_23;
      }
      else if ((v12 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v11 = v10[1];
    if (v11 == 0x37F8C546A65FE3EELL)
      break;
    if (v11 >= a3)
      v11 %= a3;
    if (v11 != v4)
      goto LABEL_25;
LABEL_12:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_25;
  }
  if (v10[2] != 0x37F8C546A65FE3EELL)
    goto LABEL_12;
LABEL_23:
  v13 = v10[5];
  if (*(_QWORD *)(v13 + 8) == 0x37F8C546A65FE3EELL)
  {
    v7 = *(_QWORD *)(v13 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v7 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v14 = 0xA822B3A972ECE7CDLL;
    if (a3 <= 0xA822B3A972ECE7CDLL)
      v14 = 0xA822B3A972ECE7CDLL % a3;
  }
  else
  {
    v14 = (a3 - 1) & 0xA822B3A972ECE7CDLL;
  }
  v15 = *(_QWORD **)(a2 + 8 * v14);
  if (!v15)
    goto LABEL_48;
  v16 = (_QWORD *)*v15;
  if (!v16)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v18 = v16[1];
      if (v18 == 0xA822B3A972ECE7CDLL)
      {
        if (v16[2] == 0xA822B3A972ECE7CDLL)
          goto LABEL_46;
      }
      else if ((v18 & (a3 - 1)) != v14)
      {
        goto LABEL_48;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v17 = v16[1];
    if (v17 != 0xA822B3A972ECE7CDLL)
    {
      if (v17 >= a3)
        v17 %= a3;
      if (v17 != v14)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v16[2] != 0xA822B3A972ECE7CDLL)
    {
LABEL_35:
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v19 = v16[5];
  if (*(_QWORD *)(v19 + 8) == 0xA822B3A972ECE7CDLL)
  {
    v6 = *(_QWORD *)(v19 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v6 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v20 = 0x3C394DB2AC35C8;
    if (a3 <= 0x3C394DB2AC35C8)
      v20 = 0x3C394DB2AC35C8 % a3;
  }
  else
  {
    v20 = (a3 - 1) & 0x3C394DB2AC35C8;
  }
  v21 = *(_QWORD **)(a2 + 8 * v20);
  if (!v21)
    goto LABEL_71;
  v22 = (_QWORD *)*v21;
  if (!v22)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v24 = v22[1];
      if (v24 == 0x3C394DB2AC35C8)
      {
        if (v22[2] == 0x3C394DB2AC35C8)
          goto LABEL_69;
      }
      else if ((v24 & (a3 - 1)) != v20)
      {
        goto LABEL_71;
      }
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v23 = v22[1];
    if (v23 != 0x3C394DB2AC35C8)
    {
      if (v23 >= a3)
        v23 %= a3;
      if (v23 != v20)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v22[2] != 0x3C394DB2AC35C8)
    {
LABEL_58:
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v25 = v22[5];
  if (*(_QWORD *)(v25 + 8) == 0x3C394DB2AC35C8)
  {
    v8 = *(_QWORD *)(v25 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v8 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    v26 = 0xF409241CDA31AF08;
    if (a3 <= 0xF409241CDA31AF08)
      v26 = 0xF409241CDA31AF08 % a3;
  }
  else
  {
    v26 = (a3 - 1) & 0xF409241CDA31AF08;
  }
  v27 = *(_QWORD **)(a2 + 8 * v26);
  if (!v27)
    goto LABEL_94;
  v28 = (_QWORD *)*v27;
  if (!v28)
    goto LABEL_94;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v30 = v28[1];
      if (v30 == 0xF409241CDA31AF08)
      {
        if (v28[2] == 0xF409241CDA31AF08)
          goto LABEL_92;
      }
      else if ((v30 & (a3 - 1)) != v26)
      {
        goto LABEL_94;
      }
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_94;
    }
  }
  while (2)
  {
    v29 = v28[1];
    if (v29 != 0xF409241CDA31AF08)
    {
      if (v29 >= a3)
        v29 %= a3;
      if (v29 != v26)
        goto LABEL_94;
      goto LABEL_81;
    }
    if (v28[2] != 0xF409241CDA31AF08)
    {
LABEL_81:
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_94;
      continue;
    }
    break;
  }
LABEL_92:
  v31 = v28[5];
  if (*(_QWORD *)(v31 + 8) == 0xF409241CDA31AF08)
  {
    v5 = *(_QWORD *)(v31 + 32);
    goto LABEL_95;
  }
LABEL_94:
  v5 = 0;
LABEL_95:
  if (v3.u32[0] > 1uLL)
  {
    v32 = 0x61AAF6FADEFBCCACLL;
    if (a3 <= 0x61AAF6FADEFBCCACLL)
      v32 = 0x61AAF6FADEFBCCACLL % a3;
  }
  else
  {
    v32 = (a3 - 1) & 0x61AAF6FADEFBCCACLL;
  }
  v33 = *(_QWORD **)(a2 + 8 * v32);
  if (!v33)
    goto LABEL_117;
  v34 = (_QWORD *)*v33;
  if (!v34)
    goto LABEL_117;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v36 = v34[1];
      if (v36 == 0x61AAF6FADEFBCCACLL)
      {
        if (v34[2] == 0x61AAF6FADEFBCCACLL)
          goto LABEL_115;
      }
      else if ((v36 & (a3 - 1)) != v32)
      {
        goto LABEL_117;
      }
      v34 = (_QWORD *)*v34;
      if (!v34)
        goto LABEL_117;
    }
  }
  while (1)
  {
    v35 = v34[1];
    if (v35 == 0x61AAF6FADEFBCCACLL)
      break;
    if (v35 >= a3)
      v35 %= a3;
    if (v35 != v32)
      goto LABEL_117;
LABEL_104:
    v34 = (_QWORD *)*v34;
    if (!v34)
      goto LABEL_117;
  }
  if (v34[2] != 0x61AAF6FADEFBCCACLL)
    goto LABEL_104;
LABEL_115:
  v37 = v34[5];
  if (*(_QWORD *)(v37 + 8) != 0x61AAF6FADEFBCCACLL)
  {
LABEL_117:
    v38 = 0;
    goto LABEL_118;
  }
  v38 = *(_QWORD *)(v37 + 32);
LABEL_118:
  *result = v7;
  result[1] = v6;
  result[2] = v8;
  result[3] = v5;
  result[4] = v38;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::ARRenderEntityGenerationContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B15E0;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::ARRenderEntityGenerationContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B15E0;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARRenderEntityGenerationContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void std::__function::__func<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_1,std::allocator<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_1>,void ()(md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_1,std::allocator<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_1>,void ()(md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427C078;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_1,std::allocator<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_1>,void ()(md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427C078;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_1,std::allocator<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_1>,void ()(md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  float result;

  v2 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 10056)
                 + 8 * *(unsigned int *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 10032) + 8 * *a2));
  result = *(double *)(**(_QWORD **)(a1 + 16) + 3768)
         * *(double *)(**(_QWORD **)(a1 + 16) + 1384)
         / (*(double *)(**(_QWORD **)(a1 + 16) + 1368)
          * (*(double *)(v2 + 72) - *(double *)(v2 + 56)));
  *(float *)(v2 + 368) = result;
  return result;
}

void std::__function::__func<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0,std::allocator<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0>,void ()(md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0,std::allocator<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0>,void ()(md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_1E427C030;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0,std::allocator<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0>,void ()(md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E427C030;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0,std::allocator<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0>,void ()(md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4, unint64_t *a5, uint64_t a6, int8x8_t ***a7, uint64_t *a8, _WORD *a9, uint64_t **a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, unsigned __int16 *a14, uint64_t *a15, uint64_t **a16, uint64_t **a17, uint64_t **a18, uint64_t **a19)
{
  md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0::operator()((md::VKMRenderResourcesStore ***)(a1 + 8), *a2, a4, a5, *a7, a8, a9, *a10, a11, a12, a13, a14, a15, *a16, *a17, *a18, *a19);
}

void md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0::operator()(md::VKMRenderResourcesStore ***a1, uint64_t a2, _QWORD *a3, unint64_t *a4, int8x8_t **a5, uint64_t *a6, _WORD *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, unsigned __int16 *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, uint64_t *a17)
{
  unint64_t v17;
  md::VKMRenderResourcesStore ***v20;
  md::VKMRenderResourcesStore **v21;
  md::VKMRenderResourcesStore *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t *v29;
  BOOL v30;
  int v31;
  md::VKMRenderResourcesStore *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (***v51)(_QWORD);
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  md::LayoutContext *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  float v81;
  float v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  md::SharedResource *v94;
  md::SharedResource *v95;
  md::SharedResource *v96;
  uint64_t **v97;
  uint64_t **v98;
  uint64_t *v99;
  float v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  md::VKMRenderResourcesStore *v107;
  uint64_t v108;
  BOOL v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t *v112;
  md::VKMRenderResourcesStore **v113;
  unint64_t v114;
  unint64_t MaterialHandle;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t **v119;
  _QWORD *v120;
  uint64_t **v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t **v126;
  uint64_t **v127;
  uint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t **v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  unsigned __int8 v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  unint64_t v143;
  _QWORD *v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t *v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t *v161;
  unint64_t v162;
  _QWORD *v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t *v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  char *v179;
  unint64_t v180;
  _QWORD *v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  _BYTE *v187;
  _QWORD *v188;
  unint64_t v189;
  uint64_t v190;
  _OWORD *v191;
  char *v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  uint64_t *v196;
  unint64_t v197;
  uint8x8_t v198;
  _QWORD *v199;
  _QWORD *v200;
  unint64_t v201;
  uint64_t v202;
  char *v203;
  float v204;
  float v205;
  _BOOL8 v206;
  unint64_t v207;
  unint64_t v208;
  size_t v209;
  unint64_t v210;
  uint8x8_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint8x8_t v219;
  void **v220;
  void *v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  float v225;
  float v226;
  _BOOL8 v227;
  unint64_t v228;
  unint64_t v229;
  size_t v230;
  void *v231;
  _QWORD *v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  size_t v236;
  size_t v237;
  size_t v238;
  _QWORD *v239;
  size_t v240;
  uint64_t v241;
  unint64_t v242;
  uint8x8_t v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  size_t v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  unint64_t v251;
  unint64_t v252;
  uint8x8_t v253;
  _QWORD **v254;
  _QWORD *v255;
  unint64_t v256;
  uint64_t v257;
  float v258;
  float v259;
  _BOOL8 v260;
  unint64_t v261;
  unint64_t v262;
  size_t v263;
  void *v264;
  void *v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  size_t v269;
  size_t v270;
  size_t v271;
  _QWORD *v272;
  size_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint8x8_t v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  size_t v281;
  uint64_t v282;
  void *v283;
  uint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  BOOL v297;
  _QWORD *v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  unsigned __int8 v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  BOOL v316;
  _QWORD *v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  _QWORD *v321;
  _QWORD *v322;
  uint64_t v323;
  unsigned __int8 v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t **v327;
  unint64_t ColorData;
  _QWORD *v329;
  _QWORD *v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t **v333;
  _QWORD *v334;
  unint64_t v335;
  BOOL v336;
  __int16 v337;
  BOOL v338;
  int v339;
  uint64_t **v340;
  __int16 v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t *v346;
  _QWORD *v347;
  char *v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  char *v352;
  uint64_t *v353;
  unint64_t v354;
  uint64_t v355;
  char *v356;
  uint64_t *v357;
  uint64_t v358;
  __int128 v359;
  uint64_t v360;
  __int16 v361;
  unint64_t v362;
  _BYTE *v363;
  md::VKMRenderResourcesStore ***v364;
  _BYTE *v365;
  _BYTE *v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  char *v370;
  char *v371;
  char *v372;
  md::VKMRenderResourcesStore ***v373;
  __int16 v374;
  char v375;
  unint64_t v376;
  char *v377;
  unint64_t v378;
  char *v379;
  uint64_t v380;
  unint64_t v381;
  uint64_t v382;
  _BYTE *v383;
  _QWORD *v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  _OWORD *v388;
  char *v389;
  uint64_t v390;
  __int128 v391;
  uint64_t v392;
  uint64_t *v393;
  unint64_t v394;
  uint8x8_t v395;
  _QWORD *v396;
  _QWORD *v397;
  unint64_t v398;
  uint64_t v399;
  char *v400;
  float v401;
  float v402;
  _BOOL8 v403;
  unint64_t v404;
  unint64_t v405;
  size_t v406;
  unint64_t v407;
  uint8x8_t v408;
  uint64_t v409;
  uint64_t v410;
  _QWORD *v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint8x8_t v416;
  void **v417;
  _QWORD *v418;
  unint64_t v419;
  uint64_t v420;
  float v421;
  float v422;
  _BOOL8 v423;
  unint64_t v424;
  unint64_t v425;
  size_t v426;
  void *v427;
  _QWORD *v428;
  uint64_t v429;
  _QWORD *v430;
  uint64_t v431;
  size_t v432;
  size_t v433;
  size_t v434;
  _QWORD *v435;
  size_t v436;
  uint64_t v437;
  unint64_t v438;
  uint8x8_t v439;
  uint64_t v440;
  _QWORD *v441;
  uint64_t v442;
  size_t v443;
  _QWORD *v444;
  _QWORD *v445;
  _QWORD *v446;
  unint64_t v447;
  unint64_t v448;
  uint8x8_t v449;
  _QWORD **v450;
  _QWORD *v451;
  unint64_t v452;
  uint64_t v453;
  float v454;
  float v455;
  _BOOL8 v456;
  unint64_t v457;
  unint64_t v458;
  size_t v459;
  void *v460;
  void *v461;
  uint64_t v462;
  _QWORD *v463;
  uint64_t v464;
  size_t v465;
  size_t v466;
  size_t v467;
  _QWORD *v468;
  size_t v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  uint8x8_t v473;
  uint64_t v474;
  _QWORD *v475;
  uint64_t v476;
  size_t v477;
  uint64_t v478;
  void *v479;
  uint64_t v480;
  _QWORD *v481;
  unint64_t v482;
  _QWORD *v483;
  _QWORD *v484;
  uint64_t v485;
  _QWORD *v486;
  uint64_t v487;
  _QWORD *v488;
  uint64_t v489;
  _QWORD *v490;
  _QWORD *v491;
  uint64_t v492;
  _QWORD *v493;
  uint64_t v494;
  _QWORD *v495;
  uint64_t v496;
  unint64_t *v497;
  unint64_t v498;
  unint64_t v499;
  md::VKMRenderResourcesStore *v500;
  _QWORD *v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  md::VKMRenderResourcesStore *v505;
  _QWORD *v506;
  _QWORD *v507;
  uint64_t v508;
  uint64_t v509;
  md::VKMRenderResourcesStore *v510;
  _QWORD *v511;
  uint64_t v512;
  _QWORD *AssociationItemStorage;
  _QWORD *v514;
  unint64_t v515;
  unint64_t *v516;
  unint64_t v517;
  _QWORD *v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  unint64_t v523;
  char *v524;
  unint64_t *v525;
  unint64_t v526;
  uint64_t v527;
  char *v528;
  unint64_t *v529;
  uint64_t v530;
  __int128 v531;
  unint64_t v532;
  uint64_t v533;
  md::VKMRenderResourcesStore *v534;
  _QWORD *v535;
  uint64_t v536;
  uint64_t v537;
  md::VKMRenderResourcesStore *v538;
  _QWORD *v539;
  uint64_t v540;
  uint64_t v541;
  md::VKMRenderResourcesStore *v542;
  _QWORD *v543;
  uint64_t v544;
  uint64_t v545;
  md::VKMRenderResourcesStore *v546;
  _QWORD *v547;
  uint64_t v548;
  uint64_t v549;
  md::VKMRenderResourcesStore *v550;
  _QWORD *v551;
  uint64_t v552;
  uint64_t v553;
  md::VKMRenderResourcesStore *v554;
  _QWORD *v555;
  uint64_t v556;
  uint64_t v557;
  md::VKMRenderResourcesStore *v558;
  _QWORD *v559;
  uint64_t v560;
  uint64_t v561;
  md::VKMRenderResourcesStore *v562;
  _QWORD *v563;
  uint64_t v564;
  uint64_t v565;
  md::VKMRenderResourcesStore *v566;
  _QWORD *v567;
  uint64_t v568;
  uint64_t v569;
  md::VKMRenderResourcesStore *v570;
  _QWORD *v571;
  uint64_t v572;
  int8x8_t *v573;
  md::VKMRenderResourcesStore *v574;
  _QWORD *v575;
  uint64_t v576;
  uint64_t v577;
  md::VKMRenderResourcesStore *v578;
  _QWORD *v579;
  uint64_t v580;
  md::VKMRenderResourcesStore *v581;
  _QWORD *v582;
  uint64_t v583;
  md::VKMRenderResourcesStore *v584;
  _QWORD *v585;
  uint64_t v586;
  md::VKMRenderResourcesStore *v587;
  _QWORD *v588;
  uint64_t v589;
  md::VKMRenderResourcesStore *v590;
  _QWORD *v591;
  uint64_t v592;
  md::VKMRenderResourcesStore *v593;
  uint64_t v594;
  _QWORD *v595;
  uint64_t v596;
  uint64_t v597;
  md::VKMRenderResourcesStore *v598;
  _QWORD *v599;
  uint64_t v600;
  md::VKMRenderResourcesStore *v601;
  unint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unint64_t v605;
  uint64_t v606;
  uint64_t *v607;
  unint64_t v608;
  _QWORD *v609;
  uint64_t v610;
  unint64_t v611;
  uint64_t v612;
  unint64_t v613;
  char *v614;
  uint64_t *v615;
  unint64_t v616;
  uint64_t v617;
  char *v618;
  uint64_t *v619;
  uint64_t v620;
  __int128 v621;
  uint64_t v622;
  BOOL *v623;
  unint64_t v624;
  _BYTE *v625;
  unint64_t v626;
  unint64_t v627;
  unint64_t v628;
  char *v629;
  BOOL *v630;
  BOOL *v631;
  __int128 v632;
  char *v633;
  unint64_t v634;
  uint64_t v635;
  char *v636;
  uint64_t v637;
  unint64_t v638;
  uint64_t v639;
  _BYTE *v640;
  _QWORD *v641;
  unint64_t v642;
  uint64_t v643;
  _OWORD *v644;
  char *v645;
  uint64_t v646;
  __int128 v647;
  uint64_t v648;
  uint64_t *v649;
  unint64_t v650;
  uint8x8_t v651;
  _QWORD *v652;
  _QWORD *v653;
  unint64_t v654;
  uint64_t v655;
  float v656;
  float v657;
  _BOOL8 v658;
  unint64_t v659;
  unint64_t v660;
  size_t prime;
  unint64_t v662;
  uint8x8_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t *v666;
  unint64_t v667;
  unint64_t v668;
  uint8x8_t v669;
  _QWORD **v670;
  _QWORD *v671;
  uint64_t v672;
  unint64_t v673;
  float v674;
  float v675;
  _BOOL8 v676;
  unint64_t v677;
  unint64_t v678;
  size_t v679;
  BOOL v680;
  unint64_t v681;
  uint8x8_t v682;
  uint64_t v683;
  void *v684;
  void *v685;
  uint64_t v686;
  _QWORD *v687;
  uint64_t v688;
  size_t v689;
  size_t v690;
  size_t v691;
  _QWORD *v692;
  size_t v693;
  uint64_t v694;
  uint64_t v695;
  _QWORD *v696;
  uint64_t v697;
  size_t v698;
  uint64_t v699;
  void *v700;
  uint64_t v701;
  _QWORD *v702;
  unint64_t v703;
  unint64_t v704;
  uint8x8_t v705;
  _QWORD **v706;
  _QWORD *v707;
  unint64_t v708;
  uint64_t v709;
  float v710;
  float v711;
  uint64_t v712;
  _BOOL8 v713;
  unint64_t v714;
  unint64_t v715;
  size_t v716;
  BOOL v717;
  unint64_t v718;
  uint8x8_t v719;
  uint64_t v720;
  void *v721;
  void *v722;
  uint64_t v723;
  _QWORD *v724;
  uint64_t v725;
  size_t v726;
  size_t v727;
  size_t v728;
  _QWORD *v729;
  size_t v730;
  uint64_t v731;
  uint64_t v732;
  _QWORD *v733;
  uint64_t v734;
  size_t v735;
  uint64_t v736;
  void *v737;
  uint64_t v738;
  _QWORD *v739;
  unint64_t v740;
  md::VKMRenderResourcesStore *v741;
  _QWORD *v742;
  uint64_t v743;
  uint64_t v744;
  md::VKMRenderResourcesStore *v745;
  char *v746;
  _QWORD *v747;
  uint64_t v748;
  md::VKMRenderResourcesStore *v749;
  _QWORD *v750;
  uint64_t v751;
  md::VKMRenderResourcesStore *v752;
  _QWORD *v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  md::VKMRenderResourcesStore *v757;
  _QWORD *v758;
  uint64_t v759;
  uint64_t v760;
  _QWORD *v761;
  _QWORD *v762;
  _QWORD *v763;
  md::VKMRenderResourcesStore *v764;
  md::VKMRenderResourcesStore *v765;
  _QWORD *v766;
  _QWORD *v767;
  uint64_t v768;
  BOOL v769;
  _QWORD *v770;
  unint64_t v771;
  ggl::DeviceData *v772;
  std::__shared_weak_count *v773;
  unint64_t *v774;
  unint64_t v775;
  unint64_t DeviceDataHandle;
  _QWORD *v777;
  uint64_t v778;
  unint64_t *v779;
  unint64_t v780;
  _QWORD *v781;
  _QWORD *v782;
  unint64_t v783;
  BOOL v784;
  _QWORD *v785;
  unint64_t v786;
  ggl::DeviceData *v787;
  std::__shared_weak_count *v788;
  unint64_t *v789;
  unint64_t v790;
  unint64_t v791;
  _QWORD *v792;
  uint64_t v793;
  unint64_t *v794;
  unint64_t v795;
  _QWORD *v796;
  _QWORD *v797;
  ggl::DeviceData *v798;
  std::__shared_weak_count *v799;
  unint64_t *v800;
  unint64_t v801;
  unint64_t v802;
  _QWORD *v803;
  uint64_t v804;
  unint64_t *v805;
  unint64_t v806;
  md::VKMRenderResourcesStore *v807;
  _QWORD *v808;
  uint64_t v809;
  md::VKMRenderResourcesStore *v810;
  _QWORD *v811;
  uint64_t v812;
  uint64_t v813;
  md::VKMRenderResourcesStore *v814;
  char *v815;
  uint64_t (**v816)();
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  md::VKMRenderResourcesStore *v821;
  char *v822;
  __int128 v823;
  __int128 *v824;
  uint64_t v825;
  uint64_t v826;
  md::VKMRenderResourcesStore *v827;
  char *v828;
  _QWORD *v829;
  uint64_t v830;
  md::VKMRenderResourcesStore *v831;
  _QWORD *v832;
  uint64_t v833;
  uint64_t v834;
  _QWORD *v835;
  uint64_t v836;
  uint64_t v837;
  ggl::DeviceData *v838;
  std::__shared_weak_count *v839;
  unint64_t *v840;
  unint64_t v841;
  unint64_t v842;
  md::VKMRenderResourcesStore *v843;
  _QWORD *v844;
  uint64_t v845;
  md::VKMRenderResourcesStore *v846;
  _QWORD *v847;
  uint64_t v848;
  uint64_t v849;
  md::VKMRenderResourcesStore *v850;
  _QWORD *v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  unint64_t *v857;
  unint64_t v858;
  uint64_t v859;
  std::__shared_weak_count *v860;
  unint64_t *v861;
  unint64_t v862;
  md::VKMRenderResourcesStore *v863;
  _QWORD *v864;
  uint64_t v865;
  _BOOL4 v866;
  uint64_t v867;
  md::VKMRenderResourcesStore *v868;
  uint64_t v869;
  _QWORD *v870;
  uint64_t v871;
  md::VKMRenderResourcesStore *v872;
  __int128 v873;
  _QWORD *v874;
  uint64_t v875;
  unint64_t v876;
  int8x8_t v877;
  uint8x8_t v878;
  unint64_t v879;
  uint64_t ***v880;
  uint64_t **v881;
  uint64_t v882;
  unint64_t v883;
  uint64_t *v884;
  uint64_t *v885;
  md::VKMRenderResourcesStore *v886;
  _QWORD *v887;
  uint64_t v888;
  md::VKMRenderResourcesStore *v889;
  uint64_t v890;
  _QWORD *v891;
  uint64_t v892;
  uint64_t v893;
  _QWORD *v894;
  _QWORD *v895;
  _QWORD *v896;
  _QWORD *v897;
  unint64_t v898;
  BOOL v899;
  _QWORD *v900;
  md::VKMRenderResourcesStore *v901;
  _QWORD *v902;
  uint64_t v903;
  md::VKMRenderResourcesStore *v904;
  uint64_t v905;
  uint64_t v906;
  unint64_t v907;
  uint64_t v908;
  uint64_t *v909;
  unint64_t v910;
  _QWORD *v911;
  char *v912;
  uint64_t v913;
  unint64_t v914;
  uint64_t v915;
  unint64_t v916;
  char *v917;
  uint64_t *v918;
  unint64_t v919;
  uint64_t v920;
  char *v921;
  uint64_t *v922;
  uint64_t v923;
  __int128 v924;
  uint64_t v925;
  _OWORD *v926;
  unint64_t v927;
  char *v928;
  _BYTE *v929;
  unint64_t v930;
  unint64_t v931;
  unint64_t v932;
  char *v933;
  char *v934;
  char *v935;
  __int128 v936;
  __int128 v937;
  char *v938;
  unint64_t v939;
  unint64_t v940;
  char *v941;
  uint64_t v942;
  unint64_t v943;
  uint64_t v944;
  unint64_t v945;
  _BYTE *v946;
  _QWORD *v947;
  unint64_t v948;
  uint64_t v949;
  _OWORD *v950;
  char *v951;
  uint64_t v952;
  __int128 v953;
  uint64_t v954;
  uint64_t *v955;
  unint64_t v956;
  uint8x8_t v957;
  _QWORD *v958;
  _QWORD *v959;
  unint64_t v960;
  uint64_t v961;
  char *v962;
  float v963;
  float v964;
  _BOOL8 v965;
  unint64_t v966;
  unint64_t v967;
  size_t v968;
  unint64_t v969;
  uint8x8_t v970;
  uint64_t v971;
  uint64_t v972;
  _QWORD *v973;
  unint64_t v974;
  md::VKMRenderResourcesStore *v975;
  _QWORD *v976;
  uint64_t v977;
  md::VKMRenderResourcesStore *v978;
  uint64_t v979;
  uint64_t v980;
  unint64_t v981;
  uint64_t v982;
  uint64_t *v983;
  unint64_t v984;
  _QWORD *v985;
  char *v986;
  uint64_t v987;
  unint64_t v988;
  uint64_t v989;
  unint64_t v990;
  char *v991;
  uint64_t *v992;
  unint64_t v993;
  uint64_t v994;
  char *v995;
  uint64_t *v996;
  uint64_t v997;
  __int128 v998;
  uint64_t v999;
  char *v1000;
  unint64_t v1001;
  char *v1002;
  _BYTE *v1003;
  unint64_t v1004;
  unint64_t v1005;
  unint64_t v1006;
  char *v1007;
  char *v1008;
  char *v1009;
  __int128 v1010;
  char *v1011;
  std::__shared_weak_count *v1012;
  unint64_t *v1013;
  unint64_t v1014;
  char *v1015;
  unint64_t v1016;
  unint64_t v1017;
  md::VKMRenderResourcesStore **v1018;
  char *v1019;
  uint64_t v1020;
  unint64_t v1021;
  uint64_t v1022;
  unint64_t v1023;
  _BYTE *v1024;
  _QWORD *v1025;
  unint64_t v1026;
  uint64_t v1027;
  _OWORD *v1028;
  char *v1029;
  uint64_t v1030;
  __int128 v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t *v1034;
  unint64_t v1035;
  uint8x8_t v1036;
  _QWORD *v1037;
  _QWORD *v1038;
  unint64_t v1039;
  uint64_t v1040;
  char *v1041;
  float v1042;
  float v1043;
  _BOOL8 v1044;
  unint64_t v1045;
  unint64_t v1046;
  size_t v1047;
  unint64_t v1048;
  uint8x8_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  _QWORD *v1052;
  unint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  unint64_t v1056;
  unint64_t v1057;
  md::VKMRenderResourcesStore *v1058;
  _QWORD *v1059;
  uint64_t v1060;
  md::VKMRenderResourcesStore *v1061;
  uint64_t v1062;
  __int128 v1063;
  _QWORD *v1064;
  uint64_t v1065;
  md::VKMRenderResourcesStore *v1066;
  uint64_t v1067;
  uint64_t v1068;
  unint64_t v1069;
  uint64_t v1070;
  uint64_t *v1071;
  unint64_t v1072;
  _QWORD *v1073;
  char *v1074;
  uint64_t v1075;
  unint64_t v1076;
  uint64_t v1077;
  unint64_t v1078;
  char *v1079;
  uint64_t *v1080;
  unint64_t v1081;
  uint64_t v1082;
  char *v1083;
  uint64_t *v1084;
  uint64_t v1085;
  __int128 v1086;
  uint64_t v1087;
  char *v1088;
  unint64_t v1089;
  char *v1090;
  _BYTE *v1091;
  unint64_t v1092;
  unint64_t v1093;
  unint64_t v1094;
  char *v1095;
  char *v1096;
  char *v1097;
  __int128 v1098;
  char *v1099;
  std::__shared_weak_count *v1100;
  unint64_t *v1101;
  unint64_t v1102;
  char *v1103;
  unint64_t v1104;
  unint64_t v1105;
  char *v1106;
  uint64_t v1107;
  unint64_t v1108;
  uint64_t v1109;
  unint64_t v1110;
  _BYTE *v1111;
  _QWORD *v1112;
  unint64_t v1113;
  uint64_t v1114;
  _OWORD *v1115;
  char *v1116;
  uint64_t v1117;
  __int128 v1118;
  uint64_t v1119;
  uint64_t *v1120;
  unint64_t v1121;
  uint8x8_t v1122;
  _QWORD *v1123;
  _QWORD *v1124;
  unint64_t v1125;
  uint64_t v1126;
  char *v1127;
  float v1128;
  float v1129;
  _BOOL8 v1130;
  unint64_t v1131;
  unint64_t v1132;
  size_t v1133;
  unint64_t v1134;
  uint8x8_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  _QWORD *v1138;
  unint64_t v1139;
  md::VKMRenderResourcesStore *v1140;
  _QWORD *v1141;
  _QWORD *v1142;
  uint64_t v1143;
  md::VKMRenderResourcesStore *v1144;
  _QWORD *v1145;
  uint64_t v1146;
  uint64_t v1147;
  md::VKMRenderResourcesStore *v1148;
  _QWORD *v1149;
  uint64_t v1150;
  uint64_t v1151;
  md::VKMRenderResourcesStore *v1152;
  _QWORD *v1153;
  uint64_t v1154;
  uint64_t v1155;
  __int128 v1156;
  md::VKMRenderResourcesStore *v1157;
  char *v1158;
  __int128 v1159;
  unint64_t *v1160;
  uint64_t v1161;
  uint64_t v1162;
  unint64_t v1163;
  std::__shared_weak_count *v1164;
  unint64_t *v1165;
  unint64_t v1166;
  std::__shared_weak_count *v1167;
  unint64_t *v1168;
  unint64_t v1169;
  md::VKMRenderResourcesStore *v1170;
  char *v1171;
  _QWORD *v1172;
  uint64_t v1173;
  uint64_t v1174;
  md::VKMRenderResourcesStore *v1175;
  _QWORD *v1176;
  uint64_t v1177;
  int v1178;
  uint64_t v1179;
  md::VKMRenderResourcesStore *v1180;
  uint64_t v1181;
  uint64_t v1182;
  _QWORD *v1183;
  _QWORD *v1184;
  std::__shared_weak_count *v1185;
  unint64_t *v1186;
  unint64_t v1187;
  unint64_t v1188;
  _QWORD *v1189;
  _QWORD *v1190;
  std::__shared_weak_count *v1191;
  uint64_t v1192;
  unint64_t *v1193;
  unint64_t v1194;
  unint64_t v1195;
  _QWORD *v1196;
  unint64_t v1197;
  _QWORD *v1198;
  unint64_t v1199;
  uint64_t v1200;
  _QWORD *v1201;
  uint64_t v1202;
  _QWORD *v1203;
  _QWORD *v1204;
  uint64_t v1205;
  _QWORD *v1206;
  uint64_t v1207;
  unint64_t v1208;
  unint64_t v1209;
  unint64_t v1210;
  uint64_t *v1211;
  uint64_t *v1212;
  uint64_t v1213;
  uint64_t v1214;
  BOOL v1215;
  _QWORD *v1216;
  uint64_t v1217;
  uint64_t *v1218;
  _QWORD *v1219;
  uint64_t v1220;
  unint64_t v1221;
  unint64_t v1222;
  _QWORD *v1223;
  _QWORD *v1224;
  uint64_t v1225;
  unsigned __int8 v1226;
  unint64_t v1227;
  _QWORD *v1228;
  uint64_t v1229;
  unint64_t v1230;
  std::__shared_weak_count *v1231;
  unint64_t *v1232;
  unint64_t v1233;
  _QWORD *v1234;
  _QWORD *v1235;
  uint64_t v1236;
  _QWORD *v1237;
  uint64_t v1238;
  _QWORD *v1239;
  uint64_t v1240;
  _QWORD *v1241;
  uint64_t v1242;
  _QWORD *v1243;
  uint64_t v1244;
  _QWORD *v1245;
  uint64_t v1246;
  unint64_t v1247;
  _QWORD *v1248;
  uint64_t v1249;
  _QWORD *v1250;
  uint64_t v1251;
  _QWORD *v1252;
  uint64_t v1253;
  md::VKMRenderResourcesStore *v1254;
  char *v1255;
  _QWORD *v1256;
  uint64_t v1257;
  uint64_t v1258;
  _QWORD *v1259;
  uint64_t v1260;
  uint64_t v1261;
  _QWORD *v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  unint64_t *v1266;
  unint64_t v1267;
  _QWORD *v1268;
  _QWORD *v1269;
  uint64_t v1270;
  uint64_t v1271;
  _QWORD *v1272;
  uint64_t v1273;
  uint64_t v1274;
  _QWORD *v1275;
  uint64_t v1276;
  uint64_t v1277;
  _QWORD *v1278;
  uint64_t v1279;
  uint64_t v1280;
  _QWORD *v1281;
  uint64_t v1282;
  md::VKMRenderResourcesStore *v1283;
  uint64_t v1284;
  _QWORD *v1285;
  uint64_t v1286;
  uint64_t v1287;
  md::VKMRenderResourcesStore *v1288;
  uint64_t v1289;
  _QWORD *v1290;
  uint64_t v1291;
  md::VKMRenderResourcesStore *v1292;
  _QWORD *v1293;
  uint64_t v1294;
  md::VKMRenderResourcesStore *v1295;
  unint64_t v1296;
  _QWORD *v1297;
  uint64_t v1298;
  std::__shared_weak_count *v1299;
  unint64_t *v1300;
  unint64_t v1301;
  std::__shared_weak_count *v1302;
  unint64_t *v1303;
  unint64_t v1304;
  std::__shared_weak_count *v1305;
  unint64_t *v1306;
  unint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  __int128 v1311;
  __int128 v1312;
  __int128 v1313;
  __int128 v1314;
  int v1315;
  uint64_t v1316;
  int v1317;
  BOOL v1318;
  int v1319;
  unint64_t *v1320;
  uint64_t *v1322;
  uint64_t *v1323;
  uint64_t *TextureHandleWithKey;
  unint64_t v1325;
  uint64_t *v1326;
  uint64_t v1327;
  unint64_t v1329;
  char v1330;
  _BOOL4 v1331;
  int v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  unint64_t v1336;
  unsigned __int8 v1337;
  uint64_t v1338;
  unint64_t v1340;
  unint64_t v1341;
  unint64_t v1342;
  md::VKMRenderResourcesStore ***v1343;
  unint64_t v1344;
  unint64_t v1345;
  uint64_t *v1346;
  uint64_t v1347;
  md::VKMRenderResourcesStore **v1348;
  uint64_t *v1349;
  uint64_t v1350;
  uint64_t v1351;
  unint64_t v1352;
  uint64_t v1353;
  md::VKMRenderResourcesStore *v1354;
  uint64_t v1355;
  uint64_t v1356;
  __int16 v1357;
  unint64_t v1358;
  unint64_t v1359;
  uint64_t *v1360;
  std::__shared_weak_count *v1361;
  unint64_t v1362;
  std::__shared_weak_count *v1363;
  uint64_t v1364;
  std::__shared_weak_count *v1365;
  uint64_t v1366;
  uint64_t *v1367;
  _BYTE v1368[32];
  __int128 v1369;
  _BYTE v1370[40];
  uint64_t v1371;
  unint64_t v1372;
  std::__shared_weak_count *v1373;
  unint64_t *v1374;
  __int128 v1375;
  unint64_t v1376;
  __int128 *v1377;
  int v1378;
  uint64_t v1379;

  v20 = a1;
  v1379 = *MEMORY[0x1E0C80C00];
  v21 = a1[6];
  v22 = **a1;
  v23 = *((_QWORD *)v22 + 1232);
  if (a2 < (unint64_t)((*((_QWORD *)v22 + 1233) - v23) >> 3)
    && (v24 = *(_QWORD *)(v23 + 8 * a2)) != 0
    && HIDWORD(a2) == HIDWORD(v24)
    && ((v25 = *((_QWORD *)v22 + 1235),
         v26 = (uint64_t *)(v25 + 8 * v24),
         v26 != *((uint64_t **)v22 + 1236))
      ? (v27 = v25 == 0)
      : (v27 = 1),
        !v27))
  {
    v1308 = *v26;
  }
  else
  {
    v1308 = 0;
  }
  v28 = md::MeshRenderableContext::renderablesForRegistry(*a1[1], v1308);
  if (v28[1] == *v28)
    return;
  v29 = v28;
  if (*(_BYTE *)v20[2])
    v30 = *a7 == 62;
  else
    v30 = 1;
  v31 = !v30;
  v1319 = v31;
  v32 = **v20;
  v33 = *a3;
  v34 = *((_QWORD *)v32 + 1254);
  if (v33 >= (*((_QWORD *)v32 + 1255) - v34) >> 3)
    goto LABEL_25;
  v35 = *(_QWORD *)(v34 + 8 * v33);
  if (v35)
  {
    if (HIDWORD(*a3) == HIDWORD(v35))
    {
      v36 = *((_QWORD *)v32 + 1257);
      v37 = (uint64_t *)(v36 + 8 * v35);
      if (v37 != *((uint64_t **)v32 + 1258) && v36 != 0)
      {
        v35 = *v37;
        goto LABEL_26;
      }
    }
LABEL_25:
    v35 = 0;
  }
LABEL_26:
  v40 = *(_QWORD *)(v35 + 232);
  v39 = *(std::__shared_weak_count **)(v35 + 240);
  v1364 = v40;
  v1365 = v39;
  v1320 = a4;
  v1327 = v35;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v42 = __ldxr(p_shared_owners);
    while (__stxr(v42 + 1, p_shared_owners));
    v35 = v1327;
    v40 = *(_QWORD *)(v1327 + 232);
  }
  v1338 = *(unsigned __int8 *)(v35 + 24);
  v43 = *(_QWORD *)(v40 + 8);
  if ((*(_BYTE *)(v40 + 16) & 2) == 0)
  {
    v44 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v44 != -1)
    {
      *(_QWORD *)v1370 = &v1375;
      *(_QWORD *)v1368 = v1370;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v1368, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  if (v43)
    v45 = *(_QWORD *)(v40 + 72);
  else
    v45 = 0;
  v46 = a12[1];
  if (v46 < *a12)
  {
    v1325 = 0;
    v1317 = *(unsigned __int8 *)v20[5];
    v1309 = *(unsigned int *)(v45 + 40);
    v1318 = (_DWORD)v1338 != 255;
    v1316 = COERCE_UNSIGNED_INT((float)(*(float *)v20[3] * *(float *)(v45 + 340)) * *(float *)v20[4]);
    LOWORD(v1347) = (_WORD)a9;
    v1343 = v20;
    v1348 = v21;
    v1349 = v29;
LABEL_39:
    v1354 = *v21;
    v47 = **(uint64_t ***)*v21;
    if (v47 != *(uint64_t **)(*(_QWORD *)*v21 + 8) && *v47 != 0x22D45F5AAD4BF408)
    {
      v48 = v47 + 5;
      do
      {
        v49 = *v48;
        v48 += 5;
      }
      while (v49 != 0x22D45F5AAD4BF408);
      v47 = v48 - 5;
    }
    v1350 = v46;
    v50 = *(_QWORD *)(*v29 + 8 * v46);
    v1332 = *(unsigned __int8 *)(v50 + 8);
    v51 = (uint64_t (***)(_QWORD))v47[3];
    v52 = (std::__shared_weak_count *)v47[4];
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
      do
        v55 = __ldaxr(v53);
      while (__stlxr(v55 - 1, v53));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v56 = (md::LayoutContext *)(**v51)(v51);
    v57 = **(_QWORD ***)v1354;
    v58 = *(_QWORD **)(*(_QWORD *)v1354 + 8);
    if (v57 != v58)
    {
      while (*v57 != 0x4EDAD23DFB014132)
      {
        v57 += 5;
        if (v57 == v58)
        {
          v59 = 0;
          goto LABEL_62;
        }
      }
    }
    if (v57 == v58)
    {
      v59 = 0;
    }
    else
    {
      v59 = v57[3];
      v60 = (std::__shared_weak_count *)v57[4];
      if (v60)
      {
        v61 = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
        do
          v63 = __ldaxr(v61);
        while (__stlxr(v63 - 1, v61));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
    }
LABEL_62:
    v64 = **(_QWORD ***)v1354;
    v65 = *(_QWORD **)(*(_QWORD *)v1354 + 8);
    if (v64 != v65)
    {
      while (*v64 != 0x41D4E9297E100630)
      {
        v64 += 5;
        if (v64 == v65)
          goto LABEL_73;
      }
    }
    if (v64 != v65)
    {
      v66 = (std::__shared_weak_count *)v64[4];
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
        do
          v69 = __ldaxr(v67);
        while (__stlxr(v69 - 1, v67));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
    }
LABEL_73:
    v70 = **(_QWORD ***)v1354;
    v71 = *(_QWORD **)(*(_QWORD *)v1354 + 8);
    v1356 = v59;
    if (v70 != v71)
    {
      while (*v70 != 0x348A0B0E758C07C2)
      {
        v70 += 5;
        if (v70 == v71)
          goto LABEL_84;
      }
    }
    if (v70 == v71)
    {
LABEL_84:
      v1351 = 0;
    }
    else
    {
      v72 = (std::__shared_weak_count *)v70[4];
      v1351 = v70[3];
      if (v72)
      {
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
        do
          v75 = __ldaxr(v73);
        while (__stlxr(v75 - 1, v73));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
    }
    v76 = (_QWORD *)*((_QWORD *)v56 + 1);
    v77 = v76[1];
    if ((v77 & (v77 - 1)) != 0)
    {
      v79 = 0x1AF456233693CD46;
      if (v77 <= 0x1AF456233693CD46)
        v79 = 0x1AF456233693CD46 % v77;
      v78 = *(_QWORD **)(*v76 + 8 * v79);
      do
      {
        do
          v78 = (_QWORD *)*v78;
        while (v78[1] != 0x1AF456233693CD46);
      }
      while (v78[2] != 0x1AF456233693CD46);
    }
    else
    {
      v78 = *(_QWORD **)(*v76 + 8 * ((v77 - 1) & 0x1AF456233693CD46));
      do
      {
        do
          v78 = (_QWORD *)*v78;
        while (v78[1] != 0x1AF456233693CD46);
      }
      while (v78[2] != 0x1AF456233693CD46);
    }
    v80 = *(_QWORD *)(v78[5] + 32);
    v81 = *(float *)(v80 + 3076);
    v82 = *(float *)(v80 + 3080);
    v83 = *(unsigned __int8 *)(v50 + 8);
    md::LayoutContext::frameState(v56);
    v85 = *(_QWORD *)(v84 + 624);
    v1372 = 0;
    v1373 = 0;
    if (v83 == 2)
    {
      v86 = *(std::__shared_weak_count **)(v50 + 232);
      v87 = *(_QWORD *)(v50 + 240);
      v88 = *(_QWORD *)(v50 + 224);
      if (v86)
      {
        v89 = (unint64_t *)&v86->__shared_owners_;
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
      }
      v1372 = v88;
      v1373 = v86;
      v91 = 256;
    }
    else
    {
      if (v83 != 1)
      {
        LOBYTE(v87) = 0;
        v1330 = 1;
        v112 = v1320;
        v113 = v1348;
        v114 = v1344;
        MaterialHandle = v1329;
        goto LABEL_882;
      }
      v86 = *(std::__shared_weak_count **)(v50 + 232);
      v87 = *(_QWORD *)(v50 + 240);
      v88 = *(_QWORD *)(v50 + 224);
      if (v86)
      {
        v92 = (unint64_t *)&v86->__shared_owners_;
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
      }
      v1372 = v88;
      v1373 = v86;
      v94 = *(md::SharedResource **)(v50 + 256);
      if (v94)
        md::SharedResource::addFrameRef(v94, v85);
      v95 = *(md::SharedResource **)(v50 + 296);
      if (v95)
        md::SharedResource::addFrameRef(v95, v85);
      v96 = *(md::SharedResource **)(v50 + 280);
      if (v96)
        md::SharedResource::addFrameRef(v96, v85);
      v91 = 0;
    }
    *(_QWORD *)v1370 = v87;
    *(_QWORD *)&v1370[8] = v91;
    v97 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)(v59 + 232), (uint64_t *)v1370);
    v1347 = v91;
    if (v97 && v97[4])
    {
      *(_QWORD *)v1370 = v87;
      *(_QWORD *)&v1370[8] = v91;
      v98 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)(v59 + 232), (uint64_t *)v1370);
      if (v98)
        v99 = v98[4];
      else
        v99 = 0;
      *(_QWORD *)v1370 = v87;
      *(_QWORD *)&v1370[8] = v91;
      v126 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)(v59 + 528), (uint64_t *)v1370);
      if (!v126 || (v1346 = v126[4]) == 0)
        v1346 = 0;
      *(_QWORD *)v1370 = v87;
      *(_QWORD *)&v1370[8] = v91;
      v127 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)(v59 + 824), (uint64_t *)v1370);
      if (v127)
        v128 = v127[4];
      else
        v128 = 0;
      v129 = (((v87 - 0x61C8864680B583EBLL) << 6) - 0x61C8864680B583EBLL + ((v87 - 0x61C8864680B583EBLL) >> 2)) ^ (v87 - 0x61C8864680B583EBLL);
      v130 = (v129 >> 2) + (v129 << 6);
      TextureHandleWithKey = mre::GGLResourceStore::getTextureHandleWithKey((int8x8_t *)v1351, (uint64_t *)(((((v130 - 0x61C8864680B583EALL) ^ v129) << 6)- 0x61C8864680B583EALL+ (((v130 - 0x61C8864680B583EALL) ^ v129) >> 2)) ^ (v130 - 0x61C8864680B583EALL) ^ v129), 0);
      v131 = (v130 - 0x61C8864680B583EBLL) ^ v129;
      v132 = (v131 >> 2) + (v131 << 6);
      v1322 = mre::GGLResourceStore::getTextureHandleWithKey((int8x8_t *)v1351, (uint64_t *)((v132 - 0x61C8864680B583EALL) ^ v131), 0);
      v1323 = mre::GGLResourceStore::getTextureHandleWithKey((int8x8_t *)v1351, (uint64_t *)((v132 - 0x61C8864680B583E7) ^ v131), 0);
      *(_QWORD *)v1370 = v87;
      *(_QWORD *)&v1370[8] = v91;
      v133 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)(v59 + 1120), (uint64_t *)v1370);
      if (v133)
        v1326 = v133[4];
      else
        v1326 = 0;
      v112 = v1320;
      v113 = v1348;
      MaterialHandle = (unint64_t)v99;
      v17 = (unint64_t)v128;
      v20 = v1343;
      v114 = (unint64_t)v1346;
      goto LABEL_876;
    }
    v100 = fmaxf(v82 + v81, 1.0);
    v101 = gdc::Registry::create(*((gdc::Registry **)v1354 + 1));
    v1362 = 0;
    v1360 = 0;
    v1367 = 0;
    v1345 = v101;
    if (v83 == 2)
    {
      v102 = (((v87 - 0x61C8864680B583EBLL) << 6) - 0x61C8864680B583EBLL + ((v87 - 0x61C8864680B583EBLL) >> 2)) ^ (v87 - 0x61C8864680B583EBLL);
      v103 = ((v102 << 6) - 0x61C8864680B583EALL + (v102 >> 2)) ^ v102;
      v104 = (uint64_t *)(((v103 << 6) - 0x61C8864680B583EALL + (v103 >> 2)) ^ v103);
      v105 = mre::GGLResourceStore::getTextureHandleWithKey((int8x8_t *)v1351, v104, 0);
      if (v105)
      {
        v1362 = (unint64_t)v105;
        v106 = *(_QWORD *)(v1351 + 504);
        v107 = v1354;
        if (v105 >= (unint64_t)((*(_QWORD *)(v1351 + 512) - v106) >> 3)
          || ((v108 = *(_QWORD *)(v106 + 8 * v105)) != 0
            ? (v109 = HIDWORD(v105) == HIDWORD(v108))
            : (v109 = 0),
              !v109 || *(_QWORD *)(v1351 + 528) + 40 * v108 == *(_QWORD *)(v1351 + 536)))
        {
LABEL_149:
          *(_QWORD *)v1368 = &off_1E42814D8;
          *(_QWORD *)&v1368[8] = v1362;
          *(_QWORD *)&v1368[16] = v101;
          *(_QWORD *)&v1368[24] = v1368;
          *(_QWORD *)&v1370[24] = v1370;
          *(_QWORD *)v1370 = &off_1E42814D8;
          *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
          *(_DWORD *)&v1370[32] = 0;
          ecs2::Runtime::queueCommand(v107, (uint64_t)v1370);
          if (*(_DWORD *)&v1370[32] != -1)
            ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
          *(_DWORD *)&v1370[32] = -1;
          v139 = *(_QWORD **)&v1368[24];
          if (*(_BYTE **)&v1368[24] == v1368)
          {
            v139 = v1368;
            v140 = 4;
          }
          else
          {
            if (!*(_QWORD *)&v1368[24])
            {
LABEL_156:
              v17 = 0;
LABEL_505:
              *(_QWORD *)v1370 = v87;
              *(_QWORD *)&v1370[8] = v91;
              v327 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)(v59 + 1120), (uint64_t *)v1370);
              if (v327 && (ColorData = (unint64_t)v327[4]) != 0)
              {
                *(_QWORD *)v1370 = v327[4];
                v329 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v59 + 944, ColorData, v1370);
                ++v329[4];
              }
              else
              {
                *(_DWORD *)&v1370[16] = 0;
                *(_QWORD *)&v1375 = v87;
                *((_QWORD *)&v1375 + 1) = v91;
                LOBYTE(v1376) = 1;
                ColorData = md::MaterialResourceStore::createColorData(v59, (__int128 *)v1370, (uint64_t)&v1375);
              }
              *(_QWORD *)v1368 = &off_1E427F6C0;
              *(_QWORD *)&v1368[8] = ColorData;
              *(_QWORD *)&v1368[16] = v101;
              *(_QWORD *)&v1368[24] = v1368;
              *(_QWORD *)&v1370[24] = v1370;
              *(_QWORD *)v1370 = &off_1E427F6C0;
              *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
              *(_DWORD *)&v1370[32] = 0;
              ecs2::Runtime::queueCommand(v107, (uint64_t)v1370);
              if (*(_DWORD *)&v1370[32] != -1)
                ((void (*)(uint64_t *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1366, v1370);
              *(_DWORD *)&v1370[32] = -1;
              v330 = *(_QWORD **)&v1368[24];
              if (*(_BYTE **)&v1368[24] == v1368)
              {
                v330 = v1368;
                v331 = 4;
              }
              else
              {
                if (!*(_QWORD *)&v1368[24])
                {
LABEL_516:
                  *(_QWORD *)v1370 = v87;
                  *(_QWORD *)&v1370[8] = v91;
                  v332 = (_QWORD *)(v59 + 528);
                  v333 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)(v59 + 528), (uint64_t *)v1370);
                  v1326 = (uint64_t *)ColorData;
                  if (v333)
                  {
                    v114 = (unint64_t)v333[4];
                    if (v114)
                    {
                      *(_QWORD *)v1370 = v333[4];
                      v334 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v59 + 352, v114, v1370);
                      ++v334[4];
                      goto LABEL_840;
                    }
                  }
                  v335 = v1372;
                  (*(void (**)(_BYTE *__return_ptr, unint64_t, float))(*(_QWORD *)v1372 + 360))(v1370, v1372, v100);
                  if (v1370[0])
                    v336 = v1370[1] == 0;
                  else
                    v336 = 0;
                  v337 = !v336;
                  (*(void (**)(_BYTE *__return_ptr, unint64_t, float))(*(_QWORD *)v335 + 848))(v1368, v335, v100);
                  if (v1368[0])
                    v338 = v1368[1] == 0;
                  else
                    v338 = 1;
                  v339 = !v338;
                  *(_QWORD *)v1370 = v87;
                  *(_QWORD *)&v1370[8] = v1347;
                  v340 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)(v59 + 528), (uint64_t *)v1370);
                  if (v340)
                  {
                    v114 = (unint64_t)v340[4];
                    if (v114)
                    {
LABEL_840:
                      v483 = operator new(0x20uLL);
                      *v483 = &off_1E4281C28;
                      v483[1] = v114;
                      *((_BYTE *)v483 + 16) = 0;
                      v483[3] = v101;
                      *(_QWORD *)&v1370[24] = v483;
                      *(_QWORD *)&v1368[24] = 0;
                      *(_DWORD *)&v1370[32] = 0;
                      ecs2::Runtime::queueCommand(v107, (uint64_t)v1370);
                      if (*(_DWORD *)&v1370[32] != -1)
                        ((void (*)(uint64_t *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1366, v1370);
                      *(_DWORD *)&v1370[32] = -1;
                      v484 = *(_QWORD **)&v1368[24];
                      if (*(_BYTE **)&v1368[24] == v1368)
                      {
                        v484 = v1368;
                        v485 = 4;
                      }
                      else
                      {
                        if (!*(_QWORD *)&v1368[24])
                          goto LABEL_847;
                        v485 = 5;
                      }
                      (*(void (**)(void))(*v484 + 8 * v485))();
LABEL_847:
                      *(_QWORD *)v1368 = &off_1E4280368;
                      *(_QWORD *)&v1368[8] = v101 << 32;
                      *(_DWORD *)&v1368[16] = HIDWORD(v101);
                      *(_QWORD *)&v1368[24] = v1368;
                      *(_QWORD *)&v1370[24] = v1370;
                      *(_QWORD *)v1370 = &off_1E4280368;
                      *(_QWORD *)&v1370[8] = v101 << 32;
                      *(_DWORD *)&v1370[16] = HIDWORD(v101);
                      *(_DWORD *)&v1370[32] = 0;
                      ecs2::Runtime::queueCommand(v107, (uint64_t)v1370);
                      if (*(_DWORD *)&v1370[32] != -1)
                        ((void (*)(uint64_t *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1366, v1370);
                      *(_DWORD *)&v1370[32] = -1;
                      v486 = *(_QWORD **)&v1368[24];
                      if (*(_BYTE **)&v1368[24] == v1368)
                      {
                        v486 = v1368;
                        v487 = 4;
                      }
                      else
                      {
                        if (!*(_QWORD *)&v1368[24])
                          goto LABEL_854;
                        v487 = 5;
                      }
                      (*(void (**)(void))(*v486 + 8 * v487))();
LABEL_854:
                      *(_QWORD *)v1368 = &off_1E42800E0;
                      *(_QWORD *)&v1368[8] = (v101 << 32) | 0xBF800000;
                      *(_DWORD *)&v1368[16] = HIDWORD(v101);
                      *(_QWORD *)&v1368[24] = v1368;
                      *(_QWORD *)&v1370[24] = v1370;
                      *(_QWORD *)v1370 = &off_1E42800E0;
                      *(_QWORD *)&v1370[8] = *(_QWORD *)&v1368[8];
                      *(_DWORD *)&v1370[16] = HIDWORD(v101);
                      *(_DWORD *)&v1370[32] = 0;
                      ecs2::Runtime::queueCommand(v107, (uint64_t)v1370);
                      if (*(_DWORD *)&v1370[32] != -1)
                        ((void (*)(uint64_t *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1366, v1370);
                      *(_DWORD *)&v1370[32] = -1;
                      v488 = *(_QWORD **)&v1368[24];
                      v112 = v1320;
                      if (*(_BYTE **)&v1368[24] == v1368)
                      {
                        v488 = v1368;
                        v489 = 4;
                      }
                      else
                      {
                        if (!*(_QWORD *)&v1368[24])
                          goto LABEL_861;
                        v489 = 5;
                      }
                      (*(void (**)(void))(*v488 + 8 * v489))();
LABEL_861:
                      MaterialHandle = md::MaterialResourceStore::createMaterialHandle(v59, v87, v1347);
                      v490 = operator new(0x28uLL);
                      *v490 = &off_1E427ED78;
                      v490[1] = MaterialHandle;
                      v490[2] = v87;
                      *((_WORD *)v490 + 12) = v1347;
                      v490[4] = v101;
                      *(_QWORD *)&v1370[24] = v490;
                      *(_QWORD *)&v1368[24] = 0;
                      *(_DWORD *)&v1370[32] = 0;
                      ecs2::Runtime::queueCommand(v107, (uint64_t)v1370);
                      if (*(_DWORD *)&v1370[32] != -1)
                        ((void (*)(uint64_t *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1366, v1370);
                      *(_DWORD *)&v1370[32] = -1;
                      v491 = *(_QWORD **)&v1368[24];
                      if (*(_BYTE **)&v1368[24] == v1368)
                      {
                        v491 = v1368;
                        v492 = 4;
                      }
                      else
                      {
                        if (!*(_QWORD *)&v1368[24])
                          goto LABEL_868;
                        v492 = 5;
                      }
                      (*(void (**)(void))(*v491 + 8 * v492))();
LABEL_868:
                      v493 = operator new(0x20uLL);
                      v494 = *a6;
                      *v493 = &off_1E427DE90;
                      v493[1] = v494;
                      *((_DWORD *)v493 + 4) = *((_DWORD *)a6 + 2);
                      *(_QWORD *)((char *)v493 + 20) = v101;
                      *(_QWORD *)&v1370[24] = v493;
                      *(_QWORD *)&v1368[24] = 0;
                      *(_DWORD *)&v1370[32] = 0;
                      ecs2::Runtime::queueCommand(v107, (uint64_t)v1370);
                      if (*(_DWORD *)&v1370[32] != -1)
                        ((void (*)(uint64_t *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1366, v1370);
                      *(_DWORD *)&v1370[32] = -1;
                      v495 = *(_QWORD **)&v1368[24];
                      if (*(_BYTE **)&v1368[24] == v1368)
                      {
                        v495 = v1368;
                        v496 = 4;
                      }
                      else
                      {
                        if (!*(_QWORD *)&v1368[24])
                        {
LABEL_875:
                          md::MaterialResourceStore::disconnect<geo::handle<md::MaterialIDStorage>>((int8x8_t *)v59, MaterialHandle);
                          v1322 = v1360;
                          v1323 = v1367;
                          TextureHandleWithKey = (uint64_t *)v1362;
                          v86 = v1373;
                          v113 = v1348;
LABEL_876:
                          v1325 = v87 >> 8;
                          if (v86)
                          {
                            v497 = (unint64_t *)&v86->__shared_owners_;
                            do
                              v498 = __ldaxr(v497);
                            while (__stlxr(v498 - 1, v497));
                            if (!v498)
                            {
                              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                              std::__shared_weak_count::__release_weak(v86);
                            }
                          }
                          v1330 = 0;
LABEL_882:
                          v1362 = 0;
                          v1363 = 0;
                          v499 = gdc::Registry::create(*((gdc::Registry **)*v113 + 1));
                          v500 = *v113;
                          *(_QWORD *)v1368 = &off_1E427F4C8;
                          *(_QWORD *)&v1368[8] = v499 << 32;
                          v1355 = v499 << 32;
                          v1359 = HIDWORD(v499);
                          *(_DWORD *)&v1368[16] = HIDWORD(v499);
                          *(_QWORD *)&v1368[24] = v1368;
                          *(_QWORD *)&v1370[24] = v1370;
                          *(_QWORD *)v1370 = &off_1E427F4C8;
                          *(_QWORD *)&v1370[8] = v499 << 32;
                          *(_DWORD *)&v1370[16] = HIDWORD(v499);
                          *(_DWORD *)&v1370[32] = 0;
                          ecs2::Runtime::queueCommand(v500, (uint64_t)v1370);
                          if (*(_DWORD *)&v1370[32] != -1)
                            ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                          *(_DWORD *)&v1370[32] = -1;
                          v501 = *(_QWORD **)&v1368[24];
                          if (*(_BYTE **)&v1368[24] == v1368)
                          {
                            v501 = v1368;
                            v502 = 4;
                          }
                          else
                          {
                            if (!*(_QWORD *)&v1368[24])
                              goto LABEL_889;
                            v502 = 5;
                          }
                          (*(void (**)(void))(*v501 + 8 * v502))();
LABEL_889:
                          v1342 = v17;
                          v503 = *v112;
                          v504 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v1349 + 8 * v1350) + 24))(*(_QWORD *)(*v1349 + 8 * v1350));
                          v505 = *v113;
                          v506 = operator new(0x20uLL);
                          *v506 = &off_1E427E8F8;
                          v506[1] = v503;
                          v506[2] = v504;
                          v506[3] = v499;
                          *(_QWORD *)&v1370[24] = v506;
                          *(_QWORD *)&v1368[24] = 0;
                          *(_DWORD *)&v1370[32] = 0;
                          ecs2::Runtime::queueCommand(v505, (uint64_t)v1370);
                          if (*(_DWORD *)&v1370[32] != -1)
                            ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                          *(_DWORD *)&v1370[32] = -1;
                          v507 = *(_QWORD **)&v1368[24];
                          if (*(_BYTE **)&v1368[24] == v1368)
                          {
                            v507 = v1368;
                            v508 = 4;
                          }
                          else
                          {
                            if (!*(_QWORD *)&v1368[24])
                              goto LABEL_896;
                            v508 = 5;
                          }
                          (*(void (**)(void))(*v507 + 8 * v508))();
LABEL_896:
                          v509 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v1349 + 8 * v1350) + 24))(*(_QWORD *)(*v1349 + 8 * v1350));
                          v510 = *v113;
                          *(_QWORD *)v1368 = &off_1E427EB38;
                          *(_QWORD *)&v1368[8] = v509;
                          *(_QWORD *)&v1368[16] = v499;
                          *(_QWORD *)&v1368[24] = v1368;
                          *(_QWORD *)&v1370[24] = v1370;
                          *(_QWORD *)v1370 = &off_1E427EB38;
                          *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                          *(_DWORD *)&v1370[32] = 0;
                          ecs2::Runtime::queueCommand(v510, (uint64_t)v1370);
                          if (*(_DWORD *)&v1370[32] != -1)
                            ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                          *(_DWORD *)&v1370[32] = -1;
                          v511 = *(_QWORD **)&v1368[24];
                          if (*(_BYTE **)&v1368[24] == v1368)
                          {
                            v511 = v1368;
                            v512 = 4;
                          }
                          else
                          {
                            if (!*(_QWORD *)&v1368[24])
                              goto LABEL_903;
                            v512 = 5;
                          }
                          (*(void (**)(void))(*v511 + 8 * v512))();
LABEL_903:
                          v1329 = MaterialHandle;
                          v1337 = v87;
                          AssociationItemStorage = (_QWORD *)md::VKMRenderResourcesStore::getAssociationItemStorage((uint64_t)**v20, *v112, 1);
                          v514 = AssociationItemStorage;
                          v516 = (unint64_t *)AssociationItemStorage[5];
                          v515 = AssociationItemStorage[6];
                          v1353 = v499;
                          if ((unint64_t)v516 < v515)
                          {
                            *v516 = v499;
                            v517 = v499;
                            v518 = v516 + 1;
                            v519 = v1350;
                            goto LABEL_928;
                          }
                          MaterialHandle = AssociationItemStorage[4];
                          v520 = (uint64_t)((uint64_t)v516 - MaterialHandle) >> 3;
                          v521 = v520 + 1;
                          if ((unint64_t)(v520 + 1) >> 61)
                            abort();
                          v522 = v515 - MaterialHandle;
                          if (v522 >> 2 > v521)
                            v521 = v522 >> 2;
                          if ((unint64_t)v522 >= 0x7FFFFFFFFFFFFFF8)
                            v523 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v523 = v521;
                          if (v523)
                          {
                            if (v523 >> 61)
                              goto LABEL_2405;
                            v524 = (char *)operator new(8 * v523);
                          }
                          else
                          {
                            v524 = 0;
                          }
                          v525 = (unint64_t *)&v524[8 * v520];
                          *v525 = v499;
                          v518 = v525 + 1;
                          if (v516 == (unint64_t *)MaterialHandle)
                          {
                            v519 = v1350;
LABEL_925:
                            v514[4] = v525;
                            v514[5] = v518;
                            v514[6] = &v524[8 * v523];
                            if (v516)
                              operator delete(v516);
                            v517 = v1353;
LABEL_928:
                            v514[5] = v518;
                            v533 = *a11;
                            v534 = *v113;
                            *(_QWORD *)v1368 = &off_1E42806C8;
                            *(_QWORD *)&v1368[8] = v533;
                            *(_QWORD *)&v1368[16] = v517;
                            *(_QWORD *)&v1368[24] = v1368;
                            *(_QWORD *)&v1370[24] = v1370;
                            *(_QWORD *)v1370 = &off_1E42806C8;
                            *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                            *(_DWORD *)&v1370[32] = 0;
                            ecs2::Runtime::queueCommand(v534, (uint64_t)v1370);
                            if (*(_DWORD *)&v1370[32] != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                            *(_DWORD *)&v1370[32] = -1;
                            v535 = *(_QWORD **)&v1368[24];
                            if (*(_BYTE **)&v1368[24] == v1368)
                            {
                              v535 = v1368;
                              v536 = 4;
                            }
                            else
                            {
                              if (!*(_QWORD *)&v1368[24])
                                goto LABEL_935;
                              v536 = 5;
                            }
                            (*(void (**)(void))(*v535 + 8 * v536))();
LABEL_935:
                            v537 = *a10;
                            v538 = *v113;
                            *(_QWORD *)v1368 = &off_1E427E5E0;
                            *(_QWORD *)&v1368[8] = v537;
                            *(_QWORD *)&v1368[16] = v517;
                            *(_QWORD *)&v1368[24] = v1368;
                            *(_QWORD *)&v1370[24] = v1370;
                            *(_QWORD *)v1370 = &off_1E427E5E0;
                            *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                            *(_DWORD *)&v1370[32] = 0;
                            ecs2::Runtime::queueCommand(v538, (uint64_t)v1370);
                            if (*(_DWORD *)&v1370[32] != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                            *(_DWORD *)&v1370[32] = -1;
                            v539 = *(_QWORD **)&v1368[24];
                            if (*(_BYTE **)&v1368[24] == v1368)
                            {
                              v539 = v1368;
                              v540 = 4;
                            }
                            else
                            {
                              if (!*(_QWORD *)&v1368[24])
                                goto LABEL_942;
                              v540 = 5;
                            }
                            (*(void (**)(void))(*v539 + 8 * v540))();
LABEL_942:
                            v541 = *a9;
                            v542 = *v113;
                            *(_QWORD *)v1368 = &off_1E427FA68;
                            *(_QWORD *)&v1368[8] = v541;
                            *(_QWORD *)&v1368[16] = v517;
                            *(_QWORD *)&v1368[24] = v1368;
                            *(_QWORD *)&v1370[24] = v1370;
                            *(_QWORD *)v1370 = &off_1E427FA68;
                            *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                            *(_DWORD *)&v1370[32] = 0;
                            ecs2::Runtime::queueCommand(v542, (uint64_t)v1370);
                            if (*(_DWORD *)&v1370[32] != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                            *(_DWORD *)&v1370[32] = -1;
                            v543 = *(_QWORD **)&v1368[24];
                            if (*(_BYTE **)&v1368[24] == v1368)
                            {
                              v543 = v1368;
                              v544 = 4;
                            }
                            else
                            {
                              if (!*(_QWORD *)&v1368[24])
                                goto LABEL_949;
                              v544 = 5;
                            }
                            (*(void (**)(void))(*v543 + 8 * v544))();
LABEL_949:
                            v545 = *a13;
                            v546 = *v113;
                            *(_QWORD *)v1368 = &off_1E4280998;
                            *(_QWORD *)&v1368[8] = v545;
                            *(_QWORD *)&v1368[16] = v517;
                            *(_QWORD *)&v1368[24] = v1368;
                            *(_QWORD *)&v1370[24] = v1370;
                            *(_QWORD *)v1370 = &off_1E4280998;
                            *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                            *(_DWORD *)&v1370[32] = 0;
                            ecs2::Runtime::queueCommand(v546, (uint64_t)v1370);
                            if (*(_DWORD *)&v1370[32] != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                            *(_DWORD *)&v1370[32] = -1;
                            v547 = *(_QWORD **)&v1368[24];
                            if (*(_BYTE **)&v1368[24] == v1368)
                            {
                              v547 = v1368;
                              v548 = 4;
                            }
                            else
                            {
                              if (!*(_QWORD *)&v1368[24])
                                goto LABEL_956;
                              v548 = 5;
                            }
                            (*(void (**)(void))(*v547 + 8 * v548))();
LABEL_956:
                            v549 = *a13;
                            v550 = *v113;
                            *(_QWORD *)v1368 = &off_1E4281D00;
                            *(_QWORD *)&v1368[8] = v549;
                            *(_QWORD *)&v1368[16] = v517;
                            *(_QWORD *)&v1368[24] = v1368;
                            *(_QWORD *)&v1370[24] = v1370;
                            *(_QWORD *)v1370 = &off_1E4281D00;
                            *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                            *(_DWORD *)&v1370[32] = 0;
                            ecs2::Runtime::queueCommand(v550, (uint64_t)v1370);
                            if (*(_DWORD *)&v1370[32] != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                            *(_DWORD *)&v1370[32] = -1;
                            v551 = *(_QWORD **)&v1368[24];
                            if (*(_BYTE **)&v1368[24] == v1368)
                            {
                              v551 = v1368;
                              v552 = 4;
                            }
                            else
                            {
                              if (!*(_QWORD *)&v1368[24])
                                goto LABEL_963;
                              v552 = 5;
                            }
                            (*(void (**)(void))(*v551 + 8 * v552))();
LABEL_963:
                            if (!a8)
                              goto LABEL_971;
                            v553 = *a8;
                            v554 = *v113;
                            *(_QWORD *)v1368 = &off_1E4280440;
                            *(_QWORD *)&v1368[8] = v553;
                            *(_QWORD *)&v1368[16] = v517;
                            *(_QWORD *)&v1368[24] = v1368;
                            *(_QWORD *)&v1370[24] = v1370;
                            *(_QWORD *)v1370 = &off_1E4280440;
                            *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                            *(_DWORD *)&v1370[32] = 0;
                            ecs2::Runtime::queueCommand(v554, (uint64_t)v1370);
                            if (*(_DWORD *)&v1370[32] != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                            *(_DWORD *)&v1370[32] = -1;
                            v555 = *(_QWORD **)&v1368[24];
                            if (*(_BYTE **)&v1368[24] == v1368)
                            {
                              v555 = v1368;
                              v556 = 4;
                            }
                            else
                            {
                              if (!*(_QWORD *)&v1368[24])
                                goto LABEL_971;
                              v556 = 5;
                            }
                            (*(void (**)(void))(*v555 + 8 * v556))();
LABEL_971:
                            if (!a17)
                              goto LABEL_979;
                            v557 = *a17;
                            v558 = *v113;
                            *(_QWORD *)v1368 = &off_1E4281640;
                            *(_QWORD *)&v1368[8] = v557;
                            *(_QWORD *)&v1368[16] = v517;
                            *(_QWORD *)&v1368[24] = v1368;
                            *(_QWORD *)&v1370[24] = v1370;
                            *(_QWORD *)v1370 = &off_1E4281640;
                            *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                            *(_DWORD *)&v1370[32] = 0;
                            ecs2::Runtime::queueCommand(v558, (uint64_t)v1370);
                            if (*(_DWORD *)&v1370[32] != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                            *(_DWORD *)&v1370[32] = -1;
                            v559 = *(_QWORD **)&v1368[24];
                            if (*(_BYTE **)&v1368[24] == v1368)
                            {
                              v559 = v1368;
                              v560 = 4;
                            }
                            else
                            {
                              if (!*(_QWORD *)&v1368[24])
                                goto LABEL_979;
                              v560 = 5;
                            }
                            (*(void (**)(void))(*v559 + 8 * v560))();
LABEL_979:
                            if (!a14)
                              goto LABEL_987;
                            v561 = *a14;
                            v562 = *v113;
                            *(_QWORD *)v1368 = &off_1E4280248;
                            *(_QWORD *)&v1368[8] = v561;
                            *(_QWORD *)&v1368[16] = v517;
                            *(_QWORD *)&v1368[24] = v1368;
                            *(_QWORD *)&v1370[24] = v1370;
                            *(_QWORD *)v1370 = &off_1E4280248;
                            *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                            *(_DWORD *)&v1370[32] = 0;
                            ecs2::Runtime::queueCommand(v562, (uint64_t)v1370);
                            if (*(_DWORD *)&v1370[32] != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                            *(_DWORD *)&v1370[32] = -1;
                            v563 = *(_QWORD **)&v1368[24];
                            if (*(_BYTE **)&v1368[24] == v1368)
                            {
                              v563 = v1368;
                              v564 = 4;
                            }
                            else
                            {
                              if (!*(_QWORD *)&v1368[24])
                                goto LABEL_987;
                              v564 = 5;
                            }
                            (*(void (**)(void))(*v563 + 8 * v564))();
LABEL_987:
                            if (!a15)
                              goto LABEL_995;
                            v565 = *a15;
                            v566 = *v113;
                            *(_QWORD *)v1368 = &off_1E4281910;
                            *(_QWORD *)&v1368[8] = v565;
                            *(_QWORD *)&v1368[16] = v517;
                            *(_QWORD *)&v1368[24] = v1368;
                            *(_QWORD *)&v1370[24] = v1370;
                            *(_QWORD *)v1370 = &off_1E4281910;
                            *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                            *(_DWORD *)&v1370[32] = 0;
                            ecs2::Runtime::queueCommand(v566, (uint64_t)v1370);
                            if (*(_DWORD *)&v1370[32] != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                            *(_DWORD *)&v1370[32] = -1;
                            v567 = *(_QWORD **)&v1368[24];
                            if (*(_BYTE **)&v1368[24] == v1368)
                            {
                              v567 = v1368;
                              v568 = 4;
                            }
                            else
                            {
                              if (!*(_QWORD *)&v1368[24])
                                goto LABEL_995;
                              v568 = 5;
                            }
                            (*(void (**)(void))(*v567 + 8 * v568))();
LABEL_995:
                            if (!a16)
                              goto LABEL_1003;
                            v569 = *a16;
                            v570 = *v113;
                            *(_QWORD *)v1368 = &off_1E42803F8;
                            *(_QWORD *)&v1368[8] = v569;
                            *(_QWORD *)&v1368[16] = v517;
                            *(_QWORD *)&v1368[24] = v1368;
                            *(_QWORD *)&v1370[24] = v1370;
                            *(_QWORD *)v1370 = &off_1E42803F8;
                            *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                            *(_DWORD *)&v1370[32] = 0;
                            ecs2::Runtime::queueCommand(v570, (uint64_t)v1370);
                            if (*(_DWORD *)&v1370[32] != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                            *(_DWORD *)&v1370[32] = -1;
                            v571 = *(_QWORD **)&v1368[24];
                            if (*(_BYTE **)&v1368[24] == v1368)
                            {
                              v571 = v1368;
                              v572 = 4;
                            }
                            else
                            {
                              if (!*(_QWORD *)&v1368[24])
                                goto LABEL_1003;
                              v572 = 5;
                            }
                            (*(void (**)(void))(*v571 + 8 * v572))();
LABEL_1003:
                            if (!a5)
                              goto LABEL_1011;
                            v573 = *a5;
                            v574 = *v113;
                            *(_QWORD *)v1368 = &off_1E4280488;
                            *(_QWORD *)&v1368[8] = v573;
                            *(_QWORD *)&v1368[16] = v517;
                            *(_QWORD *)&v1368[24] = v1368;
                            *(_QWORD *)&v1370[24] = v1370;
                            *(_QWORD *)v1370 = &off_1E4280488;
                            *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                            *(_DWORD *)&v1370[32] = 0;
                            ecs2::Runtime::queueCommand(v574, (uint64_t)v1370);
                            if (*(_DWORD *)&v1370[32] != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                            *(_DWORD *)&v1370[32] = -1;
                            v575 = *(_QWORD **)&v1368[24];
                            if (*(_BYTE **)&v1368[24] == v1368)
                            {
                              v575 = v1368;
                              v576 = 4;
                            }
                            else
                            {
                              if (!*(_QWORD *)&v1368[24])
                                goto LABEL_1011;
                              v576 = 5;
                            }
                            (*(void (**)(void))(*v575 + 8 * v576))();
LABEL_1011:
                            v577 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v1349 + 8 * v519) + 24))(*(_QWORD *)(*v1349 + 8 * v519));
                            v578 = *v113;
                            *(_QWORD *)v1368 = &off_1E427E3E8;
                            *(_QWORD *)&v1368[8] = v577;
                            *(_QWORD *)&v1368[16] = v517;
                            *(_QWORD *)&v1368[24] = v1368;
                            *(_QWORD *)&v1370[24] = v1370;
                            *(_QWORD *)v1370 = &off_1E427E3E8;
                            *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                            *(_DWORD *)&v1370[32] = 0;
                            ecs2::Runtime::queueCommand(v578, (uint64_t)v1370);
                            if (*(_DWORD *)&v1370[32] != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                            *(_DWORD *)&v1370[32] = -1;
                            v579 = *(_QWORD **)&v1368[24];
                            if (*(_BYTE **)&v1368[24] == v1368)
                            {
                              v579 = v1368;
                              v580 = 4;
                            }
                            else
                            {
                              if (!*(_QWORD *)&v1368[24])
                                goto LABEL_1018;
                              v580 = 5;
                            }
                            (*(void (**)(void))(*v579 + 8 * v580))();
LABEL_1018:
                            v581 = *v113;
                            *(_QWORD *)v1368 = &off_1E427EA60;
                            *(_QWORD *)&v1368[8] = v1355;
                            *(_DWORD *)&v1368[16] = v1359;
                            *(_QWORD *)&v1368[24] = v1368;
                            *(_QWORD *)&v1370[24] = v1370;
                            *(_QWORD *)v1370 = &off_1E427EA60;
                            *(_QWORD *)&v1370[8] = v1355;
                            *(_DWORD *)&v1370[16] = v1359;
                            *(_DWORD *)&v1370[32] = 0;
                            ecs2::Runtime::queueCommand(v581, (uint64_t)v1370);
                            if (*(_DWORD *)&v1370[32] != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                            *(_DWORD *)&v1370[32] = -1;
                            v582 = *(_QWORD **)&v1368[24];
                            if (*(_BYTE **)&v1368[24] == v1368)
                            {
                              v582 = v1368;
                              v583 = 4;
                            }
                            else
                            {
                              if (!*(_QWORD *)&v1368[24])
                                goto LABEL_1025;
                              v583 = 5;
                            }
                            (*(void (**)(void))(*v582 + 8 * v583))();
LABEL_1025:
                            v584 = *v113;
                            *(_QWORD *)v1368 = &off_1E427FB88;
                            *(_QWORD *)&v1368[8] = v1355;
                            *(_DWORD *)&v1368[16] = v1359;
                            *(_QWORD *)&v1368[24] = v1368;
                            *(_QWORD *)&v1370[24] = v1370;
                            *(_QWORD *)v1370 = &off_1E427FB88;
                            *(_QWORD *)&v1370[8] = v1355;
                            *(_DWORD *)&v1370[16] = v1359;
                            *(_DWORD *)&v1370[32] = 0;
                            ecs2::Runtime::queueCommand(v584, (uint64_t)v1370);
                            if (*(_DWORD *)&v1370[32] != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                            *(_DWORD *)&v1370[32] = -1;
                            v585 = *(_QWORD **)&v1368[24];
                            if (*(_BYTE **)&v1368[24] == v1368)
                            {
                              v585 = v1368;
                              v586 = 4;
                            }
                            else
                            {
                              if (!*(_QWORD *)&v1368[24])
                                goto LABEL_1032;
                              v586 = 5;
                            }
                            (*(void (**)(void))(*v585 + 8 * v586))();
LABEL_1032:
                            v587 = *v113;
                            *(_QWORD *)v1368 = &off_1E42815B0;
                            *(_QWORD *)&v1368[8] = v1355;
                            *(_DWORD *)&v1368[16] = v1359;
                            *(_QWORD *)&v1368[24] = v1368;
                            *(_QWORD *)&v1370[24] = v1370;
                            *(_QWORD *)v1370 = &off_1E42815B0;
                            *(_QWORD *)&v1370[8] = v1355;
                            *(_DWORD *)&v1370[16] = v1359;
                            *(_DWORD *)&v1370[32] = 0;
                            ecs2::Runtime::queueCommand(v587, (uint64_t)v1370);
                            if (*(_DWORD *)&v1370[32] != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                            *(_DWORD *)&v1370[32] = -1;
                            v588 = *(_QWORD **)&v1368[24];
                            if (*(_BYTE **)&v1368[24] == v1368)
                            {
                              v588 = v1368;
                              v589 = 4;
                            }
                            else
                            {
                              if (!*(_QWORD *)&v1368[24])
                                goto LABEL_1039;
                              v589 = 5;
                            }
                            (*(void (**)(void))(*v588 + 8 * v589))();
LABEL_1039:
                            v590 = *v113;
                            *(_QWORD *)v1368 = &off_1E42808C0;
                            *(_QWORD *)&v1368[8] = v1355;
                            *(_DWORD *)&v1368[16] = v1359;
                            *(_QWORD *)&v1368[24] = v1368;
                            *(_QWORD *)&v1370[24] = v1370;
                            *(_QWORD *)v1370 = &off_1E42808C0;
                            *(_QWORD *)&v1370[8] = v1355;
                            *(_DWORD *)&v1370[16] = v1359;
                            *(_DWORD *)&v1370[32] = 0;
                            ecs2::Runtime::queueCommand(v590, (uint64_t)v1370);
                            if (*(_DWORD *)&v1370[32] != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                            *(_DWORD *)&v1370[32] = -1;
                            v591 = *(_QWORD **)&v1368[24];
                            if (*(_BYTE **)&v1368[24] == v1368)
                            {
                              v591 = v1368;
                              v592 = 4;
                            }
                            else
                            {
                              if (!*(_QWORD *)&v1368[24])
                                goto LABEL_1046;
                              v592 = 5;
                            }
                            (*(void (**)(void))(*v591 + 8 * v592))();
LABEL_1046:
                            v593 = *v113;
                            v594 = v1355 | *(unsigned __int8 *)(v1327 + 24);
                            *(_QWORD *)v1368 = &off_1E4281EB0;
                            *(_QWORD *)&v1368[8] = v594;
                            *(_DWORD *)&v1368[16] = v1359;
                            *(_QWORD *)&v1368[24] = v1368;
                            *(_QWORD *)&v1370[24] = v1370;
                            *(_QWORD *)v1370 = &off_1E4281EB0;
                            *(_QWORD *)&v1370[8] = v594;
                            *(_DWORD *)&v1370[16] = v1359;
                            *(_DWORD *)&v1370[32] = 0;
                            ecs2::Runtime::queueCommand(v593, (uint64_t)v1370);
                            if (*(_DWORD *)&v1370[32] != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                            *(_DWORD *)&v1370[32] = -1;
                            v595 = *(_QWORD **)&v1368[24];
                            if (*(_BYTE **)&v1368[24] == v1368)
                            {
                              v595 = v1368;
                              v596 = 4;
                            }
                            else
                            {
                              if (!*(_QWORD *)&v1368[24])
                                goto LABEL_1053;
                              v596 = 5;
                            }
                            (*(void (**)(void))(*v595 + 8 * v596))();
LABEL_1053:
                            v597 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v1349 + 8 * v519) + 16))(*(_QWORD *)(*v1349 + 8 * v519));
                            v598 = *v113;
                            *(_QWORD *)v1368 = &off_1E427DFB0;
                            *(_QWORD *)&v1368[8] = v597;
                            *(_QWORD *)&v1368[16] = v517;
                            *(_QWORD *)&v1368[24] = v1368;
                            *(_QWORD *)&v1370[24] = v1370;
                            *(_QWORD *)v1370 = &off_1E427DFB0;
                            *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                            *(_DWORD *)&v1370[32] = 0;
                            ecs2::Runtime::queueCommand(v598, (uint64_t)v1370);
                            if (*(_DWORD *)&v1370[32] != -1)
                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                            *(_DWORD *)&v1370[32] = -1;
                            v599 = *(_QWORD **)&v1368[24];
                            if (*(_BYTE **)&v1368[24] == v1368)
                            {
                              v599 = v1368;
                              v600 = 4;
                            }
                            else
                            {
                              if (!*(_QWORD *)&v1368[24])
                                goto LABEL_1060;
                              v600 = 5;
                            }
                            (*(void (**)(void))(*v599 + 8 * v600))();
LABEL_1060:
                            v1344 = v114;
                            v601 = **v20;
                            v602 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v1349 + 8 * v519) + 16))(*(_QWORD *)(*v1349 + 8 * v519));
                            v603 = *((_QWORD *)v601 + 193);
                            if (*((_QWORD *)v601 + 192) == v603)
                            {
                              v606 = (-858993459
                                    * ((*((_QWORD *)v601 + 199) - *((_QWORD *)v601 + 198)) >> 2)) | 0x100000000;
                              v607 = (uint64_t *)*((_QWORD *)v601 + 196);
                              v608 = *((_QWORD *)v601 + 197);
                              if ((unint64_t)v607 >= v608)
                              {
                                MaterialHandle = *((_QWORD *)v601 + 195);
                                v610 = (uint64_t)((uint64_t)v607 - MaterialHandle) >> 3;
                                v611 = v610 + 1;
                                if ((unint64_t)(v610 + 1) >> 61)
                                  goto LABEL_2406;
                                v612 = v608 - MaterialHandle;
                                if (v612 >> 2 > v611)
                                  v611 = v612 >> 2;
                                if ((unint64_t)v612 >= 0x7FFFFFFFFFFFFFF8)
                                  v613 = 0x1FFFFFFFFFFFFFFFLL;
                                else
                                  v613 = v611;
                                if (v613)
                                {
                                  if (v613 >> 61)
                                    goto LABEL_2405;
                                  v614 = (char *)operator new(8 * v613);
                                }
                                else
                                {
                                  v614 = 0;
                                }
                                v615 = (uint64_t *)&v614[8 * v610];
                                *v615 = v606;
                                v609 = v615 + 1;
                                if (v607 != (uint64_t *)MaterialHandle)
                                {
                                  v616 = (unint64_t)v607 - MaterialHandle - 8;
                                  if (v616 < 0x58)
                                    goto LABEL_2417;
                                  if (MaterialHandle - (unint64_t)v614 < 0x20)
                                    goto LABEL_2417;
                                  v617 = (v616 >> 3) + 1;
                                  v618 = &v614[8 * v610 - 16];
                                  v619 = v607 - 2;
                                  v620 = v617 & 0x3FFFFFFFFFFFFFFCLL;
                                  do
                                  {
                                    v621 = *(_OWORD *)v619;
                                    *((_OWORD *)v618 - 1) = *((_OWORD *)v619 - 1);
                                    *(_OWORD *)v618 = v621;
                                    v618 -= 32;
                                    v619 -= 4;
                                    v620 -= 4;
                                  }
                                  while (v620);
                                  v615 -= v617 & 0x3FFFFFFFFFFFFFFCLL;
                                  v607 -= v617 & 0x3FFFFFFFFFFFFFFCLL;
                                  if (v617 != (v617 & 0x3FFFFFFFFFFFFFFCLL))
                                  {
LABEL_2417:
                                    do
                                    {
                                      v622 = *--v607;
                                      *--v615 = v622;
                                    }
                                    while (v607 != (uint64_t *)MaterialHandle);
                                  }
                                  v607 = (uint64_t *)*((_QWORD *)v601 + 195);
                                }
                                *((_QWORD *)v601 + 195) = v615;
                                *((_QWORD *)v601 + 196) = v609;
                                *((_QWORD *)v601 + 197) = &v614[8 * v613];
                                if (v607)
                                  operator delete(v607);
                              }
                              else
                              {
                                *v607 = v606;
                                v609 = v607 + 1;
                              }
                              *((_QWORD *)v601 + 196) = v609;
                              v605 = *(v609 - 1);
                            }
                            else
                            {
                              v604 = *(_QWORD *)(v603 - 8);
                              *((_QWORD *)v601 + 193) = v603 - 8;
                              *(_DWORD *)(*((_QWORD *)v601 + 195) + 8 * v604) = -858993459
                                                                              * ((*((_QWORD *)v601 + 199)
                                                                                - *((_QWORD *)v601 + 198)) >> 2);
                              *(_DWORD *)(*((_QWORD *)v601 + 195) + 8 * v604 + 4) = (((unint64_t)*(unsigned int *)(*((_QWORD *)v601 + 195) + 8 * v604 + 4) << 32)
                                                                                   + 0x100000000) >> 32;
                              v605 = v604 | ((unint64_t)*(unsigned int *)(*((_QWORD *)v601 + 195)
                                                                                             + 8 * v604
                                                                                             + 4) << 32);
                            }
                            v623 = (BOOL *)*((_QWORD *)v601 + 199);
                            v624 = *((_QWORD *)v601 + 200);
                            if ((unint64_t)v623 >= v624)
                            {
                              MaterialHandle = *((_QWORD *)v601 + 198);
                              v626 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v623[-MaterialHandle] >> 2) + 1;
                              if (v626 > 0xCCCCCCCCCCCCCCCLL)
                                goto LABEL_2406;
                              v627 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v624 - MaterialHandle) >> 2);
                              if (2 * v627 > v626)
                                v626 = 2 * v627;
                              if (v627 >= 0x666666666666666)
                                v628 = 0xCCCCCCCCCCCCCCCLL;
                              else
                                v628 = v626;
                              if (v628)
                              {
                                if (v628 > 0xCCCCCCCCCCCCCCCLL)
                                  goto LABEL_2405;
                                v629 = (char *)operator new(20 * v628);
                              }
                              else
                              {
                                v629 = 0;
                              }
                              v630 = (BOOL *)&v629[4 * ((uint64_t)&v623[-MaterialHandle] >> 2)];
                              *v630 = v1318;
                              *(_OWORD *)(v630 + 1) = *(_OWORD *)v1370;
                              *((_DWORD *)v630 + 4) = *(_DWORD *)&v1370[15];
                              v631 = v630;
                              if (v623 != (BOOL *)MaterialHandle)
                              {
                                do
                                {
                                  v632 = *(_OWORD *)(v623 - 20);
                                  *((_DWORD *)v631 - 1) = *((_DWORD *)v623 - 1);
                                  *(_OWORD *)(v631 - 20) = v632;
                                  v631 -= 20;
                                  v623 -= 20;
                                }
                                while (v623 != (BOOL *)MaterialHandle);
                                v623 = (BOOL *)*((_QWORD *)v601 + 198);
                              }
                              *((_QWORD *)v601 + 198) = v631;
                              v625 = v630 + 20;
                              *((_QWORD *)v601 + 199) = v630 + 20;
                              *((_QWORD *)v601 + 200) = &v629[20 * v628];
                              if (v623)
                                operator delete(v623);
                            }
                            else
                            {
                              *v623 = v1318;
                              *(_OWORD *)(v623 + 1) = *(_OWORD *)v1370;
                              *((_DWORD *)v623 + 4) = *(_DWORD *)&v1370[15];
                              v625 = v623 + 20;
                            }
                            *((_QWORD *)v601 + 199) = v625;
                            v633 = (char *)*((_QWORD *)v601 + 202);
                            v634 = *((_QWORD *)v601 + 203);
                            if ((unint64_t)v633 < v634)
                            {
                              *(_QWORD *)v633 = v605;
                              v635 = (uint64_t)(v633 + 8);
                              goto LABEL_1123;
                            }
                            v636 = (char *)*((_QWORD *)v601 + 201);
                            v637 = (v633 - v636) >> 3;
                            v638 = v637 + 1;
                            if (!((unint64_t)(v637 + 1) >> 61))
                            {
                              v639 = v634 - (_QWORD)v636;
                              if (v639 >> 2 > v638)
                                v638 = v639 >> 2;
                              if ((unint64_t)v639 >= 0x7FFFFFFFFFFFFFF8)
                                MaterialHandle = 0x1FFFFFFFFFFFFFFFLL;
                              else
                                MaterialHandle = v638;
                              if (MaterialHandle)
                              {
                                if (MaterialHandle >> 61)
                                  goto LABEL_2405;
                                v640 = operator new(8 * MaterialHandle);
                              }
                              else
                              {
                                v640 = 0;
                              }
                              v641 = &v640[8 * v637];
                              *v641 = v605;
                              v635 = (uint64_t)(v641 + 1);
                              if (v633 != v636)
                              {
                                v642 = v633 - v636 - 8;
                                if (v642 < 0x58)
                                  goto LABEL_2418;
                                if ((unint64_t)(v636 - v640) < 0x20)
                                  goto LABEL_2418;
                                v643 = (v642 >> 3) + 1;
                                v644 = &v640[8 * v637 - 16];
                                v645 = v633 - 16;
                                v646 = v643 & 0x3FFFFFFFFFFFFFFCLL;
                                do
                                {
                                  v647 = *(_OWORD *)v645;
                                  *(v644 - 1) = *((_OWORD *)v645 - 1);
                                  *v644 = v647;
                                  v644 -= 2;
                                  v645 -= 32;
                                  v646 -= 4;
                                }
                                while (v646);
                                v641 -= v643 & 0x3FFFFFFFFFFFFFFCLL;
                                v633 -= 8 * (v643 & 0x3FFFFFFFFFFFFFFCLL);
                                if (v643 != (v643 & 0x3FFFFFFFFFFFFFFCLL))
                                {
LABEL_2418:
                                  do
                                  {
                                    v648 = *((_QWORD *)v633 - 1);
                                    v633 -= 8;
                                    *--v641 = v648;
                                  }
                                  while (v633 != v636);
                                }
                              }
                              *((_QWORD *)v601 + 201) = v641;
                              *((_QWORD *)v601 + 202) = v635;
                              *((_QWORD *)v601 + 203) = &v640[8 * MaterialHandle];
                              if (v636)
                                operator delete(v636);
LABEL_1123:
                              v649 = (uint64_t *)((char *)v601 + 1456);
                              *((_QWORD *)v601 + 202) = v635;
                              v650 = *((_QWORD *)v601 + 183);
                              if (v650)
                              {
                                v651 = (uint8x8_t)vcnt_s8((int8x8_t)v650);
                                v651.i16[0] = vaddlv_u8(v651);
                                if (v651.u32[0] > 1uLL)
                                {
                                  MaterialHandle = v605;
                                  if (v605 >= v650)
                                    MaterialHandle = v605 % v650;
                                }
                                else
                                {
                                  MaterialHandle = (v650 - 1) & v605;
                                }
                                v652 = *(_QWORD **)(*v649 + 8 * MaterialHandle);
                                if (v652)
                                {
                                  v653 = (_QWORD *)*v652;
                                  if (v653)
                                  {
                                    if (v651.u32[0] < 2uLL)
                                    {
                                      while (1)
                                      {
                                        v655 = v653[1];
                                        if (v655 == v605)
                                        {
                                          if (v653[2] == v605)
                                            goto LABEL_1182;
                                        }
                                        else if ((v655 & (v650 - 1)) != MaterialHandle)
                                        {
                                          goto LABEL_1143;
                                        }
                                        v653 = (_QWORD *)*v653;
                                        if (!v653)
                                          goto LABEL_1143;
                                      }
                                    }
                                    do
                                    {
                                      v654 = v653[1];
                                      if (v654 == v605)
                                      {
                                        if (v653[2] == v605)
                                          goto LABEL_1182;
                                      }
                                      else
                                      {
                                        if (v654 >= v650)
                                          v654 %= v650;
                                        if (v654 != MaterialHandle)
                                          break;
                                      }
                                      v653 = (_QWORD *)*v653;
                                    }
                                    while (v653);
                                  }
                                }
                              }
LABEL_1143:
                              v635 = (uint64_t)operator new(0x30uLL);
                              *(_QWORD *)v635 = 0;
                              *(_QWORD *)(v635 + 8) = v605;
                              *(_QWORD *)(v635 + 16) = v605;
                              *(_OWORD *)(v635 + 24) = xmmword_19FFB3350;
                              *(_BYTE *)(v635 + 40) = 0;
                              v656 = (float)(unint64_t)(*((_QWORD *)v601 + 185) + 1);
                              v657 = *((float *)v601 + 372);
                              if (!v650 || (float)(v657 * (float)v650) < v656)
                              {
                                v658 = v650 < 3 || (v650 & (v650 - 1)) != 0;
                                v659 = v658 | (2 * v650);
                                v660 = vcvtps_u32_f32(v656 / v657);
                                if (v659 <= v660)
                                  prime = v660;
                                else
                                  prime = v659;
                                if (prime == 1)
                                {
                                  prime = 2;
                                }
                                else if ((prime & (prime - 1)) != 0)
                                {
                                  prime = std::__next_prime(prime);
                                  v650 = *((_QWORD *)v601 + 183);
                                }
                                if (prime > v650)
                                  goto LABEL_1156;
                                if (prime < v650)
                                {
                                  v662 = vcvtps_u32_f32((float)*((unint64_t *)v601 + 185) / *((float *)v601 + 372));
                                  if (v650 < 3
                                    || (v663 = (uint8x8_t)vcnt_s8((int8x8_t)v650),
                                        v663.i16[0] = vaddlv_u8(v663),
                                        v663.u32[0] > 1uLL))
                                  {
                                    v662 = std::__next_prime(v662);
                                  }
                                  else
                                  {
                                    v664 = 1 << -(char)__clz(v662 - 1);
                                    if (v662 >= 2)
                                      v662 = v664;
                                  }
                                  if (prime <= v662)
                                    prime = v662;
                                  if (prime < v650)
LABEL_1156:
                                    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v601 + 1456, prime);
                                }
                                v650 = *((_QWORD *)v601 + 183);
                                if ((v650 & (v650 - 1)) != 0)
                                {
                                  if (v605 >= v650)
                                    MaterialHandle = v605 % v650;
                                  else
                                    MaterialHandle = v605;
                                }
                                else
                                {
                                  MaterialHandle = (v650 - 1) & v605;
                                }
                              }
                              v665 = *v649;
                              v666 = *(uint64_t **)(*v649 + 8 * MaterialHandle);
                              if (v666)
                              {
                                *(_QWORD *)v635 = *v666;
                              }
                              else
                              {
                                *(_QWORD *)v635 = *((_QWORD *)v601 + 184);
                                *((_QWORD *)v601 + 184) = v635;
                                *(_QWORD *)(v665 + 8 * MaterialHandle) = (char *)v601 + 1472;
                                if (!*(_QWORD *)v635)
                                {
LABEL_1181:
                                  ++*((_QWORD *)v601 + 185);
LABEL_1182:
                                  v668 = *((_QWORD *)v601 + 210);
                                  if (v668)
                                  {
                                    v669 = (uint8x8_t)vcnt_s8((int8x8_t)v668);
                                    v669.i16[0] = vaddlv_u8(v669);
                                    if (v669.u32[0] > 1uLL)
                                    {
                                      v635 = v602;
                                      if (v602 >= v668)
                                        v635 = v602 % v668;
                                    }
                                    else
                                    {
                                      v635 = (v668 - 1) & v602;
                                    }
                                    v670 = *(_QWORD ***)(*((_QWORD *)v601 + 209) + 8 * v635);
                                    if (v670)
                                    {
                                      v671 = *v670;
                                      if (*v670)
                                      {
                                        if (v669.u32[0] < 2uLL)
                                        {
                                          v21 = v1348;
                                          while (1)
                                          {
                                            v672 = v671[1];
                                            if (v672 == v602)
                                            {
                                              if (v671[2] == v602)
                                                goto LABEL_1272;
                                            }
                                            else if ((v672 & (v668 - 1)) != v635)
                                            {
                                              goto LABEL_1203;
                                            }
                                            v671 = (_QWORD *)*v671;
                                            if (!v671)
                                              goto LABEL_1203;
                                          }
                                        }
                                        v21 = v1348;
                                        do
                                        {
                                          v673 = v671[1];
                                          if (v673 == v602)
                                          {
                                            if (v671[2] == v602)
                                              goto LABEL_1272;
                                          }
                                          else
                                          {
                                            if (v673 >= v668)
                                              v673 %= v668;
                                            if (v673 != v635)
                                              break;
                                          }
                                          v671 = (_QWORD *)*v671;
                                        }
                                        while (v671);
                                      }
                                    }
                                  }
LABEL_1203:
                                  v671 = operator new(0x20uLL);
                                  *v671 = 0;
                                  v671[1] = v602;
                                  v671[2] = v602;
                                  v671[3] = 0;
                                  v674 = (float)(unint64_t)(*((_QWORD *)v601 + 212) + 1);
                                  v675 = *((float *)v601 + 426);
                                  if (v668 && (float)(v675 * (float)v668) >= v674)
                                  {
                                    v21 = v1348;
                                    goto LABEL_1262;
                                  }
                                  v676 = (v668 & (v668 - 1)) != 0;
                                  if (v668 < 3)
                                    v676 = 1;
                                  v677 = v676 | (2 * v668);
                                  v678 = vcvtps_u32_f32(v674 / v675);
                                  if (v677 <= v678)
                                    v679 = v678;
                                  else
                                    v679 = v677;
                                  if (v679 == 1)
                                  {
                                    v679 = 2;
                                  }
                                  else if ((v679 & (v679 - 1)) != 0)
                                  {
                                    v21 = v1348;
                                    v679 = std::__next_prime(v679);
                                    v668 = *((_QWORD *)v601 + 210);
                                    v680 = v679 >= v668;
                                    if (v679 > v668)
                                    {
LABEL_1228:
                                      if (v679 >> 61)
                                        goto LABEL_2405;
                                      v684 = operator new(8 * v679);
                                      v685 = (void *)*((_QWORD *)v601 + 209);
                                      *((_QWORD *)v601 + 209) = v684;
                                      if (v685)
                                        operator delete(v685);
                                      v686 = 0;
                                      *((_QWORD *)v601 + 210) = v679;
                                      do
                                        *(_QWORD *)(*((_QWORD *)v601 + 209) + 8 * v686++) = 0;
                                      while (v679 != v686);
                                      v687 = (_QWORD *)*((_QWORD *)v601 + 211);
                                      if (!v687)
                                        goto LABEL_1257;
                                      v688 = (uint64_t)v601 + 1688;
                                      v689 = v687[1];
                                      v690 = v679 - 1;
                                      if ((v679 & (v679 - 1)) == 0)
                                      {
                                        v691 = v689 & v690;
                                        *(_QWORD *)(*((_QWORD *)v601 + 209) + 8 * v691) = v688;
                                        while (1)
                                        {
                                          v692 = (_QWORD *)*v687;
                                          if (!*v687)
                                            break;
                                          v693 = v692[1] & v690;
                                          if (v693 == v691)
                                          {
                                            v687 = (_QWORD *)*v687;
                                          }
                                          else
                                          {
                                            v694 = *((_QWORD *)v601 + 209);
                                            if (*(_QWORD *)(v694 + 8 * v693))
                                            {
                                              *v687 = *v692;
                                              v695 = 8 * v693;
                                              *v692 = **(_QWORD **)(*((_QWORD *)v601 + 209) + v695);
                                              **(_QWORD **)(*((_QWORD *)v601 + 209) + v695) = v692;
                                            }
                                            else
                                            {
                                              *(_QWORD *)(v694 + 8 * v693) = v687;
                                              v687 = v692;
                                              v691 = v693;
                                            }
                                          }
                                        }
LABEL_1257:
                                        v668 = *((_QWORD *)v601 + 210);
                                        if ((v668 & (v668 - 1)) != 0)
                                        {
                                          if (v602 >= v668)
                                            v635 = v602 % v668;
                                          else
                                            v635 = v602;
                                        }
                                        else
                                        {
                                          v635 = (v668 - 1) & v602;
                                        }
LABEL_1262:
                                        v701 = *((_QWORD *)v601 + 209);
                                        v702 = *(_QWORD **)(v701 + 8 * v635);
                                        if (v702)
                                        {
                                          *v671 = *v702;
                                        }
                                        else
                                        {
                                          *v671 = *((_QWORD *)v601 + 211);
                                          *((_QWORD *)v601 + 211) = v671;
                                          *(_QWORD *)(v701 + 8 * v635) = (char *)v601 + 1688;
                                          if (!*v671)
                                          {
LABEL_1271:
                                            ++*((_QWORD *)v601 + 212);
LABEL_1272:
                                            v671[3] = v605;
                                            v704 = *((_QWORD *)v601 + 215);
                                            if (v704)
                                            {
                                              v705 = (uint8x8_t)vcnt_s8((int8x8_t)v704);
                                              v705.i16[0] = vaddlv_u8(v705);
                                              if (v705.u32[0] > 1uLL)
                                              {
                                                v635 = v605;
                                                if (v605 >= v704)
                                                  v635 = v605 % v704;
                                              }
                                              else
                                              {
                                                v635 = (v704 - 1) & v605;
                                              }
                                              v706 = *(_QWORD ***)(*((_QWORD *)v601 + 214) + 8 * v635);
                                              if (v706)
                                              {
                                                v707 = *v706;
                                                if (*v706)
                                                {
                                                  if (v705.u32[0] < 2uLL)
                                                  {
                                                    while (1)
                                                    {
                                                      v709 = v707[1];
                                                      if (v709 == v605)
                                                      {
                                                        if (v707[2] == v605)
                                                          goto LABEL_1312;
                                                      }
                                                      else if ((v709 & (v704 - 1)) != v635)
                                                      {
                                                        goto LABEL_1292;
                                                      }
                                                      v707 = (_QWORD *)*v707;
                                                      if (!v707)
                                                        goto LABEL_1292;
                                                    }
                                                  }
                                                  do
                                                  {
                                                    v708 = v707[1];
                                                    if (v708 == v605)
                                                    {
                                                      if (v707[2] == v605)
                                                      {
LABEL_1312:
                                                        v20 = v1343;
                                                        v712 = v1350;
                                                        goto LABEL_1362;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      if (v708 >= v704)
                                                        v708 %= v704;
                                                      if (v708 != v635)
                                                        break;
                                                    }
                                                    v707 = (_QWORD *)*v707;
                                                  }
                                                  while (v707);
                                                }
                                              }
                                            }
LABEL_1292:
                                            v707 = operator new(0x20uLL);
                                            *v707 = 0;
                                            v707[1] = v605;
                                            v707[2] = v605;
                                            v707[3] = 0;
                                            v710 = (float)(unint64_t)(*((_QWORD *)v601 + 217) + 1);
                                            v711 = *((float *)v601 + 436);
                                            if (v704 && (float)(v711 * (float)v704) >= v710)
                                            {
                                              v20 = v1343;
                                              v21 = v1348;
                                              v712 = v1350;
                                              goto LABEL_1352;
                                            }
                                            v713 = (v704 & (v704 - 1)) != 0;
                                            if (v704 < 3)
                                              v713 = 1;
                                            v714 = v713 | (2 * v704);
                                            v715 = vcvtps_u32_f32(v710 / v711);
                                            if (v714 <= v715)
                                              v716 = v715;
                                            else
                                              v716 = v714;
                                            v21 = v1348;
                                            if (v716 == 1)
                                            {
                                              v716 = 2;
                                            }
                                            else if ((v716 & (v716 - 1)) != 0)
                                            {
                                              v20 = v1343;
                                              v712 = v1350;
                                              v716 = std::__next_prime(v716);
                                              v704 = *((_QWORD *)v601 + 215);
                                              v717 = v716 >= v704;
                                              if (v716 > v704)
                                              {
LABEL_1318:
                                                if (v716 >> 61)
                                                  goto LABEL_2405;
                                                v721 = operator new(8 * v716);
                                                v722 = (void *)*((_QWORD *)v601 + 214);
                                                *((_QWORD *)v601 + 214) = v721;
                                                if (v722)
                                                  operator delete(v722);
                                                v723 = 0;
                                                *((_QWORD *)v601 + 215) = v716;
                                                do
                                                  *(_QWORD *)(*((_QWORD *)v601 + 214) + 8 * v723++) = 0;
                                                while (v716 != v723);
                                                v724 = (_QWORD *)*((_QWORD *)v601 + 216);
                                                if (!v724)
                                                  goto LABEL_1347;
                                                v725 = (uint64_t)v601 + 1728;
                                                v726 = v724[1];
                                                v727 = v716 - 1;
                                                if ((v716 & (v716 - 1)) == 0)
                                                {
                                                  v728 = v726 & v727;
                                                  *(_QWORD *)(*((_QWORD *)v601 + 214) + 8 * v728) = v725;
                                                  while (1)
                                                  {
                                                    v729 = (_QWORD *)*v724;
                                                    if (!*v724)
                                                      break;
                                                    v730 = v729[1] & v727;
                                                    if (v730 == v728)
                                                    {
                                                      v724 = (_QWORD *)*v724;
                                                    }
                                                    else
                                                    {
                                                      v731 = *((_QWORD *)v601 + 214);
                                                      if (*(_QWORD *)(v731 + 8 * v730))
                                                      {
                                                        *v724 = *v729;
                                                        v732 = 8 * v730;
                                                        *v729 = **(_QWORD **)(*((_QWORD *)v601 + 214) + v732);
                                                        **(_QWORD **)(*((_QWORD *)v601 + 214) + v732) = v729;
                                                      }
                                                      else
                                                      {
                                                        *(_QWORD *)(v731 + 8 * v730) = v724;
                                                        v724 = v729;
                                                        v728 = v730;
                                                      }
                                                    }
                                                  }
LABEL_1347:
                                                  v704 = *((_QWORD *)v601 + 215);
                                                  if ((v704 & (v704 - 1)) != 0)
                                                  {
                                                    if (v605 >= v704)
                                                      v635 = v605 % v704;
                                                    else
                                                      v635 = v605;
                                                  }
                                                  else
                                                  {
                                                    v635 = (v704 - 1) & v605;
                                                  }
LABEL_1352:
                                                  v738 = *((_QWORD *)v601 + 214);
                                                  v739 = *(_QWORD **)(v738 + 8 * v635);
                                                  if (v739)
                                                  {
                                                    *v707 = *v739;
                                                  }
                                                  else
                                                  {
                                                    *v707 = *((_QWORD *)v601 + 216);
                                                    *((_QWORD *)v601 + 216) = v707;
                                                    *(_QWORD *)(v738 + 8 * v635) = (char *)v601 + 1728;
                                                    if (!*v707)
                                                    {
LABEL_1361:
                                                      ++*((_QWORD *)v601 + 217);
LABEL_1362:
                                                      v707[3] = v602;
                                                      v741 = *v21;
                                                      *(_QWORD *)v1368 = &off_1E427ED30;
                                                      *(_QWORD *)&v1368[8] = v605;
                                                      *(_QWORD *)&v1368[16] = v1353;
                                                      *(_QWORD *)&v1368[24] = v1368;
                                                      *(_QWORD *)&v1370[24] = v1370;
                                                      *(_QWORD *)v1370 = &off_1E427ED30;
                                                      *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                      *(_DWORD *)&v1370[32] = 0;
                                                      ecs2::Runtime::queueCommand(v741, (uint64_t)v1370);
                                                      v29 = v1349;
                                                      if (*(_DWORD *)&v1370[32] != -1)
                                                        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                      *(_DWORD *)&v1370[32] = -1;
                                                      v742 = *(_QWORD **)&v1368[24];
                                                      if (*(_BYTE **)&v1368[24] == v1368)
                                                      {
                                                        v742 = v1368;
                                                        v743 = 4;
                                                      }
                                                      else
                                                      {
                                                        if (!*(_QWORD *)&v1368[24])
                                                          goto LABEL_1369;
                                                        v743 = 5;
                                                      }
                                                      (*(void (**)(void))(*v742 + 8 * v743))();
LABEL_1369:
                                                      v744 = *(_QWORD *)(*v1349 + 8 * v712);
                                                      if (!*(_BYTE *)(v744 + 64))
                                                        goto LABEL_1377;
                                                      v1375 = *(_OWORD *)(v744 + 48);
                                                      v745 = *v21;
                                                      v746 = (char *)operator new(0x28uLL);
                                                      *(_QWORD *)v746 = &off_1E427E040;
                                                      *(_OWORD *)(v746 + 8) = v1375;
                                                      v746[24] = 1;
                                                      *((_QWORD *)v746 + 4) = v1353;
                                                      *(_QWORD *)&v1370[24] = v746;
                                                      *(_QWORD *)&v1368[24] = 0;
                                                      *(_DWORD *)&v1370[32] = 0;
                                                      ecs2::Runtime::queueCommand(v745, (uint64_t)v1370);
                                                      if (*(_DWORD *)&v1370[32] != -1)
                                                        ((void (*)(unint64_t *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1372, v1370);
                                                      *(_DWORD *)&v1370[32] = -1;
                                                      v747 = *(_QWORD **)&v1368[24];
                                                      if (*(_BYTE **)&v1368[24] == v1368)
                                                      {
                                                        v747 = v1368;
                                                        v748 = 4;
                                                      }
                                                      else
                                                      {
                                                        if (!*(_QWORD *)&v1368[24])
                                                          goto LABEL_1377;
                                                        v748 = 5;
                                                      }
                                                      (*(void (**)(void))(*v747 + 8 * v748))();
LABEL_1377:
                                                      v749 = *v21;
                                                      *(_QWORD *)v1368 = &off_1E427D7D0;
                                                      *(_QWORD *)&v1368[8] = v1355 | v1316;
                                                      *(_DWORD *)&v1368[16] = v1359;
                                                      *(_QWORD *)&v1368[24] = v1368;
                                                      *(_QWORD *)&v1370[24] = v1370;
                                                      *(_QWORD *)v1370 = &off_1E427D7D0;
                                                      *(_QWORD *)&v1370[8] = v1355 | v1316;
                                                      *(_DWORD *)&v1370[16] = v1359;
                                                      *(_DWORD *)&v1370[32] = 0;
                                                      ecs2::Runtime::queueCommand(v749, (uint64_t)v1370);
                                                      if (*(_DWORD *)&v1370[32] != -1)
                                                        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                      *(_DWORD *)&v1370[32] = -1;
                                                      v750 = *(_QWORD **)&v1368[24];
                                                      if (*(_BYTE **)&v1368[24] == v1368)
                                                      {
                                                        v750 = v1368;
                                                        v751 = 4;
                                                      }
                                                      else
                                                      {
                                                        if (!*(_QWORD *)&v1368[24])
                                                          goto LABEL_1384;
                                                        v751 = 5;
                                                      }
                                                      (*(void (**)(void))(*v750 + 8 * v751))();
LABEL_1384:
                                                      if (v1317)
                                                        goto LABEL_1392;
                                                      v752 = *v21;
                                                      *(_QWORD *)v1368 = &off_1E427D980;
                                                      *(_QWORD *)&v1368[8] = v1355 | v1309;
                                                      *(_DWORD *)&v1368[16] = v1359;
                                                      *(_QWORD *)&v1368[24] = v1368;
                                                      *(_QWORD *)&v1370[24] = v1370;
                                                      *(_QWORD *)v1370 = &off_1E427D980;
                                                      *(_QWORD *)&v1370[8] = v1355 | v1309;
                                                      *(_DWORD *)&v1370[16] = v1359;
                                                      *(_DWORD *)&v1370[32] = 0;
                                                      ecs2::Runtime::queueCommand(v752, (uint64_t)v1370);
                                                      if (*(_DWORD *)&v1370[32] != -1)
                                                        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                      *(_DWORD *)&v1370[32] = -1;
                                                      v753 = *(_QWORD **)&v1368[24];
                                                      if (*(_BYTE **)&v1368[24] == v1368)
                                                      {
                                                        v753 = v1368;
                                                        v754 = 4;
                                                      }
                                                      else
                                                      {
                                                        if (!*(_QWORD *)&v1368[24])
                                                          goto LABEL_1392;
                                                        v754 = 5;
                                                      }
                                                      (*(void (**)(void))(*v753 + 8 * v754))();
LABEL_1392:
                                                      v755 = *(_QWORD *)(*v1349 + 8 * v712);
                                                      if (*(_BYTE *)(v755 + 200))
                                                      {
                                                        v756 = *(unsigned int *)(v755 + 196);
                                                        v757 = *v21;
                                                      }
                                                      else
                                                      {
                                                        v757 = *v21;
                                                        v756 = 3212836864;
                                                      }
                                                      *(_QWORD *)v1368 = &off_1E42818C8;
                                                      *(_QWORD *)&v1368[8] = v1355 | v756;
                                                      *(_DWORD *)&v1368[16] = v1359;
                                                      *(_QWORD *)&v1368[24] = v1368;
                                                      *(_QWORD *)&v1370[24] = v1370;
                                                      *(_QWORD *)v1370 = &off_1E42818C8;
                                                      *(_QWORD *)&v1370[8] = v1355 | v756;
                                                      *(_DWORD *)&v1370[16] = v1359;
                                                      *(_DWORD *)&v1370[32] = 0;
                                                      ecs2::Runtime::queueCommand(v757, (uint64_t)v1370);
                                                      if (*(_DWORD *)&v1370[32] != -1)
                                                        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                      *(_DWORD *)&v1370[32] = -1;
                                                      v758 = *(_QWORD **)&v1368[24];
                                                      if (*(_BYTE **)&v1368[24] == v1368)
                                                      {
                                                        v758 = v1368;
                                                        v759 = 4;
                                                      }
                                                      else
                                                      {
                                                        if (!*(_QWORD *)&v1368[24])
                                                          goto LABEL_1402;
                                                        v759 = 5;
                                                      }
                                                      (*(void (**)(void))(*v758 + 8 * v759))();
LABEL_1402:
                                                      v760 = **(_QWORD **)(*(_QWORD *)(*v1349 + 8 * v712) + 216);
                                                      v763 = *(_QWORD **)(v760 + 120);
                                                      v762 = (_QWORD *)(v760 + 120);
                                                      v761 = v763;
                                                      if (!v763)
                                                        goto LABEL_1490;
                                                      v764 = **v20;
                                                      v765 = *v21;
                                                      v766 = v762;
                                                      v767 = v761;
                                                      do
                                                      {
                                                        v768 = v767[4];
                                                        v769 = v768 == 0;
                                                        if (v768)
                                                          v770 = v767;
                                                        else
                                                          v770 = v767 + 1;
                                                        if (!v769)
                                                          v766 = v767;
                                                        v767 = (_QWORD *)*v770;
                                                      }
                                                      while (*v770);
                                                      if (v766 == v762 || v766[4] > 1uLL)
                                                      {
                                                        if (!v761)
                                                          goto LABEL_1490;
                                                        goto LABEL_1435;
                                                      }
                                                      while (1)
                                                      {
                                                        while (1)
                                                        {
                                                          v771 = v761[4];
                                                          if (v771 < 2)
                                                            break;
                                                          v761 = (_QWORD *)*v761;
                                                          if (!v761)
                                                            goto LABEL_2404;
                                                        }
                                                        if (v771)
                                                          break;
                                                        v761 = (_QWORD *)v761[1];
                                                        if (!v761)
LABEL_2404:
                                                          abort();
                                                      }
                                                      v772 = (ggl::DeviceData *)v761[5];
                                                      v773 = (std::__shared_weak_count *)v761[6];
                                                      *(_QWORD *)&v1375 = v772;
                                                      *((_QWORD *)&v1375 + 1) = v773;
                                                      if (v773)
                                                      {
                                                        v774 = (unint64_t *)&v773->__shared_owners_;
                                                        do
                                                          v775 = __ldxr(v774);
                                                        while (__stxr(v775 + 1, v774));
                                                      }
                                                      DeviceDataHandle = md::VKMRenderResourcesStore::createDeviceDataHandle(v764, v772);
                                                      *(_QWORD *)v1368 = &off_1E427DD70;
                                                      *(_QWORD *)&v1368[8] = DeviceDataHandle;
                                                      *(_QWORD *)&v1368[16] = v1353;
                                                      *(_QWORD *)&v1368[24] = v1368;
                                                      *(_QWORD *)&v1370[24] = v1370;
                                                      *(_QWORD *)v1370 = &off_1E427DD70;
                                                      *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                      *(_DWORD *)&v1370[32] = 0;
                                                      ecs2::Runtime::queueCommand(v765, (uint64_t)v1370);
                                                      if (*(_DWORD *)&v1370[32] != -1)
                                                        ((void (*)(unint64_t *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1372, v1370);
                                                      *(_DWORD *)&v1370[32] = -1;
                                                      v777 = *(_QWORD **)&v1368[24];
                                                      if (*(_BYTE **)&v1368[24] == v1368)
                                                      {
                                                        v777 = v1368;
                                                        v778 = 4;
                                                      }
                                                      else
                                                      {
                                                        if (!*(_QWORD *)&v1368[24])
                                                        {
LABEL_1429:
                                                          if (v773)
                                                          {
                                                            v779 = (unint64_t *)&v773->__shared_owners_;
                                                            do
                                                              v780 = __ldaxr(v779);
                                                            while (__stlxr(v780 - 1, v779));
                                                            if (!v780)
                                                            {
                                                              ((void (*)(std::__shared_weak_count *))v773->__on_zero_shared)(v773);
                                                              std::__shared_weak_count::__release_weak(v773);
                                                            }
                                                          }
                                                          v761 = (_QWORD *)*v762;
                                                          if (!*v762)
                                                            goto LABEL_1490;
LABEL_1435:
                                                          v781 = v762;
                                                          v782 = v761;
                                                          do
                                                          {
                                                            v783 = v782[4];
                                                            v784 = v783 >= 2;
                                                            if (v783 >= 2)
                                                              v785 = v782;
                                                            else
                                                              v785 = v782 + 1;
                                                            if (v784)
                                                              v781 = v782;
                                                            v782 = (_QWORD *)*v785;
                                                          }
                                                          while (*v785);
                                                          if (v781 == v762 || v781[4] > 2uLL)
                                                          {
                                                            if (!v761)
                                                              goto LABEL_1490;
LABEL_1468:
                                                            v796 = v761;
                                                            do
                                                            {
                                                              v797 = v796;
                                                              v796 = (_QWORD *)*v796;
                                                            }
                                                            while (v796);
                                                            if (v797 == v762 || v797[4])
                                                              goto LABEL_1490;
                                                            while (v761[4])
                                                            {
                                                              v761 = (_QWORD *)*v761;
                                                              if (!v761)
                                                                goto LABEL_2404;
                                                            }
                                                            v798 = (ggl::DeviceData *)v761[5];
                                                            v799 = (std::__shared_weak_count *)v761[6];
                                                            *(_QWORD *)&v1375 = v798;
                                                            *((_QWORD *)&v1375 + 1) = v799;
                                                            if (v799)
                                                            {
                                                              v800 = (unint64_t *)&v799->__shared_owners_;
                                                              do
                                                                v801 = __ldxr(v800);
                                                              while (__stxr(v801 + 1, v800));
                                                            }
                                                            v802 = md::VKMRenderResourcesStore::createDeviceDataHandle(v764, v798);
                                                            *(_QWORD *)v1368 = &off_1E4281F40;
                                                            *(_QWORD *)&v1368[8] = v802;
                                                            *(_QWORD *)&v1368[16] = v1353;
                                                            *(_QWORD *)&v1368[24] = v1368;
                                                            *(_QWORD *)&v1370[24] = v1370;
                                                            *(_QWORD *)v1370 = &off_1E4281F40;
                                                            *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                            *(_DWORD *)&v1370[32] = 0;
                                                            ecs2::Runtime::queueCommand(v765, (uint64_t)v1370);
                                                            if (*(_DWORD *)&v1370[32] != -1)
                                                              ((void (*)(unint64_t *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1372, v1370);
                                                            *(_DWORD *)&v1370[32] = -1;
                                                            v803 = *(_QWORD **)&v1368[24];
                                                            if (*(_BYTE **)&v1368[24] == v1368)
                                                            {
                                                              v803 = v1368;
                                                              v804 = 4;
                                                            }
                                                            else
                                                            {
                                                              if (!*(_QWORD *)&v1368[24])
                                                              {
LABEL_1485:
                                                                if (v799)
                                                                {
                                                                  v805 = (unint64_t *)&v799->__shared_owners_;
                                                                  do
                                                                    v806 = __ldaxr(v805);
                                                                  while (__stlxr(v806 - 1, v805));
                                                                  if (!v806)
                                                                  {
                                                                    ((void (*)(std::__shared_weak_count *))v799->__on_zero_shared)(v799);
                                                                    std::__shared_weak_count::__release_weak(v799);
                                                                  }
                                                                }
                                                                goto LABEL_1490;
                                                              }
                                                              v804 = 5;
                                                            }
                                                            (*(void (**)(void))(*v803 + 8 * v804))();
                                                            goto LABEL_1485;
                                                          }
                                                          while (1)
                                                          {
                                                            while (1)
                                                            {
                                                              v786 = v761[4];
                                                              if (v786 < 3)
                                                                break;
                                                              v761 = (_QWORD *)*v761;
                                                              if (!v761)
                                                                goto LABEL_2404;
                                                            }
                                                            if (v786 == 2)
                                                              break;
                                                            v761 = (_QWORD *)v761[1];
                                                            if (!v761)
                                                              goto LABEL_2404;
                                                          }
                                                          v787 = (ggl::DeviceData *)v761[5];
                                                          v788 = (std::__shared_weak_count *)v761[6];
                                                          *(_QWORD *)&v1375 = v787;
                                                          *((_QWORD *)&v1375 + 1) = v788;
                                                          if (v788)
                                                          {
                                                            v789 = (unint64_t *)&v788->__shared_owners_;
                                                            do
                                                              v790 = __ldxr(v789);
                                                            while (__stxr(v790 + 1, v789));
                                                          }
                                                          v791 = md::VKMRenderResourcesStore::createDeviceDataHandle(v764, v787);
                                                          *(_QWORD *)v1368 = &off_1E427E118;
                                                          *(_QWORD *)&v1368[8] = v791;
                                                          *(_QWORD *)&v1368[16] = v1353;
                                                          *(_QWORD *)&v1368[24] = v1368;
                                                          *(_QWORD *)&v1370[24] = v1370;
                                                          *(_QWORD *)v1370 = &off_1E427E118;
                                                          *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                          *(_DWORD *)&v1370[32] = 0;
                                                          ecs2::Runtime::queueCommand(v765, (uint64_t)v1370);
                                                          if (*(_DWORD *)&v1370[32] != -1)
                                                            ((void (*)(unint64_t *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1372, v1370);
                                                          *(_DWORD *)&v1370[32] = -1;
                                                          v792 = *(_QWORD **)&v1368[24];
                                                          if (*(_BYTE **)&v1368[24] == v1368)
                                                          {
                                                            v792 = v1368;
                                                            v793 = 4;
                                                          }
                                                          else
                                                          {
                                                            if (!*(_QWORD *)&v1368[24])
                                                            {
LABEL_1462:
                                                              if (v788)
                                                              {
                                                                v794 = (unint64_t *)&v788->__shared_owners_;
                                                                do
                                                                  v795 = __ldaxr(v794);
                                                                while (__stlxr(v795 - 1, v794));
                                                                if (!v795)
                                                                {
                                                                  ((void (*)(std::__shared_weak_count *))v788->__on_zero_shared)(v788);
                                                                  std::__shared_weak_count::__release_weak(v788);
                                                                }
                                                              }
                                                              v761 = (_QWORD *)*v762;
                                                              if (*v762)
                                                                goto LABEL_1468;
LABEL_1490:
                                                              v807 = *v21;
                                                              *(_QWORD *)v1368 = &off_1E4281EB0;
                                                              *(_QWORD *)&v1368[8] = v1355 | v1338;
                                                              *(_DWORD *)&v1368[16] = v1359;
                                                              *(_QWORD *)&v1368[24] = v1368;
                                                              *(_QWORD *)&v1370[24] = v1370;
                                                              *(_QWORD *)v1370 = &off_1E4281EB0;
                                                              *(_QWORD *)&v1370[8] = v1355 | v1338;
                                                              *(_DWORD *)&v1370[16] = v1359;
                                                              *(_DWORD *)&v1370[32] = 0;
                                                              ecs2::Runtime::queueCommand(v807, (uint64_t)v1370);
                                                              if (*(_DWORD *)&v1370[32] != -1)
                                                                ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                              *(_DWORD *)&v1370[32] = -1;
                                                              v808 = *(_QWORD **)&v1368[24];
                                                              if (*(_BYTE **)&v1368[24] == v1368)
                                                              {
                                                                v808 = v1368;
                                                                v809 = 4;
                                                              }
                                                              else
                                                              {
                                                                if (!*(_QWORD *)&v1368[24])
                                                                  goto LABEL_1497;
                                                                v809 = 5;
                                                              }
                                                              (*(void (**)(void))(*v808 + 8 * v809))();
LABEL_1497:
                                                              if (!*(_BYTE *)(*(_QWORD *)(*v1349 + 8 * v712) + 147))
                                                                goto LABEL_1505;
                                                              v810 = *v21;
                                                              *(_QWORD *)v1368 = &off_1E427DF68;
                                                              *(_QWORD *)&v1368[8] = v1355;
                                                              *(_DWORD *)&v1368[16] = v1359;
                                                              *(_QWORD *)&v1368[24] = v1368;
                                                              *(_QWORD *)&v1370[24] = v1370;
                                                              *(_QWORD *)v1370 = &off_1E427DF68;
                                                              *(_QWORD *)&v1370[8] = v1355;
                                                              *(_DWORD *)&v1370[16] = v1359;
                                                              *(_DWORD *)&v1370[32] = 0;
                                                              ecs2::Runtime::queueCommand(v810, (uint64_t)v1370);
                                                              if (*(_DWORD *)&v1370[32] != -1)
                                                                ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                              *(_DWORD *)&v1370[32] = -1;
                                                              v811 = *(_QWORD **)&v1368[24];
                                                              if (*(_BYTE **)&v1368[24] == v1368)
                                                              {
                                                                v811 = v1368;
                                                                v812 = 4;
                                                              }
                                                              else
                                                              {
                                                                if (!*(_QWORD *)&v1368[24])
                                                                  goto LABEL_1505;
                                                                v812 = 5;
                                                              }
                                                              (*(void (**)(void))(*v811 + 8 * v812))();
LABEL_1505:
                                                              if ((_DWORD)v1338 != 255)
                                                              {
                                                                v813 = *(_QWORD *)(*v1349 + 8 * v712);
                                                                v1375 = *(_OWORD *)(v813 + 76);
                                                                v1376 = *(_QWORD *)(v813 + 92);
                                                                v814 = *v21;
                                                                v815 = (char *)operator new(0x28uLL);
                                                                v816 = &off_1E4282060;
                                                                goto LABEL_1538;
                                                              }
                                                              v817 = *v1349;
                                                              if (!*(_BYTE *)v20[5])
                                                              {
LABEL_1523:
                                                                v826 = *(_QWORD *)(v817 + 8 * v712);
                                                                v1375 = *(_OWORD *)(v826 + 76);
                                                                v1376 = *(_QWORD *)(v826 + 92);
                                                                v827 = *v21;
                                                                v828 = (char *)operator new(0x28uLL);
                                                                *(_QWORD *)v828 = &off_1E4282060;
                                                                *(_OWORD *)(v828 + 8) = v1375;
                                                                *((_QWORD *)v828 + 3) = v1376;
                                                                *((_QWORD *)v828 + 4) = v1353;
                                                                *(_QWORD *)&v1370[24] = v828;
                                                                *(_QWORD *)&v1368[24] = 0;
                                                                *(_DWORD *)&v1370[32] = 0;
                                                                ecs2::Runtime::queueCommand(v827, (uint64_t)v1370);
                                                                if (*(_DWORD *)&v1370[32] != -1)
                                                                  ((void (*)(unint64_t *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1372, v1370);
                                                                *(_DWORD *)&v1370[32] = -1;
                                                                v829 = *(_QWORD **)&v1368[24];
                                                                if (*(_BYTE **)&v1368[24] == v1368)
                                                                {
                                                                  v829 = v1368;
                                                                  v830 = 4;
                                                                }
                                                                else
                                                                {
                                                                  if (!*(_QWORD *)&v1368[24])
                                                                    goto LABEL_1530;
                                                                  v830 = 5;
                                                                }
                                                                (*(void (**)(void))(*v829 + 8 * v830))();
LABEL_1530:
                                                                v831 = *v21;
                                                                *(_QWORD *)v1368 = &off_1E427D5D8;
                                                                *(_QWORD *)&v1368[8] = v1355;
                                                                *(_DWORD *)&v1368[16] = v1359;
                                                                *(_QWORD *)&v1368[24] = v1368;
                                                                *(_QWORD *)&v1370[24] = v1370;
                                                                *(_QWORD *)v1370 = &off_1E427D5D8;
                                                                *(_QWORD *)&v1370[8] = v1355;
                                                                *(_DWORD *)&v1370[16] = v1359;
                                                                *(_DWORD *)&v1370[32] = 0;
                                                                ecs2::Runtime::queueCommand(v831, (uint64_t)v1370);
                                                                if (*(_DWORD *)&v1370[32] != -1)
                                                                  ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                *(_DWORD *)&v1370[32] = -1;
                                                                v832 = *(_QWORD **)&v1368[24];
                                                                if (*(_BYTE **)&v1368[24] == v1368)
                                                                {
                                                                  v832 = v1368;
                                                                  v833 = 4;
                                                                }
                                                                else
                                                                {
                                                                  if (!*(_QWORD *)&v1368[24])
                                                                  {
LABEL_1537:
                                                                    v834 = *(_QWORD *)(*v1349 + 8 * v712);
                                                                    v1375 = *(_OWORD *)(v834 + 76);
                                                                    v1376 = *(_QWORD *)(v834 + 92);
                                                                    v814 = *v21;
                                                                    v815 = (char *)operator new(0x28uLL);
                                                                    v816 = &off_1E427F048;
LABEL_1538:
                                                                    *(_QWORD *)v815 = v816;
                                                                    *(_OWORD *)(v815 + 8) = v1375;
                                                                    *((_QWORD *)v815 + 3) = v1376;
                                                                    *((_QWORD *)v815 + 4) = v1353;
                                                                    *(_QWORD *)&v1370[24] = v815;
                                                                    *(_QWORD *)&v1368[24] = 0;
                                                                    *(_DWORD *)&v1370[32] = 0;
                                                                    ecs2::Runtime::queueCommand(v814, (uint64_t)v1370);
                                                                    if (*(_DWORD *)&v1370[32] != -1)
                                                                      ((void (*)(unint64_t *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1372, v1370);
                                                                    *(_DWORD *)&v1370[32] = -1;
                                                                    v835 = *(_QWORD **)&v1368[24];
                                                                    if (*(_BYTE **)&v1368[24] == v1368)
                                                                    {
                                                                      v835 = v1368;
                                                                      v836 = 4;
                                                                    }
                                                                    else
                                                                    {
                                                                      if (!*(_QWORD *)&v1368[24])
                                                                        goto LABEL_1545;
                                                                      v836 = 5;
                                                                    }
                                                                    (*(void (**)(void))(*v835 + 8 * v836))();
LABEL_1545:
                                                                    v837 = *(_QWORD *)(*(_QWORD *)(*v1349 + 8 * v712)
                                                                                     + 32);
                                                                    v838 = *(ggl::DeviceData **)v837;
                                                                    v839 = *(std::__shared_weak_count **)(v837 + 8);
                                                                    v1360 = (uint64_t *)v838;
                                                                    v1361 = v839;
                                                                    if (v839)
                                                                    {
                                                                      v840 = (unint64_t *)&v839->__shared_owners_;
                                                                      do
                                                                        v841 = __ldxr(v840);
                                                                      while (__stxr(v841 + 1, v840));
                                                                    }
                                                                    v842 = md::VKMRenderResourcesStore::createDeviceDataHandle(**v20, v838);
                                                                    v843 = *v21;
                                                                    *(_QWORD *)v1368 = &off_1E427FAB0;
                                                                    *(_QWORD *)&v1368[8] = v842;
                                                                    *(_QWORD *)&v1368[16] = v1353;
                                                                    *(_QWORD *)&v1368[24] = v1368;
                                                                    *(_QWORD *)&v1370[24] = v1370;
                                                                    *(_QWORD *)v1370 = &off_1E427FAB0;
                                                                    *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                    *(_DWORD *)&v1370[32] = 0;
                                                                    ecs2::Runtime::queueCommand(v843, (uint64_t)v1370);
                                                                    if (*(_DWORD *)&v1370[32] != -1)
                                                                      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                    *(_DWORD *)&v1370[32] = -1;
                                                                    v844 = *(_QWORD **)&v1368[24];
                                                                    if (*(_BYTE **)&v1368[24] == v1368)
                                                                    {
                                                                      v844 = v1368;
                                                                      v845 = 4;
                                                                    }
                                                                    else
                                                                    {
                                                                      if (!*(_QWORD *)&v1368[24])
                                                                        goto LABEL_1555;
                                                                      v845 = 5;
                                                                    }
                                                                    (*(void (**)(void))(*v844 + 8 * v845))();
LABEL_1555:
                                                                    v846 = *v21;
                                                                    *(_QWORD *)v1368 = &off_1E427EB80;
                                                                    *(_QWORD *)&v1368[8] = v1355;
                                                                    *(_DWORD *)&v1368[16] = v1359;
                                                                    *(_QWORD *)&v1368[24] = v1368;
                                                                    *(_QWORD *)&v1370[24] = v1370;
                                                                    *(_QWORD *)v1370 = &off_1E427EB80;
                                                                    *(_QWORD *)&v1370[8] = v1355;
                                                                    *(_DWORD *)&v1370[16] = v1359;
                                                                    *(_DWORD *)&v1370[32] = 0;
                                                                    ecs2::Runtime::queueCommand(v846, (uint64_t)v1370);
                                                                    if (*(_DWORD *)&v1370[32] != -1)
                                                                      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                    *(_DWORD *)&v1370[32] = -1;
                                                                    v847 = *(_QWORD **)&v1368[24];
                                                                    if (*(_BYTE **)&v1368[24] == v1368)
                                                                    {
                                                                      v847 = v1368;
                                                                      v848 = 4;
                                                                    }
                                                                    else
                                                                    {
                                                                      if (!*(_QWORD *)&v1368[24])
                                                                        goto LABEL_1562;
                                                                      v848 = 5;
                                                                    }
                                                                    (*(void (**)(void))(*v847 + 8 * v848))();
LABEL_1562:
                                                                    if (!a16)
                                                                      goto LABEL_1570;
                                                                    v849 = *a16;
                                                                    v850 = *v21;
                                                                    *(_QWORD *)v1368 = &off_1E42803F8;
                                                                    *(_QWORD *)&v1368[8] = v849;
                                                                    *(_QWORD *)&v1368[16] = v1353;
                                                                    *(_QWORD *)&v1368[24] = v1368;
                                                                    *(_QWORD *)&v1370[24] = v1370;
                                                                    *(_QWORD *)v1370 = &off_1E42803F8;
                                                                    *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                    *(_DWORD *)&v1370[32] = 0;
                                                                    ecs2::Runtime::queueCommand(v850, (uint64_t)v1370);
                                                                    if (*(_DWORD *)&v1370[32] != -1)
                                                                      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                    *(_DWORD *)&v1370[32] = -1;
                                                                    v851 = *(_QWORD **)&v1368[24];
                                                                    if (*(_BYTE **)&v1368[24] == v1368)
                                                                    {
                                                                      v851 = v1368;
                                                                      v852 = 4;
                                                                    }
                                                                    else
                                                                    {
                                                                      if (!*(_QWORD *)&v1368[24])
                                                                        goto LABEL_1570;
                                                                      v852 = 5;
                                                                    }
                                                                    (*(void (**)(void))(*v851 + 8 * v852))();
LABEL_1570:
                                                                    v853 = *v1349;
                                                                    v854 = *(_QWORD *)(*v1349 + 8 * v712);
                                                                    if (!*(_BYTE *)(v854 + 176))
                                                                      goto LABEL_1582;
                                                                    v855 = *(_QWORD *)(v854 + 152);
                                                                    if (!v855)
                                                                      goto LABEL_1582;
                                                                    v856 = *(_QWORD *)(v854 + 160);
                                                                    *(_QWORD *)v1370 = v855;
                                                                    *(_QWORD *)&v1370[8] = v856;
                                                                    if (v856)
                                                                    {
                                                                      v857 = (unint64_t *)(v856 + 8);
                                                                      do
                                                                        v858 = __ldxr(v857);
                                                                      while (__stxr(v858 + 1, v857));
                                                                      v853 = *v1349;
                                                                    }
                                                                    v859 = *(_QWORD *)(v853 + 8 * v712);
                                                                    if (*(_BYTE *)(v859 + 193))
                                                                    {
                                                                      v1370[16] = *(_BYTE *)(v859 + 192);
                                                                      v1370[17] = 1;
                                                                      ecs2::addComponent<md::ls::CustomRenderState>(*v21, v1353, (uint64_t *)v1370);
                                                                      v860 = *(std::__shared_weak_count **)&v1370[8];
                                                                      if (*(_QWORD *)&v1370[8])
                                                                      {
                                                                        v861 = (unint64_t *)(*(_QWORD *)&v1370[8]
                                                                                                  + 8);
                                                                        do
                                                                          v862 = __ldaxr(v861);
                                                                        while (__stlxr(v862 - 1, v861));
                                                                        if (!v862)
                                                                        {
                                                                          ((void (*)(std::__shared_weak_count *))v860->__on_zero_shared)(v860);
                                                                          std::__shared_weak_count::__release_weak(v860);
                                                                        }
                                                                      }
LABEL_1582:
                                                                      if (v1332 != 1)
                                                                      {
                                                                        if (v1332 == 2)
                                                                        {
                                                                          v863 = *v21;
                                                                          *(_QWORD *)v1368 = &off_1E4281E20;
                                                                          *(_QWORD *)&v1368[8] = v1355;
                                                                          *(_DWORD *)&v1368[16] = v1359;
                                                                          *(_QWORD *)&v1368[24] = v1368;
                                                                          *(_QWORD *)&v1370[24] = v1370;
                                                                          *(_QWORD *)v1370 = &off_1E4281E20;
                                                                          *(_QWORD *)&v1370[8] = v1355;
                                                                          *(_DWORD *)&v1370[16] = v1359;
                                                                          *(_DWORD *)&v1370[32] = 0;
                                                                          ecs2::Runtime::queueCommand(v863, (uint64_t)v1370);
                                                                          if (*(_DWORD *)&v1370[32] != -1)
                                                                            ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                          *(_DWORD *)&v1370[32] = -1;
                                                                          v864 = *(_QWORD **)&v1368[24];
                                                                          if (*(_BYTE **)&v1368[24] == v1368)
                                                                          {
                                                                            v864 = v1368;
                                                                            v865 = 4;
                                                                            goto LABEL_1596;
                                                                          }
                                                                          if (*(_QWORD *)&v1368[24])
                                                                          {
                                                                            v865 = 5;
LABEL_1596:
                                                                            (*(void (**)(void))(*v864 + 8 * v865))();
                                                                            v866 = 0;
                                                                            goto LABEL_2142;
                                                                          }
                                                                        }
                                                                        v866 = 0;
                                                                        goto LABEL_2142;
                                                                      }
                                                                      v867 = *(_QWORD *)(*v1349 + 8 * v712);
                                                                      v868 = *v21;
                                                                      v869 = v1355 | *(unsigned __int8 *)(v867 + 376);
                                                                      *(_QWORD *)v1368 = &off_1E427D620;
                                                                      *(_QWORD *)&v1368[8] = v869;
                                                                      *(_DWORD *)&v1368[16] = v1359;
                                                                      *(_QWORD *)&v1368[24] = v1368;
                                                                      *(_QWORD *)&v1370[24] = v1370;
                                                                      *(_QWORD *)v1370 = &off_1E427D620;
                                                                      *(_QWORD *)&v1370[8] = v869;
                                                                      *(_DWORD *)&v1370[16] = v1359;
                                                                      *(_DWORD *)&v1370[32] = 0;
                                                                      ecs2::Runtime::queueCommand(v868, (uint64_t)v1370);
                                                                      if (*(_DWORD *)&v1370[32] != -1)
                                                                        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                      *(_DWORD *)&v1370[32] = -1;
                                                                      v870 = *(_QWORD **)&v1368[24];
                                                                      if (*(_BYTE **)&v1368[24] == v1368)
                                                                      {
                                                                        v870 = v1368;
                                                                        v871 = 4;
                                                                      }
                                                                      else
                                                                      {
                                                                        if (!*(_QWORD *)&v1368[24])
                                                                          goto LABEL_1599;
                                                                        v871 = 5;
                                                                      }
                                                                      (*(void (**)(void))(*v870 + 8 * v871))();
LABEL_1599:
                                                                      v872 = *v21;
                                                                      *(_QWORD *)v1368 = &off_1E427DAE8;
                                                                      *(_QWORD *)&v1368[8] = v1355;
                                                                      *(_DWORD *)&v1368[16] = v1359;
                                                                      *(_QWORD *)&v1368[24] = v1368;
                                                                      *(_QWORD *)&v1370[24] = v1370;
                                                                      *(_QWORD *)v1370 = &off_1E427DAE8;
                                                                      *(_QWORD *)&v1370[8] = v1355;
                                                                      *(_DWORD *)&v1370[16] = v1359;
                                                                      *(_DWORD *)&v1370[32] = 0;
                                                                      ecs2::Runtime::queueCommand(v872, (uint64_t)v1370);
                                                                      if (*(_DWORD *)&v1370[32] != -1)
                                                                        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                      *(_DWORD *)&v1370[32] = -1;
                                                                      v874 = *(_QWORD **)&v1368[24];
                                                                      if (*(_BYTE **)&v1368[24] == v1368)
                                                                      {
                                                                        v874 = v1368;
                                                                        v875 = 4;
                                                                      }
                                                                      else
                                                                      {
                                                                        if (!*(_QWORD *)&v1368[24])
                                                                        {
LABEL_1606:
                                                                          if (!a5)
                                                                            goto LABEL_1645;
                                                                          if (!*((_BYTE *)v20[7] + 4))
                                                                            goto LABEL_1645;
                                                                          v876 = *(unsigned __int8 *)(v867 + 377);
                                                                          if (!*(_BYTE *)(v867 + 377))
                                                                            goto LABEL_1645;
                                                                          v877 = (*a5)[6];
                                                                          if (!*(_QWORD *)&v877)
                                                                            goto LABEL_1645;
                                                                          v878 = (uint8x8_t)vcnt_s8(v877);
                                                                          v878.i16[0] = vaddlv_u8(v878);
                                                                          if (v878.u32[0] > 1uLL)
                                                                          {
                                                                            v879 = *(unsigned __int8 *)(v867 + 377);
                                                                            if (*(_QWORD *)&v877 <= v876)
                                                                              v879 = v876 % *(_QWORD *)&v877;
                                                                          }
                                                                          else
                                                                          {
                                                                            v879 = (v877.i32[0] - 1) & v876;
                                                                          }
                                                                          v880 = *(uint64_t ****)(*(_QWORD *)&(*a5)[5]
                                                                                               + 8 * v879);
                                                                          if (!v880)
                                                                            goto LABEL_1645;
                                                                          v881 = *v880;
                                                                          if (!v881)
                                                                            goto LABEL_1645;
                                                                          if (v878.u32[0] < 2uLL)
                                                                          {
                                                                            v882 = *(_QWORD *)&v877 - 1;
                                                                            while (1)
                                                                            {
                                                                              v884 = v881[1];
                                                                              if (v884 == (uint64_t *)v876)
                                                                              {
                                                                                if (*((unsigned __int8 *)v881 + 16) == (_DWORD)v876)
                                                                                  goto LABEL_1630;
                                                                              }
                                                                              else if (((unint64_t)v884 & v882) != v879)
                                                                              {
                                                                                goto LABEL_1645;
                                                                              }
                                                                              v881 = (uint64_t **)*v881;
                                                                              if (!v881)
                                                                                goto LABEL_1645;
                                                                            }
                                                                          }
                                                                          while (1)
                                                                          {
                                                                            v883 = (unint64_t)v881[1];
                                                                            if (v883 == v876)
                                                                            {
                                                                              if (*((unsigned __int8 *)v881 + 16) == (_DWORD)v876)
                                                                              {
LABEL_1630:
                                                                                v885 = v881[3];
                                                                                if (v885)
                                                                                {
                                                                                  v886 = *v21;
                                                                                  *(_QWORD *)v1368 = &off_1E427EA18;
                                                                                  *(_QWORD *)&v1368[8] = v885;
                                                                                  *(_QWORD *)&v1368[16] = v1353;
                                                                                  *(_QWORD *)&v1368[24] = v1368;
                                                                                  *(_QWORD *)&v1370[24] = v1370;
                                                                                  *(_QWORD *)v1370 = &off_1E427EA18;
                                                                                  *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                  *(_DWORD *)&v1370[32] = 0;
                                                                                  ecs2::Runtime::queueCommand(v886, (uint64_t)v1370);
                                                                                  if (*(_DWORD *)&v1370[32] != -1)
                                                                                    ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                  *(_DWORD *)&v1370[32] = -1;
                                                                                  v887 = *(_QWORD **)&v1368[24];
                                                                                  if (*(_BYTE **)&v1368[24] == v1368)
                                                                                  {
                                                                                    v887 = v1368;
                                                                                    v888 = 4;
LABEL_1637:
                                                                                    (*(void (**)(void))(*v887 + 8 * v888))();
                                                                                  }
                                                                                  else if (*(_QWORD *)&v1368[24])
                                                                                  {
                                                                                    v888 = 5;
                                                                                    goto LABEL_1637;
                                                                                  }
                                                                                  v889 = *v21;
                                                                                  v890 = v1355 | *((unsigned __int16 *)v885
                                                                                                 + 60);
                                                                                  *(_QWORD *)v1368 = &off_1E427F900;
                                                                                  *(_QWORD *)&v1368[8] = v890;
                                                                                  *(_DWORD *)&v1368[16] = v1359;
                                                                                  *(_QWORD *)&v1368[24] = v1368;
                                                                                  *(_QWORD *)&v1370[24] = v1370;
                                                                                  *(_QWORD *)v1370 = &off_1E427F900;
                                                                                  *(_QWORD *)&v1370[8] = v890;
                                                                                  *(_DWORD *)&v1370[16] = v1359;
                                                                                  *(_DWORD *)&v1370[32] = 0;
                                                                                  ecs2::Runtime::queueCommand(v889, (uint64_t)v1370);
                                                                                  if (*(_DWORD *)&v1370[32] != -1)
                                                                                    ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                  *(_DWORD *)&v1370[32] = -1;
                                                                                  v891 = *(_QWORD **)&v1368[24];
                                                                                  if (*(_BYTE **)&v1368[24] == v1368)
                                                                                  {
                                                                                    v891 = v1368;
                                                                                    v892 = 4;
LABEL_1644:
                                                                                    (*(void (**)(void))(*v891 + 8 * v892))();
                                                                                  }
                                                                                  else if (*(_QWORD *)&v1368[24])
                                                                                  {
                                                                                    v892 = 5;
                                                                                    goto LABEL_1644;
                                                                                  }
                                                                                }
LABEL_1645:
                                                                                v893 = **(_QWORD **)(*(_QWORD *)(*v1349 + 8 * v712) + 216);
                                                                                v896 = *(_QWORD **)(v893 + 120);
                                                                                v894 = (_QWORD *)(v893 + 120);
                                                                                v895 = v896;
                                                                                if (!v896)
                                                                                  goto LABEL_1797;
                                                                                v897 = v894;
                                                                                do
                                                                                {
                                                                                  v898 = v895[4];
                                                                                  v899 = v898 >= 2;
                                                                                  if (v898 >= 2)
                                                                                    v900 = v895;
                                                                                  else
                                                                                    v900 = v895 + 1;
                                                                                  if (v899)
                                                                                    v897 = v895;
                                                                                  v895 = (_QWORD *)*v900;
                                                                                }
                                                                                while (*v900);
                                                                                if (v897 == v894 || v897[4] > 2uLL)
                                                                                  goto LABEL_1797;
                                                                                v901 = *v21;
                                                                                *(_QWORD *)v1368 = &off_1E427E238;
                                                                                *(_QWORD *)&v1368[8] = v1355;
                                                                                *(_DWORD *)&v1368[16] = v1359;
                                                                                *(_QWORD *)&v1368[24] = v1368;
                                                                                *(_QWORD *)&v1370[24] = v1370;
                                                                                *(_QWORD *)v1370 = &off_1E427E238;
                                                                                *(_QWORD *)&v1370[8] = v1355;
                                                                                *(_DWORD *)&v1370[16] = v1359;
                                                                                *(_DWORD *)&v1370[32] = 0;
                                                                                ecs2::Runtime::queueCommand(v901, (uint64_t)v1370);
                                                                                if (*(_DWORD *)&v1370[32] != -1)
                                                                                  ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                *(_DWORD *)&v1370[32] = -1;
                                                                                v902 = *(_QWORD **)&v1368[24];
                                                                                if (*(_BYTE **)&v1368[24] == v1368)
                                                                                {
                                                                                  v902 = v1368;
                                                                                  v903 = 4;
LABEL_1662:
                                                                                  (*(void (**)(void))(*v902 + 8 * v903))();
                                                                                }
                                                                                else if (*(_QWORD *)&v1368[24])
                                                                                {
                                                                                  v903 = 5;
                                                                                  goto LABEL_1662;
                                                                                }
                                                                                v904 = **v20;
                                                                                v905 = *((_QWORD *)v904 + 1208);
                                                                                v1333 = v867;
                                                                                if (*((_QWORD *)v904 + 1207) != v905)
                                                                                {
                                                                                  v906 = *(_QWORD *)(v905 - 8);
                                                                                  *((_QWORD *)v904 + 1208) = v905 - 8;
                                                                                  *(_DWORD *)(*((_QWORD *)v904 + 1210)
                                                                                            + 8 * v906) = -858993459 * ((*((_QWORD *)v904 + 1214) - *((_QWORD *)v904 + 1213)) >> 3);
                                                                                  *(_DWORD *)(*((_QWORD *)v904 + 1210)
                                                                                            + 8 * v906
                                                                                            + 4) = (((unint64_t)*(unsigned int *)(*((_QWORD *)v904 + 1210) + 8 * v906 + 4) << 32)
                                                                                                  + 0x100000000) >> 32;
                                                                                  v907 = v906 | ((unint64_t)*(unsigned int *)(*((_QWORD *)v904 + 1210) + 8 * v906 + 4) << 32);
                                                                                  goto LABEL_1690;
                                                                                }
                                                                                v908 = (-858993459
                                                                                      * ((*((_QWORD *)v904 + 1214) - *((_QWORD *)v904 + 1213)) >> 3)) | 0x100000000;
                                                                                v909 = (uint64_t *)*((_QWORD *)v904 + 1211);
                                                                                v910 = *((_QWORD *)v904 + 1212);
                                                                                if ((unint64_t)v909 >= v910)
                                                                                {
                                                                                  v912 = (char *)*((_QWORD *)v904 + 1210);
                                                                                  v913 = ((char *)v909 - v912) >> 3;
                                                                                  v914 = v913 + 1;
                                                                                  if (!((unint64_t)(v913 + 1) >> 61))
                                                                                  {
                                                                                    v915 = v910 - (_QWORD)v912;
                                                                                    if (v915 >> 2 > v914)
                                                                                      v914 = v915 >> 2;
                                                                                    if ((unint64_t)v915 >= 0x7FFFFFFFFFFFFFF8)
                                                                                      v916 = 0x1FFFFFFFFFFFFFFFLL;
                                                                                    else
                                                                                      v916 = v914;
                                                                                    if (v916)
                                                                                    {
                                                                                      if (v916 >> 61)
                                                                                        goto LABEL_2405;
                                                                                      v917 = (char *)operator new(8 * v916);
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      v917 = 0;
                                                                                    }
                                                                                    v918 = (uint64_t *)&v917[8 * v913];
                                                                                    *v918 = v908;
                                                                                    v911 = v918 + 1;
                                                                                    if (v909 != (uint64_t *)v912)
                                                                                    {
                                                                                      v919 = (char *)v909 - v912 - 8;
                                                                                      if (v919 < 0x58)
                                                                                        goto LABEL_2419;
                                                                                      if ((unint64_t)(v912 - v917) < 0x20)
                                                                                        goto LABEL_2419;
                                                                                      v920 = (v919 >> 3) + 1;
                                                                                      v921 = &v917[8 * v913 - 16];
                                                                                      v922 = v909 - 2;
                                                                                      v923 = v920 & 0x3FFFFFFFFFFFFFFCLL;
                                                                                      do
                                                                                      {
                                                                                        v924 = *(_OWORD *)v922;
                                                                                        *((_OWORD *)v921 - 1) = *((_OWORD *)v922 - 1);
                                                                                        *(_OWORD *)v921 = v924;
                                                                                        v921 -= 32;
                                                                                        v922 -= 4;
                                                                                        v923 -= 4;
                                                                                      }
                                                                                      while (v923);
                                                                                      v918 -= v920 & 0x3FFFFFFFFFFFFFFCLL;
                                                                                      v909 -= v920 & 0x3FFFFFFFFFFFFFFCLL;
                                                                                      if (v920 != (v920 & 0x3FFFFFFFFFFFFFFCLL))
                                                                                      {
LABEL_2419:
                                                                                        do
                                                                                        {
                                                                                          v925 = *--v909;
                                                                                          *--v918 = v925;
                                                                                        }
                                                                                        while (v909 != (uint64_t *)v912);
                                                                                      }
                                                                                      v909 = (uint64_t *)*((_QWORD *)v904 + 1210);
                                                                                    }
                                                                                    *((_QWORD *)v904 + 1210) = v918;
                                                                                    *((_QWORD *)v904 + 1211) = v911;
                                                                                    *((_QWORD *)v904 + 1212) = &v917[8 * v916];
                                                                                    if (v909)
                                                                                      operator delete(v909);
                                                                                    goto LABEL_1689;
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  *v909 = v908;
                                                                                  v911 = v909 + 1;
LABEL_1689:
                                                                                  *((_QWORD *)v904 + 1211) = v911;
                                                                                  v907 = *(v911 - 1);
LABEL_1690:
                                                                                  v926 = (_OWORD *)*((_QWORD *)v904 + 1214);
                                                                                  v927 = *((_QWORD *)v904 + 1215);
                                                                                  if ((unint64_t)v926 < v927)
                                                                                  {
                                                                                    *(_BYTE *)v926 = 0;
                                                                                    *(_OWORD *)((char *)v926 + 1) = *(_OWORD *)v1370;
                                                                                    v926[1] = *(_OWORD *)&v1370[15];
                                                                                    *((_BYTE *)v926 + 32) = 0;
                                                                                    v928 = (char *)v926 + 40;
                                                                                    goto LABEL_1707;
                                                                                  }
                                                                                  v929 = (_BYTE *)*((_QWORD *)v904 + 1213);
                                                                                  v930 = 0xCCCCCCCCCCCCCCCDLL
                                                                                       * (((char *)v926 - v929) >> 3)
                                                                                       + 1;
                                                                                  if (v930 <= 0x666666666666666)
                                                                                  {
                                                                                    v931 = 0xCCCCCCCCCCCCCCCDLL
                                                                                         * ((uint64_t)(v927 - (_QWORD)v929) >> 3);
                                                                                    if (2 * v931 > v930)
                                                                                      v930 = 2 * v931;
                                                                                    if (v931 >= 0x333333333333333)
                                                                                      v932 = 0x666666666666666;
                                                                                    else
                                                                                      v932 = v930;
                                                                                    if (!v932)
                                                                                    {
                                                                                      v933 = 0;
                                                                                      goto LABEL_1702;
                                                                                    }
                                                                                    if (v932 > 0x666666666666666)
                                                                                      goto LABEL_2405;
                                                                                    v933 = (char *)operator new(40 * v932);
LABEL_1702:
                                                                                    v934 = &v933[8
                                                                                               * (((char *)v926 - v929) >> 3)];
                                                                                    *v934 = 0;
                                                                                    *(_OWORD *)(v934 + 1) = *(_OWORD *)v1370;
                                                                                    *((_OWORD *)v934 + 1) = *(_OWORD *)&v1370[15];
                                                                                    v934[32] = 0;
                                                                                    v935 = v934;
                                                                                    if (v926 != (_OWORD *)v929)
                                                                                    {
                                                                                      do
                                                                                      {
                                                                                        v936 = *(_OWORD *)((char *)v926 - 40);
                                                                                        v937 = *(_OWORD *)((char *)v926 - 24);
                                                                                        *((_QWORD *)v935 - 1) = *((_QWORD *)v926 - 1);
                                                                                        *(_OWORD *)(v935 - 24) = v937;
                                                                                        *(_OWORD *)(v935 - 40) = v936;
                                                                                        v935 -= 40;
                                                                                        v926 = (_OWORD *)((char *)v926 - 40);
                                                                                      }
                                                                                      while (v926 != (_OWORD *)v929);
                                                                                      v926 = (_OWORD *)*((_QWORD *)v904 + 1213);
                                                                                    }
                                                                                    *((_QWORD *)v904 + 1213) = v935;
                                                                                    v928 = v934 + 40;
                                                                                    *((_QWORD *)v904 + 1214) = v934 + 40;
                                                                                    *((_QWORD *)v904 + 1215) = &v933[40 * v932];
                                                                                    if (v926)
                                                                                      operator delete(v926);
LABEL_1707:
                                                                                    *((_QWORD *)v904 + 1214) = v928;
                                                                                    v938 = (char *)*((_QWORD *)v904 + 1217);
                                                                                    v939 = *((_QWORD *)v904 + 1218);
                                                                                    if ((unint64_t)v938 < v939)
                                                                                    {
                                                                                      *(_QWORD *)v938 = v907;
                                                                                      v940 = (unint64_t)(v938 + 8);
                                                                                      v21 = v1348;
                                                                                      goto LABEL_1730;
                                                                                    }
                                                                                    v941 = (char *)*((_QWORD *)v904 + 1216);
                                                                                    v942 = (v938 - v941) >> 3;
                                                                                    v943 = v942 + 1;
                                                                                    if (!((unint64_t)(v942 + 1) >> 61))
                                                                                    {
                                                                                      v944 = v939 - (_QWORD)v941;
                                                                                      if (v944 >> 2 > v943)
                                                                                        v943 = v944 >> 2;
                                                                                      if ((unint64_t)v944 >= 0x7FFFFFFFFFFFFFF8)
                                                                                        v945 = 0x1FFFFFFFFFFFFFFFLL;
                                                                                      else
                                                                                        v945 = v943;
                                                                                      if (!v945)
                                                                                      {
                                                                                        v946 = 0;
                                                                                        goto LABEL_1719;
                                                                                      }
                                                                                      if (v945 >> 61)
                                                                                        goto LABEL_2405;
                                                                                      v946 = operator new(8 * v945);
LABEL_1719:
                                                                                      v947 = &v946[8 * v942];
                                                                                      *v947 = v907;
                                                                                      v940 = (unint64_t)(v947 + 1);
                                                                                      if (v938 == v941)
                                                                                      {
                                                                                        v21 = v1348;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v948 = v938 - v941 - 8;
                                                                                        v21 = v1348;
                                                                                        if (v948 < 0x58)
                                                                                          goto LABEL_2420;
                                                                                        if ((unint64_t)(v941 - v946) < 0x20)
                                                                                          goto LABEL_2420;
                                                                                        v949 = (v948 >> 3) + 1;
                                                                                        v950 = &v946[8 * v942 - 16];
                                                                                        v951 = v938 - 16;
                                                                                        v952 = v949 & 0x3FFFFFFFFFFFFFFCLL;
                                                                                        do
                                                                                        {
                                                                                          v953 = *(_OWORD *)v951;
                                                                                          *(v950 - 1) = *((_OWORD *)v951 - 1);
                                                                                          *v950 = v953;
                                                                                          v950 -= 2;
                                                                                          v951 -= 32;
                                                                                          v952 -= 4;
                                                                                        }
                                                                                        while (v952);
                                                                                        v947 -= v949 & 0x3FFFFFFFFFFFFFFCLL;
                                                                                        v938 -= 8
                                                                                              * (v949 & 0x3FFFFFFFFFFFFFFCLL);
                                                                                        if (v949 != (v949 & 0x3FFFFFFFFFFFFFFCLL))
                                                                                        {
LABEL_2420:
                                                                                          do
                                                                                          {
                                                                                            v954 = *((_QWORD *)v938 - 1);
                                                                                            v938 -= 8;
                                                                                            *--v947 = v954;
                                                                                          }
                                                                                          while (v938 != v941);
                                                                                        }
                                                                                      }
                                                                                      *((_QWORD *)v904 + 1216) = v947;
                                                                                      *((_QWORD *)v904 + 1217) = v940;
                                                                                      *((_QWORD *)v904 + 1218) = &v946[8 * v945];
                                                                                      if (v941)
                                                                                        operator delete(v941);
LABEL_1730:
                                                                                      v29 = v1349;
                                                                                      v712 = v1350;
                                                                                      *((_QWORD *)v904 + 1217) = v940;
                                                                                      v955 = (uint64_t *)((char *)v904 + 9616);
                                                                                      v956 = *((_QWORD *)v904 + 1203);
                                                                                      if (v956)
                                                                                      {
                                                                                        v957 = (uint8x8_t)vcnt_s8((int8x8_t)v956);
                                                                                        v957.i16[0] = vaddlv_u8(v957);
                                                                                        if (v957.u32[0] > 1uLL)
                                                                                        {
                                                                                          v940 = v907;
                                                                                          if (v907 >= v956)
                                                                                            v940 = v907 % v956;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v940 = (v956 - 1) & v907;
                                                                                        }
                                                                                        v958 = *(_QWORD **)(*v955 + 8 * v940);
                                                                                        if (v958)
                                                                                        {
                                                                                          v959 = (_QWORD *)*v958;
                                                                                          if (v959)
                                                                                          {
                                                                                            if (v957.u32[0] < 2uLL)
                                                                                            {
                                                                                              while (1)
                                                                                              {
                                                                                                v961 = v959[1];
                                                                                                if (v961 == v907)
                                                                                                {
                                                                                                  if (v959[2] == v907)
                                                                                                    goto LABEL_1790;
                                                                                                }
                                                                                                else if ((v961 & (v956 - 1)) != v940)
                                                                                                {
                                                                                                  goto LABEL_1750;
                                                                                                }
                                                                                                v959 = (_QWORD *)*v959;
                                                                                                if (!v959)
                                                                                                  goto LABEL_1750;
                                                                                              }
                                                                                            }
                                                                                            do
                                                                                            {
                                                                                              v960 = v959[1];
                                                                                              if (v960 == v907)
                                                                                              {
                                                                                                if (v959[2] == v907)
                                                                                                  goto LABEL_1790;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                if (v960 >= v956)
                                                                                                  v960 %= v956;
                                                                                                if (v960 != v940)
                                                                                                  break;
                                                                                              }
                                                                                              v959 = (_QWORD *)*v959;
                                                                                            }
                                                                                            while (v959);
                                                                                          }
                                                                                        }
                                                                                      }
LABEL_1750:
                                                                                      v962 = (char *)operator new(0x30uLL);
                                                                                      *(_QWORD *)v962 = 0;
                                                                                      *((_QWORD *)v962 + 1) = v907;
                                                                                      *((_QWORD *)v962 + 2) = v907;
                                                                                      *(int64x2_t *)(v962 + 24) = vdupq_n_s64(1uLL);
                                                                                      v962[40] = 0;
                                                                                      v963 = (float)(unint64_t)(*((_QWORD *)v904 + 1205) + 1);
                                                                                      v964 = *((float *)v904 + 2412);
                                                                                      if (v956
                                                                                        && (float)(v964 * (float)v956) >= v963)
                                                                                      {
                                                                                        v21 = v1348;
                                                                                        v29 = v1349;
                                                                                        v712 = v1350;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v965 = v956 < 3
                                                                                            || (v956 & (v956 - 1)) != 0;
                                                                                        v966 = v965 | (2 * v956);
                                                                                        v967 = vcvtps_u32_f32(v963 / v964);
                                                                                        if (v966 <= v967)
                                                                                          v968 = v967;
                                                                                        else
                                                                                          v968 = v966;
                                                                                        v21 = v1348;
                                                                                        v29 = v1349;
                                                                                        v712 = v1350;
                                                                                        if (v968 == 1)
                                                                                        {
                                                                                          v968 = 2;
                                                                                        }
                                                                                        else if ((v968 & (v968 - 1)) != 0)
                                                                                        {
                                                                                          v968 = std::__next_prime(v968);
                                                                                          v956 = *((_QWORD *)v904 + 1203);
                                                                                        }
                                                                                        if (v968 > v956)
                                                                                          goto LABEL_1764;
                                                                                        if (v968 < v956)
                                                                                        {
                                                                                          v969 = vcvtps_u32_f32((float)*((unint64_t *)v904 + 1205)/ *((float *)v904 + 2412));
                                                                                          if (v956 < 3
                                                                                            || (v970 = (uint8x8_t)vcnt_s8((int8x8_t)v956),
                                                                                                v970.i16[0] = vaddlv_u8(v970),
                                                                                                v970.u32[0] > 1uLL))
                                                                                          {
                                                                                            v969 = std::__next_prime(v969);
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v971 = 1 << -(char)__clz(v969 - 1);
                                                                                            if (v969 >= 2)
                                                                                              v969 = v971;
                                                                                          }
                                                                                          if (v968 <= v969)
                                                                                            v968 = v969;
                                                                                          if (v968 < v956)
LABEL_1764:
                                                                                            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v904 + 9616, v968);
                                                                                        }
                                                                                        v956 = *((_QWORD *)v904 + 1203);
                                                                                        if ((v956 & (v956 - 1)) != 0)
                                                                                        {
                                                                                          if (v907 >= v956)
                                                                                            v940 = v907 % v956;
                                                                                          else
                                                                                            v940 = v907;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v940 = (v956 - 1) & v907;
                                                                                        }
                                                                                      }
                                                                                      v972 = *v955;
                                                                                      v973 = *(_QWORD **)(*v955 + 8 * v940);
                                                                                      if (v973)
                                                                                      {
                                                                                        *(_QWORD *)v962 = *v973;
                                                                                        goto LABEL_1788;
                                                                                      }
                                                                                      *(_QWORD *)v962 = *((_QWORD *)v904 + 1204);
                                                                                      *((_QWORD *)v904 + 1204) = v962;
                                                                                      *(_QWORD *)(v972 + 8 * v940) = (char *)v904 + 9632;
                                                                                      if (*(_QWORD *)v962)
                                                                                      {
                                                                                        v974 = *(_QWORD *)(*(_QWORD *)v962 + 8);
                                                                                        if ((v956 & (v956 - 1)) != 0)
                                                                                        {
                                                                                          if (v974 >= v956)
                                                                                            v974 %= v956;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v974 &= v956 - 1;
                                                                                        }
                                                                                        v973 = (_QWORD *)(*v955 + 8 * v974);
LABEL_1788:
                                                                                        *v973 = v962;
                                                                                      }
                                                                                      ++*((_QWORD *)v904 + 1205);
LABEL_1790:
                                                                                      v975 = *v21;
                                                                                      *(_QWORD *)v1368 = &off_1E427EDC0;
                                                                                      *(_QWORD *)&v1368[8] = v907;
                                                                                      *(_QWORD *)&v1368[16] = v1353;
                                                                                      *(_QWORD *)&v1368[24] = v1368;
                                                                                      *(_QWORD *)&v1370[24] = v1370;
                                                                                      *(_QWORD *)v1370 = &off_1E427EDC0;
                                                                                      *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                      *(_DWORD *)&v1370[32] = 0;
                                                                                      ecs2::Runtime::queueCommand(v975, (uint64_t)v1370);
                                                                                      if (*(_DWORD *)&v1370[32] != -1)
                                                                                        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                      *(_DWORD *)&v1370[32] = -1;
                                                                                      v976 = *(_QWORD **)&v1368[24];
                                                                                      v20 = v1343;
                                                                                      v867 = v1333;
                                                                                      if (*(_BYTE **)&v1368[24] == v1368)
                                                                                      {
                                                                                        v976 = v1368;
                                                                                        v977 = 4;
LABEL_1796:
                                                                                        (*(void (**)(void))(*v976 + 8 * v977))();
                                                                                      }
                                                                                      else if (*(_QWORD *)&v1368[24])
                                                                                      {
                                                                                        v977 = 5;
                                                                                        goto LABEL_1796;
                                                                                      }
LABEL_1797:
                                                                                      if (!*(_BYTE *)(v867 + 368))
                                                                                        goto LABEL_2093;
                                                                                      v978 = **v20;
                                                                                      *(_QWORD *)&v873 = *(_QWORD *)(v867 + 336);
                                                                                      v979 = *((_QWORD *)v978 + 869);
                                                                                      v1334 = v867;
                                                                                      if (*((_QWORD *)v978 + 868) != v979)
                                                                                      {
                                                                                        v980 = *(_QWORD *)(v979 - 8);
                                                                                        *((_QWORD *)v978 + 869) = v979 - 8;
                                                                                        *(_DWORD *)(*((_QWORD *)v978 + 871)
                                                                                                  + 8 * v980) = -1431655765 * ((*((_QWORD *)v978 + 875) - *((_QWORD *)v978 + 874)) >> 3);
                                                                                        *(_DWORD *)(*((_QWORD *)v978 + 871)
                                                                                                  + 8 * v980
                                                                                                  + 4) = (((unint64_t)*(unsigned int *)(*((_QWORD *)v978 + 871) + 8 * v980 + 4) << 32) + 0x100000000) >> 32;
                                                                                        v981 = v980 | ((unint64_t)*(unsigned int *)(*((_QWORD *)v978 + 871) + 8 * v980 + 4) << 32);
                                                                                        goto LABEL_1825;
                                                                                      }
                                                                                      v982 = (-1431655765
                                                                                            * ((*((_QWORD *)v978 + 875) - *((_QWORD *)v978 + 874)) >> 3)) | 0x100000000;
                                                                                      v983 = (uint64_t *)*((_QWORD *)v978 + 872);
                                                                                      v984 = *((_QWORD *)v978 + 873);
                                                                                      if ((unint64_t)v983 >= v984)
                                                                                      {
                                                                                        v986 = (char *)*((_QWORD *)v978 + 871);
                                                                                        v987 = ((char *)v983 - v986) >> 3;
                                                                                        v988 = v987 + 1;
                                                                                        if (!((unint64_t)(v987 + 1) >> 61))
                                                                                        {
                                                                                          v989 = v984 - (_QWORD)v986;
                                                                                          if (v989 >> 2 > v988)
                                                                                            v988 = v989 >> 2;
                                                                                          if ((unint64_t)v989 >= 0x7FFFFFFFFFFFFFF8)
                                                                                            v990 = 0x1FFFFFFFFFFFFFFFLL;
                                                                                          else
                                                                                            v990 = v988;
                                                                                          v1311 = v873;
                                                                                          if (v990)
                                                                                          {
                                                                                            if (v990 >> 61)
                                                                                              goto LABEL_2405;
                                                                                            v991 = (char *)operator new(8 * v990);
                                                                                            v873 = v1311;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v991 = 0;
                                                                                          }
                                                                                          v992 = (uint64_t *)&v991[8 * v987];
                                                                                          *v992 = v982;
                                                                                          v985 = v992 + 1;
                                                                                          if (v983 != (uint64_t *)v986)
                                                                                          {
                                                                                            v993 = (char *)v983
                                                                                                 - v986
                                                                                                 - 8;
                                                                                            if (v993 < 0x58)
                                                                                              goto LABEL_2421;
                                                                                            if ((unint64_t)(v986 - v991) < 0x20)
                                                                                              goto LABEL_2421;
                                                                                            v994 = (v993 >> 3) + 1;
                                                                                            v995 = &v991[8 * v987 - 16];
                                                                                            v996 = v983 - 2;
                                                                                            v997 = v994 & 0x3FFFFFFFFFFFFFFCLL;
                                                                                            do
                                                                                            {
                                                                                              v998 = *(_OWORD *)v996;
                                                                                              *((_OWORD *)v995 - 1) = *((_OWORD *)v996 - 1);
                                                                                              *(_OWORD *)v995 = v998;
                                                                                              v995 -= 32;
                                                                                              v996 -= 4;
                                                                                              v997 -= 4;
                                                                                            }
                                                                                            while (v997);
                                                                                            v992 -= v994 & 0x3FFFFFFFFFFFFFFCLL;
                                                                                            v983 -= v994 & 0x3FFFFFFFFFFFFFFCLL;
                                                                                            if (v994 != (v994 & 0x3FFFFFFFFFFFFFFCLL))
                                                                                            {
LABEL_2421:
                                                                                              do
                                                                                              {
                                                                                                v999 = *--v983;
                                                                                                *--v992 = v999;
                                                                                              }
                                                                                              while (v983 != (uint64_t *)v986);
                                                                                            }
                                                                                            v983 = (uint64_t *)*((_QWORD *)v978 + 871);
                                                                                          }
                                                                                          *((_QWORD *)v978 + 871) = v992;
                                                                                          *((_QWORD *)v978 + 872) = v985;
                                                                                          *((_QWORD *)v978 + 873) = &v991[8 * v990];
                                                                                          if (v983)
                                                                                          {
                                                                                            operator delete(v983);
                                                                                            v873 = v1311;
                                                                                          }
                                                                                          goto LABEL_1824;
                                                                                        }
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        *v983 = v982;
                                                                                        v985 = v983 + 1;
LABEL_1824:
                                                                                        *((_QWORD *)v978 + 872) = v985;
                                                                                        v981 = *(v985 - 1);
LABEL_1825:
                                                                                        v1000 = (char *)*((_QWORD *)v978 + 875);
                                                                                        v1001 = *((_QWORD *)v978 + 876);
                                                                                        if ((unint64_t)v1000 < v1001)
                                                                                        {
                                                                                          *(_OWORD *)v1000 = v873;
                                                                                          *((_QWORD *)v1000 + 2) = 0;
                                                                                          v1002 = v1000 + 24;
                                                                                          goto LABEL_1847;
                                                                                        }
                                                                                        v1003 = (_BYTE *)*((_QWORD *)v978 + 874);
                                                                                        v1004 = 0xAAAAAAAAAAAAAAABLL
                                                                                              * ((v1000 - v1003) >> 3)
                                                                                              + 1;
                                                                                        if (v1004 <= 0xAAAAAAAAAAAAAAALL)
                                                                                        {
                                                                                          v1312 = v873;
                                                                                          v1005 = 0xAAAAAAAAAAAAAAABLL
                                                                                                * ((uint64_t)(v1001 - (_QWORD)v1003) >> 3);
                                                                                          if (2 * v1005 > v1004)
                                                                                            v1004 = 2 * v1005;
                                                                                          if (v1005 >= 0x555555555555555)
                                                                                            v1006 = 0xAAAAAAAAAAAAAAALL;
                                                                                          else
                                                                                            v1006 = v1004;
                                                                                          if (v1006 > 0xAAAAAAAAAAAAAAALL)
                                                                                            goto LABEL_2405;
                                                                                          v1007 = (char *)operator new(24 * v1006);
                                                                                          v1008 = &v1007[8 * ((v1000 - v1003) >> 3)];
                                                                                          v1009 = &v1007[24 * v1006];
                                                                                          *(_OWORD *)v1008 = v1312;
                                                                                          *((_QWORD *)v1008 + 2) = 0;
                                                                                          v1002 = v1008 + 24;
                                                                                          if (v1000 == v1003)
                                                                                          {
                                                                                            *((_QWORD *)v978 + 874) = v1008;
                                                                                            *((_QWORD *)v978 + 875) = v1002;
                                                                                            *((_QWORD *)v978 + 876) = v1009;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            do
                                                                                            {
                                                                                              v1010 = *(_OWORD *)(v1000 - 24);
                                                                                              v1000 -= 24;
                                                                                              *(_OWORD *)(v1008 - 24) = v1010;
                                                                                              v1008 -= 24;
                                                                                              *((_QWORD *)v1008 + 2) = *((_QWORD *)v1000 + 2);
                                                                                              *((_QWORD *)v1000 + 1) = 0;
                                                                                              *((_QWORD *)v1000 + 2) = 0;
                                                                                            }
                                                                                            while (v1000 != v1003);
                                                                                            v1000 = (char *)*((_QWORD *)v978 + 874);
                                                                                            v1011 = (char *)*((_QWORD *)v978 + 875);
                                                                                            *((_QWORD *)v978 + 874) = v1008;
                                                                                            *((_QWORD *)v978 + 875) = v1002;
                                                                                            *((_QWORD *)v978 + 876) = v1009;
                                                                                            while (v1011 != v1000)
                                                                                            {
                                                                                              v1012 = (std::__shared_weak_count *)*((_QWORD *)v1011 - 1);
                                                                                              if (v1012)
                                                                                              {
                                                                                                v1013 = (unint64_t *)&v1012->__shared_owners_;
                                                                                                do
                                                                                                  v1014 = __ldaxr(v1013);
                                                                                                while (__stlxr(v1014 - 1, v1013));
                                                                                                if (!v1014)
                                                                                                {
                                                                                                  ((void (*)(std::__shared_weak_count *))v1012->__on_zero_shared)(v1012);
                                                                                                  std::__shared_weak_count::__release_weak(v1012);
                                                                                                }
                                                                                              }
                                                                                              v1011 -= 24;
                                                                                            }
                                                                                          }
                                                                                          if (v1000)
                                                                                            operator delete(v1000);
LABEL_1847:
                                                                                          *((_QWORD *)v978 + 875) = v1002;
                                                                                          v1015 = (char *)*((_QWORD *)v978 + 878);
                                                                                          v1016 = *((_QWORD *)v978 + 879);
                                                                                          if ((unint64_t)v1015 < v1016)
                                                                                          {
                                                                                            *(_QWORD *)v1015 = v981;
                                                                                            v1017 = (unint64_t)(v1015 + 8);
                                                                                            v1018 = v1348;
                                                                                            goto LABEL_1870;
                                                                                          }
                                                                                          v1019 = (char *)*((_QWORD *)v978 + 877);
                                                                                          v1020 = (v1015 - v1019) >> 3;
                                                                                          v1021 = v1020 + 1;
                                                                                          if (!((unint64_t)(v1020 + 1) >> 61))
                                                                                          {
                                                                                            v1022 = v1016 - (_QWORD)v1019;
                                                                                            if (v1022 >> 2 > v1021)
                                                                                              v1021 = v1022 >> 2;
                                                                                            if ((unint64_t)v1022 >= 0x7FFFFFFFFFFFFFF8)
                                                                                              v1023 = 0x1FFFFFFFFFFFFFFFLL;
                                                                                            else
                                                                                              v1023 = v1021;
                                                                                            if (!v1023)
                                                                                            {
                                                                                              v1024 = 0;
                                                                                              goto LABEL_1859;
                                                                                            }
                                                                                            if (v1023 >> 61)
                                                                                              goto LABEL_2405;
                                                                                            v1024 = operator new(8 * v1023);
LABEL_1859:
                                                                                            v1025 = &v1024[8 * v1020];
                                                                                            *v1025 = v981;
                                                                                            v1017 = (unint64_t)(v1025 + 1);
                                                                                            if (v1015 == v1019)
                                                                                            {
                                                                                              v1018 = v1348;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              v1026 = v1015 - v1019 - 8;
                                                                                              v1018 = v1348;
                                                                                              if (v1026 < 0x58)
                                                                                                goto LABEL_2422;
                                                                                              if ((unint64_t)(v1019 - v1024) < 0x20)
                                                                                                goto LABEL_2422;
                                                                                              v1027 = (v1026 >> 3) + 1;
                                                                                              v1028 = &v1024[8 * v1020 - 16];
                                                                                              v1029 = v1015 - 16;
                                                                                              v1030 = v1027 & 0x3FFFFFFFFFFFFFFCLL;
                                                                                              do
                                                                                              {
                                                                                                v1031 = *(_OWORD *)v1029;
                                                                                                *(v1028 - 1) = *((_OWORD *)v1029 - 1);
                                                                                                *v1028 = v1031;
                                                                                                v1028 -= 2;
                                                                                                v1029 -= 32;
                                                                                                v1030 -= 4;
                                                                                              }
                                                                                              while (v1030);
                                                                                              v1025 -= v1027 & 0x3FFFFFFFFFFFFFFCLL;
                                                                                              v1015 -= 8 * (v1027 & 0x3FFFFFFFFFFFFFFCLL);
                                                                                              if (v1027 != (v1027 & 0x3FFFFFFFFFFFFFFCLL))
                                                                                              {
LABEL_2422:
                                                                                                do
                                                                                                {
                                                                                                  v1032 = *((_QWORD *)v1015 - 1);
                                                                                                  v1015 -= 8;
                                                                                                  *--v1025 = v1032;
                                                                                                }
                                                                                                while (v1015 != v1019);
                                                                                              }
                                                                                            }
                                                                                            *((_QWORD *)v978 + 877) = v1025;
                                                                                            *((_QWORD *)v978 + 878) = v1017;
                                                                                            *((_QWORD *)v978 + 879) = &v1024[8 * v1023];
                                                                                            if (v1019)
                                                                                              operator delete(v1019);
LABEL_1870:
                                                                                            v1033 = v1353;
                                                                                            *((_QWORD *)v978 + 878) = v1017;
                                                                                            v1034 = (uint64_t *)((char *)v978 + 6864);
                                                                                            v1035 = *((_QWORD *)v978 + 859);
                                                                                            if (v1035)
                                                                                            {
                                                                                              v1036 = (uint8x8_t)vcnt_s8((int8x8_t)v1035);
                                                                                              v1036.i16[0] = vaddlv_u8(v1036);
                                                                                              if (v1036.u32[0] > 1uLL)
                                                                                              {
                                                                                                v1017 = v981;
                                                                                                if (v981 >= v1035)
                                                                                                  v1017 = v981 % v1035;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                v1017 = (v1035 - 1) & v981;
                                                                                              }
                                                                                              v1037 = *(_QWORD **)(*v1034 + 8 * v1017);
                                                                                              if (v1037)
                                                                                              {
                                                                                                v1038 = (_QWORD *)*v1037;
                                                                                                if (v1038)
                                                                                                {
                                                                                                  if (v1036.u32[0] < 2uLL)
                                                                                                  {
                                                                                                    while (1)
                                                                                                    {
                                                                                                      v1040 = v1038[1];
                                                                                                      if (v1040 == v981)
                                                                                                      {
                                                                                                        if (v1038[2] == v981)
                                                                                                          goto LABEL_1930;
                                                                                                      }
                                                                                                      else if ((v1040 & (v1035 - 1)) != v1017)
                                                                                                      {
                                                                                                        goto LABEL_1890;
                                                                                                      }
                                                                                                      v1038 = (_QWORD *)*v1038;
                                                                                                      if (!v1038)
                                                                                                        goto LABEL_1890;
                                                                                                    }
                                                                                                  }
                                                                                                  do
                                                                                                  {
                                                                                                    v1039 = v1038[1];
                                                                                                    if (v1039 == v981)
                                                                                                    {
                                                                                                      if (v1038[2] == v981)
                                                                                                        goto LABEL_1930;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      if (v1039 >= v1035)
                                                                                                        v1039 %= v1035;
                                                                                                      if (v1039 != v1017)
                                                                                                        break;
                                                                                                    }
                                                                                                    v1038 = (_QWORD *)*v1038;
                                                                                                  }
                                                                                                  while (v1038);
                                                                                                }
                                                                                              }
                                                                                            }
LABEL_1890:
                                                                                            v1041 = (char *)operator new(0x30uLL);
                                                                                            *(_QWORD *)v1041 = 0;
                                                                                            *((_QWORD *)v1041 + 1) = v981;
                                                                                            *((_QWORD *)v1041 + 2) = v981;
                                                                                            *(_OWORD *)(v1041 + 24) = xmmword_19FFB3350;
                                                                                            v1041[40] = 0;
                                                                                            v1042 = (float)(unint64_t)(*((_QWORD *)v978 + 861) + 1);
                                                                                            v1043 = *((float *)v978 + 1724);
                                                                                            if (v1035
                                                                                              && (float)(v1043 * (float)v1035) >= v1042)
                                                                                            {
                                                                                              v1018 = v1348;
                                                                                              v1033 = v1353;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              v1044 = v1035 < 3 || (v1035 & (v1035 - 1)) != 0;
                                                                                              v1045 = v1044 | (2 * v1035);
                                                                                              v1046 = vcvtps_u32_f32(v1042 / v1043);
                                                                                              if (v1045 <= v1046)
                                                                                                v1047 = v1046;
                                                                                              else
                                                                                                v1047 = v1045;
                                                                                              v1018 = v1348;
                                                                                              v1033 = v1353;
                                                                                              if (v1047 == 1)
                                                                                              {
                                                                                                v1047 = 2;
                                                                                              }
                                                                                              else if ((v1047 & (v1047 - 1)) != 0)
                                                                                              {
                                                                                                v1047 = std::__next_prime(v1047);
                                                                                                v1035 = *((_QWORD *)v978 + 859);
                                                                                              }
                                                                                              if (v1047 > v1035)
                                                                                                goto LABEL_1904;
                                                                                              if (v1047 < v1035)
                                                                                              {
                                                                                                v1048 = vcvtps_u32_f32((float)*((unint64_t *)v978 + 861) / *((float *)v978 + 1724));
                                                                                                if (v1035 < 3 || (v1049 = (uint8x8_t)vcnt_s8((int8x8_t)v1035), v1049.i16[0] = vaddlv_u8(v1049), v1049.u32[0] > 1uLL))
                                                                                                {
                                                                                                  v1048 = std::__next_prime(v1048);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  v1050 = 1 << -(char)__clz(v1048 - 1);
                                                                                                  if (v1048 >= 2)
                                                                                                    v1048 = v1050;
                                                                                                }
                                                                                                if (v1047 <= v1048)
                                                                                                  v1047 = v1048;
                                                                                                if (v1047 < v1035)
LABEL_1904:
                                                                                                  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v978 + 6864, v1047);
                                                                                              }
                                                                                              v1035 = *((_QWORD *)v978 + 859);
                                                                                              if ((v1035 & (v1035 - 1)) != 0)
                                                                                              {
                                                                                                if (v981 >= v1035)
                                                                                                  v1017 = v981 % v1035;
                                                                                                else
                                                                                                  v1017 = v981;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                v1017 = (v1035 - 1) & v981;
                                                                                              }
                                                                                            }
                                                                                            v1051 = *v1034;
                                                                                            v1052 = *(_QWORD **)(*v1034 + 8 * v1017);
                                                                                            if (v1052)
                                                                                            {
                                                                                              *(_QWORD *)v1041 = *v1052;
                                                                                              goto LABEL_1928;
                                                                                            }
                                                                                            *(_QWORD *)v1041 = *((_QWORD *)v978 + 860);
                                                                                            *((_QWORD *)v978 + 860) = v1041;
                                                                                            *(_QWORD *)(v1051 + 8 * v1017) = (char *)v978 + 6880;
                                                                                            if (*(_QWORD *)v1041)
                                                                                            {
                                                                                              v1053 = *(_QWORD *)(*(_QWORD *)v1041 + 8);
                                                                                              if ((v1035 & (v1035 - 1)) != 0)
                                                                                              {
                                                                                                if (v1053 >= v1035)
                                                                                                  v1053 %= v1035;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                v1053 &= v1035 - 1;
                                                                                              }
                                                                                              v1052 = (_QWORD *)(*v1034 + 8 * v1053);
LABEL_1928:
                                                                                              *v1052 = v1041;
                                                                                            }
                                                                                            ++*((_QWORD *)v978 + 861);
LABEL_1930:
                                                                                            v1054 = *(_QWORD *)(v1334 + 312);
                                                                                            v1055 = (uint64_t)*v1343[8];
                                                                                            std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v1055 + 104));
                                                                                            if (v1054)
                                                                                            {
                                                                                              *(_QWORD *)v1370 = v1054;
                                                                                              *(_QWORD *)&v1370[8] = v1054;
                                                                                              v1056 = *(unsigned int *)(v1054 + 68) | ((unint64_t)*(unsigned int *)(v1054 + 64) << 32);
                                                                                              *(_QWORD *)&v1370[16] = *(_QWORD *)(v1054 + 80);
                                                                                              *(_QWORD *)&v1370[24] = v1056;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              memset(v1370, 0, 32);
                                                                                            }
                                                                                            v1370[32] = 1;
                                                                                            v1057 = geo::packed_array<mre::TextureStorage,geo::handle<mre::Texture>>::push_back((_QWORD *)(v1055 + 576), (__int128 *)v1370);
                                                                                            std::__shared_mutex_base::unlock((std::__shared_mutex_base *)(v1055 + 104));
                                                                                            v1058 = *v1018;
                                                                                            *(_QWORD *)v1368 = &off_1E427F288;
                                                                                            *(_QWORD *)&v1368[8] = v1057;
                                                                                            *(_QWORD *)&v1368[16] = v1033;
                                                                                            *(_QWORD *)&v1368[24] = v1368;
                                                                                            *(_QWORD *)&v1370[24] = v1370;
                                                                                            *(_QWORD *)v1370 = &off_1E427F288;
                                                                                            *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                            *(_DWORD *)&v1370[32] = 0;
                                                                                            ecs2::Runtime::queueCommand(v1058, (uint64_t)v1370);
                                                                                            if (*(_DWORD *)&v1370[32] != -1)
                                                                                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                            *(_DWORD *)&v1370[32] = -1;
                                                                                            v1059 = *(_QWORD **)&v1368[24];
                                                                                            if (*(_BYTE **)&v1368[24] == v1368)
                                                                                            {
                                                                                              v1059 = v1368;
                                                                                              v1060 = 4;
LABEL_1939:
                                                                                              (*(void (**)(void))(*v1059 + 8 * v1060))();
                                                                                            }
                                                                                            else if (*(_QWORD *)&v1368[24])
                                                                                            {
                                                                                              v1060 = 5;
                                                                                              goto LABEL_1939;
                                                                                            }
                                                                                            v1061 = *v1018;
                                                                                            v1062 = v1355 | *(unsigned __int8 *)(v1334 + 328);
                                                                                            *(_QWORD *)v1368 = &off_1E427E1F0;
                                                                                            *(_QWORD *)&v1368[8] = v1062;
                                                                                            *(_DWORD *)&v1368[16] = v1359;
                                                                                            *(_QWORD *)&v1368[24] = v1368;
                                                                                            *(_QWORD *)&v1370[24] = v1370;
                                                                                            *(_QWORD *)v1370 = &off_1E427E1F0;
                                                                                            *(_QWORD *)&v1370[8] = v1062;
                                                                                            *(_DWORD *)&v1370[16] = v1359;
                                                                                            *(_DWORD *)&v1370[32] = 0;
                                                                                            ecs2::Runtime::queueCommand(v1061, (uint64_t)v1370);
                                                                                            if (*(_DWORD *)&v1370[32] != -1)
                                                                                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                            *(_DWORD *)&v1370[32] = -1;
                                                                                            v1064 = *(_QWORD **)&v1368[24];
                                                                                            if (*(_BYTE **)&v1368[24] == v1368)
                                                                                            {
                                                                                              v1064 = v1368;
                                                                                              v1065 = 4;
LABEL_1946:
                                                                                              (*(void (**)(void))(*v1064 + 8 * v1065))();
                                                                                            }
                                                                                            else if (*(_QWORD *)&v1368[24])
                                                                                            {
                                                                                              v1065 = 5;
                                                                                              goto LABEL_1946;
                                                                                            }
                                                                                            v1066 = **v1343;
                                                                                            *(_QWORD *)&v1063 = *(_QWORD *)(v1334 + 352);
                                                                                            v1067 = *((_QWORD *)v1066 + 736);
                                                                                            if (*((_QWORD *)v1066 + 735) != v1067)
                                                                                            {
                                                                                              v1068 = *(_QWORD *)(v1067 - 8);
                                                                                              *((_QWORD *)v1066 + 736) = v1067 - 8;
                                                                                              *(_DWORD *)(*((_QWORD *)v1066 + 738) + 8 * v1068) = -1431655765 * ((*((_QWORD *)v1066 + 742) - *((_QWORD *)v1066 + 741)) >> 3);
                                                                                              *(_DWORD *)(*((_QWORD *)v1066 + 738) + 8 * v1068 + 4) = (((unint64_t)*(unsigned int *)(*((_QWORD *)v1066 + 738) + 8 * v1068 + 4) << 32) + 0x100000000) >> 32;
                                                                                              v1069 = v1068 | ((unint64_t)*(unsigned int *)(*((_QWORD *)v1066 + 738) + 8 * v1068 + 4) << 32);
                                                                                              goto LABEL_1974;
                                                                                            }
                                                                                            v1070 = (-1431655765 * ((*((_QWORD *)v1066 + 742) - *((_QWORD *)v1066 + 741)) >> 3)) | 0x100000000;
                                                                                            v1071 = (uint64_t *)*((_QWORD *)v1066 + 739);
                                                                                            v1072 = *((_QWORD *)v1066 + 740);
                                                                                            if ((unint64_t)v1071 >= v1072)
                                                                                            {
                                                                                              v1074 = (char *)*((_QWORD *)v1066 + 738);
                                                                                              v1075 = ((char *)v1071 - v1074) >> 3;
                                                                                              v1076 = v1075 + 1;
                                                                                              if (!((unint64_t)(v1075 + 1) >> 61))
                                                                                              {
                                                                                                v1077 = v1072 - (_QWORD)v1074;
                                                                                                if (v1077 >> 2 > v1076)
                                                                                                  v1076 = v1077 >> 2;
                                                                                                if ((unint64_t)v1077 >= 0x7FFFFFFFFFFFFFF8)
                                                                                                  v1078 = 0x1FFFFFFFFFFFFFFFLL;
                                                                                                else
                                                                                                  v1078 = v1076;
                                                                                                v1313 = v1063;
                                                                                                if (v1078)
                                                                                                {
                                                                                                  if (v1078 >> 61)
                                                                                                    goto LABEL_2405;
                                                                                                  v1079 = (char *)operator new(8 * v1078);
                                                                                                  v1063 = v1313;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  v1079 = 0;
                                                                                                }
                                                                                                v1080 = (uint64_t *)&v1079[8 * v1075];
                                                                                                *v1080 = v1070;
                                                                                                v1073 = v1080 + 1;
                                                                                                if (v1071 != (uint64_t *)v1074)
                                                                                                {
                                                                                                  v1081 = (char *)v1071 - v1074 - 8;
                                                                                                  if (v1081 < 0x58)
                                                                                                    goto LABEL_2423;
                                                                                                  if ((unint64_t)(v1074 - v1079) < 0x20)
                                                                                                    goto LABEL_2423;
                                                                                                  v1082 = (v1081 >> 3) + 1;
                                                                                                  v1083 = &v1079[8 * v1075 - 16];
                                                                                                  v1084 = v1071 - 2;
                                                                                                  v1085 = v1082 & 0x3FFFFFFFFFFFFFFCLL;
                                                                                                  do
                                                                                                  {
                                                                                                    v1086 = *(_OWORD *)v1084;
                                                                                                    *((_OWORD *)v1083 - 1) = *((_OWORD *)v1084 - 1);
                                                                                                    *(_OWORD *)v1083 = v1086;
                                                                                                    v1083 -= 32;
                                                                                                    v1084 -= 4;
                                                                                                    v1085 -= 4;
                                                                                                  }
                                                                                                  while (v1085);
                                                                                                  v1080 -= v1082 & 0x3FFFFFFFFFFFFFFCLL;
                                                                                                  v1071 -= v1082 & 0x3FFFFFFFFFFFFFFCLL;
                                                                                                  if (v1082 != (v1082 & 0x3FFFFFFFFFFFFFFCLL))
                                                                                                  {
LABEL_2423:
                                                                                                    do
                                                                                                    {
                                                                                                      v1087 = *--v1071;
                                                                                                      *--v1080 = v1087;
                                                                                                    }
                                                                                                    while (v1071 != (uint64_t *)v1074);
                                                                                                  }
                                                                                                  v1071 = (uint64_t *)*((_QWORD *)v1066 + 738);
                                                                                                }
                                                                                                *((_QWORD *)v1066 + 738) = v1080;
                                                                                                *((_QWORD *)v1066 + 739) = v1073;
                                                                                                *((_QWORD *)v1066 + 740) = &v1079[8 * v1078];
                                                                                                if (v1071)
                                                                                                {
                                                                                                  operator delete(v1071);
                                                                                                  v1063 = v1313;
                                                                                                }
                                                                                                goto LABEL_1973;
                                                                                              }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              *v1071 = v1070;
                                                                                              v1073 = v1071 + 1;
LABEL_1973:
                                                                                              *((_QWORD *)v1066 + 739) = v1073;
                                                                                              v1069 = *(v1073 - 1);
LABEL_1974:
                                                                                              v1088 = (char *)*((_QWORD *)v1066 + 742);
                                                                                              v1089 = *((_QWORD *)v1066 + 743);
                                                                                              if ((unint64_t)v1088 < v1089)
                                                                                              {
                                                                                                *(_OWORD *)v1088 = v1063;
                                                                                                *((_QWORD *)v1088 + 2) = 0;
                                                                                                v1090 = v1088 + 24;
                                                                                                goto LABEL_1996;
                                                                                              }
                                                                                              v1091 = (_BYTE *)*((_QWORD *)v1066 + 741);
                                                                                              v1092 = 0xAAAAAAAAAAAAAAABLL * ((v1088 - v1091) >> 3) + 1;
                                                                                              if (v1092 <= 0xAAAAAAAAAAAAAAALL)
                                                                                              {
                                                                                                v1314 = v1063;
                                                                                                v1093 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1089 - (_QWORD)v1091) >> 3);
                                                                                                if (2 * v1093 > v1092)
                                                                                                  v1092 = 2 * v1093;
                                                                                                if (v1093 >= 0x555555555555555)
                                                                                                  v1094 = 0xAAAAAAAAAAAAAAALL;
                                                                                                else
                                                                                                  v1094 = v1092;
                                                                                                if (v1094 > 0xAAAAAAAAAAAAAAALL)
                                                                                                  goto LABEL_2405;
                                                                                                v1095 = (char *)operator new(24 * v1094);
                                                                                                v1096 = &v1095[8 * ((v1088 - v1091) >> 3)];
                                                                                                v1097 = &v1095[24 * v1094];
                                                                                                *(_OWORD *)v1096 = v1314;
                                                                                                *((_QWORD *)v1096 + 2) = 0;
                                                                                                v1090 = v1096 + 24;
                                                                                                if (v1088 == v1091)
                                                                                                {
                                                                                                  *((_QWORD *)v1066 + 741) = v1096;
                                                                                                  *((_QWORD *)v1066 + 742) = v1090;
                                                                                                  *((_QWORD *)v1066 + 743) = v1097;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  do
                                                                                                  {
                                                                                                    v1098 = *(_OWORD *)(v1088 - 24);
                                                                                                    v1088 -= 24;
                                                                                                    *(_OWORD *)(v1096 - 24) = v1098;
                                                                                                    v1096 -= 24;
                                                                                                    *((_QWORD *)v1096 + 2) = *((_QWORD *)v1088 + 2);
                                                                                                    *((_QWORD *)v1088 + 1) = 0;
                                                                                                    *((_QWORD *)v1088 + 2) = 0;
                                                                                                  }
                                                                                                  while (v1088 != v1091);
                                                                                                  v1088 = (char *)*((_QWORD *)v1066 + 741);
                                                                                                  v1099 = (char *)*((_QWORD *)v1066 + 742);
                                                                                                  *((_QWORD *)v1066 + 741) = v1096;
                                                                                                  *((_QWORD *)v1066 + 742) = v1090;
                                                                                                  *((_QWORD *)v1066 + 743) = v1097;
                                                                                                  while (v1099 != v1088)
                                                                                                  {
                                                                                                    v1100 = (std::__shared_weak_count *)*((_QWORD *)v1099 - 1);
                                                                                                    if (v1100)
                                                                                                    {
                                                                                                      v1101 = (unint64_t *)&v1100->__shared_owners_;
                                                                                                      do
                                                                                                        v1102 = __ldaxr(v1101);
                                                                                                      while (__stlxr(v1102 - 1, v1101));
                                                                                                      if (!v1102)
                                                                                                      {
                                                                                                        ((void (*)(std::__shared_weak_count *))v1100->__on_zero_shared)(v1100);
                                                                                                        std::__shared_weak_count::__release_weak(v1100);
                                                                                                      }
                                                                                                    }
                                                                                                    v1099 -= 24;
                                                                                                  }
                                                                                                }
                                                                                                if (v1088)
                                                                                                  operator delete(v1088);
LABEL_1996:
                                                                                                *((_QWORD *)v1066 + 742) = v1090;
                                                                                                v1103 = (char *)*((_QWORD *)v1066 + 745);
                                                                                                v1104 = *((_QWORD *)v1066 + 746);
                                                                                                if ((unint64_t)v1103 < v1104)
                                                                                                {
                                                                                                  *(_QWORD *)v1103 = v1069;
                                                                                                  v1105 = (unint64_t)(v1103 + 8);
                                                                                                  v21 = v1348;
                                                                                                  goto LABEL_2019;
                                                                                                }
                                                                                                v1106 = (char *)*((_QWORD *)v1066 + 744);
                                                                                                v1107 = (v1103 - v1106) >> 3;
                                                                                                v1108 = v1107 + 1;
                                                                                                if (!((unint64_t)(v1107 + 1) >> 61))
                                                                                                {
                                                                                                  v1109 = v1104 - (_QWORD)v1106;
                                                                                                  if (v1109 >> 2 > v1108)
                                                                                                    v1108 = v1109 >> 2;
                                                                                                  if ((unint64_t)v1109 >= 0x7FFFFFFFFFFFFFF8)
                                                                                                    v1110 = 0x1FFFFFFFFFFFFFFFLL;
                                                                                                  else
                                                                                                    v1110 = v1108;
                                                                                                  if (!v1110)
                                                                                                  {
                                                                                                    v1111 = 0;
                                                                                                    goto LABEL_2008;
                                                                                                  }
                                                                                                  if (!(v1110 >> 61))
                                                                                                  {
                                                                                                    v1111 = operator new(8 * v1110);
LABEL_2008:
                                                                                                    v1112 = &v1111[8 * v1107];
                                                                                                    *v1112 = v1069;
                                                                                                    v1105 = (unint64_t)(v1112 + 1);
                                                                                                    if (v1103 == v1106)
                                                                                                    {
                                                                                                      v21 = v1348;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      v1113 = v1103 - v1106 - 8;
                                                                                                      v21 = v1348;
                                                                                                      if (v1113 < 0x58)
                                                                                                        goto LABEL_2424;
                                                                                                      if ((unint64_t)(v1106 - v1111) < 0x20)
                                                                                                        goto LABEL_2424;
                                                                                                      v1114 = (v1113 >> 3) + 1;
                                                                                                      v1115 = &v1111[8 * v1107 - 16];
                                                                                                      v1116 = v1103 - 16;
                                                                                                      v1117 = v1114 & 0x3FFFFFFFFFFFFFFCLL;
                                                                                                      do
                                                                                                      {
                                                                                                        v1118 = *(_OWORD *)v1116;
                                                                                                        *(v1115 - 1) = *((_OWORD *)v1116 - 1);
                                                                                                        *v1115 = v1118;
                                                                                                        v1115 -= 2;
                                                                                                        v1116 -= 32;
                                                                                                        v1117 -= 4;
                                                                                                      }
                                                                                                      while (v1117);
                                                                                                      v1112 -= v1114 & 0x3FFFFFFFFFFFFFFCLL;
                                                                                                      v1103 -= 8 * (v1114 & 0x3FFFFFFFFFFFFFFCLL);
                                                                                                      if (v1114 != (v1114 & 0x3FFFFFFFFFFFFFFCLL))
                                                                                                      {
LABEL_2424:
                                                                                                        do
                                                                                                        {
                                                                                                          v1119 = *((_QWORD *)v1103 - 1);
                                                                                                          v1103 -= 8;
                                                                                                          *--v1112 = v1119;
                                                                                                        }
                                                                                                        while (v1103 != v1106);
                                                                                                      }
                                                                                                    }
                                                                                                    *((_QWORD *)v1066 + 744) = v1112;
                                                                                                    *((_QWORD *)v1066 + 745) = v1105;
                                                                                                    *((_QWORD *)v1066 + 746) = &v1111[8 * v1110];
                                                                                                    if (v1106)
                                                                                                      operator delete(v1106);
LABEL_2019:
                                                                                                    v712 = v1350;
                                                                                                    *((_QWORD *)v1066 + 745) = v1105;
                                                                                                    v1120 = (uint64_t *)((char *)v1066 + 5800);
                                                                                                    v1121 = *((_QWORD *)v1066 + 726);
                                                                                                    if (v1121)
                                                                                                    {
                                                                                                      v1122 = (uint8x8_t)vcnt_s8((int8x8_t)v1121);
                                                                                                      v1122.i16[0] = vaddlv_u8(v1122);
                                                                                                      if (v1122.u32[0] > 1uLL)
                                                                                                      {
                                                                                                        v1105 = v1069;
                                                                                                        if (v1069 >= v1121)
                                                                                                          v1105 = v1069 % v1121;
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        v1105 = (v1121 - 1) & v1069;
                                                                                                      }
                                                                                                      v1123 = *(_QWORD **)(*v1120 + 8 * v1105);
                                                                                                      if (v1123)
                                                                                                      {
                                                                                                        v1124 = (_QWORD *)*v1123;
                                                                                                        if (v1124)
                                                                                                        {
                                                                                                          if (v1122.u32[0] < 2uLL)
                                                                                                          {
                                                                                                            while (1)
                                                                                                            {
                                                                                                              v1126 = v1124[1];
                                                                                                              if (v1126 == v1069)
                                                                                                              {
                                                                                                                if (v1124[2] == v1069)
                                                                                                                  goto LABEL_2079;
                                                                                                              }
                                                                                                              else if ((v1126 & (v1121 - 1)) != v1105)
                                                                                                              {
                                                                                                                goto LABEL_2039;
                                                                                                              }
                                                                                                              v1124 = (_QWORD *)*v1124;
                                                                                                              if (!v1124)
                                                                                                                goto LABEL_2039;
                                                                                                            }
                                                                                                          }
                                                                                                          do
                                                                                                          {
                                                                                                            v1125 = v1124[1];
                                                                                                            if (v1125 == v1069)
                                                                                                            {
                                                                                                              if (v1124[2] == v1069)
                                                                                                                goto LABEL_2079;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              if (v1125 >= v1121)
                                                                                                                v1125 %= v1121;
                                                                                                              if (v1125 != v1105)
                                                                                                                break;
                                                                                                            }
                                                                                                            v1124 = (_QWORD *)*v1124;
                                                                                                          }
                                                                                                          while (v1124);
                                                                                                        }
                                                                                                      }
                                                                                                    }
LABEL_2039:
                                                                                                    v1127 = (char *)operator new(0x30uLL);
                                                                                                    *(_QWORD *)v1127 = 0;
                                                                                                    *((_QWORD *)v1127 + 1) = v1069;
                                                                                                    *((_QWORD *)v1127 + 2) = v1069;
                                                                                                    *(_OWORD *)(v1127 + 24) = xmmword_19FFB3350;
                                                                                                    v1127[40] = 0;
                                                                                                    v1128 = (float)(unint64_t)(*((_QWORD *)v1066 + 728) + 1);
                                                                                                    v1129 = *((float *)v1066 + 1458);
                                                                                                    if (v1121 && (float)(v1129 * (float)v1121) >= v1128)
                                                                                                    {
                                                                                                      v21 = v1348;
                                                                                                      v712 = v1350;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      v1130 = v1121 < 3 || (v1121 & (v1121 - 1)) != 0;
                                                                                                      v1131 = v1130 | (2 * v1121);
                                                                                                      v1132 = vcvtps_u32_f32(v1128 / v1129);
                                                                                                      if (v1131 <= v1132)
                                                                                                        v1133 = v1132;
                                                                                                      else
                                                                                                        v1133 = v1131;
                                                                                                      v21 = v1348;
                                                                                                      v712 = v1350;
                                                                                                      if (v1133 == 1)
                                                                                                      {
                                                                                                        v1133 = 2;
                                                                                                      }
                                                                                                      else if ((v1133 & (v1133 - 1)) != 0)
                                                                                                      {
                                                                                                        v1133 = std::__next_prime(v1133);
                                                                                                        v1121 = *((_QWORD *)v1066 + 726);
                                                                                                      }
                                                                                                      if (v1133 > v1121)
                                                                                                        goto LABEL_2053;
                                                                                                      if (v1133 < v1121)
                                                                                                      {
                                                                                                        v1134 = vcvtps_u32_f32((float)*((unint64_t *)v1066 + 728) / *((float *)v1066 + 1458));
                                                                                                        if (v1121 < 3 || (v1135 = (uint8x8_t)vcnt_s8((int8x8_t)v1121), v1135.i16[0] = vaddlv_u8(v1135), v1135.u32[0] > 1uLL))
                                                                                                        {
                                                                                                          v1134 = std::__next_prime(v1134);
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          v1136 = 1 << -(char)__clz(v1134 - 1);
                                                                                                          if (v1134 >= 2)
                                                                                                            v1134 = v1136;
                                                                                                        }
                                                                                                        if (v1133 <= v1134)
                                                                                                          v1133 = v1134;
                                                                                                        if (v1133 < v1121)
LABEL_2053:
                                                                                                          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v1066 + 5800, v1133);
                                                                                                      }
                                                                                                      v1121 = *((_QWORD *)v1066 + 726);
                                                                                                      if ((v1121 & (v1121 - 1)) != 0)
                                                                                                      {
                                                                                                        if (v1069 >= v1121)
                                                                                                          v1105 = v1069 % v1121;
                                                                                                        else
                                                                                                          v1105 = v1069;
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        v1105 = (v1121 - 1) & v1069;
                                                                                                      }
                                                                                                    }
                                                                                                    v1137 = *v1120;
                                                                                                    v1138 = *(_QWORD **)(*v1120 + 8 * v1105);
                                                                                                    if (v1138)
                                                                                                    {
                                                                                                      *(_QWORD *)v1127 = *v1138;
                                                                                                      goto LABEL_2077;
                                                                                                    }
                                                                                                    *(_QWORD *)v1127 = *((_QWORD *)v1066 + 727);
                                                                                                    *((_QWORD *)v1066 + 727) = v1127;
                                                                                                    *(_QWORD *)(v1137 + 8 * v1105) = (char *)v1066 + 5816;
                                                                                                    if (*(_QWORD *)v1127)
                                                                                                    {
                                                                                                      v1139 = *(_QWORD *)(*(_QWORD *)v1127 + 8);
                                                                                                      if ((v1121 & (v1121 - 1)) != 0)
                                                                                                      {
                                                                                                        if (v1139 >= v1121)
                                                                                                          v1139 %= v1121;
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        v1139 &= v1121 - 1;
                                                                                                      }
                                                                                                      v1138 = (_QWORD *)(*v1120 + 8 * v1139);
LABEL_2077:
                                                                                                      *v1138 = v1127;
                                                                                                    }
                                                                                                    ++*((_QWORD *)v1066 + 728);
LABEL_2079:
                                                                                                    v1140 = *v21;
                                                                                                    v1141 = operator new(0x30uLL);
                                                                                                    *v1141 = &off_1E4281958;
                                                                                                    v1141[1] = v981;
                                                                                                    v1141[2] = 0;
                                                                                                    v1141[3] = 0;
                                                                                                    v1141[4] = 0;
                                                                                                    v1141[5] = v1353;
                                                                                                    *(_QWORD *)&v1370[24] = v1141;
                                                                                                    *(_QWORD *)&v1368[24] = 0;
                                                                                                    *(_DWORD *)&v1370[32] = 0;
                                                                                                    ecs2::Runtime::queueCommand(v1140, (uint64_t)v1370);
                                                                                                    v29 = v1349;
                                                                                                    if (*(_DWORD *)&v1370[32] != -1)
                                                                                                      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                    *(_DWORD *)&v1370[32] = -1;
                                                                                                    v1142 = *(_QWORD **)&v1368[24];
                                                                                                    v867 = v1334;
                                                                                                    if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                    {
                                                                                                      v1142 = v1368;
                                                                                                      v1143 = 4;
LABEL_2085:
                                                                                                      (*(void (**)(void))(*v1142 + 8 * v1143))();
                                                                                                    }
                                                                                                    else if (*(_QWORD *)&v1368[24])
                                                                                                    {
                                                                                                      v1143 = 5;
                                                                                                      goto LABEL_2085;
                                                                                                    }
                                                                                                    v1144 = *v21;
                                                                                                    *(_QWORD *)v1368 = &off_1E4281520;
                                                                                                    *(_QWORD *)&v1368[8] = v1069;
                                                                                                    *(_QWORD *)&v1368[16] = v1353;
                                                                                                    *(_QWORD *)&v1368[24] = v1368;
                                                                                                    *(_QWORD *)&v1370[24] = v1370;
                                                                                                    *(_QWORD *)v1370 = &off_1E4281520;
                                                                                                    *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                    *(_DWORD *)&v1370[32] = 0;
                                                                                                    ecs2::Runtime::queueCommand(v1144, (uint64_t)v1370);
                                                                                                    if (*(_DWORD *)&v1370[32] != -1)
                                                                                                      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                    *(_DWORD *)&v1370[32] = -1;
                                                                                                    v1145 = *(_QWORD **)&v1368[24];
                                                                                                    v20 = v1343;
                                                                                                    if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                    {
                                                                                                      v1145 = v1368;
                                                                                                      v1146 = 4;
LABEL_2092:
                                                                                                      (*(void (**)(void))(*v1145 + 8 * v1146))();
                                                                                                    }
                                                                                                    else if (*(_QWORD *)&v1368[24])
                                                                                                    {
                                                                                                      v1146 = 5;
                                                                                                      goto LABEL_2092;
                                                                                                    }
LABEL_2093:
                                                                                                    v1147 = *(_QWORD *)(v867 + 240);
                                                                                                    v1148 = *v21;
                                                                                                    *(_QWORD *)v1368 = &off_1E427D668;
                                                                                                    *(_QWORD *)&v1368[8] = v1147;
                                                                                                    *(_QWORD *)&v1368[16] = v1353;
                                                                                                    *(_QWORD *)&v1368[24] = v1368;
                                                                                                    *(_QWORD *)&v1370[24] = v1370;
                                                                                                    *(_QWORD *)v1370 = &off_1E427D668;
                                                                                                    *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                    *(_DWORD *)&v1370[32] = 0;
                                                                                                    ecs2::Runtime::queueCommand(v1148, (uint64_t)v1370);
                                                                                                    if (*(_DWORD *)&v1370[32] != -1)
                                                                                                      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                    *(_DWORD *)&v1370[32] = -1;
                                                                                                    v1149 = *(_QWORD **)&v1368[24];
                                                                                                    if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                    {
                                                                                                      v1149 = v1368;
                                                                                                      v1150 = 4;
LABEL_2099:
                                                                                                      (*(void (**)(void))(*v1149 + 8 * v1150))();
                                                                                                    }
                                                                                                    else if (*(_QWORD *)&v1368[24])
                                                                                                    {
                                                                                                      v1150 = 5;
                                                                                                      goto LABEL_2099;
                                                                                                    }
                                                                                                    v1151 = *(_QWORD *)(v867 + 240);
                                                                                                    v1152 = *v21;
                                                                                                    *(_QWORD *)v1368 = &off_1E4280710;
                                                                                                    *(_QWORD *)&v1368[8] = v1151;
                                                                                                    *(_QWORD *)&v1368[16] = v1353;
                                                                                                    *(_QWORD *)&v1368[24] = v1368;
                                                                                                    *(_QWORD *)&v1370[24] = v1370;
                                                                                                    *(_QWORD *)v1370 = &off_1E4280710;
                                                                                                    *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                    *(_DWORD *)&v1370[32] = 0;
                                                                                                    ecs2::Runtime::queueCommand(v1152, (uint64_t)v1370);
                                                                                                    if (*(_DWORD *)&v1370[32] != -1)
                                                                                                      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                    *(_DWORD *)&v1370[32] = -1;
                                                                                                    v1153 = *(_QWORD **)&v1368[24];
                                                                                                    if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                    {
                                                                                                      v1153 = v1368;
                                                                                                      v1154 = 4;
LABEL_2106:
                                                                                                      (*(void (**)(void))(*v1153 + 8 * v1154))();
                                                                                                    }
                                                                                                    else if (*(_QWORD *)&v1368[24])
                                                                                                    {
                                                                                                      v1154 = 5;
                                                                                                      goto LABEL_2106;
                                                                                                    }
                                                                                                    *(_OWORD *)v1370 = *(_OWORD *)(v1327 + 264);
                                                                                                    *(_QWORD *)&v1370[16] = *(_QWORD *)(v1327 + 280);
                                                                                                    *(_OWORD *)&v1370[24] = *(_OWORD *)(v1327 + 288);
                                                                                                    v1371 = *(_QWORD *)(v1327 + 304);
                                                                                                    v1155 = *(_QWORD *)(v1327 + 312);
                                                                                                    v1156 = *(_OWORD *)(v1327 + 336);
                                                                                                    *(_OWORD *)v1368 = *(_OWORD *)(v1327 + 320);
                                                                                                    *(_OWORD *)&v1368[16] = v1156;
                                                                                                    v1369 = *(_OWORD *)(v1327 + 352);
                                                                                                    v1157 = *v21;
                                                                                                    v1158 = (char *)operator new(0x78uLL);
                                                                                                    *(_QWORD *)v1158 = &off_1E427D8F0;
                                                                                                    *(_OWORD *)(v1158 + 8) = *(_OWORD *)v1370;
                                                                                                    *((_QWORD *)v1158 + 3) = *(_QWORD *)&v1370[16];
                                                                                                    *((_OWORD *)v1158 + 2) = *(_OWORD *)&v1370[24];
                                                                                                    *((_QWORD *)v1158 + 6) = v1371;
                                                                                                    *((_QWORD *)v1158 + 7) = v1155;
                                                                                                    v1159 = *(_OWORD *)&v1368[16];
                                                                                                    *((_OWORD *)v1158 + 4) = *(_OWORD *)v1368;
                                                                                                    *((_OWORD *)v1158 + 5) = v1159;
                                                                                                    *((_OWORD *)v1158 + 6) = v1369;
                                                                                                    *((_QWORD *)v1158 + 14) = v1353;
                                                                                                    v1377 = (__int128 *)v1158;
                                                                                                    v1374 = 0;
                                                                                                    v1378 = 0;
                                                                                                    ecs2::Runtime::queueCommand(v1157, (uint64_t)&v1375);
                                                                                                    if (v1378 != -1)
                                                                                                      ((void (*)(uint64_t **, __int128 *))off_1E42FB340[v1378])(&v1367, &v1375);
                                                                                                    v1378 = -1;
                                                                                                    v1160 = v1374;
                                                                                                    if (v1374 == &v1372)
                                                                                                    {
                                                                                                      v1160 = &v1372;
                                                                                                      v1161 = 4;
LABEL_2113:
                                                                                                      (*(void (**)(void))(*v1160 + 8 * v1161))();
                                                                                                    }
                                                                                                    else if (v1374)
                                                                                                    {
                                                                                                      v1161 = 5;
                                                                                                      goto LABEL_2113;
                                                                                                    }
                                                                                                    if (*(_BYTE *)(v867 + 272))
                                                                                                    {
                                                                                                      v1162 = *(_QWORD *)(v867 + 256);
                                                                                                      v1163 = *(_QWORD *)(v1162 + 32);
                                                                                                      v1164 = *(std::__shared_weak_count **)(v1162 + 40);
                                                                                                      if (v1164)
                                                                                                      {
                                                                                                        v1165 = (unint64_t *)&v1164->__shared_owners_;
                                                                                                        do
                                                                                                          v1166 = __ldxr(v1165);
                                                                                                        while (__stxr(v1166 + 1, v1165));
                                                                                                      }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      v1163 = 0;
                                                                                                      v1164 = 0;
                                                                                                    }
                                                                                                    v1167 = v1363;
                                                                                                    v1362 = v1163;
                                                                                                    v1363 = v1164;
                                                                                                    if (v1167)
                                                                                                    {
                                                                                                      v1168 = (unint64_t *)&v1167->__shared_owners_;
                                                                                                      do
                                                                                                        v1169 = __ldaxr(v1168);
                                                                                                      while (__stlxr(v1169 - 1, v1168));
                                                                                                      if (!v1169)
                                                                                                      {
                                                                                                        ((void (*)(std::__shared_weak_count *))v1167->__on_zero_shared)(v1167);
                                                                                                        std::__shared_weak_count::__release_weak(v1167);
                                                                                                      }
                                                                                                    }
                                                                                                    v866 = *(_BYTE *)(v867 + 396) != 0;
                                                                                                    if (*(_BYTE *)(v867 + 396))
                                                                                                    {
                                                                                                      v1375 = *(_OWORD *)(v867 + 380);
                                                                                                      v1170 = *v21;
                                                                                                      v1171 = (char *)operator new(0x20uLL);
                                                                                                      *(_QWORD *)v1171 = &off_1E427E088;
                                                                                                      *(_OWORD *)(v1171 + 8) = v1375;
                                                                                                      *((_QWORD *)v1171 + 3) = v1353;
                                                                                                      *(_QWORD *)&v1370[24] = v1171;
                                                                                                      *(_QWORD *)&v1368[24] = 0;
                                                                                                      *(_DWORD *)&v1370[32] = 0;
                                                                                                      ecs2::Runtime::queueCommand(v1170, (uint64_t)v1370);
                                                                                                      if (*(_DWORD *)&v1370[32] != -1)
                                                                                                        ((void (*)(unint64_t *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1372, v1370);
                                                                                                      *(_DWORD *)&v1370[32] = -1;
                                                                                                      v1172 = *(_QWORD **)&v1368[24];
                                                                                                      if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                      {
                                                                                                        v1172 = v1368;
                                                                                                        v1173 = 4;
LABEL_2132:
                                                                                                        (*(void (**)(void))(*v1172 + 8 * v1173))();
                                                                                                      }
                                                                                                      else if (*(_QWORD *)&v1368[24])
                                                                                                      {
                                                                                                        v1173 = 5;
                                                                                                        goto LABEL_2132;
                                                                                                      }
                                                                                                    }
                                                                                                    if (*(_BYTE *)(v867 + 188))
                                                                                                    {
                                                                                                      v1174 = *(unsigned int *)(v867 + 184);
                                                                                                      v1175 = *v21;
                                                                                                      *(_QWORD *)v1368 = &off_1E427D9C8;
                                                                                                      *(_QWORD *)&v1368[8] = v1174;
                                                                                                      *(_QWORD *)&v1368[16] = v1353;
                                                                                                      *(_QWORD *)&v1368[24] = v1368;
                                                                                                      *(_QWORD *)&v1370[24] = v1370;
                                                                                                      *(_QWORD *)v1370 = &off_1E427D9C8;
                                                                                                      *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                      *(_DWORD *)&v1370[32] = 0;
                                                                                                      ecs2::Runtime::queueCommand(v1175, (uint64_t)v1370);
                                                                                                      if (*(_DWORD *)&v1370[32] != -1)
                                                                                                        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                      *(_DWORD *)&v1370[32] = -1;
                                                                                                      v1176 = *(_QWORD **)&v1368[24];
                                                                                                      if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                      {
                                                                                                        v1176 = v1368;
                                                                                                        v1177 = 4;
LABEL_2141:
                                                                                                        (*(void (**)(void))(*v1176 + 8 * v1177))();
                                                                                                      }
                                                                                                      else if (*(_QWORD *)&v1368[24])
                                                                                                      {
                                                                                                        v1177 = 5;
                                                                                                        goto LABEL_2141;
                                                                                                      }
LABEL_2142:
                                                                                                      v1178 = 0;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      v1178 = 1;
                                                                                                    }
                                                                                                    v1179 = *v29;
                                                                                                    if ((v1330 & 1) != 0)
                                                                                                      goto LABEL_2291;
                                                                                                    v1315 = v1178;
                                                                                                    v1331 = v866;
                                                                                                    v1180 = *v21;
                                                                                                    v1181 = *(_QWORD *)(*(_QWORD *)(v1179 + 8 * v712) + 208);
                                                                                                    v1182 = *(_QWORD *)*v21;
                                                                                                    v1183 = *(_QWORD **)v1182;
                                                                                                    v1184 = *(_QWORD **)(v1182 + 8);
                                                                                                    if (v1183 == v1184)
                                                                                                    {
LABEL_2148:
                                                                                                      if (v1183 == v1184)
                                                                                                      {
                                                                                                        v1335 = 0;
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        v1185 = (std::__shared_weak_count *)v1183[4];
                                                                                                        v1335 = v1183[3];
                                                                                                        if (v1185)
                                                                                                        {
                                                                                                          v1186 = (unint64_t *)&v1185->__shared_owners_;
                                                                                                          do
                                                                                                            v1187 = __ldxr(v1186);
                                                                                                          while (__stxr(v1187 + 1, v1186));
                                                                                                          do
                                                                                                            v1188 = __ldaxr(v1186);
                                                                                                          while (__stlxr(v1188 - 1, v1186));
                                                                                                          if (!v1188)
                                                                                                          {
                                                                                                            ((void (*)(std::__shared_weak_count *))v1185->__on_zero_shared)(v1185);
                                                                                                            std::__shared_weak_count::__release_weak(v1185);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      do
                                                                                                      {
                                                                                                        if (*v1183 == 0x4EDAD23DFB014132)
                                                                                                          goto LABEL_2148;
                                                                                                        v1183 += 5;
                                                                                                      }
                                                                                                      while (v1183 != v1184);
                                                                                                      v1335 = 0;
                                                                                                    }
                                                                                                    v1189 = **(_QWORD ***)v1180;
                                                                                                    v1190 = *(_QWORD **)(*(_QWORD *)v1180 + 8);
                                                                                                    if (v1189 != v1190)
                                                                                                    {
                                                                                                      while (*v1189 != 0x348A0B0E758C07C2)
                                                                                                      {
                                                                                                        v1189 += 5;
                                                                                                        if (v1189 == v1190)
                                                                                                          goto LABEL_2167;
                                                                                                      }
                                                                                                    }
                                                                                                    if (v1189 == v1190)
                                                                                                    {
LABEL_2167:
                                                                                                      v1192 = 0;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      v1192 = v1189[3];
                                                                                                      v1191 = (std::__shared_weak_count *)v1189[4];
                                                                                                      if (v1191)
                                                                                                      {
                                                                                                        v1193 = (unint64_t *)&v1191->__shared_owners_;
                                                                                                        do
                                                                                                          v1194 = __ldxr(v1193);
                                                                                                        while (__stxr(v1194 + 1, v1193));
                                                                                                        do
                                                                                                          v1195 = __ldaxr(v1193);
                                                                                                        while (__stlxr(v1195 - 1, v1193));
                                                                                                        if (!v1195)
                                                                                                        {
                                                                                                          ((void (*)(std::__shared_weak_count *))v1191->__on_zero_shared)(v1191);
                                                                                                          std::__shared_weak_count::__release_weak(v1191);
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                    v1196 = operator new(0x30uLL);
                                                                                                    v1197 = v1337 | (v1325 << 8);
                                                                                                    *v1196 = &off_1E427F990;
                                                                                                    v1196[1] = v1329;
                                                                                                    v1196[2] = v1197;
                                                                                                    v1196[3] = v1197;
                                                                                                    *((_WORD *)v1196 + 16) = v1347;
                                                                                                    v1196[5] = v1353;
                                                                                                    *(_QWORD *)&v1370[24] = v1196;
                                                                                                    *(_QWORD *)&v1368[24] = 0;
                                                                                                    *(_DWORD *)&v1370[32] = 0;
                                                                                                    ecs2::Runtime::queueCommand(v1180, (uint64_t)v1370);
                                                                                                    if (*(_DWORD *)&v1370[32] != -1)
                                                                                                      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                    *(_DWORD *)&v1370[32] = -1;
                                                                                                    v1198 = *(_QWORD **)&v1368[24];
                                                                                                    v1199 = (unint64_t)v1326;
                                                                                                    if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                    {
                                                                                                      v1198 = v1368;
                                                                                                      v1200 = 4;
LABEL_2174:
                                                                                                      (*(void (**)(void))(*v1198 + 8 * v1200))();
                                                                                                    }
                                                                                                    else if (*(_QWORD *)&v1368[24])
                                                                                                    {
                                                                                                      v1200 = 5;
                                                                                                      goto LABEL_2174;
                                                                                                    }
                                                                                                    *(_QWORD *)v1368 = &off_1E427D590;
                                                                                                    *(_QWORD *)&v1368[8] = v1329;
                                                                                                    *(_QWORD *)&v1368[16] = v1353;
                                                                                                    *(_QWORD *)&v1368[24] = v1368;
                                                                                                    *(_QWORD *)&v1370[24] = v1370;
                                                                                                    *(_QWORD *)v1370 = &off_1E427D590;
                                                                                                    *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                    *(_DWORD *)&v1370[32] = 0;
                                                                                                    ecs2::Runtime::queueCommand(v1180, (uint64_t)v1370);
                                                                                                    if (*(_DWORD *)&v1370[32] != -1)
                                                                                                      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                    *(_DWORD *)&v1370[32] = -1;
                                                                                                    v1201 = *(_QWORD **)&v1368[24];
                                                                                                    if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                    {
                                                                                                      v1201 = v1368;
                                                                                                      v1202 = 4;
LABEL_2181:
                                                                                                      (*(void (**)(void))(*v1201 + 8 * v1202))();
                                                                                                    }
                                                                                                    else if (*(_QWORD *)&v1368[24])
                                                                                                    {
                                                                                                      v1202 = 5;
                                                                                                      goto LABEL_2181;
                                                                                                    }
                                                                                                    *(_QWORD *)v1370 = v1329;
                                                                                                    v1203 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v1335 + 56, v1329, v1370);
                                                                                                    ++v1203[4];
                                                                                                    if (TextureHandleWithKey)
                                                                                                    {
                                                                                                      *(_QWORD *)v1368 = &off_1E4281448;
                                                                                                      *(_QWORD *)&v1368[8] = TextureHandleWithKey;
                                                                                                      *(_QWORD *)&v1368[16] = v1353;
                                                                                                      *(_QWORD *)&v1368[24] = v1368;
                                                                                                      *(_QWORD *)&v1370[24] = v1370;
                                                                                                      *(_QWORD *)v1370 = &off_1E4281448;
                                                                                                      *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                      *(_DWORD *)&v1370[32] = 0;
                                                                                                      ecs2::Runtime::queueCommand(v1180, (uint64_t)v1370);
                                                                                                      if (*(_DWORD *)&v1370[32] != -1)
                                                                                                        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                      *(_DWORD *)&v1370[32] = -1;
                                                                                                      v1204 = *(_QWORD **)&v1368[24];
                                                                                                      if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                      {
                                                                                                        v1204 = v1368;
                                                                                                        v1205 = 4;
LABEL_2189:
                                                                                                        (*(void (**)(void))(*v1204 + 8 * v1205))();
                                                                                                      }
                                                                                                      else if (*(_QWORD *)&v1368[24])
                                                                                                      {
                                                                                                        v1205 = 5;
                                                                                                        goto LABEL_2189;
                                                                                                      }
                                                                                                      *(_QWORD *)v1368 = &off_1E427F240;
                                                                                                      *(_QWORD *)&v1368[8] = TextureHandleWithKey;
                                                                                                      *(_QWORD *)&v1368[16] = v1353;
                                                                                                      *(_QWORD *)&v1368[24] = v1368;
                                                                                                      *(_QWORD *)&v1370[24] = v1370;
                                                                                                      *(_QWORD *)v1370 = &off_1E427F240;
                                                                                                      *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                      *(_DWORD *)&v1370[32] = 0;
                                                                                                      ecs2::Runtime::queueCommand(v1180, (uint64_t)v1370);
                                                                                                      if (*(_DWORD *)&v1370[32] != -1)
                                                                                                        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                      *(_DWORD *)&v1370[32] = -1;
                                                                                                      v1206 = *(_QWORD **)&v1368[24];
                                                                                                      if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                      {
                                                                                                        v1206 = v1368;
                                                                                                        v1207 = 4;
LABEL_2196:
                                                                                                        (*(void (**)(void))(*v1206 + 8 * v1207))();
                                                                                                      }
                                                                                                      else if (*(_QWORD *)&v1368[24])
                                                                                                      {
                                                                                                        v1207 = 5;
                                                                                                        goto LABEL_2196;
                                                                                                      }
                                                                                                    }
                                                                                                    v1208 = v1362;
                                                                                                    if (v1362)
                                                                                                    {
                                                                                                      v1209 = 0x9DDFEA08EB382D69 * (((8 * v1362) + 8) ^ HIDWORD(v1362));
                                                                                                      v1210 = 0x9DDFEA08EB382D69 * (HIDWORD(v1362) ^ (v1209 >> 47) ^ v1209);
                                                                                                      v1211 = (uint64_t *)((((v1181 - 0x61C8864680B583EBLL) << 6) - 0x61C8864680B583EBLL + ((unint64_t)(v1181 - 0x61C8864680B583EBLL) >> 2) - 0x622015F714C7D297 * (v1210 ^ (v1210 >> 47))) ^ (v1181 - 0x61C8864680B583EBLL));
                                                                                                      v1372 = 0;
                                                                                                      v1212 = mre::GGLResourceStore::getTextureHandleWithKey((int8x8_t *)v1192, v1211, 0);
                                                                                                      if (v1212)
                                                                                                      {
                                                                                                        v1372 = (unint64_t)v1212;
                                                                                                        v1213 = *(_QWORD *)(v1192 + 504);
                                                                                                        if (v1212 < (unint64_t)((*(_QWORD *)(v1192 + 512) - v1213) >> 3))
                                                                                                        {
                                                                                                          v1214 = *(_QWORD *)(v1213 + 8 * v1212);
                                                                                                          v1215 = v1214 && HIDWORD(v1212) == HIDWORD(v1214);
                                                                                                          if (v1215 && *(_QWORD *)(v1192 + 528) + 40 * v1214 != *(_QWORD *)(v1192 + 536))
                                                                                                          {
                                                                                                            v1216 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v1192 + 440), (unint64_t)v1212, &v1372);
                                                                                                            v1217 = v1216[4] + 1;
                                                                                                            goto LABEL_2214;
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v1192 + 104));
                                                                                                        *(_QWORD *)v1370 = v1208;
                                                                                                        *(_QWORD *)&v1370[8] = v1208;
                                                                                                        v1221 = *(unsigned int *)(v1208 + 68) | ((unint64_t)*(unsigned int *)(v1208 + 64) << 32);
                                                                                                        *(_QWORD *)&v1370[16] = *(_QWORD *)(v1208 + 80);
                                                                                                        *(_QWORD *)&v1370[24] = v1221;
                                                                                                        v1370[32] = 1;
                                                                                                        v1222 = geo::packed_array<mre::TextureStorage,geo::handle<mre::Texture>>::push_back((_QWORD *)(v1192 + 480), (__int128 *)v1370);
                                                                                                        v29 = v1349;
                                                                                                        std::__shared_mutex_base::unlock((std::__shared_mutex_base *)(v1192 + 104));
                                                                                                        v1372 = v1222;
                                                                                                        *(_QWORD *)&v1375 = v1222;
                                                                                                        *(_OWORD *)v1370 = (unint64_t)v1211;
                                                                                                        *(_QWORD *)v1368 = v1222;
                                                                                                        v1223 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v1192 + 440), v1222, v1368);
                                                                                                        *(int64x2_t *)(v1223 + 3) = vdupq_n_s64(1uLL);
                                                                                                        *((_WORD *)v1223 + 20) = 256;
                                                                                                        v1224 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v1192 + 64), v1375, (uint64_t *)&v1375);
                                                                                                        v1225 = *(_QWORD *)v1370;
                                                                                                        v1224[3] = *(_QWORD *)v1370;
                                                                                                        v1226 = v1370[8];
                                                                                                        *((_BYTE *)v1224 + 32) = v1370[8];
                                                                                                        v1216 = std::__hash_table<std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,std::__unordered_map_hasher<mre::TextureKey,std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,mre::TextureKeyHasher,std::equal_to<mre::TextureKey>,true>,std::__unordered_map_equal<mre::TextureKey,std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,std::equal_to<mre::TextureKey>,mre::TextureKeyHasher,true>,std::allocator<std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>>>::__emplace_unique_key_args<mre::TextureKey,std::piecewise_construct_t const&,std::tuple<mre::TextureKey const&>,std::tuple<>>((float *)(v1192 + 24), v1225, v1226, v1370);
                                                                                                        v1217 = v1375;
LABEL_2214:
                                                                                                        v1216[4] = v1217;
                                                                                                        v1199 = (unint64_t)v1326;
                                                                                                      }
                                                                                                      v1227 = v1372;
                                                                                                      *(_QWORD *)v1368 = &off_1E427F1F8;
                                                                                                      *(_QWORD *)&v1368[8] = v1372;
                                                                                                      *(_QWORD *)&v1368[16] = v1353;
                                                                                                      *(_QWORD *)&v1368[24] = v1368;
                                                                                                      *(_QWORD *)&v1370[24] = v1370;
                                                                                                      *(_QWORD *)v1370 = &off_1E427F1F8;
                                                                                                      *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                      *(_DWORD *)&v1370[32] = 0;
                                                                                                      ecs2::Runtime::queueCommand(v1180, (uint64_t)v1370);
                                                                                                      if (*(_DWORD *)&v1370[32] != -1)
                                                                                                        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                      *(_DWORD *)&v1370[32] = -1;
                                                                                                      v1228 = *(_QWORD **)&v1368[24];
                                                                                                      if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                      {
                                                                                                        v1228 = v1368;
                                                                                                        v1229 = 4;
LABEL_2221:
                                                                                                        (*(void (**)(void))(*v1228 + 8 * v1229))();
                                                                                                      }
                                                                                                      else if (*(_QWORD *)&v1368[24])
                                                                                                      {
                                                                                                        v1229 = 5;
                                                                                                        goto LABEL_2221;
                                                                                                      }
                                                                                                      v1230 = v1362;
                                                                                                      v1231 = v1363;
                                                                                                      if (v1363)
                                                                                                      {
                                                                                                        v1232 = (unint64_t *)&v1363->__shared_owners_;
                                                                                                        do
                                                                                                          v1233 = __ldxr(v1232);
                                                                                                        while (__stxr(v1233 + 1, v1232));
                                                                                                      }
                                                                                                      v1376 = v1227;
                                                                                                      v1375 = 0uLL;
                                                                                                      *(_QWORD *)&v1368[24] = 0;
                                                                                                      v1234 = operator new(0x28uLL);
                                                                                                      *v1234 = &off_1E427FBD0;
                                                                                                      v1234[1] = v1230;
                                                                                                      v1234[2] = v1231;
                                                                                                      v1234[3] = v1227;
                                                                                                      v1234[4] = v1353;
                                                                                                      *(_QWORD *)&v1370[24] = v1234;
                                                                                                      *(_QWORD *)&v1368[24] = 0;
                                                                                                      *(_DWORD *)&v1370[32] = 0;
                                                                                                      ecs2::Runtime::queueCommand(v1180, (uint64_t)v1370);
                                                                                                      if (*(_DWORD *)&v1370[32] != -1)
                                                                                                        ((void (*)(uint64_t **, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1367, v1370);
                                                                                                      *(_DWORD *)&v1370[32] = -1;
                                                                                                      v1235 = *(_QWORD **)&v1368[24];
                                                                                                      v712 = v1350;
                                                                                                      v1218 = v1323;
                                                                                                      if (*(_BYTE **)&v1368[24] != v1368)
                                                                                                      {
LABEL_2228:
                                                                                                        if (v1235)
                                                                                                        {
                                                                                                          v1236 = 5;
                                                                                                          goto LABEL_2236;
                                                                                                        }
                                                                                                        goto LABEL_2237;
                                                                                                      }
LABEL_2235:
                                                                                                      v1235 = v1368;
                                                                                                      v1236 = 4;
LABEL_2236:
                                                                                                      (*(void (**)(void))(*v1235 + 8 * v1236))();
LABEL_2237:
                                                                                                      if (v1218)
                                                                                                      {
                                                                                                        *(_QWORD *)v1368 = &off_1E42815F8;
                                                                                                        *(_QWORD *)&v1368[8] = v1218;
                                                                                                        *(_QWORD *)&v1368[16] = v1353;
                                                                                                        *(_QWORD *)&v1368[24] = v1368;
                                                                                                        *(_QWORD *)&v1370[24] = v1370;
                                                                                                        *(_QWORD *)v1370 = &off_1E42815F8;
                                                                                                        *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                        *(_DWORD *)&v1370[32] = 0;
                                                                                                        ecs2::Runtime::queueCommand(v1180, (uint64_t)v1370);
                                                                                                        if (*(_DWORD *)&v1370[32] != -1)
                                                                                                          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                        *(_DWORD *)&v1370[32] = -1;
                                                                                                        v1237 = *(_QWORD **)&v1368[24];
                                                                                                        if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                        {
                                                                                                          v1237 = v1368;
                                                                                                          v1238 = 4;
LABEL_2244:
                                                                                                          (*(void (**)(void))(*v1237 + 8 * v1238))();
                                                                                                        }
                                                                                                        else if (*(_QWORD *)&v1368[24])
                                                                                                        {
                                                                                                          v1238 = 5;
                                                                                                          goto LABEL_2244;
                                                                                                        }
                                                                                                        *(_QWORD *)v1368 = &off_1E427F2D0;
                                                                                                        *(_QWORD *)&v1368[8] = v1218;
                                                                                                        *(_QWORD *)&v1368[16] = v1353;
                                                                                                        *(_QWORD *)&v1368[24] = v1368;
                                                                                                        *(_QWORD *)&v1370[24] = v1370;
                                                                                                        *(_QWORD *)v1370 = &off_1E427F2D0;
                                                                                                        *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                        *(_DWORD *)&v1370[32] = 0;
                                                                                                        ecs2::Runtime::queueCommand(v1180, (uint64_t)v1370);
                                                                                                        if (*(_DWORD *)&v1370[32] != -1)
                                                                                                          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                        *(_DWORD *)&v1370[32] = -1;
                                                                                                        v1239 = *(_QWORD **)&v1368[24];
                                                                                                        if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                        {
                                                                                                          v1239 = v1368;
                                                                                                          v1240 = 4;
LABEL_2251:
                                                                                                          (*(void (**)(void))(*v1239 + 8 * v1240))();
                                                                                                        }
                                                                                                        else if (*(_QWORD *)&v1368[24])
                                                                                                        {
                                                                                                          v1240 = 5;
                                                                                                          goto LABEL_2251;
                                                                                                        }
                                                                                                      }
                                                                                                      *(_QWORD *)v1368 = &off_1E4281BE0;
                                                                                                      *(_QWORD *)&v1368[8] = v114;
                                                                                                      *(_QWORD *)&v1368[16] = v1353;
                                                                                                      *(_QWORD *)&v1368[24] = v1368;
                                                                                                      *(_QWORD *)&v1370[24] = v1370;
                                                                                                      *(_QWORD *)v1370 = &off_1E4281BE0;
                                                                                                      *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                      *(_DWORD *)&v1370[32] = 0;
                                                                                                      ecs2::Runtime::queueCommand(v1180, (uint64_t)v1370);
                                                                                                      if (*(_DWORD *)&v1370[32] != -1)
                                                                                                        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                      *(_DWORD *)&v1370[32] = -1;
                                                                                                      v1241 = *(_QWORD **)&v1368[24];
                                                                                                      if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                      {
                                                                                                        v1241 = v1368;
                                                                                                        v1242 = 4;
LABEL_2258:
                                                                                                        (*(void (**)(void))(*v1241 + 8 * v1242))();
                                                                                                      }
                                                                                                      else if (*(_QWORD *)&v1368[24])
                                                                                                      {
                                                                                                        v1242 = 5;
                                                                                                        goto LABEL_2258;
                                                                                                      }
                                                                                                      if (v1315)
                                                                                                      {
                                                                                                        *(_QWORD *)v1368 = &off_1E4280680;
                                                                                                        *(_QWORD *)&v1368[8] = v1342;
                                                                                                        *(_QWORD *)&v1368[16] = v1353;
                                                                                                        *(_QWORD *)&v1368[24] = v1368;
                                                                                                        *(_QWORD *)&v1370[24] = v1370;
                                                                                                        *(_QWORD *)v1370 = &off_1E4280680;
                                                                                                        *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                        *(_DWORD *)&v1370[32] = 0;
                                                                                                        ecs2::Runtime::queueCommand(v1180, (uint64_t)v1370);
                                                                                                        if (*(_DWORD *)&v1370[32] != -1)
                                                                                                          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                        *(_DWORD *)&v1370[32] = -1;
                                                                                                        v1243 = *(_QWORD **)&v1368[24];
                                                                                                        if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                        {
                                                                                                          v1243 = v1368;
                                                                                                          v1244 = 4;
LABEL_2266:
                                                                                                          (*(void (**)(void))(*v1243 + 8 * v1244))();
                                                                                                        }
                                                                                                        else if (*(_QWORD *)&v1368[24])
                                                                                                        {
                                                                                                          v1244 = 5;
                                                                                                          goto LABEL_2266;
                                                                                                        }
                                                                                                      }
                                                                                                      *(_QWORD *)v1368 = &off_1E427F678;
                                                                                                      *(_QWORD *)&v1368[8] = v1199;
                                                                                                      *(_QWORD *)&v1368[16] = v1353;
                                                                                                      *(_QWORD *)&v1368[24] = v1368;
                                                                                                      *(_QWORD *)&v1370[24] = v1370;
                                                                                                      *(_QWORD *)v1370 = &off_1E427F678;
                                                                                                      *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                      *(_DWORD *)&v1370[32] = 0;
                                                                                                      ecs2::Runtime::queueCommand(v1180, (uint64_t)v1370);
                                                                                                      if (*(_DWORD *)&v1370[32] != -1)
                                                                                                        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                      *(_DWORD *)&v1370[32] = -1;
                                                                                                      v1245 = *(_QWORD **)&v1368[24];
                                                                                                      if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                      {
                                                                                                        v1245 = v1368;
                                                                                                        v1246 = 4;
LABEL_2273:
                                                                                                        (*(void (**)(void))(*v1245 + 8 * v1246))();
                                                                                                      }
                                                                                                      else if (*(_QWORD *)&v1368[24])
                                                                                                      {
                                                                                                        v1246 = 5;
                                                                                                        goto LABEL_2273;
                                                                                                      }
                                                                                                      if (v1331)
                                                                                                      {
                                                                                                        *(_DWORD *)&v1370[16] = 0;
                                                                                                        LOBYTE(v1375) = 0;
                                                                                                        LOBYTE(v1376) = 0;
                                                                                                        v1247 = md::MaterialResourceStore::createColorData(v1335, (__int128 *)v1370, (uint64_t)&v1375);
                                                                                                        *(_QWORD *)v1368 = &off_1E427E0D0;
                                                                                                        *(_QWORD *)&v1368[8] = v1247;
                                                                                                        *(_QWORD *)&v1368[16] = v1353;
                                                                                                        *(_QWORD *)&v1368[24] = v1368;
                                                                                                        *(_QWORD *)&v1370[24] = v1370;
                                                                                                        *(_QWORD *)v1370 = &off_1E427E0D0;
                                                                                                        *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                        *(_DWORD *)&v1370[32] = 0;
                                                                                                        ecs2::Runtime::queueCommand(v1180, (uint64_t)v1370);
                                                                                                        if (*(_DWORD *)&v1370[32] != -1)
                                                                                                          ((void (*)(unint64_t *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1372, v1370);
                                                                                                        *(_DWORD *)&v1370[32] = -1;
                                                                                                        v1248 = *(_QWORD **)&v1368[24];
                                                                                                        if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                        {
                                                                                                          v1248 = v1368;
                                                                                                          v1249 = 4;
LABEL_2286:
                                                                                                          (*(void (**)(void))(*v1248 + 8 * v1249))();
                                                                                                        }
                                                                                                        else if (*(_QWORD *)&v1368[24])
                                                                                                        {
                                                                                                          v1249 = 5;
                                                                                                          goto LABEL_2286;
                                                                                                        }
LABEL_2290:
                                                                                                        *(_QWORD *)v1370 = v1247;
                                                                                                        v1252 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v1335 + 944, v1247, v1370);
                                                                                                        ++v1252[4];
                                                                                                        v1179 = *v29;
LABEL_2291:
                                                                                                        v1253 = *(_QWORD *)(v1179 + 8 * v712);
                                                                                                        v1254 = *v21;
                                                                                                        v1375 = *(_OWORD *)(v1253 + 16);
                                                                                                        v1255 = (char *)operator new(0x20uLL);
                                                                                                        *(_QWORD *)v1255 = &off_1E427D500;
                                                                                                        *(_OWORD *)(v1255 + 8) = v1375;
                                                                                                        *((_QWORD *)v1255 + 3) = v1353;
                                                                                                        *(_QWORD *)&v1370[24] = v1255;
                                                                                                        *(_QWORD *)&v1368[24] = 0;
                                                                                                        *(_DWORD *)&v1370[32] = 0;
                                                                                                        ecs2::Runtime::queueCommand(v1254, (uint64_t)v1370);
                                                                                                        if (*(_DWORD *)&v1370[32] != -1)
                                                                                                          ((void (*)(unint64_t *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1372, v1370);
                                                                                                        *(_DWORD *)&v1370[32] = -1;
                                                                                                        v1256 = *(_QWORD **)&v1368[24];
                                                                                                        if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                        {
                                                                                                          v1256 = v1368;
                                                                                                          v1257 = 4;
LABEL_2297:
                                                                                                          (*(void (**)(void))(*v1256 + 8 * v1257))();
                                                                                                        }
                                                                                                        else if (*(_QWORD *)&v1368[24])
                                                                                                        {
                                                                                                          v1257 = 5;
                                                                                                          goto LABEL_2297;
                                                                                                        }
                                                                                                        v1258 = v1355 | *(unsigned __int8 *)(v1253 + 145);
                                                                                                        *(_QWORD *)v1368 = &off_1E427EC10;
                                                                                                        *(_QWORD *)&v1368[8] = v1258;
                                                                                                        *(_DWORD *)&v1368[16] = v1359;
                                                                                                        *(_QWORD *)&v1368[24] = v1368;
                                                                                                        *(_QWORD *)&v1370[24] = v1370;
                                                                                                        *(_QWORD *)v1370 = &off_1E427EC10;
                                                                                                        *(_QWORD *)&v1370[8] = v1258;
                                                                                                        *(_DWORD *)&v1370[16] = v1359;
                                                                                                        *(_DWORD *)&v1370[32] = 0;
                                                                                                        ecs2::Runtime::queueCommand(v1254, (uint64_t)v1370);
                                                                                                        if (*(_DWORD *)&v1370[32] != -1)
                                                                                                          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                        *(_DWORD *)&v1370[32] = -1;
                                                                                                        v1259 = *(_QWORD **)&v1368[24];
                                                                                                        if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                        {
                                                                                                          v1259 = v1368;
                                                                                                          v1260 = 4;
LABEL_2304:
                                                                                                          (*(void (**)(void))(*v1259 + 8 * v1260))();
                                                                                                        }
                                                                                                        else if (*(_QWORD *)&v1368[24])
                                                                                                        {
                                                                                                          v1260 = 5;
                                                                                                          goto LABEL_2304;
                                                                                                        }
                                                                                                        v1261 = *(unsigned int *)(*(_QWORD *)(v1253 + 32) + 16);
                                                                                                        *(_QWORD *)v1368 = &off_1E427DC08;
                                                                                                        *(_QWORD *)&v1368[8] = v1261;
                                                                                                        *(_QWORD *)&v1368[16] = v1353;
                                                                                                        *(_QWORD *)&v1368[24] = v1368;
                                                                                                        *(_QWORD *)&v1370[24] = v1370;
                                                                                                        *(_QWORD *)v1370 = &off_1E427DC08;
                                                                                                        *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                        *(_DWORD *)&v1370[32] = 0;
                                                                                                        ecs2::Runtime::queueCommand(v1254, (uint64_t)v1370);
                                                                                                        if (*(_DWORD *)&v1370[32] != -1)
                                                                                                          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                        *(_DWORD *)&v1370[32] = -1;
                                                                                                        v1262 = *(_QWORD **)&v1368[24];
                                                                                                        if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                        {
                                                                                                          v1262 = v1368;
                                                                                                          v1263 = 4;
LABEL_2311:
                                                                                                          (*(void (**)(void))(*v1262 + 8 * v1263))();
                                                                                                        }
                                                                                                        else if (*(_QWORD *)&v1368[24])
                                                                                                        {
                                                                                                          v1263 = 5;
                                                                                                          goto LABEL_2311;
                                                                                                        }
                                                                                                        v1264 = *(_QWORD *)(v1253 + 32);
                                                                                                        v1265 = *(_QWORD *)(v1253 + 40);
                                                                                                        if (v1265)
                                                                                                        {
                                                                                                          v1266 = (unint64_t *)(v1265 + 8);
                                                                                                          do
                                                                                                            v1267 = __ldxr(v1266);
                                                                                                          while (__stxr(v1267 + 1, v1266));
                                                                                                        }
                                                                                                        v1375 = 0uLL;
                                                                                                        *(_QWORD *)&v1368[24] = 0;
                                                                                                        v1268 = operator new(0x20uLL);
                                                                                                        *v1268 = &off_1E427DC50;
                                                                                                        v1268[1] = v1264;
                                                                                                        v1268[2] = v1265;
                                                                                                        v1268[3] = v1353;
                                                                                                        *(_QWORD *)&v1370[24] = v1268;
                                                                                                        *(_QWORD *)&v1368[24] = 0;
                                                                                                        *(_DWORD *)&v1370[32] = 0;
                                                                                                        ecs2::Runtime::queueCommand(v1254, (uint64_t)v1370);
                                                                                                        if (*(_DWORD *)&v1370[32] != -1)
                                                                                                          ((void (*)(unint64_t *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1372, v1370);
                                                                                                        *(_DWORD *)&v1370[32] = -1;
                                                                                                        v1269 = *(_QWORD **)&v1368[24];
                                                                                                        v17 = v1342;
                                                                                                        if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                        {
                                                                                                          v1269 = v1368;
                                                                                                          v1270 = 4;
LABEL_2321:
                                                                                                          (*(void (**)(void))(*v1269 + 8 * v1270))();
                                                                                                        }
                                                                                                        else if (*(_QWORD *)&v1368[24])
                                                                                                        {
                                                                                                          v1270 = 5;
                                                                                                          goto LABEL_2321;
                                                                                                        }
                                                                                                        v1271 = v1355 | *(unsigned __int8 *)(v1253 + 8);
                                                                                                        *(_QWORD *)v1368 = &off_1E427ECE8;
                                                                                                        *(_QWORD *)&v1368[8] = v1271;
                                                                                                        *(_DWORD *)&v1368[16] = v1359;
                                                                                                        *(_QWORD *)&v1368[24] = v1368;
                                                                                                        *(_QWORD *)&v1370[24] = v1370;
                                                                                                        *(_QWORD *)v1370 = &off_1E427ECE8;
                                                                                                        *(_QWORD *)&v1370[8] = v1271;
                                                                                                        *(_DWORD *)&v1370[16] = v1359;
                                                                                                        *(_DWORD *)&v1370[32] = 0;
                                                                                                        ecs2::Runtime::queueCommand(v1254, (uint64_t)v1370);
                                                                                                        if (*(_DWORD *)&v1370[32] != -1)
                                                                                                          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                        *(_DWORD *)&v1370[32] = -1;
                                                                                                        v1272 = *(_QWORD **)&v1368[24];
                                                                                                        if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                        {
                                                                                                          v1272 = v1368;
                                                                                                          v1273 = 4;
LABEL_2328:
                                                                                                          (*(void (**)(void))(*v1272 + 8 * v1273))();
                                                                                                        }
                                                                                                        else if (*(_QWORD *)&v1368[24])
                                                                                                        {
                                                                                                          v1273 = 5;
                                                                                                          goto LABEL_2328;
                                                                                                        }
                                                                                                        v1274 = v1355 | *(unsigned __int8 *)(*(_QWORD *)(v1253 + 216) + 61);
                                                                                                        *(_QWORD *)v1368 = &off_1E4280518;
                                                                                                        *(_QWORD *)&v1368[8] = v1274;
                                                                                                        *(_DWORD *)&v1368[16] = v1359;
                                                                                                        *(_QWORD *)&v1368[24] = v1368;
                                                                                                        *(_QWORD *)&v1370[24] = v1370;
                                                                                                        *(_QWORD *)v1370 = &off_1E4280518;
                                                                                                        *(_QWORD *)&v1370[8] = v1274;
                                                                                                        *(_DWORD *)&v1370[16] = v1359;
                                                                                                        *(_DWORD *)&v1370[32] = 0;
                                                                                                        ecs2::Runtime::queueCommand(v1254, (uint64_t)v1370);
                                                                                                        if (*(_DWORD *)&v1370[32] != -1)
                                                                                                          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                        *(_DWORD *)&v1370[32] = -1;
                                                                                                        v1275 = *(_QWORD **)&v1368[24];
                                                                                                        if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                        {
                                                                                                          v1275 = v1368;
                                                                                                          v1276 = 4;
LABEL_2335:
                                                                                                          (*(void (**)(void))(*v1275 + 8 * v1276))();
                                                                                                        }
                                                                                                        else if (*(_QWORD *)&v1368[24])
                                                                                                        {
                                                                                                          v1276 = 5;
                                                                                                          goto LABEL_2335;
                                                                                                        }
                                                                                                        v1277 = v1355 | *(unsigned __int8 *)(*(_QWORD *)(v1253 + 216) + 32);
                                                                                                        *(_QWORD *)v1368 = &off_1E427DE48;
                                                                                                        *(_QWORD *)&v1368[8] = v1277;
                                                                                                        *(_DWORD *)&v1368[16] = v1359;
                                                                                                        *(_QWORD *)&v1368[24] = v1368;
                                                                                                        *(_QWORD *)&v1370[24] = v1370;
                                                                                                        *(_QWORD *)v1370 = &off_1E427DE48;
                                                                                                        *(_QWORD *)&v1370[8] = v1277;
                                                                                                        *(_DWORD *)&v1370[16] = v1359;
                                                                                                        *(_DWORD *)&v1370[32] = 0;
                                                                                                        ecs2::Runtime::queueCommand(v1254, (uint64_t)v1370);
                                                                                                        if (*(_DWORD *)&v1370[32] != -1)
                                                                                                          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                        *(_DWORD *)&v1370[32] = -1;
                                                                                                        v1278 = *(_QWORD **)&v1368[24];
                                                                                                        if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                        {
                                                                                                          v1278 = v1368;
                                                                                                          v1279 = 4;
LABEL_2342:
                                                                                                          (*(void (**)(void))(*v1278 + 8 * v1279))();
                                                                                                        }
                                                                                                        else if (*(_QWORD *)&v1368[24])
                                                                                                        {
                                                                                                          v1279 = 5;
                                                                                                          goto LABEL_2342;
                                                                                                        }
                                                                                                        v1280 = **(_QWORD **)(v1253 + 216);
                                                                                                        if (v1280)
                                                                                                        {
                                                                                                          *(_QWORD *)v1368 = &off_1E427DB78;
                                                                                                          *(_QWORD *)&v1368[8] = v1280;
                                                                                                          *(_QWORD *)&v1368[16] = v1353;
                                                                                                          *(_QWORD *)&v1368[24] = v1368;
                                                                                                          *(_QWORD *)&v1370[24] = v1370;
                                                                                                          *(_QWORD *)v1370 = &off_1E427DB78;
                                                                                                          *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                          *(_DWORD *)&v1370[32] = 0;
                                                                                                          ecs2::Runtime::queueCommand(v1254, (uint64_t)v1370);
                                                                                                          if (*(_DWORD *)&v1370[32] != -1)
                                                                                                            ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                          *(_DWORD *)&v1370[32] = -1;
                                                                                                          v1281 = *(_QWORD **)&v1368[24];
                                                                                                          if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                          {
                                                                                                            v1281 = v1368;
                                                                                                            v1282 = 4;
LABEL_2350:
                                                                                                            (*(void (**)(void))(*v1281 + 8 * v1282))();
                                                                                                          }
                                                                                                          else if (*(_QWORD *)&v1368[24])
                                                                                                          {
                                                                                                            v1282 = 5;
                                                                                                            goto LABEL_2350;
                                                                                                          }
                                                                                                        }
                                                                                                        switch(*a7)
                                                                                                        {
                                                                                                          case '!':
                                                                                                          case '"':
                                                                                                            v1283 = *v21;
                                                                                                            v1284 = v1355 | 1;
                                                                                                            goto LABEL_2354;
                                                                                                          case '6':
                                                                                                            v1283 = *v21;
                                                                                                            v1284 = v1355 | 2;
LABEL_2354:
                                                                                                            *(_QWORD *)v1368 = &off_1E427DF20;
                                                                                                            *(_QWORD *)&v1368[8] = v1284;
                                                                                                            *(_DWORD *)&v1368[16] = v1359;
                                                                                                            *(_QWORD *)&v1368[24] = v1368;
                                                                                                            *(_QWORD *)&v1370[24] = v1370;
                                                                                                            *(_QWORD *)v1370 = &off_1E427DF20;
                                                                                                            *(_QWORD *)&v1370[8] = v1284;
                                                                                                            *(_DWORD *)&v1370[16] = v1359;
                                                                                                            *(_DWORD *)&v1370[32] = 0;
                                                                                                            ecs2::Runtime::queueCommand(v1283, (uint64_t)v1370);
                                                                                                            if (*(_DWORD *)&v1370[32] != -1)
                                                                                                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                            *(_DWORD *)&v1370[32] = -1;
                                                                                                            v1285 = *(_QWORD **)&v1368[24];
                                                                                                            if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                            {
                                                                                                              v1285 = v1368;
                                                                                                              v1286 = 4;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              if (!*(_QWORD *)&v1368[24])
                                                                                                                goto LABEL_2361;
                                                                                                              v1286 = 5;
                                                                                                            }
                                                                                                            (*(void (**)(void))(*v1285 + 8 * v1286))();
LABEL_2361:
                                                                                                            v1287 = 0x1000000;
                                                                                                            if (!v1319)
                                                                                                              goto LABEL_2380;
                                                                                                            goto LABEL_2373;
                                                                                                          case '>':
                                                                                                            v1288 = *v21;
                                                                                                            v1289 = v1355 | 3;
                                                                                                            goto LABEL_2365;
                                                                                                          default:
                                                                                                            v1288 = *v21;
                                                                                                            v1289 = v1355;
LABEL_2365:
                                                                                                            *(_QWORD *)v1368 = &off_1E427DF20;
                                                                                                            *(_QWORD *)&v1368[8] = v1289;
                                                                                                            *(_DWORD *)&v1368[16] = v1359;
                                                                                                            *(_QWORD *)&v1368[24] = v1368;
                                                                                                            *(_QWORD *)&v1370[24] = v1370;
                                                                                                            *(_QWORD *)v1370 = &off_1E427DF20;
                                                                                                            *(_QWORD *)&v1370[8] = v1289;
                                                                                                            *(_DWORD *)&v1370[16] = v1359;
                                                                                                            *(_DWORD *)&v1370[32] = 0;
                                                                                                            ecs2::Runtime::queueCommand(v1288, (uint64_t)v1370);
                                                                                                            if (*(_DWORD *)&v1370[32] != -1)
                                                                                                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                            *(_DWORD *)&v1370[32] = -1;
                                                                                                            v1290 = *(_QWORD **)&v1368[24];
                                                                                                            if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                            {
                                                                                                              v1290 = v1368;
                                                                                                              v1291 = 4;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              if (!*(_QWORD *)&v1368[24])
                                                                                                                goto LABEL_2372;
                                                                                                              v1291 = 5;
                                                                                                            }
                                                                                                            (*(void (**)(void))(*v1290 + 8 * v1291))();
LABEL_2372:
                                                                                                            v1287 = 0;
                                                                                                            if (!v1319)
                                                                                                              goto LABEL_2380;
LABEL_2373:
                                                                                                            v1292 = *v21;
                                                                                                            *(_QWORD *)v1368 = &off_1E427D6B0;
                                                                                                            *(_QWORD *)&v1368[8] = v1355;
                                                                                                            *(_DWORD *)&v1368[16] = v1359;
                                                                                                            *(_QWORD *)&v1368[24] = v1368;
                                                                                                            *(_QWORD *)&v1370[24] = v1370;
                                                                                                            *(_QWORD *)v1370 = &off_1E427D6B0;
                                                                                                            *(_QWORD *)&v1370[8] = v1355;
                                                                                                            *(_DWORD *)&v1370[16] = v1359;
                                                                                                            *(_DWORD *)&v1370[32] = 0;
                                                                                                            ecs2::Runtime::queueCommand(v1292, (uint64_t)v1370);
                                                                                                            if (*(_DWORD *)&v1370[32] != -1)
                                                                                                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                            *(_DWORD *)&v1370[32] = -1;
                                                                                                            v1293 = *(_QWORD **)&v1368[24];
                                                                                                            if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                            {
                                                                                                              v1293 = v1368;
                                                                                                              v1294 = 4;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              if (!*(_QWORD *)&v1368[24])
                                                                                                                goto LABEL_2380;
                                                                                                              v1294 = 5;
                                                                                                            }
                                                                                                            (*(void (**)(void))(*v1293 + 8 * v1294))();
LABEL_2380:
                                                                                                            v1295 = *v21;
                                                                                                            v1296 = v1355 | *(unsigned __int8 *)(*(_QWORD *)(*v29 + 8 * v1350) + 144) | v1287 | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*v29 + 8 * v1350) + 147) << 16) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*v29 + 8 * v1350) + 149) << 8);
                                                                                                            *(_QWORD *)v1368 = &off_1E4280908;
                                                                                                            *(_QWORD *)&v1368[8] = v1296;
                                                                                                            *(_DWORD *)&v1368[16] = v1359;
                                                                                                            *(_QWORD *)&v1368[24] = v1368;
                                                                                                            *(_QWORD *)&v1370[24] = v1370;
                                                                                                            *(_QWORD *)v1370 = &off_1E4280908;
                                                                                                            *(_QWORD *)&v1370[8] = v1296;
                                                                                                            *(_DWORD *)&v1370[16] = v1359;
                                                                                                            *(_DWORD *)&v1370[32] = 0;
                                                                                                            ecs2::Runtime::queueCommand(v1295, (uint64_t)v1370);
                                                                                                            if (*(_DWORD *)&v1370[32] != -1)
                                                                                                              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                            *(_DWORD *)&v1370[32] = -1;
                                                                                                            v1297 = *(_QWORD **)&v1368[24];
                                                                                                            if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                            {
                                                                                                              v1297 = v1368;
                                                                                                              v1298 = 4;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              if (!*(_QWORD *)&v1368[24])
                                                                                                                goto LABEL_2387;
                                                                                                              v1298 = 5;
                                                                                                            }
                                                                                                            (*(void (**)(void))(*v1297 + 8 * v1298))();
LABEL_2387:
                                                                                                            v1299 = v1361;
                                                                                                            if (!v1361)
                                                                                                              goto LABEL_2391;
                                                                                                            v1300 = (unint64_t *)&v1361->__shared_owners_;
                                                                                                            do
                                                                                                              v1301 = __ldaxr(v1300);
                                                                                                            while (__stlxr(v1301 - 1, v1300));
                                                                                                            if (!v1301)
                                                                                                            {
                                                                                                              ((void (*)(std::__shared_weak_count *))v1299->__on_zero_shared)(v1299);
                                                                                                              std::__shared_weak_count::__release_weak(v1299);
                                                                                                              v1302 = v1363;
                                                                                                              if (!v1363)
                                                                                                                goto LABEL_38;
                                                                                                            }
                                                                                                            else
                                                                                                            {
LABEL_2391:
                                                                                                              v1302 = v1363;
                                                                                                              if (!v1363)
                                                                                                                goto LABEL_38;
                                                                                                            }
                                                                                                            v1303 = (unint64_t *)&v1302->__shared_owners_;
                                                                                                            do
                                                                                                              v1304 = __ldaxr(v1303);
                                                                                                            while (__stlxr(v1304 - 1, v1303));
                                                                                                            if (!v1304)
                                                                                                            {
                                                                                                              ((void (*)(std::__shared_weak_count *))v1302->__on_zero_shared)(v1302);
                                                                                                              std::__shared_weak_count::__release_weak(v1302);
                                                                                                            }
LABEL_38:
                                                                                                            v46 = v1350 + 1;
                                                                                                            if (v1350 + 1 < (unint64_t)*a12)
                                                                                                              goto LABEL_39;
                                                                                                            goto LABEL_2398;
                                                                                                        }
                                                                                                      }
                                                                                                      *(_QWORD *)v1368 = &off_1E427E0D0;
                                                                                                      *(_QWORD *)&v1368[8] = v1199;
                                                                                                      *(_QWORD *)&v1368[16] = v1353;
                                                                                                      *(_QWORD *)&v1368[24] = v1368;
                                                                                                      *(_QWORD *)&v1370[24] = v1370;
                                                                                                      *(_QWORD *)v1370 = &off_1E427E0D0;
                                                                                                      *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                      *(_DWORD *)&v1370[32] = 0;
                                                                                                      ecs2::Runtime::queueCommand(v1180, (uint64_t)v1370);
                                                                                                      if (*(_DWORD *)&v1370[32] != -1)
                                                                                                        ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                      *(_DWORD *)&v1370[32] = -1;
                                                                                                      v1250 = *(_QWORD **)&v1368[24];
                                                                                                      if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                      {
                                                                                                        v1250 = v1368;
                                                                                                        v1251 = 4;
LABEL_2288:
                                                                                                        (*(void (**)(void))(*v1250 + 8 * v1251))();
                                                                                                      }
                                                                                                      else if (*(_QWORD *)&v1368[24])
                                                                                                      {
                                                                                                        v1251 = 5;
                                                                                                        goto LABEL_2288;
                                                                                                      }
                                                                                                      v1247 = v1199;
                                                                                                      goto LABEL_2290;
                                                                                                    }
                                                                                                    v712 = v1350;
                                                                                                    v1218 = v1323;
                                                                                                    if (!v1322)
                                                                                                      goto LABEL_2237;
                                                                                                    *(_QWORD *)v1368 = &off_1E4280950;
                                                                                                    *(_QWORD *)&v1368[8] = v1322;
                                                                                                    *(_QWORD *)&v1368[16] = v1353;
                                                                                                    *(_QWORD *)&v1368[24] = v1368;
                                                                                                    *(_QWORD *)&v1370[24] = v1370;
                                                                                                    *(_QWORD *)v1370 = &off_1E4280950;
                                                                                                    *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                    *(_DWORD *)&v1370[32] = 0;
                                                                                                    ecs2::Runtime::queueCommand(v1180, (uint64_t)v1370);
                                                                                                    if (*(_DWORD *)&v1370[32] != -1)
                                                                                                      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                    *(_DWORD *)&v1370[32] = -1;
                                                                                                    v1219 = *(_QWORD **)&v1368[24];
                                                                                                    if (*(_BYTE **)&v1368[24] == v1368)
                                                                                                    {
                                                                                                      v1219 = v1368;
                                                                                                      v1220 = 4;
LABEL_2231:
                                                                                                      (*(void (**)(void))(*v1219 + 8 * v1220))();
                                                                                                    }
                                                                                                    else if (*(_QWORD *)&v1368[24])
                                                                                                    {
                                                                                                      v1220 = 5;
                                                                                                      goto LABEL_2231;
                                                                                                    }
                                                                                                    *(_QWORD *)v1368 = &off_1E427F1F8;
                                                                                                    *(_QWORD *)&v1368[8] = v1322;
                                                                                                    *(_QWORD *)&v1368[16] = v1353;
                                                                                                    *(_QWORD *)&v1368[24] = v1368;
                                                                                                    *(_QWORD *)&v1370[24] = v1370;
                                                                                                    *(_QWORD *)v1370 = &off_1E427F1F8;
                                                                                                    *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
                                                                                                    *(_DWORD *)&v1370[32] = 0;
                                                                                                    ecs2::Runtime::queueCommand(v1180, (uint64_t)v1370);
                                                                                                    if (*(_DWORD *)&v1370[32] != -1)
                                                                                                      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
                                                                                                    *(_DWORD *)&v1370[32] = -1;
                                                                                                    v1235 = *(_QWORD **)&v1368[24];
                                                                                                    if (*(_BYTE **)&v1368[24] != v1368)
                                                                                                      goto LABEL_2228;
                                                                                                    goto LABEL_2235;
                                                                                                  }
LABEL_2405:
                                                                                                  std::__throw_bad_array_new_length[abi:nn180100]();
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                            abort();
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                      abort();
                                                                                    }
                                                                                  }
                                                                                }
                                                                                abort();
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              if (v883 >= *(_QWORD *)&v877)
                                                                                v883 %= *(_QWORD *)&v877;
                                                                              if (v883 != v879)
                                                                                goto LABEL_1645;
                                                                            }
                                                                            v881 = (uint64_t **)*v881;
                                                                            if (!v881)
                                                                              goto LABEL_1645;
                                                                          }
                                                                        }
                                                                        v875 = 5;
                                                                      }
                                                                      (*(void (**)(void))(*v874 + 8 * v875))();
                                                                      goto LABEL_1606;
                                                                    }
                                                                    goto LABEL_2408;
                                                                  }
                                                                  v833 = 5;
                                                                }
                                                                (*(void (**)(void))(*v832 + 8 * v833))();
                                                                goto LABEL_1537;
                                                              }
                                                              v818 = *(_QWORD *)(v817 + 8 * v712);
                                                              if (!*(_BYTE *)(v818 + 124))
                                                              {
                                                                *(_OWORD *)(v818 + 100) = xmmword_19FFB3470;
                                                                *(_QWORD *)(v818 + 116) = 0x80000000800000;
                                                                *(_BYTE *)(v818 + 124) = 1;
                                                                v819 = *(_QWORD *)(*v1349 + 8 * v712);
                                                                if (!*(_BYTE *)(v819 + 140))
                                                                  *(_BYTE *)(v819 + 140) = 1;
                                                                *(_DWORD *)(v819 + 136) = 0;
                                                                *(_QWORD *)(v819 + 128) = 0;
                                                                v820 = *(_QWORD *)(*v1349 + 8 * v712);
                                                                if (!*(_BYTE *)(v820 + 124))
                                                                  goto LABEL_2408;
                                                                if (!*(_BYTE *)(v820 + 140))
                                                                  goto LABEL_2408;
                                                                md::GeometryLogic::calculateGeocentricBounds((float32_t *)(v820 + 76), v1364, v820 + 100, v820 + 128);
                                                                v818 = *(_QWORD *)(*v1349 + 8 * v712);
                                                                if (!*(_BYTE *)(v818 + 124))
                                                                  goto LABEL_2408;
                                                              }
                                                              *(_OWORD *)v1368 = *(_OWORD *)(v818 + 100);
                                                              *(_QWORD *)&v1368[16] = *(_QWORD *)(v818 + 116);
                                                              if (!*(_BYTE *)(v818 + 140))
                                                              {
LABEL_2408:
                                                                std::__throw_bad_optional_access[abi:nn180100]();
                                                                __break(1u);
                                                                return;
                                                              }
                                                              *(_QWORD *)&v1368[24] = *(_QWORD *)(v818 + 128);
                                                              LODWORD(v1369) = *(_DWORD *)(v818 + 136);
                                                              v821 = *v21;
                                                              v822 = (char *)operator new(0x38uLL);
                                                              *(_QWORD *)v822 = &off_1E427E3A0;
                                                              v823 = *(_OWORD *)&v1368[16];
                                                              *(_OWORD *)(v822 + 8) = *(_OWORD *)v1368;
                                                              *(_OWORD *)(v822 + 24) = v823;
                                                              *((_DWORD *)v822 + 10) = v1369;
                                                              *(_QWORD *)(v822 + 44) = v1353;
                                                              *(_QWORD *)&v1370[24] = v822;
                                                              v1377 = 0;
                                                              *(_DWORD *)&v1370[32] = 0;
                                                              ecs2::Runtime::queueCommand(v821, (uint64_t)v1370);
                                                              if (*(_DWORD *)&v1370[32] != -1)
                                                                ((void (*)(unint64_t *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1372, v1370);
                                                              *(_DWORD *)&v1370[32] = -1;
                                                              v824 = v1377;
                                                              if (v1377 == &v1375)
                                                              {
                                                                v824 = &v1375;
                                                                v825 = 4;
                                                              }
                                                              else
                                                              {
                                                                if (!v1377)
                                                                {
LABEL_1522:
                                                                  v817 = *v1349;
                                                                  goto LABEL_1523;
                                                                }
                                                                v825 = 5;
                                                              }
                                                              (*(void (**)(void))(*(_QWORD *)v824 + 8 * v825))();
                                                              goto LABEL_1522;
                                                            }
                                                            v793 = 5;
                                                          }
                                                          (*(void (**)(void))(*v792 + 8 * v793))();
                                                          goto LABEL_1462;
                                                        }
                                                        v778 = 5;
                                                      }
                                                      (*(void (**)(void))(*v777 + 8 * v778))();
                                                      goto LABEL_1429;
                                                    }
                                                    v740 = *(_QWORD *)(*v707 + 8);
                                                    if ((v704 & (v704 - 1)) != 0)
                                                    {
                                                      if (v740 >= v704)
                                                        v740 %= v704;
                                                    }
                                                    else
                                                    {
                                                      v740 &= v704 - 1;
                                                    }
                                                    v739 = (_QWORD *)(*((_QWORD *)v601 + 214) + 8 * v740);
                                                  }
                                                  *v739 = v707;
                                                  goto LABEL_1361;
                                                }
                                                if (v726 >= v716)
                                                  v726 %= v716;
                                                *(_QWORD *)(*((_QWORD *)v601 + 214) + 8 * v726) = v725;
                                                v733 = (_QWORD *)*v724;
                                                if (!*v724)
                                                  goto LABEL_1347;
                                                while (1)
                                                {
                                                  v735 = v733[1];
                                                  if (v735 >= v716)
                                                    v735 %= v716;
                                                  if (v735 != v726)
                                                  {
                                                    v736 = *((_QWORD *)v601 + 214);
                                                    if (!*(_QWORD *)(v736 + 8 * v735))
                                                    {
                                                      *(_QWORD *)(v736 + 8 * v735) = v724;
                                                      goto LABEL_1338;
                                                    }
                                                    *v724 = *v733;
                                                    v734 = 8 * v735;
                                                    *v733 = **(_QWORD **)(*((_QWORD *)v601 + 214) + v734);
                                                    **(_QWORD **)(*((_QWORD *)v601 + 214) + v734) = v733;
                                                    v733 = v724;
                                                  }
                                                  v735 = v726;
LABEL_1338:
                                                  v724 = v733;
                                                  v733 = (_QWORD *)*v733;
                                                  v726 = v735;
                                                  if (!v733)
                                                    goto LABEL_1347;
                                                }
                                              }
LABEL_1306:
                                              if (v717)
                                                goto LABEL_1347;
                                              v718 = vcvtps_u32_f32((float)*((unint64_t *)v601 + 217) / *((float *)v601 + 436));
                                              if (v704 < 3
                                                || (v719 = (uint8x8_t)vcnt_s8((int8x8_t)v704),
                                                    v719.i16[0] = vaddlv_u8(v719),
                                                    v719.u32[0] > 1uLL))
                                              {
                                                v718 = std::__next_prime(v718);
                                              }
                                              else
                                              {
                                                v720 = 1 << -(char)__clz(v718 - 1);
                                                if (v718 >= 2)
                                                  v718 = v720;
                                              }
                                              if (v716 <= v718)
                                                v716 = v718;
                                              if (v716 >= v704)
                                                goto LABEL_1347;
                                              if (!v716)
                                              {
                                                v737 = (void *)*((_QWORD *)v601 + 214);
                                                *((_QWORD *)v601 + 214) = 0;
                                                if (v737)
                                                  operator delete(v737);
                                                *((_QWORD *)v601 + 215) = 0;
                                                goto LABEL_1347;
                                              }
                                              goto LABEL_1318;
                                            }
                                            v20 = v1343;
                                            v712 = v1350;
                                            v717 = v716 >= v704;
                                            if (v716 > v704)
                                              goto LABEL_1318;
                                            goto LABEL_1306;
                                          }
                                          v703 = *(_QWORD *)(*v671 + 8);
                                          if ((v668 & (v668 - 1)) != 0)
                                          {
                                            if (v703 >= v668)
                                              v703 %= v668;
                                          }
                                          else
                                          {
                                            v703 &= v668 - 1;
                                          }
                                          v702 = (_QWORD *)(*((_QWORD *)v601 + 209) + 8 * v703);
                                        }
                                        *v702 = v671;
                                        goto LABEL_1271;
                                      }
                                      if (v689 >= v679)
                                        v689 %= v679;
                                      *(_QWORD *)(*((_QWORD *)v601 + 209) + 8 * v689) = v688;
                                      v696 = (_QWORD *)*v687;
                                      if (!*v687)
                                        goto LABEL_1257;
                                      while (1)
                                      {
                                        v698 = v696[1];
                                        if (v698 >= v679)
                                          v698 %= v679;
                                        if (v698 != v689)
                                        {
                                          v699 = *((_QWORD *)v601 + 209);
                                          if (!*(_QWORD *)(v699 + 8 * v698))
                                          {
                                            *(_QWORD *)(v699 + 8 * v698) = v687;
                                            goto LABEL_1248;
                                          }
                                          *v687 = *v696;
                                          v697 = 8 * v698;
                                          *v696 = **(_QWORD **)(*((_QWORD *)v601 + 209) + v697);
                                          **(_QWORD **)(*((_QWORD *)v601 + 209) + v697) = v696;
                                          v696 = v687;
                                        }
                                        v698 = v689;
LABEL_1248:
                                        v687 = v696;
                                        v696 = (_QWORD *)*v696;
                                        v689 = v698;
                                        if (!v696)
                                          goto LABEL_1257;
                                      }
                                    }
LABEL_1217:
                                    if (v680)
                                      goto LABEL_1257;
                                    v681 = vcvtps_u32_f32((float)*((unint64_t *)v601 + 212) / *((float *)v601 + 426));
                                    if (v668 < 3
                                      || (v682 = (uint8x8_t)vcnt_s8((int8x8_t)v668),
                                          v682.i16[0] = vaddlv_u8(v682),
                                          v682.u32[0] > 1uLL))
                                    {
                                      v681 = std::__next_prime(v681);
                                    }
                                    else
                                    {
                                      v683 = 1 << -(char)__clz(v681 - 1);
                                      if (v681 >= 2)
                                        v681 = v683;
                                    }
                                    if (v679 <= v681)
                                      v679 = v681;
                                    if (v679 >= v668)
                                      goto LABEL_1257;
                                    if (!v679)
                                    {
                                      v700 = (void *)*((_QWORD *)v601 + 209);
                                      *((_QWORD *)v601 + 209) = 0;
                                      if (v700)
                                        operator delete(v700);
                                      *((_QWORD *)v601 + 210) = 0;
                                      goto LABEL_1257;
                                    }
                                    goto LABEL_1228;
                                  }
                                  v21 = v1348;
                                  v680 = v679 >= v668;
                                  if (v679 > v668)
                                    goto LABEL_1228;
                                  goto LABEL_1217;
                                }
                                v667 = *(_QWORD *)(*(_QWORD *)v635 + 8);
                                if ((v650 & (v650 - 1)) != 0)
                                {
                                  if (v667 >= v650)
                                    v667 %= v650;
                                }
                                else
                                {
                                  v667 &= v650 - 1;
                                }
                                v666 = (uint64_t *)(*v649 + 8 * v667);
                              }
                              *v666 = v635;
                              goto LABEL_1181;
                            }
LABEL_2406:
                            abort();
                          }
                          v526 = (unint64_t)v516 - MaterialHandle - 8;
                          if (v526 >= 0x58)
                          {
                            v519 = v1350;
                            if (MaterialHandle - (unint64_t)v524 >= 0x20)
                            {
                              v527 = (v526 >> 3) + 1;
                              v528 = &v524[8 * v520 - 16];
                              v529 = v516 - 2;
                              v530 = v527 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v531 = *(_OWORD *)v529;
                                *((_OWORD *)v528 - 1) = *((_OWORD *)v529 - 1);
                                *(_OWORD *)v528 = v531;
                                v528 -= 32;
                                v529 -= 4;
                                v530 -= 4;
                              }
                              while (v530);
                              v525 -= v527 & 0x3FFFFFFFFFFFFFFCLL;
                              v516 -= v527 & 0x3FFFFFFFFFFFFFFCLL;
                              if (v527 == (v527 & 0x3FFFFFFFFFFFFFFCLL))
                                goto LABEL_924;
                            }
                          }
                          else
                          {
                            v519 = v1350;
                          }
                          do
                          {
                            v532 = *--v516;
                            *--v525 = v532;
                          }
                          while (v516 != (unint64_t *)MaterialHandle);
LABEL_924:
                          v516 = (unint64_t *)v514[4];
                          goto LABEL_925;
                        }
                        v496 = 5;
                      }
                      (*(void (**)(void))(*v495 + 8 * v496))();
                      goto LABEL_875;
                    }
                  }
                  if (v339)
                    v341 = 256;
                  else
                    v341 = 0;
                  v342 = *(_QWORD *)(v59 + 400);
                  v1336 = v87;
                  if (*(_QWORD *)(v59 + 392) == v342)
                  {
                    v344 = (-1431655765 * (*(_DWORD *)(v59 + 448) - *(_DWORD *)(v59 + 440))) | 0x100000000;
                    v346 = *(uint64_t **)(v59 + 424);
                    v345 = *(_QWORD *)(v59 + 432);
                    if ((unint64_t)v346 >= v345)
                    {
                      v348 = *(char **)(v59 + 416);
                      v349 = ((char *)v346 - v348) >> 3;
                      v350 = v349 + 1;
                      if ((unint64_t)(v349 + 1) >> 61)
                        goto LABEL_2410;
                      v351 = v345 - (_QWORD)v348;
                      if (v351 >> 2 > v350)
                        v350 = v351 >> 2;
                      if ((unint64_t)v351 >= 0x7FFFFFFFFFFFFFF8)
                        v350 = 0x1FFFFFFFFFFFFFFFLL;
                      v1357 = v341;
                      v1352 = v350;
                      if (v350)
                      {
                        if (v350 >> 61)
                          goto LABEL_2405;
                        v352 = (char *)operator new(8 * v350);
                      }
                      else
                      {
                        v352 = 0;
                      }
                      v353 = (uint64_t *)&v352[8 * v349];
                      *v353 = v344;
                      v347 = v353 + 1;
                      if (v346 != (uint64_t *)v348)
                      {
                        v354 = (char *)v346 - v348 - 8;
                        if (v354 < 0x58)
                          goto LABEL_2425;
                        if ((unint64_t)(v348 - v352) < 0x20)
                          goto LABEL_2425;
                        v355 = (v354 >> 3) + 1;
                        v356 = &v352[8 * v349 - 16];
                        v357 = v346 - 2;
                        v358 = v355 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v359 = *(_OWORD *)v357;
                          *((_OWORD *)v356 - 1) = *((_OWORD *)v357 - 1);
                          *(_OWORD *)v356 = v359;
                          v356 -= 32;
                          v357 -= 4;
                          v358 -= 4;
                        }
                        while (v358);
                        v353 -= v355 & 0x3FFFFFFFFFFFFFFCLL;
                        v346 -= v355 & 0x3FFFFFFFFFFFFFFCLL;
                        if (v355 != (v355 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_2425:
                          do
                          {
                            v360 = *--v346;
                            *--v353 = v360;
                          }
                          while (v346 != (uint64_t *)v348);
                        }
                        v346 = *(uint64_t **)(v59 + 416);
                      }
                      *(_QWORD *)(v59 + 416) = v353;
                      *(_QWORD *)(v59 + 424) = v347;
                      *(_QWORD *)(v59 + 432) = &v352[8 * v1352];
                      if (v346)
                        operator delete(v346);
                      v341 = v1357;
                    }
                    else
                    {
                      *v346 = v344;
                      v347 = v346 + 1;
                    }
                    *(_QWORD *)(v59 + 424) = v347;
                    v114 = *(v347 - 1);
                    v20 = v1343;
                  }
                  else
                  {
                    v343 = *(_QWORD *)(v342 - 8);
                    *(_QWORD *)(v59 + 400) = v342 - 8;
                    *(_DWORD *)(*(_QWORD *)(v59 + 416) + 8 * v343) = -1431655765
                                                                   * (*(_DWORD *)(v59 + 448) - *(_DWORD *)(v59 + 440));
                    *(_DWORD *)(*(_QWORD *)(v59 + 416) + 8 * v343 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v59 + 416) + 8 * v343 + 4) << 32)
                                                                        + 0x100000000) >> 32;
                    v114 = v343 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v59 + 416)
                                                                                   + 8 * v343
                                                                                   + 4) << 32);
                  }
                  v361 = v341 | v337;
                  v363 = *(_BYTE **)(v59 + 448);
                  v362 = *(_QWORD *)(v59 + 456);
                  if ((unint64_t)v363 >= v362)
                  {
                    v366 = *(_BYTE **)(v59 + 440);
                    v367 = 0xAAAAAAAAAAAAAAABLL * (v363 - v366) + 1;
                    if (v367 >= 0x5555555555555556)
                      goto LABEL_2410;
                    v368 = 0xAAAAAAAAAAAAAAABLL * (v362 - (_QWORD)v366);
                    if (2 * v368 > v367)
                      v367 = 2 * v368;
                    if (v368 >= 0x2AAAAAAAAAAAAAAALL)
                      v369 = 0x5555555555555555;
                    else
                      v369 = v367;
                    if (v369)
                    {
                      if (v369 >= 0x5555555555555556)
                        goto LABEL_2405;
                      v370 = (char *)operator new(3 * v369);
                    }
                    else
                    {
                      v370 = 0;
                    }
                    v371 = &v370[v363 - v366];
                    v371[2] = 0;
                    *(_WORD *)v371 = v361;
                    v372 = v371;
                    if (v363 == v366)
                    {
                      v373 = v1343;
                    }
                    else
                    {
                      v373 = v1343;
                      do
                      {
                        v374 = *(_WORD *)(v363 - 3);
                        v363 -= 3;
                        v375 = v363[2];
                        *(_WORD *)(v372 - 3) = v374;
                        v372 -= 3;
                        v372[2] = v375;
                      }
                      while (v363 != v366);
                      v363 = *(_BYTE **)(v59 + 440);
                    }
                    v332 = (_QWORD *)(v59 + 528);
                    v364 = v373;
                    v365 = v371 + 3;
                    *(_QWORD *)(v59 + 440) = v372;
                    *(_QWORD *)(v59 + 448) = v371 + 3;
                    *(_QWORD *)(v59 + 456) = &v370[3 * v369];
                    if (v363)
                      operator delete(v363);
                  }
                  else
                  {
                    v364 = v20;
                    v363[2] = 0;
                    *(_WORD *)v363 = v361;
                    v365 = v363 + 3;
                  }
                  *(_QWORD *)(v59 + 448) = v365;
                  v377 = *(char **)(v59 + 472);
                  v376 = *(_QWORD *)(v59 + 480);
                  if ((unint64_t)v377 < v376)
                  {
                    *(_QWORD *)v377 = v114;
                    v378 = (unint64_t)(v377 + 8);
                    v20 = v364;
                    goto LABEL_602;
                  }
                  v379 = *(char **)(v59 + 464);
                  v380 = (v377 - v379) >> 3;
                  v381 = v380 + 1;
                  if (!((unint64_t)(v380 + 1) >> 61))
                  {
                    v382 = v376 - (_QWORD)v379;
                    if (v382 >> 2 > v381)
                      v381 = v382 >> 2;
                    if ((unint64_t)v382 >= 0x7FFFFFFFFFFFFFF8)
                      v381 = 0x1FFFFFFFFFFFFFFFLL;
                    v1358 = v381;
                    if (v381)
                    {
                      if (v381 >> 61)
                        goto LABEL_2405;
                      v383 = operator new(8 * v381);
                    }
                    else
                    {
                      v383 = 0;
                    }
                    v384 = &v383[8 * v380];
                    *v384 = v114;
                    v378 = (unint64_t)(v384 + 1);
                    if (v377 == v379)
                    {
                      v20 = v1343;
                      v386 = v1358;
                      goto LABEL_600;
                    }
                    v385 = v377 - v379 - 8;
                    v386 = v1358;
                    if (v385 >= 0x58)
                    {
                      v20 = v1343;
                      if ((unint64_t)(v379 - v383) >= 0x20)
                      {
                        v387 = (v385 >> 3) + 1;
                        v388 = &v383[8 * v380 - 16];
                        v389 = v377 - 16;
                        v390 = v387 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v391 = *(_OWORD *)v389;
                          *(v388 - 1) = *((_OWORD *)v389 - 1);
                          *v388 = v391;
                          v388 -= 2;
                          v389 -= 32;
                          v390 -= 4;
                        }
                        while (v390);
                        v384 -= v387 & 0x3FFFFFFFFFFFFFFCLL;
                        v377 -= 8 * (v387 & 0x3FFFFFFFFFFFFFFCLL);
                        if (v387 == (v387 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_600:
                          *(_QWORD *)(v59 + 464) = v384;
                          *(_QWORD *)(v59 + 472) = v378;
                          *(_QWORD *)(v59 + 480) = &v383[8 * v386];
                          if (v379)
                            operator delete(v379);
LABEL_602:
                          *(_QWORD *)(v59 + 472) = v378;
                          v393 = (uint64_t *)(v59 + 352);
                          v394 = *(_QWORD *)(v59 + 360);
                          if (v394)
                          {
                            v395 = (uint8x8_t)vcnt_s8((int8x8_t)v394);
                            v395.i16[0] = vaddlv_u8(v395);
                            if (v395.u32[0] > 1uLL)
                            {
                              v378 = v114;
                              if (v114 >= v394)
                                v378 = v114 % v394;
                            }
                            else
                            {
                              v378 = (v394 - 1) & v114;
                            }
                            v396 = *(_QWORD **)(*v393 + 8 * v378);
                            if (v396)
                            {
                              v397 = (_QWORD *)*v396;
                              if (v397)
                              {
                                if (v395.u32[0] < 2uLL)
                                {
                                  while (1)
                                  {
                                    v399 = v397[1];
                                    if (v399 == v114)
                                    {
                                      if (v397[2] == v114)
                                        goto LABEL_661;
                                    }
                                    else if ((v399 & (v394 - 1)) != v378)
                                    {
                                      goto LABEL_622;
                                    }
                                    v397 = (_QWORD *)*v397;
                                    if (!v397)
                                      goto LABEL_622;
                                  }
                                }
                                do
                                {
                                  v398 = v397[1];
                                  if (v398 == v114)
                                  {
                                    if (v397[2] == v114)
                                      goto LABEL_661;
                                  }
                                  else
                                  {
                                    if (v398 >= v394)
                                      v398 %= v394;
                                    if (v398 != v378)
                                      break;
                                  }
                                  v397 = (_QWORD *)*v397;
                                }
                                while (v397);
                              }
                            }
                          }
LABEL_622:
                          v400 = (char *)operator new(0x30uLL);
                          *(_QWORD *)v400 = 0;
                          *((_QWORD *)v400 + 1) = v114;
                          *((_QWORD *)v400 + 2) = v114;
                          *(int64x2_t *)(v400 + 24) = vdupq_n_s64(1uLL);
                          v400[40] = 0;
                          v401 = (float)(unint64_t)(*(_QWORD *)(v59 + 376) + 1);
                          v402 = *(float *)(v59 + 384);
                          if (!v394 || (float)(v402 * (float)v394) < v401)
                          {
                            v403 = v394 < 3 || (v394 & (v394 - 1)) != 0;
                            v404 = v403 | (2 * v394);
                            v405 = vcvtps_u32_f32(v401 / v402);
                            if (v404 <= v405)
                              v406 = v405;
                            else
                              v406 = v404;
                            if (v406 == 1)
                            {
                              v406 = 2;
                            }
                            else if ((v406 & (v406 - 1)) != 0)
                            {
                              v406 = std::__next_prime(v406);
                              v394 = *(_QWORD *)(v59 + 360);
                            }
                            if (v406 > v394)
                              goto LABEL_635;
                            if (v406 < v394)
                            {
                              v407 = vcvtps_u32_f32((float)*(unint64_t *)(v59 + 376) / *(float *)(v59 + 384));
                              if (v394 < 3
                                || (v408 = (uint8x8_t)vcnt_s8((int8x8_t)v394),
                                    v408.i16[0] = vaddlv_u8(v408),
                                    v408.u32[0] > 1uLL))
                              {
                                v407 = std::__next_prime(v407);
                              }
                              else
                              {
                                v409 = 1 << -(char)__clz(v407 - 1);
                                if (v407 >= 2)
                                  v407 = v409;
                              }
                              if (v406 <= v407)
                                v406 = v407;
                              if (v406 < v394)
LABEL_635:
                                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v59 + 352, v406);
                            }
                            v394 = *(_QWORD *)(v59 + 360);
                            if ((v394 & (v394 - 1)) != 0)
                            {
                              if (v114 >= v394)
                                v378 = v114 % v394;
                              else
                                v378 = v114;
                            }
                            else
                            {
                              v378 = (v394 - 1) & v114;
                            }
                          }
                          v410 = *v393;
                          v411 = *(_QWORD **)(*v393 + 8 * v378);
                          if (v411)
                          {
                            *(_QWORD *)v400 = *v411;
                          }
                          else
                          {
                            *(_QWORD *)v400 = *(_QWORD *)(v59 + 368);
                            *(_QWORD *)(v59 + 368) = v400;
                            *(_QWORD *)(v410 + 8 * v378) = v59 + 368;
                            if (!*(_QWORD *)v400)
                            {
LABEL_660:
                              ++*(_QWORD *)(v59 + 376);
LABEL_661:
                              v413 = (*(_QWORD *)v1370 - 0x3A3AA7D820E2E4E6 + ((v1370[8] - 0x61C8864680B583EBLL) << 6)) ^ (v1370[8] - 0x61C8864680B583EBLL);
                              v414 = (v1370[9] - 0x61C8864680B583EBLL + (v413 << 6) + (v413 >> 2)) ^ v413;
                              v415 = *(_QWORD *)(v59 + 536);
                              if (v415)
                              {
                                v416 = (uint8x8_t)vcnt_s8((int8x8_t)v415);
                                v416.i16[0] = vaddlv_u8(v416);
                                if (v416.u32[0] > 1uLL)
                                {
                                  v378 = (v1370[9] - 0x61C8864680B583EBLL + (v413 << 6) + (v413 >> 2)) ^ v413;
                                  if (v414 >= v415)
                                    v378 = v414 % v415;
                                }
                                else
                                {
                                  v378 = v414 & (v415 - 1);
                                }
                                v417 = *(void ***)(*v332 + 8 * v378);
                                if (v417)
                                {
                                  v418 = *v417;
                                  if (*v417)
                                  {
                                    if (v416.u32[0] < 2uLL)
                                    {
                                      while (1)
                                      {
                                        v420 = v418[1];
                                        if (v420 == v414)
                                        {
                                          if (v418[2] == *(_QWORD *)v1370
                                            && __PAIR64__(*((unsigned __int8 *)v418 + 25), *((unsigned __int8 *)v418 + 24)) == __PAIR64__(v1370[9], v1370[8]))
                                          {
                                            goto LABEL_751;
                                          }
                                        }
                                        else if ((v420 & (v415 - 1)) != v378)
                                        {
                                          goto LABEL_684;
                                        }
                                        v418 = (_QWORD *)*v418;
                                        if (!v418)
                                          goto LABEL_684;
                                      }
                                    }
                                    do
                                    {
                                      v419 = v418[1];
                                      if (v419 == v414)
                                      {
                                        if (v418[2] == *(_QWORD *)v1370
                                          && __PAIR64__(*((unsigned __int8 *)v418 + 25), *((unsigned __int8 *)v418 + 24)) == __PAIR64__(v1370[9], v1370[8]))
                                        {
                                          goto LABEL_751;
                                        }
                                      }
                                      else
                                      {
                                        if (v419 >= v415)
                                          v419 %= v415;
                                        if (v419 != v378)
                                          break;
                                      }
                                      v418 = (_QWORD *)*v418;
                                    }
                                    while (v418);
                                  }
                                }
                              }
LABEL_684:
                              v418 = operator new(0x28uLL);
                              *v418 = 0;
                              v418[1] = v414;
                              *((_OWORD *)v418 + 1) = *(_OWORD *)v1370;
                              v418[4] = 0;
                              v421 = (float)(unint64_t)(*(_QWORD *)(v59 + 552) + 1);
                              v422 = *(float *)(v59 + 560);
                              if (v415 && (float)(v422 * (float)v415) >= v421)
                              {
LABEL_741:
                                v445 = (_QWORD *)*v332;
                                v446 = *(_QWORD **)(*v332 + 8 * v378);
                                if (v446)
                                {
                                  *v418 = *v446;
                                }
                                else
                                {
                                  *v418 = *(_QWORD *)(v59 + 544);
                                  *(_QWORD *)(v59 + 544) = v418;
                                  v445[v378] = v59 + 544;
                                  if (!*v418)
                                  {
LABEL_750:
                                    ++*(_QWORD *)(v59 + 552);
LABEL_751:
                                    v418[4] = v114;
                                    v448 = *(_QWORD *)(v59 + 576);
                                    v87 = v1336;
                                    v107 = v1354;
                                    if (v448)
                                    {
                                      v449 = (uint8x8_t)vcnt_s8((int8x8_t)v448);
                                      v449.i16[0] = vaddlv_u8(v449);
                                      if (v449.u32[0] > 1uLL)
                                      {
                                        v378 = v114;
                                        if (v114 >= v448)
                                          v378 = v114 % v448;
                                      }
                                      else
                                      {
                                        v378 = (v448 - 1) & v114;
                                      }
                                      v450 = *(_QWORD ***)(*(_QWORD *)(v59 + 568) + 8 * v378);
                                      if (v450)
                                      {
                                        v451 = *v450;
                                        if (*v450)
                                        {
                                          if (v449.u32[0] < 2uLL)
                                          {
                                            while (1)
                                            {
                                              v453 = v451[1];
                                              if (v453 == v114)
                                              {
                                                if (v451[2] == v114)
                                                  goto LABEL_771;
                                              }
                                              else if ((v453 & (v448 - 1)) != v378)
                                              {
                                                goto LABEL_772;
                                              }
                                              v451 = (_QWORD *)*v451;
                                              if (!v451)
                                                goto LABEL_772;
                                            }
                                          }
                                          do
                                          {
                                            v452 = v451[1];
                                            if (v452 == v114)
                                            {
                                              if (v451[2] == v114)
                                              {
LABEL_771:
                                                v101 = v1345;
                                                goto LABEL_839;
                                              }
                                            }
                                            else
                                            {
                                              if (v452 >= v448)
                                                v452 %= v448;
                                              if (v452 != v378)
                                                break;
                                            }
                                            v451 = (_QWORD *)*v451;
                                          }
                                          while (v451);
                                        }
                                      }
                                    }
LABEL_772:
                                    v451 = operator new(0x28uLL);
                                    *v451 = 0;
                                    v451[1] = v114;
                                    v451[3] = 0;
                                    v451[4] = 0;
                                    v451[2] = v114;
                                    v454 = (float)(unint64_t)(*(_QWORD *)(v59 + 592) + 1);
                                    v455 = *(float *)(v59 + 600);
                                    if (v448 && (float)(v455 * (float)v448) >= v454)
                                    {
LABEL_829:
                                      v480 = *(_QWORD *)(v59 + 568);
                                      v481 = *(_QWORD **)(v480 + 8 * v378);
                                      if (v481)
                                      {
                                        *v451 = *v481;
                                        v101 = v1345;
                                      }
                                      else
                                      {
                                        *v451 = *(_QWORD *)(v59 + 584);
                                        *(_QWORD *)(v59 + 584) = v451;
                                        *(_QWORD *)(v480 + 8 * v378) = v59 + 584;
                                        v101 = v1345;
                                        if (!*v451)
                                          goto LABEL_838;
                                        v482 = *(_QWORD *)(*v451 + 8);
                                        if ((v448 & (v448 - 1)) != 0)
                                        {
                                          if (v482 >= v448)
                                            v482 %= v448;
                                        }
                                        else
                                        {
                                          v482 &= v448 - 1;
                                        }
                                        v481 = (_QWORD *)(*(_QWORD *)(v59 + 568) + 8 * v482);
                                      }
                                      *v481 = v451;
LABEL_838:
                                      ++*(_QWORD *)(v59 + 592);
LABEL_839:
                                      v451[3] = *(_QWORD *)v1370;
                                      *((_WORD *)v451 + 16) = *(_WORD *)&v1370[8];
                                      goto LABEL_840;
                                    }
                                    v456 = (v448 & (v448 - 1)) != 0;
                                    if (v448 < 3)
                                      v456 = 1;
                                    v457 = v456 | (2 * v448);
                                    v458 = vcvtps_u32_f32(v454 / v455);
                                    if (v457 <= v458)
                                      v459 = v458;
                                    else
                                      v459 = v457;
                                    if (v459 == 1)
                                    {
                                      v459 = 2;
                                    }
                                    else if ((v459 & (v459 - 1)) != 0)
                                    {
                                      v459 = std::__next_prime(v459);
                                      v448 = *(_QWORD *)(v59 + 576);
                                    }
                                    if (v459 <= v448)
                                    {
                                      if (v459 >= v448)
                                        goto LABEL_824;
                                      v472 = vcvtps_u32_f32((float)*(unint64_t *)(v59 + 592) / *(float *)(v59 + 600));
                                      if (v448 < 3
                                        || (v473 = (uint8x8_t)vcnt_s8((int8x8_t)v448),
                                            v473.i16[0] = vaddlv_u8(v473),
                                            v473.u32[0] > 1uLL))
                                      {
                                        v472 = std::__next_prime(v472);
                                      }
                                      else
                                      {
                                        v474 = 1 << -(char)__clz(v472 - 1);
                                        if (v472 >= 2)
                                          v472 = v474;
                                      }
                                      if (v459 <= v472)
                                        v459 = v472;
                                      if (v459 >= v448)
                                        goto LABEL_824;
                                      if (!v459)
                                      {
                                        v479 = *(void **)(v59 + 568);
                                        *(_QWORD *)(v59 + 568) = 0;
                                        if (v479)
                                          operator delete(v479);
                                        *(_QWORD *)(v59 + 576) = 0;
                                        goto LABEL_824;
                                      }
                                    }
                                    if (v459 >> 61)
                                      goto LABEL_2405;
                                    v460 = operator new(8 * v459);
                                    v461 = *(void **)(v59 + 568);
                                    *(_QWORD *)(v59 + 568) = v460;
                                    if (v461)
                                      operator delete(v461);
                                    v462 = 0;
                                    *(_QWORD *)(v59 + 576) = v459;
                                    do
                                      *(_QWORD *)(*(_QWORD *)(v59 + 568) + 8 * v462++) = 0;
                                    while (v459 != v462);
                                    v463 = *(_QWORD **)(v59 + 584);
                                    if (!v463)
                                      goto LABEL_824;
                                    v464 = v59 + 584;
                                    v465 = v463[1];
                                    v466 = v459 - 1;
                                    if ((v459 & (v459 - 1)) == 0)
                                    {
                                      v467 = v465 & v466;
                                      *(_QWORD *)(*(_QWORD *)(v59 + 568) + 8 * v467) = v464;
                                      while (1)
                                      {
                                        v468 = (_QWORD *)*v463;
                                        if (!*v463)
                                          break;
                                        v469 = v468[1] & v466;
                                        if (v469 == v467)
                                        {
                                          v463 = (_QWORD *)*v463;
                                        }
                                        else
                                        {
                                          v470 = *(_QWORD *)(v59 + 568);
                                          if (*(_QWORD *)(v470 + 8 * v469))
                                          {
                                            *v463 = *v468;
                                            v471 = 8 * v469;
                                            *v468 = **(_QWORD **)(*(_QWORD *)(v59 + 568) + v471);
                                            **(_QWORD **)(*(_QWORD *)(v59 + 568) + v471) = v468;
                                          }
                                          else
                                          {
                                            *(_QWORD *)(v470 + 8 * v469) = v463;
                                            v463 = v468;
                                            v467 = v469;
                                          }
                                        }
                                      }
LABEL_824:
                                      v448 = *(_QWORD *)(v59 + 576);
                                      if ((v448 & (v448 - 1)) != 0)
                                      {
                                        if (v114 >= v448)
                                          v378 = v114 % v448;
                                        else
                                          v378 = v114;
                                      }
                                      else
                                      {
                                        v378 = (v448 - 1) & v114;
                                      }
                                      goto LABEL_829;
                                    }
                                    if (v465 >= v459)
                                      v465 %= v459;
                                    *(_QWORD *)(*(_QWORD *)(v59 + 568) + 8 * v465) = v464;
                                    v475 = (_QWORD *)*v463;
                                    if (!*v463)
                                      goto LABEL_824;
                                    while (1)
                                    {
                                      v477 = v475[1];
                                      if (v477 >= v459)
                                        v477 %= v459;
                                      if (v477 != v465)
                                      {
                                        v478 = *(_QWORD *)(v59 + 568);
                                        if (!*(_QWORD *)(v478 + 8 * v477))
                                        {
                                          *(_QWORD *)(v478 + 8 * v477) = v463;
                                          goto LABEL_810;
                                        }
                                        *v463 = *v475;
                                        v476 = 8 * v477;
                                        *v475 = **(_QWORD **)(*(_QWORD *)(v59 + 568) + v476);
                                        **(_QWORD **)(*(_QWORD *)(v59 + 568) + v476) = v475;
                                        v475 = v463;
                                      }
                                      v477 = v465;
LABEL_810:
                                      v463 = v475;
                                      v475 = (_QWORD *)*v475;
                                      v465 = v477;
                                      if (!v475)
                                        goto LABEL_824;
                                    }
                                  }
                                  v447 = *(_QWORD *)(*v418 + 8);
                                  if ((v415 & (v415 - 1)) != 0)
                                  {
                                    if (v447 >= v415)
                                      v447 %= v415;
                                  }
                                  else
                                  {
                                    v447 &= v415 - 1;
                                  }
                                  v446 = (_QWORD *)(*v332 + 8 * v447);
                                }
                                *v446 = v418;
                                goto LABEL_750;
                              }
                              v423 = (v415 & (v415 - 1)) != 0;
                              if (v415 < 3)
                                v423 = 1;
                              v424 = v423 | (2 * v415);
                              v425 = vcvtps_u32_f32(v421 / v422);
                              if (v424 <= v425)
                                v426 = v425;
                              else
                                v426 = v424;
                              if (v426 == 1)
                              {
                                v426 = 2;
                              }
                              else if ((v426 & (v426 - 1)) != 0)
                              {
                                v426 = std::__next_prime(v426);
                                v415 = *(_QWORD *)(v59 + 536);
                              }
                              if (v426 <= v415)
                              {
                                if (v426 >= v415)
                                  goto LABEL_736;
                                v438 = vcvtps_u32_f32((float)*(unint64_t *)(v59 + 552) / *(float *)(v59 + 560));
                                if (v415 < 3
                                  || (v439 = (uint8x8_t)vcnt_s8((int8x8_t)v415),
                                      v439.i16[0] = vaddlv_u8(v439),
                                      v439.u32[0] > 1uLL))
                                {
                                  v438 = std::__next_prime(v438);
                                }
                                else
                                {
                                  v440 = 1 << -(char)__clz(v438 - 1);
                                  if (v438 >= 2)
                                    v438 = v440;
                                }
                                if (v426 <= v438)
                                  v426 = v438;
                                if (v426 >= v415)
                                  goto LABEL_736;
                                if (!v426)
                                {
                                  v444 = (_QWORD *)*v332;
                                  *v332 = 0;
                                  if (v444)
                                    operator delete(v444);
                                  *(_QWORD *)(v59 + 536) = 0;
                                  goto LABEL_736;
                                }
                              }
                              if (v426 >> 61)
                                goto LABEL_2405;
                              v427 = operator new(8 * v426);
                              v428 = (_QWORD *)*v332;
                              *v332 = v427;
                              if (v428)
                                operator delete(v428);
                              v429 = 0;
                              *(_QWORD *)(v59 + 536) = v426;
                              do
                                *(_QWORD *)(*v332 + 8 * v429++) = 0;
                              while (v426 != v429);
                              v430 = *(_QWORD **)(v59 + 544);
                              if (!v430)
                                goto LABEL_736;
                              v431 = v59 + 544;
                              v432 = v430[1];
                              v433 = v426 - 1;
                              if ((v426 & (v426 - 1)) == 0)
                              {
                                v434 = v432 & v433;
                                *(_QWORD *)(*v332 + 8 * v434) = v431;
                                while (1)
                                {
                                  v435 = (_QWORD *)*v430;
                                  if (!*v430)
                                    break;
                                  v436 = v435[1] & v433;
                                  if (v436 == v434)
                                  {
                                    v430 = (_QWORD *)*v430;
                                  }
                                  else if (*(_QWORD *)(*v332 + 8 * v436))
                                  {
                                    *v430 = *v435;
                                    v437 = 8 * v436;
                                    *v435 = **(_QWORD **)(*v332 + v437);
                                    **(_QWORD **)(*v332 + v437) = v435;
                                  }
                                  else
                                  {
                                    *(_QWORD *)(*v332 + 8 * v436) = v430;
                                    v430 = v435;
                                    v434 = v436;
                                  }
                                }
LABEL_736:
                                v415 = *(_QWORD *)(v59 + 536);
                                if ((v415 & (v415 - 1)) != 0)
                                {
                                  if (v414 >= v415)
                                    v378 = v414 % v415;
                                  else
                                    v378 = v414;
                                }
                                else
                                {
                                  v378 = (v415 - 1) & v414;
                                }
                                goto LABEL_741;
                              }
                              if (v432 >= v426)
                                v432 %= v426;
                              *(_QWORD *)(*v332 + 8 * v432) = v431;
                              v441 = (_QWORD *)*v430;
                              if (!*v430)
                                goto LABEL_736;
                              while (1)
                              {
                                v443 = v441[1];
                                if (v443 >= v426)
                                  v443 %= v426;
                                if (v443 != v432)
                                {
                                  if (!*(_QWORD *)(*v332 + 8 * v443))
                                  {
                                    *(_QWORD *)(*v332 + 8 * v443) = v430;
                                    goto LABEL_722;
                                  }
                                  *v430 = *v441;
                                  v442 = 8 * v443;
                                  *v441 = **(_QWORD **)(*v332 + v442);
                                  **(_QWORD **)(*v332 + v442) = v441;
                                  v441 = v430;
                                }
                                v443 = v432;
LABEL_722:
                                v430 = v441;
                                v441 = (_QWORD *)*v441;
                                v432 = v443;
                                if (!v441)
                                  goto LABEL_736;
                              }
                            }
                            v412 = *(_QWORD *)(*(_QWORD *)v400 + 8);
                            if ((v394 & (v394 - 1)) != 0)
                            {
                              if (v412 >= v394)
                                v412 %= v394;
                            }
                            else
                            {
                              v412 &= v394 - 1;
                            }
                            v411 = (_QWORD *)(*v393 + 8 * v412);
                          }
                          *v411 = v400;
                          goto LABEL_660;
                        }
                      }
                    }
                    else
                    {
                      v20 = v1343;
                    }
                    do
                    {
                      v392 = *((_QWORD *)v377 - 1);
                      v377 -= 8;
                      *--v384 = v392;
                    }
                    while (v377 != v379);
                    goto LABEL_600;
                  }
LABEL_2410:
                  abort();
                }
                v331 = 5;
              }
              (*(void (**)(void))(*v330 + 8 * v331))();
              goto LABEL_516;
            }
            v140 = 5;
          }
          (*(void (**)(void))(*v139 + 8 * v140))();
          goto LABEL_156;
        }
        v110 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v1351 + 440), (unint64_t)v105, &v1362);
        v111 = v110[4] + 1;
      }
      else
      {
        std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v1351 + 104));
        memset(v1370, 0, 32);
        v1370[32] = 1;
        v134 = geo::packed_array<mre::TextureStorage,geo::handle<mre::Texture>>::push_back((_QWORD *)(v1351 + 480), (__int128 *)v1370);
        std::__shared_mutex_base::unlock((std::__shared_mutex_base *)(v1351 + 104));
        v1362 = v134;
        *(_QWORD *)&v1375 = v134;
        *(_OWORD *)v1370 = (unint64_t)v104;
        *(_QWORD *)v1368 = v134;
        v135 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v1351 + 440), v134, v1368);
        *(int64x2_t *)(v135 + 3) = vdupq_n_s64(1uLL);
        *((_WORD *)v135 + 20) = 256;
        v136 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v1351 + 64), v1375, (uint64_t *)&v1375);
        v107 = v1354;
        v137 = *(_QWORD *)v1370;
        v136[3] = *(_QWORD *)v1370;
        v138 = v1370[8];
        *((_BYTE *)v136 + 32) = v1370[8];
        v110 = std::__hash_table<std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,std::__unordered_map_hasher<mre::TextureKey,std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,mre::TextureKeyHasher,std::equal_to<mre::TextureKey>,true>,std::__unordered_map_equal<mre::TextureKey,std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,std::equal_to<mre::TextureKey>,mre::TextureKeyHasher,true>,std::allocator<std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>>>::__emplace_unique_key_args<mre::TextureKey,std::piecewise_construct_t const&,std::tuple<mre::TextureKey const&>,std::tuple<>>((float *)(v1351 + 24), v137, v138, v1370);
        v111 = v1375;
      }
      v110[4] = v111;
      goto LABEL_149;
    }
    (*(void (**)(uint64_t *__return_ptr, unint64_t, float))(*(_QWORD *)v88 + 264))(&v1366, v88, v100);
    v116 = v1366;
    v117 = HIDWORD(v1366);
    v118 = (_QWORD *)(v59 + 824);
    *(_QWORD *)v1370 = v87;
    *(_QWORD *)&v1370[8] = v91;
    v119 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)(v59 + 824), (uint64_t *)v1370);
    v107 = v1354;
    if (v119)
    {
      v17 = (unint64_t)v119[4];
      if (v17)
      {
        *(_QWORD *)v1370 = v119[4];
        v120 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v59 + 648, v17, v1370);
        ++v120[4];
        goto LABEL_462;
      }
    }
    *(_QWORD *)v1370 = v87;
    *(_QWORD *)&v1370[8] = v91;
    v121 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>(v118, (uint64_t *)v1370);
    if (!v121 || (v17 = (unint64_t)v121[4]) == 0)
    {
      if ((_DWORD)v116)
        v122 = v117;
      else
        v122 = 0;
      v123 = (_QWORD *)v59;
      v124 = *(_QWORD *)(v59 + 696);
      if (*(_QWORD *)(v59 + 688) == v124)
      {
        v141 = ((*(_QWORD *)(v59 + 744) - *(_QWORD *)(v59 + 736)) >> 3) | 0x100000000;
        v142 = *(uint64_t **)(v59 + 720);
        v143 = *(_QWORD *)(v59 + 728);
        if ((unint64_t)v142 >= v143)
        {
          v145 = *(char **)(v59 + 712);
          v146 = ((char *)v142 - v145) >> 3;
          v147 = v146 + 1;
          if ((unint64_t)(v146 + 1) >> 61)
            goto LABEL_2410;
          v148 = v143 - (_QWORD)v145;
          if (v148 >> 2 > v147)
            v147 = v148 >> 2;
          if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF8)
            v147 = 0x1FFFFFFFFFFFFFFFLL;
          v1340 = v147;
          if (v147)
          {
            if (v147 >> 61)
              goto LABEL_2405;
            v149 = v122;
            v150 = (char *)operator new(8 * v147);
          }
          else
          {
            v149 = v122;
            v150 = 0;
          }
          v151 = (uint64_t *)&v150[8 * v146];
          *v151 = v141;
          v144 = v151 + 1;
          if (v142 == (uint64_t *)v145)
          {
            v159 = (_QWORD *)v1356;
          }
          else
          {
            v152 = (char *)v142 - v145 - 8;
            if (v152 < 0x58)
              goto LABEL_2426;
            if ((unint64_t)(v145 - v150) < 0x20)
              goto LABEL_2426;
            v153 = (v152 >> 3) + 1;
            v154 = &v150[8 * v146 - 16];
            v155 = v142 - 2;
            v156 = v153 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v157 = *(_OWORD *)v155;
              *((_OWORD *)v154 - 1) = *((_OWORD *)v155 - 1);
              *(_OWORD *)v154 = v157;
              v154 -= 32;
              v155 -= 4;
              v156 -= 4;
            }
            while (v156);
            v151 -= v153 & 0x3FFFFFFFFFFFFFFCLL;
            v142 -= v153 & 0x3FFFFFFFFFFFFFFCLL;
            if (v153 != (v153 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_2426:
              do
              {
                v158 = *--v142;
                *--v151 = v158;
              }
              while (v142 != (uint64_t *)v145);
            }
            v159 = (_QWORD *)v1356;
            v142 = *(uint64_t **)(v1356 + 712);
          }
          v159[89] = v151;
          v159[90] = v144;
          v159[91] = &v150[8 * v1340];
          if (v142)
            operator delete(v142);
          v122 = v149;
        }
        else
        {
          *v142 = v141;
          v144 = v142 + 1;
        }
        v123 = (_QWORD *)v1356;
        *(_QWORD *)(v1356 + 720) = v144;
        v17 = *(v144 - 1);
      }
      else
      {
        v125 = *(_QWORD *)(v124 - 8);
        *(_QWORD *)(v59 + 696) = v124 - 8;
        *(_DWORD *)(*(_QWORD *)(v59 + 712) + 8 * v125) = (*(_QWORD *)(v59 + 744) - *(_QWORD *)(v59 + 736)) >> 3;
        *(_DWORD *)(*(_QWORD *)(v59 + 712) + 8 * v125 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v59 + 712)
                                                                                                 + 8 * v125
                                                                                                 + 4) << 32)
                                                            + 0x100000000) >> 32;
        v17 = v125 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v59 + 712) + 8 * v125 + 4) << 32);
      }
      v160 = v122 | ((v116 ^ 1) << 32);
      v161 = (uint64_t *)v123[93];
      v162 = v123[94];
      if ((unint64_t)v161 >= v162)
      {
        v164 = (char *)v123[92];
        v165 = ((char *)v161 - v164) >> 3;
        v166 = v165 + 1;
        if ((unint64_t)(v165 + 1) >> 61)
          goto LABEL_2410;
        v167 = v162 - (_QWORD)v164;
        if (v167 >> 2 > v166)
          v166 = v167 >> 2;
        if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8)
          v166 = 0x1FFFFFFFFFFFFFFFLL;
        v1341 = v166;
        if (v166)
        {
          if (v166 >> 61)
            goto LABEL_2405;
          v168 = (char *)operator new(8 * v166);
        }
        else
        {
          v168 = 0;
        }
        v169 = (uint64_t *)&v168[8 * v165];
        *v169 = v160;
        v163 = v169 + 1;
        if (v161 == (uint64_t *)v164)
        {
          v177 = (_QWORD *)v1356;
        }
        else
        {
          v170 = (char *)v161 - v164 - 8;
          if (v170 < 0x58)
            goto LABEL_2427;
          if ((unint64_t)(v164 - v168) < 0x20)
            goto LABEL_2427;
          v171 = (v170 >> 3) + 1;
          v172 = &v168[8 * v165 - 16];
          v173 = v161 - 2;
          v174 = v171 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v175 = *(_OWORD *)v173;
            *((_OWORD *)v172 - 1) = *((_OWORD *)v173 - 1);
            *(_OWORD *)v172 = v175;
            v172 -= 32;
            v173 -= 4;
            v174 -= 4;
          }
          while (v174);
          v169 -= v171 & 0x3FFFFFFFFFFFFFFCLL;
          v161 -= v171 & 0x3FFFFFFFFFFFFFFCLL;
          if (v171 != (v171 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_2427:
            do
            {
              v176 = *--v161;
              *--v169 = v176;
            }
            while (v161 != (uint64_t *)v164);
          }
          v177 = (_QWORD *)v1356;
          v161 = *(uint64_t **)(v1356 + 736);
        }
        v177[92] = v169;
        v177[93] = v163;
        v177[94] = &v168[8 * v1341];
        if (v161)
          operator delete(v161);
      }
      else
      {
        *v161 = v160;
        v163 = v161 + 1;
      }
      *(_QWORD *)(v1356 + 744) = v163;
      v178 = v17;
      v179 = *(char **)(v1356 + 768);
      v180 = *(_QWORD *)(v1356 + 776);
      if ((unint64_t)v179 < v180)
      {
        *(_QWORD *)v179 = v17;
        v181 = v179 + 8;
        v91 = v1347;
        goto LABEL_225;
      }
      v182 = *(char **)(v1356 + 760);
      v183 = (v179 - v182) >> 3;
      v184 = v183 + 1;
      if ((unint64_t)(v183 + 1) >> 61)
        goto LABEL_2410;
      v185 = v180 - (_QWORD)v182;
      if (v185 >> 2 > v184)
        v184 = v185 >> 2;
      if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFF8)
        v184 = 0x1FFFFFFFFFFFFFFFLL;
      if (v184)
      {
        if (v184 >> 61)
          goto LABEL_2405;
        v186 = v184;
        v187 = operator new(8 * v184);
      }
      else
      {
        v186 = 0;
        v187 = 0;
      }
      v188 = &v187[8 * v183];
      *v188 = v17;
      v181 = v188 + 1;
      if (v179 == v182)
      {
        v91 = v1347;
        goto LABEL_223;
      }
      v189 = v179 - v182 - 8;
      if (v189 >= 0x58)
      {
        v91 = v1347;
        if ((unint64_t)(v182 - v187) >= 0x20)
        {
          v190 = (v189 >> 3) + 1;
          v191 = &v187[8 * v183 - 16];
          v192 = v179 - 16;
          v193 = v190 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v194 = *(_OWORD *)v192;
            *(v191 - 1) = *((_OWORD *)v192 - 1);
            *v191 = v194;
            v191 -= 2;
            v192 -= 32;
            v193 -= 4;
          }
          while (v193);
          v188 -= v190 & 0x3FFFFFFFFFFFFFFCLL;
          v179 -= 8 * (v190 & 0x3FFFFFFFFFFFFFFCLL);
          if (v190 == (v190 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_223:
            *(_QWORD *)(v1356 + 760) = v188;
            *(_QWORD *)(v1356 + 768) = v181;
            *(_QWORD *)(v1356 + 776) = &v187[8 * v186];
            if (v182)
              operator delete(v182);
LABEL_225:
            *(_QWORD *)(v1356 + 768) = v181;
            v196 = (uint64_t *)(v1356 + 648);
            v197 = *(_QWORD *)(v1356 + 656);
            if (v197)
            {
              v198 = (uint8x8_t)vcnt_s8((int8x8_t)v197);
              v198.i16[0] = vaddlv_u8(v198);
              if (v198.u32[0] > 1uLL)
              {
                v178 = v17;
                if (v17 >= v197)
                  v178 = v17 % v197;
              }
              else
              {
                v178 = (v197 - 1) & v17;
              }
              v199 = *(_QWORD **)(*v196 + 8 * v178);
              if (v199)
              {
                v200 = (_QWORD *)*v199;
                if (v200)
                {
                  if (v198.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v202 = v200[1];
                      if (v202 == v17)
                      {
                        if (v200[2] == v17)
                          goto LABEL_284;
                      }
                      else if ((v202 & (v197 - 1)) != v178)
                      {
                        goto LABEL_245;
                      }
                      v200 = (_QWORD *)*v200;
                      if (!v200)
                        goto LABEL_245;
                    }
                  }
                  do
                  {
                    v201 = v200[1];
                    if (v201 == v17)
                    {
                      if (v200[2] == v17)
                        goto LABEL_284;
                    }
                    else
                    {
                      if (v201 >= v197)
                        v201 %= v197;
                      if (v201 != v178)
                        break;
                    }
                    v200 = (_QWORD *)*v200;
                  }
                  while (v200);
                }
              }
            }
LABEL_245:
            v203 = (char *)operator new(0x30uLL);
            *(_QWORD *)v203 = 0;
            *((_QWORD *)v203 + 1) = v17;
            *((_QWORD *)v203 + 2) = v17;
            *(int64x2_t *)(v203 + 24) = vdupq_n_s64(1uLL);
            v203[40] = 0;
            v204 = (float)(unint64_t)(*(_QWORD *)(v1356 + 672) + 1);
            v205 = *(float *)(v1356 + 680);
            if (!v197 || (float)(v205 * (float)v197) < v204)
            {
              v206 = v197 < 3 || (v197 & (v197 - 1)) != 0;
              v207 = v206 | (2 * v197);
              v208 = vcvtps_u32_f32(v204 / v205);
              if (v207 <= v208)
                v209 = v208;
              else
                v209 = v207;
              if (v209 == 1)
              {
                v209 = 2;
              }
              else if ((v209 & (v209 - 1)) != 0)
              {
                v209 = std::__next_prime(v209);
                v197 = *(_QWORD *)(v1356 + 656);
              }
              if (v209 > v197)
                goto LABEL_258;
              if (v209 < v197)
              {
                v210 = vcvtps_u32_f32((float)*(unint64_t *)(v1356 + 672) / *(float *)(v1356 + 680));
                if (v197 < 3
                  || (v211 = (uint8x8_t)vcnt_s8((int8x8_t)v197), v211.i16[0] = vaddlv_u8(v211), v211.u32[0] > 1uLL))
                {
                  v210 = std::__next_prime(v210);
                }
                else
                {
                  v212 = 1 << -(char)__clz(v210 - 1);
                  if (v210 >= 2)
                    v210 = v212;
                }
                if (v209 <= v210)
                  v209 = v210;
                if (v209 < v197)
LABEL_258:
                  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v196, v209);
              }
              v197 = *(_QWORD *)(v1356 + 656);
              if ((v197 & (v197 - 1)) != 0)
              {
                if (v17 >= v197)
                  v178 = v17 % v197;
                else
                  v178 = v17;
              }
              else
              {
                v178 = (v197 - 1) & v17;
              }
            }
            v213 = *v196;
            v214 = *(_QWORD **)(*v196 + 8 * v178);
            if (v214)
            {
              *(_QWORD *)v203 = *v214;
            }
            else
            {
              *(_QWORD *)v203 = *(_QWORD *)(v1356 + 664);
              *(_QWORD *)(v1356 + 664) = v203;
              *(_QWORD *)(v213 + 8 * v178) = v1356 + 664;
              if (!*(_QWORD *)v203)
              {
LABEL_283:
                ++*(_QWORD *)(v1356 + 672);
LABEL_284:
                v216 = (*(_QWORD *)v1370 - 0x3A3AA7D820E2E4E6 + ((v1370[8] - 0x61C8864680B583EBLL) << 6)) ^ (v1370[8] - 0x61C8864680B583EBLL);
                v217 = (v1370[9] - 0x61C8864680B583EBLL + (v216 << 6) + (v216 >> 2)) ^ v216;
                v218 = *(_QWORD *)(v1356 + 832);
                if (v218)
                {
                  v219 = (uint8x8_t)vcnt_s8((int8x8_t)v218);
                  v219.i16[0] = vaddlv_u8(v219);
                  if (v219.u32[0] > 1uLL)
                  {
                    v178 = (v1370[9] - 0x61C8864680B583EBLL + (v216 << 6) + (v216 >> 2)) ^ v216;
                    if (v217 >= v218)
                      v178 = v217 % v218;
                  }
                  else
                  {
                    v178 = v217 & (v218 - 1);
                  }
                  v220 = *(void ***)(*v118 + 8 * v178);
                  if (v220)
                  {
                    v221 = *v220;
                    if (*v220)
                    {
                      if (v219.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v223 = *((_QWORD *)v221 + 1);
                          if (v223 == v217)
                          {
                            if (*((_QWORD *)v221 + 2) == *(_QWORD *)v1370
                              && __PAIR64__(*((unsigned __int8 *)v221 + 25), *((unsigned __int8 *)v221 + 24)) == __PAIR64__(v1370[9], v1370[8]))
                            {
                              goto LABEL_306;
                            }
                          }
                          else if ((v223 & (v218 - 1)) != v178)
                          {
                            goto LABEL_307;
                          }
                          v221 = *(void **)v221;
                          if (!v221)
                            goto LABEL_307;
                        }
                      }
                      do
                      {
                        v222 = *((_QWORD *)v221 + 1);
                        if (v222 == v217)
                        {
                          if (*((_QWORD *)v221 + 2) == *(_QWORD *)v1370
                            && __PAIR64__(*((unsigned __int8 *)v221 + 25), *((unsigned __int8 *)v221 + 24)) == __PAIR64__(v1370[9], v1370[8]))
                          {
LABEL_306:
                            v107 = v1354;
                            v224 = v1356;
                            v101 = v1345;
LABEL_374:
                            *((_QWORD *)v221 + 4) = v17;
                            v252 = *(_QWORD *)(v224 + 872);
                            if (v252)
                            {
                              v253 = (uint8x8_t)vcnt_s8((int8x8_t)v252);
                              v253.i16[0] = vaddlv_u8(v253);
                              if (v253.u32[0] > 1uLL)
                              {
                                v221 = (void *)v17;
                                if (v17 >= v252)
                                  v221 = (void *)(v17 % v252);
                              }
                              else
                              {
                                v221 = (void *)((v252 - 1) & v17);
                              }
                              v254 = *(_QWORD ***)(*(_QWORD *)(v1356 + 864) + 8 * (_QWORD)v221);
                              if (v254)
                              {
                                v255 = *v254;
                                if (*v254)
                                {
                                  if (v253.u32[0] < 2uLL)
                                  {
                                    while (1)
                                    {
                                      v257 = v255[1];
                                      if (v257 == v17)
                                      {
                                        if (v255[2] == v17)
                                          goto LABEL_461;
                                      }
                                      else if ((void *)(v257 & (v252 - 1)) != v221)
                                      {
                                        goto LABEL_394;
                                      }
                                      v255 = (_QWORD *)*v255;
                                      if (!v255)
                                        goto LABEL_394;
                                    }
                                  }
                                  do
                                  {
                                    v256 = v255[1];
                                    if (v256 == v17)
                                    {
                                      if (v255[2] == v17)
                                        goto LABEL_461;
                                    }
                                    else
                                    {
                                      if (v256 >= v252)
                                        v256 %= v252;
                                      if ((void *)v256 != v221)
                                        break;
                                    }
                                    v255 = (_QWORD *)*v255;
                                  }
                                  while (v255);
                                }
                              }
                            }
LABEL_394:
                            v255 = operator new(0x28uLL);
                            *v255 = 0;
                            v255[1] = v17;
                            v255[3] = 0;
                            v255[4] = 0;
                            v255[2] = v17;
                            v258 = (float)(unint64_t)(*(_QWORD *)(v1356 + 888) + 1);
                            v259 = *(float *)(v1356 + 896);
                            if (!v252 || (float)(v259 * (float)v252) < v258)
                            {
                              v260 = (v252 & (v252 - 1)) != 0;
                              if (v252 < 3)
                                v260 = 1;
                              v261 = v260 | (2 * v252);
                              v262 = vcvtps_u32_f32(v258 / v259);
                              if (v261 <= v262)
                                v263 = v262;
                              else
                                v263 = v261;
                              if (v263 == 1)
                              {
                                v263 = 2;
                              }
                              else if ((v263 & (v263 - 1)) != 0)
                              {
                                v263 = std::__next_prime(v263);
                                v252 = *(_QWORD *)(v1356 + 872);
                              }
                              if (v263 <= v252)
                              {
                                if (v263 < v252)
                                {
                                  v276 = vcvtps_u32_f32((float)*(unint64_t *)(v1356 + 888) / *(float *)(v1356 + 896));
                                  if (v252 < 3
                                    || (v277 = (uint8x8_t)vcnt_s8((int8x8_t)v252),
                                        v277.i16[0] = vaddlv_u8(v277),
                                        v277.u32[0] > 1uLL))
                                  {
                                    v276 = std::__next_prime(v276);
                                  }
                                  else
                                  {
                                    v278 = 1 << -(char)__clz(v276 - 1);
                                    if (v276 >= 2)
                                      v276 = v278;
                                  }
                                  if (v263 <= v276)
                                    v263 = v276;
                                  if (v263 < v252)
                                  {
                                    if (v263)
                                      goto LABEL_406;
                                    v283 = *(void **)(v1356 + 864);
                                    *(_QWORD *)(v1356 + 864) = 0;
                                    if (v283)
                                      operator delete(v283);
                                    *(_QWORD *)(v1356 + 872) = 0;
                                  }
                                }
                                goto LABEL_446;
                              }
LABEL_406:
                              if (v263 >> 61)
                                goto LABEL_2405;
                              v264 = operator new(8 * v263);
                              v265 = *(void **)(v1356 + 864);
                              *(_QWORD *)(v1356 + 864) = v264;
                              if (v265)
                                operator delete(v265);
                              v266 = 0;
                              *(_QWORD *)(v1356 + 872) = v263;
                              do
                                *(_QWORD *)(*(_QWORD *)(v1356 + 864) + 8 * v266++) = 0;
                              while (v263 != v266);
                              v267 = *(_QWORD **)(v1356 + 880);
                              if (!v267)
                                goto LABEL_446;
                              v268 = v1356 + 880;
                              v269 = v267[1];
                              v270 = v263 - 1;
                              if ((v263 & (v263 - 1)) == 0)
                              {
                                v271 = v269 & v270;
                                *(_QWORD *)(*(_QWORD *)(v1356 + 864) + 8 * v271) = v268;
                                while (1)
                                {
                                  v272 = (_QWORD *)*v267;
                                  if (!*v267)
                                    break;
                                  v273 = v272[1] & v270;
                                  if (v273 == v271)
                                  {
                                    v267 = (_QWORD *)*v267;
                                  }
                                  else
                                  {
                                    v274 = *(_QWORD *)(v1356 + 864);
                                    if (*(_QWORD *)(v274 + 8 * v273))
                                    {
                                      *v267 = *v272;
                                      v275 = 8 * v273;
                                      *v272 = **(_QWORD **)(*(_QWORD *)(v1356 + 864) + v275);
                                      **(_QWORD **)(*(_QWORD *)(v1356 + 864) + v275) = v272;
                                    }
                                    else
                                    {
                                      *(_QWORD *)(v274 + 8 * v273) = v267;
                                      v267 = v272;
                                      v271 = v273;
                                    }
                                  }
                                }
                                goto LABEL_446;
                              }
                              if (v269 >= v263)
                                v269 %= v263;
                              *(_QWORD *)(*(_QWORD *)(v1356 + 864) + 8 * v269) = v268;
                              v279 = (_QWORD *)*v267;
                              if (!*v267)
                              {
LABEL_446:
                                v252 = *(_QWORD *)(v1356 + 872);
                                if ((v252 & (v252 - 1)) != 0)
                                {
                                  if (v17 >= v252)
                                    v221 = (void *)(v17 % v252);
                                  else
                                    v221 = (void *)v17;
                                }
                                else
                                {
                                  v221 = (void *)((v252 - 1) & v17);
                                }
                                goto LABEL_451;
                              }
                              while (2)
                              {
                                v281 = v279[1];
                                if (v281 >= v263)
                                  v281 %= v263;
                                if (v281 != v269)
                                {
                                  v282 = *(_QWORD *)(v1356 + 864);
                                  if (!*(_QWORD *)(v282 + 8 * v281))
                                  {
                                    *(_QWORD *)(v282 + 8 * v281) = v267;
LABEL_432:
                                    v267 = v279;
                                    v279 = (_QWORD *)*v279;
                                    v269 = v281;
                                    if (!v279)
                                      goto LABEL_446;
                                    continue;
                                  }
                                  *v267 = *v279;
                                  v280 = 8 * v281;
                                  *v279 = **(_QWORD **)(*(_QWORD *)(v1356 + 864) + v280);
                                  **(_QWORD **)(*(_QWORD *)(v1356 + 864) + v280) = v279;
                                  v279 = v267;
                                }
                                break;
                              }
                              v281 = v269;
                              goto LABEL_432;
                            }
LABEL_451:
                            v284 = *(_QWORD *)(v1356 + 864);
                            v285 = *(_QWORD **)(v284 + 8 * (_QWORD)v221);
                            if (v285)
                            {
                              *v255 = *v285;
                              goto LABEL_459;
                            }
                            *v255 = *(_QWORD *)(v1356 + 880);
                            *(_QWORD *)(v1356 + 880) = v255;
                            *(_QWORD *)(v284 + 8 * (_QWORD)v221) = v1356 + 880;
                            if (*v255)
                            {
                              v286 = *(_QWORD *)(*v255 + 8);
                              if ((v252 & (v252 - 1)) != 0)
                              {
                                if (v286 >= v252)
                                  v286 %= v252;
                              }
                              else
                              {
                                v286 &= v252 - 1;
                              }
                              v285 = (_QWORD *)(*(_QWORD *)(v1356 + 864) + 8 * v286);
LABEL_459:
                              *v285 = v255;
                            }
                            ++*(_QWORD *)(v1356 + 888);
LABEL_461:
                            v255[3] = *(_QWORD *)v1370;
                            *((_WORD *)v255 + 16) = *(_WORD *)&v1370[8];
                            goto LABEL_462;
                          }
                        }
                        else
                        {
                          if (v222 >= v218)
                            v222 %= v218;
                          if (v222 != v178)
                            break;
                        }
                        v221 = *(void **)v221;
                      }
                      while (v221);
                    }
                  }
                }
LABEL_307:
                v221 = operator new(0x28uLL);
                *(_QWORD *)v221 = 0;
                *((_QWORD *)v221 + 1) = v217;
                *((_OWORD *)v221 + 1) = *(_OWORD *)v1370;
                *((_QWORD *)v221 + 4) = 0;
                v225 = (float)(unint64_t)(*(_QWORD *)(v1356 + 848) + 1);
                v226 = *(float *)(v1356 + 856);
                if (v218 && (float)(v226 * (float)v218) >= v225)
                {
LABEL_364:
                  v249 = (_QWORD *)*v118;
                  v250 = *(_QWORD **)(*v118 + 8 * v178);
                  v107 = v1354;
                  if (v250)
                  {
                    *(_QWORD *)v221 = *v250;
                    v101 = v1345;
                  }
                  else
                  {
                    *(_QWORD *)v221 = *(_QWORD *)(v1356 + 840);
                    *(_QWORD *)(v1356 + 840) = v221;
                    v249[v178] = v1356 + 840;
                    v101 = v1345;
                    if (!*(_QWORD *)v221)
                    {
LABEL_373:
                      v224 = v1356;
                      ++*(_QWORD *)(v1356 + 848);
                      goto LABEL_374;
                    }
                    v251 = *(_QWORD *)(*(_QWORD *)v221 + 8);
                    if ((v218 & (v218 - 1)) != 0)
                    {
                      if (v251 >= v218)
                        v251 %= v218;
                    }
                    else
                    {
                      v251 &= v218 - 1;
                    }
                    v250 = (_QWORD *)(*v118 + 8 * v251);
                  }
                  *v250 = v221;
                  goto LABEL_373;
                }
                v227 = (v218 & (v218 - 1)) != 0;
                if (v218 < 3)
                  v227 = 1;
                v228 = v227 | (2 * v218);
                v229 = vcvtps_u32_f32(v225 / v226);
                if (v228 <= v229)
                  v230 = v229;
                else
                  v230 = v228;
                if (v230 == 1)
                {
                  v230 = 2;
                }
                else if ((v230 & (v230 - 1)) != 0)
                {
                  v230 = std::__next_prime(v230);
                  v218 = *(_QWORD *)(v1356 + 832);
                }
                if (v230 <= v218)
                {
                  if (v230 >= v218)
                    goto LABEL_359;
                  v242 = vcvtps_u32_f32((float)*(unint64_t *)(v1356 + 848) / *(float *)(v1356 + 856));
                  if (v218 < 3
                    || (v243 = (uint8x8_t)vcnt_s8((int8x8_t)v218), v243.i16[0] = vaddlv_u8(v243), v243.u32[0] > 1uLL))
                  {
                    v242 = std::__next_prime(v242);
                  }
                  else
                  {
                    v244 = 1 << -(char)__clz(v242 - 1);
                    if (v242 >= 2)
                      v242 = v244;
                  }
                  if (v230 <= v242)
                    v230 = v242;
                  if (v230 >= v218)
                    goto LABEL_359;
                  if (!v230)
                  {
                    v248 = (_QWORD *)*v118;
                    *v118 = 0;
                    if (v248)
                      operator delete(v248);
                    *(_QWORD *)(v1356 + 832) = 0;
                    goto LABEL_359;
                  }
                }
                if (v230 >> 61)
                  goto LABEL_2405;
                v231 = operator new(8 * v230);
                v232 = (_QWORD *)*v118;
                *v118 = v231;
                if (v232)
                  operator delete(v232);
                v233 = 0;
                *(_QWORD *)(v1356 + 832) = v230;
                do
                  *(_QWORD *)(*v118 + 8 * v233++) = 0;
                while (v230 != v233);
                v234 = *(_QWORD **)(v1356 + 840);
                if (!v234)
                  goto LABEL_359;
                v235 = v1356 + 840;
                v236 = v234[1];
                v237 = v230 - 1;
                if ((v230 & (v230 - 1)) == 0)
                {
                  v238 = v236 & v237;
                  *(_QWORD *)(*v118 + 8 * v238) = v235;
                  while (1)
                  {
                    v239 = (_QWORD *)*v234;
                    if (!*v234)
                      break;
                    v240 = v239[1] & v237;
                    if (v240 == v238)
                    {
                      v234 = (_QWORD *)*v234;
                    }
                    else if (*(_QWORD *)(*v118 + 8 * v240))
                    {
                      *v234 = *v239;
                      v241 = 8 * v240;
                      *v239 = **(_QWORD **)(*v118 + v241);
                      **(_QWORD **)(*v118 + v241) = v239;
                    }
                    else
                    {
                      *(_QWORD *)(*v118 + 8 * v240) = v234;
                      v234 = v239;
                      v238 = v240;
                    }
                  }
LABEL_359:
                  v218 = *(_QWORD *)(v1356 + 832);
                  if ((v218 & (v218 - 1)) != 0)
                  {
                    if (v217 >= v218)
                      v178 = v217 % v218;
                    else
                      v178 = v217;
                  }
                  else
                  {
                    v178 = (v218 - 1) & v217;
                  }
                  goto LABEL_364;
                }
                if (v236 >= v230)
                  v236 %= v230;
                *(_QWORD *)(*v118 + 8 * v236) = v235;
                v245 = (_QWORD *)*v234;
                if (!*v234)
                  goto LABEL_359;
                while (1)
                {
                  v247 = v245[1];
                  if (v247 >= v230)
                    v247 %= v230;
                  if (v247 != v236)
                  {
                    if (!*(_QWORD *)(*v118 + 8 * v247))
                    {
                      *(_QWORD *)(*v118 + 8 * v247) = v234;
                      goto LABEL_345;
                    }
                    *v234 = *v245;
                    v246 = 8 * v247;
                    *v245 = **(_QWORD **)(*v118 + v246);
                    **(_QWORD **)(*v118 + v246) = v245;
                    v245 = v234;
                  }
                  v247 = v236;
LABEL_345:
                  v234 = v245;
                  v245 = (_QWORD *)*v245;
                  v236 = v247;
                  if (!v245)
                    goto LABEL_359;
                }
              }
              v215 = *(_QWORD *)(*(_QWORD *)v203 + 8);
              if ((v197 & (v197 - 1)) != 0)
              {
                if (v215 >= v197)
                  v215 %= v197;
              }
              else
              {
                v215 &= v197 - 1;
              }
              v214 = (_QWORD *)(*v196 + 8 * v215);
            }
            *v214 = v203;
            goto LABEL_283;
          }
        }
      }
      else
      {
        v91 = v1347;
      }
      do
      {
        v195 = *((_QWORD *)v179 - 1);
        v179 -= 8;
        *--v188 = v195;
      }
      while (v179 != v182);
      goto LABEL_223;
    }
LABEL_462:
    v287 = operator new(0x28uLL);
    v288 = v1351;
    *v287 = &off_1E4280758;
    v287[1] = v17;
    v287[2] = v87;
    *((_WORD *)v287 + 12) = v91;
    v287[4] = v101;
    *(_QWORD *)&v1370[24] = v287;
    *(_QWORD *)&v1368[24] = 0;
    *(_DWORD *)&v1370[32] = 0;
    ecs2::Runtime::queueCommand(v107, (uint64_t)v1370);
    if (*(_DWORD *)&v1370[32] != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
    *(_DWORD *)&v1370[32] = -1;
    v289 = *(_QWORD **)&v1368[24];
    if (*(_BYTE **)&v1368[24] == v1368)
    {
      v289 = v1368;
      v290 = 4;
    }
    else
    {
      if (!*(_QWORD *)&v1368[24])
        goto LABEL_469;
      v290 = 5;
    }
    (*(void (**)(void))(*v289 + 8 * v290))();
LABEL_469:
    v291 = (((v87 - 0x61C8864680B583EBLL) << 6) - 0x61C8864680B583EBLL + ((v87 - 0x61C8864680B583EBLL) >> 2)) ^ (v87 - 0x61C8864680B583EBLL);
    v292 = ((v291 << 6) - 0x61C8864680B583EBLL + (v291 >> 2)) ^ v291;
    v293 = (v292 >> 2) + (v292 << 6);
    v294 = mre::GGLResourceStore::getTextureHandleWithKey((int8x8_t *)v1351, (uint64_t *)((v293 - 0x61C8864680B583EALL) ^ v292), 0);
    if (v294)
    {
      v1360 = v294;
      v295 = *(_QWORD *)(v1351 + 504);
      if (v294 >= (unint64_t)((*(_QWORD *)(v1351 + 512) - v295) >> 3)
        || ((v296 = *(_QWORD *)(v295 + 8 * v294)) != 0
          ? (v297 = HIDWORD(v294) == HIDWORD(v296))
          : (v297 = 0),
            !v297 || *(_QWORD *)(v1351 + 528) + 40 * v296 == *(_QWORD *)(v1351 + 536)))
      {
LABEL_480:
        *(_QWORD *)v1368 = &off_1E42809E0;
        *(_QWORD *)&v1368[8] = v1360;
        *(_QWORD *)&v1368[16] = v1345;
        *(_QWORD *)&v1368[24] = v1368;
        *(_QWORD *)&v1370[24] = v1370;
        *(_QWORD *)v1370 = &off_1E42809E0;
        *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
        *(_DWORD *)&v1370[32] = 0;
        ecs2::Runtime::queueCommand(v107, (uint64_t)v1370);
        if (*(_DWORD *)&v1370[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
        *(_DWORD *)&v1370[32] = -1;
        v311 = *(_QWORD **)&v1368[24];
        if (*(_BYTE **)&v1368[24] == v1368)
        {
          v311 = v1368;
          v312 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v1368[24])
            goto LABEL_487;
          v312 = 5;
        }
        (*(void (**)(void))(*v311 + 8 * v312))();
LABEL_487:
        v313 = mre::GGLResourceStore::getTextureHandleWithKey((int8x8_t *)v288, (uint64_t *)((v293 - 0x61C8864680B583E7) ^ v292), 0);
        if (v313)
        {
          v1367 = v313;
          v314 = *(_QWORD *)(v288 + 504);
          v20 = v1343;
          v101 = v1345;
          if (v313 >= (unint64_t)((*(_QWORD *)(v288 + 512) - v314) >> 3)
            || ((v315 = *(_QWORD *)(v314 + 8 * v313)) != 0
              ? (v316 = HIDWORD(v313) == HIDWORD(v315))
              : (v316 = 0),
                !v316 || *(_QWORD *)(v288 + 528) + 40 * v315 == *(_QWORD *)(v288 + 536)))
          {
LABEL_498:
            *(_QWORD *)v1368 = &off_1E4281688;
            *(_QWORD *)&v1368[8] = v1367;
            *(_QWORD *)&v1368[16] = v101;
            *(_QWORD *)&v1368[24] = v1368;
            *(_QWORD *)&v1370[24] = v1370;
            *(_QWORD *)v1370 = &off_1E4281688;
            *(_OWORD *)&v1370[8] = *(_OWORD *)&v1368[8];
            *(_DWORD *)&v1370[32] = 0;
            ecs2::Runtime::queueCommand(v107, (uint64_t)v1370);
            if (*(_DWORD *)&v1370[32] != -1)
              ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v1370[32]])(&v1375, v1370);
            *(_DWORD *)&v1370[32] = -1;
            v325 = *(_QWORD **)&v1368[24];
            v59 = v1356;
            if (*(_BYTE **)&v1368[24] == v1368)
            {
              v325 = v1368;
              v326 = 4;
            }
            else
            {
              if (!*(_QWORD *)&v1368[24])
                goto LABEL_505;
              v326 = 5;
            }
            (*(void (**)(void))(*v325 + 8 * v326))();
            goto LABEL_505;
          }
          v317 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v288 + 440), (unint64_t)v313, &v1367);
          v318 = v317[4] + 1;
        }
        else
        {
          std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v1351 + 104));
          memset(v1370, 0, 32);
          v1370[32] = 1;
          v319 = geo::packed_array<mre::TextureStorage,geo::handle<mre::Texture>>::push_back((_QWORD *)(v1351 + 480), (__int128 *)v1370);
          std::__shared_mutex_base::unlock((std::__shared_mutex_base *)(v1351 + 104));
          v1367 = (uint64_t *)v319;
          *(_QWORD *)v1368 = v319;
          *(_QWORD *)&v1375 = v319;
          *(_OWORD *)v1370 = (v293 - 0x61C8864680B583E7) ^ v292;
          v320 = v319;
          v107 = v1354;
          v321 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v1351 + 440), v320, v1368);
          *(int64x2_t *)(v321 + 3) = vdupq_n_s64(1uLL);
          *((_WORD *)v321 + 20) = 256;
          v322 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v1351 + 64), v1375, (uint64_t *)&v1375);
          v20 = v1343;
          v101 = v1345;
          v323 = *(_QWORD *)v1370;
          v322[3] = *(_QWORD *)v1370;
          v324 = v1370[8];
          *((_BYTE *)v322 + 32) = v1370[8];
          v317 = std::__hash_table<std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,std::__unordered_map_hasher<mre::TextureKey,std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,mre::TextureKeyHasher,std::equal_to<mre::TextureKey>,true>,std::__unordered_map_equal<mre::TextureKey,std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,std::equal_to<mre::TextureKey>,mre::TextureKeyHasher,true>,std::allocator<std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>>>::__emplace_unique_key_args<mre::TextureKey,std::piecewise_construct_t const&,std::tuple<mre::TextureKey const&>,std::tuple<>>((float *)(v1351 + 24), v323, v324, v1370);
          v318 = v1375;
        }
        v317[4] = v318;
        goto LABEL_498;
      }
      v298 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v1351 + 440), (unint64_t)v294, &v1360);
      v299 = v298[4] + 1;
    }
    else
    {
      std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v1351 + 104));
      memset(v1370, 0, 32);
      v300 = v91;
      v301 = v87;
      v302 = v17;
      v303 = v300;
      v1370[32] = 1;
      v304 = geo::packed_array<mre::TextureStorage,geo::handle<mre::Texture>>::push_back((_QWORD *)(v1351 + 480), (__int128 *)v1370);
      v288 = v1351;
      std::__shared_mutex_base::unlock((std::__shared_mutex_base *)(v1351 + 104));
      v1360 = (uint64_t *)v304;
      *(_QWORD *)&v1375 = v304;
      *(_OWORD *)v1370 = (v293 - 0x61C8864680B583EALL) ^ (unsigned __int128)v292;
      *(_QWORD *)v1368 = v304;
      v305 = v304;
      v107 = v1354;
      v306 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v1351 + 440), v305, v1368);
      v307 = v303;
      v17 = v302;
      v87 = v301;
      v91 = v307;
      *(int64x2_t *)(v306 + 3) = vdupq_n_s64(1uLL);
      *((_WORD *)v306 + 20) = 256;
      v308 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v1351 + 64), v1375, (uint64_t *)&v1375);
      v309 = *(_QWORD *)v1370;
      v308[3] = *(_QWORD *)v1370;
      v310 = v1370[8];
      *((_BYTE *)v308 + 32) = v1370[8];
      v298 = std::__hash_table<std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,std::__unordered_map_hasher<mre::TextureKey,std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,mre::TextureKeyHasher,std::equal_to<mre::TextureKey>,true>,std::__unordered_map_equal<mre::TextureKey,std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,std::equal_to<mre::TextureKey>,mre::TextureKeyHasher,true>,std::allocator<std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>>>::__emplace_unique_key_args<mre::TextureKey,std::piecewise_construct_t const&,std::tuple<mre::TextureKey const&>,std::tuple<>>((float *)(v1351 + 24), v309, v310, v1370);
      v299 = v1375;
    }
    v298[4] = v299;
    goto LABEL_480;
  }
LABEL_2398:
  v1305 = v1365;
  if (v1365)
  {
    v1306 = (unint64_t *)&v1365->__shared_owners_;
    do
      v1307 = __ldaxr(v1306);
    while (__stlxr(v1307 - 1, v1306));
    if (!v1307)
    {
      ((void (*)(std::__shared_weak_count *))v1305->__on_zero_shared)(v1305);
      std::__shared_weak_count::__release_weak(v1305);
    }
  }
}

void sub_19FD78730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a65;
  char a67;
  void *v67;

  operator delete(v67);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t *mre::GGLResourceStore::getTextureHandleWithKey(int8x8_t *a1, uint64_t *a2, unsigned __int8 a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  uint64_t v6;
  uint64_t ***v7;
  uint64_t **v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t *v13;

  v3 = a1[4];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = (unint64_t)(&a2[8 * a3 - 0xE44323405AC1F58] - 0x3A3AA7D820E2E4E6) ^ (a3 - 0x61C8864680B583EBLL);
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = (unint64_t)(&a2[8 * a3 - 0xE44323405AC1F58] - 0x3A3AA7D820E2E4E6) ^ (a3 - 0x61C8864680B583EBLL);
    if (v4 >= *(_QWORD *)&v3)
      v6 = v4 % *(_QWORD *)&v3;
  }
  else
  {
    v6 = (*(_QWORD *)&v3 - 1) & v4;
  }
  v7 = *(uint64_t ****)(*(_QWORD *)&a1[3] + 8 * v6);
  if (!v7)
    return 0;
  v8 = *v7;
  if (!v8)
    return 0;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v13 = v8[1];
      if (v13 == (uint64_t *)v4)
      {
        if (v8[2] == a2 && *((unsigned __int8 *)v8 + 24) == a3)
          return v8[4];
      }
      else if (((unint64_t)v13 & v9) != v6)
      {
        return 0;
      }
      v8 = (uint64_t **)*v8;
      if (!v8)
        return 0;
    }
  }
  while (1)
  {
    v11 = (unint64_t)v8[1];
    if (v11 == v4)
      break;
    if (v11 >= *(_QWORD *)&v3)
      v11 %= *(_QWORD *)&v3;
    if (v11 != v6)
      return 0;
LABEL_14:
    v8 = (uint64_t **)*v8;
    if (!v8)
      return 0;
  }
  if (v8[2] != a2 || *((unsigned __int8 *)v8 + 24) != a3)
    goto LABEL_14;
  return v8[4];
}

void ecs2::addComponent<md::ls::CustomRenderState>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  _QWORD *v8;
  char v9;
  _BYTE v10[24];
  _QWORD *v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v5 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v7 = *((_WORD *)a3 + 8);
  v8 = operator new(0x28uLL);
  *v8 = &off_1E427E940;
  v8[1] = v6;
  v8[2] = v5;
  *((_WORD *)v8 + 12) = v7;
  v8[4] = a2;
  v11 = v8;
  v12 = 0;
  ecs2::Runtime::queueCommand(a1, (uint64_t)v10);
  if (v12 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v12])(&v9, v10);
}

void sub_19FD78AE0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableVisibilityOptions>(gdc::Entity,md::ls::RenderableVisibilityOptions &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableVisibilityOptions>(gdc::Entity,md::ls::RenderableVisibilityOptions &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280908;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableVisibilityOptions>(gdc::Entity,md::ls::RenderableVisibilityOptions &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280908;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableVisibilityOptions>(gdc::Entity,md::ls::RenderableVisibilityOptions &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::RenderableVisibilityOptions>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(4 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = &v20[4 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 4;
        if (v23 < 0x2C)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 2) + 1;
        v25 = &v20[4 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_40:
          do
          {
            v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v13 = v5;
      v14 = v13 + 4;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsZBias>(gdc::Entity,md::ls::NeedsZBias &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsZBias>(gdc::Entity,md::ls::NeedsZBias &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427D6B0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsZBias>(gdc::Entity,md::ls::NeedsZBias &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427D6B0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsZBias>(gdc::Entity,md::ls::NeedsZBias &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::NeedsZBias>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorDataHandle>(gdc::Entity,md::ls::ColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorDataHandle>(gdc::Entity,md::ls::ColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427E0D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorDataHandle>(gdc::Entity,md::ls::ColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427E0D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorDataHandle>(gdc::Entity,md::ls::ColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::ColorDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedColorDataHandle>(gdc::Entity,md::ls::SharedColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedColorDataHandle>(gdc::Entity,md::ls::SharedColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427F678;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedColorDataHandle>(gdc::Entity,md::ls::SharedColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427F678;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedColorDataHandle>(gdc::Entity,md::ls::SharedColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::SharedColorDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialZIndexHandle>(gdc::Entity,md::ls::SharedMaterialZIndexHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialZIndexHandle>(gdc::Entity,md::ls::SharedMaterialZIndexHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4280680;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialZIndexHandle>(gdc::Entity,md::ls::SharedMaterialZIndexHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4280680;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialZIndexHandle>(gdc::Entity,md::ls::SharedMaterialZIndexHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::SharedMaterialZIndexHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialVisibilityOptionsHandle>(gdc::Entity,md::ls::SharedMaterialVisibilityOptionsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialVisibilityOptionsHandle>(gdc::Entity,md::ls::SharedMaterialVisibilityOptionsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281BE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialVisibilityOptionsHandle>(gdc::Entity,md::ls::SharedMaterialVisibilityOptionsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281BE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialVisibilityOptionsHandle>(gdc::Entity,md::ls::SharedMaterialVisibilityOptionsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::SharedMaterialVisibilityOptionsHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427F2D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427F2D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialEmissiveTexture>(gdc::Entity,md::ls::SharedMaterialEmissiveTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialEmissiveTexture>(gdc::Entity,md::ls::SharedMaterialEmissiveTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42815F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialEmissiveTexture>(gdc::Entity,md::ls::SharedMaterialEmissiveTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42815F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialEmissiveTexture>(gdc::Entity,md::ls::SharedMaterialEmissiveTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::SharedMaterialEmissiveTexture>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialAlbedoTexture>(gdc::Entity,md::ls::SharedMaterialAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialAlbedoTexture>(gdc::Entity,md::ls::SharedMaterialAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4280950;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialAlbedoTexture>(gdc::Entity,md::ls::SharedMaterialAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4280950;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialAlbedoTexture>(gdc::Entity,md::ls::SharedMaterialAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::SharedMaterialAlbedoTexture>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableAlbedoTexture>(gdc::Entity,md::ls::RenderableAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E427FBD0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableAlbedoTexture>(gdc::Entity,md::ls::RenderableAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E427FBD0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableAlbedoTexture>(gdc::Entity,md::ls::RenderableAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_1E427FBD0;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableAlbedoTexture>(gdc::Entity,md::ls::RenderableAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E427FBD0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  a2[4] = result[4];
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableAlbedoTexture>(gdc::Entity,md::ls::RenderableAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableAlbedoTexture>(gdc::Entity,md::ls::RenderableAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableAlbedoTexture>(gdc::Entity,md::ls::RenderableAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  __int128 v37;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  _QWORD *i;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = gdc::Registry::storage<md::ls::RenderableAlbedoTexture>(a2);
  v5 = (_QWORD *)v4;
  v6 = *(_OWORD *)(a1 + 8);
  v46 = v6;
  v7 = *(_QWORD *)(a1 + 16);
  if (*((_QWORD *)&v6 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a1 + 24);
  v47 = v3;
  v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v4 + 32), (uint64_t)&v47);
  if ((v12 & 1) != 0)
  {
    v23 = (char *)v5[11];
    v22 = v5[12];
    if ((unint64_t)v23 >= v22)
    {
      v27 = (char *)v5[10];
      v28 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v27) >> 3);
      v29 = v28 + 1;
      if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v27) >> 3);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0x555555555555555)
        v31 = 0xAAAAAAAAAAAAAAALL;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_60;
        v32 = operator new(24 * v31);
      }
      else
      {
        v32 = 0;
      }
      v33 = (char *)&v32[(v23 - v27) >> 3];
      *(_OWORD *)v33 = v46;
      if (v7)
      {
        v34 = (unint64_t *)(v7 + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
        v27 = (char *)v5[10];
        v23 = (char *)v5[11];
      }
      v36 = (char *)&v32[3 * v31];
      v32[3 * v28 + 2] = v10;
      v26 = v33 + 24;
      if (v23 == v27)
      {
        v5[10] = v33;
        v5[11] = v26;
        v5[12] = v36;
      }
      else
      {
        do
        {
          v37 = *(_OWORD *)(v23 - 24);
          v23 -= 24;
          *(_OWORD *)(v33 - 24) = v37;
          v33 -= 24;
          *(_QWORD *)v23 = 0;
          *((_QWORD *)v23 + 1) = 0;
          *((_QWORD *)v33 + 2) = *((_QWORD *)v23 + 2);
        }
        while (v23 != v27);
        v27 = (char *)v5[10];
        v38 = (char *)v5[11];
        v5[10] = v33;
        v5[11] = v26;
        v5[12] = v36;
        while (v38 != v27)
        {
          v39 = (std::__shared_weak_count *)*((_QWORD *)v38 - 2);
          if (v39)
          {
            p_shared_owners = (unint64_t *)&v39->__shared_owners_;
            do
              v41 = __ldaxr(p_shared_owners);
            while (__stlxr(v41 - 1, p_shared_owners));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          v38 -= 24;
        }
      }
      if (v27)
        operator delete(v27);
    }
    else
    {
      *(_OWORD *)v23 = v46;
      if (v7)
      {
        v24 = (unint64_t *)(v7 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      *((_QWORD *)v23 + 2) = v10;
      v26 = v23 + 24;
    }
    v5[11] = v26;
    v19 = v5[31];
  }
  else
  {
    v13 = v5[10];
    v14 = ((uint64_t)v11 - v5[7]) >> 3;
    v15 = v13 + 24 * v14;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_OWORD *)v15 = v46;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    *(_QWORD *)(v13 + 24 * v14 + 16) = v10;
    v19 = v5[31];
    if (v15 != v5[11])
    {
      v20 = (_QWORD *)v5[16];
      if (v20)
      {
        while (1)
        {
          v49 = &v47;
          v50 = 1;
          v48 = v19;
          v21 = v20[6];
          if (!v21)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v48, &v49);
          v20 = (_QWORD *)*v20;
          if (!v20)
            goto LABEL_14;
        }
LABEL_58:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
LABEL_60:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
LABEL_14:
      v46 = 0u;
      goto LABEL_52;
    }
    v46 = 0u;
  }
  for (i = (_QWORD *)v5[22]; i; i = (_QWORD *)*i)
  {
    v49 = &v47;
    v50 = 1;
    v48 = v19;
    v43 = i[6];
    if (!v43)
      goto LABEL_58;
    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v43 + 48))(v43, &v48, &v49);
  }
LABEL_52:
  if (*((_QWORD *)&v46 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v46 + 1) + 16))(*((_QWORD *)&v46 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v46 + 1));
    }
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::TexTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::TexTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::TexTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::TexTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427F1F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::TexTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::TexTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427F1F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::TexTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::TexTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::TexTexture>>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427F240;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427F240;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialDiffuseTexture>(gdc::Entity,md::ls::SharedMaterialDiffuseTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialDiffuseTexture>(gdc::Entity,md::ls::SharedMaterialDiffuseTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281448;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialDiffuseTexture>(gdc::Entity,md::ls::SharedMaterialDiffuseTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281448;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialDiffuseTexture>(gdc::Entity,md::ls::SharedMaterialDiffuseTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::SharedMaterialDiffuseTexture>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsMaterial>(gdc::Entity,md::ls::IsMaterial &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsMaterial>(gdc::Entity,md::ls::IsMaterial &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427D590;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsMaterial>(gdc::Entity,md::ls::IsMaterial &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427D590;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsMaterial>(gdc::Entity,md::ls::IsMaterial &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::IsMaterial>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableMaterialData>(gdc::Entity,md::ls::RenderableMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableMaterialData>(gdc::Entity,md::ls::RenderableMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E427F990;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableMaterialData>(gdc::Entity,md::ls::RenderableMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E427F990;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableMaterialData>(gdc::Entity,md::ls::RenderableMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  _OWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _OWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::RenderableMaterialData>(a2);
  v24 = *(_OWORD *)(a1 + 8);
  v25 = *(_OWORD *)(a1 + 24);
  v26 = v3;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v26);
  if ((v6 & 1) != 0)
  {
    v12 = (char *)v4[11];
    v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (char *)v4[10];
      v15 = (v12 - v14) >> 5;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59)
        goto LABEL_30;
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 4 > v16)
        v16 = v17 >> 4;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
        v18 = 0x7FFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 59)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = (char *)operator new(32 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[32 * v15];
      *(_OWORD *)v20 = v24;
      *((_OWORD *)v20 + 1) = v25;
      v13 = v20 + 32;
      if (v12 != v14)
      {
        do
        {
          v21 = *((_OWORD *)v12 - 1);
          *((_OWORD *)v20 - 2) = *((_OWORD *)v12 - 2);
          *((_OWORD *)v20 - 1) = v21;
          v20 -= 32;
          v12 -= 32;
        }
        while (v12 != v14);
        v12 = (char *)v4[10];
      }
      v4[10] = (uint64_t)v20;
      v4[11] = (uint64_t)v13;
      v4[12] = (uint64_t)&v19[32 * v18];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_OWORD *)v12 = v24;
      *((_OWORD *)v12 + 1) = v25;
      v13 = v12 + 32;
    }
    v4[11] = (uint64_t)v13;
    v8 = v4[31];
  }
  else
  {
    v7 = (_OWORD *)(v4[10] + 4 * ((_QWORD)v5 - v4[7]));
    *v7 = v24;
    v7[1] = v25;
    v8 = v4[31];
    if (v7 != (_OWORD *)v4[11])
    {
      v9 = (_QWORD *)v4[16];
      if (v9)
      {
        while (1)
        {
          v28 = &v26;
          v29 = 1;
          v27 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v27, &v28);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v22 = (_QWORD *)v4[22];
  if (v22)
  {
    while (1)
    {
      v28 = &v26;
      v29 = 1;
      v27 = v8;
      v23 = v22[6];
      if (!v23)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v23 + 48))(v23, &v27, &v28);
      v22 = (_QWORD *)*v22;
      if (!v22)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomZIndex>(gdc::Entity,md::ls::CustomZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomZIndex>(gdc::Entity,md::ls::CustomZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427D9C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomZIndex>(gdc::Entity,md::ls::CustomZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427D9C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomZIndex>(gdc::Entity,md::ls::CustomZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::CustomZIndex>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AlbedoTintColor>(gdc::Entity,md::ls::AlbedoTintColor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AlbedoTintColor>(gdc::Entity,md::ls::AlbedoTintColor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E427E088;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AlbedoTintColor>(gdc::Entity,md::ls::AlbedoTintColor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427E088;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AlbedoTintColor>(gdc::Entity,md::ls::AlbedoTintColor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _QWORD *v9;
  char v10;
  _DWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  _DWORD *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::AlbedoTintColor>(a2);
  v6 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  v8 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 20);
  v27 = v3;
  v9 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v27);
  if ((v10 & 1) != 0)
  {
    v16 = (char *)v4[11];
    v15 = v4[12];
    if ((unint64_t)v16 >= v15)
    {
      v18 = (char *)v4[10];
      v19 = (v16 - v18) >> 4;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 60)
        goto LABEL_30;
      v21 = v15 - (_QWORD)v18;
      if (v21 >> 3 > v20)
        v20 = v21 >> 3;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
        v22 = 0xFFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (v22)
      {
        if (v22 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v23 = (char *)operator new(16 * v22);
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[16 * v19];
      *(_DWORD *)v24 = v6;
      *((_DWORD *)v24 + 1) = v5;
      *((_DWORD *)v24 + 2) = v8;
      *((_DWORD *)v24 + 3) = v7;
      v17 = v24 + 16;
      if (v16 != v18)
      {
        do
        {
          *((_OWORD *)v24 - 1) = *((_OWORD *)v16 - 1);
          v24 -= 16;
          v16 -= 16;
        }
        while (v16 != v18);
        v16 = (char *)v4[10];
      }
      v4[10] = (uint64_t)v24;
      v4[11] = (uint64_t)v17;
      v4[12] = (uint64_t)&v23[16 * v22];
      if (v16)
        operator delete(v16);
    }
    else
    {
      *(_DWORD *)v16 = v6;
      *((_DWORD *)v16 + 1) = v5;
      v17 = v16 + 16;
      *((_DWORD *)v16 + 2) = v8;
      *((_DWORD *)v16 + 3) = v7;
    }
    v4[11] = (uint64_t)v17;
    v12 = v4[31];
  }
  else
  {
    v11 = (_DWORD *)(v4[10] + 2 * ((_QWORD)v9 - v4[7]));
    *v11 = v6;
    v11[1] = v5;
    v11[2] = v8;
    v11[3] = v7;
    v12 = v4[31];
    if (v11 != (_DWORD *)v4[11])
    {
      v13 = (_QWORD *)v4[16];
      if (v13)
      {
        while (1)
        {
          v29 = &v27;
          v30 = 1;
          v28 = v12;
          v14 = v13[6];
          if (!v14)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v14 + 48))(v14, &v28, &v29);
          v13 = (_QWORD *)*v13;
          if (!v13)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v25 = (_QWORD *)v4[22];
  if (v25)
  {
    while (1)
    {
      v29 = &v27;
      v30 = 1;
      v28 = v12;
      v26 = v25[6];
      if (!v26)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v26 + 48))(v26, &v28, &v29);
      v25 = (_QWORD *)*v25;
      if (!v25)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::OrientedBox>(gdc::Entity,md::ls::OrientedBox &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::OrientedBox>(gdc::Entity,md::ls::OrientedBox &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __int128 v3;
  __n128 result;

  v2 = (char *)operator new(0x78uLL);
  *(_QWORD *)v2 = &off_1E427D8F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  v3 = *(_OWORD *)(a1 + 80);
  *((_OWORD *)v2 + 4) = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v2 + 5) = v3;
  result = *(__n128 *)(a1 + 96);
  *((__n128 *)v2 + 6) = result;
  *((_QWORD *)v2 + 14) = *(_QWORD *)(a1 + 112);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::OrientedBox>(gdc::Entity,md::ls::OrientedBox &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;

  *(_QWORD *)a2 = &off_1E427D8F0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  result = *(__n128 *)(a1 + 64);
  v5 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 96) = v5;
  *(__n128 *)(a2 + 64) = result;
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a1 + 112);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::OrientedBox>(gdc::Entity,md::ls::OrientedBox &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;

  v3 = a1[14];
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::OrientedBox>(a2);
  v43 = a1[1];
  v44 = a1[2];
  v5 = a1[5];
  v41 = a1[4];
  v42 = a1[3];
  v6 = a1[6];
  v40 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[10];
  v10 = a1[11];
  v12 = a1[12];
  v11 = a1[13];
  v45 = v3;
  v13 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v45);
  if ((v14 & 1) != 0)
  {
    v20 = (_QWORD *)v4[11];
    v19 = v4[12];
    if ((unint64_t)v20 >= v19)
    {
      v22 = (_QWORD *)v4[10];
      v23 = 0x4EC4EC4EC4EC4EC5 * (v20 - v22) + 1;
      v25 = v6;
      v24 = v11;
      v27 = v43;
      v26 = v44;
      v28 = v5;
      if (v23 > 0x276276276276276)
        goto LABEL_32;
      v29 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v19 - (_QWORD)v22) >> 3);
      if (2 * v29 > v23)
        v23 = 2 * v29;
      if (v29 >= 0x13B13B13B13B13BLL)
        v30 = 0x276276276276276;
      else
        v30 = v23;
      if (v30)
      {
        if (v30 > 0x276276276276276)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v31 = (char *)operator new(104 * v30);
        v25 = v6;
        v24 = v11;
        v27 = v43;
        v26 = v44;
        v28 = v5;
      }
      else
      {
        v31 = 0;
      }
      v32 = &v31[8 * (v20 - v22)];
      *(_QWORD *)v32 = v27;
      *((_QWORD *)v32 + 1) = v26;
      *((_QWORD *)v32 + 2) = v42;
      *((_QWORD *)v32 + 3) = v41;
      *((_QWORD *)v32 + 4) = v28;
      *((_QWORD *)v32 + 5) = v25;
      *((_QWORD *)v32 + 6) = v40;
      *((_QWORD *)v32 + 7) = v7;
      *((_QWORD *)v32 + 8) = v8;
      *((_QWORD *)v32 + 9) = v9;
      *((_QWORD *)v32 + 10) = v10;
      *((_QWORD *)v32 + 11) = v12;
      *((_QWORD *)v32 + 12) = v24;
      v21 = v32 + 104;
      if (v20 != v22)
      {
        do
        {
          v33 = *(_OWORD *)(v20 - 13);
          *((_QWORD *)v32 - 11) = *(v20 - 11);
          *(_OWORD *)(v32 - 104) = v33;
          v34 = *((_OWORD *)v20 - 5);
          *((_QWORD *)v32 - 8) = *(v20 - 8);
          *((_OWORD *)v32 - 5) = v34;
          *((_QWORD *)v32 - 7) = *(v20 - 7);
          v35 = *((_OWORD *)v20 - 3);
          v36 = *((_OWORD *)v20 - 1);
          *((_OWORD *)v32 - 2) = *((_OWORD *)v20 - 2);
          *((_OWORD *)v32 - 1) = v36;
          *((_OWORD *)v32 - 3) = v35;
          v32 -= 104;
          v20 -= 13;
        }
        while (v20 != v22);
        v20 = (_QWORD *)v4[10];
      }
      v4[10] = (uint64_t)v32;
      v4[11] = (uint64_t)v21;
      v4[12] = (uint64_t)&v31[104 * v30];
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v20 = v43;
      v20[1] = v44;
      v20[2] = v42;
      v20[3] = v41;
      v20[4] = v5;
      v20[5] = v6;
      v20[6] = v40;
      v20[7] = v7;
      v20[8] = v8;
      v20[9] = v9;
      v20[10] = v10;
      v20[11] = v12;
      v21 = v20 + 13;
      v20[12] = v11;
    }
    v4[11] = (uint64_t)v21;
  }
  else
  {
    v15 = (_QWORD *)(v4[10] + 104 * (((uint64_t)v13 - v4[7]) >> 3));
    v15[4] = v5;
    v15[5] = v6;
    *v15 = v43;
    v15[1] = v44;
    v15[2] = v42;
    v15[3] = v41;
    v15[6] = v40;
    v15[7] = v7;
    v15[8] = v8;
    v15[9] = v9;
    v15[10] = v10;
    v15[11] = v12;
    v15[12] = v11;
    if (v15 != (_QWORD *)v4[11])
    {
      v16 = (_QWORD *)v4[16];
      if (v16)
      {
        v17 = v4[31];
        while (1)
        {
          v47 = &v45;
          v48 = 1;
          v46 = v17;
          v18 = v16[6];
          if (!v18)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v18 + 48))(v18, &v46, &v47);
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
LABEL_31:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_32:
        abort();
      }
      return;
    }
  }
  v37 = (_QWORD *)v4[22];
  if (v37)
  {
    v38 = v4[31];
    while (1)
    {
      v47 = &v45;
      v48 = 1;
      v46 = v38;
      v39 = v37[6];
      if (!v39)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v39 + 48))(v39, &v46, &v47);
      v37 = (_QWORD *)*v37;
      if (!v37)
        return;
    }
    goto LABEL_31;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleEmissiveDataKeyHandle>(gdc::Entity,md::ls::StyleEmissiveDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleEmissiveDataKeyHandle>(gdc::Entity,md::ls::StyleEmissiveDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4280710;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleEmissiveDataKeyHandle>(gdc::Entity,md::ls::StyleEmissiveDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4280710;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleEmissiveDataKeyHandle>(gdc::Entity,md::ls::StyleEmissiveDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::StyleEmissiveDataKeyHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialID>(gdc::Entity,md::ls::MaterialID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialID>(gdc::Entity,md::ls::MaterialID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427D668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialID>(gdc::Entity,md::ls::MaterialID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427D668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialID>(gdc::Entity,md::ls::MaterialID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int8x8_t v6;
  uint8x8_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  _QWORD *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = *(_QWORD *)(a1 + 16);
  v48 = 0x764AD34FCA61B6DLL;
  v5 = (uint64_t *)(a2 + 120);
  v6 = *(int8x8_t *)(a2 + 128);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = 0x764AD34FCA61B6DLL;
      if (*(_QWORD *)&v6 <= 0x764AD34FCA61B6DuLL)
        v8 = 0x764AD34FCA61B6DuLL % *(_QWORD *)&v6;
    }
    else
    {
      v8 = (*(_QWORD *)&v6 - 1) & 0x764AD34FCA61B6DLL;
    }
    v9 = *(_QWORD **)(*v5 + 8 * v8);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v7.u32[0] < 2uLL)
        {
          v11 = *(_QWORD *)&v6 - 1;
          while (1)
          {
            v13 = v10[1];
            if (v13 == 0x764AD34FCA61B6DLL)
            {
              if (v10[2] == 0x764AD34FCA61B6DLL)
                goto LABEL_56;
            }
            else if ((v13 & v11) != v8)
            {
              goto LABEL_21;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_21;
          }
        }
        do
        {
          v12 = v10[1];
          if (v12 == 0x764AD34FCA61B6DLL)
          {
            if (v10[2] == 0x764AD34FCA61B6DLL)
            {
LABEL_56:
              v14 = v10[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v12 >= *(_QWORD *)&v6)
              v12 %= *(_QWORD *)&v6;
            if (v12 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_21:
  v14 = operator new();
  *(_QWORD *)(v14 + 16) = "md::ls::MaterialID]";
  *(_QWORD *)(v14 + 24) = 18;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E4270F68;
  *(_QWORD *)(v14 + 8) = 0x764AD34FCA61B6DLL;
  *(_QWORD *)(v14 + 248) = a2;
  v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, 0x764AD34FCA61B6DuLL, &v48);
  v16 = v15[3];
  v15[3] = v14;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v44 = 0x764AD34FCA61B6DLL;
  v45 = (uint64_t)"md::ls::MaterialID]";
  v46 = 18;
  gdc::Registry::_registerStorageDataSignals(a2, 0x764AD34FCA61B6DLL, (uint64_t)&v44, (uint64_t *)(v14 + 104));
LABEL_24:
  v17 = *(_QWORD *)(a1 + 8);
  v47 = v4;
  v18 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v14 + 32), (uint64_t)&v47);
  if ((v19 & 1) != 0)
  {
    v25 = *(char **)(v14 + 88);
    v24 = *(_QWORD *)(v14 + 96);
    if ((unint64_t)v25 >= v24)
    {
      v27 = *(char **)(v14 + 80);
      v28 = (v25 - v27) >> 3;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61)
        goto LABEL_58;
      v30 = v24 - (_QWORD)v27;
      if (v30 >> 2 > v29)
        v29 = v30 >> 2;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v32 = operator new(8 * v31);
      }
      else
      {
        v32 = 0;
      }
      v33 = &v32[8 * v28];
      v34 = &v32[8 * v31];
      *v33 = v17;
      v26 = v33 + 1;
      if (v25 != v27)
      {
        v35 = v25 - v27 - 8;
        if (v35 < 0x58)
          goto LABEL_62;
        if ((unint64_t)(v27 - v32) < 0x20)
          goto LABEL_62;
        v36 = (v35 >> 3) + 1;
        v37 = &v32[8 * v28 - 16];
        v38 = v25 - 16;
        v39 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v40 = *(_OWORD *)v38;
          *(v37 - 1) = *((_OWORD *)v38 - 1);
          *v37 = v40;
          v37 -= 2;
          v38 -= 32;
          v39 -= 4;
        }
        while (v39);
        v33 -= v36 & 0x3FFFFFFFFFFFFFFCLL;
        v25 -= 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
        if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_62:
          do
          {
            v41 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *--v33 = v41;
          }
          while (v25 != v27);
        }
      }
      *(_QWORD *)(v14 + 80) = v33;
      *(_QWORD *)(v14 + 88) = v26;
      *(_QWORD *)(v14 + 96) = v34;
      if (v27)
        operator delete(v27);
    }
    else
    {
      *(_QWORD *)v25 = v17;
      v26 = v25 + 8;
    }
    *(_QWORD *)(v14 + 88) = v26;
    v21 = *(_QWORD *)(v14 + 248);
  }
  else
  {
    v20 = (_QWORD *)((char *)v18 + *(_QWORD *)(v14 + 80) - *(_QWORD *)(v14 + 56));
    *v20 = v17;
    v21 = *(_QWORD *)(v14 + 248);
    if (v20 != *(_QWORD **)(v14 + 88))
    {
      v22 = *(_QWORD **)(v14 + 128);
      if (v22)
      {
        while (1)
        {
          v44 = (uint64_t)&v47;
          v45 = 1;
          v48 = v21;
          v23 = v22[6];
          if (!v23)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v23 + 48))(v23, &v48, &v44);
          v22 = (_QWORD *)*v22;
          if (!v22)
            return;
        }
LABEL_57:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_58:
        abort();
      }
      return;
    }
  }
  v42 = *(_QWORD **)(v14 + 176);
  if (v42)
  {
    while (1)
    {
      v44 = (uint64_t)&v47;
      v45 = 1;
      v48 = v21;
      v43 = v42[6];
      if (!v43)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v43 + 48))(v43, &v48, &v44);
      v42 = (_QWORD *)*v42;
      if (!v42)
        return;
    }
    goto LABEL_57;
  }
}

void sub_19FD7C580(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::MaterialID>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MaterialID>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MaterialID>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MaterialID>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BlendRasterConstantDataHandle>(gdc::Entity,md::ls::BlendRasterConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BlendRasterConstantDataHandle>(gdc::Entity,md::ls::BlendRasterConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281520;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BlendRasterConstantDataHandle>(gdc::Entity,md::ls::BlendRasterConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281520;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BlendRasterConstantDataHandle>(gdc::Entity,md::ls::BlendRasterConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::BlendRasterConstantDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RasterOverlayConstantDataHandle>(gdc::Entity,md::ls::RasterOverlayConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RasterOverlayConstantDataHandle>(gdc::Entity,md::ls::RasterOverlayConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E4281958;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RasterOverlayConstantDataHandle>(gdc::Entity,md::ls::RasterOverlayConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E4281958;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RasterOverlayConstantDataHandle>(gdc::Entity,md::ls::RasterOverlayConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  _OWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _OWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::RasterOverlayConstantDataHandle>(a2);
  v24 = *(_OWORD *)(a1 + 8);
  v25 = *(_OWORD *)(a1 + 24);
  v26 = v3;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v26);
  if ((v6 & 1) != 0)
  {
    v12 = (char *)v4[11];
    v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (char *)v4[10];
      v15 = (v12 - v14) >> 5;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59)
        goto LABEL_30;
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 4 > v16)
        v16 = v17 >> 4;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
        v18 = 0x7FFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 59)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = (char *)operator new(32 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[32 * v15];
      *(_OWORD *)v20 = v24;
      *((_OWORD *)v20 + 1) = v25;
      v13 = v20 + 32;
      if (v12 != v14)
      {
        do
        {
          v21 = *((_OWORD *)v12 - 1);
          *((_OWORD *)v20 - 2) = *((_OWORD *)v12 - 2);
          *((_OWORD *)v20 - 1) = v21;
          v20 -= 32;
          v12 -= 32;
        }
        while (v12 != v14);
        v12 = (char *)v4[10];
      }
      v4[10] = (uint64_t)v20;
      v4[11] = (uint64_t)v13;
      v4[12] = (uint64_t)&v19[32 * v18];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_OWORD *)v12 = v24;
      *((_OWORD *)v12 + 1) = v25;
      v13 = v12 + 32;
    }
    v4[11] = (uint64_t)v13;
    v8 = v4[31];
  }
  else
  {
    v7 = (_OWORD *)(v4[10] + 4 * ((_QWORD)v5 - v4[7]));
    *v7 = v24;
    v7[1] = v25;
    v8 = v4[31];
    if (v7 != (_OWORD *)v4[11])
    {
      v9 = (_QWORD *)v4[16];
      if (v9)
      {
        while (1)
        {
          v28 = &v26;
          v29 = 1;
          v27 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v27, &v28);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v22 = (_QWORD *)v4[22];
  if (v22)
  {
    while (1)
    {
      v28 = &v26;
      v29 = 1;
      v27 = v8;
      v23 = v22[6];
      if (!v23)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v23 + 48))(v23, &v27, &v28);
      v22 = (_QWORD *)*v22;
      if (!v22)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasOverlayPatch>(gdc::Entity,md::ls::HasOverlayPatch &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasOverlayPatch>(gdc::Entity,md::ls::HasOverlayPatch &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427E1F0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasOverlayPatch>(gdc::Entity,md::ls::HasOverlayPatch &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427E1F0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasOverlayPatch>(gdc::Entity,md::ls::HasOverlayPatch &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *HasOverlay;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  HasOverlay = (uint64_t *)gdc::Registry::storage<md::ls::HasOverlayPatch>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(HasOverlay + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)HasOverlay[11];
    v12 = HasOverlay[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_37:
      HasOverlay[11] = v14;
      v9 = HasOverlay[31];
      goto LABEL_38;
    }
    v15 = (_BYTE *)HasOverlay[10];
    v16 = v13 - v15;
    v17 = v13 - v15 + 1;
    if (v17 < 0)
      goto LABEL_43;
    v18 = v12 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)operator new(v19);
    else
      v20 = 0;
    v21 = &v20[v16];
    v22 = &v20[v19];
    v20[v16] = v5;
    v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      HasOverlay[10] = (uint64_t)v21;
      HasOverlay[11] = v14;
      HasOverlay[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20)
      goto LABEL_32;
    if (v16 >= 0x20)
    {
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = (__int128 *)(v13 - 16);
      v25 = &v20[v13 - 16 - v15];
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_34;
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      v23 = 0;
    }
    v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v13[-v23 - 8];
    v30 = v29 - v15;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 -= 8;
      *(_QWORD *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    v21 = v20;
    goto LABEL_35;
  }
  v8 = (_BYTE *)(HasOverlay[10] + (((uint64_t)v6 - HasOverlay[7]) >> 3));
  *v8 = v5;
  v9 = HasOverlay[31];
  if (v8 != (_BYTE *)HasOverlay[11])
  {
    v10 = (_QWORD *)HasOverlay[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v34 = (_QWORD *)HasOverlay[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_42;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::OverlayTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::OverlayTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427F288;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::OverlayTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427F288;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::OverlayTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorRampDataHandle>(gdc::Entity,md::ls::ColorRampDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorRampDataHandle>(gdc::Entity,md::ls::ColorRampDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427EDC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorRampDataHandle>(gdc::Entity,md::ls::ColorRampDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427EDC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorRampDataHandle>(gdc::Entity,md::ls::ColorRampDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsDualElevation>(gdc::Entity,md::ls::IsDualElevation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsDualElevation>(gdc::Entity,md::ls::IsDualElevation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427E238;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsDualElevation>(gdc::Entity,md::ls::IsDualElevation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427E238;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsDualElevation>(gdc::Entity,md::ls::IsDualElevation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = *(_QWORD *)(a1 + 12);
  v38 = 0x38C48843ABFB6D46;
  v4 = (uint64_t *)(a2 + 120);
  v5 = *(int8x8_t *)(a2 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0x38C48843ABFB6D46;
      if (*(_QWORD *)&v5 <= 0x38C48843ABFB6D46uLL)
        v7 = 0x38C48843ABFB6D46uLL % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & 0x38C48843ABFB6D46;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == 0x38C48843ABFB6D46)
            {
              if (v9[2] == 0x38C48843ABFB6D46)
                goto LABEL_50;
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == 0x38C48843ABFB6D46)
          {
            if (v9[2] == 0x38C48843ABFB6D46)
            {
LABEL_50:
              v13 = v9[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = operator new();
  *(_QWORD *)(v13 + 16) = "md::ls::IsDualElevation]";
  *(_QWORD *)(v13 + 24) = 23;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_DWORD *)(v13 + 144) = 1065353216;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_QWORD *)(v13 + 184) = 0;
  *(_DWORD *)(v13 + 192) = 1065353216;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_QWORD *)(v13 + 232) = 0;
  *(_DWORD *)(v13 + 240) = 1065353216;
  *(_QWORD *)v13 = &off_1E4271A18;
  *(_QWORD *)(v13 + 8) = 0x38C48843ABFB6D46;
  *(_QWORD *)(v13 + 248) = a2;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, 0x38C48843ABFB6D46uLL, &v38);
  v15 = v14[3];
  v14[3] = v13;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v34 = 0x38C48843ABFB6D46;
  v35 = (uint64_t)"md::ls::IsDualElevation]";
  v36 = 23;
  gdc::Registry::_registerStorageDataSignals(a2, 0x38C48843ABFB6D46, (uint64_t)&v34, (uint64_t *)(v13 + 104));
LABEL_24:
  v37 = v3;
  v16 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v13 + 32), (uint64_t)&v37);
  if ((v17 & 1) != 0)
  {
    v22 = *(_BYTE **)(v13 + 88);
    v21 = *(_QWORD *)(v13 + 96);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *(char **)(v13 + 80);
      v25 = v22 - v24;
      v26 = v22 - v24 + 1;
      if (v26 < 0)
        goto LABEL_52;
      v27 = v21 - (_QWORD)v24;
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
        v28 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)operator new(v28);
      else
        v29 = 0;
      v30 = &v29[v28];
      v23 = (uint64_t)&v29[v25 + 1];
      v31 = (char *)(v24 - v22);
      if (v24 == v22)
        v31 = 0;
      *(_QWORD *)(v13 + 80) = &v29[v25 + (_QWORD)v31];
      *(_QWORD *)(v13 + 88) = v23;
      *(_QWORD *)(v13 + 96) = v30;
      if (v24)
        operator delete(v24);
    }
    else
    {
      v23 = (uint64_t)(v22 + 1);
    }
    *(_QWORD *)(v13 + 88) = v23;
    v18 = *(_QWORD *)(v13 + 248);
  }
  else
  {
    v18 = *(_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v13 + 80) + (((uint64_t)v16 - *(_QWORD *)(v13 + 56)) >> 3) != *(_QWORD *)(v13 + 88))
    {
      v19 = *(_QWORD **)(v13 + 128);
      if (v19)
      {
        while (1)
        {
          v34 = (uint64_t)&v37;
          v35 = 1;
          v38 = v18;
          v20 = v19[6];
          if (!v20)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v38, &v34);
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
LABEL_51:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_52:
        abort();
      }
      return;
    }
  }
  v32 = *(_QWORD **)(v13 + 176);
  if (v32)
  {
    while (1)
    {
      v34 = (uint64_t)&v37;
      v35 = 1;
      v38 = v18;
      v33 = v32[6];
      if (!v33)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v38, &v34);
      v32 = (_QWORD *)*v32;
      if (!v32)
        return;
    }
    goto LABEL_51;
  }
}

void sub_19FD7D80C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::IsDualElevation>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsDualElevation>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsDualElevation>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsDualElevation>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialRasterMaxIndex>(gdc::Entity,md::ls::MaterialRasterMaxIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialRasterMaxIndex>(gdc::Entity,md::ls::MaterialRasterMaxIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427F900;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialRasterMaxIndex>(gdc::Entity,md::ls::MaterialRasterMaxIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427F900;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialRasterMaxIndex>(gdc::Entity,md::ls::MaterialRasterMaxIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  __int16 v5;
  _QWORD *v6;
  char v7;
  _WORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _WORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _WORD *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  char *v27;
  unint64_t v28;
  __int128 v29;
  __int16 v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::MaterialRasterMaxIndex>(a2);
  v5 = *(_WORD *)(a1 + 8);
  v33 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v33);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = v13 - v15;
      if (v13 - v15 <= -3)
        goto LABEL_35;
      v17 = v16 >> 1;
      v18 = v12 - (_QWORD)v15;
      if (v18 <= (v16 >> 1) + 1)
        v19 = v17 + 1;
      else
        v19 = v18;
      if (v18 >= 0x7FFFFFFFFFFFFFFELL)
        v20 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
      {
        if (v20 < 0)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v21 = operator new(2 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[2 * v17];
      v23 = &v21[2 * v20];
      *v22 = v5;
      v14 = v22 + 1;
      if (v13 != v15)
      {
        v24 = v13 - v15 - 2;
        if (v24 < 0x1E)
          goto LABEL_39;
        if ((unint64_t)(v13 - &v21[v16 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
          goto LABEL_39;
        v25 = (v24 >> 1) + 1;
        v26 = &v21[2 * v17 - 16];
        v27 = v13 - 16;
        v28 = v25 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v29 = *(_OWORD *)v27;
          *(v26 - 1) = *((_OWORD *)v27 - 1);
          *v26 = v29;
          v26 -= 2;
          v27 -= 32;
          v28 -= 16;
        }
        while (v28);
        v22 -= v25 & 0xFFFFFFFFFFFFFFF0;
        v13 -= 2 * (v25 & 0xFFFFFFFFFFFFFFF0);
        if (v25 != (v25 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_39:
          do
          {
            v30 = *((_WORD *)v13 - 1);
            v13 -= 2;
            *--v22 = v30;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v22;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v23;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_WORD *)v13 = v5;
      v14 = v13 + 2;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_WORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 2));
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_WORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v35 = &v33;
          v36 = 1;
          v34 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v34, &v35);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_34:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_35:
        abort();
      }
      return;
    }
  }
  v31 = (_QWORD *)v4[22];
  if (v31)
  {
    while (1)
    {
      v35 = &v33;
      v36 = 1;
      v34 = v9;
      v32 = v31[6];
      if (!v32)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v32 + 48))(v32, &v34, &v35);
      v31 = (_QWORD *)*v31;
      if (!v31)
        return;
    }
    goto LABEL_34;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMaterialRaster>(gdc::Entity,md::ls::HasMaterialRaster &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMaterialRaster>(gdc::Entity,md::ls::HasMaterialRaster &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427EA18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMaterialRaster>(gdc::Entity,md::ls::HasMaterialRaster &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427EA18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMaterialRaster>(gdc::Entity,md::ls::HasMaterialRaster &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *HasMaterial;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  HasMaterial = (uint64_t *)gdc::Registry::storage<md::ls::HasMaterialRaster>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(HasMaterial + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)HasMaterial[11];
    v12 = HasMaterial[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)HasMaterial[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)HasMaterial[10];
        }
      }
      HasMaterial[10] = (uint64_t)v21;
      HasMaterial[11] = (uint64_t)v14;
      HasMaterial[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    HasMaterial[11] = (uint64_t)v14;
    v9 = HasMaterial[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + HasMaterial[10] - HasMaterial[7]);
    *v8 = v5;
    v9 = HasMaterial[31];
    if (v8 != (_QWORD *)HasMaterial[11])
    {
      v10 = (_QWORD *)HasMaterial[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)HasMaterial[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanCastShadow>(gdc::Entity,md::ls::CanCastShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanCastShadow>(gdc::Entity,md::ls::CanCastShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427DAE8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanCastShadow>(gdc::Entity,md::ls::CanCastShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427DAE8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanCastShadow>(gdc::Entity,md::ls::CanCastShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *CanCast;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  CanCast = (uint64_t *)gdc::Registry::storage<md::ls::CanCastShadow>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(CanCast + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)CanCast[11];
    v9 = CanCast[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)CanCast[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      CanCast[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      CanCast[11] = v11;
      CanCast[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    CanCast[11] = v11;
    v6 = CanCast[31];
  }
  else
  {
    v6 = CanCast[31];
    if (CanCast[10] + (((uint64_t)v4 - CanCast[7]) >> 3) != CanCast[11])
    {
      v7 = (_QWORD *)CanCast[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)CanCast[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MarketMask>(gdc::Entity,md::ls::MarketMask &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MarketMask>(gdc::Entity,md::ls::MarketMask &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427D620;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MarketMask>(gdc::Entity,md::ls::MarketMask &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427D620;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MarketMask>(gdc::Entity,md::ls::MarketMask &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  _OWORD *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::MarketMask>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_39:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_40;
    }
    v15 = v4[10];
    v16 = (unint64_t)&v13[-v15];
    v17 = (uint64_t)&v13[-v15 + 1];
    if (v17 < 0)
      goto LABEL_45;
    v18 = v12 - v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (uint64_t)operator new(v19);
    else
      v20 = 0;
    v21 = (char *)(v20 + v16);
    v22 = (char *)(v20 + v19);
    *(_BYTE *)(v20 + v16) = v5;
    v14 = v20 + v16 + 1;
    if (v13 == (_BYTE *)v15)
    {
      v20 += v16;
      goto LABEL_37;
    }
    if (v16 >= 8 && (unint64_t)(v15 - v20) >= 0x20)
    {
      if (v16 >= 0x20)
      {
        v23 = v16 & 0xFFFFFFFFFFFFFFE0;
        v24 = (__int128 *)(v13 - 16);
        v25 = &v13[v20 - 16 - v15];
        v26 = v16 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v27 = *v24;
          *(v25 - 1) = *(v24 - 1);
          *v25 = v27;
          v25 -= 2;
          v24 -= 2;
          v26 -= 32;
        }
        while (v26);
        if (v16 == v23)
          goto LABEL_31;
        if ((v16 & 0x18) == 0)
        {
          v21 -= v23;
          v13 -= v23;
          goto LABEL_34;
        }
      }
      else
      {
        v23 = 0;
      }
      v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
      v29 = (uint64_t *)&v13[-v23 - 8];
      v30 = (char *)v29 - v15;
      do
      {
        v31 = *v29--;
        *(_QWORD *)&v30[v20] = v31;
        v30 -= 8;
        v28 += 8;
      }
      while (v28);
      if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_31:
        v13 = (_BYTE *)v15;
LABEL_37:
        v4[10] = v20;
        v4[11] = v14;
        v4[12] = (uint64_t)v22;
        if (v13)
          operator delete(v13);
        goto LABEL_39;
      }
      v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
      v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_34:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != (_BYTE *)v15);
    v13 = (_BYTE *)v4[10];
    goto LABEL_37;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_44:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_45:
      abort();
    }
    return;
  }
LABEL_40:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_44;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsDecal>(gdc::Entity,md::ls::IsDecal &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsDecal>(gdc::Entity,md::ls::IsDecal &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4281E20;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsDecal>(gdc::Entity,md::ls::IsDecal &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4281E20;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsDecal>(gdc::Entity,md::ls::IsDecal &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::IsDecal>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomRenderState>(gdc::Entity,md::ls::CustomRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E427E940;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomRenderState>(gdc::Entity,md::ls::CustomRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E427E940;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomRenderState>(gdc::Entity,md::ls::CustomRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E427E940;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_WORD *)result + 12) = *(_WORD *)(a1 + 24);
  result[4] = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomRenderState>(gdc::Entity,md::ls::CustomRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_1E427E940;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_WORD *)(a2 + 24) = *(_WORD *)(result + 24);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomRenderState>(gdc::Entity,md::ls::CustomRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomRenderState>(gdc::Entity,md::ls::CustomRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomRenderState>(gdc::Entity,md::ls::CustomRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int16 v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _WORD *v32;
  char *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  __int128 v37;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  _QWORD *i;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = gdc::Registry::storage<md::ls::CustomRenderState>(a2);
  v5 = (_QWORD *)v4;
  v6 = *(_OWORD *)(a1 + 8);
  v46 = v6;
  v7 = *(_QWORD *)(a1 + 16);
  if (*((_QWORD *)&v6 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_WORD *)(a1 + 24);
  v47 = v3;
  v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v4 + 32), (uint64_t)&v47);
  if ((v12 & 1) != 0)
  {
    v23 = (char *)v5[11];
    v22 = v5[12];
    if ((unint64_t)v23 >= v22)
    {
      v27 = (char *)v5[10];
      v28 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v27) >> 3);
      v29 = v28 + 1;
      if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v27) >> 3);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0x555555555555555)
        v31 = 0xAAAAAAAAAAAAAAALL;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_60;
        v32 = operator new(24 * v31);
      }
      else
      {
        v32 = 0;
      }
      v33 = (char *)&v32[4 * ((v23 - v27) >> 3)];
      *(_OWORD *)v33 = v46;
      if (v7)
      {
        v34 = (unint64_t *)(v7 + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
        v27 = (char *)v5[10];
        v23 = (char *)v5[11];
      }
      v36 = (char *)&v32[12 * v31];
      v32[12 * v28 + 8] = v10;
      v26 = v33 + 24;
      if (v23 == v27)
      {
        v5[10] = v33;
        v5[11] = v26;
        v5[12] = v36;
      }
      else
      {
        do
        {
          v37 = *(_OWORD *)(v23 - 24);
          v23 -= 24;
          *(_OWORD *)(v33 - 24) = v37;
          v33 -= 24;
          *(_QWORD *)v23 = 0;
          *((_QWORD *)v23 + 1) = 0;
          *((_WORD *)v33 + 8) = *((_WORD *)v23 + 8);
        }
        while (v23 != v27);
        v27 = (char *)v5[10];
        v38 = (char *)v5[11];
        v5[10] = v33;
        v5[11] = v26;
        v5[12] = v36;
        while (v38 != v27)
        {
          v39 = (std::__shared_weak_count *)*((_QWORD *)v38 - 2);
          if (v39)
          {
            p_shared_owners = (unint64_t *)&v39->__shared_owners_;
            do
              v41 = __ldaxr(p_shared_owners);
            while (__stlxr(v41 - 1, p_shared_owners));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          v38 -= 24;
        }
      }
      if (v27)
        operator delete(v27);
    }
    else
    {
      *(_OWORD *)v23 = v46;
      if (v7)
      {
        v24 = (unint64_t *)(v7 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      *((_WORD *)v23 + 8) = v10;
      v26 = v23 + 24;
    }
    v5[11] = v26;
    v19 = v5[31];
  }
  else
  {
    v13 = v5[10];
    v14 = ((uint64_t)v11 - v5[7]) >> 3;
    v15 = v13 + 24 * v14;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_OWORD *)v15 = v46;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    *(_WORD *)(v13 + 24 * v14 + 16) = v10;
    v19 = v5[31];
    if (v15 != v5[11])
    {
      v20 = (_QWORD *)v5[16];
      if (v20)
      {
        while (1)
        {
          v49 = &v47;
          v50 = 1;
          v48 = v19;
          v21 = v20[6];
          if (!v21)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v48, &v49);
          v20 = (_QWORD *)*v20;
          if (!v20)
            goto LABEL_14;
        }
LABEL_58:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
LABEL_60:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
LABEL_14:
      v46 = 0u;
      goto LABEL_52;
    }
    v46 = 0u;
  }
  for (i = (_QWORD *)v5[22]; i; i = (_QWORD *)*i)
  {
    v49 = &v47;
    v50 = 1;
    v48 = v19;
    v43 = i[6];
    if (!v43)
      goto LABEL_58;
    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v43 + 48))(v43, &v48, &v49);
  }
LABEL_52:
  if (*((_QWORD *)&v46 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v46 + 1) + 16))(*((_QWORD *)&v46 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v46 + 1));
    }
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::WantsCulledSlices>(gdc::Entity,md::ls::WantsCulledSlices &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::WantsCulledSlices>(gdc::Entity,md::ls::WantsCulledSlices &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427EB80;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::WantsCulledSlices>(gdc::Entity,md::ls::WantsCulledSlices &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427EB80;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::WantsCulledSlices>(gdc::Entity,md::ls::WantsCulledSlices &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::WantsCulledSlices>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceTransformHandle>(gdc::Entity,md::ls::InstanceTransformHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceTransformHandle>(gdc::Entity,md::ls::InstanceTransformHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427FAB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceTransformHandle>(gdc::Entity,md::ls::InstanceTransformHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427FAB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceTransformHandle>(gdc::Entity,md::ls::InstanceTransformHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::InstanceTransformHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableBounds>(gdc::Entity,md::ls::MeshRenderableBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableBounds>(gdc::Entity,md::ls::MeshRenderableBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E427F048;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableBounds>(gdc::Entity,md::ls::MeshRenderableBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427F048;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableBounds>(gdc::Entity,md::ls::MeshRenderableBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _QWORD *v11;
  char v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  _DWORD *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::MeshRenderableBounds>(a2);
  v6 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  v8 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 20);
  v10 = *(_DWORD *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 28);
  v29 = v3;
  v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v29);
  if ((v12 & 1) != 0)
  {
    v18 = (char *)v4[11];
    v17 = v4[12];
    if ((unint64_t)v18 >= v17)
    {
      v20 = (char *)v4[10];
      v21 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v20) >> 3) + 1;
      if (v21 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_30;
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)v20) >> 3);
      if (2 * v22 > v21)
        v21 = 2 * v22;
      if (v22 >= 0x555555555555555)
        v23 = 0xAAAAAAAAAAAAAAALL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v24 = (char *)operator new(24 * v23);
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[8 * ((v18 - v20) >> 3)];
      *(_DWORD *)v25 = v6;
      *((_DWORD *)v25 + 1) = v5;
      *((_DWORD *)v25 + 2) = v8;
      *((_DWORD *)v25 + 3) = v7;
      *((_DWORD *)v25 + 4) = v10;
      *((_DWORD *)v25 + 5) = v9;
      v19 = v25 + 24;
      if (v18 != v20)
      {
        do
        {
          v26 = *(_OWORD *)(v18 - 24);
          *((_QWORD *)v25 - 1) = *((_QWORD *)v18 - 1);
          *(_OWORD *)(v25 - 24) = v26;
          v25 -= 24;
          v18 -= 24;
        }
        while (v18 != v20);
        v18 = (char *)v4[10];
      }
      v4[10] = (uint64_t)v25;
      v4[11] = (uint64_t)v19;
      v4[12] = (uint64_t)&v24[24 * v23];
      if (v18)
        operator delete(v18);
    }
    else
    {
      *(_DWORD *)v18 = v6;
      *((_DWORD *)v18 + 1) = v5;
      *((_DWORD *)v18 + 2) = v8;
      *((_DWORD *)v18 + 3) = v7;
      v19 = v18 + 24;
      *((_DWORD *)v18 + 4) = v10;
      *((_DWORD *)v18 + 5) = v9;
    }
    v4[11] = (uint64_t)v19;
    v14 = v4[31];
  }
  else
  {
    v13 = (_DWORD *)(v4[10] + 24 * (((uint64_t)v11 - v4[7]) >> 3));
    *v13 = v6;
    v13[1] = v5;
    v13[2] = v8;
    v13[3] = v7;
    v13[4] = v10;
    v13[5] = v9;
    v14 = v4[31];
    if (v13 != (_DWORD *)v4[11])
    {
      v15 = (_QWORD *)v4[16];
      if (v15)
      {
        while (1)
        {
          v31 = &v29;
          v32 = 1;
          v30 = v14;
          v16 = v15[6];
          if (!v16)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v16 + 48))(v16, &v30, &v31);
          v15 = (_QWORD *)*v15;
          if (!v15)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v27 = (_QWORD *)v4[22];
  if (v27)
  {
    while (1)
    {
      v31 = &v29;
      v32 = 1;
      v30 = v14;
      v28 = v27[6];
      if (!v28)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v28 + 48))(v28, &v30, &v31);
      v27 = (_QWORD *)*v27;
      if (!v27)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GeocentricBounds>(gdc::Entity,md::ls::GeocentricBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GeocentricBounds>(gdc::Entity,md::ls::GeocentricBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E427E3A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 36);
  *(__n128 *)(v2 + 36) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GeocentricBounds>(gdc::Entity,md::ls::GeocentricBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E427E3A0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 36) = *(_OWORD *)(a1 + 36);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GeocentricBounds>(gdc::Entity,md::ls::GeocentricBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _QWORD *v13;
  char v14;
  _DWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v3 = *(_QWORD *)(a1 + 44);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::GeocentricBounds>(a2);
  v5 = *(_DWORD *)(a1 + 12);
  v33 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 20);
  v9 = *(_DWORD *)(a1 + 24);
  v8 = *(_DWORD *)(a1 + 28);
  v11 = *(_DWORD *)(a1 + 32);
  v10 = *(_DWORD *)(a1 + 36);
  v12 = *(_DWORD *)(a1 + 40);
  v34 = v3;
  v13 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v34);
  if ((v14 & 1) != 0)
  {
    v20 = (_DWORD *)v4[11];
    v19 = v4[12];
    if ((unint64_t)v20 >= v19)
    {
      v22 = (_DWORD *)v4[10];
      v23 = 0x8E38E38E38E38E39 * (v20 - v22) + 1;
      v24 = v12;
      if (v23 > 0x71C71C71C71C71CLL)
        goto LABEL_30;
      v25 = 0x8E38E38E38E38E39 * ((uint64_t)(v19 - (_QWORD)v22) >> 2);
      if (2 * v25 > v23)
        v23 = 2 * v25;
      if (v25 >= 0x38E38E38E38E38ELL)
        v26 = 0x71C71C71C71C71CLL;
      else
        v26 = v23;
      if (v26)
      {
        if (v26 > 0x71C71C71C71C71CLL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v27 = (char *)operator new(36 * v26);
        v24 = v12;
      }
      else
      {
        v27 = 0;
      }
      v28 = &v27[4 * (v20 - v22)];
      *(_DWORD *)v28 = v33;
      *((_DWORD *)v28 + 1) = v5;
      *((_DWORD *)v28 + 2) = v7;
      *((_DWORD *)v28 + 3) = v6;
      *((_DWORD *)v28 + 4) = v9;
      *((_DWORD *)v28 + 5) = v8;
      *((_DWORD *)v28 + 6) = v11;
      *((_DWORD *)v28 + 7) = v10;
      *((_DWORD *)v28 + 8) = v24;
      v21 = v28 + 36;
      if (v20 != v22)
      {
        do
        {
          v29 = *(_OWORD *)(v20 - 9);
          v30 = *(_OWORD *)(v20 - 5);
          *((_DWORD *)v28 - 1) = *(v20 - 1);
          *(_OWORD *)(v28 - 20) = v30;
          *(_OWORD *)(v28 - 36) = v29;
          v28 -= 36;
          v20 -= 9;
        }
        while (v20 != v22);
        v20 = (_DWORD *)v4[10];
      }
      v4[10] = (uint64_t)v28;
      v4[11] = (uint64_t)v21;
      v4[12] = (uint64_t)&v27[36 * v26];
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v20 = v33;
      v20[1] = v5;
      v20[2] = v7;
      v20[3] = v6;
      v20[4] = v9;
      v20[5] = v8;
      v20[6] = v11;
      v20[7] = v10;
      v21 = v20 + 9;
      v20[8] = v12;
    }
    v4[11] = (uint64_t)v21;
    v16 = v4[31];
  }
  else
  {
    v15 = (_DWORD *)(v4[10] + 36 * (((uint64_t)v13 - v4[7]) >> 3));
    *v15 = v33;
    v15[1] = v5;
    v15[2] = v7;
    v15[3] = v6;
    v15[4] = v9;
    v15[5] = v8;
    v15[6] = v11;
    v15[7] = v10;
    v15[8] = v12;
    v16 = v4[31];
    if (v15 != (_DWORD *)v4[11])
    {
      v17 = (_QWORD *)v4[16];
      if (v17)
      {
        while (1)
        {
          v36 = &v34;
          v37 = 1;
          v35 = v16;
          v18 = v17[6];
          if (!v18)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v18 + 48))(v18, &v35, &v36);
          v17 = (_QWORD *)*v17;
          if (!v17)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v31 = (_QWORD *)v4[22];
  if (v31)
  {
    while (1)
    {
      v36 = &v34;
      v37 = 1;
      v35 = v16;
      v32 = v31[6];
      if (!v32)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v32 + 48))(v32, &v35, &v36);
      v31 = (_QWORD *)*v31;
      if (!v31)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PreserveHeight>(gdc::Entity,md::ls::PreserveHeight &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PreserveHeight>(gdc::Entity,md::ls::PreserveHeight &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427DF68;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PreserveHeight>(gdc::Entity,md::ls::PreserveHeight &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427DF68;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PreserveHeight>(gdc::Entity,md::ls::PreserveHeight &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::PreserveHeight>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderablePositionScaleInfo>(gdc::Entity,md::ls::MeshRenderablePositionScaleInfo &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderablePositionScaleInfo>(gdc::Entity,md::ls::MeshRenderablePositionScaleInfo &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42818C8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderablePositionScaleInfo>(gdc::Entity,md::ls::MeshRenderablePositionScaleInfo &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E42818C8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderablePositionScaleInfo>(gdc::Entity,md::ls::MeshRenderablePositionScaleInfo &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::MeshRenderablePositionScaleInfo>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(4 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = &v20[4 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 4;
        if (v23 < 0x2C)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 2) + 1;
        v25 = &v20[4 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v13 = v5;
      v14 = v13 + 4;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundZAdjust>(gdc::Entity,md::ls::BoundZAdjust &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundZAdjust>(gdc::Entity,md::ls::BoundZAdjust &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427D980;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundZAdjust>(gdc::Entity,md::ls::BoundZAdjust &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427D980;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundZAdjust>(gdc::Entity,md::ls::BoundZAdjust &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::BoundZAdjust>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(4 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = &v20[4 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 4;
        if (v23 < 0x2C)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 2) + 1;
        v25 = &v20[4 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v13 = v5;
      v14 = v13 + 4;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundZScale>(gdc::Entity,md::ls::BoundZScale &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundZScale>(gdc::Entity,md::ls::BoundZScale &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427D7D0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundZScale>(gdc::Entity,md::ls::BoundZScale &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427D7D0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundZScale>(gdc::Entity,md::ls::BoundZScale &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::BoundZScale>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(4 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = &v20[4 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 4;
        if (v23 < 0x2C)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 2) + 1;
        v25 = &v20[4 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v13 = v5;
      v14 = v13 + 4;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedUniqueID>(gdc::Entity,md::ls::SharedUniqueID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedUniqueID>(gdc::Entity,md::ls::SharedUniqueID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E427E040;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedUniqueID>(gdc::Entity,md::ls::SharedUniqueID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427E040;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedUniqueID>(gdc::Entity,md::ls::SharedUniqueID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE v25[7];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::SharedUniqueID>(a2);
  v26 = *(_OWORD *)(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 24);
  *(_DWORD *)v25 = *(_DWORD *)(a1 + 25);
  *(_DWORD *)&v25[3] = *(_DWORD *)(a1 + 28);
  v27 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v27);
  if ((v7 & 1) != 0)
  {
    v11 = (char *)v4[11];
    v10 = v4[12];
    if ((unint64_t)v11 >= v10)
    {
      v13 = (char *)v4[10];
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v13) >> 3) + 1;
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_35;
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v13) >> 3);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v17 = (char *)operator new(24 * v16);
      }
      else
      {
        v17 = 0;
      }
      v21 = &v17[8 * ((v11 - v13) >> 3)];
      *(_OWORD *)v21 = v26;
      v21[16] = v5;
      *(_DWORD *)(v21 + 17) = *(_DWORD *)v25;
      *((_DWORD *)v21 + 5) = *(_DWORD *)&v25[3];
      v12 = v21 + 24;
      if (v11 != v13)
      {
        do
        {
          v22 = *(_OWORD *)(v11 - 24);
          *((_QWORD *)v21 - 1) = *((_QWORD *)v11 - 1);
          *(_OWORD *)(v21 - 24) = v22;
          v21 -= 24;
          v11 -= 24;
        }
        while (v11 != v13);
        v11 = (char *)v4[10];
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v12;
      v4[12] = (uint64_t)&v17[24 * v16];
      if (v11)
        operator delete(v11);
    }
    else
    {
      *(_OWORD *)v11 = v26;
      v11[16] = v5;
      *(_DWORD *)(v11 + 17) = *(_DWORD *)v25;
      *((_DWORD *)v11 + 5) = *(_DWORD *)&v25[3];
      v12 = v11 + 24;
    }
    v4[11] = (uint64_t)v12;
    v18 = v4[31];
  }
  else
  {
    v8 = v4[10] + 24 * (((uint64_t)v6 - v4[7]) >> 3);
    if (*(unsigned __int8 *)(v8 + 16) != v5)
    {
      if (*(_BYTE *)(v8 + 16))
      {
        v9 = 0;
      }
      else
      {
        *(_OWORD *)v8 = v26;
        v9 = 1;
      }
      *(_BYTE *)(v8 + 16) = v9;
    }
    v18 = v4[31];
    if (v8 != v4[11])
    {
      v19 = (_QWORD *)v4[16];
      if (v19)
      {
        while (1)
        {
          v29 = &v27;
          v30 = 1;
          v28 = v18;
          v20 = v19[6];
          if (!v20)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v20 + 48))(v20, &v28, &v29);
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
LABEL_34:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_35:
        abort();
      }
      return;
    }
  }
  v23 = (_QWORD *)v4[22];
  if (v23)
  {
    while (1)
    {
      v29 = &v27;
      v30 = 1;
      v28 = v18;
      v24 = v23[6];
      if (!v24)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v24 + 48))(v24, &v28, &v29);
      v23 = (_QWORD *)*v23;
      if (!v23)
        return;
    }
    goto LABEL_34;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleDataKeyHandle>(gdc::Entity,md::ls::StyleDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleDataKeyHandle>(gdc::Entity,md::ls::StyleDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427ED30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleDataKeyHandle>(gdc::Entity,md::ls::StyleDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427ED30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleDataKeyHandle>(gdc::Entity,md::ls::StyleDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::StyleDataKeyHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableHash>(gdc::Entity,md::ls::RenderableHash &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableHash>(gdc::Entity,md::ls::RenderableHash &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427DFB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableHash>(gdc::Entity,md::ls::RenderableHash &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427DFB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableHash>(gdc::Entity,md::ls::RenderableHash &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::RenderableHash>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessingDepthPrePass>(gdc::Entity,md::ls::PendingProcessingDepthPrePass &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessingDepthPrePass>(gdc::Entity,md::ls::PendingProcessingDepthPrePass &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42815B0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessingDepthPrePass>(gdc::Entity,md::ls::PendingProcessingDepthPrePass &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E42815B0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessingDepthPrePass>(gdc::Entity,md::ls::PendingProcessingDepthPrePass &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PendingProcessingDepthPrePass>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_38;
    }
    v15 = (_BYTE *)v4[10];
    v16 = v13 - v15;
    v17 = v13 - v15 + 1;
    if (v17 < 0)
      goto LABEL_43;
    v18 = v12 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)operator new(v19);
    else
      v20 = 0;
    v21 = &v20[v16];
    v22 = &v20[v19];
    v20[v16] = v5;
    v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = (uint64_t)v21;
      v4[11] = v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20)
      goto LABEL_32;
    if (v16 >= 0x20)
    {
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = (__int128 *)(v13 - 16);
      v25 = &v20[v13 - 16 - v15];
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_34;
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      v23 = 0;
    }
    v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v13[-v23 - 8];
    v30 = v29 - v15;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 -= 8;
      *(_QWORD *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    v21 = v20;
    goto LABEL_35;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_42;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessingShadow>(gdc::Entity,md::ls::PendingProcessingShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessingShadow>(gdc::Entity,md::ls::PendingProcessingShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427FB88;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessingShadow>(gdc::Entity,md::ls::PendingProcessingShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427FB88;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessingShadow>(gdc::Entity,md::ls::PendingProcessingShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PendingProcessingShadow>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_38;
    }
    v15 = (_BYTE *)v4[10];
    v16 = v13 - v15;
    v17 = v13 - v15 + 1;
    if (v17 < 0)
      goto LABEL_43;
    v18 = v12 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)operator new(v19);
    else
      v20 = 0;
    v21 = &v20[v16];
    v22 = &v20[v19];
    v20[v16] = v5;
    v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = (uint64_t)v21;
      v4[11] = v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20)
      goto LABEL_32;
    if (v16 >= 0x20)
    {
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = (__int128 *)(v13 - 16);
      v25 = &v20[v13 - 16 - v15];
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_34;
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      v23 = 0;
    }
    v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v13[-v23 - 8];
    v30 = v29 - v15;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 -= 8;
      *(_QWORD *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    v21 = v20;
    goto LABEL_35;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_42;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasStyleAttributeRasterSet>(gdc::Entity,md::ls::HasStyleAttributeRasterSet &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasStyleAttributeRasterSet>(gdc::Entity,md::ls::HasStyleAttributeRasterSet &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4280488;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasStyleAttributeRasterSet>(gdc::Entity,md::ls::HasStyleAttributeRasterSet &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4280488;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasStyleAttributeRasterSet>(gdc::Entity,md::ls::HasStyleAttributeRasterSet &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *HasStyleAttributeRaster;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  HasStyleAttributeRaster = (uint64_t *)gdc::Registry::storage<md::ls::HasStyleAttributeRasterSet>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(HasStyleAttributeRaster + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)HasStyleAttributeRaster[11];
    v12 = HasStyleAttributeRaster[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)HasStyleAttributeRaster[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)HasStyleAttributeRaster[10];
        }
      }
      HasStyleAttributeRaster[10] = (uint64_t)v21;
      HasStyleAttributeRaster[11] = (uint64_t)v14;
      HasStyleAttributeRaster[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    HasStyleAttributeRaster[11] = (uint64_t)v14;
    v9 = HasStyleAttributeRaster[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + HasStyleAttributeRaster[10] - HasStyleAttributeRaster[7]);
    *v8 = v5;
    v9 = HasStyleAttributeRaster[31];
    if (v8 != (_QWORD *)HasStyleAttributeRaster[11])
    {
      v10 = (_QWORD *)HasStyleAttributeRaster[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)HasStyleAttributeRaster[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrepassConstantDataHandle>(gdc::Entity,md::ls::PrepassConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrepassConstantDataHandle>(gdc::Entity,md::ls::PrepassConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42803F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrepassConstantDataHandle>(gdc::Entity,md::ls::PrepassConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42803F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrepassConstantDataHandle>(gdc::Entity,md::ls::PrepassConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PrepassConstantDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrepassShadowConstantDataHandle>(gdc::Entity,md::ls::PrepassShadowConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrepassShadowConstantDataHandle>(gdc::Entity,md::ls::PrepassShadowConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281910;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrepassShadowConstantDataHandle>(gdc::Entity,md::ls::PrepassShadowConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281910;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrepassShadowConstantDataHandle>(gdc::Entity,md::ls::PrepassShadowConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PrepassShadowConstantDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowConstantDataHandle>(gdc::Entity,md::ls::ShadowConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowConstantDataHandle>(gdc::Entity,md::ls::ShadowConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4280248;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowConstantDataHandle>(gdc::Entity,md::ls::ShadowConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4280248;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowConstantDataHandle>(gdc::Entity,md::ls::ShadowConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::ShadowConstantDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleCameraConstantDataHandle>(gdc::Entity,md::ls::StyleCameraConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleCameraConstantDataHandle>(gdc::Entity,md::ls::StyleCameraConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281640;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleCameraConstantDataHandle>(gdc::Entity,md::ls::StyleCameraConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281640;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleCameraConstantDataHandle>(gdc::Entity,md::ls::StyleCameraConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::StyleCameraConstantDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ClippingConstantDataHandle>(gdc::Entity,md::ls::ClippingConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ClippingConstantDataHandle>(gdc::Entity,md::ls::ClippingConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4280440;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ClippingConstantDataHandle>(gdc::Entity,md::ls::ClippingConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4280440;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ClippingConstantDataHandle>(gdc::Entity,md::ls::ClippingConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::ClippingConstantDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableTransformConstantDataHandle>(gdc::Entity,md::ls::MeshRenderableTransformConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableTransformConstantDataHandle>(gdc::Entity,md::ls::MeshRenderableTransformConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281D00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableTransformConstantDataHandle>(gdc::Entity,md::ls::MeshRenderableTransformConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281D00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableTransformConstantDataHandle>(gdc::Entity,md::ls::MeshRenderableTransformConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::MeshRenderableTransformConstantDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedRenderableDataHandle>(gdc::Entity,md::ls::SharedRenderableDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedRenderableDataHandle>(gdc::Entity,md::ls::SharedRenderableDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42806C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedRenderableDataHandle>(gdc::Entity,md::ls::SharedRenderableDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42806C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedRenderableDataHandle>(gdc::Entity,md::ls::SharedRenderableDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::SharedRenderableDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UnitsPerMeter>(gdc::Entity,md::ls::UnitsPerMeter &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UnitsPerMeter>(gdc::Entity,md::ls::UnitsPerMeter &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E427DE90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_DWORD *)v2 + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UnitsPerMeter>(gdc::Entity,md::ls::UnitsPerMeter &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427DE90;
  result = *(__n128 *)(a1 + 8);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UnitsPerMeter>(gdc::Entity,md::ls::UnitsPerMeter &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  int v6;
  int v7;
  _QWORD *v8;
  char v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v3 = *(_QWORD *)(a1 + 20);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::UnitsPerMeter>(a2);
  v6 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 16);
  v27 = v3;
  v8 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v27);
  if ((v9 & 1) != 0)
  {
    v15 = (_DWORD *)v4[11];
    v14 = v4[12];
    if ((unint64_t)v15 >= v14)
    {
      v17 = (_DWORD *)v4[10];
      v18 = 0xAAAAAAAAAAAAAAABLL * (v15 - v17) + 1;
      if (v18 > 0x1555555555555555)
        goto LABEL_30;
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v17) >> 2);
      if (2 * v19 > v18)
        v18 = 2 * v19;
      if (v19 >= 0xAAAAAAAAAAAAAAALL)
        v20 = 0x1555555555555555;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v21 = (char *)operator new(12 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[4 * (v15 - v17)];
      *(_DWORD *)v22 = v6;
      *((_DWORD *)v22 + 1) = v5;
      *((_DWORD *)v22 + 2) = v7;
      v16 = v22 + 12;
      if (v15 != v17)
      {
        do
        {
          v23 = *(_QWORD *)(v15 - 3);
          v15 -= 3;
          v24 = v15[2];
          *(_QWORD *)(v22 - 12) = v23;
          v22 -= 12;
          *((_DWORD *)v22 + 2) = v24;
        }
        while (v15 != v17);
        v15 = (_DWORD *)v4[10];
      }
      v4[10] = (uint64_t)v22;
      v4[11] = (uint64_t)v16;
      v4[12] = (uint64_t)&v21[12 * v20];
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v15 = v6;
      v15[1] = v5;
      v16 = v15 + 3;
      v15[2] = v7;
    }
    v4[11] = (uint64_t)v16;
    v11 = v4[31];
  }
  else
  {
    v10 = (_DWORD *)(v4[10] + 12 * (((uint64_t)v8 - v4[7]) >> 3));
    *v10 = v6;
    v10[1] = v5;
    v10[2] = v7;
    v11 = v4[31];
    if (v10 != (_DWORD *)v4[11])
    {
      v12 = (_QWORD *)v4[16];
      if (v12)
      {
        while (1)
        {
          v29 = &v27;
          v30 = 1;
          v28 = v11;
          v13 = v12[6];
          if (!v13)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v13 + 48))(v13, &v28, &v29);
          v12 = (_QWORD *)*v12;
          if (!v12)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v25 = (_QWORD *)v4[22];
  if (v25)
  {
    while (1)
    {
      v29 = &v27;
      v30 = 1;
      v28 = v11;
      v26 = v25[6];
      if (!v26)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v26 + 48))(v26, &v28, &v29);
      v25 = (_QWORD *)*v25;
      if (!v25)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialData>(gdc::Entity,md::ls::UniqueMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialData>(gdc::Entity,md::ls::UniqueMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E427ED78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialData>(gdc::Entity,md::ls::UniqueMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427ED78;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialData>(gdc::Entity,md::ls::UniqueMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::UniqueMaterialData>(a2);
  v23 = *(_OWORD *)(a1 + 8);
  v24 = *(_QWORD *)(a1 + 24);
  v25 = v3;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v25);
  if ((v6 & 1) != 0)
  {
    v12 = (_QWORD *)v4[11];
    v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (_QWORD *)v4[10];
      v15 = 0xAAAAAAAAAAAAAAABLL * (v12 - v14) + 1;
      if (v15 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_30;
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v14) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v18 = (char *)operator new(24 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[8 * (v12 - v14)];
      *(_OWORD *)v19 = v23;
      *((_QWORD *)v19 + 2) = v24;
      v13 = v19 + 24;
      if (v12 != v14)
      {
        do
        {
          v20 = *(_OWORD *)(v12 - 3);
          *((_QWORD *)v19 - 1) = *(v12 - 1);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          v12 -= 3;
        }
        while (v12 != v14);
        v12 = (_QWORD *)v4[10];
      }
      v4[10] = (uint64_t)v19;
      v4[11] = (uint64_t)v13;
      v4[12] = (uint64_t)&v18[24 * v17];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_OWORD *)v12 = v23;
      v12[2] = v24;
      v13 = v12 + 3;
    }
    v4[11] = (uint64_t)v13;
    v8 = v4[31];
  }
  else
  {
    v7 = v4[10] + 24 * (((uint64_t)v5 - v4[7]) >> 3);
    *(_OWORD *)v7 = v23;
    *(_QWORD *)(v7 + 16) = v24;
    v8 = v4[31];
    if (v7 != v4[11])
    {
      v9 = (_QWORD *)v4[16];
      if (v9)
      {
        while (1)
        {
          v27 = &v25;
          v28 = 1;
          v26 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v26, &v27);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v21 = (_QWORD *)v4[22];
  if (v21)
  {
    while (1)
    {
      v27 = &v25;
      v28 = 1;
      v26 = v8;
      v22 = v21[6];
      if (!v22)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v22 + 48))(v22, &v26, &v27);
      v21 = (_QWORD *)*v21;
      if (!v21)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UpdatesWithStyleZChange>(gdc::Entity,md::ls::UpdatesWithStyleZChange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UpdatesWithStyleZChange>(gdc::Entity,md::ls::UpdatesWithStyleZChange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42800E0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UpdatesWithStyleZChange>(gdc::Entity,md::ls::UpdatesWithStyleZChange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E42800E0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UpdatesWithStyleZChange>(gdc::Entity,md::ls::UpdatesWithStyleZChange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::UpdatesWithStyleZChange>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(4 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = &v20[4 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 4;
        if (v23 < 0x2C)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 2) + 1;
        v25 = &v20[4 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v13 = v5;
      v14 = v13 + 4;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialVisibilityOptionsHandle>(gdc::Entity,md::ls::UniqueMaterialVisibilityOptionsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialVisibilityOptionsHandle>(gdc::Entity,md::ls::UniqueMaterialVisibilityOptionsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E4281C28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialVisibilityOptionsHandle>(gdc::Entity,md::ls::UniqueMaterialVisibilityOptionsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281C28;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialVisibilityOptionsHandle>(gdc::Entity,md::ls::UniqueMaterialVisibilityOptionsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::UniqueMaterialVisibilityOptionsHandle>(a2);
  *(_QWORD *)&v25 = *(_QWORD *)(a1 + 8);
  BYTE8(v25) = *(_BYTE *)(a1 + 16);
  v26 = v3;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v26);
  if ((v6 & 1) != 0)
  {
    v12 = (_BYTE *)v4[11];
    v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = v4[10];
      v15 = (uint64_t)&v12[-v14] >> 4;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        goto LABEL_30;
      v17 = v11 - v14;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = (char *)operator new(16 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[16 * v15];
      *(_OWORD *)v20 = v25;
      v13 = v20 + 16;
      if (v12 != (_BYTE *)v14)
      {
        do
        {
          v21 = *((_QWORD *)v12 - 2);
          v12 -= 16;
          v22 = v12[8];
          *((_QWORD *)v20 - 2) = v21;
          v20 -= 16;
          v20[8] = v22;
        }
        while (v12 != (_BYTE *)v14);
        v12 = (_BYTE *)v4[10];
      }
      v4[10] = (uint64_t)v20;
      v4[11] = (uint64_t)v13;
      v4[12] = (uint64_t)&v19[16 * v18];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_OWORD *)v12 = v25;
      v13 = v12 + 16;
    }
    v4[11] = (uint64_t)v13;
    v8 = v4[31];
  }
  else
  {
    v7 = v4[10] + 2 * ((_QWORD)v5 - v4[7]);
    *(_QWORD *)v7 = v25;
    *(_BYTE *)(v7 + 8) = BYTE8(v25);
    v8 = v4[31];
    if (v7 != v4[11])
    {
      v9 = (_QWORD *)v4[16];
      if (v9)
      {
        while (1)
        {
          v28 = &v26;
          v29 = 1;
          v27 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v27, &v28);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v23 = (_QWORD *)v4[22];
  if (v23)
  {
    while (1)
    {
      v28 = &v26;
      v29 = 1;
      v27 = v8;
      v24 = v23[6];
      if (!v24)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v24 + 48))(v24, &v27, &v28);
      v23 = (_QWORD *)*v23;
      if (!v23)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueColorDataHandle>(gdc::Entity,md::ls::UniqueColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueColorDataHandle>(gdc::Entity,md::ls::UniqueColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427F6C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueColorDataHandle>(gdc::Entity,md::ls::UniqueColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427F6C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueColorDataHandle>(gdc::Entity,md::ls::UniqueColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::UniqueColorDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialEmissiveTexture>(gdc::Entity,md::ls::UniqueMaterialEmissiveTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialEmissiveTexture>(gdc::Entity,md::ls::UniqueMaterialEmissiveTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281688;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialEmissiveTexture>(gdc::Entity,md::ls::UniqueMaterialEmissiveTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281688;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialEmissiveTexture>(gdc::Entity,md::ls::UniqueMaterialEmissiveTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::UniqueMaterialEmissiveTexture>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialAlbedoTexture>(gdc::Entity,md::ls::UniqueMaterialAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialAlbedoTexture>(gdc::Entity,md::ls::UniqueMaterialAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42809E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialAlbedoTexture>(gdc::Entity,md::ls::UniqueMaterialAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42809E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialAlbedoTexture>(gdc::Entity,md::ls::UniqueMaterialAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::UniqueMaterialAlbedoTexture>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialZIndexHandle>(gdc::Entity,md::ls::UniqueMaterialZIndexHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialZIndexHandle>(gdc::Entity,md::ls::UniqueMaterialZIndexHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E4280758;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialZIndexHandle>(gdc::Entity,md::ls::UniqueMaterialZIndexHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4280758;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialZIndexHandle>(gdc::Entity,md::ls::UniqueMaterialZIndexHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::UniqueMaterialZIndexHandle>(a2);
  v23 = *(_OWORD *)(a1 + 8);
  v24 = *(_QWORD *)(a1 + 24);
  v25 = v3;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v25);
  if ((v6 & 1) != 0)
  {
    v12 = (_QWORD *)v4[11];
    v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (_QWORD *)v4[10];
      v15 = 0xAAAAAAAAAAAAAAABLL * (v12 - v14) + 1;
      if (v15 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_30;
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v14) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v18 = (char *)operator new(24 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[8 * (v12 - v14)];
      *(_OWORD *)v19 = v23;
      *((_QWORD *)v19 + 2) = v24;
      v13 = v19 + 24;
      if (v12 != v14)
      {
        do
        {
          v20 = *(_OWORD *)(v12 - 3);
          *((_QWORD *)v19 - 1) = *(v12 - 1);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          v12 -= 3;
        }
        while (v12 != v14);
        v12 = (_QWORD *)v4[10];
      }
      v4[10] = (uint64_t)v19;
      v4[11] = (uint64_t)v13;
      v4[12] = (uint64_t)&v18[24 * v17];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_OWORD *)v12 = v23;
      v12[2] = v24;
      v13 = v12 + 3;
    }
    v4[11] = (uint64_t)v13;
    v8 = v4[31];
  }
  else
  {
    v7 = v4[10] + 24 * (((uint64_t)v5 - v4[7]) >> 3);
    *(_OWORD *)v7 = v23;
    *(_QWORD *)(v7 + 16) = v24;
    v8 = v4[31];
    if (v7 != v4[11])
    {
      v9 = (_QWORD *)v4[16];
      if (v9)
      {
        while (1)
        {
          v27 = &v25;
          v28 = 1;
          v26 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v26, &v27);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v21 = (_QWORD *)v4[22];
  if (v21)
  {
    while (1)
    {
      v27 = &v25;
      v28 = 1;
      v26 = v8;
      v22 = v21[6];
      if (!v22)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v22 + 48))(v22, &v26, &v27);
      v21 = (_QWORD *)*v21;
      if (!v21)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialDiffuseTexture>(gdc::Entity,md::ls::UniqueMaterialDiffuseTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialDiffuseTexture>(gdc::Entity,md::ls::UniqueMaterialDiffuseTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42814D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialDiffuseTexture>(gdc::Entity,md::ls::UniqueMaterialDiffuseTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42814D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialDiffuseTexture>(gdc::Entity,md::ls::UniqueMaterialDiffuseTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::UniqueMaterialDiffuseTexture>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RampMaterialData>(std::type_identity<md::ls::RampMaterialData>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RampMaterialData>(std::type_identity<md::ls::RampMaterialData>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RampMaterialData>(std::type_identity<md::ls::RampMaterialData>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RampMaterialData>(std::type_identity<md::ls::RampMaterialData>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282180;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RampMaterialData>(std::type_identity<md::ls::RampMaterialData>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RampMaterialData>(std::type_identity<md::ls::RampMaterialData>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282180;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RampMaterialData>(std::type_identity<md::ls::RampMaterialData>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RampMaterialData>(std::type_identity<md::ls::RampMaterialData>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  md::LocalNorthLogic *v9;
  uint64_t v10;
  _QWORD v11[2];

  v2 = (_QWORD *)gdc::Registry::storage<md::ls::RampMaterialData>(a2);
  v3 = v2;
  if (v2[29] && (v4 = (_QWORD *)v2[28]) != 0)
  {
    v5 = v2[31];
    v6 = v2[7];
    v7 = (v2[8] - v6) >> 3;
    while (1)
    {
      v11[0] = v6;
      v11[1] = v7;
      v10 = v5;
      v8 = v4[6];
      if (!v8)
        break;
      (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, &v10, v11);
      v4 = (_QWORD *)*v4;
      if (!v4)
        goto LABEL_6;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    md::LocalNorthLogic::~LocalNorthLogic(v9);
  }
  else
  {
LABEL_6:
    v3[8] = v3[7];
    v3[11] = v3[10];
  }
}

void md::LocalNorthLogic::~LocalNorthLogic(md::LocalNorthLogic *this)
{
  md::LocalNorthLogic::~LocalNorthLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E42906C0;
  v2 = (char *)this + 176;
  v3 = (char *)*((_QWORD *)this + 25);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = *((_QWORD *)this + 15);
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  v8 = *((_QWORD *)this + 15);
  if (v8)
  {
LABEL_11:
    *((_QWORD *)this + 16) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 18) + 40))(*((_QWORD *)this + 18), v8, *((_QWORD *)this + 17) - v8);
  }
LABEL_12:
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

uint64_t md::Logic<md::LocalNorthLogic,md::LocalNorthLogicContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[4];

  if (*(_QWORD *)(a3 + 8) == 0xC81F81A7CB7767BBLL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::SceneContext,md::CameraContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::LocalNorthLogic,md::LocalNorthLogicContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::LocalNorthLogic,md::LocalNorthLogicContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void _ZNSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC578;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC578;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__1NS_9allocatorISL_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC530;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__0NS_9allocatorISL_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC4E8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC4E8;
  a2[1] = v2;
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::SceneContext,md::CameraContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_71;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68)
      v4 = 0xE42D19AFCA302E68 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  v7 = *(_QWORD **)(a2 + 8 * v4);
  if (!v7)
    goto LABEL_25;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == 0xE42D19AFCA302E68)
      {
        if (v8[2] == 0xE42D19AFCA302E68)
          goto LABEL_23;
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v9 = v8[1];
    if (v9 == 0xE42D19AFCA302E68)
      break;
    if (v9 >= a3)
      v9 %= a3;
    if (v9 != v4)
      goto LABEL_25;
LABEL_12:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_25;
  }
  if (v8[2] != 0xE42D19AFCA302E68)
    goto LABEL_12;
LABEL_23:
  v11 = v8[5];
  if (*(_QWORD *)(v11 + 8) == 0xE42D19AFCA302E68)
  {
    v6 = *(_QWORD *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v12 = 0x99BED48DEFBBD82BLL;
    if (a3 <= 0x99BED48DEFBBD82BLL)
      v12 = 0x99BED48DEFBBD82BLL % a3;
  }
  else
  {
    v12 = (a3 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v13 = *(_QWORD **)(a2 + 8 * v12);
  if (!v13)
    goto LABEL_48;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x99BED48DEFBBD82BLL)
      {
        if (v14[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_46;
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v15 = v14[1];
    if (v15 != 0x99BED48DEFBBD82BLL)
    {
      if (v15 >= a3)
        v15 %= a3;
      if (v15 != v12)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v14[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_35:
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v17 = v14[5];
  if (*(_QWORD *)(v17 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v5 = *(_QWORD *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v18 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v18 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v18 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v19 = *(_QWORD **)(a2 + 8 * v18);
  if (!v19)
    goto LABEL_71;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v20[1];
      if (v22 == 0x1AF456233693CD46)
      {
        if (v20[2] == 0x1AF456233693CD46)
          goto LABEL_69;
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_71;
    }
  }
  while (1)
  {
    v21 = v20[1];
    if (v21 == 0x1AF456233693CD46)
      break;
    if (v21 >= a3)
      v21 %= a3;
    if (v21 != v18)
      goto LABEL_71;
LABEL_58:
    v20 = (_QWORD *)*v20;
    if (!v20)
      goto LABEL_71;
  }
  if (v20[2] != 0x1AF456233693CD46)
    goto LABEL_58;
LABEL_69:
  v23 = v20[5];
  if (*(_QWORD *)(v23 + 8) != 0x1AF456233693CD46)
  {
LABEL_71:
    v24 = 0;
    goto LABEL_72;
  }
  v24 = *(_QWORD *)(v23 + 32);
LABEL_72:
  *result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::LocalNorthLogicContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B11A8;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C4000313F17);
  return a1;
}

void gdc::ManagedObjectHolder<md::LocalNorthLogicContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B11A8;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x1000C4000313F17);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::LocalNorthLogicContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::LabelClusterProvider::labelMarkerForClusterNode(md::LabelClusterProvider *this@<X0>, md::ClusterNode *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  id v7;

  v5 = (*(uint64_t (**)(md::ClusterNode *))(*(_QWORD *)a2 + 64))(a2);
  if (v5)
  {
    v6 = *((_QWORD *)this + 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    md::LabelManager::labelMarkerForCustomFeatureAnnotation(a3, v6, v7, *((void **)this + 4));

  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_19FD843AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FD856B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  md::LabelExternalTextElement::~LabelExternalTextElement(&a14);
  if (v27)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 40))(v28, v27, v29 - v27);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);

  _Unwind_Resume(a1);
}

void md::LabelClusterProvider::~LabelClusterProvider(md::LabelClusterProvider *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  *((_WORD *)this + 64) = 0;
  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 0;
    v3 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 15) = 0;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  v6 = (void *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 10) = 0;

  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (!v7)
    goto LABEL_13;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (!v10)
      goto LABEL_19;
  }
  else
  {
LABEL_13:
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (!v10)
      goto LABEL_19;
  }
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_19:
  *((_QWORD *)this + 9) = &off_1E42B53F0;

  *((_QWORD *)this + 6) = &off_1E42B53F0;
  *((_QWORD *)this + 3) = &off_1E42B5590;

}

void std::__shared_ptr_emplace<md::LabelClusterTree>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB6D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelClusterTree>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB6D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::LabelClusterTree>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::ita::ProcessRenderableForPlanarParameters::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>)::$_0,std::allocator<md::ita::ProcessRenderableForPlanarParameters::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::ProcessRenderableForPlanarParameters::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>)::$_0,std::allocator<md::ita::ProcessRenderableForPlanarParameters::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E427C5D0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<md::ita::ProcessRenderableForPlanarParameters::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>)::$_0,std::allocator<md::ita::ProcessRenderableForPlanarParameters::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E427C5D0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::ProcessRenderableForPlanarParameters::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>)::$_0,std::allocator<md::ita::ProcessRenderableForPlanarParameters::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3, float *a4, float *a5)
{
  unint64_t v9;
  _QWORD **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  int8x8_t *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  float v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float v36;
  float v37;
  void *v38;
  float v39;
  void *v40;
  float v41;
  _QWORD *v42;
  float v43;
  float v44;
  float v45;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  char *v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  char *v96;
  __int128 v97;
  char *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _BYTE *v111;
  _QWORD *v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  _OWORD *v116;
  __int128 *v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  uint8x8_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  float v128;
  float v129;
  _BOOL8 v130;
  unint64_t v131;
  unint64_t v132;
  size_t prime;
  unint64_t v134;
  uint8x8_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint8x8_t v153;
  uint64_t *v154;
  uint64_t v155;
  unint64_t v157;
  uint64_t v159;
  float v160;
  float v161;
  _BOOL8 v162;
  unint64_t v163;
  unint64_t v164;
  size_t v165;
  void *v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  size_t v171;
  size_t v172;
  size_t v173;
  _QWORD *v174;
  size_t v175;
  uint64_t v176;
  unint64_t v177;
  uint8x8_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  size_t v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  uint8x8_t v188;
  _QWORD **v189;
  _QWORD *v190;
  uint64_t v191;
  unint64_t v192;
  float v193;
  float v194;
  _BOOL8 v195;
  unint64_t v196;
  unint64_t v197;
  size_t v198;
  void *v199;
  void *v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  size_t v204;
  size_t v205;
  size_t v206;
  _QWORD *v207;
  size_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint8x8_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  size_t v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t v225;
  _QWORD *v226;
  _QWORD *v227;
  unint64_t v228;
  uint8x8_t v229;
  _QWORD **v230;
  _QWORD *v231;
  unint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  float v235;
  float v236;
  _BOOL8 v237;
  unint64_t v238;
  unint64_t v239;
  size_t v240;
  void *v241;
  void *v242;
  uint64_t v243;
  _QWORD *v244;
  size_t v245;
  size_t v246;
  size_t v247;
  _QWORD *v248;
  size_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint8x8_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  size_t v257;
  uint64_t v258;
  void *v259;
  uint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  unint64_t v265;
  _WORD *v266;
  int v274;
  char v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  __int128 v279;
  uint64_t v280;
  int v281;
  uint64_t v282;
  int v283;
  unsigned __int8 *v284;
  std::__shared_weak_count *v285;
  char v286;
  __int128 v287;
  std::__shared_weak_count *v288;
  _QWORD *v289;
  int v290;
  uint64_t v291;

  v291 = *MEMORY[0x1E0C80C00];
  v9 = *a2;
  v10 = *(_QWORD ***)(a1 + 48);
  v11 = **(_QWORD **)(a1 + 8);
  *(_QWORD *)&v279 = v9;
  v12 = *(_QWORD *)(v11 + 120);
  if (v9 >= (unint64_t)((*(_QWORD *)(v11 + 128) - v12) >> 3))
    goto LABEL_9;
  v13 = *(_QWORD *)(v12 + 8 * v9);
  if (v13)
  {
    if (HIDWORD(v9) == HIDWORD(v13))
    {
      v14 = *(_QWORD *)(v11 + 144);
      v15 = (unint64_t *)(v14 + 8 * v13);
      if (v15 != *(unint64_t **)(v11 + 152) && v14 != 0)
      {
        v62 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v11 + 56, v9, &v279);
        ++v62[3];
        v13 = *v15;
        goto LABEL_10;
      }
    }
LABEL_9:
    v13 = 0;
  }
LABEL_10:
  v17 = *(int8x8_t **)v11;
  v287 = v13;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v284, v17, (uint64_t *)&v287, 0);
  v18 = v284;
  if (v284[8] - 3 <= 1)
  {
    v19 = **(_QWORD **)(a1 + 16);
    v20 = *a3;
    *(_QWORD *)&v287 = v20;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v19 + 104));
    v21 = *(_QWORD *)(v19 + 504);
    if (v20 < (unint64_t)((*(_QWORD *)(v19 + 512) - v21) >> 3)
      && ((v22 = *(_QWORD *)(v21 + 8 * v20)) != 0 ? (v23 = HIDWORD(v20) == HIDWORD(v22)) : (v23 = 0), v23))
    {
      v25 = (uint64_t *)(*(_QWORD *)(v19 + 528) + 40 * v22);
      v24 = *(uint64_t **)(v19 + 536);
    }
    else
    {
      v24 = *(uint64_t **)(v19 + 536);
      v25 = v24;
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v19 + 104));
    v26 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v19 + 440), v20, &v287);
    ++v26[3];
    if (v25 != v24 && v25 != 0)
    {
      v28 = *v25;
      if (*v25)
      {
        v29 = *(_DWORD *)(v28 + 80);
        v30 = *(_DWORD *)(v28 + 84);
        v31 = *a4;
        (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, float))(*(_QWORD *)v18 + 392))(&v282, v18, *a5);
        (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, float))(*(_QWORD *)v18 + 424))(&v280, v18, *a5);
        LODWORD(v35) = v283;
        if ((_BYTE)v282)
        {
          v36 = *((float *)&v282 + 1);
        }
        else
        {
          *(float *)&v35 = 1.0;
          v36 = 1.0;
        }
        LODWORD(v33) = 0;
        LODWORD(v34) = HIDWORD(v280);
        LODWORD(v32) = v281;
        if ((_BYTE)v280)
        {
          v37 = *((float *)&v280 + 1);
        }
        else
        {
          *(float *)&v32 = 0.0;
          v37 = 0.0;
        }
        if (**(_BYTE **)(a1 + 24))
        {
          +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v35, v32, v33, v34);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "daVinciPlanarTilingOverride");
          v36 = v39;

          +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "daVinciPlanarOffsetOverride");
          v37 = v41;

          *(float *)&v32 = v37;
          *(float *)&v35 = v36;
        }
        v42 = *(_QWORD **)(a1 + 40);
        v43 = **(float **)(a1 + 32);
        v44 = v43 / (float)(v31 * (float)v29);
        v45 = v43 / (float)(v31 * (float)v30);
        _S11 = v44 * v36;
        _S10 = v45 * *(float *)&v35;
        _S9 = v44 * v37;
        _S8 = v45 * *(float *)&v32;
        *(float *)&v279 = _S11;
        *((float *)&v279 + 1) = v45 * *(float *)&v35;
        *((float *)&v279 + 2) = _S9;
        *((float *)&v279 + 3) = v45 * *(float *)&v32;
        v50 = *v42;
        v51 = (_QWORD *)(*v42 + 6192);
        v52 = std::__hash_table<std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::__unordered_map_hasher<md::PlanarParametersCacheKey,std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,md::PlanarParametersCacheKeyHasher,std::equal_to<md::PlanarParametersCacheKey>,true>,std::__unordered_map_equal<md::PlanarParametersCacheKey,std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::equal_to<md::PlanarParametersCacheKey>,md::PlanarParametersCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>>>::find<md::PlanarParametersCacheKey>(v51, (float *)&v279);
        if (v52)
        {
          v53 = v52[4];
          if (v53)
          {
            v54 = v18[8];
            v55 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
            v56 = *v10;
            v57 = operator new(0x20uLL);
            v58 = v54 == 4;
            *v57 = &off_1E4280200;
            v57[1] = v53;
LABEL_456:
            v275 = v58;
            *((_BYTE *)v57 + 16) = v275;
            v57[3] = v55;
            v289 = v57;
            v290 = 0;
            ecs2::Runtime::queueCommand(v56, (uint64_t)&v287);
            if (v290 != -1)
              ((void (*)(char *, __int128 *))off_1E42FB340[v290])(&v286, &v287);
            goto LABEL_461;
          }
        }
        v287 = 0uLL;
        v288 = 0;
        v59 = *(_QWORD *)(v50 + 6064);
        if (*(_QWORD *)(v50 + 6056) == v59)
        {
          v63 = (-1431655765 * ((*(_QWORD *)(v50 + 6112) - *(_QWORD *)(v50 + 6104)) >> 3)) | 0x100000000;
          v64 = *(uint64_t **)(v50 + 6088);
          v65 = *(_QWORD *)(v50 + 6096);
          if ((unint64_t)v64 >= v65)
          {
            v67 = *(char **)(v50 + 6080);
            v68 = ((char *)v64 - v67) >> 3;
            v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 61)
              goto LABEL_468;
            v70 = v65 - (_QWORD)v67;
            if (v70 >> 2 > v69)
              v69 = v70 >> 2;
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
              v71 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v71 = v69;
            if (v71)
            {
              if (v71 >> 61)
                goto LABEL_467;
              v72 = (char *)operator new(8 * v71);
            }
            else
            {
              v72 = 0;
            }
            v73 = (uint64_t *)&v72[8 * v68];
            *v73 = v63;
            v66 = v73 + 1;
            if (v64 != (uint64_t *)v67)
            {
              v74 = (char *)v64 - v67 - 8;
              if (v74 < 0x58)
                goto LABEL_471;
              if ((unint64_t)(v67 - v72) < 0x20)
                goto LABEL_471;
              v75 = (v74 >> 3) + 1;
              v76 = &v72[(char *)v64 - v67 - 16];
              v77 = v64 - 2;
              v78 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *(_OWORD *)v77;
                *((_OWORD *)v76 - 1) = *((_OWORD *)v77 - 1);
                *(_OWORD *)v76 = v79;
                v76 -= 32;
                v77 -= 4;
                v78 -= 4;
              }
              while (v78);
              v73 -= v75 & 0x3FFFFFFFFFFFFFFCLL;
              v64 -= v75 & 0x3FFFFFFFFFFFFFFCLL;
              if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_471:
                do
                {
                  v80 = *--v64;
                  *--v73 = v80;
                }
                while (v64 != (uint64_t *)v67);
              }
              v64 = *(uint64_t **)(v50 + 6080);
            }
            *(_QWORD *)(v50 + 6080) = v73;
            *(_QWORD *)(v50 + 6088) = v66;
            *(_QWORD *)(v50 + 6096) = &v72[8 * v71];
            if (v64)
              operator delete(v64);
          }
          else
          {
            *v64 = v63;
            v66 = v64 + 1;
          }
          *(_QWORD *)(v50 + 6088) = v66;
          v61 = *(v66 - 1);
        }
        else
        {
          v60 = *(_QWORD *)(v59 - 8);
          *(_QWORD *)(v50 + 6064) = v59 - 8;
          *(_DWORD *)(*(_QWORD *)(v50 + 6080) + 8 * v60) = -1431655765
                                                         * ((*(_QWORD *)(v50 + 6112) - *(_QWORD *)(v50 + 6104)) >> 3);
          *(_DWORD *)(*(_QWORD *)(v50 + 6080) + 8 * v60 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v50 + 6080) + 8 * v60 + 4) << 32)
                                                              + 0x100000000) >> 32;
          v61 = v60 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v50 + 6080) + 8 * v60 + 4) << 32);
        }
        v81 = *(char **)(v50 + 6112);
        v82 = *(_QWORD *)(v50 + 6120);
        if ((unint64_t)v81 >= v82)
        {
          v87 = *(char **)(v50 + 6104);
          v88 = 0xAAAAAAAAAAAAAAABLL * ((v81 - v87) >> 3) + 1;
          if (v88 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_468;
          v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - (_QWORD)v87) >> 3);
          if (2 * v89 > v88)
            v88 = 2 * v89;
          if (v89 >= 0x555555555555555)
            v90 = 0xAAAAAAAAAAAAAAALL;
          else
            v90 = v88;
          if (v90 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_467;
          v91 = (char *)operator new(24 * v90);
          v92 = &v91[8 * ((v81 - v87) >> 3)];
          *(_OWORD *)v92 = v287;
          v93 = v288;
          *((_QWORD *)v92 + 2) = v288;
          if (v93)
          {
            p_shared_owners = (unint64_t *)&v93->__shared_owners_;
            do
              v95 = __ldxr(p_shared_owners);
            while (__stxr(v95 + 1, p_shared_owners));
            v81 = *(char **)(v50 + 6112);
            v87 = *(char **)(v50 + 6104);
          }
          v96 = &v91[24 * v90];
          v86 = v92 + 24;
          if (v81 == v87)
          {
            *(_QWORD *)(v50 + 6104) = v92;
            *(_QWORD *)(v50 + 6112) = v86;
            *(_QWORD *)(v50 + 6120) = v96;
          }
          else
          {
            do
            {
              v97 = *(_OWORD *)(v81 - 24);
              v81 -= 24;
              *(_OWORD *)(v92 - 24) = v97;
              v92 -= 24;
              *((_QWORD *)v92 + 2) = *((_QWORD *)v81 + 2);
              *((_QWORD *)v81 + 1) = 0;
              *((_QWORD *)v81 + 2) = 0;
            }
            while (v81 != v87);
            v87 = *(char **)(v50 + 6104);
            v98 = *(char **)(v50 + 6112);
            *(_QWORD *)(v50 + 6104) = v92;
            *(_QWORD *)(v50 + 6112) = v86;
            *(_QWORD *)(v50 + 6120) = v96;
            while (v98 != v87)
            {
              v99 = (std::__shared_weak_count *)*((_QWORD *)v98 - 1);
              if (v99)
              {
                v100 = (unint64_t *)&v99->__shared_owners_;
                do
                  v101 = __ldaxr(v100);
                while (__stlxr(v101 - 1, v100));
                if (!v101)
                {
                  ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                  std::__shared_weak_count::__release_weak(v99);
                }
              }
              v98 -= 24;
            }
          }
          if (v87)
            operator delete(v87);
        }
        else
        {
          *(_OWORD *)v81 = v287;
          v83 = v288;
          *((_QWORD *)v81 + 2) = v288;
          if (v83)
          {
            v84 = (unint64_t *)&v83->__shared_owners_;
            do
              v85 = __ldxr(v84);
            while (__stxr(v85 + 1, v84));
          }
          v86 = v81 + 24;
        }
        *(_QWORD *)(v50 + 6112) = v86;
        v102 = v61;
        v103 = *(_QWORD *)(v50 + 6136);
        v104 = *(_QWORD *)(v50 + 6144);
        if (v103 < v104)
        {
          *(_QWORD *)v103 = v61;
          v103 += 8;
          v105 = v103;
          goto LABEL_109;
        }
        v106 = *(_BYTE **)(v50 + 6128);
        v107 = (uint64_t)(v103 - (_QWORD)v106) >> 3;
        v108 = v107 + 1;
        if (!((unint64_t)(v107 + 1) >> 61))
        {
          v109 = v104 - (_QWORD)v106;
          if (v109 >> 2 > v108)
            v108 = v109 >> 2;
          if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
            v110 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v110 = v108;
          if (v110)
          {
            if (v110 >> 61)
              goto LABEL_467;
            v111 = operator new(8 * v110);
          }
          else
          {
            v111 = 0;
          }
          v112 = &v111[8 * v107];
          v113 = &v111[8 * v110];
          v102 = v61;
          *v112 = v61;
          v105 = (unint64_t)(v112 + 1);
          if ((_BYTE *)v103 != v106)
          {
            v114 = v103 - (_QWORD)v106 - 8;
            if (v114 < 0x58)
              goto LABEL_472;
            if ((unint64_t)(v106 - v111) < 0x20)
              goto LABEL_472;
            v115 = (v114 >> 3) + 1;
            v116 = &v111[v103 - (_QWORD)v106 - 16];
            v117 = (__int128 *)(v103 - 16);
            v118 = v115 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v119 = *v117;
              *(v116 - 1) = *(v117 - 1);
              *v116 = v119;
              v116 -= 2;
              v117 -= 2;
              v118 -= 4;
            }
            while (v118);
            v112 -= v115 & 0x3FFFFFFFFFFFFFFCLL;
            v103 -= 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
            if (v115 != (v115 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_472:
              do
              {
                v120 = *(_QWORD *)(v103 - 8);
                v103 -= 8;
                *--v112 = v120;
              }
              while ((_BYTE *)v103 != v106);
            }
          }
          *(_QWORD *)(v50 + 6128) = v112;
          *(_QWORD *)(v50 + 6136) = v105;
          *(_QWORD *)(v50 + 6144) = v113;
          if (v106)
            operator delete(v106);
LABEL_109:
          v121 = (uint64_t *)(v50 + 5976);
          *(_QWORD *)(v50 + 6136) = v105;
          v122 = *(_QWORD *)(v50 + 5984);
          if (v122)
          {
            v123 = (uint8x8_t)vcnt_s8((int8x8_t)v122);
            v123.i16[0] = vaddlv_u8(v123);
            if (v123.u32[0] > 1uLL)
            {
              v105 = v61;
              if (v61 >= v122)
                v105 = v61 % v122;
            }
            else
            {
              v105 = (v122 - 1) & v61;
            }
            v124 = *(_QWORD **)(*v121 + 8 * v105);
            if (v124)
            {
              v125 = (_QWORD *)*v124;
              if (v125)
              {
                if (v123.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v127 = v125[1];
                    if (v127 == v61)
                    {
                      if (v125[2] == v61)
                        goto LABEL_168;
                    }
                    else if ((v127 & (v122 - 1)) != v105)
                    {
                      goto LABEL_130;
                    }
                    v125 = (_QWORD *)*v125;
                    if (!v125)
                      goto LABEL_130;
                  }
                }
                do
                {
                  v126 = v125[1];
                  if (v126 == v61)
                  {
                    if (v125[2] == v61)
                      goto LABEL_168;
                  }
                  else
                  {
                    if (v126 >= v122)
                      v126 %= v122;
                    if (v126 != v105)
                      break;
                  }
                  v125 = (_QWORD *)*v125;
                }
                while (v125);
              }
            }
          }
LABEL_130:
          v103 = (unint64_t)operator new(0x30uLL);
          *(_QWORD *)v103 = 0;
          *(_QWORD *)(v103 + 8) = v61;
          *(_QWORD *)(v103 + 16) = v61;
          *(_OWORD *)(v103 + 24) = xmmword_19FFB3350;
          *(_BYTE *)(v103 + 40) = 0;
          v128 = (float)(unint64_t)(*(_QWORD *)(v50 + 6000) + 1);
          v129 = *(float *)(v50 + 6008);
          if (!v122 || (float)(v129 * (float)v122) < v128)
          {
            v130 = 1;
            if (v122 >= 3)
              v130 = (v122 & (v122 - 1)) != 0;
            v131 = v130 | (2 * v122);
            v132 = vcvtps_u32_f32(v128 / v129);
            if (v131 <= v132)
              prime = v132;
            else
              prime = v131;
            if (prime == 1)
            {
              prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
              v122 = *(_QWORD *)(v50 + 5984);
            }
            if (prime > v122)
              goto LABEL_142;
            if (prime < v122)
            {
              v134 = vcvtps_u32_f32((float)*(unint64_t *)(v50 + 6000) / *(float *)(v50 + 6008));
              if (v122 < 3
                || (v135 = (uint8x8_t)vcnt_s8((int8x8_t)v122), v135.i16[0] = vaddlv_u8(v135), v135.u32[0] > 1uLL))
              {
                v134 = std::__next_prime(v134);
              }
              else
              {
                v136 = 1 << -(char)__clz(v134 - 1);
                if (v134 >= 2)
                  v134 = v136;
              }
              if (prime <= v134)
                prime = v134;
              if (prime < v122)
LABEL_142:
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v50 + 5976, prime);
            }
            v122 = *(_QWORD *)(v50 + 5984);
            if ((v122 & (v122 - 1)) != 0)
            {
              if (v61 >= v122)
                v105 = v61 % v122;
              else
                v105 = v61;
            }
            else
            {
              v105 = (v122 - 1) & v61;
            }
          }
          v137 = *v121;
          v138 = *(unint64_t **)(*v121 + 8 * v105);
          if (v138)
          {
            *(_QWORD *)v103 = *v138;
          }
          else
          {
            *(_QWORD *)v103 = *(_QWORD *)(v50 + 5992);
            *(_QWORD *)(v50 + 5992) = v103;
            *(_QWORD *)(v137 + 8 * v105) = v50 + 5992;
            if (!*(_QWORD *)v103)
            {
LABEL_167:
              ++*(_QWORD *)(v50 + 6000);
LABEL_168:
              v140 = v288;
              if (v288)
              {
                v141 = (unint64_t *)&v288->__shared_owners_;
                do
                  v142 = __ldaxr(v141);
                while (__stlxr(v142 - 1, v141));
                if (!v142)
                {
                  ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                  std::__shared_weak_count::__release_weak(v140);
                }
              }
              v143 = v279;
              v144 = v279 - 0x61C8864680B583EBLL;
              if (*(float *)&v279 == 0.0)
                v144 = 0x9E3779B97F4A7C15;
              v145 = DWORD1(v279) - 0x61C8864680B583EBLL;
              if (*((float *)&v279 + 1) == 0.0)
                v145 = 0x9E3779B97F4A7C15;
              v146 = ((v144 >> 2) + (v144 << 6) + v145) ^ v144;
              v147 = *((_QWORD *)&v279 + 1);
              v148 = DWORD2(v279) - 0x61C8864680B583EBLL;
              if (*((float *)&v279 + 2) == 0.0)
                v148 = 0x9E3779B97F4A7C15;
              v149 = (v148 + (v146 << 6) + (v146 >> 2)) ^ v146;
              v150 = HIDWORD(v279) - 0x61C8864680B583EBLL;
              if (*((float *)&v279 + 3) == 0.0)
                v150 = 0x9E3779B97F4A7C15;
              v151 = ((v150 + (v149 << 6) + (v149 >> 2)) ^ v149) - 0x61C8864680B583EBLL;
              v152 = *(_QWORD *)(v50 + 6200);
              if (v152)
              {
                v153 = (uint8x8_t)vcnt_s8((int8x8_t)v152);
                v153.i16[0] = vaddlv_u8(v153);
                if (v153.u32[0] > 1uLL)
                {
                  v103 = ((v150 + (v149 << 6) + (v149 >> 2)) ^ v149) - 0x61C8864680B583EBLL;
                  if (v151 >= v152)
                    v103 = v151 % v152;
                }
                else
                {
                  v103 = v151 & (v152 - 1);
                }
                v154 = *(uint64_t **)(*v51 + 8 * v103);
                if (v154)
                {
                  v155 = *v154;
                  if (*v154)
                  {
                    if (v153.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v159 = *(_QWORD *)(v155 + 8);
                        if (v159 == v151)
                        {
                          if (*(_QWORD *)(v155 + 16) == (_QWORD)v279
                            && *(_QWORD *)(v155 + 24) == *((_QWORD *)&v279 + 1))
                          {
                            goto LABEL_275;
                          }
                        }
                        else if ((v159 & (v152 - 1)) != v103)
                        {
                          goto LABEL_208;
                        }
                        v155 = *(_QWORD *)v155;
                        if (!v155)
                          goto LABEL_208;
                      }
                    }
                    do
                    {
                      v157 = *(_QWORD *)(v155 + 8);
                      if (v157 == v151)
                      {
                        if (*(_QWORD *)(v155 + 16) == (_QWORD)v279 && *(_QWORD *)(v155 + 24) == *((_QWORD *)&v279 + 1))
                          goto LABEL_275;
                      }
                      else
                      {
                        if (v157 >= v152)
                          v157 %= v152;
                        if (v157 != v103)
                          break;
                      }
                      v155 = *(_QWORD *)v155;
                    }
                    while (v155);
                  }
                }
              }
LABEL_208:
              v155 = (uint64_t)operator new(0x28uLL);
              *(_QWORD *)v155 = 0;
              *(_QWORD *)(v155 + 8) = v151;
              *(_OWORD *)(v155 + 16) = v279;
              *(_QWORD *)(v155 + 32) = 0;
              v160 = (float)(unint64_t)(*(_QWORD *)(v50 + 6216) + 1);
              v161 = *(float *)(v50 + 6224);
              if (v152 && (float)(v161 * (float)v152) >= v160)
              {
LABEL_265:
                v184 = (_QWORD *)*v51;
                v185 = *(uint64_t **)(*v51 + 8 * v103);
                if (v185)
                {
                  *(_QWORD *)v155 = *v185;
                }
                else
                {
                  *(_QWORD *)v155 = *(_QWORD *)(v50 + 6208);
                  *(_QWORD *)(v50 + 6208) = v155;
                  v184[v103] = v50 + 6208;
                  if (!*(_QWORD *)v155)
                  {
LABEL_274:
                    ++*(_QWORD *)(v50 + 6216);
LABEL_275:
                    *(_QWORD *)(v155 + 32) = v61;
                    v187 = *(_QWORD *)(v50 + 6240);
                    if (v187)
                    {
                      v188 = (uint8x8_t)vcnt_s8((int8x8_t)v187);
                      v188.i16[0] = vaddlv_u8(v188);
                      if (v188.u32[0] > 1uLL)
                      {
                        v155 = v61;
                        if (v61 >= v187)
                          v155 = v61 % v187;
                      }
                      else
                      {
                        v155 = (v187 - 1) & v61;
                      }
                      v189 = *(_QWORD ***)(*(_QWORD *)(v50 + 6232) + 8 * v155);
                      if (v189)
                      {
                        v190 = *v189;
                        if (*v189)
                        {
                          if (v188.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v191 = v190[1];
                              if (v191 == v61)
                              {
                                if (v190[2] == v61)
                                  goto LABEL_363;
                              }
                              else if ((v191 & (v187 - 1)) != v155)
                              {
                                goto LABEL_296;
                              }
                              v190 = (_QWORD *)*v190;
                              if (!v190)
                                goto LABEL_296;
                            }
                          }
                          do
                          {
                            v192 = v190[1];
                            if (v192 == v61)
                            {
                              if (v190[2] == v61)
                                goto LABEL_363;
                            }
                            else
                            {
                              if (v192 >= v187)
                                v192 %= v187;
                              if (v192 != v155)
                                break;
                            }
                            v190 = (_QWORD *)*v190;
                          }
                          while (v190);
                        }
                      }
                    }
LABEL_296:
                    v190 = operator new(0x28uLL);
                    *v190 = 0;
                    v190[1] = v61;
                    v190[3] = 0;
                    v190[4] = 0;
                    v190[2] = v61;
                    v193 = (float)(unint64_t)(*(_QWORD *)(v50 + 6256) + 1);
                    v194 = *(float *)(v50 + 6264);
                    if (v187 && (float)(v194 * (float)v187) >= v193)
                    {
LABEL_353:
                      v219 = *(_QWORD *)(v50 + 6232);
                      v220 = *(_QWORD **)(v219 + 8 * v155);
                      if (v220)
                      {
                        *v190 = *v220;
                      }
                      else
                      {
                        *v190 = *(_QWORD *)(v50 + 6248);
                        *(_QWORD *)(v50 + 6248) = v190;
                        *(_QWORD *)(v219 + 8 * v155) = v50 + 6248;
                        if (!*v190)
                          goto LABEL_362;
                        v221 = *(_QWORD *)(*v190 + 8);
                        if ((v187 & (v187 - 1)) != 0)
                        {
                          if (v221 >= v187)
                            v221 %= v187;
                        }
                        else
                        {
                          v221 &= v187 - 1;
                        }
                        v220 = (_QWORD *)(*(_QWORD *)(v50 + 6232) + 8 * v221);
                      }
                      *v220 = v190;
LABEL_362:
                      ++*(_QWORD *)(v50 + 6256);
LABEL_363:
                      v190[3] = v143;
                      v190[4] = v147;
                      v222 = **(_QWORD **)(a1 + 40);
                      v223 = *(_QWORD *)(v222 + 6080);
                      *(_QWORD *)&v287 = v61;
                      v224 = *(_DWORD *)(v223 + 8 * v102);
                      v225 = *(_QWORD *)(v222 + 6104);
                      v226 = (_QWORD *)operator new();
                      v227 = (_QWORD *)ggl::BufferData::BufferData((uint64_t)v226, qword_1EE56CA38, 2, 0, 6, 1);
                      v227[25] = ggl::DaVinci::PlanarParameters::reflection(void)::reflection;
                      *v227 = &off_1E42B9C10;
                      v228 = *(_QWORD *)(v222 + 6160);
                      if (v228)
                      {
                        v229 = (uint8x8_t)vcnt_s8((int8x8_t)v228);
                        v229.i16[0] = vaddlv_u8(v229);
                        if (v229.u32[0] > 1uLL)
                        {
                          v155 = v61;
                          if (v61 >= v228)
                            v155 = v61 % v228;
                        }
                        else
                        {
                          v155 = (v228 - 1) & v61;
                        }
                        v230 = *(_QWORD ***)(*(_QWORD *)(v222 + 6152) + 8 * v155);
                        if (v230)
                        {
                          v231 = *v230;
                          if (*v230)
                          {
                            if (v229.u32[0] < 2uLL)
                            {
                              while (1)
                              {
                                v233 = v231[1];
                                if (v233 == v61)
                                {
                                  if (v231[2] == v61)
                                    goto LABEL_451;
                                }
                                else if ((v233 & (v228 - 1)) != v155)
                                {
                                  goto LABEL_384;
                                }
                                v231 = (_QWORD *)*v231;
                                if (!v231)
                                  goto LABEL_384;
                              }
                            }
                            do
                            {
                              v232 = v231[1];
                              if (v232 == v61)
                              {
                                if (v231[2] == v61)
                                  goto LABEL_451;
                              }
                              else
                              {
                                if (v232 >= v228)
                                  v232 %= v228;
                                if (v232 != v155)
                                  break;
                              }
                              v231 = (_QWORD *)*v231;
                            }
                            while (v231);
                          }
                        }
                      }
LABEL_384:
                      v231 = operator new(0x20uLL);
                      v234 = (_QWORD *)(v222 + 6168);
                      *v231 = 0;
                      v231[1] = v61;
                      v231[2] = v61;
                      v231[3] = 0;
                      v235 = (float)(unint64_t)(*(_QWORD *)(v222 + 6176) + 1);
                      v236 = *(float *)(v222 + 6184);
                      if (v228 && (float)(v236 * (float)v228) >= v235)
                      {
LABEL_441:
                        v260 = *(_QWORD *)(v222 + 6152);
                        v261 = *(_QWORD **)(v260 + 8 * v155);
                        if (v261)
                        {
                          *v231 = *v261;
                        }
                        else
                        {
                          *v231 = *v234;
                          *v234 = v231;
                          *(_QWORD *)(v260 + 8 * v155) = v234;
                          if (!*v231)
                            goto LABEL_450;
                          v262 = *(_QWORD *)(*v231 + 8);
                          if ((v228 & (v228 - 1)) != 0)
                          {
                            if (v262 >= v228)
                              v262 %= v228;
                          }
                          else
                          {
                            v262 &= v228 - 1;
                          }
                          v261 = (_QWORD *)(*(_QWORD *)(v222 + 6152) + 8 * v262);
                        }
                        *v261 = v231;
LABEL_450:
                        ++*(_QWORD *)(v222 + 6176);
LABEL_451:
                        v263 = v231[3];
                        v231[3] = v226;
                        if (v263)
                          (*(void (**)(uint64_t))(*(_QWORD *)v263 + 8))(v263);
                        v264 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>> const&>,std::tuple<>>(v222 + 5976, v287, &v287);
                        ++v264[3];
                        *(_QWORD *)(v225 + 24 * v224) = v226;
                        v265 = v226[1];
                        v266 = (_WORD *)v226[9];
                        __asm
                        {
                          FCVT            H0, S11
                          FCVT            H1, S10
                          FCVT            H2, S9
                          FCVT            H3, S8
                        }
                        *v266 = _H0;
                        v266[1] = _H1;
                        v266[2] = _H2;
                        v266[3] = _H3;
                        if (v226[8] > v265)
                          v265 = v226[8];
                        v226[7] = 0;
                        v226[8] = v265;
                        v274 = v284[8];
                        v55 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
                        v56 = *v10;
                        v57 = operator new(0x20uLL);
                        v58 = v274 == 4;
                        *v57 = &off_1E4280200;
                        v57[1] = v61;
                        goto LABEL_456;
                      }
                      v237 = 1;
                      if (v228 >= 3)
                        v237 = (v228 & (v228 - 1)) != 0;
                      v238 = v237 | (2 * v228);
                      v239 = vcvtps_u32_f32(v235 / v236);
                      if (v238 <= v239)
                        v240 = v239;
                      else
                        v240 = v238;
                      if (v240 == 1)
                      {
                        v240 = 2;
                      }
                      else if ((v240 & (v240 - 1)) != 0)
                      {
                        v240 = std::__next_prime(v240);
                        v228 = *(_QWORD *)(v222 + 6160);
                      }
                      if (v240 <= v228)
                      {
                        if (v240 >= v228)
                          goto LABEL_436;
                        v252 = vcvtps_u32_f32((float)*(unint64_t *)(v222 + 6176) / *(float *)(v222 + 6184));
                        if (v228 < 3
                          || (v253 = (uint8x8_t)vcnt_s8((int8x8_t)v228),
                              v253.i16[0] = vaddlv_u8(v253),
                              v253.u32[0] > 1uLL))
                        {
                          v252 = std::__next_prime(v252);
                        }
                        else
                        {
                          v254 = 1 << -(char)__clz(v252 - 1);
                          if (v252 >= 2)
                            v252 = v254;
                        }
                        if (v240 <= v252)
                          v240 = v252;
                        if (v240 >= v228)
                          goto LABEL_436;
                        if (!v240)
                        {
                          v259 = *(void **)(v222 + 6152);
                          *(_QWORD *)(v222 + 6152) = 0;
                          if (v259)
                            operator delete(v259);
                          *(_QWORD *)(v222 + 6160) = 0;
                          goto LABEL_436;
                        }
                      }
                      if (!(v240 >> 61))
                      {
                        v241 = operator new(8 * v240);
                        v242 = *(void **)(v222 + 6152);
                        *(_QWORD *)(v222 + 6152) = v241;
                        if (v242)
                          operator delete(v242);
                        v243 = 0;
                        *(_QWORD *)(v222 + 6160) = v240;
                        do
                          *(_QWORD *)(*(_QWORD *)(v222 + 6152) + 8 * v243++) = 0;
                        while (v240 != v243);
                        v244 = (_QWORD *)*v234;
                        if (!*v234)
                          goto LABEL_436;
                        v245 = v244[1];
                        v246 = v240 - 1;
                        if ((v240 & (v240 - 1)) == 0)
                        {
                          v247 = v245 & v246;
                          *(_QWORD *)(*(_QWORD *)(v222 + 6152) + 8 * v247) = v234;
                          while (1)
                          {
                            v248 = (_QWORD *)*v244;
                            if (!*v244)
                              break;
                            v249 = v248[1] & v246;
                            if (v249 == v247)
                            {
                              v244 = (_QWORD *)*v244;
                            }
                            else
                            {
                              v250 = *(_QWORD *)(v222 + 6152);
                              if (*(_QWORD *)(v250 + 8 * v249))
                              {
                                *v244 = *v248;
                                v251 = 8 * v249;
                                *v248 = **(_QWORD **)(*(_QWORD *)(v222 + 6152) + v251);
                                **(_QWORD **)(*(_QWORD *)(v222 + 6152) + v251) = v248;
                              }
                              else
                              {
                                *(_QWORD *)(v250 + 8 * v249) = v244;
                                v244 = v248;
                                v247 = v249;
                              }
                            }
                          }
LABEL_436:
                          v228 = *(_QWORD *)(v222 + 6160);
                          if ((v228 & (v228 - 1)) != 0)
                          {
                            if (v61 >= v228)
                              v155 = v61 % v228;
                            else
                              v155 = v61;
                          }
                          else
                          {
                            v155 = (v228 - 1) & v61;
                          }
                          goto LABEL_441;
                        }
                        if (v245 >= v240)
                          v245 %= v240;
                        *(_QWORD *)(*(_QWORD *)(v222 + 6152) + 8 * v245) = v234;
                        v255 = (_QWORD *)*v244;
                        if (!*v244)
                          goto LABEL_436;
                        while (1)
                        {
                          v257 = v255[1];
                          if (v257 >= v240)
                            v257 %= v240;
                          if (v257 != v245)
                          {
                            v258 = *(_QWORD *)(v222 + 6152);
                            if (!*(_QWORD *)(v258 + 8 * v257))
                            {
                              *(_QWORD *)(v258 + 8 * v257) = v244;
                              goto LABEL_422;
                            }
                            *v244 = *v255;
                            v256 = 8 * v257;
                            *v255 = **(_QWORD **)(*(_QWORD *)(v222 + 6152) + v256);
                            **(_QWORD **)(*(_QWORD *)(v222 + 6152) + v256) = v255;
                            v255 = v244;
                          }
                          v257 = v245;
LABEL_422:
                          v244 = v255;
                          v255 = (_QWORD *)*v255;
                          v245 = v257;
                          if (!v255)
                            goto LABEL_436;
                        }
                      }
LABEL_467:
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    v195 = 1;
                    if (v187 >= 3)
                      v195 = (v187 & (v187 - 1)) != 0;
                    v196 = v195 | (2 * v187);
                    v197 = vcvtps_u32_f32(v193 / v194);
                    if (v196 <= v197)
                      v198 = v197;
                    else
                      v198 = v196;
                    if (v198 == 1)
                    {
                      v198 = 2;
                    }
                    else if ((v198 & (v198 - 1)) != 0)
                    {
                      v198 = std::__next_prime(v198);
                      v187 = *(_QWORD *)(v50 + 6240);
                    }
                    if (v198 <= v187)
                    {
                      if (v198 >= v187)
                        goto LABEL_348;
                      v211 = vcvtps_u32_f32((float)*(unint64_t *)(v50 + 6256) / *(float *)(v50 + 6264));
                      if (v187 < 3
                        || (v212 = (uint8x8_t)vcnt_s8((int8x8_t)v187), v212.i16[0] = vaddlv_u8(v212), v212.u32[0] > 1uLL))
                      {
                        v211 = std::__next_prime(v211);
                      }
                      else
                      {
                        v213 = 1 << -(char)__clz(v211 - 1);
                        if (v211 >= 2)
                          v211 = v213;
                      }
                      if (v198 <= v211)
                        v198 = v211;
                      if (v198 >= v187)
                        goto LABEL_348;
                      if (!v198)
                      {
                        v218 = *(void **)(v50 + 6232);
                        *(_QWORD *)(v50 + 6232) = 0;
                        if (v218)
                          operator delete(v218);
                        *(_QWORD *)(v50 + 6240) = 0;
                        goto LABEL_348;
                      }
                    }
                    if (v198 >> 61)
                      goto LABEL_467;
                    v199 = operator new(8 * v198);
                    v200 = *(void **)(v50 + 6232);
                    *(_QWORD *)(v50 + 6232) = v199;
                    if (v200)
                      operator delete(v200);
                    v201 = 0;
                    *(_QWORD *)(v50 + 6240) = v198;
                    do
                      *(_QWORD *)(*(_QWORD *)(v50 + 6232) + 8 * v201++) = 0;
                    while (v198 != v201);
                    v202 = *(_QWORD **)(v50 + 6248);
                    if (!v202)
                      goto LABEL_348;
                    v203 = v50 + 6248;
                    v204 = v202[1];
                    v205 = v198 - 1;
                    if ((v198 & (v198 - 1)) == 0)
                    {
                      v206 = v204 & v205;
                      *(_QWORD *)(*(_QWORD *)(v50 + 6232) + 8 * v206) = v203;
                      while (1)
                      {
                        v207 = (_QWORD *)*v202;
                        if (!*v202)
                          break;
                        v208 = v207[1] & v205;
                        if (v208 == v206)
                        {
                          v202 = (_QWORD *)*v202;
                        }
                        else
                        {
                          v209 = *(_QWORD *)(v50 + 6232);
                          if (*(_QWORD *)(v209 + 8 * v208))
                          {
                            *v202 = *v207;
                            v210 = 8 * v208;
                            *v207 = **(_QWORD **)(*(_QWORD *)(v50 + 6232) + v210);
                            **(_QWORD **)(*(_QWORD *)(v50 + 6232) + v210) = v207;
                          }
                          else
                          {
                            *(_QWORD *)(v209 + 8 * v208) = v202;
                            v202 = v207;
                            v206 = v208;
                          }
                        }
                      }
LABEL_348:
                      v187 = *(_QWORD *)(v50 + 6240);
                      if ((v187 & (v187 - 1)) != 0)
                      {
                        if (v61 >= v187)
                          v155 = v61 % v187;
                        else
                          v155 = v61;
                      }
                      else
                      {
                        v155 = (v187 - 1) & v61;
                      }
                      goto LABEL_353;
                    }
                    if (v204 >= v198)
                      v204 %= v198;
                    *(_QWORD *)(*(_QWORD *)(v50 + 6232) + 8 * v204) = v203;
                    v214 = (_QWORD *)*v202;
                    if (!*v202)
                      goto LABEL_348;
                    while (1)
                    {
                      v216 = v214[1];
                      if (v216 >= v198)
                        v216 %= v198;
                      if (v216 != v204)
                      {
                        v217 = *(_QWORD *)(v50 + 6232);
                        if (!*(_QWORD *)(v217 + 8 * v216))
                        {
                          *(_QWORD *)(v217 + 8 * v216) = v202;
                          goto LABEL_334;
                        }
                        *v202 = *v214;
                        v215 = 8 * v216;
                        *v214 = **(_QWORD **)(*(_QWORD *)(v50 + 6232) + v215);
                        **(_QWORD **)(*(_QWORD *)(v50 + 6232) + v215) = v214;
                        v214 = v202;
                      }
                      v216 = v204;
LABEL_334:
                      v202 = v214;
                      v214 = (_QWORD *)*v214;
                      v204 = v216;
                      if (!v214)
                        goto LABEL_348;
                    }
                  }
                  v186 = *(_QWORD *)(*(_QWORD *)v155 + 8);
                  if ((v152 & (v152 - 1)) != 0)
                  {
                    if (v186 >= v152)
                      v186 %= v152;
                  }
                  else
                  {
                    v186 &= v152 - 1;
                  }
                  v185 = (uint64_t *)(*v51 + 8 * v186);
                }
                *v185 = v155;
                goto LABEL_274;
              }
              v162 = 1;
              if (v152 >= 3)
                v162 = (v152 & (v152 - 1)) != 0;
              v163 = v162 | (2 * v152);
              v164 = vcvtps_u32_f32(v160 / v161);
              if (v163 <= v164)
                v165 = v164;
              else
                v165 = v163;
              if (v165 == 1)
              {
                v165 = 2;
              }
              else if ((v165 & (v165 - 1)) != 0)
              {
                v165 = std::__next_prime(v165);
                v152 = *(_QWORD *)(v50 + 6200);
              }
              if (v165 <= v152)
              {
                if (v165 >= v152)
                  goto LABEL_260;
                v177 = vcvtps_u32_f32((float)*(unint64_t *)(v50 + 6216) / *(float *)(v50 + 6224));
                if (v152 < 3
                  || (v178 = (uint8x8_t)vcnt_s8((int8x8_t)v152), v178.i16[0] = vaddlv_u8(v178), v178.u32[0] > 1uLL))
                {
                  v177 = std::__next_prime(v177);
                }
                else
                {
                  v179 = 1 << -(char)__clz(v177 - 1);
                  if (v177 >= 2)
                    v177 = v179;
                }
                if (v165 <= v177)
                  v165 = v177;
                if (v165 >= v152)
                  goto LABEL_260;
                if (!v165)
                {
                  v183 = (_QWORD *)*v51;
                  *v51 = 0;
                  if (v183)
                    operator delete(v183);
                  *(_QWORD *)(v50 + 6200) = 0;
                  goto LABEL_260;
                }
              }
              if (v165 >> 61)
                goto LABEL_467;
              v166 = operator new(8 * v165);
              v167 = (_QWORD *)*v51;
              *v51 = v166;
              if (v167)
                operator delete(v167);
              v168 = 0;
              *(_QWORD *)(v50 + 6200) = v165;
              do
                *(_QWORD *)(*v51 + 8 * v168++) = 0;
              while (v165 != v168);
              v169 = *(_QWORD **)(v50 + 6208);
              if (!v169)
                goto LABEL_260;
              v170 = v50 + 6208;
              v171 = v169[1];
              v172 = v165 - 1;
              if ((v165 & (v165 - 1)) == 0)
              {
                v173 = v171 & v172;
                *(_QWORD *)(*v51 + 8 * v173) = v170;
                while (1)
                {
                  v174 = (_QWORD *)*v169;
                  if (!*v169)
                    break;
                  v175 = v174[1] & v172;
                  if (v175 == v173)
                  {
                    v169 = (_QWORD *)*v169;
                  }
                  else if (*(_QWORD *)(*v51 + 8 * v175))
                  {
                    *v169 = *v174;
                    v176 = 8 * v175;
                    *v174 = **(_QWORD **)(*v51 + v176);
                    **(_QWORD **)(*v51 + v176) = v174;
                  }
                  else
                  {
                    *(_QWORD *)(*v51 + 8 * v175) = v169;
                    v169 = v174;
                    v173 = v175;
                  }
                }
LABEL_260:
                v152 = *(_QWORD *)(v50 + 6200);
                if ((v152 & (v152 - 1)) != 0)
                {
                  if (v151 >= v152)
                    v103 = v151 % v152;
                  else
                    v103 = v151;
                }
                else
                {
                  v103 = (v152 - 1) & v151;
                }
                goto LABEL_265;
              }
              if (v171 >= v165)
                v171 %= v165;
              *(_QWORD *)(*v51 + 8 * v171) = v170;
              v180 = (_QWORD *)*v169;
              if (!*v169)
                goto LABEL_260;
              while (1)
              {
                v182 = v180[1];
                if (v182 >= v165)
                  v182 %= v165;
                if (v182 != v171)
                {
                  if (!*(_QWORD *)(*v51 + 8 * v182))
                  {
                    *(_QWORD *)(*v51 + 8 * v182) = v169;
                    goto LABEL_246;
                  }
                  *v169 = *v180;
                  v181 = 8 * v182;
                  *v180 = **(_QWORD **)(*v51 + v181);
                  **(_QWORD **)(*v51 + v181) = v180;
                  v180 = v169;
                }
                v182 = v171;
LABEL_246:
                v169 = v180;
                v180 = (_QWORD *)*v180;
                v171 = v182;
                if (!v180)
                  goto LABEL_260;
              }
            }
            v139 = *(_QWORD *)(*(_QWORD *)v103 + 8);
            if ((v122 & (v122 - 1)) != 0)
            {
              if (v139 >= v122)
                v139 %= v122;
            }
            else
            {
              v139 &= v122 - 1;
            }
            v138 = (unint64_t *)(*v121 + 8 * v139);
          }
          *v138 = v103;
          goto LABEL_167;
        }
LABEL_468:
        abort();
      }
    }
  }
LABEL_461:
  v276 = v285;
  if (v285)
  {
    v277 = (unint64_t *)&v285->__shared_owners_;
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
}

void sub_19FD872C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, char a19)
{
  _QWORD *v19;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  v21 = v19[3];
  v19[3] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  operator delete(v19);
  if (a17)
  {
    p_shared_owners = (unint64_t *)&a17->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
      std::__shared_weak_count::__release_weak(a17);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PlanarConstantDataHandle>(gdc::Entity,md::ls::PlanarConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PlanarConstantDataHandle>(gdc::Entity,md::ls::PlanarConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E4280200;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PlanarConstantDataHandle>(gdc::Entity,md::ls::PlanarConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4280200;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PlanarConstantDataHandle>(gdc::Entity,md::ls::PlanarConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PlanarConstantDataHandle>(a2);
  *(_QWORD *)&v25 = *(_QWORD *)(a1 + 8);
  BYTE8(v25) = *(_BYTE *)(a1 + 16);
  v26 = v3;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v26);
  if ((v6 & 1) != 0)
  {
    v12 = (_BYTE *)v4[11];
    v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = v4[10];
      v15 = (uint64_t)&v12[-v14] >> 4;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        goto LABEL_30;
      v17 = v11 - v14;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = (char *)operator new(16 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[16 * v15];
      *(_OWORD *)v20 = v25;
      v13 = v20 + 16;
      if (v12 != (_BYTE *)v14)
      {
        do
        {
          v21 = *((_QWORD *)v12 - 2);
          v12 -= 16;
          v22 = v12[8];
          *((_QWORD *)v20 - 2) = v21;
          v20 -= 16;
          v20[8] = v22;
        }
        while (v12 != (_BYTE *)v14);
        v12 = (_BYTE *)v4[10];
      }
      v4[10] = (uint64_t)v20;
      v4[11] = (uint64_t)v13;
      v4[12] = (uint64_t)&v19[16 * v18];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_OWORD *)v12 = v25;
      v13 = v12 + 16;
    }
    v4[11] = (uint64_t)v13;
    v8 = v4[31];
  }
  else
  {
    v7 = v4[10] + 2 * ((_QWORD)v5 - v4[7]);
    *(_QWORD *)v7 = v25;
    *(_BYTE *)(v7 + 8) = BYTE8(v25);
    v8 = v4[31];
    if (v7 != v4[11])
    {
      v9 = (_QWORD *)v4[16];
      if (v9)
      {
        while (1)
        {
          v28 = &v26;
          v29 = 1;
          v27 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v27, &v28);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v23 = (_QWORD *)v4[22];
  if (v23)
  {
    while (1)
    {
      v28 = &v26;
      v29 = 1;
      v27 = v8;
      v24 = v23[6];
      if (!v24)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v24 + 48))(v24, &v27, &v28);
      v23 = (_QWORD *)*v23;
      if (!v23)
        return;
    }
    goto LABEL_29;
  }
}

void md::realistic::OverlayRenderLayer::~OverlayRenderLayer(md::realistic::OverlayRenderLayer *this)
{
  md::realistic::OverlayRenderLayer::~OverlayRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;

  *(_QWORD *)this = &off_1E42B0080;
  *((_QWORD *)this + 6) = &unk_1E42B00F0;
  altitude::TileManager::unregisterTileListener(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 128) + 688), (uint64_t)this + 48);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  if (!v10)
    goto LABEL_19;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
    if (!v13)
      goto LABEL_25;
  }
  else
  {
LABEL_19:
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
    if (!v13)
      goto LABEL_25;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_25:
  v16 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)this + 22);
  if (v17)
  {
    v18 = *((_QWORD *)this + 23);
    v19 = (void *)*((_QWORD *)this + 22);
    if (v18 != v17)
    {
      do
      {
        v20 = *(std::__shared_weak_count **)(v18 - 8);
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v18 -= 16;
      }
      while (v18 != v17);
      v19 = (void *)*((_QWORD *)this + 22);
    }
    *((_QWORD *)this + 23) = v17;
    operator delete(v19);
  }
  v23 = *((_QWORD *)this + 19);
  if (v23)
  {
    v24 = *((_QWORD *)this + 20);
    v25 = (void *)*((_QWORD *)this + 19);
    if (v24 != v23)
    {
      do
      {
        v26 = *(std::__shared_weak_count **)(v24 - 8);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 16;
      }
      while (v24 != v23);
      v25 = (void *)*((_QWORD *)this + 19);
    }
    *((_QWORD *)this + 20) = v23;
    operator delete(v25);
  }
  v29 = (void *)*((_QWORD *)this + 16);
  if (v29)
  {
    *((_QWORD *)this + 17) = v29;
    operator delete(v29);
  }
  v30 = (void *)*((_QWORD *)this + 13);
  if (v30)
  {
    *((_QWORD *)this + 14) = v30;
    operator delete(v30);
  }
  v31 = *((_QWORD *)this + 10);
  if (v31)
  {
    v32 = *((_QWORD *)this + 11);
    v33 = (void *)*((_QWORD *)this + 10);
    if (v32 != v31)
    {
      do
      {
        v34 = *(void **)(v32 - 16);
        v32 -= 16;

      }
      while (v32 != v31);
      v33 = (void *)*((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 11) = v31;
    operator delete(v33);
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  *(_QWORD *)this = off_1E428C468;
  v38 = (void *)*((_QWORD *)this + 1);
  if (v38)
  {
    *((_QWORD *)this + 2) = v38;
    operator delete(v38);
  }
}

uint64_t **md::realistic::OverlayRenderLayer::layout(md::realistic::OverlayRenderLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  double v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  float v19;
  unint64_t v20;
  float32x4_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  float v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  float32x4_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t **v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t **result;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v4 = (_QWORD *)*((_QWORD *)this + 5);
  v5 = v4[3];
  v6 = *(_QWORD *)(*((_QWORD *)a2 + 92) + 16);
  v7 = v4[18];
  v8 = *(unsigned int *)(v4[17] + 88);
  v9 = (float)((float)(*(float *)(v6 + 1320) * 0.011111) + -1.0)
     * (float)((float)(*(float *)(v6 + 1320) * 0.011111) + -1.0);
  v10 = (float)(v9 * (float)(v9 * v9)) * 0.1;
  v11 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 376)), *(float64x2_t *)(v6 + 392));
  v12 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 408)), *(float64x2_t *)(v6 + 424));
  v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 440)), *(float64x2_t *)(v6 + 456));
  v14 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 472)), *(float64x2_t *)(v6 + 488));
  v15 = (_QWORD *)*((_QWORD *)this + 27);
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = v10;
  v20 = v15[1];
  v22 = v15[8];
  v21 = (float32x4_t *)v15[9];
  *v21 = v11;
  v21[1] = v12;
  v21[2] = v13;
  v21[3] = v14;
  if (v22 > v20)
    v20 = v22;
  v15[7] = 0;
  v15[8] = v20;
  if (v16)
  {
    v23 = (unint64_t *)&v16->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v25 = fmaxf(v19, 0.0);
  v26 = (_QWORD *)*((_QWORD *)this + 27);
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = v26[1];
  v31 = v26[8];
  *(float *)(v26[9] + 64) = v25;
  if (v31 > v30)
    v30 = v31;
  v26[7] = 0;
  v26[8] = v30;
  if (v27)
  {
    v32 = (unint64_t *)&v27->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v34 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 376)), *(float64x2_t *)(v6 + 392));
  v35 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 408)), *(float64x2_t *)(v6 + 424));
  v36 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 440)), *(float64x2_t *)(v6 + 456));
  v37 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 472)), *(float64x2_t *)(v6 + 488));
  v38 = (_QWORD *)*((_QWORD *)this + 29);
  v39 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = v38[1];
  v44 = v38[8];
  v43 = (float32x4_t *)v38[9];
  *v43 = v34;
  v43[1] = v35;
  v43[2] = v36;
  v43[3] = v37;
  if (v44 > v42)
    v42 = v44;
  v38[7] = 0;
  v38[8] = v42;
  if (v39)
  {
    v45 = (unint64_t *)&v39->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v47 = (_QWORD *)*((_QWORD *)this + 29);
  v48 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v51 = v47[1];
  v52 = v47[8];
  *(_DWORD *)(v47[9] + 64) = 0;
  if (v52 > v51)
    v51 = v52;
  v47[7] = 0;
  v47[8] = v51;
  if (v48)
  {
    v53 = (unint64_t *)&v48->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v55 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 25) + 56))(*((_QWORD *)this + 25));
  v56 = *v55;
  v57 = v55[1];
  if (*v55 != v57)
  {
    do
    {
      v58 = *v56;
      v59 = *(_QWORD *)(*v56 + 360);
      if (!v59)
      {
        v60 = operator new();
        *(_DWORD *)(v60 + 8) = 4;
        *(_QWORD *)(v60 + 40) = 0;
        *(_QWORD *)(v60 + 32) = 0;
        *(_QWORD *)(v60 + 16) = 0;
        *(_QWORD *)(v60 + 24) = v60 + 32;
        *(_OWORD *)(v60 + 48) = 0u;
        *(_OWORD *)(v60 + 64) = 0u;
        *(_QWORD *)v60 = &off_1E42C5950;
        *(_BYTE *)(v60 + 80) = 1;
        *(_OWORD *)(v60 + 84) = 0u;
        *(_OWORD *)(v60 + 100) = 0u;
        *(_OWORD *)(v60 + 116) = 0u;
        *(_OWORD *)(v60 + 132) = 0u;
        *(_OWORD *)(v60 + 148) = 0u;
        *(_QWORD *)(v60 + 162) = 0;
        *(_QWORD *)(v58 + 360) = v60;
        altitude::TileComponent::onAttach(v60, v58);
        v59 = *(_QWORD *)(v58 + 360);
      }
      (*(void (**)(uint64_t, const md::LayoutContext *, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v59 + 80))(v59, a2, v6, *(_QWORD *)(*((_QWORD *)a2 + 92) + 24), v8, v7);
      ++v56;
    }
    while (v56 != v57);
  }
  result = (uint64_t **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 25) + 56))(*((_QWORD *)this + 25));
  v62 = *result;
  v63 = result[1];
  if (*result != v63)
  {
    do
    {
      v64 = *v62;
      v65 = *(_QWORD *)(*v62 + 360);
      if (!v65)
      {
        v66 = operator new();
        *(_DWORD *)(v66 + 8) = 4;
        *(_QWORD *)(v66 + 40) = 0;
        *(_QWORD *)(v66 + 32) = 0;
        *(_QWORD *)(v66 + 16) = 0;
        *(_QWORD *)(v66 + 24) = v66 + 32;
        *(_OWORD *)(v66 + 48) = 0u;
        *(_OWORD *)(v66 + 64) = 0u;
        *(_QWORD *)v66 = &off_1E42C5950;
        *(_BYTE *)(v66 + 80) = 1;
        *(_OWORD *)(v66 + 84) = 0u;
        *(_OWORD *)(v66 + 100) = 0u;
        *(_OWORD *)(v66 + 116) = 0u;
        *(_OWORD *)(v66 + 132) = 0u;
        *(_OWORD *)(v66 + 148) = 0u;
        *(_QWORD *)(v66 + 162) = 0;
        *(_QWORD *)(v64 + 360) = v66;
        altitude::TileComponent::onAttach(v66, v64);
        v65 = *(_QWORD *)(v64 + 360);
      }
      result = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v65 + 88))(v65, v6, v5, v8, 255, *(_QWORD *)(*((_QWORD *)this + 5) + 120));
      ++v62;
    }
    while (v62 != v63);
  }
  return result;
}

uint64_t md::realistic::OverlayRenderLayer::setActive(uint64_t this, char a2)
{
  *(_BYTE *)(this + 32) = a2;
  *(_BYTE *)(*(_QWORD *)(this + 272) + 104) = a2;
  return this;
}

void md::realistic::OverlayRenderLayer::onTileComponentDataLoaded(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  if (*(_QWORD *)(a2 + 360) == a3)
  {
    v5 = (char *)a1[13];
    v6 = (char *)a1[14];
    v7 = v5;
    if (v5 != v6)
    {
      while (*(_QWORD *)v7 != a2)
      {
        v7 += 8;
        if (v7 == v6)
        {
          v7 = (char *)a1[14];
          break;
        }
      }
    }
    if (v7 == v6)
    {
      v8 = a1[15];
      if ((unint64_t)v6 >= v8)
      {
        v10 = v6 - v5;
        v11 = (v6 - v5) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          abort();
        v13 = v8 - (_QWORD)v5;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          if (v14 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v15 = operator new(8 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *v16 = a2;
        v9 = v16 + 1;
        if (v5 != v6)
        {
          if ((unint64_t)(v10 - 8) < 0x58)
            goto LABEL_35;
          if ((unint64_t)(v5 - v15) < 0x20)
            goto LABEL_35;
          v18 = ((unint64_t)(v10 - 8) >> 3) + 1;
          v19 = &v15[8 * v11 - 16];
          v20 = v6 - 16;
          v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v22 = *(_OWORD *)v20;
            *(v19 - 1) = *((_OWORD *)v20 - 1);
            *v19 = v22;
            v19 -= 2;
            v20 -= 32;
            v21 -= 4;
          }
          while (v21);
          v16 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
          v6 -= 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
          if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_35:
            do
            {
              v23 = *((_QWORD *)v6 - 1);
              v6 -= 8;
              *--v16 = v23;
            }
            while (v6 != v5);
            v5 = (char *)a1[13];
          }
        }
        a1[13] = v16;
        a1[14] = v9;
        a1[15] = v17;
        if (v5)
          operator delete(v5);
      }
      else
      {
        *(_QWORD *)v6 = a2;
        v9 = v6 + 8;
      }
      a1[14] = v9;
    }
  }
}

void md::realistic::OverlayRenderLayer::onTileComponentDataRelease(md::realistic::OverlayRenderLayer *this, altitude::TileComponent **a2, altitude::TileComponent *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if (a2[45] == a3)
  {
    v4 = *((_QWORD *)this + 13);
    v5 = *((_QWORD *)this + 14);
    v6 = v5 - v4;
    if (v5 != v4)
    {
      v7 = 0;
      v8 = v6 >> 3;
      while (*(altitude::TileComponent ***)(v4 + 8 * v7) != a2)
      {
        if (v8 == ++v7)
          return;
      }
      if (*((_QWORD *)a3 + 13))
        v9 = (*((_QWORD *)a3 + 11) != 0) + 1;
      else
        v9 = *((_QWORD *)a3 + 11) != 0;
      if (v9 <= 1)
      {
        v10 = v8 - 1;
        *(_QWORD *)(v4 + 8 * v7) = *(_QWORD *)(v4 + 8 * v10);
        v11 = *((_QWORD *)this + 13);
        v12 = (*((_QWORD *)this + 14) - v11) >> 3;
        if (v10 <= v12)
        {
          if (v10 < v12)
            *((_QWORD *)this + 14) = v11 + 8 * v10;
        }
        else
        {
          std::vector<altitude::TextureMap *>::__append((uint64_t)this + 104, v10 - v12);
        }
      }
    }
  }
}

void `non-virtual thunk to'md::realistic::OverlayRenderLayer::~OverlayRenderLayer(md::realistic::OverlayRenderLayer *this)
{
  md::realistic::OverlayRenderLayer::~OverlayRenderLayer((md::realistic::OverlayRenderLayer *)((char *)this - 48));
}

{
  md::realistic::OverlayRenderLayer::~OverlayRenderLayer((md::realistic::OverlayRenderLayer *)((char *)this - 48));
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'md::realistic::OverlayRenderLayer::onTileComponentDataLoaded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  md::realistic::OverlayRenderLayer::onTileComponentDataLoaded((_QWORD *)(a1 - 48), a2, a3);
}

void `non-virtual thunk to'md::realistic::OverlayRenderLayer::onTileComponentDataRelease(md::realistic::OverlayRenderLayer *this, altitude::TileComponent **a2, altitude::TileComponent *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if (a2[45] == a3)
  {
    v4 = *((_QWORD *)this + 7);
    v5 = *((_QWORD *)this + 8);
    v6 = v5 - v4;
    if (v5 != v4)
    {
      v7 = 0;
      v8 = v6 >> 3;
      while (*(altitude::TileComponent ***)(v4 + 8 * v7) != a2)
      {
        if (v8 == ++v7)
          return;
      }
      if (*((_QWORD *)a3 + 13))
        v9 = (*((_QWORD *)a3 + 11) != 0) + 1;
      else
        v9 = *((_QWORD *)a3 + 11) != 0;
      if (v9 <= 1)
      {
        v10 = v8 - 1;
        *(_QWORD *)(v4 + 8 * v7) = *(_QWORD *)(v4 + 8 * v10);
        v11 = *((_QWORD *)this + 7);
        v12 = (*((_QWORD *)this + 8) - v11) >> 3;
        if (v10 <= v12)
        {
          if (v10 < v12)
            *((_QWORD *)this + 8) = v11 + 8 * v10;
        }
        else
        {
          std::vector<altitude::TextureMap *>::__append((uint64_t)this + 56, v10 - v12);
        }
      }
    }
  }
}

void std::__shared_ptr_emplace<ggl::FlyoverOverlay::P3T2PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF178;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverOverlay::P3T2PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF178;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverOverlay::P3T2PipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverOverlay::Shared>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverOverlay::Shared>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverOverlay::Shared>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E14E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverOverlay::Shared>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E14E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverOverlay::Shared>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL md::realistic::OverlayRenderLayer::tileNeedsRefresh(md::realistic::OverlayRenderLayer *this, altitude::Tile *a2)
{
  uint64_t v4;
  uint64_t v5;
  char isPoleTile;
  char v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *((_QWORD *)a2 + 45);
  v5 = *((_QWORD *)a2 + 36);
  if (v5)
  {
    isPoleTile = altitude::Tile::isPoleTile((char **)(v5 + 40));
    if (!v4)
      return 0;
  }
  else
  {
    isPoleTile = 0;
    if (!v4)
      return 0;
  }
  if (*((_DWORD *)a2 + 101))
    return 0;
  if (v5)
  {
    v8 = isPoleTile ^ 1;
    if (*(_BYTE *)(v5 + 164))
      v8 = 0;
    if ((v8 & 1) != 0)
      return 0;
  }
  if (*(_DWORD *)(v4 + 84) < *((_DWORD *)this + 19))
  {
    *(_WORD *)(v4 + 168) = 0;
    v9 = *((_QWORD *)this + 10);
    v10 = *((_QWORD *)this + 11);
    if (v9 != v10)
    {
      if ((isPoleTile & 1) != 0)
      {
        do
        {
          if (*(_DWORD *)(v4 + 84) < *(_DWORD *)(v9 + 8))
          {
            v13 = objc_msgSend(*(id *)v9, "level") != 0;
            v14 = *((_DWORD *)a2 + 98) | 0x200000000;
            v17 = *((unsigned int *)a2 + 100) | ((unint64_t)(~(-1 << *((_DWORD *)a2 + 98))
                                                                                - *((_DWORD *)a2 + 99)) << 32);
            v18 = v14;
            if (!*(_QWORD *)(v4 + 16 * v13 + 120))
            {
              if (objc_msgSend(*(id *)v9, "canDrawKey:", &v17))
                *(_BYTE *)(v4 + v13 + 168) = 1;
            }
          }
          v11 = *(id *)v9;
          v9 += 16;
          if (objc_msgSend(v11, "level", v17, v18))
            v12 = v4 + 1;
          else
            v12 = v4;
          *(_BYTE *)(v12 + 168) = 1;
        }
        while (v9 != v10);
      }
      else
      {
        do
        {
          if (*(_DWORD *)(v4 + 84) < *(_DWORD *)(v9 + 8))
          {
            v15 = objc_msgSend(*(id *)v9, "level") != 0;
            v16 = *((_DWORD *)a2 + 98) | 0x200000000;
            v17 = *((unsigned int *)a2 + 100) | ((unint64_t)(~(-1 << *((_DWORD *)a2 + 98))
                                                                                - *((_DWORD *)a2 + 99)) << 32);
            v18 = v16;
            if (!*(_QWORD *)(v4 + 16 * v15 + 120))
            {
              if (objc_msgSend(*(id *)v9, "canDrawKey:", &v17))
                *(_BYTE *)(v4 + v15 + 168) = 1;
            }
          }
          v9 += 16;
        }
        while (v9 != v10);
      }
    }
    *(_DWORD *)(v4 + 84) = *((_DWORD *)this + 19);
  }
  return *(_BYTE *)(v4 + 168) || *(_BYTE *)(v4 + 169) != 0;
}

void md::realistic::OverlayRenderLayer::clearOverlays(md::realistic::OverlayRenderLayer *this)
{
  md::realistic::OverlayRenderLayer *v1;
  altitude::GlobeCleanupLoader *v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  _DWORD *v13;
  char v14;
  int v15;
  int v16;
  char v17;
  int v18;
  int v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  uint64_t *v30;
  uint64_t **v31;
  md::realistic::OverlayRenderLayer *v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t v35;

  v1 = this;
  v2 = *(altitude::GlobeCleanupLoader **)(*(_QWORD *)(*((_QWORD *)this + 5) + 128) + 448);
  if (v2)
  {
    v3 = *(_DWORD *)(*((_QWORD *)v2 + 4) + 88) + 1;
    altitude::GlobeCleanupLoader::pruneOverlayElements(v2, v3, v3);
  }
  v4 = *((_QWORD *)v1 + 34);
  if (v4)
  {
    v34 = 0;
    v35 = 0;
    v32 = v1;
    v33 = &v34;
    pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 40));
    v5 = *(_QWORD **)(v4 + 64);
    if (v5 != (_QWORD *)(v4 + 72))
    {
      do
      {
        v7 = v5[9];
        v6 = (std::__shared_weak_count *)v5[10];
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        v10 = v34;
        v11 = &v34;
        v12 = &v34;
        if (v34)
        {
          while (1)
          {
            while (1)
            {
              v12 = (uint64_t **)v10;
              v13 = (_DWORD *)v10 + 7;
              v14 = std::__synth_three_way[abi:nn180100]<altitude::TileKey,altitude::TileKey>((_DWORD *)(v7 + 224), (_DWORD *)v10 + 7);
              if (!v14)
              {
                v15 = *(_DWORD *)(v7 + 256);
                v16 = *((_DWORD *)v12 + 15);
                v14 = v15 < v16 ? -1 : 1;
                if (v15 == v16)
                  break;
              }
              if ((v14 & 0x80) == 0)
                break;
              v10 = *v12;
              v11 = v12;
              if (!*v12)
                goto LABEL_26;
            }
            v17 = std::__synth_three_way[abi:nn180100]<altitude::TileKey,altitude::TileKey>(v13, (_DWORD *)(v7 + 224));
            if (!v17)
            {
              v18 = *((_DWORD *)v12 + 15);
              v19 = *(_DWORD *)(v7 + 256);
              v17 = v18 < v19 ? -1 : 1;
              if (v18 == v19)
                break;
            }
            if ((v17 & 0x80) == 0)
              break;
            v11 = v12 + 1;
            v10 = v12[1];
            if (!v10)
              goto LABEL_26;
          }
        }
        else
        {
LABEL_26:
          v20 = (char *)operator new(0x40uLL);
          *(_OWORD *)(v20 + 28) = *(_OWORD *)(v7 + 224);
          *(_OWORD *)(v20 + 44) = *(_OWORD *)(v7 + 240);
          *((_DWORD *)v20 + 15) = *(_DWORD *)(v7 + 256);
          *(_QWORD *)v20 = 0;
          *((_QWORD *)v20 + 1) = 0;
          *((_QWORD *)v20 + 2) = v12;
          *v11 = (uint64_t *)v20;
          if (*v33)
          {
            v33 = (uint64_t **)*v33;
            v20 = (char *)*v11;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v34, (uint64_t *)v20);
          ++v35;
        }
        if (!v6)
          goto LABEL_33;
        v21 = (unint64_t *)&v6->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
          v23 = (_QWORD *)v5[1];
          if (!v23)
          {
            do
            {
LABEL_37:
              v24 = (_QWORD *)v5[2];
              v25 = *v24 == (_QWORD)v5;
              v5 = v24;
            }
            while (!v25);
            goto LABEL_6;
          }
        }
        else
        {
LABEL_33:
          v23 = (_QWORD *)v5[1];
          if (!v23)
            goto LABEL_37;
        }
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
LABEL_6:
        v5 = v24;
      }
      while (v24 != (_QWORD *)(v4 + 72));
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 40));
    v26 = v33;
    if (v33 != &v34)
    {
      do
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, (uint64_t)v26 + 28);
        v30 = v26[1];
        if (v30)
        {
          do
          {
            v31 = (uint64_t **)v30;
            v30 = (uint64_t *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v31 = (uint64_t **)v26[2];
            v25 = *v31 == (uint64_t *)v26;
            v26 = v31;
          }
          while (!v25);
        }
        v26 = v31;
      }
      while (v31 != &v34);
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v34);
    v1 = v32;
  }
  *((_QWORD *)v1 + 14) = *((_QWORD *)v1 + 13);
  v27 = *((_QWORD *)v1 + 10);
  for (i = *((_QWORD *)v1 + 11); i != v27; i -= 16)
  {
    v29 = *(void **)(i - 16);

  }
  *((_QWORD *)v1 + 11) = v27;
}

void sub_19FD88724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a11);
  _Unwind_Resume(a1);
}

void md::realistic::OverlayRenderLayer::invalidateTiles(md::realistic::OverlayRenderLayer *this, VKOverlay *a2)
{
  VKOverlay *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v3 = a2;
  *((_DWORD *)this + 19) = *((_DWORD *)this + 18) + 1;
  v5 = *((_QWORD *)this + 13);
  v4 = *((_QWORD *)this + 14);
  if (v4 != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      v8 = *(_QWORD *)(v7 + 360);
      if (v8)
      {
        v9 = *(unsigned int *)(v7 + 400) | ((unint64_t)(~(-1 << *(_DWORD *)(v7 + 392))
                                                                           - *(_DWORD *)(v7 + 396)) << 32);
        v10 = *(_DWORD *)(v7 + 392) | 0x200000000;
        v12[0] = v9;
        v12[1] = v10;
        if (-[VKOverlay canDrawKey:](v3, "canDrawKey:", v12))
        {
          if (-[VKOverlay level](v3, "level"))
            v11 = v8 + 1;
          else
            v11 = v8;
          *(_BYTE *)(v11 + 168) = 1;
        }
        *(_DWORD *)(v8 + 84) = *((_DWORD *)this + 19);
        v5 = *((_QWORD *)this + 13);
        v4 = *((_QWORD *)this + 14);
      }
      ++v6;
    }
    while (v6 != (v4 - v5) >> 3);
  }

}

void sub_19FD8885C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::realistic::OverlayRenderLayer::addOverlay(md::realistic::OverlayRenderLayer *this, VKOverlay *a2)
{
  VKOverlay *v3;
  VKOverlay *v4;
  int v5;
  unint64_t v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  VKOverlay *v20;

  v3 = a2;
  md::realistic::OverlayRenderLayer::invalidateTiles(this, v3);
  v4 = v3;
  v5 = *((_DWORD *)this + 18) + 1;
  v7 = (char *)*((_QWORD *)this + 11);
  v6 = *((_QWORD *)this + 12);
  if ((unint64_t)v7 >= v6)
  {
    v20 = v4;
    v9 = (char *)*((_QWORD *)this + 10);
    v10 = (v7 - v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      abort();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = (char *)operator new(16 * v13);
    v15 = &v14[16 * v10];
    v16 = &v14[16 * v13];
    *(_QWORD *)v15 = v20;
    *((_DWORD *)v15 + 2) = v5;
    v8 = v15 + 16;
    if (v7 == v9)
    {
      *((_QWORD *)this + 10) = v15;
      *((_QWORD *)this + 11) = v8;
      *((_QWORD *)this + 12) = v16;
      if (!v7)
        goto LABEL_17;
    }
    else
    {
      v17 = v7;
      do
      {
        v18 = *((_QWORD *)v17 - 2);
        v17 -= 16;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v15 - 2) = v18;
        v15 -= 16;
        *((_DWORD *)v15 + 2) = *((_DWORD *)v17 + 2);
      }
      while (v17 != v9);
      *((_QWORD *)this + 10) = v15;
      *((_QWORD *)this + 11) = v8;
      *((_QWORD *)this + 12) = v16;
      do
      {
        v19 = (void *)*((_QWORD *)v7 - 2);
        v7 -= 16;

      }
      while (v7 != v9);
      v7 = v9;
      if (!v9)
        goto LABEL_17;
    }
    operator delete(v7);
LABEL_17:
    v4 = v20;
    goto LABEL_18;
  }
  *(_QWORD *)v7 = v4;
  *((_DWORD *)v7 + 2) = v5;
  v8 = v7 + 16;
LABEL_18:
  *((_QWORD *)this + 11) = v8;

}

void sub_19FD889C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void md::realistic::OverlayRenderLayer::stageLoadOperation(_QWORD *a1, uint64_t a2, int a3)
{
  unint64_t v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;

  v7 = (char *)a1[17];
  v6 = a1[18];
  if ((unint64_t)v7 >= v6)
  {
    v9 = (char *)a1[16];
    v10 = (v7 - v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      abort();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = (char *)operator new(16 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[16 * v10];
    *(_QWORD *)v15 = a2;
    *((_DWORD *)v15 + 2) = a3;
    v8 = v15 + 16;
    if (v7 != v9)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
        v15 -= 16;
        v7 -= 16;
      }
      while (v7 != v9);
      v7 = (char *)a1[16];
    }
    a1[16] = v15;
    a1[17] = v8;
    a1[18] = &v14[16 * v13];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v7 = a2;
    *((_DWORD *)v7 + 2) = a3;
    v8 = v7 + 16;
  }
  a1[17] = v8;
}

void md::StandardPipelineProxy::setAlbedo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  **(_QWORD **)(*(_QWORD *)a2 + 96) = a3;
}

void md::StandardPipelineProxy::~StandardPipelineProxy(md::StandardPipelineProxy *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::StandardPipelineProxy::copy(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  __int128 *v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t (**v48)();
  uint64_t v49;

  v9 = *a4;
  v10 = (_QWORD *)gdc::Registry::storage<arComponents::AlbedoTextureComponent>(a2);
  v11 = v10[4];
  if (v9 >> 39 < (v10[5] - v11) >> 3
    && (v12 = *(_QWORD *)(v11 + 8 * (v9 >> 39))) != 0
    && (v13 = *(unsigned __int16 *)(v12 + 2 * (HIDWORD(v9) & 0x7F)), v15 = v10[7], v14 = v10[8], v13 < (v14 - v15) >> 3)
    && ((v16 = v15 + 8 * v13, v16 != v14) ? (v17 = *(_DWORD *)(v16 + 4) == HIDWORD(v9)) : (v17 = 0), v17))
  {
    v18 = (unint64_t *)(v10[10] + 48 * v13);
  }
  else
  {
    v18 = (unint64_t *)v10[11];
  }
  v19 = *a5;
  v46 = *v18;
  v47 = 0;
  v48 = &off_1E42B5430;
  v49 = 0;
  v20 = gdc::Registry::storage<arComponents::AlbedoTextureComponent>(a3);
  gdc::ComponentStorageWrapper<arComponents::AlbedoTextureComponent>::emplace(v20, v19, (uint64_t)&v46);
  v48 = &off_1E42B5430;
  v21 = *a4;
  v22 = (_QWORD *)gdc::Registry::storage<arComponents::StyleColor>(a2);
  v23 = v22[4];
  if (v21 >> 39 < (v22[5] - v23) >> 3
    && (v24 = *(_QWORD *)(v23 + 8 * (v21 >> 39))) != 0
    && (v25 = *(unsigned __int16 *)(v24 + 2 * (HIDWORD(v21) & 0x7F)), v27 = v22[7], v26 = v22[8], v25 < (v26 - v27) >> 3)
    && ((v28 = v27 + 8 * v25, v28 != v26) ? (v29 = *(_DWORD *)(v28 + 4) == HIDWORD(v21)) : (v29 = 0), v29))
  {
    v30 = (__int128 *)v22[11];
    v31 = (__int128 *)(v22[10] + 16 * v25);
  }
  else
  {
    v30 = (__int128 *)v22[11];
    v31 = v30;
  }
  if (v31 == v30)
    v31 = 0;
  v32 = *a5;
  v46 = *v31;
  v33 = (uint64_t *)gdc::Registry::storage<arComponents::StyleColor>(a3);
  gdc::ComponentStorageWrapper<md::components::AlbedoTint>::emplace(v33, v32, (uint64_t)&v46);
  v34 = *a4;
  v35 = (_QWORD *)gdc::Registry::storage<arComponents::VisibilityAlpha>(a2);
  v36 = v35[4];
  if (v34 >> 39 < (v35[5] - v36) >> 3
    && (v37 = *(_QWORD *)(v36 + 8 * (v34 >> 39))) != 0
    && (v38 = *(unsigned __int16 *)(v37 + 2 * (HIDWORD(v34) & 0x7F)), v40 = v35[7], v39 = v35[8], v38 < (v39 - v40) >> 3)
    && ((v41 = v40 + 8 * v38, v41 != v39) ? (v42 = *(_DWORD *)(v41 + 4) == HIDWORD(v34)) : (v42 = 0), v42))
  {
    v43 = (_DWORD *)(v35[10] + 4 * v38);
  }
  else
  {
    v43 = (_DWORD *)v35[11];
  }
  v44 = *a5;
  LODWORD(v46) = *v43;
  v45 = (uint64_t *)gdc::Registry::storage<arComponents::VisibilityAlpha>(a3);
  gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v45, v44, &v46);
}

void sub_19FD88D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  arComponents::AlbedoTextureComponent::~AlbedoTextureComponent((arComponents::AlbedoTextureComponent *)&a9);
  _Unwind_Resume(a1);
}

void md::StandardPipelineProxy::update(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  char v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *i;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  __int128 *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  _QWORD *v97;
  char v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *j;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  _QWORD *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  __int128 *v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  _QWORD *v126;
  char v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *k;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  _QWORD *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  unint64_t v143;
  uint64_t v144;
  char *v145;
  __int128 *v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  _QWORD *v155;
  char v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *m;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  _QWORD *v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  unint64_t v172;
  uint64_t v173;
  char *v174;
  __int128 *v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *HasARLighting;
  _QWORD *v184;
  char v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *n;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  _QWORD *v192;
  char *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char *v198;
  char *v199;
  char *v200;
  unint64_t v201;
  uint64_t v202;
  char *v203;
  __int128 *v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *HasTransformConstant;
  uint64_t v212;
  uint64_t *HasTransformInstanceDeviceData;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  _QWORD *v217;
  char v218;
  _QWORD *v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  char *v224;
  _QWORD *v225;
  char *v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  char *v231;
  char *v232;
  char *v233;
  unint64_t v234;
  uint64_t v235;
  char *v236;
  __int128 *v237;
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  _BYTE v243[20];
  int v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;

  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(v6 + 8);
  if (v7 == *(_QWORD *)v6)
  {
    v18 = *(_QWORD *)(v6 + 88);
    if (!v18)
    {
LABEL_249:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_250:
      abort();
    }
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
    v9 = *(uint64_t **)(v6 + 40);
    v19 = *(_QWORD *)(v6 + 48);
    if ((unint64_t)v9 >= v19)
    {
      v21 = *(_QWORD *)(v6 + 32);
      v22 = ((uint64_t)v9 - v21) >> 3;
      v13 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        goto LABEL_250;
      v23 = v19 - v21;
      if (v23 >> 2 > v13)
        v13 = v23 >> 2;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      if (v13)
      {
        v24 = 8 * v13;
        v25 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 56) + 16))(*(_QWORD *)(v6 + 56), 8 * v13, 8);
        v17 = (uint64_t *)(v25 + 8 * v22);
        v13 = v25 + v24;
        if (v25)
          *v17 = v8;
      }
      else
      {
        v17 = (uint64_t *)(8 * v22);
      }
      v20 = v17 + 1;
      v35 = *(_QWORD *)(v6 + 32);
      v26 = *(_QWORD *)(v6 + 40);
      if (v26 == v35)
        goto LABEL_48;
      v36 = v26 - v35 - 8;
      if (v36 < 0x38)
      {
        v38 = *(_QWORD *)(v6 + 40);
      }
      else if ((unint64_t)(v26 - (_QWORD)v17) < 0x20)
      {
        v38 = *(_QWORD *)(v6 + 40);
      }
      else
      {
        v37 = (v36 >> 3) + 1;
        v38 = v26 - 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        v39 = v17 - 2;
        v40 = (__int128 *)(v26 - 16);
        v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v42 = *v40;
          *((_OWORD *)v39 - 1) = *(v40 - 1);
          *(_OWORD *)v39 = v42;
          v39 -= 4;
          v40 -= 2;
          v41 -= 4;
        }
        while (v41);
        v17 -= v37 & 0x3FFFFFFFFFFFFFFCLL;
        if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_47;
      }
      do
      {
        v44 = *(_QWORD *)(v38 - 8);
        v38 -= 8;
        *--v17 = v44;
      }
      while (v38 != v35);
      goto LABEL_47;
    }
  }
  else
  {
    v8 = *(_QWORD *)(v7 - 8);
    *(_QWORD *)(v6 + 8) = v7 - 8;
    v9 = *(uint64_t **)(v6 + 40);
    v10 = *(_QWORD *)(v6 + 48);
    if ((unint64_t)v9 >= v10)
    {
      v11 = *(_QWORD *)(v6 + 32);
      v12 = ((uint64_t)v9 - v11) >> 3;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        goto LABEL_250;
      v14 = v10 - v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      if (v13)
      {
        v15 = 8 * v13;
        v16 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v6 + 56) + 16))(*(_QWORD *)(v6 + 56), 8 * v13, 8);
        v17 = (uint64_t *)(v16 + 8 * v12);
        v13 = v16 + v15;
        if (v16)
          *v17 = v8;
      }
      else
      {
        v17 = (uint64_t *)(8 * v12);
      }
      v20 = v17 + 1;
      v27 = *(_QWORD *)(v6 + 32);
      v26 = *(_QWORD *)(v6 + 40);
      if (v26 == v27)
        goto LABEL_48;
      v28 = v26 - v27 - 8;
      if (v28 < 0x38)
      {
        v30 = *(_QWORD *)(v6 + 40);
      }
      else if ((unint64_t)(v26 - (_QWORD)v17) < 0x20)
      {
        v30 = *(_QWORD *)(v6 + 40);
      }
      else
      {
        v29 = (v28 >> 3) + 1;
        v30 = v26 - 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        v31 = v17 - 2;
        v32 = (__int128 *)(v26 - 16);
        v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v34 = *v32;
          *((_OWORD *)v31 - 1) = *(v32 - 1);
          *(_OWORD *)v31 = v34;
          v31 -= 4;
          v32 -= 2;
          v33 -= 4;
        }
        while (v33);
        v17 -= v29 & 0x3FFFFFFFFFFFFFFCLL;
        if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_47;
      }
      do
      {
        v43 = *(_QWORD *)(v30 - 8);
        v30 -= 8;
        *--v17 = v43;
      }
      while (v30 != v27);
LABEL_47:
      v26 = *(_QWORD *)(v6 + 32);
LABEL_48:
      *(_QWORD *)(v6 + 32) = v17;
      *(_QWORD *)(v6 + 40) = v20;
      v45 = *(_QWORD *)(v6 + 48);
      *(_QWORD *)(v6 + 48) = v13;
      if (v26)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 56) + 40))(*(_QWORD *)(v6 + 56), v26, v45 - v26);
      goto LABEL_50;
    }
  }
  if (v9)
    *v9 = v8;
  v20 = v9 + 1;
LABEL_50:
  *(_QWORD *)(v6 + 40) = v20;
  *(_QWORD *)v243 = v8;
  v46 = *(_QWORD *)(v6 + 120);
  if (!v46)
    goto LABEL_249;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v46 + 48))(v46, v243);
  v47 = *a3;
  *(_QWORD *)v243 = v8;
  v48 = (uint64_t *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v48, v47, v243);
  v49 = *a3;
  *(_QWORD *)&v243[12] = 0;
  *(_QWORD *)&v243[4] = 0;
  v245 = 0;
  v246 = 0;
  v249 = 0;
  v248 = 0;
  *(_DWORD *)v243 = 1065353216;
  v244 = 1065353216;
  v247 = 1065353216;
  v250 = 1065353216;
  v50 = (uint64_t *)gdc::Registry::storage<arComponents::ViewConstantDataComponent>(a2);
  gdc::ComponentStorageWrapper<arComponents::ViewConstantDataComponent>::emplace(v50, v49, (__int128 *)v243);
  v51 = *a3;
  *(_QWORD *)v243 = 0;
  *(_QWORD *)&v243[8] = 0;
  v52 = (uint64_t *)gdc::Registry::storage<arComponents::TransformConstantDataComponent>(a2);
  gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(v52, v51, v243);
  v53 = *(std::__shared_weak_count **)&v243[8];
  if (*(_QWORD *)&v243[8])
  {
    v54 = (unint64_t *)(*(_QWORD *)&v243[8] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = *a3;
  v57 = (uint64_t *)gdc::Registry::storage<arComponents::NeedsTransformConstantDataUpdate>(a2);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v57, v56);
  v58 = *a3;
  *(_QWORD *)v243 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 96);
  v59 = (uint64_t *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v59, v58, v243);
  v60 = *a3;
  *(_QWORD *)v243 = **(_QWORD **)(v8 + 64);
  v61 = (uint64_t *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v61, v60, v243);
  v62 = *a3;
  *(_QWORD *)v243 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 16);
  v63 = (uint64_t *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::Transform>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v63, v62, v243);
  v64 = *a3;
  *(_QWORD *)v243 = **(_QWORD **)(v8 + 32);
  v65 = (uint64_t *)gdc::Registry::storage<arComponents::CompWrap<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v65, v64, v243);
  v66 = *a3;
  v67 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 32);
  v68 = (uint64_t *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>>(a2);
  v251 = v66;
  v69 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v68 + 4, (uint64_t)&v251);
  if ((v70 & 1) != 0)
  {
    v76 = (char *)v68[11];
    v75 = v68[12];
    if ((unint64_t)v76 >= v75)
    {
      v78 = (char *)v68[10];
      v79 = (v76 - v78) >> 3;
      v80 = v79 + 1;
      if ((unint64_t)(v79 + 1) >> 61)
        goto LABEL_250;
      v81 = v75 - (_QWORD)v78;
      if (v81 >> 2 > v80)
        v80 = v81 >> 2;
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
        v82 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v82 = v80;
      if (v82)
      {
        if (v82 >> 61)
          goto LABEL_251;
        v83 = (char *)operator new(8 * v82);
      }
      else
      {
        v83 = 0;
      }
      v84 = &v83[8 * v79];
      v85 = &v83[8 * v82];
      *(_QWORD *)v84 = v67;
      v77 = v84 + 8;
      if (v76 != v78)
      {
        v86 = v76 - v78 - 8;
        if (v86 < 0x58)
          goto LABEL_254;
        if ((unint64_t)(v78 - v83) < 0x20)
          goto LABEL_254;
        v87 = (v86 >> 3) + 1;
        v88 = &v83[8 * v79 - 16];
        v89 = (__int128 *)(v76 - 16);
        v90 = v87 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v91 = *v89;
          *((_OWORD *)v88 - 1) = *(v89 - 1);
          *(_OWORD *)v88 = v91;
          v88 -= 32;
          v89 -= 2;
          v90 -= 4;
        }
        while (v90);
        v84 -= 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
        v76 -= 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
        if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_254:
          do
          {
            v92 = *((_QWORD *)v76 - 1);
            v76 -= 8;
            *((_QWORD *)v84 - 1) = v92;
            v84 -= 8;
          }
          while (v76 != v78);
        }
        v76 = (char *)v68[10];
      }
      v68[10] = (uint64_t)v84;
      v68[11] = (uint64_t)v77;
      v68[12] = (uint64_t)v85;
      if (v76)
        operator delete(v76);
    }
    else
    {
      *(_QWORD *)v76 = v67;
      v77 = v76 + 8;
    }
    v68[11] = (uint64_t)v77;
    v72 = v68[31];
    goto LABEL_85;
  }
  v71 = (_QWORD *)((char *)v69 + v68[10] - v68[7]);
  *v71 = v67;
  v72 = v68[31];
  if (v71 == (_QWORD *)v68[11])
  {
LABEL_85:
    v93 = (_QWORD *)v68[22];
    if (v93)
    {
      while (1)
      {
        *(_QWORD *)v243 = &v251;
        *(_QWORD *)&v243[8] = 1;
        v252 = v72;
        v94 = v93[6];
        if (!v94)
          goto LABEL_249;
        (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v94 + 48))(v94, &v252, v243);
        v93 = (_QWORD *)*v93;
        if (!v93)
          goto LABEL_88;
      }
    }
    goto LABEL_88;
  }
  for (i = (_QWORD *)v68[16]; i; i = (_QWORD *)*i)
  {
    *(_QWORD *)v243 = &v251;
    *(_QWORD *)&v243[8] = 1;
    v252 = v72;
    v74 = i[6];
    if (!v74)
      goto LABEL_249;
    (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v74 + 48))(v74, &v252, v243);
  }
LABEL_88:
  v95 = *a3;
  v96 = (uint64_t *)gdc::Registry::storage<md::pipelineECS::HasAlbedo>(a2);
  v251 = v95;
  v97 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v96 + 4, (uint64_t)&v251);
  if ((v98 & 1) != 0)
  {
    v104 = (char *)v96[11];
    v103 = v96[12];
    if ((unint64_t)v104 >= v103)
    {
      v106 = (char *)v96[10];
      v107 = (v104 - v106) >> 3;
      v108 = v107 + 1;
      if ((unint64_t)(v107 + 1) >> 61)
        goto LABEL_250;
      v109 = v103 - (_QWORD)v106;
      if (v109 >> 2 > v108)
        v108 = v109 >> 2;
      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
        v110 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v110 = v108;
      if (v110)
      {
        if (v110 >> 61)
          goto LABEL_251;
        v111 = (char *)operator new(8 * v110);
      }
      else
      {
        v111 = 0;
      }
      v112 = &v111[8 * v107];
      v113 = &v111[8 * v110];
      *(_QWORD *)v112 = a1;
      v105 = v112 + 8;
      if (v104 != v106)
      {
        v114 = v104 - v106 - 8;
        if (v114 < 0x58)
          goto LABEL_255;
        if ((unint64_t)(v106 - v111) < 0x20)
          goto LABEL_255;
        v115 = (v114 >> 3) + 1;
        v116 = &v111[8 * v107 - 16];
        v117 = (__int128 *)(v104 - 16);
        v118 = v115 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v119 = *v117;
          *((_OWORD *)v116 - 1) = *(v117 - 1);
          *(_OWORD *)v116 = v119;
          v116 -= 32;
          v117 -= 2;
          v118 -= 4;
        }
        while (v118);
        v112 -= 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
        v104 -= 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
        if (v115 != (v115 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_255:
          do
          {
            v120 = *((_QWORD *)v104 - 1);
            v104 -= 8;
            *((_QWORD *)v112 - 1) = v120;
            v112 -= 8;
          }
          while (v104 != v106);
        }
        v104 = (char *)v96[10];
      }
      v96[10] = (uint64_t)v112;
      v96[11] = (uint64_t)v105;
      v96[12] = (uint64_t)v113;
      if (v104)
        operator delete(v104);
    }
    else
    {
      *(_QWORD *)v104 = a1;
      v105 = v104 + 8;
    }
    v96[11] = (uint64_t)v105;
    v100 = v96[31];
    goto LABEL_117;
  }
  v99 = (_QWORD *)((char *)v97 + v96[10] - v96[7]);
  *v99 = a1;
  v100 = v96[31];
  if (v99 == (_QWORD *)v96[11])
  {
LABEL_117:
    v121 = (_QWORD *)v96[22];
    if (v121)
    {
      while (1)
      {
        *(_QWORD *)v243 = &v251;
        *(_QWORD *)&v243[8] = 1;
        v252 = v100;
        v122 = v121[6];
        if (!v122)
          goto LABEL_249;
        (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v122 + 48))(v122, &v252, v243);
        v121 = (_QWORD *)*v121;
        if (!v121)
          goto LABEL_120;
      }
    }
    goto LABEL_120;
  }
  for (j = (_QWORD *)v96[16]; j; j = (_QWORD *)*j)
  {
    *(_QWORD *)v243 = &v251;
    *(_QWORD *)&v243[8] = 1;
    v252 = v100;
    v102 = j[6];
    if (!v102)
      goto LABEL_249;
    (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v102 + 48))(v102, &v252, v243);
  }
LABEL_120:
  v123 = *a3;
  v124 = a1 + 32;
  v125 = (uint64_t *)gdc::Registry::storage<md::pipelineECS::HasUVMapping>(a2);
  v251 = v123;
  v126 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v125 + 4, (uint64_t)&v251);
  if ((v127 & 1) != 0)
  {
    v133 = (char *)v125[11];
    v132 = v125[12];
    if ((unint64_t)v133 >= v132)
    {
      v135 = (char *)v125[10];
      v136 = (v133 - v135) >> 3;
      v137 = v136 + 1;
      if ((unint64_t)(v136 + 1) >> 61)
        goto LABEL_250;
      v138 = v132 - (_QWORD)v135;
      if (v138 >> 2 > v137)
        v137 = v138 >> 2;
      if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
        v139 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v139 = v137;
      if (v139)
      {
        if (v139 >> 61)
          goto LABEL_251;
        v140 = (char *)operator new(8 * v139);
      }
      else
      {
        v140 = 0;
      }
      v141 = &v140[8 * v136];
      v142 = &v140[8 * v139];
      *(_QWORD *)v141 = v124;
      v134 = v141 + 8;
      if (v133 != v135)
      {
        v143 = v133 - v135 - 8;
        if (v143 < 0x58)
          goto LABEL_256;
        if ((unint64_t)(v135 - v140) < 0x20)
          goto LABEL_256;
        v144 = (v143 >> 3) + 1;
        v145 = &v140[8 * v136 - 16];
        v146 = (__int128 *)(v133 - 16);
        v147 = v144 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v148 = *v146;
          *((_OWORD *)v145 - 1) = *(v146 - 1);
          *(_OWORD *)v145 = v148;
          v145 -= 32;
          v146 -= 2;
          v147 -= 4;
        }
        while (v147);
        v141 -= 8 * (v144 & 0x3FFFFFFFFFFFFFFCLL);
        v133 -= 8 * (v144 & 0x3FFFFFFFFFFFFFFCLL);
        if (v144 != (v144 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_256:
          do
          {
            v149 = *((_QWORD *)v133 - 1);
            v133 -= 8;
            *((_QWORD *)v141 - 1) = v149;
            v141 -= 8;
          }
          while (v133 != v135);
        }
        v133 = (char *)v125[10];
      }
      v125[10] = (uint64_t)v141;
      v125[11] = (uint64_t)v134;
      v125[12] = (uint64_t)v142;
      if (v133)
        operator delete(v133);
    }
    else
    {
      *(_QWORD *)v133 = v124;
      v134 = v133 + 8;
    }
    v125[11] = (uint64_t)v134;
    v129 = v125[31];
    goto LABEL_149;
  }
  v128 = (_QWORD *)((char *)v126 + v125[10] - v125[7]);
  *v128 = v124;
  v129 = v125[31];
  if (v128 == (_QWORD *)v125[11])
  {
LABEL_149:
    v150 = (_QWORD *)v125[22];
    if (v150)
    {
      while (1)
      {
        *(_QWORD *)v243 = &v251;
        *(_QWORD *)&v243[8] = 1;
        v252 = v129;
        v151 = v150[6];
        if (!v151)
          goto LABEL_249;
        (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v151 + 48))(v151, &v252, v243);
        v150 = (_QWORD *)*v150;
        if (!v150)
          goto LABEL_152;
      }
    }
    goto LABEL_152;
  }
  for (k = (_QWORD *)v125[16]; k; k = (_QWORD *)*k)
  {
    *(_QWORD *)v243 = &v251;
    *(_QWORD *)&v243[8] = 1;
    v252 = v129;
    v131 = k[6];
    if (!v131)
      goto LABEL_249;
    (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v131 + 48))(v131, &v252, v243);
  }
LABEL_152:
  v152 = *a3;
  v153 = a1 + 40;
  v154 = (uint64_t *)gdc::Registry::storage<md::pipelineECS::HasUVScale>(a2);
  v251 = v152;
  v155 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v154 + 4, (uint64_t)&v251);
  if ((v156 & 1) != 0)
  {
    v162 = (char *)v154[11];
    v161 = v154[12];
    if ((unint64_t)v162 >= v161)
    {
      v164 = (char *)v154[10];
      v165 = (v162 - v164) >> 3;
      v166 = v165 + 1;
      if ((unint64_t)(v165 + 1) >> 61)
        goto LABEL_250;
      v167 = v161 - (_QWORD)v164;
      if (v167 >> 2 > v166)
        v166 = v167 >> 2;
      if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8)
        v168 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v168 = v166;
      if (v168)
      {
        if (v168 >> 61)
          goto LABEL_251;
        v169 = (char *)operator new(8 * v168);
      }
      else
      {
        v169 = 0;
      }
      v170 = &v169[8 * v165];
      v171 = &v169[8 * v168];
      *(_QWORD *)v170 = v153;
      v163 = v170 + 8;
      if (v162 != v164)
      {
        v172 = v162 - v164 - 8;
        if (v172 < 0x58)
          goto LABEL_257;
        if ((unint64_t)(v164 - v169) < 0x20)
          goto LABEL_257;
        v173 = (v172 >> 3) + 1;
        v174 = &v169[8 * v165 - 16];
        v175 = (__int128 *)(v162 - 16);
        v176 = v173 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v177 = *v175;
          *((_OWORD *)v174 - 1) = *(v175 - 1);
          *(_OWORD *)v174 = v177;
          v174 -= 32;
          v175 -= 2;
          v176 -= 4;
        }
        while (v176);
        v170 -= 8 * (v173 & 0x3FFFFFFFFFFFFFFCLL);
        v162 -= 8 * (v173 & 0x3FFFFFFFFFFFFFFCLL);
        if (v173 != (v173 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_257:
          do
          {
            v178 = *((_QWORD *)v162 - 1);
            v162 -= 8;
            *((_QWORD *)v170 - 1) = v178;
            v170 -= 8;
          }
          while (v162 != v164);
        }
        v162 = (char *)v154[10];
      }
      v154[10] = (uint64_t)v170;
      v154[11] = (uint64_t)v163;
      v154[12] = (uint64_t)v171;
      if (v162)
        operator delete(v162);
    }
    else
    {
      *(_QWORD *)v162 = v153;
      v163 = v162 + 8;
    }
    v154[11] = (uint64_t)v163;
    v158 = v154[31];
    goto LABEL_181;
  }
  v157 = (_QWORD *)((char *)v155 + v154[10] - v154[7]);
  *v157 = v153;
  v158 = v154[31];
  if (v157 == (_QWORD *)v154[11])
  {
LABEL_181:
    v179 = (_QWORD *)v154[22];
    if (v179)
    {
      while (1)
      {
        *(_QWORD *)v243 = &v251;
        *(_QWORD *)&v243[8] = 1;
        v252 = v158;
        v180 = v179[6];
        if (!v180)
          goto LABEL_249;
        (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v180 + 48))(v180, &v252, v243);
        v179 = (_QWORD *)*v179;
        if (!v179)
          goto LABEL_184;
      }
    }
    goto LABEL_184;
  }
  for (m = (_QWORD *)v154[16]; m; m = (_QWORD *)*m)
  {
    *(_QWORD *)v243 = &v251;
    *(_QWORD *)&v243[8] = 1;
    v252 = v158;
    v160 = m[6];
    if (!v160)
      goto LABEL_249;
    (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v160 + 48))(v160, &v252, v243);
  }
LABEL_184:
  v181 = *a3;
  v182 = a1 + 56;
  HasARLighting = (uint64_t *)gdc::Registry::storage<md::pipelineECS::HasARLightingSetup>(a2);
  v251 = v181;
  v184 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(HasARLighting + 4, (uint64_t)&v251);
  if ((v185 & 1) != 0)
  {
    v191 = (char *)HasARLighting[11];
    v190 = HasARLighting[12];
    if ((unint64_t)v191 >= v190)
    {
      v193 = (char *)HasARLighting[10];
      v194 = (v191 - v193) >> 3;
      v195 = v194 + 1;
      if ((unint64_t)(v194 + 1) >> 61)
        goto LABEL_250;
      v196 = v190 - (_QWORD)v193;
      if (v196 >> 2 > v195)
        v195 = v196 >> 2;
      if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFF8)
        v197 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v197 = v195;
      if (v197)
      {
        if (v197 >> 61)
          goto LABEL_251;
        v198 = (char *)operator new(8 * v197);
      }
      else
      {
        v198 = 0;
      }
      v199 = &v198[8 * v194];
      v200 = &v198[8 * v197];
      *(_QWORD *)v199 = v182;
      v192 = v199 + 8;
      if (v191 != v193)
      {
        v201 = v191 - v193 - 8;
        if (v201 < 0x58)
          goto LABEL_258;
        if ((unint64_t)(v193 - v198) < 0x20)
          goto LABEL_258;
        v202 = (v201 >> 3) + 1;
        v203 = &v198[8 * v194 - 16];
        v204 = (__int128 *)(v191 - 16);
        v205 = v202 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v206 = *v204;
          *((_OWORD *)v203 - 1) = *(v204 - 1);
          *(_OWORD *)v203 = v206;
          v203 -= 32;
          v204 -= 2;
          v205 -= 4;
        }
        while (v205);
        v199 -= 8 * (v202 & 0x3FFFFFFFFFFFFFFCLL);
        v191 -= 8 * (v202 & 0x3FFFFFFFFFFFFFFCLL);
        if (v202 != (v202 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_258:
          do
          {
            v207 = *((_QWORD *)v191 - 1);
            v191 -= 8;
            *((_QWORD *)v199 - 1) = v207;
            v199 -= 8;
          }
          while (v191 != v193);
        }
        v191 = (char *)HasARLighting[10];
      }
      HasARLighting[10] = (uint64_t)v199;
      HasARLighting[11] = (uint64_t)v192;
      HasARLighting[12] = (uint64_t)v200;
      if (v191)
        operator delete(v191);
    }
    else
    {
      *(_QWORD *)v191 = v182;
      v192 = v191 + 8;
    }
    HasARLighting[11] = (uint64_t)v192;
    v187 = HasARLighting[31];
    goto LABEL_213;
  }
  v186 = (_QWORD *)((char *)v184 + HasARLighting[10] - HasARLighting[7]);
  *v186 = v182;
  v187 = HasARLighting[31];
  if (v186 == (_QWORD *)HasARLighting[11])
  {
LABEL_213:
    v208 = (_QWORD *)HasARLighting[22];
    if (v208)
    {
      while (1)
      {
        *(_QWORD *)v243 = &v251;
        *(_QWORD *)&v243[8] = 1;
        v252 = v187;
        v209 = v208[6];
        if (!v209)
          goto LABEL_249;
        (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v209 + 48))(v209, &v252, v243);
        v208 = (_QWORD *)*v208;
        if (!v208)
          goto LABEL_216;
      }
    }
    goto LABEL_216;
  }
  for (n = (_QWORD *)HasARLighting[16]; n; n = (_QWORD *)*n)
  {
    *(_QWORD *)v243 = &v251;
    *(_QWORD *)&v243[8] = 1;
    v252 = v187;
    v189 = n[6];
    if (!v189)
      goto LABEL_249;
    (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v189 + 48))(v189, &v252, v243);
  }
LABEL_216:
  v210 = *a3;
  *(_QWORD *)v243 = a1 + 16;
  HasTransformConstant = (uint64_t *)gdc::Registry::storage<md::pipelineECS::HasTransformConstantData>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(HasTransformConstant, v210, v243);
  v212 = *a3;
  *(_QWORD *)v243 = a1 + 24;
  HasTransformInstanceDeviceData = (uint64_t *)gdc::Registry::storage<md::pipelineECS::HasTransformInstanceDeviceDataFeature>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(HasTransformInstanceDeviceData, v212, v243);
  v214 = *a3;
  v215 = a1 + 8;
  v216 = (uint64_t *)gdc::Registry::storage<md::pipelineECS::SupportsEnvironmentTexture>(a2);
  v251 = v214;
  v217 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v216 + 4, (uint64_t)&v251);
  if ((v218 & 1) != 0)
  {
    v224 = (char *)v216[11];
    v223 = v216[12];
    if ((unint64_t)v224 < v223)
    {
      *(_QWORD *)v224 = v215;
      v225 = v224 + 8;
LABEL_244:
      v216[11] = (uint64_t)v225;
      v220 = v216[31];
LABEL_245:
      v241 = (_QWORD *)v216[22];
      if (v241)
      {
        while (1)
        {
          *(_QWORD *)v243 = &v251;
          *(_QWORD *)&v243[8] = 1;
          v252 = v220;
          v242 = v241[6];
          if (!v242)
            break;
          (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v242 + 48))(v242, &v252, v243);
          v241 = (_QWORD *)*v241;
          if (!v241)
            return;
        }
        goto LABEL_249;
      }
      return;
    }
    v226 = (char *)v216[10];
    v227 = (v224 - v226) >> 3;
    v228 = v227 + 1;
    if ((unint64_t)(v227 + 1) >> 61)
      goto LABEL_250;
    v229 = v223 - (_QWORD)v226;
    if (v229 >> 2 > v228)
      v228 = v229 >> 2;
    if ((unint64_t)v229 >= 0x7FFFFFFFFFFFFFF8)
      v230 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v230 = v228;
    if (!v230)
    {
      v231 = 0;
      goto LABEL_234;
    }
    if (!(v230 >> 61))
    {
      v231 = (char *)operator new(8 * v230);
LABEL_234:
      v232 = &v231[8 * v227];
      v233 = &v231[8 * v230];
      *(_QWORD *)v232 = v215;
      v225 = v232 + 8;
      if (v224 != v226)
      {
        v234 = v224 - v226 - 8;
        if (v234 < 0x58)
          goto LABEL_259;
        if ((unint64_t)(v226 - v231) < 0x20)
          goto LABEL_259;
        v235 = (v234 >> 3) + 1;
        v236 = &v231[8 * v227 - 16];
        v237 = (__int128 *)(v224 - 16);
        v238 = v235 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v239 = *v237;
          *((_OWORD *)v236 - 1) = *(v237 - 1);
          *(_OWORD *)v236 = v239;
          v236 -= 32;
          v237 -= 2;
          v238 -= 4;
        }
        while (v238);
        v232 -= 8 * (v235 & 0x3FFFFFFFFFFFFFFCLL);
        v224 -= 8 * (v235 & 0x3FFFFFFFFFFFFFFCLL);
        if (v235 != (v235 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_259:
          do
          {
            v240 = *((_QWORD *)v224 - 1);
            v224 -= 8;
            *((_QWORD *)v232 - 1) = v240;
            v232 -= 8;
          }
          while (v224 != v226);
        }
        v224 = (char *)v216[10];
      }
      v216[10] = (uint64_t)v232;
      v216[11] = (uint64_t)v225;
      v216[12] = (uint64_t)v233;
      if (v224)
        operator delete(v224);
      goto LABEL_244;
    }
LABEL_251:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v219 = (_QWORD *)((char *)v217 + v216[10] - v216[7]);
  *v219 = v215;
  v220 = v216[31];
  if (v219 == (_QWORD *)v216[11])
    goto LABEL_245;
  v221 = (_QWORD *)v216[16];
  if (v221)
  {
    while (1)
    {
      *(_QWORD *)v243 = &v251;
      *(_QWORD *)&v243[8] = 1;
      v252 = v220;
      v222 = v221[6];
      if (!v222)
        break;
      (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v222 + 48))(v222, &v252, v243);
      v221 = (_QWORD *)*v221;
      if (!v221)
        return;
    }
    goto LABEL_249;
  }
}

void sub_19FD89D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::StandardPipelineProxy::initUVMappingBuffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t shared_owners;
  unint64_t shared_weak_owners;
  unint64_t v14;

  v2 = *a2;
  if (!*(_QWORD *)(*(_QWORD *)(*a2 + 64) + 48))
  {
    v3 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v3->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    v3->__shared_weak_owners_ = 0;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2668;
    v5 = ggl::BufferData::BufferData((uint64_t)&v3[1], qword_1EE5613B8, 2, 1, 6, 1);
    v3[9].__shared_owners_ = (uint64_t)ggl::ARMesh::UVMapping::reflection(void)::reflection;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B99F0;
    v6 = *(_QWORD *)(v2 + 64);
    *(_QWORD *)(v6 + 48) = v5;
    *(_QWORD *)(v6 + 56) = 0;
    v7 = *(_QWORD *)(v2 + 160);
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(std::__shared_weak_count **)(v7 + 56);
    *(_QWORD *)(v7 + 48) = v5;
    *(_QWORD *)(v7 + 56) = v3;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    shared_owners = v3[1].__shared_owners_;
    shared_weak_owners = v3[3].__shared_weak_owners_;
    *(_OWORD *)&v3[4].~__shared_weak_count = xmmword_19FFB3480;
    if (shared_weak_owners > shared_owners)
      shared_owners = shared_weak_owners;
    v3[3].__shared_owners_ = 0;
    v3[3].__shared_weak_owners_ = shared_owners;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void md::StandardPipelineProxy::setUVMapping(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a2 + 64) + 48);
  v4 = v3[1];
  v5 = v3[8];
  *(_OWORD *)v3[9] = *a3;
  if (v5 > v4)
    v4 = v5;
  v3[7] = 0;
  v3[8] = v4;
}

void md::StandardPipelineProxy::initARLightingSetup(float a1, float a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float *v18;
  unint64_t v19;

  v6 = *a4;
  v7 = *(_QWORD **)(*(_QWORD *)(*a4 + 64) + 80);
  if (!v7)
  {
    v8 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v8->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E25F8;
    v7 = &v8[1].__vftable;
    ggl::BufferData::BufferData((uint64_t)&v8[1], qword_1EE561458, 2, 1, 6, 1);
    v8[9].__shared_owners_ = (uint64_t)ggl::ARMesh::ARLightingSetup::reflection(void)::reflection;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B99B0;
    v10 = *(_QWORD *)(v6 + 64);
    *(_QWORD *)(v10 + 80) = v8 + 1;
    *(_QWORD *)(v10 + 88) = 0;
    v11 = *(_QWORD *)(v6 + 160);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = *(std::__shared_weak_count **)(v11 + 88);
    *(_QWORD *)(v11 + 80) = v7;
    *(_QWORD *)(v11 + 88) = v8;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v17 = v7[1];
  v19 = v7[8];
  v18 = (float *)v7[9];
  *v18 = a2;
  v18[1] = a1;
  if (v19 > v17)
    v17 = v19;
  v7[7] = 0;
  v7[8] = v17;
}

void md::StandardPipelineProxy::initUVScaleBuffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t shared_owners;
  unint64_t shared_weak_owners;
  unint64_t v19;

  v2 = *a2;
  if (!*(_QWORD *)(*(_QWORD *)(*a2 + 64) + 64))
  {
    v3 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v3->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    v3->__shared_weak_owners_ = 0;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2630;
    v5 = ggl::BufferData::BufferData((uint64_t)&v3[1], qword_1EE5613F8, 2, 1, 6, 1);
    v3[9].__shared_owners_ = (uint64_t)ggl::ARMesh::UVScale::reflection(void)::reflection;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B99D0;
    v6 = *(_QWORD *)(v2 + 64);
    *(_QWORD *)(v6 + 64) = v5;
    *(_QWORD *)(v6 + 72) = 0;
    v7 = *(_QWORD *)(v2 + 160);
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(std::__shared_weak_count **)(v7 + 72);
    *(_QWORD *)(v7 + 64) = v5;
    *(_QWORD *)(v7 + 72) = v3;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    shared_owners = v3[1].__shared_owners_;
    __asm { FMOV            V0.2S, #1.0 }
    shared_weak_owners = v3[3].__shared_weak_owners_;
    v3[4].~__shared_weak_count = _D0;
    if (shared_weak_owners > shared_owners)
      shared_owners = shared_weak_owners;
    v3[3].__shared_owners_ = 0;
    v3[3].__shared_weak_owners_ = shared_owners;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void md::StandardPipelineProxy::setUVScale(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _QWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a2 + 64) + 64);
  v5 = v3[8];
  v4 = (_DWORD *)v3[9];
  *v4 = *a3;
  v6 = v3[1];
  v4[1] = a3[1];
  if (v5 <= v6)
    v7 = v6;
  else
    v7 = v5;
  v3[7] = 0;
  v3[8] = v7;
}

void md::StandardPipelineProxy::setEnvironmentTexture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 96) + 8) = a3;
}

void md::StandardPipelineProxy::setTransformConstant(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 64);
  v5 = *a3;
  v6 = a3[1];
  *(_QWORD *)(v4 + 16) = *a3;
  *(_QWORD *)(v4 + 24) = 0;
  v7 = *(_QWORD *)(v3 + 160);
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(std::__shared_weak_count **)(v7 + 24);
  *(_QWORD *)(v7 + 16) = v5;
  *(_QWORD *)(v7 + 24) = v6;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void md::StandardPipelineProxy::setTransformInstanceDeviceData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v3 = *a2;
  v4 = *(uint64_t **)(a3 + 32);
  v5 = *(_QWORD **)(*a2 + 32);
  v6 = *v4;
  v7 = v4[1];
  *v5 = v6;
  v5[1] = 0;
  v8 = *(_QWORD **)(v3 + 128);
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)v8[1];
  *v8 = v6;
  v8[1] = v7;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void md::StandardPipelineProxy::setARLightingSetup(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 64) + 80);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 64);
  **(int32x2_t **)(v3 + 72) = vrev64_s32(*a3);
  if (v5 > v4)
    v4 = v5;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = v4;
}

void `non-virtual thunk to'md::StandardPipelineProxy::setEnvironmentTexture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 96) + 8) = a3;
}

void `non-virtual thunk to'md::StandardPipelineProxy::setTransformConstant(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 64);
  v5 = *a3;
  v6 = a3[1];
  *(_QWORD *)(v4 + 16) = *a3;
  *(_QWORD *)(v4 + 24) = 0;
  v7 = *(_QWORD *)(v3 + 160);
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(std::__shared_weak_count **)(v7 + 24);
  *(_QWORD *)(v7 + 16) = v5;
  *(_QWORD *)(v7 + 24) = v6;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void `non-virtual thunk to'md::StandardPipelineProxy::setTransformInstanceDeviceData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v3 = *a2;
  v4 = *(uint64_t **)(a3 + 32);
  v5 = *(_QWORD **)(*a2 + 32);
  v6 = *v4;
  v7 = v4[1];
  *v5 = v6;
  v5[1] = 0;
  v8 = *(_QWORD **)(v3 + 128);
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)v8[1];
  *v8 = v6;
  v8[1] = v7;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void `non-virtual thunk to'md::StandardPipelineProxy::update(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  md::StandardPipelineProxy::update(a1 - 48, a2, a3);
}

uint64_t ggl::ConstantDataTyped<ggl::ARMesh::UVScale>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::ARMesh::UVScale>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::UVScale>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::UVScale>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::UVScale>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::ARMesh::ARLightingSetup>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::ARMesh::ARLightingSetup>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::ARLightingSetup>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E25F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::ARLightingSetup>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E25F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::ARLightingSetup>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::ARMesh::UVMapping>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::ARMesh::UVMapping>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::UVMapping>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2668;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::UVMapping>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2668;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::UVMapping>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *md::DaVinciRenderStateCache::DaVinciRenderStateCache(_QWORD *this)
{
  unsigned __int8 v1;
  int v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;
  _QWORD *v7;

  *this = 0;
  this[1] = 0;
  this[2] = 0;
  if ((v1 & 1) == 0)
  {
    v7 = this;
    this = v7;
    if (v2)
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
      this = v7;
    }
  }
  this[3] = mdm::Allocator::instance(void)::alloc;
  return this;
}

void sub_19FD8AAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)VKManifestTileGroupObserverProxy;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FD8AC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_19FD8ADA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_19FD8AEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_atomic_property__6(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 24);
  if (result)
  {
    if (result == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 24) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t __copy_helper_atomic_property__4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 24);
  if (result)
  {
    if (result == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 24) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t __copy_helper_atomic_property_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 24);
  if (result)
  {
    if (result == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 24) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return result;
}

void karo::graphics::ViewSwitchNode::~ViewSwitchNode(karo::graphics::ViewSwitchNode *this)
{
  void *v2;

  *(_QWORD *)this = off_1E42C3750;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;

  *(_QWORD *)this = off_1E42C3750;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::graphics::ViewSwitchNode::computeView(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 64);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, a1);
  return result;
}

uint64_t karo::graphics::ViewSwitchNode::setCurrentViewNode(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;

  v2 = a1[5];
  v3 = a1[6] - v2;
  if (!v3)
    return 0;
  v4 = 0;
  v5 = v3 >> 3;
  v6 = 1;
  while (*(_QWORD *)(v2 + 8 * v4) != a2)
  {
    v4 = v6++;
    if (v5 <= v4)
      return 0;
  }
  a1[8] = a2;
  return 1;
}

uint64_t karo::graphics::ViewSwitchNode::setCurrentViewNode(_QWORD *a1, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  const void **v15;
  unsigned __int8 *v16;

  v3 = a1[5];
  v2 = a1[6];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    v6 = 0;
    v7 = 0;
    v8 = v4 >> 3;
    v9 = *((_BYTE *)a2 + 23);
    if (v9 >= 0)
      v10 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    else
      v10 = a2[1];
    if (v9 >= 0)
      v11 = (unsigned __int8 *)a2;
    else
      v11 = *a2;
    do
    {
      v12 = *(_QWORD *)(v3 + 8 * v6);
      v13 = *(unsigned __int8 *)(v12 + 31);
      if ((v13 & 0x80u) == 0)
        v14 = (unsigned __int8 *)*(unsigned __int8 *)(v12 + 31);
      else
        v14 = *(unsigned __int8 **)(v12 + 16);
      if (v14 == v10)
      {
        v15 = (const void **)(v12 + 8);
        if ((v13 & 0x80) != 0)
        {
          if (!memcmp(*v15, v11, *(_QWORD *)(v12 + 16)))
            goto LABEL_19;
        }
        else
        {
          if (!*(_BYTE *)(v12 + 31))
          {
LABEL_19:
            a1[8] = v12;
            return 1;
          }
          v16 = v11;
          while (*(unsigned __int8 *)v15 == *v16)
          {
            v15 = (const void **)((char *)v15 + 1);
            ++v16;
            if (!--v13)
              goto LABEL_19;
          }
        }
      }
      v6 = ++v7;
    }
    while (v8 > v7);
  }
  return 0;
}

void md::PointLabelIcon::~PointLabelIcon(md::PointLabelIcon *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E428FBF0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::LabelIcon::~LabelIcon(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E428FBF0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::LabelIcon::~LabelIcon(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::PointLabelIcon::renderIcon(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  VKImage *v8;
  CFTypeRef v9;
  double v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  VKImage *v14;
  float v15;
  uint64_t v16;
  VKImage *v17;
  float v18;
  float *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t (**v22)();
  CFTypeRef cf;
  _QWORD v24[3];

  v8 = [VKImage alloc];
  grl::IconImage::image(*(grl::IconImage **)(a1 + 152), &v22);
  v9 = cf;
  v10 = *(float *)(*(_QWORD *)(a1 + 32) + 56);
  v11 = (std::__shared_weak_count *)a4[1];
  v20 = *a4;
  v21 = v11;
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  v14 = -[VKImage initWithCGImage:scale:resourceStore:](v8, "initWithCGImage:scale:resourceStore:", v9, &v20, v10);
  v24[0] = &off_1E42B5430;
  v24[1] = v14;
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  v22 = &off_1E42B4870;
  if (cf)
    CFRelease(cf);
  v15 = *(float *)grl::IconMetrics::anchor((grl::IconMetrics *)(*(_QWORD *)(a1 + 152) + 24));
  v16 = grl::IconMetrics::anchor((grl::IconMetrics *)(*(_QWORD *)(a1 + 152) + 24));
  -[VKImage setAnchorPoint:](v14, "setAnchorPoint:", v15, *(float *)(v16 + 4), v20);
  v17 = v14;
  v18 = *(float *)grl::IconMetrics::labelingPoint((grl::IconMetrics *)(*(_QWORD *)(a1 + 152) + 24));
  -[VKImage setLabelingPoint:](v17, "setLabelingPoint:", v18, *(float *)(grl::IconMetrics::labelingPoint((grl::IconMetrics *)(*(_QWORD *)(a1 + 152) + 24)) + 4));

  if (*(_BYTE *)(a1 + 168))
  {
    v19 = (float *)grl::IconMetrics::collisionRect((grl::IconMetrics *)(*(_QWORD *)(a1 + 152) + 24));
    -[VKImage setCollisionRect:](v17, "setCollisionRect:", *v19, v19[1], (float)(v19[2] - *v19), (float)(v19[3] - v19[1]));
  }
  md::LabelIcon::setImage(a1, (uint64_t)v24, a2, a3);

}

void sub_19FD8B5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, CFTypeRef cf)
{
  void *v12;

  _Unwind_Resume(a1);
}

void md::TextureBackedLabelIcon::~TextureBackedLabelIcon(md::TextureBackedLabelIcon *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429DE78;
  atomic_store(0, (unsigned __int8 *)this + 144);
  *(_QWORD *)this = &off_1E428FBF0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::LabelIcon::~LabelIcon(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429DE78;
  atomic_store(0, (unsigned __int8 *)this + 144);
  *(_QWORD *)this = &off_1E428FBF0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::LabelIcon::~LabelIcon(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::TextureBackedLabelIcon::renderIcon(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  VKImage *v7;
  CFTypeRef v8;
  double v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  VKImage *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t (**v16)();
  CFTypeRef cf;
  _QWORD v18[3];

  v7 = [VKImage alloc];
  grl::IconImage::image(*(grl::IconImage **)(a1 + 152), &v16);
  v8 = cf;
  v9 = *(float *)(*(_QWORD *)(a1 + 32) + 56);
  v10 = (std::__shared_weak_count *)a4[1];
  v14 = *a4;
  v15 = v10;
  if (v10)
  {
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
  }
  v13 = -[VKImage initWithCGImage:scale:usedAsTextureAndImage:resourceStore:](v7, "initWithCGImage:scale:usedAsTextureAndImage:resourceStore:", v8, 1, &v14, v9);
  v18[0] = &off_1E42B5430;
  v18[1] = v13;
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  v16 = &off_1E42B4870;
  if (cf)
    CFRelease(cf);
  md::LabelIcon::setImage(a1, (uint64_t)v18, a2, 0);

}

void sub_19FD8B7E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD8B7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, CFTypeRef cf)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  if (!cf)
    _Unwind_Resume(exception_object);
  CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void md::RoadSignLabelIcon::~RoadSignLabelIcon(md::RoadSignLabelIcon *this)
{
  *(_QWORD *)this = &off_1E4293418;
  *((_QWORD *)this + 19) = &off_1E42B4D30;

  md::LabelIcon::~LabelIcon(this);
}

{
  *(_QWORD *)this = &off_1E4293418;
  *((_QWORD *)this + 19) = &off_1E42B4D30;

  md::LabelIcon::~LabelIcon(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::RoadSignLabelIcon::renderIcon(uint64_t a1, int a2, uint64_t a3)
{
  id v6;
  id v7;
  _QWORD v8[3];

  v6 = *(id *)(a1 + 160);
  objc_msgSend(v6, "image");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v8[0] = &off_1E42B5430;
  v8[1] = v7;

  md::LabelIcon::setImage(a1, (uint64_t)v8, a2, a3);
}

void sub_19FD8B934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

uint64_t md::RoadSignLabelIcon::isIconRTL(id *this)
{
  id v1;
  uint64_t v2;

  v1 = this[20];
  v2 = *(unsigned __int8 *)(objc_msgSend(v1, "textMetrics") + 137);

  return v2;
}

void sub_19FD8B984(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::ExternalImageLabelIcon::~ExternalImageLabelIcon(md::ExternalImageLabelIcon *this)
{
  *(_QWORD *)this = &off_1E426F420;
  *((_QWORD *)this + 19) = &off_1E42B5430;

  md::LabelIcon::~LabelIcon(this);
}

{
  *(_QWORD *)this = &off_1E426F420;
  *((_QWORD *)this + 19) = &off_1E42B5430;

  md::LabelIcon::~LabelIcon(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::ExternalImageLabelIcon::renderIcon(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 176))
    v3 = a3;
  else
    v3 = 0;
  md::LabelIcon::setImage(a1, a1 + 152, a2, v3);
}

void md::ShieldLabelIcon::~ShieldLabelIcon(md::ShieldLabelIcon *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E4290C80;
  if (*((char *)this + 191) < 0)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 24) + 40))(*((_QWORD *)this + 24), *((_QWORD *)this + 21), *((_QWORD *)this + 23) & 0x7FFFFFFFFFFFFFFFLL);
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v2)
      goto LABEL_9;
  }
  else
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v2)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_9:
  md::LabelIcon::~LabelIcon(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E4290C80;
  if (*((char *)this + 191) < 0)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 24) + 40))(*((_QWORD *)this + 24), *((_QWORD *)this + 21), *((_QWORD *)this + 23) & 0x7FFFFFFFFFFFFFFFLL);
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v2)
      goto LABEL_9;
  }
  else
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v2)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_9:
  md::LabelIcon::~LabelIcon(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::ShieldLabelIcon::renderIcon(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  VKImage *v8;
  CFTypeRef v9;
  double v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  VKImage *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t (**v17)();
  CFTypeRef cf;
  _QWORD v19[3];

  v8 = [VKImage alloc];
  grl::IconImage::image(*(grl::IconImage **)(a1 + 152), &v17);
  v9 = cf;
  v10 = *(float *)(*(_QWORD *)(a1 + 32) + 56);
  v11 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v11;
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  v14 = -[VKImage initWithCGImage:scale:resourceStore:](v8, "initWithCGImage:scale:resourceStore:", v9, &v15, v10);
  v19[0] = &off_1E42B5430;
  v19[1] = v14;
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  v17 = &off_1E42B4870;
  if (cf)
    CFRelease(cf);
  md::LabelIcon::setImage(a1, (uint64_t)v19, a2, a3);

}

void sub_19FD8BC5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD8BC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, CFTypeRef cf)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  if (!cf)
    _Unwind_Resume(exception_object);
  CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t md::ShieldLabelIcon::text(md::ShieldLabelIcon *this)
{
  uint64_t result;

  result = (uint64_t)this + 168;
  if (*((char *)this + 191) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t md::LabelIcon::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  id v4;
  _BOOL8 v5;
  unsigned __int8 v6;
  id v7;

  if (a1 == a2)
    return 1;
  v3 = atomic_load((unsigned __int8 *)(a1 + 143));
  if ((v3 & 1) != 0)
    v4 = *(id *)(a1 + 16);
  else
    v4 = 0;
  v6 = atomic_load((unsigned __int8 *)(a2 + 143));
  if ((v6 & 1) != 0)
    v7 = *(id *)(a2 + 16);
  else
    v7 = 0;
  v5 = v4 == v7;

  return v5;
}

md::RoadSignLabelIcon *md::RoadSignLabelIcon::RoadSignLabelIcon(md::RoadSignLabelIcon *this, VKRoadSignArtwork *a2)
{
  VKRoadSignArtwork *v3;
  VKRoadSignArtwork *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _QWORD *v13;
  __int128 *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  char *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  v3 = a2;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_OWORD *)this + 3) = xmmword_19FFB2E30;
  *((_OWORD *)this + 4) = xmmword_19FFB2E30;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 1065353216;
  *((_BYTE *)this + 144) = 0;
  *((_QWORD *)this + 1) = &off_1E42B5430;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E4293418;
  v4 = v3;
  *((_QWORD *)this + 19) = &off_1E42B4D30;
  *((_QWORD *)this + 20) = v4;
  -[VKRoadSignArtwork localRenderBounds](v4, "localRenderBounds");
  *((_DWORD *)this + 12) = v5;
  *((_DWORD *)this + 13) = v6;
  *((_DWORD *)this + 14) = v7;
  *((_DWORD *)this + 15) = v8;
  -[VKRoadSignArtwork localCollisionBounds](v4, "localCollisionBounds");
  *((_DWORD *)this + 16) = v9;
  *((_DWORD *)this + 17) = v10;
  *((_DWORD *)this + 18) = v11;
  *((_DWORD *)this + 19) = v12;
  atomic_store(1u, (unsigned __int8 *)this + 144);
  if (*(_QWORD *)-[VKRoadSignArtwork glyph](v4, "glyph"))
  {
    v13 = -[VKRoadSignArtwork glyph](v4, "glyph");
    v14 = (__int128 *)v13;
    v16 = (char *)*((_QWORD *)this + 15);
    v15 = *((_QWORD *)this + 16);
    if ((unint64_t)v16 >= v15)
    {
      v21 = (char *)*((_QWORD *)this + 14);
      v22 = (v16 - v21) >> 4;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 60)
        abort();
      v24 = v15 - (_QWORD)v21;
      if (v24 >> 3 > v23)
        v23 = v24 >> 3;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
        v25 = 0xFFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v26 = (char *)operator new(16 * v25);
      v27 = &v26[16 * v22];
      v28 = *v14;
      *(_OWORD *)v27 = *v14;
      if (*((_QWORD *)&v28 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        v21 = (char *)*((_QWORD *)this + 14);
        v16 = (char *)*((_QWORD *)this + 15);
      }
      v31 = &v26[16 * v25];
      v20 = v27 + 16;
      if (v16 == v21)
      {
        *((_QWORD *)this + 14) = v27;
        *((_QWORD *)this + 15) = v20;
        *((_QWORD *)this + 16) = v31;
      }
      else
      {
        do
        {
          v32 = *((_OWORD *)v16 - 1);
          v16 -= 16;
          *((_OWORD *)v27 - 1) = v32;
          v27 -= 16;
          *(_QWORD *)v16 = 0;
          *((_QWORD *)v16 + 1) = 0;
        }
        while (v16 != v21);
        v21 = (char *)*((_QWORD *)this + 14);
        v33 = (char *)*((_QWORD *)this + 15);
        *((_QWORD *)this + 14) = v27;
        *((_QWORD *)this + 15) = v20;
        *((_QWORD *)this + 16) = v31;
        while (v33 != v21)
        {
          v34 = (std::__shared_weak_count *)*((_QWORD *)v33 - 1);
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldaxr(p_shared_owners);
            while (__stlxr(v36 - 1, p_shared_owners));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          v33 -= 16;
        }
      }
      if (v21)
        operator delete(v21);
    }
    else
    {
      v17 = v13[1];
      *(_QWORD *)v16 = *v13;
      *((_QWORD *)v16 + 1) = v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = v16 + 16;
    }
    *((_QWORD *)this + 15) = v20;
  }

  return this;
}

void sub_19FD8BF5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 152) = v3;

  md::LabelIcon::~LabelIcon((md::LabelIcon *)v1);
  _Unwind_Resume(a1);
}

void **geo::linear_map<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>,std::equal_to<ggl::Landmark::LandmarkMesh *>,std::allocator<std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>>,std::vector<std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>>>::~linear_map(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *std::vector<std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>>::__init_with_size[abi:nn180100]<std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>*,std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  _QWORD *v17;

  if (a4)
  {
    if (a4 >> 59)
      abort();
    v6 = result;
    v7 = 4 * a4;
    result = operator new(32 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    if (a2 != a3)
    {
      v17 = v6;
      v9 = 0;
      do
      {
        v11 = a2 + v9;
        v12 = &v8[v9 / 8];
        v13 = *(_BYTE **)(a2 + v9 + 8);
        *v12 = *(_QWORD *)(a2 + v9);
        v8[v9 / 8 + 1] = 0;
        v12[2] = 0;
        v12[3] = 0;
        v14 = *(_BYTE **)(a2 + v9 + 16);
        v15 = v14 - v13;
        if (v14 != v13)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v15 >> 3) >= 0xAAAAAAAAAAAAAABLL)
            abort();
          v16 = (char *)operator new(v15);
          v8[v9 / 8 + 1] = v16;
          v10 = &v16[8 * (v15 >> 3)];
          v12[2] = v16;
          v12[3] = v10;
          result = memcpy(v16, v13, v15);
          v12[2] = v10;
        }
        v9 += 32;
      }
      while (v11 + 32 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
      v6 = v17;
    }
    v6[1] = v8;
  }
  return result;
}

void sub_19FD8C120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  *(_QWORD *)(a10 + 8) = v10;
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::pair<std::shared_ptr<ggl::Texture2D>,geo::linear_map<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>,std::equal_to<ggl::Landmark::LandmarkMesh *>,std::allocator<std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>>,std::vector<std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    v4 = *(_QWORD *)(i - 24);
    if (v4)
    {
      v5 = *(_QWORD *)(i - 16);
      v6 = *(void **)(i - 24);
      if (v5 != v4)
      {
        do
        {
          v7 = *(void **)(v5 - 24);
          if (v7)
          {
            *(_QWORD *)(v5 - 16) = v7;
            operator delete(v7);
          }
          v5 -= 32;
        }
        while (v5 != v4);
        v6 = *(void **)(i - 24);
      }
      *(_QWORD *)(i - 16) = v4;
      operator delete(v6);
    }
    v8 = *(std::__shared_weak_count **)(i - 32);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void altitude::util::getTileIndexFromUrlString(void **a1, uint64_t a2)
{
  void **v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void **v7;
  char *v8;
  void **v10;
  char *v11;
  char v12;
  int v13;
  uint64_t v14;
  void *__p[2];
  char v16;
  void *__dst[2];
  unsigned __int8 v18;

  v3 = __dst;
  karo::util::Path::getNonDirectory(__dst, a1);
  if ((v18 & 0x80u) == 0)
    v4 = v18;
  else
    v4 = (uint64_t)__dst[1];
  if ((v18 & 0x80u) != 0)
    v3 = (void **)__dst[0];
  v5 = (char *)v3 + v4;
  if (v4 > 4)
  {
    v6 = v4;
    v7 = v3;
    do
    {
      v8 = (char *)memchr(v7, 116, v6 - 4);
      if (!v8)
        break;
      if (*(_DWORD *)v8 == 1701603700 && v8[4] == 63)
      {
        if (v8 == v5 || v8 - (char *)v3 == -1)
          break;
        v16 = 3;
        LODWORD(__p[0]) = 4028966;
        if (v16 < 0)
          operator delete(__p[0]);
        v16 = 3;
        LODWORD(__p[0]) = 4028454;
        if (v16 < 0)
          operator delete(__p[0]);
        v16 = 3;
        LODWORD(__p[0]) = 4028710;
        if (v16 < 0)
          operator delete(__p[0]);
        goto LABEL_31;
      }
      v7 = (void **)(v8 + 1);
      v6 = v5 - (char *)v7;
    }
    while (v5 - (char *)v7 > 4);
  }
  if (v4 >= 4)
  {
    v10 = v3;
    do
    {
      v11 = (char *)memchr(v10, 109, v4 - 3);
      if (!v11)
        break;
      if (*(_DWORD *)v11 == 1601200493)
      {
        if (v11 != v5 && v11 - (char *)v3 != -1)
        {
          LODWORD(__p[0]) = 0;
          v14 = 0;
          sscanf((const char *)v3, "map_%d_%d_%d", __p, (char *)&v14 + 4, &v14);
          v12 = (char)__p[0];
          *(_BYTE *)(a2 + 1) = __p[0];
          v13 = v14;
          *(_DWORD *)(a2 + 4) = ~(-1 << v12) - HIDWORD(v14);
          *(_DWORD *)(a2 + 8) = v13;
        }
        break;
      }
      v10 = (void **)(v11 + 1);
      v4 = v5 - (char *)v10;
    }
    while (v5 - (char *)v10 >= 4);
  }
LABEL_31:
  if ((char)v18 < 0)
    operator delete(__dst[0]);
}

uint64_t `anonymous namespace'::getValueFromString(char *a1, char *a2)
{
  uint64_t *v2;
  int v3;
  int v4;
  char *v5;
  int64_t v6;
  char *v7;
  int64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  NSObject *v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  int v21;
  int64_t v22;
  void *v23;
  int64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  size_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v37;
  unint64_t v38;
  _BYTE buf[24];
  uint64_t v40;

  v2 = (uint64_t *)a1;
  v40 = *MEMORY[0x1E0C80C00];
  v3 = a1[23];
  v4 = a2[23];
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(char **)a2;
  if (v4 >= 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = *(char **)a1;
  v8 = *((_QWORD *)a1 + 1);
  v37 = *(char **)a1;
  v38 = v8;
  if (v3 >= 0)
    v9 = a1;
  else
    v9 = v7;
  v10 = v3;
  if (v3 >= 0)
    v11 = v3;
  else
    v11 = v8;
  if (!v6)
  {
    v17 = 0;
    goto LABEL_27;
  }
  if (v11 >= v6)
  {
    v20 = &v9[v11];
    v21 = *v5;
    v22 = v11;
    v23 = v9;
    while (1)
    {
      v24 = v22 - v6;
      if (v24 == -1)
        goto LABEL_15;
      v25 = (char *)memchr(v23, v21, v24 + 1);
      if (!v25)
        goto LABEL_15;
      v26 = v25;
      if (!memcmp(v25, v5, v6))
        break;
      v23 = v26 + 1;
      v22 = v20 - (v26 + 1);
      if (v22 < v6)
        goto LABEL_15;
    }
    if (v26 != v20)
    {
      v17 = v26 - v9;
      if (v26 - v9 != -1)
      {
LABEL_27:
        v18 = v17 + v6;
        if (v11 >= (unint64_t)(v17 + v6))
        {
          v27 = &v9[v18];
          v28 = &v9[v11];
          v29 = v11 - v18;
          if ((uint64_t)(v11 - v18) >= 1)
          {
            do
            {
              v30 = (char *)memchr(v27, 38, v29);
              if (!v30)
                break;
              if (*v30 == 38)
                goto LABEL_42;
              v27 = v30 + 1;
              v29 = v28 - v27;
            }
            while (v28 - v27 > 0);
          }
          v30 = &v9[v11];
LABEL_42:
          v19 = v30 - v9;
          if (v30 == v28)
            v19 = -1;
          if ((v10 & 0x80) == 0)
          {
LABEL_29:
            if (v18 > v10)
              goto LABEL_65;
LABEL_47:
            if (v10 - v18 >= v19)
              v31 = v19;
            else
              v31 = v10 - v18;
            if (v31 >= 0x7FFFFFFFFFFFFFF8)
LABEL_65:
              abort();
            if (v31 >= 0x17)
            {
              v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v31 | 7) != 0x17)
                v33 = v31 | 7;
              v34 = v33 + 1;
              v32 = operator new(v33 + 1);
              *(_QWORD *)&buf[8] = v31;
              *(_QWORD *)&buf[16] = v34 | 0x8000000000000000;
              *(_QWORD *)buf = v32;
            }
            else
            {
              buf[23] = v31;
              v32 = buf;
              if (!v31)
              {
LABEL_58:
                v32[v31] = 0;
                if ((buf[23] & 0x80000000) == 0)
                  return atoi(buf);
                v35 = *(void **)buf;
                v16 = atoi(*(const char **)buf);
                operator delete(v35);
                return v16;
              }
            }
            memmove(v32, (char *)v2 + v18, v31);
            goto LABEL_58;
          }
        }
        else
        {
          v19 = -1;
          if ((v10 & 0x80) == 0)
            goto LABEL_29;
        }
        v10 = v38;
        if (v38 < v18)
          goto LABEL_65;
        v2 = (uint64_t *)v37;
        goto LABEL_47;
      }
    }
  }
LABEL_15:
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v13 = GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
  {
    if (a2[23] >= 0)
      v14 = a2;
    else
      v14 = *(char **)a2;
    if (*((char *)v2 + 23) >= 0)
      v15 = v2;
    else
      v15 = (uint64_t *)*v2;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v14;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v15;
    _os_log_impl(&dword_19F029000, v13, OS_LOG_TYPE_ERROR, "Failed to find key (%s) in string: %s", buf, 0x16u);
  }
  return 0;
}

uint64_t md::LabelAnimator::addRotateAnimation(uint64_t result, uint64_t a2, uint64_t a3, float *a4, float a5)
{
  _QWORD *v9;
  float v10;
  uint64_t v11;
  unsigned __int8 v12;
  float v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  geo::read_write_lock *v20;
  const char *v21;
  malloc_zone_t *zone;
  uint64_t v23;
  uint64_t v24;

  if (*(_BYTE *)(a3 + 52))
  {
    v9 = (_QWORD *)result;
    v10 = *(float *)(a3 + 56);
    v11 = operator new();
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)v11 = 0;
    if ((v12 & 1) == 0)
    {
      v23 = v11;
      v11 = v23;
      if (v18)
      {
        v19 = operator new();
        *(_QWORD *)(v19 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v19 + 24) = "VectorKitLabels";
        *(_OWORD *)(v19 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v19 = &off_1E42B5668;
        *(_QWORD *)(v19 + 8) = "VectorKitLabels";
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        *(_OWORD *)(v19 + 136) = 0u;
        *(_OWORD *)(v19 + 152) = 0u;
        *(_OWORD *)(v19 + 168) = 0u;
        *(_OWORD *)(v19 + 184) = 0u;
        *(_OWORD *)(v19 + 200) = 0u;
        *(_OWORD *)(v19 + 216) = 0u;
        *(_OWORD *)(v19 + 232) = 0u;
        *(_QWORD *)(v19 + 248) = 0;
        *(_OWORD *)(v19 + 56) = 0u;
        v20 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v19 + 56), 0);
        if ((_DWORD)v20)
          geo::read_write_lock::logFailure(v20, (uint64_t)"initialization", v21);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v19 + 48) = zone;
        malloc_set_zone_name(zone, "VectorKitLabels");
        *(_QWORD *)(v19 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v19;
        v11 = v23;
      }
    }
    v13 = fmaxf(v10, 0.0);
    *(_QWORD *)(v11 + 24) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v11 + 32) = 0;
    *(_WORD *)(v11 + 40) = 0;
    v24 = v11;
    v14 = (uint64_t *)v9[8];
    if ((unint64_t)v14 >= v9[9])
    {
      v15 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>((uint64_t)(v9 + 7), &v24);
    }
    else
    {
      if (v14)
        *v14 = v11;
      v15 = v14 + 1;
    }
    v9[8] = v15;
    v16 = *(v15 - 1);
    result = md::LabelAnimationTrack::addItem(v16, *(unsigned __int8 *)(a3 + 52), 1, v13, *(float *)(a3 + 64));
    v17 = v9[3] + 144 * *(unsigned __int8 *)(a2 + 563);
    *(_QWORD *)(v17 + 120) = v16;
    *(_QWORD *)(v17 + 128) = 0;
    *(float *)(v17 + 136) = a5;
    *a4 = *(float *)(a3 + 64) + v13;
  }
  return result;
}

void md::LabelAnimator::createIconRowScaleAnimation(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, float *a5, float a6)
{
  unint64_t v11;
  unint64_t v12;
  float v13;
  float v14;
  _QWORD *v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  float v21;
  float v22;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  float *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 200))(&v49, a2);
  v11 = v50;
  if (v50 != v49)
  {
    v45 = a5;
    v12 = (uint64_t)(v50 - v49) >> 3;
    if (a3 == 1)
      v13 = 1.0;
    else
      v13 = 0.0;
    if (a3 == 1)
      v14 = 0.0;
    else
      v14 = 1.0;
    v15 = (_QWORD *)(v50 - 8);
    if (*(_BYTE *)(a4 + 1))
      v16 = 0;
    else
      v16 = (unint64_t)v15 > v49;
    if (v16)
    {
      v17 = v49 + 8;
      do
      {
        v18 = *(_QWORD *)(v17 - 8);
        *(_QWORD *)(v17 - 8) = *v15;
        *v15-- = v18;
        v19 = v17 >= (unint64_t)v15;
        v17 += 8;
      }
      while (!v19);
    }
    v20 = 0;
    v21 = fmaxf(*(float *)(a4 + 24) + a6, 0.0);
    v47 = (uint64_t)(a1 + 7);
    v48 = a1 + 3;
    v44 = v12 - 1;
    v22 = fmaxf(*(float *)(a4 + 8) + a6, 0.0);
    if (v12 <= 1)
      v12 = 1;
    v46 = v12;
    do
    {
      v26 = *(_QWORD *)(v49 + 8 * v20);
      v27 = operator new();
      *(_QWORD *)v27 = 0;
      *(_QWORD *)(v27 + 8) = 0;
      *(_QWORD *)(v27 + 16) = 0;
      v28 = atomic_load(v23);
      if ((v28 & 1) == 0 && __cxa_guard_acquire((__guard *)v23))
      {
        v42 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v42, "VectorKitLabels", 0x5ED09DD50000000FLL);
        __cxa_guard_release((__guard *)v23);
      }
      *(_QWORD *)(v27 + 24) = mdm::Allocator::instance(void)::alloc;
      *(_QWORD *)(v27 + 32) = 0;
      *(_WORD *)(v27 + 40) = 0;
      v53 = v27;
      v29 = (uint64_t *)a1[8];
      if ((unint64_t)v29 >= a1[9])
      {
        v30 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>(v47, &v53);
      }
      else
      {
        if (v29)
          *v29 = v27;
        v30 = v29 + 1;
      }
      a1[8] = v30;
      v31 = *(v30 - 1);
      md::LabelAnimationTrack::addItem(v31, *(unsigned __int8 *)(a4 + 20), 1, v21 + (float)(*(float *)(a4 + 28) * (float)v20), *(float *)(a4 + 32));
      v32 = operator new();
      *(_QWORD *)v32 = 0;
      *(_QWORD *)(v32 + 8) = 0;
      *(_QWORD *)(v32 + 16) = 0;
      v33 = atomic_load(v23);
      if ((v33 & 1) == 0 && __cxa_guard_acquire((__guard *)v23))
      {
        v43 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v43, "VectorKitLabels", 0x5ED09DD50000000FLL);
        __cxa_guard_release((__guard *)v23);
      }
      *(_QWORD *)(v32 + 24) = mdm::Allocator::instance(void)::alloc;
      *(_QWORD *)(v32 + 32) = 0;
      *(_WORD *)(v32 + 40) = 0;
      v53 = v32;
      v34 = (uint64_t *)a1[8];
      if ((unint64_t)v34 >= a1[9])
      {
        v35 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>(v47, &v53);
      }
      else
      {
        if (v34)
          *v34 = v32;
        v35 = v34 + 1;
      }
      a1[8] = v35;
      v36 = *(v35 - 1);
      md::LabelAnimationTrack::addItem(v36, *(unsigned __int8 *)(a4 + 4), 1, v22 + (float)(*(float *)(a4 + 12) * (float)v20), *(float *)(a4 + 16));
      v37 = v23;
      v38 = a1[3];
      v39 = a1[4];
      if (v39 - v38 == -144)
      {
        while (v39 != v38)
        {
          v41 = *(void **)(v39 - 144);
          v39 -= 144;
          v40 = v41;
          if (v41 != *(void **)(v39 + 16))
            free(v40);
        }
        a1[4] = v38;
      }
      else
      {
        std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append(v48);
        v38 = a1[4];
      }
      v24 = 57 * ((v38 - *v48) >> 4) - 1;
      v25 = *v48 + 144 * (57 * ((v38 - *v48) >> 4) - 1);
      *(_QWORD *)(v25 + 56) = v31;
      *(float *)(v25 + 64) = v14;
      *(float *)(v25 + 68) = v13;
      *(_QWORD *)(v25 + 72) = v36;
      *(float *)(v25 + 80) = v14;
      *(float *)(v25 + 84) = v13;
      *(_BYTE *)(v26 + 563) = v24;
      ++v20;
      v23 = v37;
    }
    while (v20 != v46);
    *v45 = (float)(v21 + (float)(*(float *)(a4 + 28) * (float)v44)) + *(float *)(a4 + 32);
    v11 = v49;
  }
  if (v11)
  {
    v50 = v11;
    (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v52 + 40))(v52, v11, v51 - v11);
  }
}

void sub_19FD8CCE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a17 + 40))(a17, a14, a16 - a14);
  _Unwind_Resume(exception_object);
}

void md::LabelAnimator::createIconRowShiftAnimation(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, float *a5, float a6)
{
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  float v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  float v25;
  float v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  float *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 200))(&v51, a2);
  v11 = v52;
  if (v52 != v51)
  {
    v12 = *(float **)(*(_QWORD *)v51 + 24);
    v13 = v12[20];
    v14 = v12[18];
    v15 = 0.0;
    v16 = 0.0;
    if (v13 >= v14)
    {
      v16 = 0.0;
      if (v12[21] >= v12[19])
        v16 = (float)(v13 - v14) + (float)(v13 - v14);
    }
    v17 = (uint64_t)(v52 - v51) >> 3;
    v47 = a5;
    if (a3 == 1)
    {
      v19 = 0x3F80000000000000;
      v20 = v16;
    }
    else
    {
      if (a3)
      {
        v19 = 1065353216;
        v20 = 0.0;
      }
      else
      {
        v18 = (_QWORD *)(v52 - 8);
        v19 = 1065353216;
        v20 = 0.0;
        if (v52 - 8 > v51)
        {
          v21 = v51 + 8;
          do
          {
            v22 = *(_QWORD *)(v21 - 8);
            *(_QWORD *)(v21 - 8) = *v18;
            *v18-- = v22;
            v23 = v21 >= (unint64_t)v18;
            v21 += 8;
          }
          while (!v23);
        }
      }
      v15 = v16;
    }
    v24 = 0;
    v25 = fmaxf(*(float *)(a4 + 40) + a6, 0.0);
    v49 = (uint64_t)(a1 + 7);
    v50 = a1 + 3;
    v46 = v17 - 1;
    v26 = fmaxf(*(float *)(a4 + 8) + a6, 0.0);
    if (v17 <= 1)
      v17 = 1;
    v48 = v17;
    do
    {
      v29 = *(_QWORD *)(v51 + 8 * v24);
      v30 = operator new();
      *(_QWORD *)v30 = 0;
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v30 + 16) = 0;
      {
        v44 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v44, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      *(_QWORD *)(v30 + 24) = mdm::Allocator::instance(void)::alloc;
      *(_QWORD *)(v30 + 32) = 0;
      *(_WORD *)(v30 + 40) = 0;
      v55 = v30;
      v32 = (uint64_t *)a1[8];
      if ((unint64_t)v32 >= a1[9])
      {
        v33 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>(v49, &v55);
      }
      else
      {
        if (v32)
          *v32 = v30;
        v33 = v32 + 1;
      }
      a1[8] = v33;
      v34 = *(v33 - 1);
      md::LabelAnimationTrack::addItem(v34, *(unsigned __int8 *)(a4 + 36), 1, v25 + (float)(*(float *)(a4 + 44) * (float)v24), *(float *)(a4 + 48));
      v35 = operator new();
      *(_QWORD *)v35 = 0;
      *(_QWORD *)(v35 + 8) = 0;
      *(_QWORD *)(v35 + 16) = 0;
      {
        v45 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v45, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      *(_QWORD *)(v35 + 24) = mdm::Allocator::instance(void)::alloc;
      *(_QWORD *)(v35 + 32) = 0;
      *(_WORD *)(v35 + 40) = 0;
      v55 = v35;
      v37 = (uint64_t *)a1[8];
      if ((unint64_t)v37 >= a1[9])
      {
        v38 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>(v49, &v55);
      }
      else
      {
        if (v37)
          *v37 = v35;
        v38 = v37 + 1;
      }
      a1[8] = v38;
      v39 = *(v38 - 1);
      md::LabelAnimationTrack::addItem(v39, *(unsigned __int8 *)(a4 + 4), 1, v26 + (float)(*(float *)(a4 + 12) * (float)v24), *(float *)(a4 + 16));
      v41 = a1[3];
      v40 = a1[4];
      if (v40 - v41 == -144)
      {
        while (v40 != v41)
        {
          v43 = *(void **)(v40 - 144);
          v40 -= 144;
          v42 = v43;
          if (v43 != *(void **)(v40 + 16))
            free(v42);
        }
        a1[4] = v41;
      }
      else
      {
        std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append(v50);
        v41 = a1[4];
      }
      v27 = 57 * ((v41 - *v50) >> 4) - 1;
      v28 = *v50 + 144 * (57 * ((v41 - *v50) >> 4) - 1);
      *(_QWORD *)(v28 + 88) = v34;
      *(float *)(v28 + 96) = v20;
      *(_DWORD *)(v28 + 100) = 0;
      *(float *)(v28 + 104) = v15;
      *(_DWORD *)(v28 + 108) = 0;
      *(_WORD *)(v28 + 112) = 0;
      *(_QWORD *)(v28 + 72) = v39;
      *(_QWORD *)(v28 + 80) = v19;
      *(_BYTE *)(v29 + 563) = v27;
      ++v24;
    }
    while (v24 != v48);
    *v47 = fmaxf((float)(v26 + (float)(*(float *)(a4 + 12) * (float)v46)) + *(float *)(a4 + 16), (float)(v25 + (float)(*(float *)(a4 + 44) * (float)v46)) + *(float *)(a4 + 48));
    v11 = v51;
  }
  if (v11)
  {
    v52 = v11;
    (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v54 + 40))(v54, v11, v53 - v11);
  }
}

void sub_19FD8D134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a17 + 40))(a17, a14, a16 - a14);
  _Unwind_Resume(exception_object);
}

void md::LabelAnimator::createImageListFeatherAnimation(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, float *a5, float a6)
{
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  float v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  float v25;
  float v26;
  float v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  float *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 200))(&v52, a2);
  v11 = v53;
  if (v53 != v52)
  {
    v12 = *(float **)(*(_QWORD *)v52 + 24);
    v13 = 0.0;
    v14 = 0.0;
    if (v12[20] >= v12[18])
    {
      v15 = v12[21];
      v16 = v12[19];
      if (v15 >= v16)
        v14 = (float)(v15 - v16) * 0.25;
    }
    v17 = (uint64_t)(v53 - v52) >> 3;
    v48 = a5;
    if (a3 == 1)
    {
      v19 = 0x3F80000000000000;
      v20 = v14;
    }
    else
    {
      if (a3)
      {
        v19 = 1065353216;
        v20 = 0.0;
      }
      else
      {
        v18 = (_QWORD *)(v53 - 8);
        v19 = 1065353216;
        v20 = 0.0;
        if (v53 - 8 > v52)
        {
          v21 = v52 + 8;
          do
          {
            v22 = *(_QWORD *)(v21 - 8);
            *(_QWORD *)(v21 - 8) = *v18;
            *v18-- = v22;
            v23 = v21 >= (unint64_t)v18;
            v21 += 8;
          }
          while (!v23);
        }
      }
      v13 = v14;
    }
    v24 = 0;
    v25 = *(float *)(a4 + 48) * (float)v17;
    v26 = fmaxf(*(float *)(a4 + 40) + a6, 0.0);
    v50 = (uint64_t)(a1 + 7);
    v51 = a1 + 3;
    v47 = v17 - 1;
    v27 = fmaxf(*(float *)(a4 + 8) + a6, 0.0);
    if (v17 <= 1)
      v17 = 1;
    v49 = v17;
    do
    {
      v30 = *(_QWORD *)(v52 + 8 * v24);
      v31 = operator new();
      *(_QWORD *)v31 = 0;
      *(_QWORD *)(v31 + 8) = 0;
      *(_QWORD *)(v31 + 16) = 0;
      {
        v45 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v45, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      *(_QWORD *)(v31 + 24) = mdm::Allocator::instance(void)::alloc;
      *(_QWORD *)(v31 + 32) = 0;
      *(_WORD *)(v31 + 40) = 0;
      v56 = v31;
      v33 = (uint64_t *)a1[8];
      if ((unint64_t)v33 >= a1[9])
      {
        v34 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>(v50, &v56);
      }
      else
      {
        if (v33)
          *v33 = v31;
        v34 = v33 + 1;
      }
      a1[8] = v34;
      v35 = *(v34 - 1);
      md::LabelAnimationTrack::addItem(v35, *(unsigned __int8 *)(a4 + 36), 1, v26, v25 - (float)(*(float *)(a4 + 48) * (float)v24));
      v36 = operator new();
      *(_QWORD *)v36 = 0;
      *(_QWORD *)(v36 + 8) = 0;
      *(_QWORD *)(v36 + 16) = 0;
      {
        v46 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v46, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      *(_QWORD *)(v36 + 24) = mdm::Allocator::instance(void)::alloc;
      *(_QWORD *)(v36 + 32) = 0;
      *(_WORD *)(v36 + 40) = 0;
      v56 = v36;
      v38 = (uint64_t *)a1[8];
      if ((unint64_t)v38 >= a1[9])
      {
        v39 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>(v50, &v56);
      }
      else
      {
        if (v38)
          *v38 = v36;
        v39 = v38 + 1;
      }
      a1[8] = v39;
      v40 = *(v39 - 1);
      md::LabelAnimationTrack::addItem(v40, *(unsigned __int8 *)(a4 + 4), 1, v27 + (float)(*(float *)(a4 + 12) * (float)v24), *(float *)(a4 + 16));
      v42 = a1[3];
      v41 = a1[4];
      if (v41 - v42 == -144)
      {
        while (v41 != v42)
        {
          v44 = *(void **)(v41 - 144);
          v41 -= 144;
          v43 = v44;
          if (v44 != *(void **)(v41 + 16))
            free(v43);
        }
        a1[4] = v42;
      }
      else
      {
        std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append(v51);
        v42 = a1[4];
      }
      v28 = 57 * ((v42 - *v51) >> 4) - 1;
      v29 = *v51 + 144 * (57 * ((v42 - *v51) >> 4) - 1);
      *(_QWORD *)(v29 + 88) = v35;
      *(_DWORD *)(v29 + 96) = 0;
      *(float *)(v29 + 100) = v20;
      *(_DWORD *)(v29 + 104) = 0;
      *(float *)(v29 + 108) = v13;
      *(_WORD *)(v29 + 112) = 0;
      *(_QWORD *)(v29 + 72) = v40;
      *(_QWORD *)(v29 + 80) = v19;
      *(_BYTE *)(v30 + 563) = v28;
      ++v24;
    }
    while (v24 != v49);
    *v48 = fmaxf((float)(v26 + (float)(*(float *)(a4 + 12) * (float)v47)) + *(float *)(a4 + 16), v26 + v25);
    v11 = v52;
  }
  if (v11)
  {
    v53 = v11;
    (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v55 + 40))(v55, v11, v54 - v11);
  }
}

void sub_19FD8D594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a17 + 40))(a17, a14, a16 - a14);
  _Unwind_Resume(exception_object);
}

void md::LabelAnimator::createClusterAnimation(md::LabelAnimator *this, const md::LabelPartContent *a2, unsigned int a3)
{
  float *v6;
  int8x8_t *v7;
  int8x8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  _QWORD *v52;
  _QWORD *v53;
  char *v54;
  __int128 v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t *v65;
  _QWORD *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  float v75;
  int8x8_t v76;
  int8x8_t v77;
  float v78;
  int8x8_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unsigned __int8 v87;
  uint64_t *v88;
  _QWORD *v89;
  int8x8_t v90;
  int8x8_t *v91;
  int8x8_t *v92;
  int8x8_t *v93;
  int8x8_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v6 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  v7 = (int8x8_t *)&off_19FFB1000;
  v8 = (int8x8_t *)&off_19FFB1000;
  if (*((_QWORD *)a2 + 1))
  {
    v10 = *((_QWORD *)this + 3);
    v11 = *((_QWORD *)this + 4);
    v9 = (uint64_t *)((char *)this + 24);
    if (v11 - v10 == -144)
    {
      while (v11 != v10)
      {
        v13 = *(void **)(v11 - 144);
        v11 -= 144;
        v12 = v13;
        if (v13 != *(void **)(v11 + 16))
          free(v12);
      }
      *((_QWORD *)this + 4) = v10;
    }
    else
    {
      std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append((uint64_t *)this + 3);
      v10 = *((_QWORD *)this + 4);
    }
    v14 = *v9;
    v15 = 57 * ((v10 - *v9) >> 4) - 1;
    *(_BYTE *)(*((_QWORD *)a2 + 1) + 564) = 57 * ((v10 - *v9) >> 4) - 1;
    v16 = operator new();
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)v16 = 0;
    {
      v95 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v95, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v18 = v15;
    *(_QWORD *)(v16 + 24) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v16 + 32) = 0;
    *(_WORD *)(v16 + 40) = 0;
    v104 = v16;
    v19 = (uint64_t *)*((_QWORD *)this + 8);
    if ((unint64_t)v19 >= *((_QWORD *)this + 9))
    {
      v20 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>((uint64_t)this + 56, &v104);
    }
    else
    {
      if (v19)
        *v19 = v16;
      v20 = v19 + 1;
    }
    *((_QWORD *)this + 8) = v20;
    v21 = *(v20 - 1);
    v22 = operator new();
    *(_QWORD *)(v22 + 8) = 0;
    *(_QWORD *)(v22 + 16) = 0;
    *(_QWORD *)v22 = 0;
    if ((v23 & 1) == 0)
    {
      v96 = v22;
      v22 = v96;
      if (v97)
      {
        v98 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v98, "VectorKitLabels", 0x5ED09DD50000000FLL);
        v22 = v96;
      }
    }
    v24 = v14 + 144 * v18;
    *(_QWORD *)(v22 + 24) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v22 + 32) = 0;
    *(_WORD *)(v22 + 40) = 0;
    v104 = v22;
    v25 = (uint64_t *)*((_QWORD *)this + 8);
    if ((unint64_t)v25 >= *((_QWORD *)this + 9))
    {
      v26 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>((uint64_t)this + 56, &v104);
    }
    else
    {
      if (v25)
        *v25 = v22;
      v26 = v25 + 1;
    }
    *((_QWORD *)this + 8) = v26;
    v27 = *(v26 - 1);
    v28 = v14 + 144 * v18;
    v29 = (_QWORD *)(v28 + 72);
    v30 = (_QWORD *)(v28 + 80);
    if (a3)
    {
      md::LabelAnimationTrack::addItem(*(v26 - 1), 3u, 1, 0.0, 0.6);
      *v29 = v27;
      *v30 = 0x3F80000000000000;
      md::LabelAnimationTrack::addItem(v21, 0x11u, 1, 0.0, 0.6);
      v32 = *(_QWORD **)v24;
      v31 = *(char **)(v24 + 8);
      v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v31[-*(_QWORD *)v24] >> 3);
      v34 = *(_QWORD *)(v24 + 24);
      if (v34 < v33 + 1)
      {
        v35 = *(_QWORD **)(v24 + 16);
        v36 = (1 << -(char)__clz(v34 + 1));
        if (v34 >= 0xFFFFFFFFFFFFFFFELL)
          v36 = 1;
        if (v36 <= v33 + 1)
          v37 = v33 + 1;
        else
          v37 = v36;
        v38 = (char *)malloc_type_malloc(24 * v37, 0x1020040545B2139uLL);
        v39 = v38;
        v40 = *(_QWORD **)v24;
        v41 = *(_QWORD **)(v24 + 8);
        if (*(_QWORD **)v24 != v41)
        {
          v42 = v38;
          do
          {
            v43 = *(_OWORD *)v40;
            *((_QWORD *)v42 + 2) = v40[2];
            *(_OWORD *)v42 = v43;
            v42 += 24;
            v40 += 3;
          }
          while (v40 != v41);
        }
        if (v32 != v35)
          free(*(void **)v24);
        *(_QWORD *)v24 = v39;
        v31 = &v39[24 * v33];
        v7 = (int8x8_t *)&off_19FFB1000;
        v44 = 1065353216;
        v8 = (int8x8_t *)&off_19FFB1000;
LABEL_45:
        v6 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
        *(_QWORD *)(v24 + 8) = v31;
        *(_QWORD *)(v24 + 24) = v37;
LABEL_49:
        *(_QWORD *)v31 = v21;
        *((_QWORD *)v31 + 1) = v44;
        v31[16] = 1;
        *(_QWORD *)(v24 + 8) += 24;
        goto LABEL_50;
      }
      v44 = 1065353216;
      v8 = (int8x8_t *)&off_19FFB1000;
    }
    else
    {
      md::LabelAnimationTrack::addItem(*(v26 - 1), 3u, 1, 0.0, 0.3);
      *v29 = v27;
      *v30 = 1065353216;
      md::LabelAnimationTrack::addItem(v21, 4u, 1, 0.0, 0.3);
      v45 = *(void **)v24;
      v31 = *(char **)(v24 + 8);
      v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v31[-*(_QWORD *)v24] >> 3);
      v47 = *(_QWORD *)(v24 + 24);
      if (v47 < v46 + 1)
      {
        v48 = *(void **)(v24 + 16);
        v49 = (1 << -(char)__clz(v47 + 1));
        if (v47 >= 0xFFFFFFFFFFFFFFFELL)
          v49 = 1;
        if (v49 <= v46 + 1)
          v37 = v46 + 1;
        else
          v37 = v49;
        v50 = (char *)malloc_type_malloc(24 * v37, 0x1020040545B2139uLL);
        v51 = v50;
        v52 = *(_QWORD **)v24;
        v53 = *(_QWORD **)(v24 + 8);
        if (*(_QWORD **)v24 != v53)
        {
          v54 = v50;
          do
          {
            v55 = *(_OWORD *)v52;
            *((_QWORD *)v54 + 2) = v52[2];
            *(_OWORD *)v54 = v55;
            v54 += 24;
            v52 += 3;
          }
          while (v52 != v53);
        }
        if (v45 != v48)
          free(*(void **)v24);
        *(_QWORD *)v24 = v51;
        v31 = &v51[24 * v46];
        v8 = (int8x8_t *)&off_19FFB1000;
        v44 = 0x3F80000000000000;
        v7 = (int8x8_t *)&off_19FFB1000;
        goto LABEL_45;
      }
      v8 = (int8x8_t *)&off_19FFB1000;
      v44 = 0x3F80000000000000;
    }
    v6 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
    goto LABEL_49;
  }
LABEL_50:
  if (*((_QWORD *)a2 + 2))
  {
    v57 = *((_QWORD *)this + 3);
    v58 = *((_QWORD *)this + 4);
    v56 = (uint64_t *)((char *)this + 24);
    if (v58 - v57 == -144)
    {
      while (v58 != v57)
      {
        v60 = *(void **)(v58 - 144);
        v58 -= 144;
        v59 = v60;
        if (v60 != *(void **)(v58 + 16))
          free(v59);
      }
      *((_QWORD *)this + 4) = v57;
    }
    else
    {
      std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append((uint64_t *)this + 3);
      v57 = *((_QWORD *)this + 4);
    }
    v61 = *v56;
    v62 = 57 * ((v57 - *v56) >> 4) - 1;
    *(_BYTE *)(*((_QWORD *)a2 + 2) + 564) = v62;
    v63 = operator new();
    *(_QWORD *)(v63 + 8) = 0;
    *(_QWORD *)(v63 + 16) = 0;
    *(_QWORD *)v63 = 0;
    {
      v99 = operator new();
      *((_QWORD *)v6 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v99, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *(_QWORD *)(v63 + 24) = *((_QWORD *)v6 + 299);
    *(_QWORD *)(v63 + 32) = 0;
    *(_WORD *)(v63 + 40) = 0;
    v104 = v63;
    v65 = (uint64_t *)*((_QWORD *)this + 8);
    if ((unint64_t)v65 >= *((_QWORD *)this + 9))
    {
      v66 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>((uint64_t)this + 56, &v104);
    }
    else
    {
      if (v65)
        *v65 = v63;
      v66 = v65 + 1;
    }
    v67 = v62;
    *((_QWORD *)this + 8) = v66;
    v68 = *(v66 - 1);
    v69 = operator new();
    *(_QWORD *)(v69 + 8) = 0;
    *(_QWORD *)(v69 + 16) = 0;
    *(_QWORD *)v69 = 0;
    if ((v70 & 1) == 0)
    {
      v100 = v69;
      v69 = v100;
      if (v101)
      {
        v102 = operator new();
        *((_QWORD *)v6 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v102, "VectorKitLabels", 0x5ED09DD50000000FLL);
        v69 = v100;
      }
    }
    *(_QWORD *)(v69 + 24) = *((_QWORD *)v6 + 299);
    *(_QWORD *)(v69 + 32) = 0;
    *(_WORD *)(v69 + 40) = 0;
    v104 = v69;
    v71 = (uint64_t *)*((_QWORD *)this + 8);
    if ((unint64_t)v71 >= *((_QWORD *)this + 9))
    {
      v72 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>((uint64_t)this + 56, &v104);
    }
    else
    {
      if (v71)
        *v71 = v69;
      v72 = v71 + 1;
    }
    *((_QWORD *)this + 8) = v72;
    v73 = *(v72 - 1);
    v74 = (_QWORD *)(v61 + 144 * v67);
    v75 = 0.6;
    if (!a3)
      v75 = 0.3;
    v76 = (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a3), 0x1FuLL));
    v77 = vbsl_s8(v76, (int8x8_t)0x3F8000003F400000, (int8x8_t)0x3F4000003F800000);
    if (a3)
      v78 = 0.0;
    else
      v78 = 0.2;
    v79 = vbsl_s8(v76, v8[190], v7[366]);
    md::LabelAnimationTrack::addItem(*(v72 - 1), 4u, 1, 0.0, v75);
    v74[7] = v73;
    v74[8] = v77;
    md::LabelAnimationTrack::addItem(v68, 3u, 1, v78, 0.1);
    v74[9] = v68;
    v74[10] = v79;
  }
  if (*((_QWORD *)a2 + 4))
  {
    v80 = *((_QWORD *)this + 3);
    v81 = *((_QWORD *)this + 4);
    if (v81 - v80 == -144)
    {
      while (v81 != v80)
      {
        v83 = *(void **)(v81 - 144);
        v81 -= 144;
        v82 = v83;
        if (v83 != *(void **)(v81 + 16))
          free(v82);
      }
      *((_QWORD *)this + 4) = v80;
    }
    else
    {
      std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append((uint64_t *)this + 3);
      v80 = *((_QWORD *)this + 4);
    }
    v84 = *((_QWORD *)this + 3);
    *(_BYTE *)(*((_QWORD *)a2 + 4) + 564) = 57 * ((v80 - v84) >> 4) - 1;
    v85 = (57 * ((v80 - v84) >> 4) - 1);
    v86 = operator new();
    *(_QWORD *)(v86 + 8) = 0;
    *(_QWORD *)(v86 + 16) = 0;
    *(_QWORD *)v86 = 0;
    {
      v103 = operator new();
      *((_QWORD *)v6 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v103, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *(_QWORD *)(v86 + 24) = *((_QWORD *)v6 + 299);
    *(_QWORD *)(v86 + 32) = 0;
    *(_WORD *)(v86 + 40) = 0;
    v104 = v86;
    v88 = (uint64_t *)*((_QWORD *)this + 8);
    if ((unint64_t)v88 >= *((_QWORD *)this + 9))
    {
      v89 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>((uint64_t)this + 56, &v104);
    }
    else
    {
      if (v88)
        *v88 = v86;
      v89 = v88 + 1;
    }
    *((_QWORD *)this + 8) = v89;
    v90 = (int8x8_t)*(v89 - 1);
    v91 = (int8x8_t *)(v84 + 144 * v85);
    v92 = v91 + 9;
    v93 = v91 + 10;
    if (a3)
    {
      md::LabelAnimationTrack::addItem(*(v89 - 1), 3u, 1, 0.1, 0.4);
      v94 = v8[190];
    }
    else
    {
      md::LabelAnimationTrack::addItem(*(v89 - 1), 3u, 1, 0.0, 0.2);
      v94 = v7[366];
    }
    *v92 = v90;
    *v93 = v94;
  }
}

_QWORD *md::LabelAnimator::createClusterFadeAnimation(_QWORD *this, const md::LabelPartContent *a2, unsigned int a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t *v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  int8x8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  void *v34;
  void *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t *v40;
  _QWORD *v41;
  int8x8_t v42;
  int8x8_t *v43;
  float v44;
  int32x2_t v45;
  int8x8_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;

  if (*((_QWORD *)a2 + 2) && *((_QWORD *)a2 + 4))
  {
    v5 = this;
    v7 = this[3];
    v8 = this[4];
    v6 = this + 3;
    if (v8 - v7 == -144)
    {
      while (v8 != v7)
      {
        v10 = *(void **)(v8 - 144);
        v8 -= 144;
        v9 = v10;
        if (v10 != *(void **)(v8 + 16))
          free(v9);
      }
      v5[4] = v7;
    }
    else
    {
      std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append(this + 3);
      v7 = v5[4];
    }
    v11 = *v6;
    v12 = 57 * ((v7 - *v6) >> 4) - 1;
    *(_BYTE *)(*((_QWORD *)a2 + 2) + 564) = 57 * ((v7 - *v6) >> 4) - 1;
    v13 = operator new();
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)v13 = 0;
    {
      v47 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *(_QWORD *)(v13 + 24) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v13 + 32) = 0;
    *(_WORD *)(v13 + 40) = 0;
    v51 = v13;
    v15 = (uint64_t *)v5[8];
    v50 = a3;
    if ((unint64_t)v15 >= v5[9])
    {
      v16 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>((uint64_t)(v5 + 7), &v51);
    }
    else
    {
      if (v15)
        *v15 = v13;
      v16 = v15 + 1;
    }
    v17 = v12;
    v5[8] = v16;
    v18 = *(v16 - 1);
    v19 = operator new();
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)v19 = 0;
    {
      v48 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v48, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *(_QWORD *)(v19 + 24) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v19 + 32) = 0;
    *(_WORD *)(v19 + 40) = 0;
    v51 = v19;
    v21 = (uint64_t *)v5[8];
    if ((unint64_t)v21 >= v5[9])
    {
      v22 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>((uint64_t)(v5 + 7), &v51);
    }
    else
    {
      if (v21)
        *v21 = v19;
      v22 = v21 + 1;
    }
    v5[8] = v22;
    v23 = v11;
    v24 = v11 + 144 * v17;
    v25 = *(v22 - 1);
    v26 = (uint64_t *)(v24 + 72);
    v27 = (_QWORD *)(v24 + 80);
    if (v50)
    {
      md::LabelAnimationTrack::addItem(v18, 3u, 1, 0.1, 0.2);
      *v26 = v18;
      *v27 = 0x3F80000000000000;
      md::LabelAnimationTrack::addItem(v25, 0x10u, 1, 0.1, 0.2);
      v28 = 0x3F8000003FA00000;
      v29 = (int8x8_t *)&off_19FFB1000;
    }
    else
    {
      md::LabelAnimationTrack::addItem(v18, 3u, 1, 0.0, 0.3);
      *v26 = v18;
      *v27 = 1065353216;
      md::LabelAnimationTrack::addItem(v25, 4u, 1, 0.0, 0.3);
      v28 = 0x3FA000003F800000;
      v29 = (int8x8_t *)&off_19FFB1000;
    }
    v30 = v23 + 144 * v17;
    *(_QWORD *)(v30 + 56) = v25;
    *(_QWORD *)(v30 + 64) = v28;
    v31 = v5[3];
    v32 = v5[4];
    if (v32 - v31 == -144)
    {
      v33 = v50;
      while (v32 != v31)
      {
        v35 = *(void **)(v32 - 144);
        v32 -= 144;
        v34 = v35;
        if (v35 != *(void **)(v32 + 16))
          free(v34);
      }
      v5[4] = v31;
    }
    else
    {
      std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append(v6);
      v31 = v5[4];
      v33 = v50;
    }
    v36 = *v6;
    *(_BYTE *)(*((_QWORD *)a2 + 4) + 564) = 57 * ((v31 - v36) >> 4) - 1;
    v37 = (57 * ((v31 - v36) >> 4) - 1);
    v38 = operator new();
    *(_QWORD *)(v38 + 8) = 0;
    *(_QWORD *)(v38 + 16) = 0;
    *(_QWORD *)v38 = 0;
    {
      v49 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v49, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *(_QWORD *)(v38 + 24) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v38 + 32) = 0;
    *(_WORD *)(v38 + 40) = 0;
    v51 = v38;
    v40 = (uint64_t *)v5[8];
    if ((unint64_t)v40 >= v5[9])
    {
      v41 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>((uint64_t)(v5 + 7), &v51);
    }
    else
    {
      if (v40)
        *v40 = v38;
      v41 = v40 + 1;
    }
    v5[8] = v41;
    v42 = (int8x8_t)*(v41 - 1);
    v43 = (int8x8_t *)(v36 + 144 * v37);
    v44 = 0.0;
    v45 = vdup_n_s32(v33);
    if (v33)
      v44 = 0.2;
    v46 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(v45, 0x1FuLL)), (int8x8_t)0x3F80000000000000, v29[366]);
    this = (_QWORD *)md::LabelAnimationTrack::addItem(*(v41 - 1), 3u, 1, v44, 0.2);
    v43[9] = v42;
    v43[10] = v46;
  }
  return this;
}

void sub_19FD8E478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD8EF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  void *v30;

  _Unwind_Resume(a1);
}

void sub_19FD8F294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKNavCameraController;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FD8F9B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD90010(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD90238(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD90340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_19FD904B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD90558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD90630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD9083C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD90920(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD909A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD90A5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD90B00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD90B98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD90C68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD90D0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD90DA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD90E3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD90F04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD90FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FD91040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FD91520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FD915DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FD91864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19FD91BA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD92354(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FD930EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  id *v15;
  id *v16;
  uint64_t v17;
  va_list va;

  va_start(va, a14);

  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  _Block_object_dispose(va, 8);
  objc_destroyWeak((id *)(v17 - 72));

  _Unwind_Resume(a1);
}

void sub_19FD93508(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 136));
  _Unwind_Resume(a1);
}

void sub_19FD935D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FD93698(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FD93754(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD93804(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD93954(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD93A18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD93CC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD940FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD94350(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD94528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD947BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FD94988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD95128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_19FD9565C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp(v7 - 248);
  _Unwind_Resume(a1);
}

void sub_19FD96A94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FD96EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_19FD97830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD97AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FD97BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FD980FC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_19FD982E4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_19FD98438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD98504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FD98960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD98AB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD98C2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD99018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;
  id *v10;

  objc_destroyWeak(v10);
  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_19FD99238(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_19FD99A58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD99B7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD99C20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD99DB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD99E4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD99EE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD99FBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD9A68C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD9A7E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD9A918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FD9AA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FD9AD48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<geo::Coordinate3D<geo::Radians,double>>::push_back[abi:nn180100](uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  BOOL v19;
  unint64_t v21;
  const double *v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  float64x2x3_t v26;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (v5 >= v4)
  {
    v8 = *(void **)a1;
    v9 = v5 - *(_QWORD *)a1;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3) + 1;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v8) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v13 = 24 * v12;
    v14 = (char *)operator new(24 * v12);
    v15 = (unint64_t)&v14[8 * (v9 >> 3)];
    *(_OWORD *)v15 = *(_OWORD *)a2;
    *(_QWORD *)(v15 + 16) = *(_QWORD *)(a2 + 16);
    v7 = v15 + 24;
    if ((void *)v5 != v8)
    {
      v16 = v5 - (_QWORD)v8 - 24;
      if (v16 < 0x1C8)
        goto LABEL_35;
      v17 = v16 / 0x18;
      v18 = (unint64_t)&v14[v9 - 8 - 24 * v17] >= v5 || v5 - 24 * v17 - 8 >= v15;
      v19 = !v18;
      if (v5 - 24 * v17 - 24 < (unint64_t)&v14[v9 - 8] && (unint64_t)&v14[v9 - 24 * v17 - 24] < v5 - 8)
        goto LABEL_35;
      if (v19)
        goto LABEL_35;
      v21 = v17 + 1;
      v6 = v5 - 24 * (v21 & 0x1FFFFFFFFFFFFFFELL);
      v22 = (const double *)(v5 - 48);
      v23 = (double *)(v15 - 48);
      v24 = v21 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v26 = vld3q_f64(v22);
        vst3q_f64(v23, v26);
        v23 -= 6;
        v22 -= 6;
        v24 -= 2;
      }
      while (v24);
      v15 -= 24 * (v21 & 0x1FFFFFFFFFFFFFFELL);
      if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_35:
        do
        {
          v25 = *(_QWORD *)(v6 - 24);
          v6 -= 24;
          *(_QWORD *)(v15 - 24) = v25;
          v15 -= 24;
          *(_OWORD *)(v15 + 8) = *(_OWORD *)(v6 + 8);
        }
        while ((void *)v6 != v8);
      }
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v14[v13];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *(_OWORD *)(v5 + 8) = *(_OWORD *)(a2 + 8);
    v7 = v5 + 24;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

void sub_19FD9B92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_19FD9BA94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD9BD60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD9BF28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  objc_storeStrong((id *)(a1 + 24), *((id *)a2 + 3));
  v6 = *((_QWORD *)a2 + 4);
  v5 = *((_QWORD *)a2 + 5);
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (__int128 *)*((_QWORD *)a2 + 9);
  if (v12)
  {
    if (v12 == a2 + 3)
    {
      v17 = v16;
      (*(void (**)(__int128 *, _QWORD *))(*((_QWORD *)a2 + 6) + 24))(a2 + 3, v16);
    }
    else
    {
      v17 = (_QWORD *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v12 + 16))(v12);
    }
  }
  else
  {
    v17 = 0;
  }
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v16, (_QWORD *)(a1 + 48));
  v13 = v17;
  if (v17 == v16)
  {
    v14 = 4;
    v13 = v16;
    goto LABEL_18;
  }
  if (v17)
  {
    v14 = 5;
LABEL_18:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return a1;
}

void sub_19FD9C19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void md::DaVinciBaseMapEngineMode::~DaVinciBaseMapEngineMode(md::DaVinciBaseMapEngineMode *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A0578;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 72);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapEngineMode::~MapEngineMode(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A0578;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 72);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A0578;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 72);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapEngineMode::~MapEngineMode(this);
}

void md::DaVinciBaseMapEngineMode::applyRenderLayerSettings(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint8x8_t v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8x8_t v35;
  uint64_t v36;
  uint64_t **v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8x8_t v43;
  uint64_t v44;
  uint64_t **v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint8x8_t v50;
  uint64_t v51;
  uint64_t **v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int8x8_t *v57;
  int8x8_t v58;
  uint8x8_t v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int8x8_t v70;
  uint8x8_t v71;
  uint64_t v72;
  uint64_t **v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v4 = *(uint64_t **)(a2 + 1128);
  v5 = *v4;
  v6 = v4[1];
  v7 = *v4;
  if (*v4 != v6)
  {
    v7 = *v4;
    while (*(_BYTE *)v7 != 1)
    {
      v7 += 16;
      if (v7 == v6)
        goto LABEL_38;
    }
  }
  if (v7 == v6 || !*(_QWORD *)(v7 + 8))
    goto LABEL_38;
  v8 = *v4;
  if (v5 != v6)
  {
    v8 = *v4;
    while (*(_BYTE *)v8 != 24)
    {
      v8 += 16;
      if (v8 == v6)
        goto LABEL_38;
    }
  }
  if (v8 != v6)
  {
    if (*(_QWORD *)(v8 + 8))
    {
      v9 = (int8x8_t)a3[1];
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8(v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          v11 = 30;
          if (*(_QWORD *)&v9 <= 0x1EuLL)
            v11 = 0x1Eu % a3[1];
        }
        else
        {
          v11 = (v9.i8[0] - 1) & 0x1E;
        }
        v12 = *(uint64_t ***)(*a3 + 8 * v11);
        if (v12)
        {
          v13 = *v12;
          if (v13)
          {
            if (v10.u32[0] < 2uLL)
            {
              v14 = *(_QWORD *)&v9 - 1;
              while (1)
              {
                v16 = v13[1];
                if (v16 == 30)
                {
                  if (*((_BYTE *)v13 + 16) == 30)
                    goto LABEL_36;
                }
                else if ((v16 & v14) != v11)
                {
                  goto LABEL_38;
                }
                v13 = (uint64_t *)*v13;
                if (!v13)
                  goto LABEL_38;
              }
            }
            do
            {
              v15 = v13[1];
              if (v15 == 30)
              {
                if (*((_BYTE *)v13 + 16) == 30)
                {
LABEL_36:
                  if (*((_BYTE *)v13 + 17) == 2)
                    *((_BYTE *)v13 + 17) = 1;
                  break;
                }
              }
              else
              {
                if (v15 >= *(_QWORD *)&v9)
                  v15 %= *(_QWORD *)&v9;
                if (v15 != v11)
                  break;
              }
              v13 = (uint64_t *)*v13;
            }
            while (v13);
          }
        }
      }
    }
  }
LABEL_38:
  v17 = (int8x8_t)a3[1];
  if (v17)
  {
    v18 = (uint8x8_t)vcnt_s8(v17);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      v19 = 52;
      if (*(_QWORD *)&v17 <= 0x34uLL)
        v19 = 0x34u % a3[1];
    }
    else
    {
      v19 = (v17.i32[0] - 1) & 0x34;
    }
    v20 = *(uint64_t ***)(*a3 + 8 * v19);
    if (v20)
    {
      v21 = *v20;
      if (v21)
      {
        if (v18.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v21[1];
            if (v23 == 52)
            {
              if (*((_BYTE *)v21 + 16) == 52)
                goto LABEL_59;
            }
            else if ((v23 & (*(_QWORD *)&v17 - 1)) != v19)
            {
              goto LABEL_61;
            }
            v21 = (uint64_t *)*v21;
            if (!v21)
              goto LABEL_61;
          }
        }
        do
        {
          v22 = v21[1];
          if (v22 == 52)
          {
            if (*((_BYTE *)v21 + 16) == 52)
            {
LABEL_59:
              if (*((_BYTE *)v21 + 17) == 2)
                *((_BYTE *)v21 + 17) = 1;
              break;
            }
          }
          else
          {
            if (v22 >= *(_QWORD *)&v17)
              v22 %= *(_QWORD *)&v17;
            if (v22 != v19)
              break;
          }
          v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
    }
  }
LABEL_61:
  v24 = v5;
  if (v5 != v6)
  {
    v24 = v5;
    while (*(_BYTE *)v24 != 2)
    {
      v24 += 16;
      if (v24 == v6)
        goto LABEL_70;
    }
  }
  if (v24 != v6 && *(_QWORD *)(v24 + 8))
  {
    if (!*(_QWORD *)&v17)
      goto LABEL_102;
    goto LABEL_80;
  }
LABEL_70:
  v25 = v5;
  if (v5 != v6)
  {
    v25 = v5;
    while (*(_BYTE *)v25 != 4)
    {
      v25 += 16;
      if (v25 == v6)
        goto LABEL_102;
    }
  }
  if (v25 != v6 && *(_QWORD *)(v25 + 8) && *(_QWORD *)&v17 != 0)
  {
LABEL_80:
    v27 = (uint8x8_t)vcnt_s8(v17);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      v28 = 46;
      if (*(_QWORD *)&v17 <= 0x2EuLL)
        v28 = 0x2Eu % v17.u8[0];
    }
    else
    {
      v28 = (v17.i32[0] - 1) & 0x2ELL;
    }
    v29 = *(uint64_t ***)(*a3 + 8 * v28);
    if (v29)
    {
      v30 = *v29;
      if (v30)
      {
        if (v27.u32[0] < 2uLL)
        {
          while (1)
          {
            v32 = v30[1];
            if (v32 == 46)
            {
              if (*((_BYTE *)v30 + 16) == 46)
                goto LABEL_100;
            }
            else if ((v32 & (*(_QWORD *)&v17 - 1)) != v28)
            {
              goto LABEL_102;
            }
            v30 = (uint64_t *)*v30;
            if (!v30)
              goto LABEL_102;
          }
        }
        do
        {
          v31 = v30[1];
          if (v31 == 46)
          {
            if (*((_BYTE *)v30 + 16) == 46)
            {
LABEL_100:
              if (*((_BYTE *)v30 + 17) == 2)
                *((_BYTE *)v30 + 17) = 1;
              break;
            }
          }
          else
          {
            if (v31 >= *(_QWORD *)&v17)
              v31 %= *(_QWORD *)&v17;
            if (v31 != v28)
              break;
          }
          v30 = (uint64_t *)*v30;
        }
        while (v30);
      }
    }
  }
LABEL_102:
  v33 = v5;
  if (v5 != v6)
  {
    v33 = v5;
    while (*(_BYTE *)v33 != 5)
    {
      v33 += 16;
      if (v33 == v6)
        goto LABEL_134;
    }
  }
  if (v33 != v6 && *(_QWORD *)(v33 + 8) && *(_QWORD *)&v17 != 0)
  {
    v35 = (uint8x8_t)vcnt_s8(v17);
    v35.i16[0] = vaddlv_u8(v35);
    if (v35.u32[0] > 1uLL)
    {
      v36 = 41;
      if (*(_QWORD *)&v17 <= 0x29uLL)
        v36 = 0x29u % v17.u8[0];
    }
    else
    {
      v36 = (v17.i32[0] - 1) & 0x29;
    }
    v37 = *(uint64_t ***)(*a3 + 8 * v36);
    if (v37)
    {
      v38 = *v37;
      if (v38)
      {
        if (v35.u32[0] < 2uLL)
        {
          while (1)
          {
            v40 = v38[1];
            if (v40 == 41)
            {
              if (*((_BYTE *)v38 + 16) == 41)
                goto LABEL_132;
            }
            else if ((v40 & (*(_QWORD *)&v17 - 1)) != v36)
            {
              goto LABEL_134;
            }
            v38 = (uint64_t *)*v38;
            if (!v38)
              goto LABEL_134;
          }
        }
        do
        {
          v39 = v38[1];
          if (v39 == 41)
          {
            if (*((_BYTE *)v38 + 16) == 41)
            {
LABEL_132:
              if (*((_BYTE *)v38 + 17) == 2)
                *((_BYTE *)v38 + 17) = 1;
              break;
            }
          }
          else
          {
            if (v39 >= *(_QWORD *)&v17)
              v39 %= *(_QWORD *)&v17;
            if (v39 != v36)
              break;
          }
          v38 = (uint64_t *)*v38;
        }
        while (v38);
      }
    }
  }
LABEL_134:
  v41 = v5;
  if (v5 != v6)
  {
    v41 = v5;
    while (*(_BYTE *)v41 != 5)
    {
      v41 += 16;
      if (v41 == v6)
        goto LABEL_166;
    }
  }
  if (v41 != v6 && *(_QWORD *)(v41 + 8) && *(_QWORD *)&v17 != 0)
  {
    v43 = (uint8x8_t)vcnt_s8(v17);
    v43.i16[0] = vaddlv_u8(v43);
    if (v43.u32[0] > 1uLL)
    {
      v44 = 42;
      if (*(_QWORD *)&v17 <= 0x2AuLL)
        v44 = 0x2Au % v17.u8[0];
    }
    else
    {
      v44 = (v17.i32[0] - 1) & 0x2ALL;
    }
    v45 = *(uint64_t ***)(*a3 + 8 * v44);
    if (v45)
    {
      v46 = *v45;
      if (v46)
      {
        if (v43.u32[0] < 2uLL)
        {
          while (1)
          {
            v48 = v46[1];
            if (v48 == 42)
            {
              if (*((_BYTE *)v46 + 16) == 42)
                goto LABEL_164;
            }
            else if ((v48 & (*(_QWORD *)&v17 - 1)) != v44)
            {
              goto LABEL_166;
            }
            v46 = (uint64_t *)*v46;
            if (!v46)
              goto LABEL_166;
          }
        }
        do
        {
          v47 = v46[1];
          if (v47 == 42)
          {
            if (*((_BYTE *)v46 + 16) == 42)
            {
LABEL_164:
              if (*((_BYTE *)v46 + 17) == 2)
                *((_BYTE *)v46 + 17) = 1;
              break;
            }
          }
          else
          {
            if (v47 >= *(_QWORD *)&v17)
              v47 %= *(_QWORD *)&v17;
            if (v47 != v44)
              break;
          }
          v46 = (uint64_t *)*v46;
        }
        while (v46);
      }
    }
  }
LABEL_166:
  if (v5 != v6)
  {
    while (*(_BYTE *)v5 != 33)
    {
      v5 += 16;
      if (v5 == v6)
        goto LABEL_197;
    }
  }
  if (v5 != v6 && *(_QWORD *)(v5 + 8) && *(_QWORD *)&v17 != 0)
  {
    v50 = (uint8x8_t)vcnt_s8(v17);
    v50.i16[0] = vaddlv_u8(v50);
    if (v50.u32[0] > 1uLL)
    {
      v51 = 38;
      if (*(_QWORD *)&v17 <= 0x26uLL)
        v51 = 0x26u % v17.u8[0];
    }
    else
    {
      v51 = (v17.i32[0] - 1) & 0x26;
    }
    v52 = *(uint64_t ***)(*a3 + 8 * v51);
    if (v52)
    {
      v53 = *v52;
      if (v53)
      {
        if (v50.u32[0] < 2uLL)
        {
          v54 = *(_QWORD *)&v17 - 1;
          while (1)
          {
            v56 = v53[1];
            if (v56 == 38)
            {
              if (*((_BYTE *)v53 + 16) == 38)
                goto LABEL_195;
            }
            else if ((v56 & v54) != v51)
            {
              goto LABEL_197;
            }
            v53 = (uint64_t *)*v53;
            if (!v53)
              goto LABEL_197;
          }
        }
        do
        {
          v55 = v53[1];
          if (v55 == 38)
          {
            if (*((_BYTE *)v53 + 16) == 38)
            {
LABEL_195:
              if (*((_BYTE *)v53 + 17) == 2)
                *((_BYTE *)v53 + 17) = 1;
              break;
            }
          }
          else
          {
            if (v55 >= *(_QWORD *)&v17)
              v55 %= *(_QWORD *)&v17;
            if (v55 != v51)
              break;
          }
          v53 = (uint64_t *)*v53;
        }
        while (v53);
      }
    }
  }
LABEL_197:
  v57 = *(int8x8_t **)(a2 + 1120);
  v58 = v57[2];
  if (!*(_QWORD *)&v58)
    goto LABEL_217;
  v59 = (uint8x8_t)vcnt_s8(v58);
  v59.i16[0] = vaddlv_u8(v59);
  if (v59.u32[0] > 1uLL)
  {
    v60 = 0xC74495586E0C32F6;
    if (*(_QWORD *)&v58 <= 0xC74495586E0C32F6)
      v60 = 0xC74495586E0C32F6 % *(_QWORD *)&v58;
  }
  else
  {
    v60 = (*(_QWORD *)&v58 - 1) & 0xC74495586E0C32F6;
  }
  v61 = *(_QWORD **)(*(_QWORD *)&v57[1] + 8 * v60);
  if (!v61 || (v62 = (_QWORD *)*v61) == 0)
  {
LABEL_217:
    v66 = 0;
    goto LABEL_218;
  }
  if (v59.u32[0] < 2uLL)
  {
    v63 = *(_QWORD *)&v58 - 1;
    while (1)
    {
      v65 = v62[1];
      if (v65 == 0xC74495586E0C32F6)
      {
        if (v62[2] == 0xC74495586E0C32F6)
          goto LABEL_250;
      }
      else if ((v65 & v63) != v60)
      {
        goto LABEL_217;
      }
      v62 = (_QWORD *)*v62;
      if (!v62)
        goto LABEL_217;
    }
  }
  while (1)
  {
    v64 = v62[1];
    if (v64 == 0xC74495586E0C32F6)
      break;
    if (v64 >= *(_QWORD *)&v58)
      v64 %= *(_QWORD *)&v58;
    if (v64 != v60)
      goto LABEL_217;
LABEL_207:
    v62 = (_QWORD *)*v62;
    if (!v62)
      goto LABEL_217;
  }
  if (v62[2] != 0xC74495586E0C32F6)
    goto LABEL_207;
LABEL_250:
  v66 = v62[5];
LABEL_218:
  v67 = *v4;
  v68 = v4[1];
  v69 = *v4;
  if (*v4 != v68)
  {
    v69 = *v4;
    while (*(_BYTE *)v69 != 34)
    {
      v69 += 16;
      if (v69 == v68)
        goto LABEL_225;
    }
  }
  if (v69 != v68 && *(_QWORD *)(v69 + 8))
  {
LABEL_229:
    v70 = (int8x8_t)a3[1];
    if (!*(_QWORD *)&v70)
      goto LABEL_253;
    v71 = (uint8x8_t)vcnt_s8(v70);
    v71.i16[0] = vaddlv_u8(v71);
    if (v71.u32[0] > 1uLL)
    {
      v72 = 37;
      if (*(_QWORD *)&v70 <= 0x25uLL)
        v72 = 0x25u % a3[1];
    }
    else
    {
      v72 = (v70.i32[0] - 1) & 0x25;
    }
    v73 = *(uint64_t ***)(*a3 + 8 * v72);
    if (!v73)
      goto LABEL_253;
    v74 = *v73;
    if (!v74)
      goto LABEL_253;
    if (v71.u32[0] < 2uLL)
    {
      v75 = *(_QWORD *)&v70 - 1;
      while (1)
      {
        v77 = v74[1];
        if (v77 == 37)
        {
          if (*((_BYTE *)v74 + 16) == 37)
            goto LABEL_251;
        }
        else if ((v77 & v75) != v72)
        {
          goto LABEL_253;
        }
        v74 = (uint64_t *)*v74;
        if (!v74)
          goto LABEL_253;
      }
    }
    while (1)
    {
      v76 = v74[1];
      if (v76 == 37)
      {
        if (*((_BYTE *)v74 + 16) == 37)
        {
LABEL_251:
          if (*((_BYTE *)v74 + 17) == 2)
            *((_BYTE *)v74 + 17) = 1;
          goto LABEL_253;
        }
      }
      else
      {
        if (v76 >= *(_QWORD *)&v70)
          v76 %= *(_QWORD *)&v70;
        if (v76 != v72)
          goto LABEL_253;
      }
      v74 = (uint64_t *)*v74;
      if (!v74)
        goto LABEL_253;
    }
  }
LABEL_225:
  if (v66 && *(_BYTE *)(v66 + 56) && *(_BYTE *)(v66 + 392) && fabsf(*(float *)(v66 + 356)) > 0.0001)
    goto LABEL_229;
LABEL_253:
  v78 = v67;
  if (v67 != v68)
  {
    v78 = v67;
    while (*(_BYTE *)v78 != 13)
    {
      v78 += 16;
      if (v78 == v68)
        goto LABEL_263;
    }
  }
  if (v78 != v68 && *(_QWORD *)(v78 + 8))
  {
    std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0x1Eu);
    v67 = *v4;
    v68 = v4[1];
  }
LABEL_263:
  while (v67 != v68)
  {
    if (*(_BYTE *)v67 == 10)
    {
      if (v67 != v68)
      {
        if (*(_QWORD *)(v67 + 8))
          std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0x1Du);
      }
      return;
    }
    v67 += 16;
  }
}

void md::DaVinciBaseMapEngineMode::applyMapDataTypeSettings(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int8x8_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint8x8_t v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v3 = *(uint64_t **)(a2 + 1128);
  if (!v3)
    goto LABEL_118;
  v4 = *v3;
  v5 = v3[1];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = v4;
    while (*(_BYTE *)v6 != 29)
    {
      v6 += 16;
      if (v6 == v5)
        goto LABEL_10;
    }
  }
  if (v6 == v5)
  {
LABEL_10:
    v7 = 0;
    if (v4 != v5)
    {
LABEL_11:
      while (*(_BYTE *)v4 != 22)
      {
        v4 += 16;
        if (v4 == v5)
          goto LABEL_20;
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v4 != v5)
      goto LABEL_11;
  }
  if (v4 == v5)
  {
LABEL_20:
    if (v7 == 3)
      v9 = 2;
    else
      v9 = 4;
  }
  else
  {
    v8 = *(_QWORD *)(v4 + 8);
    if (v7 == 3)
      v9 = 2;
    else
      v9 = 4;
    if (v8)
      v9 = 7;
  }
  v10 = (int8x8_t)a3[1];
  if (!*(_QWORD *)&v10)
    goto LABEL_118;
  v11 = (uint8x8_t)vcnt_s8(v10);
  v11.i16[0] = vaddlv_u8(v11);
  v12 = v11.u32[0];
  if (v11.u32[0] > 1uLL)
  {
    v13 = 11;
    if (*(_QWORD *)&v10 <= 0xBuLL)
      v13 = 0xBu % a3[1];
  }
  else
  {
    v13 = (v10.i32[0] - 1) & 0xBLL;
  }
  v14 = *(uint64_t ***)(*a3 + 8 * v13);
  if (!v14)
    goto LABEL_48;
  v15 = *v14;
  if (!v15)
    goto LABEL_48;
  if (v11.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 11)
      {
        if (*((_WORD *)v15 + 8) == 11)
          goto LABEL_44;
      }
      else if ((v17 & (*(_QWORD *)&v10 - 1)) != v13)
      {
        goto LABEL_46;
      }
      v15 = (uint64_t *)*v15;
      if (!v15)
        goto LABEL_46;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == 11)
      break;
    if (v16 >= *(_QWORD *)&v10)
      v16 %= *(_QWORD *)&v10;
    if (v16 != v13)
      goto LABEL_46;
LABEL_33:
    v15 = (uint64_t *)*v15;
    if (!v15)
      goto LABEL_46;
  }
  if (*((_WORD *)v15 + 8) != 11)
    goto LABEL_33;
LABEL_44:
  if (*((_BYTE *)v15 + 18) == 2)
  {
    *(_DWORD *)((char *)v15 + 18) = (v9 << 16) | 2;
    v10 = (int8x8_t)a3[1];
  }
LABEL_46:
  if (!*(_QWORD *)&v10)
    goto LABEL_118;
  v18 = (uint8x8_t)vcnt_s8(v10);
  v18.i16[0] = vaddlv_u8(v18);
  v12 = v18.u32[0];
LABEL_48:
  if (v12 > 1)
  {
    v19 = 12;
    if (*(_QWORD *)&v10 <= 0xCuLL)
      v19 = 0xCu % v10.u8[0];
  }
  else
  {
    v19 = (v10.i8[0] - 1) & 0xC;
  }
  v20 = *(uint64_t ***)(*a3 + 8 * v19);
  if (!v20)
    goto LABEL_72;
  v21 = *v20;
  if (!v21)
    goto LABEL_72;
  if (v12 < 2)
  {
    while (1)
    {
      v23 = v21[1];
      if (v23 == 12)
      {
        if (*((_WORD *)v21 + 8) == 12)
          goto LABEL_68;
      }
      else if ((v23 & (*(_QWORD *)&v10 - 1)) != v19)
      {
        goto LABEL_70;
      }
      v21 = (uint64_t *)*v21;
      if (!v21)
        goto LABEL_70;
    }
  }
  while (2)
  {
    v22 = v21[1];
    if (v22 != 12)
    {
      if (v22 >= *(_QWORD *)&v10)
        v22 %= *(_QWORD *)&v10;
      if (v22 != v19)
        goto LABEL_70;
      goto LABEL_57;
    }
    if (*((_WORD *)v21 + 8) != 12)
    {
LABEL_57:
      v21 = (uint64_t *)*v21;
      if (!v21)
        goto LABEL_70;
      continue;
    }
    break;
  }
LABEL_68:
  if (*((_BYTE *)v21 + 18) == 2)
  {
    *(_DWORD *)((char *)v21 + 18) = (v9 << 16) | 2;
    v10 = (int8x8_t)a3[1];
  }
LABEL_70:
  if (!*(_QWORD *)&v10)
    goto LABEL_118;
  v24 = (uint8x8_t)vcnt_s8(v10);
  v24.i16[0] = vaddlv_u8(v24);
  v12 = v24.u32[0];
LABEL_72:
  if (v12 > 1)
  {
    v25 = 71;
    if (*(_QWORD *)&v10 <= 0x47uLL)
      v25 = 0x47u % v10.u8[0];
  }
  else
  {
    v25 = (v10.i32[0] - 1) & 0x47;
  }
  v26 = *(uint64_t ***)(*a3 + 8 * v25);
  if (!v26)
    goto LABEL_96;
  v27 = *v26;
  if (!v27)
    goto LABEL_96;
  if (v12 < 2)
  {
    while (1)
    {
      v29 = v27[1];
      if (v29 == 71)
      {
        if (*((_WORD *)v27 + 8) == 71)
          goto LABEL_92;
      }
      else if ((v29 & (*(_QWORD *)&v10 - 1)) != v25)
      {
        goto LABEL_94;
      }
      v27 = (uint64_t *)*v27;
      if (!v27)
        goto LABEL_94;
    }
  }
  while (2)
  {
    v28 = v27[1];
    if (v28 != 71)
    {
      if (v28 >= *(_QWORD *)&v10)
        v28 %= *(_QWORD *)&v10;
      if (v28 != v25)
        goto LABEL_94;
      goto LABEL_81;
    }
    if (*((_WORD *)v27 + 8) != 71)
    {
LABEL_81:
      v27 = (uint64_t *)*v27;
      if (!v27)
        goto LABEL_94;
      continue;
    }
    break;
  }
LABEL_92:
  if (*((_BYTE *)v27 + 18) == 2)
  {
    *(_DWORD *)((char *)v27 + 18) = (v9 << 16) | 2;
    v10 = (int8x8_t)a3[1];
  }
LABEL_94:
  if (!*(_QWORD *)&v10)
    goto LABEL_118;
  v30 = (uint8x8_t)vcnt_s8(v10);
  v30.i16[0] = vaddlv_u8(v30);
  v12 = v30.u32[0];
LABEL_96:
  if (v12 > 1)
  {
    v31 = 72;
    if (*(_QWORD *)&v10 <= 0x48uLL)
      v31 = 0x48u % v10.u8[0];
  }
  else
  {
    v31 = (v10.i32[0] - 1) & 0x48;
  }
  v32 = *(uint64_t ***)(*a3 + 8 * v31);
  if (v32)
  {
    v33 = *v32;
    if (v33)
    {
      if (v12 < 2)
      {
        v34 = *(_QWORD *)&v10 - 1;
        while (1)
        {
          v36 = v33[1];
          if (v36 == 72)
          {
            if (*((_WORD *)v33 + 8) == 72)
              goto LABEL_116;
          }
          else if ((v36 & v34) != v31)
          {
            goto LABEL_118;
          }
          v33 = (uint64_t *)*v33;
          if (!v33)
            goto LABEL_118;
        }
      }
      do
      {
        v35 = v33[1];
        if (v35 == 72)
        {
          if (*((_WORD *)v33 + 8) == 72)
          {
LABEL_116:
            if (*((_BYTE *)v33 + 18) == 2)
              *(_DWORD *)((char *)v33 + 18) = (v9 << 16) | 2;
            break;
          }
        }
        else
        {
          if (v35 >= *(_QWORD *)&v10)
            v35 %= *(_QWORD *)&v10;
          if (v35 != v31)
            break;
        }
        v33 = (uint64_t *)*v33;
      }
      while (v33);
    }
  }
LABEL_118:
  md::MapEngineMode::applyMapDataTypeSettings(a1, a2, a3);
}

uint64_t md::DaVinciBaseMapEngineMode::DaVinciBaseMapEngineMode(uint64_t a1, char a2, int a3, _QWORD *a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  int v15;
  char v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 v61;
  unsigned __int16 v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v9 = md::MapEngineMode::MapEngineMode(a1, a2);
  *(_QWORD *)v9 = &off_1E42A0578;
  *(_OWORD *)(v9 + 536) = 0u;
  *(_QWORD *)(v9 + 552) = 0x3F80000000000000;
  *(_BYTE *)(v9 + 560) = a5;
  *(_QWORD *)(v9 + 568) = *a4;
  v10 = a4[1];
  *(_QWORD *)(v9 + 576) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 536) = 100;
  *(_BYTE *)(a1 + 49) = 1;
  *(_DWORD *)(a1 + 52) = 21;
  if (a3)
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v13, "daVinciCameraController") & 1) != 0)
    {
      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "daVinciCameraControllerForceMercatorZoom");

      if (v15)
        v16 = 2;
      else
        v16 = 1;
    }
    else
    {

      v16 = 2;
    }
    v20 = (_QWORD *)(a1 + 128);
    v19 = *(_QWORD *)(a1 + 128);
    *(_BYTE *)(a1 + 224) = v16;
    *(_BYTE *)(a1 + 225) = 5;
    if (v19)
    {
      while (1)
      {
        while (1)
        {
          v21 = (_QWORD *)v19;
          v22 = *(unsigned __int16 *)(v19 + 26);
          if (v22 < 9)
            break;
          v19 = *v21;
          v20 = v21;
          if (!*v21)
            goto LABEL_18;
        }
        if (v22 == 8)
          break;
        v19 = v21[1];
        if (!v19)
        {
          v20 = v21 + 1;
          goto LABEL_18;
        }
      }
    }
    else
    {
      v21 = (_QWORD *)(a1 + 128);
LABEL_18:
      v23 = operator new(0x20uLL);
      v23[13] = 8;
      *(_QWORD *)v23 = 0;
      *((_QWORD *)v23 + 1) = 0;
      *((_QWORD *)v23 + 2) = v21;
      *v20 = v23;
      v24 = **(_QWORD **)(a1 + 120);
      if (v24)
      {
        *(_QWORD *)(a1 + 120) = v24;
        v23 = (_WORD *)*v20;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 128), (uint64_t *)v23);
      ++*(_QWORD *)(a1 + 136);
    }
    v18 = 1;
    v17 = 1;
  }
  else
  {
    *(_WORD *)(a1 + 224) = 1024;
    v17 = 4;
    v18 = 3;
  }
  LOWORD(v78) = 1;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>>>::__emplace_unique_key_args<md::TileSelectionTileSetType,std::piecewise_construct_t const&,std::tuple<md::TileSelectionTileSetType const&>,std::tuple<>>(a1 + 8, 1u, &v78)+ 18) = 1;
  LOWORD(v78) = 2560;
  *((_QWORD *)&v78 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 384), (unsigned __int8 *)&v78);
  LOWORD(v78) = 6410;
  *((_QWORD *)&v78 + 1) = 0x3FD657184AE74487;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 384), (unsigned __int8 *)&v78);
  LOWORD(v78) = 2560;
  *((_QWORD *)&v78 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 432), (unsigned __int8 *)&v78);
  LOWORD(v78) = 6410;
  *((_QWORD *)&v78 + 1) = 0x3FE0C152382D7365;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 432), (unsigned __int8 *)&v78);
  LOWORD(v78) = 768;
  *((_QWORD *)&v78 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v78);
  LOWORD(v78) = 3843;
  *((_QWORD *)&v78 + 1) = 0x3FE38C35418A5BF6;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v78);
  LOWORD(v78) = 4111;
  *((_QWORD *)&v78 + 1) = 0x3FF0C152382D7365;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v78);
  LOWORD(v78) = 4624;
  *((_QWORD *)&v78 + 1) = 0x3FF38C35418A5BF6;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v78);
  LOWORD(v78) = 6418;
  *((_QWORD *)&v78 + 1) = 0x3FF4F1A6C638D03FLL;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v78);
  v25 = a1 + 144;
  LOBYTE(v78) = 0;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0, &v78)+ 17) = 0;
  LOBYTE(v78) = 51;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x33u, &v78)+ 17) = 0;
  LOBYTE(v78) = 2;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 2u, &v78)+ 17) = 0;
  LOBYTE(v78) = 29;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x1Du, &v78)+ 17) = 0;
  LOBYTE(v78) = 34;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x22u, &v78)+ 17) = 0;
  LOBYTE(v78) = 33;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x21u, &v78)+ 17) = 0;
  LOBYTE(v78) = 32;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x20u, &v78)+ 17) = 0;
  LOBYTE(v78) = 31;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x1Fu, &v78)+ 17) = 0;
  LOBYTE(v78) = 28;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x1Cu, &v78)+ 17) = 0;
  LOBYTE(v78) = 49;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x31u, &v78)+ 17) = 0;
  LOBYTE(v78) = 36;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x24u, &v78)+ 17) = 0;
  if ((a3 & 1) != 0)
  {
    LOBYTE(v78) = 1;
    v26 = std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 1u, &v78);
  }
  else
  {
    LOBYTE(v78) = 3;
    v26 = std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 3u, &v78);
  }
  *((_BYTE *)v26 + 17) = 0;
  objc_msgSend(MEMORY[0x1E0D27368], "sharedPlatform");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend(v27, "isInternalInstall");

  if (v28)
  {
    *(_QWORD *)&v72 = 0x3A3A2962B4F0D965;
    *((_QWORD *)&v72 + 1) = "md::DisplayLinkVerificationLogic]";
    v73 = 32;
    *(_QWORD *)&v68 = 0x42BE82C40F9A8F80;
    *((_QWORD *)&v68 + 1) = "md::DisplayLinkVerificationContext]";
    *(_QWORD *)&v69 = 34;
    BYTE8(v69) = 1;
    v75 = (unint64_t)&v77;
    v76 = 0;
    *(_QWORD *)&v78 = &v79;
    *((_QWORD *)&v78 + 1) = 1;
    v79 = xmmword_1E42F7A80;
    *(_QWORD *)&v80 = 17;
    gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 0, (uint64_t)&v75, (uint64_t)&v78);
  }
  *(_QWORD *)&v72 = 0xEA624BC935BAF297;
  *((_QWORD *)&v72 + 1) = "md::mun::MuninLogic]";
  v29 = a1 + 232;
  v73 = 19;
  *(_QWORD *)&v68 = 0x8EA84A1BD3791AFALL;
  *((_QWORD *)&v68 + 1) = "md::mun::MuninContext]";
  *(_QWORD *)&v69 = 21;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 3;
  v81 = xmmword_1E42F8D08;
  v82 = unk_1E42F8D18;
  *(_QWORD *)&v83 = 20;
  v79 = xmmword_1E42F8CE8;
  v80 = unk_1E42F8CF8;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 1, (uint64_t)&v78, (uint64_t)&v75);
  *(_QWORD *)&v72 = 0xA5031243356EEB30;
  *((_QWORD *)&v72 + 1) = "md::ElevatedOverlayLogic]";
  v73 = 24;
  *(_QWORD *)&v68 = 0x1DCE255EA309B4ADLL;
  *((_QWORD *)&v68 + 1) = "md::ElevatedOverlayContext]";
  *(_QWORD *)&v69 = 26;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 2;
  v79 = xmmword_1E42F7A98;
  v80 = unk_1E42F7AA8;
  v81 = xmmword_1E42F7AB8;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 1, (uint64_t)&v78, (uint64_t)&v75);
  v75 = 0x79FE0BD9535D5C4DLL;
  v76 = "md::AnchorLogic]";
  v77 = 15;
  *(_QWORD *)&v78 = &v79;
  *(_QWORD *)&v72 = 0x63B6FE00C0848868;
  *((_QWORD *)&v72 + 1) = "md::AnchorContext]";
  v73 = 17;
  v74 = 1;
  *((_QWORD *)&v78 + 1) = 2;
  v79 = xmmword_1E42F87F0;
  v80 = unk_1E42F8800;
  v81 = xmmword_1E42F8810;
  *(_QWORD *)&v68 = &v69;
  *((_QWORD *)&v68 + 1) = 1;
  v69 = xmmword_1E42F8E88;
  *(_QWORD *)&v70 = 21;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v75, &v72, 0, (uint64_t)&v78, (uint64_t)&v68);
  *(_QWORD *)&v72 = 0x85B8F2BE93EDF996;
  *((_QWORD *)&v72 + 1) = "md::AssetLogic]";
  v73 = 14;
  *(_QWORD *)&v68 = 0x88B81689974D86F3;
  *((_QWORD *)&v68 + 1) = "md::AssetContext]";
  *(_QWORD *)&v69 = 16;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 1;
  v79 = xmmword_1E42F8C70;
  *(_QWORD *)&v80 = 29;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  *(_QWORD *)&v72 = 0x582FBDD84553E215;
  *((_QWORD *)&v72 + 1) = "md::AssetInjectionLogic]";
  v73 = 23;
  *(_QWORD *)&v68 = 0xD77FB76AFC10A710;
  *((_QWORD *)&v68 + 1) = "md::AssetInjectionContext]";
  *(_QWORD *)&v69 = 25;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 1;
  v79 = xmmword_1E42F8C58;
  *(_QWORD *)&v80 = 16;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  *(_QWORD *)&v72 = 0x8E629317B3523E63;
  *((_QWORD *)&v72 + 1) = "md::CameraLogic]";
  v73 = 15;
  *(_QWORD *)&v68 = 0x1AF456233693CD46;
  *((_QWORD *)&v68 + 1) = "md::CameraContext]";
  *(_QWORD *)&v69 = 17;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 1;
  v79 = xmmword_1E42F8820;
  *(_QWORD *)&v80 = 20;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  v75 = 0x17767EADC5B287BLL;
  v76 = "md::ElevationLogic]";
  v77 = 18;
  *(_QWORD *)&v78 = &v79;
  *(_QWORD *)&v72 = 0x8BD499FBD96FBB9ELL;
  *((_QWORD *)&v72 + 1) = "md::ElevationContext]";
  v73 = 20;
  v74 = 1;
  *((_QWORD *)&v78 + 1) = 2;
  v79 = xmmword_1E42F88C8;
  v80 = unk_1E42F88D8;
  v81 = xmmword_1E42F88E8;
  *(_QWORD *)&v68 = &v69;
  *((_QWORD *)&v68 + 1) = 1;
  v69 = xmmword_1E42F88F8;
  *(_QWORD *)&v70 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v75, &v72, 0, (uint64_t)&v78, (uint64_t)&v68);
  *(_QWORD *)&v68 = 0x701C95861FC50076;
  *((_QWORD *)&v68 + 1) = "md::GeometryLogic]";
  *(_QWORD *)&v69 = 17;
  *(_QWORD *)&v78 = 0x3070CB6B3C7F21D3;
  *((_QWORD *)&v78 + 1) = "md::GeometryContext]";
  *(_QWORD *)&v79 = 19;
  BYTE8(v79) = 1;
  *(_QWORD *)&v72 = &v73;
  *((_QWORD *)&v72 + 1) = 0;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v68, &v78, 0, (uint64_t)&v72, (uint64_t)&v75);
  v75 = 0x4AC7AB7561675F6;
  v76 = "md::GridLogic]";
  v77 = 13;
  *(_QWORD *)&v72 = 0x336A901A15BB7353;
  *((_QWORD *)&v72 + 1) = "md::GridContext]";
  v73 = 15;
  v74 = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 1;
  v79 = xmmword_1E42F8C28;
  *(_QWORD *)&v80 = 21;
  *(_QWORD *)&v68 = &v69;
  *((_QWORD *)&v68 + 1) = 1;
  v69 = xmmword_1E42F8B38;
  *(_QWORD *)&v70 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v75, &v72, 0, (uint64_t)&v78, (uint64_t)&v68);
  *(_QWORD *)&v72 = 0xC74495586E0C32F6;
  *((_QWORD *)&v72 + 1) = "md::HikingLogic]";
  v73 = 15;
  *(_QWORD *)&v68 = 0x92F3DC114CADB853;
  *((_QWORD *)&v68 + 1) = "md::HikingContext]";
  *(_QWORD *)&v69 = 17;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 5;
  v83 = xmmword_1E42F7B08;
  v84 = *(_OWORD *)&off_1E42F7B18;
  v85 = xmmword_1E42F7B28;
  *(_QWORD *)&v86 = 21;
  v79 = xmmword_1E42F7AC8;
  v80 = unk_1E42F7AD8;
  v81 = xmmword_1E42F7AE8;
  v82 = unk_1E42F7AF8;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  v75 = 0x8B855FB229857EA1;
  v76 = "md::IdentifiedResourceLogic]";
  v77 = 27;
  *(_QWORD *)&v78 = &v79;
  *(_QWORD *)&v72 = 0x12B1E486D3040E2CLL;
  *((_QWORD *)&v72 + 1) = "md::IdentifiedResourceContext]";
  v73 = 29;
  v74 = 1;
  *((_QWORD *)&v78 + 1) = 4;
  v81 = xmmword_1E42F8A98;
  v82 = unk_1E42F8AA8;
  v83 = xmmword_1E42F8AB8;
  v84 = *(_OWORD *)&off_1E42F8AC8;
  v79 = xmmword_1E42F8A78;
  v80 = unk_1E42F8A88;
  *(_QWORD *)&v68 = &v69;
  *((_QWORD *)&v68 + 1) = 1;
  v69 = xmmword_1E42F8AD8;
  *(_QWORD *)&v70 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v75, &v72, 0, (uint64_t)&v78, (uint64_t)&v68);
  v75 = 0x20A1ED17D78F322BLL;
  v76 = "md::LabelsLogic]";
  v77 = 15;
  *(_QWORD *)&v78 = &v79;
  *(_QWORD *)&v72 = 0xA588623CD4116DAELL;
  *((_QWORD *)&v72 + 1) = "md::LabelsContext]";
  v73 = 17;
  v74 = 1;
  *((_QWORD *)&v78 + 1) = 1;
  v79 = xmmword_1E42F8C28;
  *(_QWORD *)&v80 = 21;
  *(_QWORD *)&v68 = &v69;
  *((_QWORD *)&v68 + 1) = 1;
  v69 = xmmword_1E42F8C40;
  *(_QWORD *)&v70 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v75, &v72, 0, (uint64_t)&v78, (uint64_t)&v68);
  *(_QWORD *)&v72 = 0x91E65CD7F1A7A7FALL;
  *((_QWORD *)&v72 + 1) = "md::LightingLogic]";
  v73 = 17;
  *(_QWORD *)&v68 = 0x41E8D6E445F4145;
  *((_QWORD *)&v68 + 1) = "md::LightingLogicContext]";
  *(_QWORD *)&v69 = 24;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 4;
  v81 = xmmword_1E42F7B60;
  v82 = unk_1E42F7B70;
  v83 = xmmword_1E42F7B80;
  v84 = *(_OWORD *)&off_1E42F7B90;
  v79 = xmmword_1E42F7B40;
  v80 = unk_1E42F7B50;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  v75 = 0x653D1F33EF15EF04;
  v76 = "md::LoadingStatusLogic]";
  v77 = 22;
  *(_QWORD *)&v78 = &v79;
  *(_QWORD *)&v72 = 0x90B6813830DCB581;
  *((_QWORD *)&v72 + 1) = "md::LoadingStatusContext]";
  v73 = 24;
  v74 = 1;
  *((_QWORD *)&v78 + 1) = 1;
  v79 = xmmword_1E42F8C58;
  *(_QWORD *)&v80 = 16;
  *(_QWORD *)&v68 = &v69;
  *((_QWORD *)&v68 + 1) = 1;
  v69 = xmmword_1E42F8C70;
  *(_QWORD *)&v70 = 29;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v75, &v72, 0, (uint64_t)&v78, (uint64_t)&v68);
  *(_QWORD *)&v72 = 0xBDB8C71631E0AA6CLL;
  *((_QWORD *)&v72 + 1) = "md::MapZoomLevelStyleLogic]";
  v73 = 26;
  *(_QWORD *)&v68 = 0xF0AA2DB42EB710AFLL;
  *((_QWORD *)&v68 + 1) = "md::MapZoomLevelStyleLogicContext]";
  *(_QWORD *)&v69 = 33;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 2;
  v79 = xmmword_1E42F8898;
  v80 = unk_1E42F88A8;
  v81 = xmmword_1E42F88B8;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  *(_QWORD *)&v72 = 0xA1851987210F8D55;
  *((_QWORD *)&v72 + 1) = "md::MaterialLogic]";
  v73 = 17;
  *(_QWORD *)&v68 = 0xD2404CDD1F9A6950;
  *((_QWORD *)&v68 + 1) = "md::MaterialContext]";
  *(_QWORD *)&v69 = 19;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 5;
  v83 = xmmword_1E42F7BE0;
  v84 = *(_OWORD *)&off_1E42F7BF0;
  v85 = xmmword_1E42F7C00;
  *(_QWORD *)&v86 = 21;
  v79 = xmmword_1E42F7BA0;
  v80 = unk_1E42F7BB0;
  v81 = xmmword_1E42F7BC0;
  v82 = unk_1E42F7BD0;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  *(_QWORD *)&v72 = 0x87668FB4D087F775;
  *((_QWORD *)&v72 + 1) = "md::OverlaysLogic]";
  v73 = 17;
  *(_QWORD *)&v68 = 0xADE8F13E6C18D970;
  *((_QWORD *)&v68 + 1) = "md::OverlaysContext]";
  *(_QWORD *)&v69 = 19;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 4;
  v81 = xmmword_1E42F8CA8;
  v82 = unk_1E42F8CB8;
  v83 = xmmword_1E42F8CC8;
  v84 = *(_OWORD *)&off_1E42F8CD8;
  v79 = xmmword_1E42F8C88;
  v80 = unk_1E42F8C98;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  *(_QWORD *)&v72 = 0x3B36D43422893971;
  *((_QWORD *)&v72 + 1) = "md::DrapingLogic]";
  v73 = 16;
  *(_QWORD *)&v68 = 0x1B9039CBDAB12E5CLL;
  *((_QWORD *)&v68 + 1) = "md::DrapingContext]";
  *(_QWORD *)&v69 = 18;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 4;
  v81 = xmmword_1E42F7C38;
  v82 = unk_1E42F7C48;
  v83 = xmmword_1E42F7C58;
  v84 = *(_OWORD *)&off_1E42F7C68;
  v79 = xmmword_1E42F7C18;
  v80 = unk_1E42F7C28;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  *(_QWORD *)&v72 = 0x3C2657D301A7BCF4;
  *((_QWORD *)&v72 + 1) = "md::PolygonLogic]";
  v73 = 16;
  *(_QWORD *)&v68 = 0x401D4CCE847AB1D1;
  *((_QWORD *)&v68 + 1) = "md::PolygonContext]";
  *(_QWORD *)&v69 = 18;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 2;
  v79 = xmmword_1E42F7C78;
  v80 = unk_1E42F7C88;
  v81 = xmmword_1E42F7C98;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  *(_QWORD *)&v72 = 0x88BE5DF80D25DA79;
  *((_QWORD *)&v72 + 1) = "md::MeshRenderableLogic]";
  v73 = 23;
  *(_QWORD *)&v68 = 0xF014CCE28176CA44;
  *((_QWORD *)&v68 + 1) = "md::MeshRenderableContext]";
  *(_QWORD *)&v69 = 25;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 9;
  v89 = xmmword_1E42F7D48;
  v90 = *(_OWORD *)&off_1E42F7D58;
  v91 = xmmword_1E42F7D68;
  v92 = 15;
  v85 = xmmword_1E42F7D08;
  v86 = unk_1E42F7D18;
  v87 = xmmword_1E42F7D28;
  v88 = unk_1E42F7D38;
  v81 = xmmword_1E42F7CC8;
  v82 = unk_1E42F7CD8;
  v83 = xmmword_1E42F7CE8;
  v84 = *(_OWORD *)&off_1E42F7CF8;
  v79 = xmmword_1E42F7CA8;
  v80 = unk_1E42F7CB8;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  v75 = 0xBEC1A12372CEEC00;
  v76 = "md::NavigationLogic]";
  v77 = 19;
  *(_QWORD *)&v78 = &v79;
  *(_QWORD *)&v72 = 0x1B8B241A8D896A1DLL;
  *((_QWORD *)&v72 + 1) = "md::NavigationContext]";
  v73 = 21;
  v74 = 1;
  *((_QWORD *)&v78 + 1) = 3;
  v81 = xmmword_1E42F8858;
  v82 = unk_1E42F8868;
  *(_QWORD *)&v83 = 17;
  v79 = xmmword_1E42F8838;
  v80 = unk_1E42F8848;
  *(_QWORD *)&v68 = &v69;
  *((_QWORD *)&v68 + 1) = 1;
  v69 = xmmword_1E42F8880;
  *(_QWORD *)&v70 = 23;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v75, &v72, 0, (uint64_t)&v78, (uint64_t)&v68);
  v75 = 0x7173CF8D2BE8FE53;
  v76 = "md::RouteLineLogic]";
  v77 = 18;
  *(_QWORD *)&v78 = &v79;
  *(_QWORD *)&v72 = 0x8E4587A431F9C696;
  *((_QWORD *)&v72 + 1) = "md::RouteLineContext]";
  v73 = 20;
  v74 = 1;
  *((_QWORD *)&v78 + 1) = 4;
  v81 = xmmword_1E42F8930;
  v82 = unk_1E42F8940;
  v83 = xmmword_1E42F8950;
  v84 = *(_OWORD *)&off_1E42F8960;
  v79 = xmmword_1E42F8910;
  v80 = unk_1E42F8920;
  *(_QWORD *)&v68 = &v69;
  *((_QWORD *)&v68 + 1) = 2;
  v69 = xmmword_1E42F8970;
  v70 = unk_1E42F8980;
  v71 = xmmword_1E42F8990;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v75, &v72, 0, (uint64_t)&v78, (uint64_t)&v68);
  *(_QWORD *)&v72 = 0x1FCDF994595CDE24;
  *((_QWORD *)&v72 + 1) = "md::PuckLocationAnimationTracingLogic]";
  v73 = 37;
  *(_QWORD *)&v68 = 0xA81ACD73F9C92AA1;
  *((_QWORD *)&v68 + 1) = "md::PuckLocationAnimationTracingContext]";
  *(_QWORD *)&v69 = 39;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 1;
  v79 = xmmword_1E42F8E88;
  *(_QWORD *)&v80 = 21;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  *(_QWORD *)&v72 = 0xDEBD99099DA2C65BLL;
  *((_QWORD *)&v72 + 1) = "md::RegistryLogic]";
  v73 = 17;
  *(_QWORD *)&v68 = 0xFBD83FDA8879FF7ELL;
  *((_QWORD *)&v68 + 1) = "md::RegistryContext]";
  *(_QWORD *)&v69 = 19;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 1;
  v79 = xmmword_1E42F8C58;
  *(_QWORD *)&v80 = 16;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  *(_QWORD *)&v72 = 0x8B45D3D7944796A2;
  *((_QWORD *)&v72 + 1) = "md::PendingRegistryLogic]";
  v73 = 24;
  *(_QWORD *)&v68 = 0xA8300AA8F44B09FFLL;
  *((_QWORD *)&v68 + 1) = "md::PendingRegistryContext]";
  *(_QWORD *)&v69 = 26;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 1;
  v79 = xmmword_1E42F8C10;
  *(_QWORD *)&v80 = 23;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  *(_QWORD *)&v72 = 0x8D737D0C0FC52C0CLL;
  *((_QWORD *)&v72 + 1) = "md::EntityDebugHighlightLogic]";
  v73 = 29;
  *(_QWORD *)&v68 = 0xE75FAB3171C16149;
  *((_QWORD *)&v68 + 1) = "md::EntityDebugHighlightContext]";
  *(_QWORD *)&v69 = 31;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 4;
  v81 = xmmword_1E42F7DA0;
  v82 = unk_1E42F7DB0;
  v83 = xmmword_1E42F7DC0;
  v84 = *(_OWORD *)&off_1E42F7DD0;
  v79 = xmmword_1E42F7D80;
  v80 = unk_1E42F7D90;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  *(_QWORD *)&v68 = 0x5CBBA028798243FLL;
  *((_QWORD *)&v68 + 1) = "md::RouteOverlayLogic]";
  *(_QWORD *)&v69 = 21;
  *(_QWORD *)&v78 = 0x13043386C0978CC2;
  *((_QWORD *)&v78 + 1) = "md::RouteOverlayContext]";
  *(_QWORD *)&v79 = 23;
  BYTE8(v79) = 1;
  *(_QWORD *)&v72 = &v73;
  *((_QWORD *)&v72 + 1) = 0;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v68, &v78, 0, (uint64_t)&v72, (uint64_t)&v75);
  *(_QWORD *)&v68 = 0x90C2E4CBBB63E301;
  *((_QWORD *)&v68 + 1) = "md::LayerDataLogic]";
  *(_QWORD *)&v69 = 18;
  *(_QWORD *)&v78 = 0x7851AF310F49C988;
  *((_QWORD *)&v78 + 1) = "md::LayerDataLogicContext]";
  *(_QWORD *)&v79 = 25;
  BYTE8(v79) = 1;
  *(_QWORD *)&v72 = &v73;
  *((_QWORD *)&v72 + 1) = 0;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v68, &v78, 0, (uint64_t)&v72, (uint64_t)&v75);
  *(_QWORD *)&v72 = 0xAF46DE79C836B0D8;
  *((_QWORD *)&v72 + 1) = "md::TileSelectionLogic]";
  v73 = 22;
  *(_QWORD *)&v68 = 0x64780CBD71DF7CF5;
  *((_QWORD *)&v68 + 1) = "md::TileSelectionContext]";
  *(_QWORD *)&v69 = 24;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 3;
  v81 = xmmword_1E42F8B10;
  v82 = unk_1E42F8B20;
  *(_QWORD *)&v83 = 21;
  v79 = xmmword_1E42F8AF0;
  v80 = unk_1E42F8B00;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  v30 = 0xCBF29CE484222325;
  v31 = 0x26u;
  do
    v30 = 0x100000001B3 * (v30 ^ aStdStringViewG_927[v31++]);
  while (v31 != 368);
  v75 = v30;
  v76 = "md::TileDependencyLogicImpl<md::TileDependencies<>, md::TileDependencies<md::TileDependency<md::MapDataType::Flyover, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverMetadata, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverDsm, md::FlyoverTileDataResolverContext>>>]";
  v77 = 330;
  *(_QWORD *)&v72 = 0x8677AD8BA9352C1DLL;
  *((_QWORD *)&v72 + 1) = "md::ResolvedTileSelectionContext]";
  v73 = 32;
  v74 = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 1;
  v79 = xmmword_1E42F8B38;
  *(_QWORD *)&v80 = 24;
  *(_QWORD *)&v68 = &v69;
  *((_QWORD *)&v68 + 1) = 1;
  v69 = xmmword_1E42F8B50;
  *(_QWORD *)&v70 = 34;
  gdc::LogicExecutionGraphBuilder::addLogic(v29, &v75, &v72, 0, (uint64_t)&v78, (uint64_t)&v68);
  *(_QWORD *)&v72 = 0x87BA2765F9E38E05;
  *((_QWORD *)&v72 + 1) = "md::PendingSceneLogic]";
  v73 = 21;
  *(_QWORD *)&v68 = 0x9F2276D081C2CB20;
  *((_QWORD *)&v68 + 1) = "md::PendingSceneContext]";
  *(_QWORD *)&v69 = 23;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 5;
  v83 = xmmword_1E42F8BA8;
  v84 = *(_OWORD *)&off_1E42F8BB8;
  v85 = xmmword_1E42F8BC8;
  *(_QWORD *)&v86 = 25;
  v79 = xmmword_1E42F8B68;
  v80 = unk_1E42F8B78;
  v81 = xmmword_1E42F8B88;
  v82 = unk_1E42F8B98;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v29, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  *(_QWORD *)&v72 = 0x1F3242C85D9F2F62;
  *((_QWORD *)&v72 + 1) = "md::SceneQueryLogic]";
  v73 = 19;
  *(_QWORD *)&v68 = 0xDFC317497CF9A4BFLL;
  *((_QWORD *)&v68 + 1) = "md::SceneQueryContext]";
  *(_QWORD *)&v69 = 21;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 5;
  v83 = xmmword_1E42F7E20;
  v84 = *(_OWORD *)&off_1E42F7E30;
  v85 = xmmword_1E42F7E40;
  *(_QWORD *)&v86 = 19;
  v79 = xmmword_1E42F7DE0;
  v80 = unk_1E42F7DF0;
  v81 = xmmword_1E42F7E00;
  v82 = unk_1E42F7E10;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v29, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  *(_QWORD *)&v68 = 0xD2443A61CED86C69;
  *((_QWORD *)&v68 + 1) = "md::SettingsLogic]";
  *(_QWORD *)&v69 = 17;
  *(_QWORD *)&v78 = 0xC97B9E962ADF4AD4;
  *((_QWORD *)&v78 + 1) = "md::SettingsContext]";
  *(_QWORD *)&v79 = 19;
  BYTE8(v79) = 1;
  *(_QWORD *)&v72 = &v73;
  *((_QWORD *)&v72 + 1) = 0;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v29, (unint64_t *)&v68, &v78, 0, (uint64_t)&v72, (uint64_t)&v75);
  *(_QWORD *)&v68 = 0x3F812BA5755E8568;
  *((_QWORD *)&v68 + 1) = "md::SharedResourcesLogic]";
  *(_QWORD *)&v69 = 24;
  *(_QWORD *)&v78 = 0xA60DDA5A69582425;
  *((_QWORD *)&v78 + 1) = "md::SharedResourcesContext]";
  *(_QWORD *)&v79 = 26;
  BYTE8(v79) = 1;
  *(_QWORD *)&v72 = &v73;
  *((_QWORD *)&v72 + 1) = 0;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v29, (unint64_t *)&v68, &v78, 0, (uint64_t)&v72, (uint64_t)&v75);
  *(_QWORD *)&v72 = 0xDAD5CEE0DC5FF509;
  *((_QWORD *)&v72 + 1) = "md::SkyLogic]";
  v73 = 12;
  *(_QWORD *)&v68 = 0x7C7EC6C7C111B0D0;
  *((_QWORD *)&v68 + 1) = "md::SkyLogicContext]";
  *(_QWORD *)&v69 = 19;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 2;
  v79 = xmmword_1E42F8898;
  v80 = unk_1E42F88A8;
  v81 = xmmword_1E42F88B8;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v29, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  *(_QWORD *)&v68 = 0x2FED70A4459DFCA1;
  *((_QWORD *)&v68 + 1) = "md::StyleLogic]";
  *(_QWORD *)&v69 = 14;
  *(_QWORD *)&v78 = 0xE42D19AFCA302E68;
  *((_QWORD *)&v78 + 1) = "md::StyleLogicContext]";
  *(_QWORD *)&v79 = 21;
  BYTE8(v79) = 1;
  *(_QWORD *)&v72 = &v73;
  *((_QWORD *)&v72 + 1) = 0;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v29, (unint64_t *)&v68, &v78, 0, (uint64_t)&v72, (uint64_t)&v75);
  *(_QWORD *)&v72 = 0x33D44727E59BE9E9;
  *((_QWORD *)&v72 + 1) = "md::PuckLogic]";
  v73 = 13;
  *(_QWORD *)&v68 = 0x9AEE7E062376E454;
  *((_QWORD *)&v68 + 1) = "md::PuckContext]";
  *(_QWORD *)&v69 = 15;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 9;
  v89 = xmmword_1E42F8A40;
  v90 = *(_OWORD *)&off_1E42F8A50;
  v91 = xmmword_1E42F8A60;
  v92 = 24;
  v85 = xmmword_1E42F8A00;
  v86 = unk_1E42F8A10;
  v87 = xmmword_1E42F8A20;
  v88 = unk_1E42F8A30;
  v81 = xmmword_1E42F89C0;
  v82 = unk_1E42F89D0;
  v83 = xmmword_1E42F89E0;
  v84 = *(_OWORD *)&off_1E42F89F0;
  v79 = xmmword_1E42F89A0;
  v80 = unk_1E42F89B0;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v29, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  *(_QWORD *)&v68 = 0x6139471CB89383CBLL;
  *((_QWORD *)&v68 + 1) = "md::NonTiledAssetLogic]";
  *(_QWORD *)&v69 = 22;
  *(_QWORD *)&v78 = 0x932EE29454ABDC4ELL;
  *((_QWORD *)&v78 + 1) = "md::NonTiledAssetContext]";
  *(_QWORD *)&v79 = 24;
  BYTE8(v79) = 1;
  *(_QWORD *)&v72 = &v73;
  *((_QWORD *)&v72 + 1) = 0;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v29, (unint64_t *)&v68, &v78, 0, (uint64_t)&v72, (uint64_t)&v75);
  *(_QWORD *)&v72 = 0x738A703709805788;
  *((_QWORD *)&v72 + 1) = "md::LocalNorthLogic]";
  v73 = 19;
  *(_QWORD *)&v68 = 0xC81F81A7CB7767BBLL;
  *((_QWORD *)&v68 + 1) = "md::LocalNorthLogicContext]";
  *(_QWORD *)&v69 = 26;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 3;
  v81 = xmmword_1E42F7E78;
  v82 = unk_1E42F7E88;
  *(_QWORD *)&v83 = 17;
  v79 = xmmword_1E42F7E58;
  v80 = unk_1E42F7E68;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v29, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  *(_QWORD *)&v72 = 0x652FEFC5C602CC21;
  *((_QWORD *)&v72 + 1) = "md::StandardLogic]";
  v73 = 17;
  *(_QWORD *)&v68 = 0xFFA06A69D924B0E8;
  *((_QWORD *)&v68 + 1) = "md::StandardLogicContext]";
  *(_QWORD *)&v69 = 24;
  BYTE8(v69) = 1;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 2;
  v79 = xmmword_1E42F7EA0;
  v80 = unk_1E42F7EB0;
  v81 = xmmword_1E42F7EC0;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v29, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
  *(_QWORD *)&v68 = 0x41948F4CADE567A1;
  *((_QWORD *)&v68 + 1) = "md::DebugDrawLogic]";
  *(_QWORD *)&v69 = 18;
  *(_QWORD *)&v78 = 0x3619066E3FB5F2CLL;
  *((_QWORD *)&v78 + 1) = "md::DebugDrawContext]";
  *(_QWORD *)&v79 = 20;
  BYTE8(v79) = 1;
  *(_QWORD *)&v72 = &v73;
  *((_QWORD *)&v72 + 1) = 0;
  v75 = (unint64_t)&v77;
  v76 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v29, (unint64_t *)&v68, &v78, 0, (uint64_t)&v72, (uint64_t)&v75);
  v75 = 0x2B7C4502BD3C99C6;
  v76 = "md::ResolvedSceneLogic]";
  *(_QWORD *)&v72 = 0x99BED48DEFBBD82BLL;
  *((_QWORD *)&v72 + 1) = "md::SceneContext]";
  v73 = 16;
  v74 = 1;
  *(_QWORD *)&v68 = &v69;
  *((_QWORD *)&v68 + 1) = 1;
  v69 = xmmword_1E42F8C10;
  *(_QWORD *)&v70 = 23;
  v77 = 22;
  *(_QWORD *)&v78 = &v79;
  *((_QWORD *)&v78 + 1) = 2;
  v79 = xmmword_1E42F8BE0;
  v80 = unk_1E42F8BF0;
  v81 = xmmword_1E42F8C00;
  gdc::LogicExecutionGraphBuilder::addLogic(v29, &v75, &v72, 0, (uint64_t)&v68, (uint64_t)&v78);
  if (*(_BYTE *)(a1 + 560))
  {
    *(_QWORD *)&v72 = 0x3BC31E741FCE930;
    *((_QWORD *)&v72 + 1) = "md::CollectMapDataLogic<md::MapDataType::DaVinciGround>]";
    v73 = 55;
    *(_QWORD *)&v68 = 0x9052DC4F017D3735;
    *((_QWORD *)&v68 + 1) = "md::CollectMapDataContext<md::MapDataType::DaVinciGround>]";
    *(_QWORD *)&v69 = 57;
    BYTE8(v69) = 1;
    *(_QWORD *)&v78 = &v79;
    *((_QWORD *)&v78 + 1) = 1;
    v79 = xmmword_1E42F8C58;
    *(_QWORD *)&v80 = 16;
    v75 = (unint64_t)&v77;
    v76 = 0;
    gdc::LogicExecutionGraphBuilder::addLogic(v29, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
    v75 = 0x6E358E41B8F27CBFLL;
    v76 = "md::CollectRenderablesLogic<md::MapDataType::DaVinciGround, md::DaVinciGroundRenderable>]";
    v77 = 88;
    *(_QWORD *)&v78 = &v79;
    *(_QWORD *)&v72 = 0xF20ACC1C64F7EF84;
    *((_QWORD *)&v72 + 1) = "md::CollectRenderablesLogicContext<md::MapDataType::DaVinciGround>]";
    v73 = 66;
    v74 = 1;
    *((_QWORD *)&v78 + 1) = 1;
    v79 = xmmword_1E42F7F18;
    *(_QWORD *)&v80 = 19;
    *(_QWORD *)&v68 = &v69;
    *((_QWORD *)&v68 + 1) = 1;
    v69 = xmmword_1E42F7ED0;
    *(_QWORD *)&v70 = 57;
    gdc::LogicExecutionGraphBuilder::addLogic(v29, &v75, &v72, 0, (uint64_t)&v78, (uint64_t)&v68);
    *(_QWORD *)&v72 = 0x1322DEACE457CC27;
    *((_QWORD *)&v72 + 1) = "md::CollectMapDataLogic<md::MapDataType::DaVinciGroundGlobe>]";
    v73 = 60;
    *(_QWORD *)&v68 = 0x412AFB1345D08930;
    *((_QWORD *)&v68 + 1) = "md::CollectMapDataContext<md::MapDataType::DaVinciGroundGlobe>]";
    *(_QWORD *)&v69 = 62;
    BYTE8(v69) = 1;
    *(_QWORD *)&v78 = &v79;
    *((_QWORD *)&v78 + 1) = 1;
    v79 = xmmword_1E42F8C58;
    *(_QWORD *)&v80 = 16;
    v75 = (unint64_t)&v77;
    v76 = 0;
    gdc::LogicExecutionGraphBuilder::addLogic(v29, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
    v75 = 0x8555A05B7A670CC0;
    v76 = "md::CollectRenderablesLogic<md::MapDataType::DaVinciGroundGlobe, md::DaVinciGroundRenderable>]";
    v77 = 93;
    *(_QWORD *)&v78 = &v79;
    *(_QWORD *)&v72 = 0x521897C68EA476F3;
    *((_QWORD *)&v72 + 1) = "md::CollectRenderablesLogicContext<md::MapDataType::DaVinciGroundGlobe>]";
    v73 = 71;
    v74 = 1;
    *((_QWORD *)&v78 + 1) = 1;
    v79 = xmmword_1E42F7F18;
    *(_QWORD *)&v80 = 19;
    *(_QWORD *)&v68 = &v69;
    *((_QWORD *)&v68 + 1) = 1;
    v69 = xmmword_1E42F7EE8;
    *(_QWORD *)&v70 = 62;
    gdc::LogicExecutionGraphBuilder::addLogic(v29, &v75, &v72, 0, (uint64_t)&v78, (uint64_t)&v68);
    *(_QWORD *)&v72 = 0xF1FE4046E5C81374;
    *((_QWORD *)&v72 + 1) = "md::CollectMapDataLogic<md::MapDataType::DaVinciBuildings>]";
    v73 = 58;
    *(_QWORD *)&v68 = 0x5B0BFF71B88387C7;
    *((_QWORD *)&v68 + 1) = "md::CollectMapDataContext<md::MapDataType::DaVinciBuildings>]";
    *(_QWORD *)&v69 = 60;
    BYTE8(v69) = 1;
    *(_QWORD *)&v78 = &v79;
    *((_QWORD *)&v78 + 1) = 1;
    v79 = xmmword_1E42F8C58;
    *(_QWORD *)&v80 = 16;
    v75 = (unint64_t)&v77;
    v76 = 0;
    gdc::LogicExecutionGraphBuilder::addLogic(v29, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
    v75 = 0x20B829C32C58D309;
    v76 = "md::CollectRenderablesLogic<md::MapDataType::DaVinciBuildings, md::DaVinciGroundRenderable>]";
    v77 = 91;
    *(_QWORD *)&v78 = &v79;
    *(_QWORD *)&v72 = 0xF5BDE3F396AD5C40;
    *((_QWORD *)&v72 + 1) = "md::CollectRenderablesLogicContext<md::MapDataType::DaVinciBuildings>]";
    v73 = 69;
    v74 = 1;
    *((_QWORD *)&v78 + 1) = 1;
    v79 = xmmword_1E42F7F18;
    *(_QWORD *)&v80 = 19;
    *(_QWORD *)&v68 = &v69;
    *((_QWORD *)&v68 + 1) = 1;
    v69 = xmmword_1E42F7F00;
    *(_QWORD *)&v70 = 60;
    gdc::LogicExecutionGraphBuilder::addLogic(v29, &v75, &v72, 0, (uint64_t)&v78, (uint64_t)&v68);
    *(_QWORD *)&v72 = 0xB4DD094975FB84EALL;
    *((_QWORD *)&v72 + 1) = "md::CollectMapDataLogic<md::MapDataType::InjectedFeatures>]";
    v73 = 58;
    *(_QWORD *)&v68 = 0x5A88E3C88DA0DCA1;
    *((_QWORD *)&v68 + 1) = "md::CollectMapDataContext<md::MapDataType::InjectedFeatures>]";
    *(_QWORD *)&v69 = 60;
    BYTE8(v69) = 1;
    *(_QWORD *)&v78 = &v79;
    *((_QWORD *)&v78 + 1) = 1;
    v79 = xmmword_1E42F8C58;
    *(_QWORD *)&v80 = 16;
    v75 = (unint64_t)&v77;
    v76 = 0;
    gdc::LogicExecutionGraphBuilder::addLogic(v29, (unint64_t *)&v72, &v68, 0, (uint64_t)&v78, (uint64_t)&v75);
    v75 = 0x13C9C3CF7E2D459BLL;
    v76 = "md::CollectRenderablesLogic<md::MapDataType::InjectedFeatures, md::DaVinciGroundRenderable>]";
    v77 = 91;
    *(_QWORD *)&v78 = &v79;
    *(_QWORD *)&v72 = 0x552ACF95227023D6;
    *((_QWORD *)&v72 + 1) = "md::CollectRenderablesLogicContext<md::MapDataType::InjectedFeatures>]";
    v73 = 69;
    v74 = 1;
    *((_QWORD *)&v78 + 1) = 1;
    v79 = xmmword_1E42F7F18;
    *(_QWORD *)&v80 = 19;
    *(_QWORD *)&v68 = &v69;
    *((_QWORD *)&v68 + 1) = 1;
    v69 = xmmword_1E42F7F30;
    *(_QWORD *)&v70 = 60;
    gdc::LogicExecutionGraphBuilder::addLogic(v29, &v75, &v72, 0, (uint64_t)&v78, (uint64_t)&v68);
  }
  LOBYTE(v78) = 44;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v25, 0x2Cu, &v78)+ 17) = 1;
  LOBYTE(v78) = 40;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v25, 0x28u, &v78)+ 17) = 1;
  LOBYTE(v78) = 39;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v25, 0x27u, &v78)+ 17) = 1;
  LOBYTE(v78) = 50;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v25, 0x32u, &v78)+ 17) = 1;
  LOBYTE(v78) = 18;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v25, 0x12u, &v78)+ 17) = 1;
  LOBYTE(v78) = 30;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v25, 0x1Eu, &v78)+ 17) = 2;
  LOBYTE(v78) = 52;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v25, 0x34u, &v78)+ 17) = 2;
  LOBYTE(v78) = 38;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v25, 0x26u, &v78)+ 17) = 2;
  LOBYTE(v78) = 37;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v25, 0x25u, &v78)+ 17) = 2;
  LOWORD(v78) = 44;
  WORD1(v78) = v17;
  WORD2(v78) = 46;
  WORD3(v78) = v17;
  WORD4(v78) = 50;
  WORD5(v78) = v17;
  WORD6(v78) = 33;
  HIWORD(v78) = v17;
  LODWORD(v79) = 327714;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x2Cu, &v78)+ 18) = v17 << 16;
  v32 = WORD3(v78);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v78), (_WORD *)&v78 + 2)+ 18) = v32 << 16;
  v33 = WORD5(v78);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v78), (_WORD *)&v78 + 4)+ 18) = v33 << 16;
  v34 = HIWORD(v78);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v78), (_WORD *)&v78 + 6)+ 18) = v34 << 16;
  v35 = WORD1(v79);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v79, &v79)+ 18) = v35 << 16;
  WORD2(v78) = 57;
  LODWORD(v78) = 327703;
  WORD3(v78) = v17;
  WORD4(v78) = 58;
  WORD5(v78) = v17;
  WORD6(v78) = 27;
  HIWORD(v78) = v17;
  LOWORD(v79) = 21;
  WORD1(v79) = v17;
  WORD2(v79) = 22;
  WORD3(v79) = v17;
  WORD4(v79) = 43;
  WORD5(v79) = v17;
  WORD6(v79) = 49;
  HIWORD(v79) = v17;
  LOWORD(v80) = 55;
  WORD1(v80) = v17;
  WORD2(v80) = 56;
  WORD3(v80) = v17;
  WORD4(v80) = 62;
  WORD5(v80) = v17;
  WORD6(v80) = 29;
  HIWORD(v80) = v17;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x17u, &v78)+ 18) = 327681;
  v36 = WORD3(v78);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v78), (_WORD *)&v78 + 2)+ 18) = (v36 << 16) | 1;
  v37 = WORD5(v78);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v78), (_WORD *)&v78 + 4)+ 18) = (v37 << 16) | 1;
  v38 = HIWORD(v78);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v78), (_WORD *)&v78 + 6)+ 18) = (v38 << 16) | 1;
  v39 = WORD1(v79);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v79, &v79)+ 18) = (v39 << 16) | 1;
  v40 = WORD3(v79);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v79), (_WORD *)&v79 + 2)+ 18) = (v40 << 16) | 1;
  v41 = WORD5(v79);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v79), (_WORD *)&v79 + 4)+ 18) = (v41 << 16) | 1;
  v42 = HIWORD(v79);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v79), (_WORD *)&v79 + 6)+ 18) = (v42 << 16) | 1;
  v43 = WORD1(v80);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v80, &v80)+ 18) = (v43 << 16) | 1;
  v44 = WORD3(v80);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v80), (_WORD *)&v80 + 2)+ 18) = (v44 << 16) | 1;
  v45 = WORD5(v80);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v80), (_WORD *)&v80 + 4)+ 18) = (v45 << 16) | 1;
  v46 = HIWORD(v80);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v80), (_WORD *)&v80 + 6)+ 18) = (v46 << 16) | 1;
  LOWORD(v78) = 51;
  WORD1(v78) = v17;
  WORD2(v78) = 54;
  WORD3(v78) = v17;
  WORD4(v78) = 63;
  WORD5(v78) = v17;
  WORD6(v78) = 35;
  HIWORD(v78) = v18;
  LOWORD(v79) = 20;
  WORD1(v79) = v17;
  WORD2(v79) = 24;
  WORD3(v79) = v17;
  WORD4(v79) = 69;
  WORD5(v79) = v17;
  WORD6(v79) = 48;
  HIWORD(v79) = v17;
  LOWORD(v80) = 74;
  WORD1(v80) = v17;
  WORD2(v80) = 70;
  WORD3(v80) = v17;
  WORD4(v80) = 47;
  WORD5(v80) = v17;
  WORD6(v80) = 66;
  HIWORD(v80) = v17;
  LOWORD(v81) = 80;
  WORD1(v81) = v17;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x33u, &v78)+ 18) = ((unsigned __int16)v17 << 16) | 2;
  v47 = WORD3(v78);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v78), (_WORD *)&v78 + 2)+ 18) = (v47 << 16) | 2;
  v48 = WORD5(v78);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v78), (_WORD *)&v78 + 4)+ 18) = (v48 << 16) | 2;
  v49 = HIWORD(v78);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v78), (_WORD *)&v78 + 6)+ 18) = (v49 << 16) | 2;
  v50 = WORD1(v79);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v79, &v79)+ 18) = (v50 << 16) | 2;
  v51 = WORD3(v79);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v79), (_WORD *)&v79 + 2)+ 18) = (v51 << 16) | 2;
  v52 = WORD5(v79);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v79), (_WORD *)&v79 + 4)+ 18) = (v52 << 16) | 2;
  v53 = HIWORD(v79);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v79), (_WORD *)&v79 + 6)+ 18) = (v53 << 16) | 2;
  v54 = WORD1(v80);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v80, &v80)+ 18) = (v54 << 16) | 2;
  v55 = WORD3(v80);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v80), (_WORD *)&v80 + 2)+ 18) = (v55 << 16) | 2;
  v56 = WORD5(v80);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v80), (_WORD *)&v80 + 4)+ 18) = (v56 << 16) | 2;
  v57 = HIWORD(v80);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v80), (_WORD *)&v80 + 6)+ 18) = (v57 << 16) | 2;
  v58 = WORD1(v81);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v81, &v81)+ 18) = (v58 << 16) | 2;
  v59 = operator new();
  v60 = v59;
  *(_OWORD *)(v59 + 416) = 0u;
  *(_OWORD *)(v59 + 432) = 0u;
  *(_OWORD *)(v59 + 384) = 0u;
  *(_OWORD *)(v59 + 400) = 0u;
  *(_OWORD *)(v59 + 352) = 0u;
  *(_OWORD *)(v59 + 368) = 0u;
  *(_OWORD *)(v59 + 320) = 0u;
  *(_OWORD *)(v59 + 336) = 0u;
  *(_OWORD *)(v59 + 288) = 0u;
  *(_OWORD *)(v59 + 304) = 0u;
  *(_OWORD *)(v59 + 256) = 0u;
  *(_OWORD *)(v59 + 272) = 0u;
  *(_OWORD *)(v59 + 224) = 0u;
  *(_OWORD *)(v59 + 240) = 0u;
  *(_OWORD *)(v59 + 192) = 0u;
  *(_OWORD *)(v59 + 208) = 0u;
  *(_OWORD *)(v59 + 160) = 0u;
  *(_OWORD *)(v59 + 176) = 0u;
  *(_OWORD *)(v59 + 128) = 0u;
  *(_OWORD *)(v59 + 144) = 0u;
  *(_OWORD *)(v59 + 96) = 0u;
  *(_OWORD *)(v59 + 112) = 0u;
  *(_OWORD *)(v59 + 64) = 0u;
  *(_OWORD *)(v59 + 80) = 0u;
  *(_OWORD *)(v59 + 32) = 0u;
  *(_OWORD *)(v59 + 48) = 0u;
  *(_DWORD *)(v59 + 32) = 1065353216;
  *(_OWORD *)v59 = 0u;
  *(_OWORD *)(v59 + 16) = 0u;
  do
  {
    v61 = __ldaxr(gdc::Registry::nextId(void)::next);
    v62 = v61 + 1;
  }
  while (__stlxr(v62, gdc::Registry::nextId(void)::next));
  *(_WORD *)(v59 + 40) = v62;
  *(_OWORD *)(v59 + 48) = 0u;
  *(_OWORD *)(v59 + 64) = 0u;
  *(_OWORD *)(v59 + 80) = 0u;
  *(_OWORD *)(v59 + 96) = 0u;
  *(_OWORD *)(v59 + 112) = 0u;
  *(_OWORD *)(v59 + 128) = 0u;
  *(_QWORD *)(v59 + 144) = 0;
  *(_DWORD *)(v59 + 152) = 1065353216;
  *(_OWORD *)(v59 + 160) = 0u;
  *(_OWORD *)(v59 + 176) = 0u;
  *(_QWORD *)(v59 + 192) = 0;
  *(_DWORD *)(v59 + 200) = 1065353216;
  *(_OWORD *)(v59 + 208) = 0u;
  *(_OWORD *)(v59 + 224) = 0u;
  *(_QWORD *)(v59 + 240) = 0;
  *(_DWORD *)(v59 + 248) = 1065353216;
  *(_QWORD *)(v59 + 288) = 0;
  *(_OWORD *)(v59 + 256) = 0u;
  *(_OWORD *)(v59 + 272) = 0u;
  *(_DWORD *)(v59 + 296) = 1065353216;
  *(_OWORD *)(v59 + 304) = 0u;
  *(_OWORD *)(v59 + 320) = 0u;
  *(_QWORD *)(v59 + 336) = 0;
  *(_DWORD *)(v59 + 344) = 1065353216;
  *(_OWORD *)(v59 + 352) = 0u;
  *(_OWORD *)(v59 + 368) = 0u;
  *(_QWORD *)(v59 + 384) = 0;
  *(_DWORD *)(v59 + 392) = 1065353216;
  *(_OWORD *)(v59 + 400) = 0u;
  *(_OWORD *)(v59 + 416) = 0u;
  *(_QWORD *)(v59 + 432) = 0;
  *(_DWORD *)(v59 + 440) = 1065353216;
  v63 = (_QWORD *)operator new();
  *v63 = &off_1E42E7598;
  v63[1] = 0;
  v63[2] = 0;
  v63[3] = v60;
  *(_QWORD *)(a1 + 568) = v60;
  v64 = *(std::__shared_weak_count **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = v63;
  if (v64)
  {
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  return a1;
}

void sub_19FD9FB50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  md::MapEngineMode *v3;
  void *v4;

  v4 = v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v3 + 568);
  md::MapEngineMode::~MapEngineMode(v3);
  _Unwind_Resume(a1);
}

_QWORD *md::DaVinciMapEngineMode::DaVinciMapEngineMode(_QWORD *a1, char a2, int a3, __int128 *a4, std::__shared_weak_count *a5)
{
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  char IsEnabled_VKMLayout_SPR;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  __int16 v21;
  int v22;
  int v23;
  int v24;
  int v25;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = a5;
  }
  else
  {
    v12 = 0;
  }
  v37 = a4;
  v38 = (uint64_t)v12;
  IsEnabled_VKMLayout_SPR = MapsFeature_IsEnabled_VKMLayout_SPR();
  md::DaVinciBaseMapEngineMode::DaVinciBaseMapEngineMode((uint64_t)a1, a2, a3, &v37, IsEnabled_VKMLayout_SPR);
  if (a5)
  {
    v14 = (unint64_t *)&a5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  if (a5)
  {
    v16 = (unint64_t *)&a5->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  *a1 = &off_1E4298CA0;
  *(_QWORD *)&v31 = 0xEC9B77B4222D22FFLL;
  *((_QWORD *)&v31 + 1) = "md::VenueLogic]";
  v32 = 14;
  *(_QWORD *)&v28 = 0x4927EB92E562CC46;
  *((_QWORD *)&v28 + 1) = "md::VenueLogicContext]";
  *(_QWORD *)&v29 = 21;
  BYTE8(v29) = 1;
  v37 = &v39;
  v38 = 3;
  v41 = xmmword_1E42F7F68;
  v42 = unk_1E42F7F78;
  v43 = 16;
  v39 = xmmword_1E42F7F48;
  v40 = unk_1E42F7F58;
  v34 = (unint64_t)&v36;
  v35 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)(a1 + 29), (unint64_t *)&v31, &v28, 1, (uint64_t)&v37, (uint64_t)&v34);
  v34 = 0x7F1D62124B97A26;
  v35 = "md::VenueModeSwitchLogic]";
  v36 = 24;
  v37 = &v39;
  *(_QWORD *)&v31 = 0xB6D730E769EC7123;
  *((_QWORD *)&v31 + 1) = "md::VenueModeSwitchContext]";
  v32 = 26;
  v33 = 1;
  v38 = 3;
  v41 = xmmword_1E42F7FB0;
  v42 = unk_1E42F7FC0;
  v43 = 21;
  v39 = xmmword_1E42F7F90;
  v40 = unk_1E42F7FA0;
  *(_QWORD *)&v28 = &v29;
  *((_QWORD *)&v28 + 1) = 1;
  v29 = xmmword_1E42F7FD8;
  v30 = 21;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)(a1 + 29), &v34, &v31, 1, (uint64_t)&v37, (uint64_t)&v28);
  LOBYTE(v37) = 27;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)(a1 + 18), 0x1Bu, &v37)+ 17) = 1;
  LOBYTE(v37) = 46;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)(a1 + 18), 0x2Eu, &v37)+ 17) = 2;
  LOBYTE(v37) = 41;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)(a1 + 18), 0x29u, &v37)+ 17) = 2;
  LOBYTE(v37) = 42;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)(a1 + 18), 0x2Au, &v37)+ 17) = 2;
  if (a3)
    v18 = 1;
  else
    v18 = 4;
  if (a3)
    v19 = 6;
  else
    v19 = 4;
  LOWORD(v37) = 6;
  WORD1(v37) = v19;
  WORD2(v37) = 26;
  HIWORD(v37) = v18;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)(a1 + 10), 6u, &v37)+ 18) = (v19 << 16) | 1;
  v20 = HIWORD(v37);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)(a1 + 10), WORD2(v37), (_WORD *)&v37 + 2)+ 18) = (v20 << 16) | 1;
  LOWORD(v37) = 52;
  WORD1(v37) = v18;
  WORD2(v37) = 11;
  if (a3)
    v21 = 7;
  else
    v21 = 2;
  HIWORD(v37) = v21;
  LOWORD(v38) = 12;
  WORD1(v38) = v21;
  WORD2(v38) = 71;
  HIWORD(v38) = v21;
  LOWORD(v39) = 72;
  WORD1(v39) = v21;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)(a1 + 10), 0x34u, &v37)+ 18) = (v18 << 16) | 2;
  v22 = HIWORD(v37);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)(a1 + 10), WORD2(v37), (_WORD *)&v37 + 2)+ 18) = (v22 << 16) | 2;
  v23 = WORD1(v38);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)(a1 + 10), v38, &v38)+ 18) = (v23 << 16) | 2;
  v24 = HIWORD(v38);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)(a1 + 10), WORD2(v38), (_WORD *)&v38 + 2)+ 18) = (v24 << 16) | 2;
  v25 = WORD1(v39);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)(a1 + 10), v39, &v39)+ 18) = (v25 << 16) | 2;
  return a1;
}

void sub_19FDA0078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  md::DaVinciBaseMapEngineMode *v23;

  md::DaVinciBaseMapEngineMode::~DaVinciBaseMapEngineMode(v23);
  _Unwind_Resume(a1);
}

void md::StandardLogic::~StandardLogic(md::StandardLogic *this)
{
  md::TrafficSharedPipelineStates *v2;

  *(_QWORD *)this = &off_1E428E7D8;
  v2 = (md::TrafficSharedPipelineStates *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    std::default_delete<md::TrafficSharedResources>::operator()[abi:nn180100](v2);
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  md::TrafficSharedPipelineStates *v2;

  *(_QWORD *)this = &off_1E428E7D8;
  v2 = (md::TrafficSharedPipelineStates *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    std::default_delete<md::TrafficSharedResources>::operator()[abi:nn180100](v2);
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::StandardLogic,md::StandardLogicContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];

  if (*(_QWORD *)(a3 + 8) == 0xFFA06A69D924B0E8 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::StandardLogic,md::StandardLogicContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::StandardLogic,md::StandardLogicContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void _ZNSt3__110__function6__funcIZN2md13StandardLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20StandardLogicContextEE3__1NS_9allocatorISK_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md13StandardLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20StandardLogicContextEE3__1NS_9allocatorISK_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CBB10;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13StandardLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20StandardLogicContextEE3__0NS_9allocatorISK_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md13StandardLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20StandardLogicContextEE3__0NS_9allocatorISK_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CBAC8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13StandardLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20StandardLogicContextEE3__0NS_9allocatorISK_EEFvvEE7__cloneEPNS0_6__baseISN_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CBAC8;
  a2[1] = v2;
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext>(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  unint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x99BED48DEFBBD82BLL;
    if (a2 <= 0x99BED48DEFBBD82BLL)
      v3 = 0x99BED48DEFBBD82BLL % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0x99BED48DEFBBD82BLL)
      {
        if (v6[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0x99BED48DEFBBD82BLL)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0x1AF456233693CD46;
    if (a2 <= 0x1AF456233693CD46)
      v11 = 0x1AF456233693CD46 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0x1AF456233693CD46;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x1AF456233693CD46)
      {
        if (v13[2] == 0x1AF456233693CD46)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0x1AF456233693CD46)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0x1AF456233693CD46)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0x1AF456233693CD46)
    return v10;
  return v10;
}

_QWORD *gdc::ManagedObjectHolder<md::StandardLogicContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1068;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x20C4093837F09);
  return a1;
}

void gdc::ManagedObjectHolder<md::StandardLogicContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1068;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x20C4093837F09);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::StandardLogicContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void std::default_delete<md::TrafficSharedResources>::operator()[abi:nn180100](md::TrafficSharedPipelineStates *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  md::TrafficSharedPipelineStates::~TrafficSharedPipelineStates(this);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::StandardLibrary::~StandardLibrary(ggl::StandardLibrary *this)
{
  ggl::ShaderLibrary::~ShaderLibrary(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::StandardLibrary::StandardLibrary(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned __int8 v4;
  uint64_t result;
  int v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  unsigned __int8 v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  unsigned __int8 v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  unsigned __int8 v106;
  unsigned __int8 v107;
  unsigned __int8 v108;
  unsigned __int8 v109;
  unsigned __int8 v110;
  unsigned __int8 v111;
  unsigned __int8 v112;
  unsigned __int8 v113;
  unsigned __int8 v114;
  unsigned __int8 v115;
  unsigned __int8 v116;
  unsigned __int8 v117;
  unsigned __int8 v118;
  unsigned __int8 v119;
  unsigned __int8 v120;
  unsigned __int8 v121;
  unsigned __int8 v122;
  unsigned __int8 v123;
  unsigned __int8 v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  unsigned __int8 v127;
  unsigned __int8 v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  unsigned __int8 v131;
  unsigned __int8 v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  unsigned __int8 v135;
  unsigned __int8 v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  unsigned __int8 v139;
  unsigned __int8 v140;
  unsigned __int8 v141;
  unsigned __int8 v142;
  unsigned __int8 v143;
  unsigned __int8 v144;
  unsigned __int8 v145;
  unsigned __int8 v146;
  unsigned __int8 v147;
  unsigned __int8 v148;
  unsigned __int8 v149;
  unsigned __int8 v150;
  unsigned __int8 v151;
  unsigned __int8 v152;
  unsigned __int8 v153;
  unsigned __int8 v154;
  unsigned __int8 v155;
  unsigned __int8 v156;
  unsigned __int8 v157;
  unsigned __int8 v158;
  unsigned __int8 v159;
  unsigned __int8 v160;
  unsigned __int8 v161;
  unsigned __int8 v162;
  unsigned __int8 v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  unsigned __int8 v166;
  unsigned __int8 v167;
  unsigned __int8 v168;
  unsigned __int8 v169;
  unsigned __int8 v170;
  unsigned __int8 v171;
  unsigned __int8 v172;
  unsigned __int8 v173;
  unsigned __int8 v174;
  unsigned __int8 v175;
  unsigned __int8 v176;
  unsigned __int8 v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  unsigned __int8 v180;
  unsigned __int8 v181;
  unsigned __int8 v182;
  unsigned __int8 v183;
  unsigned __int8 v184;
  unsigned __int8 v185;
  unsigned __int8 v186;
  unsigned __int8 v187;
  unsigned __int8 v188;
  unsigned __int8 v189;
  unsigned __int8 v190;
  unsigned __int8 v191;
  unsigned __int8 v192;
  unsigned __int8 v193;
  unsigned __int8 v194;
  unsigned __int8 v195;
  unsigned __int8 v196;
  unsigned __int8 v197;
  unsigned __int8 v198;
  unsigned __int8 v199;
  unsigned __int8 v200;
  unsigned __int8 v201;
  unsigned __int8 v202;
  unsigned __int8 v203;
  unsigned __int8 v204;
  unsigned __int8 v205;
  unsigned __int8 v206;
  unsigned __int8 v207;
  unsigned __int8 v208;
  unsigned __int8 v209;
  unsigned __int8 v210;
  unsigned __int8 v211;
  unsigned __int8 v212;
  unsigned __int8 v213;
  unsigned __int8 v214;
  unsigned __int8 v215;
  unsigned __int8 v216;
  unsigned __int8 v217;
  unsigned __int8 v218;
  unsigned __int8 v219;
  unsigned __int8 v220;
  unsigned __int8 v221;
  unsigned __int8 v222;
  unsigned __int8 v223;
  unsigned __int8 v224;
  unsigned __int8 v225;
  unsigned __int8 v226;
  unsigned __int8 v227;
  unsigned __int8 v228;
  unsigned __int8 v229;
  unsigned __int8 v230;
  unsigned __int8 v231;
  unsigned __int8 v232;
  unsigned __int8 v233;
  unsigned __int8 v234;
  unsigned __int8 v235;
  unsigned __int8 v236;
  unsigned __int8 v237;
  unsigned __int8 v238;
  unsigned __int8 v239;
  unsigned __int8 v240;
  unsigned __int8 v241;
  unsigned __int8 v242;
  unsigned __int8 v243;
  unsigned __int8 v244;
  unsigned __int8 v245;
  unsigned __int8 v246;
  unsigned __int8 v247;
  unsigned __int8 v248;
  unsigned __int8 v249;
  unsigned __int8 v250;
  unsigned __int8 v251;
  unsigned __int8 v252;
  unsigned __int8 v253;
  unsigned __int8 v254;
  unsigned __int8 v255;
  unsigned __int8 v256;
  unsigned __int8 v257;
  unsigned __int8 v258;
  unsigned __int8 v259;
  unsigned __int8 v260;
  unsigned __int8 v261;
  unsigned __int8 v262;
  unsigned __int8 v263;
  unsigned __int8 v264;
  unsigned __int8 v265;
  unsigned __int8 v266;
  unsigned __int8 v267;
  unsigned __int8 v268;
  unsigned __int8 v269;
  unsigned __int8 v270;
  unsigned __int8 v271;
  unsigned __int8 v272;
  unsigned __int8 v273;
  unsigned __int8 v274;
  unsigned __int8 v275;
  unsigned __int8 v276;
  unsigned __int8 v277;
  unsigned __int8 v278;
  unsigned __int8 v279;
  unsigned __int8 v280;
  unsigned __int8 v281;
  unsigned __int8 v282;
  unsigned __int8 v283;
  unsigned __int8 v284;
  unsigned __int8 v285;
  unsigned __int8 v286;
  unsigned __int8 v287;
  unsigned __int8 v288;
  unsigned __int8 v289;
  unsigned __int8 v290;
  unsigned __int8 v291;
  unsigned __int8 v292;
  unsigned __int8 v293;
  unsigned __int8 v294;
  unsigned __int8 v295;
  unsigned __int8 v296;
  unsigned __int8 v297;
  unsigned __int8 v298;
  unsigned __int8 v299;
  unsigned __int8 v300;
  unsigned __int8 v301;
  unsigned __int8 v302;
  unsigned __int8 v303;
  unsigned __int8 v304;
  unsigned __int8 v305;
  unsigned __int8 v306;
  unsigned __int8 v307;
  unsigned __int8 v308;
  unsigned __int8 v309;
  unsigned __int8 v310;
  unsigned __int8 v311;
  unsigned __int8 v312;
  unsigned __int8 v313;
  unsigned __int8 v314;
  unsigned __int8 v315;
  ggl::ARMeshShader *v316;
  unsigned __int8 v317;
  ggl::ARDepthMeshShader *v318;
  ggl::ARGroundShadowShader *v319;
  ggl::ARCameraImageShader *v320;
  ggl::BuildingFacadeDepthShader *v321;
  ggl::BuildingFlatShader *v322;
  ggl::BuildingFlatStrokeShader *v323;
  ggl::BuildingPointyRoofDepthShader *v324;
  ggl::BuildingShadowShader *v325;
  ggl::BuildingTopDepthShader *v326;
  ggl::CircleShader *v327;
  ggl::CircleMultiStrokeShader *v328;
  ggl::ClutShader *v329;
  ggl::InstancedDebugShader *v330;
  unsigned __int8 v331;
  ggl::DebugShader *v332;
  ggl::DebugExtendedShader *v333;
  ggl::DebugLineShader *v334;
  ggl::HillshadeShader *v335;
  ggl::DiffuseBuildingShader *v336;
  ggl::DiffuseBuildingTopShader *v337;
  unsigned __int8 v338;
  ggl::DiffuseLandmarkShader *v339;
  ggl::ElevatedFillColorShader *v340;
  ggl::ElevatedStrokeColorShader *v341;
  unsigned __int8 v342;
  ggl::FogShader *v343;
  unsigned __int8 v344;
  ggl::FoggedDiffuseBuildingShader *v345;
  ggl::FoggedDiffuseLandmarkShader *v346;
  unsigned __int8 v347;
  ggl::FoggedSpecularBuildingShader *v348;
  ggl::FoggedSpecularLandmarkShader *v349;
  unsigned __int8 v350;
  ggl::GlobeAtmosphereShader *v351;
  ggl::GlobeStarsShader *v352;
  ggl::GlowShader *v353;
  ggl::GlowAlphaShader *v354;
  ggl::Glyph3dShader *v355;
  ggl::Glyph3dLowPrecisionShader *v356;
  ggl::Glyph3dLowPrecisionHaloShader *v357;
  ggl::Glyph3dRaymarchShader *v358;
  ggl::GlyphWithNormalHaloShader *v359;
  ggl::GridShader *v360;
  unsigned __int8 v361;
  unsigned __int8 v362;
  unsigned __int8 v363;
  ggl::GridUVShader *v364;
  ggl::IconShader *v365;
  ggl::MaskedIconShader *v366;
  ggl::WaypointShader *v367;
  ggl::ShadowShader *v368;
  ggl::ImageCopyShader *v369;
  ggl::LandmarkDepthShader *v370;
  ggl::LandmarkFlatShader *v371;
  ggl::LineShader *v372;
  ggl::ManeuverPointShader *v373;
  ggl::OcclusionLineShader *v374;
  ggl::OptimizedTrafficShader *v375;
  ggl::OuterShadowRibbonShader *v376;
  ggl::PolygonOverlayFillShader *v377;
  ggl::PolygonOverlayAntialiasShader *v378;
  ggl::MaskingOverlayFillShader *v379;
  ggl::MaskingOverlayMaskingShader *v380;
  ggl::PatternedRibbonShader *v381;
  ggl::PolygonAnimatableFillShader *v382;
  unsigned __int8 v383;
  ggl::PolygonAnimatableStrokeShader *v384;
  ggl::PolygonFillShader *v385;
  ggl::PolygonShadowedStrokeShader *v386;
  ggl::PolygonSolidFillShader *v387;
  ggl::PolygonSolidFillS2Shader *v388;
  ggl::PolygonStrokeShader *v389;
  ggl::PolygonStrokeMaskShader *v390;
  ggl::HillshadeFillMaskShader *v391;
  ggl::PolylineOverlayFillShader *v392;
  ggl::PolylineOverlayAlphaShader *v393;
  ggl::PointShader *v394;
  unsigned __int8 v395;
  ggl::PointExtendedShader *v396;
  ggl::PrefilteredLineShader *v397;
  ggl::RouteLineShader *v398;
  unsigned __int8 v399;
  ggl::PatternedRouteLineShader *v400;
  ggl::RouteLineMaskShader *v401;
  ggl::RouteLineAlphaResetShader *v402;
  ggl::RouteLineArrowShader *v403;
  ggl::RouteLineTrafficShader *v404;
  ggl::SinglePassRouteLineShader *v405;
  ggl::DottedRouteLineShader *v406;
  ggl::SDFGlyphShader *v407;
  ggl::SDFGlyphHaloShader *v408;
  ggl::SDFGlyphSuperSampleShader *v409;
  ggl::SkyShader *v410;
  unsigned __int8 v411;
  ggl::SolidRibbonShader *v412;
  ggl::SolidTrafficShader *v413;
  ggl::SolidMaskedTrafficShader *v414;
  ggl::SpecularBuildingShader *v415;
  ggl::SpecularBuildingTopShader *v416;
  unsigned __int8 v417;
  ggl::SpecularLandmarkShader *v418;
  ggl::StandardPostchainBGBlurShader *v419;
  unsigned __int8 v420;
  unsigned __int8 v421;
  unsigned __int8 v422;
  ggl::StandardPostchainFGBlurShader *v423;
  ggl::StandardPostchainSSAOShader *v424;
  unsigned __int8 v425;
  unsigned __int8 v426;
  unsigned __int8 v427;
  unsigned __int8 v428;
  ggl::TextureAlphaMaskShader *v429;
  unsigned __int8 v430;
  ggl::TexturedShader *v431;
  ggl::TexturedDrapedSRGBBlendShader *v432;
  ggl::TexturedSRGBBlendShader *v433;
  ggl::TexturedExtendedShader *v434;
  unsigned __int8 v435;
  ggl::ScreenTexturedQuadShader *v436;
  unsigned __int8 v437;
  ggl::PoleTexturedBlendShader *v438;
  ggl::TexturedSolidRibbonShader *v439;
  unsigned __int8 v440;
  ggl::TextureWithReverseAlphaShader *v441;
  ggl::TrafficGlowShader *v442;
  ggl::TransitLineRibbonShader *v443;
  ggl::TransitNodeColorizedShader *v444;
  unsigned __int8 v445;
  ggl::TransitNodeRGBShader *v446;
  ggl::VenueWallShader *v447;
  ggl::VenueWallTopShader *v448;
  ggl::VenueWallEndCapShader *v449;
  ggl::VenueWallShadowShader *v450;
  ggl::HorizontalVenue3DStrokeShader *v451;
  ggl::VerticalVenue3DStrokeShader *v452;
  ggl::VenueOpenToBelowShadowShader *v453;
  unsigned __int8 v454;
  ggl::DaVinciTrafficShader *v455;
  ggl::DaVinciDecalShader *v456;
  ggl::DaVinciGroundShader *v457;
  ggl::DaVinciGroundDepthShader *v458;
  unsigned __int8 v459;
  ggl::DaVinciRibbonShader *v460;
  ggl::DaVinciGroundShadowMapShader *v461;
  ggl::LinearDepthShader *v462;
  ggl::PackedLinearDepthShader *v463;
  ggl::TexturedAnimatedRibbonShader *v464;
  ggl::FlyoverOverlayShader *v465;
  ggl::GlobeTexturedShader *v466;
  unsigned __int8 v467;
  unsigned __int8 v468;
  unsigned __int8 v469;
  int v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  int v491;
  int v492;
  int v493;
  int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  int v501;
  int v502;
  int v503;
  int v504;
  int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  int v512;
  int v513;
  int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  int v519;
  int v520;
  int v521;
  int v522;
  int v523;
  int v524;
  int v525;
  int v526;
  int v527;
  int v528;
  int v529;
  int v530;
  int v531;
  int v532;
  int v533;
  int v534;
  int v535;
  int v536;
  int v537;
  int v538;
  int v539;
  int v540;
  int v541;
  int v542;
  int v543;
  int v544;
  int v545;
  int v546;
  int v547;
  int v548;
  int v549;
  int v550;
  int v551;
  int v552;
  int v553;
  int v554;
  int v555;
  int v556;
  int v557;
  int v558;
  int v559;
  int v560;
  int v561;
  int v562;
  int v563;
  int v564;
  int v565;
  int v566;
  int v567;
  int v568;
  int v569;
  int v570;
  int v571;
  int v572;
  int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  int v580;
  int v581;
  int v582;
  int v583;
  int v584;
  int v585;
  int v586;
  int v587;
  int v588;
  int v589;
  int v590;
  int v591;
  int v592;
  int v593;
  int v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  int v600;
  int v601;
  int v602;
  int v603;
  int v604;
  int v605;
  int v606;
  int v607;
  int v608;
  int v609;
  int v610;
  int v611;
  int v612;
  int v613;
  int v614;
  int v615;
  int v616;
  int v617;
  int v618;
  int v619;
  int v620;
  int v621;
  int v622;
  int v623;
  int v624;
  int v625;
  int v626;
  int v627;
  int v628;
  int v629;
  int v630;
  int v631;
  int v632;
  int v633;
  int v634;
  int v635;
  int v636;
  int v637;
  int v638;
  int v639;
  int v640;
  int v641;
  int v642;
  int v643;
  int v644;
  int v645;
  int v646;
  int v647;
  unsigned __int8 v648;
  unsigned __int8 v649;
  unsigned __int8 v650;
  int v651;
  unsigned __int8 v652;
  unsigned __int8 v653;
  int v654;
  unsigned __int8 v655;
  unsigned __int8 v656;
  unsigned __int8 v657;
  unsigned __int8 v658;
  unsigned __int8 v659;
  unsigned __int8 v660;
  int v661;
  unsigned __int8 v662;
  unsigned __int8 v663;
  int v664;
  unsigned __int8 v665;
  unsigned __int8 v666;
  unsigned __int8 v667;
  unsigned __int8 v668;
  unsigned __int8 v669;
  unsigned __int8 v670;
  unsigned __int8 v671;
  unsigned __int8 v672;
  unsigned __int8 v673;
  unsigned __int8 v674;
  int v675;
  unsigned __int8 v676;
  unsigned __int8 v677;
  int v678;
  unsigned __int8 v679;
  int v680;
  unsigned __int8 v681;
  int v682;
  unsigned __int8 v683;
  unsigned __int8 v684;
  unsigned __int8 v685;
  unsigned __int8 v686;
  unsigned __int8 v687;
  unsigned __int8 v688;
  unsigned __int8 v689;
  unsigned __int8 v690;
  unsigned __int8 v691;
  unsigned __int8 v692;
  int v693;
  unsigned __int8 v694;
  unsigned __int8 v695;
  unsigned __int8 v696;
  unsigned __int8 v697;
  int v698;
  unsigned __int8 v699;
  unsigned __int8 v700;
  unsigned __int8 v701;
  unsigned __int8 v702;
  int v703;
  unsigned __int8 v704;
  int v705;
  unsigned __int8 v706;
  unsigned __int8 v707;
  unsigned __int8 v708;
  int v709;
  unsigned __int8 v710;
  unsigned __int8 v711;
  int v712;
  unsigned __int8 v713;
  unsigned __int8 v714;
  unsigned __int8 v715;
  unsigned __int8 v716;
  unsigned __int8 v717;
  unsigned __int8 v718;
  unsigned __int8 v719;
  int v720;

  v2 = a2;
  if ((v4 & 1) == 0)
  {
    v2 = a2;
    if (v6)
    {
      ggl::StandardLibrary::typedReflection(void)::desc = (uint64_t)"StandardLibrary";
      dword_1ECE44EC0 = ggl::crc32::compute<16ul>("StandardLibrary");
      {
        if ((v11 & 1) == 0
        {
          ggl::animatableTextureShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("AnimatableTextureShaderVertex");
          *(_DWORD *)algn_1ECE6583C = 0;
          qword_1ECE65840 = (uint64_t)"AnimatableTextureShader";
          unk_1ECE65848 = ggl::animatableTextureShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE65850 = 1;
          unk_1ECE65858 = &ggl::animatableTextureShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE65860 = 1;
          unk_1ECE65868 = &ggl::animatableTextureShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE65870 = 0;
          unk_1ECE65878 = &ggl::animatableTextureShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE65880 = 0;
          unk_1ECE65888 = &ggl::animatableTextureShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE65898 = 0;
          unk_1ECE658A0 = 0;
          qword_1ECE65890 = 0;
        }
        StandardLibraryShaderFunctions(void)::desc = (uint64_t)&ggl::animatableTextureShaderVertexFunctionDescriptor(void)::ref;
        if ((v12 & 1) == 0
        {
          ggl::animatableTextureShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("AnimatableTextureShaderFragment");
          *(_DWORD *)algn_1ECE45324 = 1;
          qword_1ECE45328 = (uint64_t)"AnimatableTextureShader";
          unk_1ECE45330 = 0;
          qword_1ECE45338 = 0;
          unk_1ECE45340 = &ggl::animatableTextureShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE45348 = 1;
          unk_1ECE45350 = &ggl::animatableTextureShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE45358 = 0;
          unk_1ECE45360 = &ggl::animatableTextureShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE45368 = 2;
          unk_1ECE45370 = &ggl::animatableTextureShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE45380 = 0;
          unk_1ECE45388 = 0;
          qword_1ECE45378 = 2;
        }
        qword_1ECE36148 = (uint64_t)&ggl::animatableTextureShaderFragmentFunctionDescriptor(void)::ref;
        if ((v13 & 1) == 0
        {
          v470 = ggl::crc32::compute<19ul>("ARMeshShaderVertex");
          qword_1ECE36AE0 = (uint64_t)"ARMeshShader";
          unk_1ECE36AE8 = ggl::aRMeshShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE36AF0 = 2;
          unk_1ECE36AF8 = &ggl::aRMeshShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE36B00 = 3;
          unk_1ECE36B08 = &ggl::aRMeshShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE36B10 = 1;
          unk_1ECE36B18 = &ggl::aRMeshShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::aRMeshShaderVertexFunctionDescriptor(void)::ref = v470;
          *(_DWORD *)algn_1ECE36ADC = 0;
          qword_1ECE36B20 = 0;
          unk_1ECE36B28 = &ggl::aRMeshShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE36B38 = 0;
          unk_1ECE36B40 = 0;
          qword_1ECE36B30 = 0;
        }
        qword_1ECE36150 = (uint64_t)&ggl::aRMeshShaderVertexFunctionDescriptor(void)::ref;
        if ((v14 & 1) == 0
        {
          ggl::aRMeshShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("ARMeshShaderFragment");
          *(_DWORD *)algn_1ECE32D5C = 1;
          qword_1ECE32D60 = (uint64_t)"ARMeshShader";
          unk_1ECE32D68 = 0;
          qword_1ECE32D70 = 0;
          unk_1ECE32D78 = &ggl::aRMeshShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE32D80 = 4;
          unk_1ECE32D88 = &ggl::aRMeshShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE32D90 = 0;
          unk_1ECE32D98 = &ggl::aRMeshShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE32DA0 = 2;
          unk_1ECE32DA8 = &ggl::aRMeshShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE32DB8 = 0;
          unk_1ECE32DC0 = 0;
          qword_1ECE32DB0 = 2;
        }
        qword_1ECE36158 = (uint64_t)&ggl::aRMeshShaderFragmentFunctionDescriptor(void)::ref;
        if ((v15 & 1) == 0
        {
          v471 = ggl::crc32::compute<24ul>("ARDepthMeshShaderVertex");
          qword_1ECE37198 = (uint64_t)"ARDepthMeshShader";
          unk_1ECE371A0 = ggl::aRDepthMeshShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE371A8 = 2;
          unk_1ECE371B0 = &ggl::aRDepthMeshShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE371B8 = 3;
          unk_1ECE371C0 = &ggl::aRDepthMeshShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE371C8 = 1;
          unk_1ECE371D0 = &ggl::aRDepthMeshShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::aRDepthMeshShaderVertexFunctionDescriptor(void)::ref = v471;
          *(_DWORD *)algn_1ECE37194 = 0;
          qword_1ECE371D8 = 0;
          unk_1ECE371E0 = &ggl::aRDepthMeshShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE371F0 = 0;
          unk_1ECE371F8 = 0;
          qword_1ECE371E8 = 0;
        }
        qword_1ECE36160 = (uint64_t)&ggl::aRDepthMeshShaderVertexFunctionDescriptor(void)::ref;
        if ((v16 & 1) == 0
        {
          ggl::aRDepthMeshShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("ARDepthMeshShaderFragment");
          *(_DWORD *)algn_1ECE32DD4 = 1;
          qword_1ECE32DE8 = 0;
          unk_1ECE32DF0 = &ggl::aRDepthMeshShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE32DF8 = 0;
          unk_1ECE32E00 = &ggl::aRDepthMeshShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE32E08 = 0;
          unk_1ECE32E10 = &ggl::aRDepthMeshShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE32DD8 = (uint64_t)"ARDepthMeshShader";
          unk_1ECE32DE0 = 0;
          qword_1ECE32E18 = 0;
          unk_1ECE32E20 = &ggl::aRDepthMeshShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE32E30 = 0;
          unk_1ECE32E38 = 0;
          qword_1ECE32E28 = 0;
        }
        qword_1ECE36168 = (uint64_t)&ggl::aRDepthMeshShaderFragmentFunctionDescriptor(void)::ref;
        if ((v17 & 1) == 0
        {
          v472 = ggl::crc32::compute<27ul>("ARGroundShadowShaderVertex");
          qword_1ECE32E50 = (uint64_t)"ARGroundShadowShader";
          unk_1ECE32E58 = ggl::aRGroundShadowShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE32E60 = 2;
          unk_1ECE32E68 = &ggl::aRGroundShadowShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE32E70 = 3;
          unk_1ECE32E78 = &ggl::aRGroundShadowShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE32E80 = 1;
          unk_1ECE32E88 = &ggl::aRGroundShadowShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::aRGroundShadowShaderVertexFunctionDescriptor(void)::ref = v472;
          *(_DWORD *)algn_1ECE32E4C = 0;
          qword_1ECE32E90 = 0;
          unk_1ECE32E98 = &ggl::aRGroundShadowShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE32EA8 = 0;
          unk_1ECE32EB0 = 0;
          qword_1ECE32EA0 = 0;
        }
        qword_1ECE36170 = (uint64_t)&ggl::aRGroundShadowShaderVertexFunctionDescriptor(void)::ref;
        if ((v18 & 1) == 0
        {
          ggl::aRGroundShadowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("ARGroundShadowShaderFragment");
          *(_DWORD *)algn_1ECE32F3C = 1;
          qword_1ECE32F40 = (uint64_t)"ARGroundShadowShader";
          unk_1ECE32F48 = 0;
          qword_1ECE32F50 = 0;
          unk_1ECE32F58 = &ggl::aRGroundShadowShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE32F60 = 1;
          unk_1ECE32F68 = &ggl::aRGroundShadowShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE32F70 = 0;
          unk_1ECE32F78 = &ggl::aRGroundShadowShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE32F80 = 0;
          unk_1ECE32F88 = &ggl::aRGroundShadowShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE32F98 = 0;
          unk_1ECE32FA0 = 0;
          qword_1ECE32F90 = 0;
        }
        qword_1ECE36178 = (uint64_t)&ggl::aRGroundShadowShaderFragmentFunctionDescriptor(void)::ref;
        if ((v19 & 1) == 0
        {
          ggl::aRCameraImageShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("ARCameraImageShaderVertex");
          *(_DWORD *)algn_1ECE4464C = 0;
          qword_1ECE44650 = (uint64_t)"ARCameraImageShader";
          unk_1ECE44658 = ggl::aRCameraImageShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE44660 = 1;
          unk_1ECE44668 = &ggl::aRCameraImageShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE44670 = 1;
          unk_1ECE44678 = &ggl::aRCameraImageShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE44680 = 0;
          unk_1ECE44688 = &ggl::aRCameraImageShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE44690 = 0;
          unk_1ECE44698 = &ggl::aRCameraImageShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE446A8 = 0;
          unk_1ECE446B0 = 0;
          qword_1ECE446A0 = 0;
        }
        qword_1ECE36180 = (uint64_t)&ggl::aRCameraImageShaderVertexFunctionDescriptor(void)::ref;
        if ((v20 & 1) == 0
        {
          v473 = ggl::crc32::compute<28ul>("ARCameraImageShaderFragment");
          qword_1ECE44918 = 0;
          unk_1ECE44920 = &ggl::aRCameraImageShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE44928 = 0;
          unk_1ECE44930 = &ggl::aRCameraImageShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::aRCameraImageShaderFragmentFunctionDescriptor(void)::ref = v473;
          *(_DWORD *)algn_1ECE44904 = 1;
          qword_1ECE44938 = 0;
          unk_1ECE44940 = &ggl::aRCameraImageShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE44908 = (uint64_t)"ARCameraImageShader";
          unk_1ECE44910 = 0;
          qword_1ECE44948 = 1;
          unk_1ECE44950 = &ggl::aRCameraImageShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE44960 = 0;
          unk_1ECE44968 = 0;
          qword_1ECE44958 = 1;
        }
        qword_1ECE36188 = (uint64_t)&ggl::aRCameraImageShaderFragmentFunctionDescriptor(void)::ref;
        if ((v21 & 1) == 0
        {
          v474 = ggl::crc32::compute<32ul>("BuildingFacadeDepthShaderVertex");
          qword_1ECE453A0 = (uint64_t)"BuildingFacadeDepthShader";
          unk_1ECE453A8 = ggl::buildingFacadeDepthShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE453B0 = 1;
          unk_1ECE453B8 = &ggl::buildingFacadeDepthShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE453C0 = 2;
          unk_1ECE453C8 = &ggl::buildingFacadeDepthShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE453D0 = 0;
          unk_1ECE453D8 = &ggl::buildingFacadeDepthShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::buildingFacadeDepthShaderVertexFunctionDescriptor(void)::ref = v474;
          *(_DWORD *)algn_1ECE4539C = 0;
          qword_1ECE453E0 = 0;
          unk_1ECE453E8 = &ggl::buildingFacadeDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE453F8 = 0;
          unk_1ECE45400 = 0;
          qword_1ECE453F0 = 0;
        }
        qword_1ECE36190 = (uint64_t)&ggl::buildingFacadeDepthShaderVertexFunctionDescriptor(void)::ref;
        if ((v22 & 1) == 0
        {
          ggl::buildingFacadeDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("BuildingFacadeDepthShaderFragment");
          *(_DWORD *)algn_1ECE41694 = 1;
          qword_1ECE416A8 = 0;
          unk_1ECE416B0 = &ggl::buildingFacadeDepthShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE416B8 = 0;
          unk_1ECE416C0 = &ggl::buildingFacadeDepthShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE416C8 = 0;
          unk_1ECE416D0 = &ggl::buildingFacadeDepthShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE41698 = (uint64_t)"BuildingFacadeDepthShader";
          unk_1ECE416A0 = 0;
          qword_1ECE416D8 = 0;
          unk_1ECE416E0 = &ggl::buildingFacadeDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE416F0 = 0;
          unk_1ECE416F8 = 0;
          qword_1ECE416E8 = 0;
        }
        qword_1ECE36198 = (uint64_t)&ggl::buildingFacadeDepthShaderFragmentFunctionDescriptor(void)::ref;
        if ((v23 & 1) == 0
        {
          v475 = ggl::crc32::compute<25ul>("BuildingFlatShaderVertex");
          qword_1ECE3DCF8 = (uint64_t)"BuildingFlatShader";
          unk_1ECE3DD00 = ggl::buildingFlatShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3DD08 = 1;
          unk_1ECE3DD10 = &ggl::buildingFlatShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3DD18 = 2;
          unk_1ECE3DD20 = &ggl::buildingFlatShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3DD28 = 0;
          unk_1ECE3DD30 = &ggl::buildingFlatShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::buildingFlatShaderVertexFunctionDescriptor(void)::ref = v475;
          *(_DWORD *)algn_1ECE3DCF4 = 0;
          qword_1ECE3DD38 = 0;
          unk_1ECE3DD40 = &ggl::buildingFlatShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3DD50 = 0;
          unk_1ECE3DD58 = 0;
          qword_1ECE3DD48 = 0;
        }
        qword_1ECE361A0 = (uint64_t)&ggl::buildingFlatShaderVertexFunctionDescriptor(void)::ref;
        if ((v24 & 1) == 0
        {
          ggl::buildingFlatShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("BuildingFlatShaderFragment");
          *(_DWORD *)algn_1ECE3E82C = 1;
          qword_1ECE3E840 = 0;
          unk_1ECE3E848 = &ggl::buildingFlatShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3E850 = 0;
          unk_1ECE3E858 = &ggl::buildingFlatShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3E860 = 0;
          unk_1ECE3E868 = &ggl::buildingFlatShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3E830 = (uint64_t)"BuildingFlatShader";
          unk_1ECE3E838 = 0;
          qword_1ECE3E870 = 0;
          unk_1ECE3E878 = &ggl::buildingFlatShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3E888 = 0;
          unk_1ECE3E890 = 0;
          qword_1ECE3E880 = 0;
        }
        qword_1ECE361A8 = (uint64_t)&ggl::buildingFlatShaderFragmentFunctionDescriptor(void)::ref;
        if ((v25 & 1) == 0
        {
          v476 = ggl::crc32::compute<31ul>("BuildingFlatStrokeShaderVertex");
          qword_1ECE40500 = (uint64_t)"BuildingFlatStrokeShader";
          unk_1ECE40508 = ggl::buildingFlatStrokeShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE40510 = 1;
          unk_1ECE40518 = &ggl::buildingFlatStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40520 = 2;
          unk_1ECE40528 = &ggl::buildingFlatStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE40530 = 0;
          unk_1ECE40538 = &ggl::buildingFlatStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::buildingFlatStrokeShaderVertexFunctionDescriptor(void)::ref = v476;
          *(_DWORD *)algn_1ECE404FC = 0;
          qword_1ECE40540 = 0;
          unk_1ECE40548 = &ggl::buildingFlatStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40558 = 0;
          unk_1ECE40560 = 0;
          qword_1ECE40550 = 0;
        }
        qword_1ECE361B0 = (uint64_t)&ggl::buildingFlatStrokeShaderVertexFunctionDescriptor(void)::ref;
        if ((v26 & 1) == 0
        {
          v477 = ggl::crc32::compute<33ul>("BuildingFlatStrokeShaderFragment");
          qword_1ECE41288 = 0;
          unk_1ECE41290 = &ggl::buildingFlatStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41298 = 0;
          unk_1ECE412A0 = &ggl::buildingFlatStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::buildingFlatStrokeShaderFragmentFunctionDescriptor(void)::ref = v477;
          *(_DWORD *)algn_1ECE41274 = 1;
          qword_1ECE412A8 = 0;
          unk_1ECE412B0 = &ggl::buildingFlatStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE41278 = (uint64_t)"BuildingFlatStrokeShader";
          unk_1ECE41280 = 0;
          qword_1ECE412B8 = 1;
          unk_1ECE412C0 = &ggl::buildingFlatStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE412D0 = 0;
          unk_1ECE412D8 = 0;
          qword_1ECE412C8 = 1;
        }
        qword_1ECE361B8 = (uint64_t)&ggl::buildingFlatStrokeShaderFragmentFunctionDescriptor(void)::ref;
        if ((v27 & 1) == 0
        {
          v478 = ggl::crc32::compute<36ul>("BuildingPointyRoofDepthShaderVertex");
          qword_1ECE41F98 = (uint64_t)"BuildingPointyRoofDepthShader";
          unk_1ECE41FA0 = ggl::buildingPointyRoofDepthShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE41FA8 = 1;
          unk_1ECE41FB0 = &ggl::buildingPointyRoofDepthShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41FB8 = 2;
          unk_1ECE41FC0 = &ggl::buildingPointyRoofDepthShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE41FC8 = 0;
          unk_1ECE41FD0 = &ggl::buildingPointyRoofDepthShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::buildingPointyRoofDepthShaderVertexFunctionDescriptor(void)::ref = v478;
          *(_DWORD *)algn_1ECE41F94 = 0;
          qword_1ECE41FD8 = 0;
          unk_1ECE41FE0 = &ggl::buildingPointyRoofDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41FF0 = 0;
          unk_1ECE41FF8 = 0;
          qword_1ECE41FE8 = 0;
        }
        qword_1ECE361C0 = (uint64_t)&ggl::buildingPointyRoofDepthShaderVertexFunctionDescriptor(void)::ref;
        if ((v28 & 1) == 0
        {
          ggl::buildingPointyRoofDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("BuildingPointyRoofDepthShaderFragment");
          *(_DWORD *)algn_1ECE427BC = 1;
          qword_1ECE427D0 = 0;
          unk_1ECE427D8 = &ggl::buildingPointyRoofDepthShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE427E0 = 0;
          unk_1ECE427E8 = &ggl::buildingPointyRoofDepthShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE427F0 = 0;
          unk_1ECE427F8 = &ggl::buildingPointyRoofDepthShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE427C0 = (uint64_t)"BuildingPointyRoofDepthShader";
          unk_1ECE427C8 = 0;
          qword_1ECE42800 = 0;
          unk_1ECE42808 = &ggl::buildingPointyRoofDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42818 = 0;
          unk_1ECE42820 = 0;
          qword_1ECE42810 = 0;
        }
        qword_1ECE361C8 = (uint64_t)&ggl::buildingPointyRoofDepthShaderFragmentFunctionDescriptor(void)::ref;
        if ((v29 & 1) == 0
        {
          v479 = ggl::crc32::compute<27ul>("BuildingShadowShaderVertex");
          qword_1ECE3E8A0 = (uint64_t)"BuildingShadowShader";
          unk_1ECE3E8A8 = ggl::buildingShadowShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3E8B0 = 1;
          unk_1ECE3E8B8 = &ggl::buildingShadowShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3E8C0 = 2;
          unk_1ECE3E8C8 = &ggl::buildingShadowShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3E8D0 = 0;
          unk_1ECE3E8D8 = &ggl::buildingShadowShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::buildingShadowShaderVertexFunctionDescriptor(void)::ref = v479;
          *(_DWORD *)algn_1ECE3E89C = 0;
          qword_1ECE3E8E0 = 0;
          unk_1ECE3E8E8 = &ggl::buildingShadowShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3E8F8 = 0;
          unk_1ECE3E900 = 0;
          qword_1ECE3E8F0 = 0;
        }
        qword_1ECE361D0 = (uint64_t)&ggl::buildingShadowShaderVertexFunctionDescriptor(void)::ref;
        if ((v30 & 1) == 0
        {
          v480 = ggl::crc32::compute<29ul>("BuildingShadowShaderFragment");
          qword_1ECE3F7B8 = 0;
          unk_1ECE3F7C0 = &ggl::buildingShadowShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3F7C8 = 1;
          unk_1ECE3F7D0 = &ggl::buildingShadowShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::buildingShadowShaderFragmentFunctionDescriptor(void)::ref = v480;
          *(_DWORD *)algn_1ECE3F7A4 = 1;
          qword_1ECE3F7D8 = 0;
          unk_1ECE3F7E0 = &ggl::buildingShadowShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3F7A8 = (uint64_t)"BuildingShadowShader";
          unk_1ECE3F7B0 = 0;
          qword_1ECE3F7E8 = 1;
          unk_1ECE3F7F0 = &ggl::buildingShadowShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3F800 = 0;
          unk_1ECE3F808 = 0;
          qword_1ECE3F7F8 = 1;
        }
        qword_1ECE361D8 = (uint64_t)&ggl::buildingShadowShaderFragmentFunctionDescriptor(void)::ref;
        if ((v31 & 1) == 0
        {
          v481 = ggl::crc32::compute<29ul>("BuildingTopDepthShaderVertex");
          qword_1ECE3F818 = (uint64_t)"BuildingTopDepthShader";
          unk_1ECE3F820 = ggl::buildingTopDepthShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3F828 = 1;
          unk_1ECE3F830 = &ggl::buildingTopDepthShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3F838 = 2;
          unk_1ECE3F840 = &ggl::buildingTopDepthShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3F848 = 0;
          unk_1ECE3F850 = &ggl::buildingTopDepthShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::buildingTopDepthShaderVertexFunctionDescriptor(void)::ref = v481;
          *(_DWORD *)algn_1ECE3F814 = 0;
          qword_1ECE3F858 = 0;
          unk_1ECE3F860 = &ggl::buildingTopDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3F870 = 0;
          unk_1ECE3F878 = 0;
          qword_1ECE3F868 = 0;
        }
        qword_1ECE361E0 = (uint64_t)&ggl::buildingTopDepthShaderVertexFunctionDescriptor(void)::ref;
        if ((v32 & 1) == 0
        {
          ggl::buildingTopDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("BuildingTopDepthShaderFragment");
          *(_DWORD *)algn_1ECE4056C = 1;
          qword_1ECE40580 = 0;
          unk_1ECE40588 = &ggl::buildingTopDepthShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40590 = 0;
          unk_1ECE40598 = &ggl::buildingTopDepthShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE405A0 = 0;
          unk_1ECE405A8 = &ggl::buildingTopDepthShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE40570 = (uint64_t)"BuildingTopDepthShader";
          unk_1ECE40578 = 0;
          qword_1ECE405B0 = 0;
          unk_1ECE405B8 = &ggl::buildingTopDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE405C8 = 0;
          unk_1ECE405D0 = 0;
          qword_1ECE405C0 = 0;
        }
        qword_1ECE361E8 = (uint64_t)&ggl::buildingTopDepthShaderFragmentFunctionDescriptor(void)::ref;
        if ((v33 & 1) == 0
        {
          v482 = ggl::crc32::compute<19ul>("CircleShaderVertex");
          qword_1ECE3C948 = (uint64_t)"CircleShader";
          unk_1ECE3C950 = ggl::circleShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3C958 = 1;
          unk_1ECE3C960 = &ggl::circleShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3C968 = 2;
          unk_1ECE3C970 = &ggl::circleShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3C978 = 0;
          unk_1ECE3C980 = &ggl::circleShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::circleShaderVertexFunctionDescriptor(void)::ref = v482;
          *(_DWORD *)algn_1ECE3C944 = 0;
          qword_1ECE3C988 = 0;
          unk_1ECE3C990 = &ggl::circleShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3C9A0 = 0;
          unk_1ECE3C9A8 = 0;
          qword_1ECE3C998 = 0;
        }
        qword_1ECE361F0 = (uint64_t)&ggl::circleShaderVertexFunctionDescriptor(void)::ref;
        if ((v34 & 1) == 0
        {
          ggl::circleShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("CircleShaderFragment");
          *(_DWORD *)algn_1ECE3D00C = 1;
          qword_1ECE3D020 = 0;
          unk_1ECE3D028 = &ggl::circleShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3D030 = 2;
          unk_1ECE3D038 = &ggl::circleShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3D040 = 0;
          unk_1ECE3D048 = &ggl::circleShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3D010 = (uint64_t)"CircleShader";
          unk_1ECE3D018 = 0;
          qword_1ECE3D050 = 0;
          unk_1ECE3D058 = &ggl::circleShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3D068 = 0;
          unk_1ECE3D070 = 0;
          qword_1ECE3D060 = 0;
        }
        qword_1ECE361F8 = (uint64_t)&ggl::circleShaderFragmentFunctionDescriptor(void)::ref;
        if ((v35 & 1) == 0
        {
          v483 = ggl::crc32::compute<30ul>("CircleMultiStrokeShaderVertex");
          qword_1ECE30630 = (uint64_t)"CircleMultiStrokeShader";
          unk_1ECE30638 = ggl::circleMultiStrokeShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE30640 = 1;
          unk_1ECE30648 = &ggl::circleMultiStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE30650 = 4;
          unk_1ECE30658 = &ggl::circleMultiStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE30660 = 0;
          unk_1ECE30668 = &ggl::circleMultiStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::circleMultiStrokeShaderVertexFunctionDescriptor(void)::ref = v483;
          *(_DWORD *)algn_1ECE3062C = 0;
          qword_1ECE30670 = 0;
          unk_1ECE30678 = &ggl::circleMultiStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE30688 = 0;
          unk_1ECE30690 = 0;
          qword_1ECE30680 = 0;
        }
        qword_1ECE36200 = (uint64_t)&ggl::circleMultiStrokeShaderVertexFunctionDescriptor(void)::ref;
        if ((v36 & 1) == 0
        {
          ggl::circleMultiStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("CircleMultiStrokeShaderFragment");
          *(_DWORD *)algn_1ECE308E4 = 1;
          qword_1ECE308E8 = (uint64_t)"CircleMultiStrokeShader";
          unk_1ECE308F0 = 0;
          qword_1ECE308F8 = 0;
          unk_1ECE30900 = &ggl::circleMultiStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE30908 = 1;
          unk_1ECE30910 = &ggl::circleMultiStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE30918 = 0;
          unk_1ECE30920 = &ggl::circleMultiStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE30928 = 0;
          unk_1ECE30930 = &ggl::circleMultiStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE30940 = 0;
          unk_1ECE30948 = 0;
          qword_1ECE30938 = 0;
        }
        qword_1ECE36208 = (uint64_t)&ggl::circleMultiStrokeShaderFragmentFunctionDescriptor(void)::ref;
        if ((v37 & 1) == 0
        {
          v484 = ggl::crc32::compute<17ul>("ClutShaderVertex");
          qword_1ECE3C360 = (uint64_t)"ClutShader";
          unk_1ECE3C368 = ggl::clutShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3C370 = 1;
          unk_1ECE3C378 = &ggl::clutShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3C380 = 3;
          unk_1ECE3C388 = &ggl::clutShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3C390 = 0;
          unk_1ECE3C398 = &ggl::clutShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::clutShaderVertexFunctionDescriptor(void)::ref = v484;
          *(_DWORD *)algn_1ECE3C35C = 0;
          qword_1ECE3C3A0 = 0;
          unk_1ECE3C3A8 = &ggl::clutShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3C3B8 = 0;
          unk_1ECE3C3C0 = 0;
          qword_1ECE3C3B0 = 0;
        }
        qword_1ECE36210 = (uint64_t)&ggl::clutShaderVertexFunctionDescriptor(void)::ref;
        if ((v38 & 1) == 0
        {
          ggl::clutShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("ClutShaderFragment");
          *(_DWORD *)algn_1ECE3CA24 = 1;
          qword_1ECE3CA28 = (uint64_t)"ClutShader";
          unk_1ECE3CA30 = 0;
          qword_1ECE3CA38 = 0;
          unk_1ECE3CA40 = &ggl::clutShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3CA48 = 1;
          unk_1ECE3CA50 = &ggl::clutShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3CA58 = 0;
          unk_1ECE3CA60 = &ggl::clutShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3CA68 = 2;
          unk_1ECE3CA70 = &ggl::clutShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3CA80 = 0;
          unk_1ECE3CA88 = 0;
          qword_1ECE3CA78 = 2;
        }
        qword_1ECE36218 = (uint64_t)&ggl::clutShaderFragmentFunctionDescriptor(void)::ref;
        if ((v39 & 1) == 0
        {
          v485 = ggl::crc32::compute<37ul>("ColorGlyphWithNormalHaloShaderVertex");
          qword_1ECE42500 = (uint64_t)"ColorGlyphWithNormalHaloShader";
          unk_1ECE42508 = ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE42510 = 1;
          unk_1ECE42518 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42520 = 3;
          unk_1ECE42528 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42530 = 0;
          unk_1ECE42538 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::colorGlyphWithNormalHaloShaderVertexFunctionDescriptor(void)::ref = v485;
          *(_DWORD *)algn_1ECE424FC = 0;
          qword_1ECE42540 = 1;
          unk_1ECE42548 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42558 = 0;
          unk_1ECE42560 = 0;
          qword_1ECE42550 = 1;
        }
        qword_1ECE36220 = (uint64_t)&ggl::colorGlyphWithNormalHaloShaderVertexFunctionDescriptor(void)::ref;
        if ((v40 & 1) == 0
        {
          ggl::colorGlyphWithNormalHaloShaderFragmentFunctionDescriptor(void)::ref = 0x101385EE6;
          qword_1ECE42CC8 = (uint64_t)"ColorGlyphWithNormalHaloShader";
          unk_1ECE42CD0 = 0;
          qword_1ECE42CD8 = 0;
          unk_1ECE42CE0 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42CE8 = 2;
          unk_1ECE42CF0 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42CF8 = 0;
          unk_1ECE42D00 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE42D08 = 1;
          unk_1ECE42D10 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42D20 = 0;
          unk_1ECE42D28 = 0;
          qword_1ECE42D18 = 1;
        }
        qword_1ECE36228 = (uint64_t)&ggl::colorGlyphWithNormalHaloShaderFragmentFunctionDescriptor(void)::ref;
        if ((v41 & 1) == 0
        {
          v486 = ggl::crc32::compute<27ul>("InstancedDebugShaderVertex");
          qword_1ECE44898 = (uint64_t)"InstancedDebugShader";
          unk_1ECE448A0 = ggl::instancedDebugShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE448A8 = 2;
          unk_1ECE448B0 = &ggl::instancedDebugShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE448B8 = 3;
          unk_1ECE448C0 = &ggl::instancedDebugShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE448C8 = 1;
          unk_1ECE448D0 = &ggl::instancedDebugShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::instancedDebugShaderVertexFunctionDescriptor(void)::ref = v486;
          *(_DWORD *)algn_1ECE44894 = 0;
          qword_1ECE448D8 = 0;
          unk_1ECE448E0 = &ggl::instancedDebugShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE448F0 = 0;
          unk_1ECE448F8 = 0;
          qword_1ECE448E8 = 0;
        }
        qword_1ECE36230 = (uint64_t)&ggl::instancedDebugShaderVertexFunctionDescriptor(void)::ref;
        if ((v42 & 1) == 0
        {
          ggl::instancedDebugShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("InstancedDebugShaderFragment");
          *(_DWORD *)algn_1ECE44AE4 = 1;
          qword_1ECE44AE8 = (uint64_t)"InstancedDebugShader";
          unk_1ECE44AF0 = 0;
          qword_1ECE44AF8 = 0;
          unk_1ECE44B00 = &ggl::instancedDebugShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE44B08 = 1;
          unk_1ECE44B10 = &ggl::instancedDebugShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE44B18 = 0;
          unk_1ECE44B20 = &ggl::instancedDebugShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE44B28 = 0;
          unk_1ECE44B30 = &ggl::instancedDebugShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE44B40 = 0;
          unk_1ECE44B48 = 0;
          qword_1ECE44B38 = 0;
        }
        qword_1ECE36238 = (uint64_t)&ggl::instancedDebugShaderFragmentFunctionDescriptor(void)::ref;
        if ((v43 & 1) == 0
        {
          v487 = ggl::crc32::compute<18ul>("DebugShaderVertex");
          qword_1ECE3C708 = (uint64_t)"DebugShader";
          unk_1ECE3C710 = ggl::debugShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3C718 = 1;
          unk_1ECE3C720 = &ggl::debugShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3C728 = 3;
          unk_1ECE3C730 = &ggl::debugShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3C738 = 0;
          unk_1ECE3C740 = &ggl::debugShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::debugShaderVertexFunctionDescriptor(void)::ref = v487;
          *(_DWORD *)algn_1ECE3C704 = 0;
          qword_1ECE3C748 = 0;
          unk_1ECE3C750 = &ggl::debugShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3C760 = 0;
          unk_1ECE3C768 = 0;
          qword_1ECE3C758 = 0;
        }
        qword_1ECE36240 = (uint64_t)&ggl::debugShaderVertexFunctionDescriptor(void)::ref;
        if ((v44 & 1) == 0
        {
          ggl::debugShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<20ul>("DebugShaderFragment");
          *(_DWORD *)algn_1ECE3CDCC = 1;
          qword_1ECE3CDD0 = (uint64_t)"DebugShader";
          unk_1ECE3CDD8 = 0;
          qword_1ECE3CDE0 = 0;
          unk_1ECE3CDE8 = &ggl::debugShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3CDF0 = 1;
          unk_1ECE3CDF8 = &ggl::debugShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3CE00 = 0;
          unk_1ECE3CE08 = &ggl::debugShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3CE10 = 0;
          unk_1ECE3CE18 = &ggl::debugShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3CE28 = 0;
          unk_1ECE3CE30 = 0;
          qword_1ECE3CE20 = 0;
        }
        qword_1ECE36248 = (uint64_t)&ggl::debugShaderFragmentFunctionDescriptor(void)::ref;
        if ((v45 & 1) == 0
        {
          v488 = ggl::crc32::compute<26ul>("DebugExtendedShaderVertex");
          qword_1ECE3E178 = (uint64_t)"DebugExtendedShader";
          unk_1ECE3E180 = ggl::debugExtendedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3E188 = 1;
          unk_1ECE3E190 = &ggl::debugExtendedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3E198 = 3;
          unk_1ECE3E1A0 = &ggl::debugExtendedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3E1A8 = 0;
          unk_1ECE3E1B0 = &ggl::debugExtendedShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::debugExtendedShaderVertexFunctionDescriptor(void)::ref = v488;
          *(_DWORD *)algn_1ECE3E174 = 0;
          qword_1ECE3E1B8 = 0;
          unk_1ECE3E1C0 = &ggl::debugExtendedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3E1D0 = 0;
          unk_1ECE3E1D8 = 0;
          qword_1ECE3E1C8 = 0;
        }
        qword_1ECE36250 = (uint64_t)&ggl::debugExtendedShaderVertexFunctionDescriptor(void)::ref;
        if ((v46 & 1) == 0
        {
          ggl::debugExtendedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("DebugExtendedShaderFragment");
          *(_DWORD *)algn_1ECE3EF0C = 1;
          qword_1ECE3EF10 = (uint64_t)"DebugExtendedShader";
          unk_1ECE3EF18 = 0;
          qword_1ECE3EF20 = 0;
          unk_1ECE3EF28 = &ggl::debugExtendedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3EF30 = 1;
          unk_1ECE3EF38 = &ggl::debugExtendedShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3EF40 = 0;
          unk_1ECE3EF48 = &ggl::debugExtendedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3EF50 = 0;
          unk_1ECE3EF58 = &ggl::debugExtendedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3EF68 = 0;
          unk_1ECE3EF70 = 0;
          qword_1ECE3EF60 = 0;
        }
        qword_1ECE36258 = (uint64_t)&ggl::debugExtendedShaderFragmentFunctionDescriptor(void)::ref;
        if ((v47 & 1) == 0
        {
          v489 = ggl::crc32::compute<22ul>("DebugLineShaderVertex");
          qword_1ECE34C88 = (uint64_t)"DebugLineShader";
          unk_1ECE34C90 = ggl::debugLineShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE34C98 = 1;
          unk_1ECE34CA0 = &ggl::debugLineShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE34CA8 = 4;
          unk_1ECE34CB0 = &ggl::debugLineShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE34CB8 = 0;
          unk_1ECE34CC0 = &ggl::debugLineShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::debugLineShaderVertexFunctionDescriptor(void)::ref = v489;
          *(_DWORD *)algn_1ECE34C84 = 0;
          qword_1ECE34CC8 = 0;
          unk_1ECE34CD0 = &ggl::debugLineShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE34CE0 = 0;
          unk_1ECE34CE8 = 0;
          qword_1ECE34CD8 = 0;
        }
        qword_1ECE36260 = (uint64_t)&ggl::debugLineShaderVertexFunctionDescriptor(void)::ref;
        if ((v48 & 1) == 0
        {
          ggl::debugLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("DebugLineShaderFragment");
          *(_DWORD *)algn_1ECE34D6C = 1;
          qword_1ECE34D70 = (uint64_t)"DebugLineShader";
          unk_1ECE34D78 = 0;
          qword_1ECE34D80 = 0;
          unk_1ECE34D88 = &ggl::debugLineShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE34D90 = 1;
          unk_1ECE34D98 = &ggl::debugLineShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE34DA0 = 0;
          unk_1ECE34DA8 = &ggl::debugLineShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE34DB0 = 0;
          unk_1ECE34DB8 = &ggl::debugLineShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE34DC8 = 0;
          unk_1ECE34DD0 = 0;
          qword_1ECE34DC0 = 0;
        }
        qword_1ECE36268 = (uint64_t)&ggl::debugLineShaderFragmentFunctionDescriptor(void)::ref;
        if ((v49 & 1) == 0
        {
          v490 = ggl::crc32::compute<22ul>("HillshadeShaderVertex");
          qword_1ECE303F0 = (uint64_t)"HillshadeShader";
          unk_1ECE303F8 = ggl::hillshadeShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE30400 = 1;
          unk_1ECE30408 = &ggl::hillshadeShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE30410 = 2;
          unk_1ECE30418 = &ggl::hillshadeShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE30420 = 0;
          unk_1ECE30428 = &ggl::hillshadeShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::hillshadeShaderVertexFunctionDescriptor(void)::ref = v490;
          *(_DWORD *)algn_1ECE303EC = 0;
          qword_1ECE30430 = 0;
          unk_1ECE30438 = &ggl::hillshadeShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE30448 = 0;
          unk_1ECE30450 = 0;
          qword_1ECE30440 = 0;
        }
        qword_1ECE36270 = (uint64_t)&ggl::hillshadeShaderVertexFunctionDescriptor(void)::ref;
        if ((v50 & 1) == 0
        {
          v491 = ggl::crc32::compute<24ul>("HillshadeShaderFragment");
          qword_1ECE304E8 = 0;
          unk_1ECE304F0 = &ggl::hillshadeShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE304F8 = 1;
          unk_1ECE30500 = &ggl::hillshadeShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::hillshadeShaderFragmentFunctionDescriptor(void)::ref = v491;
          *(_DWORD *)algn_1ECE304D4 = 1;
          qword_1ECE30508 = 0;
          unk_1ECE30510 = &ggl::hillshadeShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE304D8 = (uint64_t)"HillshadeShader";
          unk_1ECE304E0 = 0;
          qword_1ECE30518 = 1;
          unk_1ECE30520 = &ggl::hillshadeShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE30530 = 0;
          unk_1ECE30538 = 0;
          qword_1ECE30528 = 1;
        }
        qword_1ECE36278 = (uint64_t)&ggl::hillshadeShaderFragmentFunctionDescriptor(void)::ref;
        if ((v51 & 1) == 0
        {
          v492 = ggl::crc32::compute<28ul>("DiffuseBuildingShaderVertex");
          qword_1ECE3EF80 = (uint64_t)"DiffuseBuildingShader";
          unk_1ECE3EF88 = ggl::diffuseBuildingShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3EF90 = 1;
          unk_1ECE3EF98 = &ggl::diffuseBuildingShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3EFA0 = 6;
          unk_1ECE3EFA8 = &ggl::diffuseBuildingShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3EFB0 = 0;
          unk_1ECE3EFB8 = &ggl::diffuseBuildingShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::diffuseBuildingShaderVertexFunctionDescriptor(void)::ref = v492;
          *(_DWORD *)algn_1ECE3EF7C = 0;
          qword_1ECE3EFC0 = 0;
          unk_1ECE3EFC8 = &ggl::diffuseBuildingShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3EFD8 = 0;
          unk_1ECE3EFE0 = 0;
          qword_1ECE3EFD0 = 0;
        }
        qword_1ECE36280 = (uint64_t)&ggl::diffuseBuildingShaderVertexFunctionDescriptor(void)::ref;
        if ((v52 & 1) == 0
        {
          v493 = ggl::crc32::compute<30ul>("DiffuseBuildingShaderFragment");
          qword_1ECE3FEA8 = 0;
          unk_1ECE3FEB0 = &ggl::diffuseBuildingShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3FEB8 = 3;
          unk_1ECE3FEC0 = &ggl::diffuseBuildingShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::diffuseBuildingShaderFragmentFunctionDescriptor(void)::ref = v493;
          *(_DWORD *)algn_1ECE3FE94 = 1;
          qword_1ECE3FEC8 = 0;
          unk_1ECE3FED0 = &ggl::diffuseBuildingShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3FE98 = (uint64_t)"DiffuseBuildingShader";
          unk_1ECE3FEA0 = 0;
          qword_1ECE3FED8 = 1;
          unk_1ECE3FEE0 = &ggl::diffuseBuildingShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3FEF0 = 0;
          unk_1ECE3FEF8 = 0;
          qword_1ECE3FEE8 = 1;
        }
        qword_1ECE36288 = (uint64_t)&ggl::diffuseBuildingShaderFragmentFunctionDescriptor(void)::ref;
        if ((v53 & 1) == 0
        {
          v494 = ggl::crc32::compute<38ul>("DiffuseBuildingPointyRoofShaderVertex");
          qword_1ECE42838 = (uint64_t)"DiffuseBuildingPointyRoofShader";
          unk_1ECE42840 = ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE42848 = 1;
          unk_1ECE42850 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42858 = 6;
          unk_1ECE42860 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42868 = 0;
          unk_1ECE42870 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::diffuseBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref = v494;
          *(_DWORD *)algn_1ECE42834 = 0;
          qword_1ECE42878 = 0;
          unk_1ECE42880 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42890 = 0;
          unk_1ECE42898 = 0;
          qword_1ECE42888 = 0;
        }
        qword_1ECE36290 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref;
        if ((v54 & 1) == 0
        {
          qword_1ECE42F20 = 0;
          unk_1ECE42F28 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42F30 = 3;
          unk_1ECE42F38 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::diffuseBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref = 0x19F819965;
          qword_1ECE42F40 = 0;
          unk_1ECE42F48 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE42F10 = (uint64_t)"DiffuseBuildingPointyRoofShader";
          unk_1ECE42F18 = 0;
          qword_1ECE42F50 = 0;
          unk_1ECE42F58 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42F68 = 0;
          unk_1ECE42F70 = 0;
          qword_1ECE42F60 = 0;
        }
        qword_1ECE36298 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref;
        if ((v55 & 1) == 0
        {
          v495 = ggl::crc32::compute<31ul>("DiffuseBuildingTopShaderVertex");
          qword_1ECE405E8 = (uint64_t)"DiffuseBuildingTopShader";
          unk_1ECE405F0 = ggl::diffuseBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE405F8 = 1;
          unk_1ECE40600 = &ggl::diffuseBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40608 = 6;
          unk_1ECE40610 = &ggl::diffuseBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE40618 = 0;
          unk_1ECE40620 = &ggl::diffuseBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::diffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref = v495;
          *(_DWORD *)algn_1ECE405E4 = 0;
          qword_1ECE40628 = 0;
          unk_1ECE40630 = &ggl::diffuseBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40640 = 0;
          unk_1ECE40648 = 0;
          qword_1ECE40638 = 0;
        }
        qword_1ECE362A0 = (uint64_t)&ggl::diffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref;
        if ((v56 & 1) == 0
        {
          ggl::diffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("DiffuseBuildingTopShaderFragment");
          *(_DWORD *)algn_1ECE412EC = 1;
          qword_1ECE41300 = 0;
          unk_1ECE41308 = &ggl::diffuseBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41310 = 3;
          unk_1ECE41318 = &ggl::diffuseBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE41320 = 0;
          unk_1ECE41328 = &ggl::diffuseBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE412F0 = (uint64_t)"DiffuseBuildingTopShader";
          unk_1ECE412F8 = 0;
          qword_1ECE41330 = 0;
          unk_1ECE41338 = &ggl::diffuseBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41348 = 0;
          unk_1ECE41350 = 0;
          qword_1ECE41340 = 0;
        }
        qword_1ECE362A8 = (uint64_t)&ggl::diffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
        if ((v57 & 1) == 0
        {
          v496 = ggl::crc32::compute<28ul>("DiffuseLandmarkShaderVertex");
          qword_1ECE3EFF8 = (uint64_t)"DiffuseLandmarkShader";
          unk_1ECE3F000 = ggl::diffuseLandmarkShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3F008 = 1;
          unk_1ECE3F010 = &ggl::diffuseLandmarkShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3F018 = 6;
          unk_1ECE3F020 = &ggl::diffuseLandmarkShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3F028 = 0;
          unk_1ECE3F030 = &ggl::diffuseLandmarkShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::diffuseLandmarkShaderVertexFunctionDescriptor(void)::ref = v496;
          *(_DWORD *)algn_1ECE3EFF4 = 0;
          qword_1ECE3F038 = 0;
          unk_1ECE3F040 = &ggl::diffuseLandmarkShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3F050 = 0;
          unk_1ECE3F058 = 0;
          qword_1ECE3F048 = 0;
        }
        qword_1ECE362B0 = (uint64_t)&ggl::diffuseLandmarkShaderVertexFunctionDescriptor(void)::ref;
        if ((v58 & 1) == 0
        {
          v497 = ggl::crc32::compute<30ul>("DiffuseLandmarkShaderFragment");
          qword_1ECE3FF20 = 0;
          unk_1ECE3FF28 = &ggl::diffuseLandmarkShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3FF30 = 3;
          unk_1ECE3FF38 = &ggl::diffuseLandmarkShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::diffuseLandmarkShaderFragmentFunctionDescriptor(void)::ref = v497;
          *(_DWORD *)algn_1ECE3FF0C = 1;
          qword_1ECE3FF40 = 0;
          unk_1ECE3FF48 = &ggl::diffuseLandmarkShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3FF10 = (uint64_t)"DiffuseLandmarkShader";
          unk_1ECE3FF18 = 0;
          qword_1ECE3FF50 = 1;
          unk_1ECE3FF58 = &ggl::diffuseLandmarkShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3FF68 = 0;
          unk_1ECE3FF70 = 0;
          qword_1ECE3FF60 = 1;
        }
        qword_1ECE362B8 = (uint64_t)&ggl::diffuseLandmarkShaderFragmentFunctionDescriptor(void)::ref;
        if ((v59 & 1) == 0
        {
          v498 = ggl::crc32::compute<30ul>("ElevatedFillColorShaderVertex");
          qword_1ECE34EC8 = (uint64_t)"ElevatedFillColorShader";
          unk_1ECE34ED0 = ggl::elevatedFillColorShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE34ED8 = 1;
          unk_1ECE34EE0 = &ggl::elevatedFillColorShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE34EE8 = 4;
          unk_1ECE34EF0 = &ggl::elevatedFillColorShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE34EF8 = 0;
          unk_1ECE34F00 = &ggl::elevatedFillColorShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::elevatedFillColorShaderVertexFunctionDescriptor(void)::ref = v498;
          *(_DWORD *)algn_1ECE34EC4 = 0;
          qword_1ECE34F08 = 0;
          unk_1ECE34F10 = &ggl::elevatedFillColorShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE34F20 = 0;
          unk_1ECE34F28 = 0;
          qword_1ECE34F18 = 0;
        }
        qword_1ECE362C0 = (uint64_t)&ggl::elevatedFillColorShaderVertexFunctionDescriptor(void)::ref;
        if ((v60 & 1) == 0
        {
          ggl::elevatedFillColorShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("ElevatedFillColorShaderFragment");
          *(_DWORD *)algn_1ECE34F3C = 1;
          qword_1ECE34F50 = 0;
          unk_1ECE34F58 = &ggl::elevatedFillColorShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE34F60 = 2;
          unk_1ECE34F68 = &ggl::elevatedFillColorShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE34F70 = 0;
          unk_1ECE34F78 = &ggl::elevatedFillColorShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE34F40 = (uint64_t)"ElevatedFillColorShader";
          unk_1ECE34F48 = 0;
          qword_1ECE34F80 = 0;
          unk_1ECE34F88 = &ggl::elevatedFillColorShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE34F98 = 0;
          unk_1ECE34FA0 = 0;
          qword_1ECE34F90 = 0;
        }
        qword_1ECE362C8 = (uint64_t)&ggl::elevatedFillColorShaderFragmentFunctionDescriptor(void)::ref;
        if ((v61 & 1) == 0
        {
          qword_1ECE35938 = (uint64_t)"ElevatedFillNoWidthClipColorShader";
          unk_1ECE35940 = ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE35948 = 1;
          unk_1ECE35950 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35958 = 4;
          unk_1ECE35960 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35968 = 0;
          unk_1ECE35970 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::elevatedFillNoWidthClipColorShaderVertexFunctionDescriptor(void)::ref = 2431374733;
          qword_1ECE35978 = 0;
          unk_1ECE35980 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35990 = 0;
          unk_1ECE35998 = 0;
          qword_1ECE35988 = 0;
        }
        qword_1ECE362D0 = (uint64_t)&ggl::elevatedFillNoWidthClipColorShaderVertexFunctionDescriptor(void)::ref;
        if ((v62 & 1) == 0
        {
          qword_1ECE35C00 = 0;
          unk_1ECE35C08 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35C10 = 2;
          unk_1ECE35C18 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::elevatedFillNoWidthClipColorShaderFragmentFunctionDescriptor(void)::ref = 0x138D1A785;
          qword_1ECE35C20 = 0;
          unk_1ECE35C28 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE35BF0 = (uint64_t)"ElevatedFillNoWidthClipColorShader";
          unk_1ECE35BF8 = 0;
          qword_1ECE35C30 = 0;
          unk_1ECE35C38 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35C48 = 0;
          unk_1ECE35C50 = 0;
          qword_1ECE35C40 = 0;
        }
        qword_1ECE362D8 = (uint64_t)&ggl::elevatedFillNoWidthClipColorShaderFragmentFunctionDescriptor(void)::ref;
        if ((v63 & 1) == 0
        {
          v499 = ggl::crc32::compute<32ul>("ElevatedStrokeColorShaderVertex");
          qword_1ECE33100 = (uint64_t)"ElevatedStrokeColorShader";
          unk_1ECE33108 = ggl::elevatedStrokeColorShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE33110 = 1;
          unk_1ECE33118 = &ggl::elevatedStrokeColorShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE33120 = 4;
          unk_1ECE33128 = &ggl::elevatedStrokeColorShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE33130 = 0;
          unk_1ECE33138 = &ggl::elevatedStrokeColorShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::elevatedStrokeColorShaderVertexFunctionDescriptor(void)::ref = v499;
          *(_DWORD *)algn_1ECE330FC = 0;
          qword_1ECE33140 = 0;
          unk_1ECE33148 = &ggl::elevatedStrokeColorShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE33158 = 0;
          unk_1ECE33160 = 0;
          qword_1ECE33150 = 0;
        }
        qword_1ECE362E0 = (uint64_t)&ggl::elevatedStrokeColorShaderVertexFunctionDescriptor(void)::ref;
        if ((v64 & 1) == 0
        {
          v500 = ggl::crc32::compute<34ul>("ElevatedStrokeColorShaderFragment");
          qword_1ECE332D8 = 0;
          unk_1ECE332E0 = &ggl::elevatedStrokeColorShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE332E8 = 3;
          unk_1ECE332F0 = &ggl::elevatedStrokeColorShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::elevatedStrokeColorShaderFragmentFunctionDescriptor(void)::ref = v500;
          *(_DWORD *)algn_1ECE332C4 = 1;
          qword_1ECE332F8 = 0;
          unk_1ECE33300 = &ggl::elevatedStrokeColorShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE332C8 = (uint64_t)"ElevatedStrokeColorShader";
          unk_1ECE332D0 = 0;
          qword_1ECE33308 = 1;
          unk_1ECE33310 = &ggl::elevatedStrokeColorShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE33320 = 0;
          unk_1ECE33328 = 0;
          qword_1ECE33318 = 1;
        }
        qword_1ECE362E8 = (uint64_t)&ggl::elevatedStrokeColorShaderFragmentFunctionDescriptor(void)::ref;
        if ((v65 & 1) == 0
        {
          qword_1ECE35CE0 = (uint64_t)"ElevatedStrokeColorWithDistanceShader";
          unk_1ECE35CE8 = ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE35CF0 = 1;
          unk_1ECE35CF8 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35D00 = 4;
          unk_1ECE35D08 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35D10 = 0;
          unk_1ECE35D18 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::elevatedStrokeColorWithDistanceShaderVertexFunctionDescriptor(void)::ref = 1731713468;
          qword_1ECE35D20 = 0;
          unk_1ECE35D28 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35D38 = 0;
          unk_1ECE35D40 = 0;
          qword_1ECE35D30 = 0;
        }
        qword_1ECE362F0 = (uint64_t)&ggl::elevatedStrokeColorWithDistanceShaderVertexFunctionDescriptor(void)::ref;
        if ((v66 & 1) == 0
        {
          ggl::elevatedStrokeColorWithDistanceShaderFragmentFunctionDescriptor(void)::ref = 0x1F73A1BC0;
          qword_1ECE35F18 = (uint64_t)"ElevatedStrokeColorWithDistanceShader";
          unk_1ECE35F20 = 0;
          qword_1ECE35F28 = 0;
          unk_1ECE35F30 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35F38 = 3;
          unk_1ECE35F40 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35F48 = 0;
          unk_1ECE35F50 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE35F58 = 1;
          unk_1ECE35F60 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35F70 = 0;
          unk_1ECE35F78 = 0;
          qword_1ECE35F68 = 1;
        }
        qword_1ECE362F8 = (uint64_t)&ggl::elevatedStrokeColorWithDistanceShaderFragmentFunctionDescriptor(void)::ref;
        if ((v67 & 1) == 0
        {
          v501 = ggl::crc32::compute<16ul>("FogShaderVertex");
          qword_1ECE3C278 = (uint64_t)"FogShader";
          unk_1ECE3C280 = ggl::fogShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3C288 = 1;
          unk_1ECE3C290 = &ggl::fogShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3C298 = 2;
          unk_1ECE3C2A0 = &ggl::fogShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3C2A8 = 0;
          unk_1ECE3C2B0 = &ggl::fogShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::fogShaderVertexFunctionDescriptor(void)::ref = v501;
          *(_DWORD *)algn_1ECE3C274 = 0;
          qword_1ECE3C2B8 = 0;
          unk_1ECE3C2C0 = &ggl::fogShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3C2D0 = 0;
          unk_1ECE3C2D8 = 0;
          qword_1ECE3C2C8 = 0;
        }
        qword_1ECE36300 = (uint64_t)&ggl::fogShaderVertexFunctionDescriptor(void)::ref;
        if ((v68 & 1) == 0
        {
          ggl::fogShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<18ul>("FogShaderFragment");
          *(_DWORD *)algn_1ECE3C77C = 1;
          qword_1ECE3C790 = 0;
          unk_1ECE3C798 = &ggl::fogShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3C7A0 = 0;
          unk_1ECE3C7A8 = &ggl::fogShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3C7B0 = 0;
          unk_1ECE3C7B8 = &ggl::fogShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3C780 = (uint64_t)"FogShader";
          unk_1ECE3C788 = 0;
          qword_1ECE3C7C0 = 0;
          unk_1ECE3C7C8 = &ggl::fogShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3C7D8 = 0;
          unk_1ECE3C7E0 = 0;
          qword_1ECE3C7D0 = 0;
        }
        qword_1ECE36308 = (uint64_t)&ggl::fogShaderFragmentFunctionDescriptor(void)::ref;
        if ((v69 & 1) == 0
        {
          v502 = ggl::crc32::compute<34ul>("FoggedDiffuseBuildingShaderVertex");
          qword_1ECE41780 = (uint64_t)"FoggedDiffuseBuildingShader";
          unk_1ECE41788 = ggl::foggedDiffuseBuildingShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE41790 = 1;
          unk_1ECE41798 = &ggl::foggedDiffuseBuildingShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE417A0 = 6;
          unk_1ECE417A8 = &ggl::foggedDiffuseBuildingShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE417B0 = 0;
          unk_1ECE417B8 = &ggl::foggedDiffuseBuildingShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::foggedDiffuseBuildingShaderVertexFunctionDescriptor(void)::ref = v502;
          *(_DWORD *)algn_1ECE4177C = 0;
          qword_1ECE417C0 = 0;
          unk_1ECE417C8 = &ggl::foggedDiffuseBuildingShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE417D8 = 0;
          unk_1ECE417E0 = 0;
          qword_1ECE417D0 = 0;
        }
        qword_1ECE36310 = (uint64_t)&ggl::foggedDiffuseBuildingShaderVertexFunctionDescriptor(void)::ref;
        if ((v70 & 1) == 0
        {
          v503 = ggl::crc32::compute<36ul>("FoggedDiffuseBuildingShaderFragment");
          qword_1ECE42098 = 0;
          unk_1ECE420A0 = &ggl::foggedDiffuseBuildingShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE420A8 = 3;
          unk_1ECE420B0 = &ggl::foggedDiffuseBuildingShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::foggedDiffuseBuildingShaderFragmentFunctionDescriptor(void)::ref = v503;
          *(_DWORD *)algn_1ECE42084 = 1;
          qword_1ECE420B8 = 0;
          unk_1ECE420C0 = &ggl::foggedDiffuseBuildingShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE42088 = (uint64_t)"FoggedDiffuseBuildingShader";
          unk_1ECE42090 = 0;
          qword_1ECE420C8 = 1;
          unk_1ECE420D0 = &ggl::foggedDiffuseBuildingShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE420E0 = 0;
          unk_1ECE420E8 = 0;
          qword_1ECE420D8 = 1;
        }
        qword_1ECE36318 = (uint64_t)&ggl::foggedDiffuseBuildingShaderFragmentFunctionDescriptor(void)::ref;
        if ((v71 & 1) == 0
        {
          v504 = ggl::crc32::compute<37ul>("FoggedDiffuseBuildingTopShaderVertex");
          qword_1ECE42578 = (uint64_t)"FoggedDiffuseBuildingTopShader";
          unk_1ECE42580 = ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE42588 = 1;
          unk_1ECE42590 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42598 = 6;
          unk_1ECE425A0 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE425A8 = 0;
          unk_1ECE425B0 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::foggedDiffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref = v504;
          *(_DWORD *)algn_1ECE42574 = 0;
          qword_1ECE425B8 = 0;
          unk_1ECE425C0 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE425D0 = 0;
          unk_1ECE425D8 = 0;
          qword_1ECE425C8 = 0;
        }
        qword_1ECE36320 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref;
        if ((v72 & 1) == 0
        {
          qword_1ECE42D50 = 0;
          unk_1ECE42D58 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42D60 = 3;
          unk_1ECE42D68 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::foggedDiffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref = 0x1AC1081B8;
          qword_1ECE42D70 = 0;
          unk_1ECE42D78 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE42D40 = (uint64_t)"FoggedDiffuseBuildingTopShader";
          unk_1ECE42D48 = 0;
          qword_1ECE42D80 = 0;
          unk_1ECE42D88 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42D98 = 0;
          unk_1ECE42DA0 = 0;
          qword_1ECE42D90 = 0;
        }
        qword_1ECE36328 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
        if ((v73 & 1) == 0
        {
          v505 = ggl::crc32::compute<34ul>("FoggedDiffuseLandmarkShaderVertex");
          qword_1ECE417F0 = (uint64_t)"FoggedDiffuseLandmarkShader";
          unk_1ECE417F8 = ggl::foggedDiffuseLandmarkShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE41800 = 1;
          unk_1ECE41808 = &ggl::foggedDiffuseLandmarkShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41810 = 6;
          unk_1ECE41818 = &ggl::foggedDiffuseLandmarkShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE41820 = 0;
          unk_1ECE41828 = &ggl::foggedDiffuseLandmarkShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::foggedDiffuseLandmarkShaderVertexFunctionDescriptor(void)::ref = v505;
          *(_DWORD *)algn_1ECE417EC = 0;
          qword_1ECE41830 = 0;
          unk_1ECE41838 = &ggl::foggedDiffuseLandmarkShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41848 = 0;
          unk_1ECE41850 = 0;
          qword_1ECE41840 = 0;
        }
        qword_1ECE36330 = (uint64_t)&ggl::foggedDiffuseLandmarkShaderVertexFunctionDescriptor(void)::ref;
        if ((v74 & 1) == 0
        {
          v506 = ggl::crc32::compute<36ul>("FoggedDiffuseLandmarkShaderFragment");
          qword_1ECE42108 = 0;
          unk_1ECE42110 = &ggl::foggedDiffuseLandmarkShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42118 = 3;
          unk_1ECE42120 = &ggl::foggedDiffuseLandmarkShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::foggedDiffuseLandmarkShaderFragmentFunctionDescriptor(void)::ref = v506;
          *(_DWORD *)algn_1ECE420F4 = 1;
          qword_1ECE42128 = 0;
          unk_1ECE42130 = &ggl::foggedDiffuseLandmarkShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE420F8 = (uint64_t)"FoggedDiffuseLandmarkShader";
          unk_1ECE42100 = 0;
          qword_1ECE42138 = 1;
          unk_1ECE42140 = &ggl::foggedDiffuseLandmarkShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42150 = 0;
          unk_1ECE42158 = 0;
          qword_1ECE42148 = 1;
        }
        qword_1ECE36338 = (uint64_t)&ggl::foggedDiffuseLandmarkShaderFragmentFunctionDescriptor(void)::ref;
        if ((v75 & 1) == 0
        {
          v507 = ggl::crc32::compute<35ul>("FoggedSpecularBuildingShaderVertex");
          qword_1ECE41D58 = (uint64_t)"FoggedSpecularBuildingShader";
          unk_1ECE41D60 = ggl::foggedSpecularBuildingShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE41D68 = 1;
          unk_1ECE41D70 = &ggl::foggedSpecularBuildingShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41D78 = 6;
          unk_1ECE41D80 = &ggl::foggedSpecularBuildingShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE41D88 = 0;
          unk_1ECE41D90 = &ggl::foggedSpecularBuildingShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::foggedSpecularBuildingShaderVertexFunctionDescriptor(void)::ref = v507;
          *(_DWORD *)algn_1ECE41D54 = 0;
          qword_1ECE41D98 = 0;
          unk_1ECE41DA0 = &ggl::foggedSpecularBuildingShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41DB0 = 0;
          unk_1ECE41DB8 = 0;
          qword_1ECE41DA8 = 0;
        }
        qword_1ECE36340 = (uint64_t)&ggl::foggedSpecularBuildingShaderVertexFunctionDescriptor(void)::ref;
        if ((v76 & 1) == 0
        {
          v508 = ggl::crc32::compute<37ul>("FoggedSpecularBuildingShaderFragment");
          qword_1ECE42600 = 0;
          unk_1ECE42608 = &ggl::foggedSpecularBuildingShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42610 = 4;
          unk_1ECE42618 = &ggl::foggedSpecularBuildingShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::foggedSpecularBuildingShaderFragmentFunctionDescriptor(void)::ref = v508;
          *(_DWORD *)algn_1ECE425EC = 1;
          qword_1ECE42620 = 0;
          unk_1ECE42628 = &ggl::foggedSpecularBuildingShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE425F0 = (uint64_t)"FoggedSpecularBuildingShader";
          unk_1ECE425F8 = 0;
          qword_1ECE42630 = 1;
          unk_1ECE42638 = &ggl::foggedSpecularBuildingShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42648 = 0;
          unk_1ECE42650 = 0;
          qword_1ECE42640 = 1;
        }
        qword_1ECE36348 = (uint64_t)&ggl::foggedSpecularBuildingShaderFragmentFunctionDescriptor(void)::ref;
        if ((v77 & 1) == 0
        {
          v509 = ggl::crc32::compute<38ul>("FoggedSpecularBuildingTopShaderVertex");
          qword_1ECE42A10 = (uint64_t)"FoggedSpecularBuildingTopShader";
          unk_1ECE42A18 = ggl::foggedSpecularBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE42A20 = 1;
          unk_1ECE42A28 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42A30 = 6;
          unk_1ECE42A38 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42A40 = 0;
          unk_1ECE42A48 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::foggedSpecularBuildingTopShaderVertexFunctionDescriptor(void)::ref = v509;
          *(_DWORD *)algn_1ECE42A0C = 0;
          qword_1ECE42A50 = 0;
          unk_1ECE42A58 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42A68 = 0;
          unk_1ECE42A70 = 0;
          qword_1ECE42A60 = 0;
        }
        qword_1ECE36350 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderVertexFunctionDescriptor(void)::ref;
        if ((v78 & 1) == 0
        {
          qword_1ECE430F8 = 0;
          unk_1ECE43100 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43108 = 4;
          unk_1ECE43110 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::foggedSpecularBuildingTopShaderFragmentFunctionDescriptor(void)::ref = 0x113B913CCLL;
          qword_1ECE43118 = 0;
          unk_1ECE43120 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE430E8 = (uint64_t)"FoggedSpecularBuildingTopShader";
          unk_1ECE430F0 = 0;
          qword_1ECE43128 = 0;
          unk_1ECE43130 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE43140 = 0;
          unk_1ECE43148 = 0;
          qword_1ECE43138 = 0;
        }
        qword_1ECE36358 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
        if ((v79 & 1) == 0
        {
          v510 = ggl::crc32::compute<35ul>("FoggedSpecularLandmarkShaderVertex");
          qword_1ECE41DD0 = (uint64_t)"FoggedSpecularLandmarkShader";
          unk_1ECE41DD8 = ggl::foggedSpecularLandmarkShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE41DE0 = 1;
          unk_1ECE41DE8 = &ggl::foggedSpecularLandmarkShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41DF0 = 6;
          unk_1ECE41DF8 = &ggl::foggedSpecularLandmarkShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE41E00 = 0;
          unk_1ECE41E08 = &ggl::foggedSpecularLandmarkShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::foggedSpecularLandmarkShaderVertexFunctionDescriptor(void)::ref = v510;
          *(_DWORD *)algn_1ECE41DCC = 0;
          qword_1ECE41E10 = 0;
          unk_1ECE41E18 = &ggl::foggedSpecularLandmarkShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41E28 = 0;
          unk_1ECE41E30 = 0;
          qword_1ECE41E20 = 0;
        }
        qword_1ECE36360 = (uint64_t)&ggl::foggedSpecularLandmarkShaderVertexFunctionDescriptor(void)::ref;
        if ((v80 & 1) == 0
        {
          v511 = ggl::crc32::compute<37ul>("FoggedSpecularLandmarkShaderFragment");
          qword_1ECE42678 = 0;
          unk_1ECE42680 = &ggl::foggedSpecularLandmarkShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42688 = 4;
          unk_1ECE42690 = &ggl::foggedSpecularLandmarkShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::foggedSpecularLandmarkShaderFragmentFunctionDescriptor(void)::ref = v511;
          *(_DWORD *)algn_1ECE42664 = 1;
          qword_1ECE42698 = 0;
          unk_1ECE426A0 = &ggl::foggedSpecularLandmarkShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE42668 = (uint64_t)"FoggedSpecularLandmarkShader";
          unk_1ECE42670 = 0;
          qword_1ECE426A8 = 1;
          unk_1ECE426B0 = &ggl::foggedSpecularLandmarkShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE426C0 = 0;
          unk_1ECE426C8 = 0;
          qword_1ECE426B8 = 1;
        }
        qword_1ECE36368 = (uint64_t)&ggl::foggedSpecularLandmarkShaderFragmentFunctionDescriptor(void)::ref;
        if ((v81 & 1) == 0
        {
          v512 = ggl::crc32::compute<28ul>("GlobeAtmosphereShaderVertex");
          qword_1ECE43E90 = (uint64_t)"GlobeAtmosphereShader";
          unk_1ECE43E98 = ggl::globeAtmosphereShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE43EA0 = 1;
          unk_1ECE43EA8 = &ggl::globeAtmosphereShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43EB0 = 2;
          unk_1ECE43EB8 = &ggl::globeAtmosphereShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE43EC0 = 0;
          unk_1ECE43EC8 = &ggl::globeAtmosphereShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::globeAtmosphereShaderVertexFunctionDescriptor(void)::ref = v512;
          *(_DWORD *)algn_1ECE43E8C = 0;
          qword_1ECE43ED0 = 0;
          unk_1ECE43ED8 = &ggl::globeAtmosphereShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE43EE8 = 0;
          unk_1ECE43EF0 = 0;
          qword_1ECE43EE0 = 0;
        }
        qword_1ECE36370 = (uint64_t)&ggl::globeAtmosphereShaderVertexFunctionDescriptor(void)::ref;
        if ((v82 & 1) == 0
        {
          ggl::globeAtmosphereShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("GlobeAtmosphereShaderFragment");
          *(_DWORD *)algn_1ECE44B54 = 1;
          qword_1ECE44B68 = 0;
          unk_1ECE44B70 = &ggl::globeAtmosphereShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE44B78 = 2;
          unk_1ECE44B80 = &ggl::globeAtmosphereShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE44B88 = 0;
          unk_1ECE44B90 = &ggl::globeAtmosphereShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE44B58 = (uint64_t)"GlobeAtmosphereShader";
          unk_1ECE44B60 = 0;
          qword_1ECE44B98 = 0;
          unk_1ECE44BA0 = &ggl::globeAtmosphereShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE44BB0 = 0;
          unk_1ECE44BB8 = 0;
          qword_1ECE44BA8 = 0;
        }
        qword_1ECE36378 = (uint64_t)&ggl::globeAtmosphereShaderFragmentFunctionDescriptor(void)::ref;
        if ((v83 & 1) == 0
        {
          ggl::globeStarsShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("GlobeStarsShaderVertex");
          *(_DWORD *)algn_1ECE444EC = 0;
          qword_1ECE444F0 = (uint64_t)"GlobeStarsShader";
          unk_1ECE444F8 = ggl::globeStarsShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE44500 = 1;
          unk_1ECE44508 = &ggl::globeStarsShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE44510 = 1;
          unk_1ECE44518 = &ggl::globeStarsShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE44520 = 0;
          unk_1ECE44528 = &ggl::globeStarsShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE44530 = 0;
          unk_1ECE44538 = &ggl::globeStarsShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE44548 = 0;
          unk_1ECE44550 = 0;
          qword_1ECE44540 = 0;
        }
        qword_1ECE36380 = (uint64_t)&ggl::globeStarsShaderVertexFunctionDescriptor(void)::ref;
        if ((v84 & 1) == 0
        {
          ggl::globeStarsShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("GlobeStarsShaderFragment");
          *(_DWORD *)algn_1ECE445D4 = 1;
          qword_1ECE445E8 = 0;
          unk_1ECE445F0 = &ggl::globeStarsShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE445F8 = 0;
          unk_1ECE44600 = &ggl::globeStarsShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE44608 = 0;
          unk_1ECE44610 = &ggl::globeStarsShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE445D8 = (uint64_t)"GlobeStarsShader";
          unk_1ECE445E0 = 0;
          qword_1ECE44618 = 0;
          unk_1ECE44620 = &ggl::globeStarsShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE44630 = 0;
          unk_1ECE44638 = 0;
          qword_1ECE44628 = 0;
        }
        qword_1ECE36388 = (uint64_t)&ggl::globeStarsShaderFragmentFunctionDescriptor(void)::ref;
        if ((v85 & 1) == 0
        {
          v513 = ggl::crc32::compute<17ul>("GlowShaderVertex");
          qword_1ECE3C3D0 = (uint64_t)"GlowShader";
          unk_1ECE3C3D8 = ggl::glowShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3C3E0 = 1;
          unk_1ECE3C3E8 = &ggl::glowShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3C3F0 = 3;
          unk_1ECE3C3F8 = &ggl::glowShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3C400 = 0;
          unk_1ECE3C408 = &ggl::glowShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::glowShaderVertexFunctionDescriptor(void)::ref = v513;
          *(_DWORD *)algn_1ECE3C3CC = 0;
          qword_1ECE3C410 = 0;
          unk_1ECE3C418 = &ggl::glowShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3C428 = 0;
          unk_1ECE3C430 = 0;
          qword_1ECE3C420 = 0;
        }
        qword_1ECE36390 = (uint64_t)&ggl::glowShaderVertexFunctionDescriptor(void)::ref;
        if ((v86 & 1) == 0
        {
          ggl::glowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("GlowShaderFragment");
          *(_DWORD *)algn_1ECE3CA94 = 1;
          qword_1ECE3CA98 = (uint64_t)"GlowShader";
          unk_1ECE3CAA0 = 0;
          qword_1ECE3CAA8 = 0;
          unk_1ECE3CAB0 = &ggl::glowShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3CAB8 = 1;
          unk_1ECE3CAC0 = &ggl::glowShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3CAC8 = 0;
          unk_1ECE3CAD0 = &ggl::glowShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3CAD8 = 0;
          unk_1ECE3CAE0 = &ggl::glowShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3CAF0 = 0;
          unk_1ECE3CAF8 = 0;
          qword_1ECE3CAE8 = 0;
        }
        qword_1ECE36398 = (uint64_t)&ggl::glowShaderFragmentFunctionDescriptor(void)::ref;
        if ((v87 & 1) == 0
        {
          v514 = ggl::crc32::compute<22ul>("GlowAlphaShaderVertex");
          qword_1ECE3D328 = (uint64_t)"GlowAlphaShader";
          unk_1ECE3D330 = ggl::glowAlphaShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3D338 = 1;
          unk_1ECE3D340 = &ggl::glowAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3D348 = 3;
          unk_1ECE3D350 = &ggl::glowAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3D358 = 0;
          unk_1ECE3D360 = &ggl::glowAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::glowAlphaShaderVertexFunctionDescriptor(void)::ref = v514;
          *(_DWORD *)algn_1ECE3D324 = 0;
          qword_1ECE3D368 = 0;
          unk_1ECE3D370 = &ggl::glowAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3D380 = 0;
          unk_1ECE3D388 = 0;
          qword_1ECE3D378 = 0;
        }
        qword_1ECE363A0 = (uint64_t)&ggl::glowAlphaShaderVertexFunctionDescriptor(void)::ref;
        if ((v88 & 1) == 0
        {
          ggl::glowAlphaShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("GlowAlphaShaderFragment");
          *(_DWORD *)algn_1ECE3D8EC = 1;
          qword_1ECE3D900 = 0;
          unk_1ECE3D908 = &ggl::glowAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3D910 = 0;
          unk_1ECE3D918 = &ggl::glowAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3D920 = 0;
          unk_1ECE3D928 = &ggl::glowAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3D8F0 = (uint64_t)"GlowAlphaShader";
          unk_1ECE3D8F8 = 0;
          qword_1ECE3D930 = 0;
          unk_1ECE3D938 = &ggl::glowAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3D948 = 0;
          unk_1ECE3D950 = 0;
          qword_1ECE3D940 = 0;
        }
        qword_1ECE363A8 = (uint64_t)&ggl::glowAlphaShaderFragmentFunctionDescriptor(void)::ref;
        if ((v89 & 1) == 0
        {
          ggl::glyph3dShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<20ul>("Glyph3dShaderVertex");
          *(_DWORD *)algn_1ECE3CEAC = 0;
          qword_1ECE3CEB0 = (uint64_t)"Glyph3dShader";
          unk_1ECE3CEB8 = ggl::glyph3dShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3CEC0 = 1;
          unk_1ECE3CEC8 = &ggl::glyph3dShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3CED0 = 4;
          unk_1ECE3CED8 = &ggl::glyph3dShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3CEE0 = 0;
          unk_1ECE3CEE8 = &ggl::glyph3dShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3CEF0 = 2;
          unk_1ECE3CEF8 = &ggl::glyph3dShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3CF08 = 0;
          unk_1ECE3CF10 = 0;
          qword_1ECE3CF00 = 2;
        }
        qword_1ECE363B0 = (uint64_t)&ggl::glyph3dShaderVertexFunctionDescriptor(void)::ref;
        if ((v90 & 1) == 0
        {
          v515 = ggl::crc32::compute<22ul>("Glyph3dShaderFragment");
          qword_1ECE3D3A8 = 0;
          unk_1ECE3D3B0 = &ggl::glyph3dShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3D3B8 = 2;
          unk_1ECE3D3C0 = &ggl::glyph3dShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::glyph3dShaderFragmentFunctionDescriptor(void)::ref = v515;
          *(_DWORD *)algn_1ECE3D394 = 1;
          qword_1ECE3D3C8 = 0;
          unk_1ECE3D3D0 = &ggl::glyph3dShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3D398 = (uint64_t)"Glyph3dShader";
          unk_1ECE3D3A0 = 0;
          qword_1ECE3D3D8 = 1;
          unk_1ECE3D3E0 = &ggl::glyph3dShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3D3F0 = 0;
          unk_1ECE3D3F8 = 0;
          qword_1ECE3D3E8 = 1;
        }
        qword_1ECE363B8 = (uint64_t)&ggl::glyph3dShaderFragmentFunctionDescriptor(void)::ref;
        if ((v91 & 1) == 0
        {
          ggl::glyph3dLowPrecisionShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("Glyph3dLowPrecisionShaderVertex");
          *(_DWORD *)algn_1ECE40D0C = 0;
          qword_1ECE40D10 = (uint64_t)"Glyph3dLowPrecisionShader";
          unk_1ECE40D18 = ggl::glyph3dLowPrecisionShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE40D20 = 1;
          unk_1ECE40D28 = &ggl::glyph3dLowPrecisionShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40D30 = 4;
          unk_1ECE40D38 = &ggl::glyph3dLowPrecisionShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE40D40 = 0;
          unk_1ECE40D48 = &ggl::glyph3dLowPrecisionShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE40D50 = 2;
          unk_1ECE40D58 = &ggl::glyph3dLowPrecisionShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40D68 = 0;
          unk_1ECE40D70 = 0;
          qword_1ECE40D60 = 2;
        }
        qword_1ECE363C0 = (uint64_t)&ggl::glyph3dLowPrecisionShaderVertexFunctionDescriptor(void)::ref;
        if ((v92 & 1) == 0
        {
          v516 = ggl::crc32::compute<34ul>("Glyph3dLowPrecisionShaderFragment");
          qword_1ECE41878 = 0;
          unk_1ECE41880 = &ggl::glyph3dLowPrecisionShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41888 = 2;
          unk_1ECE41890 = &ggl::glyph3dLowPrecisionShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::glyph3dLowPrecisionShaderFragmentFunctionDescriptor(void)::ref = v516;
          *(_DWORD *)algn_1ECE41864 = 1;
          qword_1ECE41898 = 0;
          unk_1ECE418A0 = &ggl::glyph3dLowPrecisionShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE41868 = (uint64_t)"Glyph3dLowPrecisionShader";
          unk_1ECE41870 = 0;
          qword_1ECE418A8 = 1;
          unk_1ECE418B0 = &ggl::glyph3dLowPrecisionShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE418C0 = 0;
          unk_1ECE418C8 = 0;
          qword_1ECE418B8 = 1;
        }
        qword_1ECE363C8 = (uint64_t)&ggl::glyph3dLowPrecisionShaderFragmentFunctionDescriptor(void)::ref;
        if ((v93 & 1) == 0
        {
          ggl::glyph3dLowPrecisionHaloShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("Glyph3dLowPrecisionHaloShaderVertex");
          *(_DWORD *)algn_1ECE4216C = 0;
          qword_1ECE42170 = (uint64_t)"Glyph3dLowPrecisionHaloShader";
          unk_1ECE42178 = ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE42180 = 1;
          unk_1ECE42188 = &ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42190 = 4;
          unk_1ECE42198 = &ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE421A0 = 0;
          unk_1ECE421A8 = &ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE421B0 = 2;
          unk_1ECE421B8 = &ggl::glyph3dLowPrecisionHaloShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE421C8 = 0;
          unk_1ECE421D0 = 0;
          qword_1ECE421C0 = 2;
        }
        qword_1ECE363D0 = (uint64_t)&ggl::glyph3dLowPrecisionHaloShaderVertexFunctionDescriptor(void)::ref;
        if ((v94 & 1) == 0
        {
          v517 = ggl::crc32::compute<38ul>("Glyph3dLowPrecisionHaloShaderFragment");
          qword_1ECE42A98 = 0;
          unk_1ECE42AA0 = &ggl::glyph3dLowPrecisionHaloShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42AA8 = 2;
          unk_1ECE42AB0 = &ggl::glyph3dLowPrecisionHaloShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::glyph3dLowPrecisionHaloShaderFragmentFunctionDescriptor(void)::ref = v517;
          *(_DWORD *)algn_1ECE42A84 = 1;
          qword_1ECE42AB8 = 0;
          unk_1ECE42AC0 = &ggl::glyph3dLowPrecisionHaloShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE42A88 = (uint64_t)"Glyph3dLowPrecisionHaloShader";
          unk_1ECE42A90 = 0;
          qword_1ECE42AC8 = 1;
          unk_1ECE42AD0 = &ggl::glyph3dLowPrecisionHaloShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42AE0 = 0;
          unk_1ECE42AE8 = 0;
          qword_1ECE42AD8 = 1;
        }
        qword_1ECE363D8 = (uint64_t)&ggl::glyph3dLowPrecisionHaloShaderFragmentFunctionDescriptor(void)::ref;
        if ((v95 & 1) == 0
        {
          ggl::glyph3dRaymarchShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("Glyph3dRaymarchShaderVertex");
          *(_DWORD *)algn_1ECE44A6C = 0;
          qword_1ECE44A70 = (uint64_t)"Glyph3dRaymarchShader";
          unk_1ECE44A78 = ggl::glyph3dRaymarchShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE44A80 = 1;
          unk_1ECE44A88 = &ggl::glyph3dRaymarchShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE44A90 = 4;
          unk_1ECE44A98 = &ggl::glyph3dRaymarchShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE44AA0 = 0;
          unk_1ECE44AA8 = &ggl::glyph3dRaymarchShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE44AB0 = 2;
          unk_1ECE44AB8 = &ggl::glyph3dRaymarchShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE44AC8 = 0;
          unk_1ECE44AD0 = 0;
          qword_1ECE44AC0 = 2;
        }
        qword_1ECE363E0 = (uint64_t)&ggl::glyph3dRaymarchShaderVertexFunctionDescriptor(void)::ref;
        if ((v96 & 1) == 0
        {
          v518 = ggl::crc32::compute<30ul>("Glyph3dRaymarchShaderFragment");
          qword_1ECE44BD8 = 0;
          unk_1ECE44BE0 = &ggl::glyph3dRaymarchShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE44BE8 = 2;
          unk_1ECE44BF0 = &ggl::glyph3dRaymarchShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::glyph3dRaymarchShaderFragmentFunctionDescriptor(void)::ref = v518;
          *(_DWORD *)algn_1ECE44BC4 = 1;
          qword_1ECE44BF8 = 0;
          unk_1ECE44C00 = &ggl::glyph3dRaymarchShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE44BC8 = (uint64_t)"Glyph3dRaymarchShader";
          unk_1ECE44BD0 = 0;
          qword_1ECE44C08 = 1;
          unk_1ECE44C10 = &ggl::glyph3dRaymarchShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE44C20 = 0;
          unk_1ECE44C28 = 0;
          qword_1ECE44C18 = 1;
        }
        qword_1ECE363E8 = (uint64_t)&ggl::glyph3dRaymarchShaderFragmentFunctionDescriptor(void)::ref;
        if ((v97 & 1) == 0
        {
          v519 = ggl::crc32::compute<32ul>("GlyphWithNormalHaloShaderVertex");
          qword_1ECE40D80 = (uint64_t)"GlyphWithNormalHaloShader";
          unk_1ECE40D88 = ggl::glyphWithNormalHaloShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE40D90 = 1;
          unk_1ECE40D98 = &ggl::glyphWithNormalHaloShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40DA0 = 2;
          unk_1ECE40DA8 = &ggl::glyphWithNormalHaloShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE40DB0 = 0;
          unk_1ECE40DB8 = &ggl::glyphWithNormalHaloShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::glyphWithNormalHaloShaderVertexFunctionDescriptor(void)::ref = v519;
          *(_DWORD *)algn_1ECE40D7C = 0;
          qword_1ECE40DC0 = 1;
          unk_1ECE40DC8 = &ggl::glyphWithNormalHaloShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40DD8 = 0;
          unk_1ECE40DE0 = 0;
          qword_1ECE40DD0 = 1;
        }
        qword_1ECE363F0 = (uint64_t)&ggl::glyphWithNormalHaloShaderVertexFunctionDescriptor(void)::ref;
        if ((v98 & 1) == 0
        {
          v520 = ggl::crc32::compute<34ul>("GlyphWithNormalHaloShaderFragment");
          qword_1ECE418E8 = 0;
          unk_1ECE418F0 = &ggl::glyphWithNormalHaloShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE418F8 = 2;
          unk_1ECE41900 = &ggl::glyphWithNormalHaloShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::glyphWithNormalHaloShaderFragmentFunctionDescriptor(void)::ref = v520;
          *(_DWORD *)algn_1ECE418D4 = 1;
          qword_1ECE41908 = 0;
          unk_1ECE41910 = &ggl::glyphWithNormalHaloShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE418D8 = (uint64_t)"GlyphWithNormalHaloShader";
          unk_1ECE418E0 = 0;
          qword_1ECE41918 = 1;
          unk_1ECE41920 = &ggl::glyphWithNormalHaloShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41930 = 0;
          unk_1ECE41938 = 0;
          qword_1ECE41928 = 1;
        }
        qword_1ECE363F8 = (uint64_t)&ggl::glyphWithNormalHaloShaderFragmentFunctionDescriptor(void)::ref;
        if ((v99 & 1) == 0
        {
          qword_1ECE43160 = (uint64_t)"GradientPolylineOverlayFillShader";
          unk_1ECE43168 = ggl::gradientPolylineOverlayFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE43170 = 1;
          unk_1ECE43178 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43180 = 3;
          unk_1ECE43188 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE43190 = 0;
          unk_1ECE43198 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::gradientPolylineOverlayFillShaderVertexFunctionDescriptor(void)::ref = 878884475;
          qword_1ECE431A0 = 0;
          unk_1ECE431A8 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE431B8 = 0;
          unk_1ECE431C0 = 0;
          qword_1ECE431B0 = 0;
        }
        qword_1ECE36400 = (uint64_t)&ggl::gradientPolylineOverlayFillShaderVertexFunctionDescriptor(void)::ref;
        if ((v100 & 1) == 0
        {
          ggl::gradientPolylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref = 0x1AE8C75D5;
          qword_1ECE434F8 = (uint64_t)"GradientPolylineOverlayFillShader";
          unk_1ECE43500 = 0;
          qword_1ECE43508 = 0;
          unk_1ECE43510 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43518 = 2;
          unk_1ECE43520 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE43528 = 0;
          unk_1ECE43530 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE43538 = 1;
          unk_1ECE43540 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE43550 = 0;
          unk_1ECE43558 = 0;
          qword_1ECE43548 = 1;
        }
        qword_1ECE36408 = (uint64_t)&ggl::gradientPolylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref;
        if ((v101 & 1) == 0
        {
          qword_1ECE43320 = (uint64_t)"GradientPolylineOverlayAlphaShader";
          unk_1ECE43328 = ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE43330 = 1;
          unk_1ECE43338 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43340 = 3;
          unk_1ECE43348 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE43350 = 0;
          unk_1ECE43358 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::gradientPolylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref = 1527713323;
          qword_1ECE43360 = 0;
          unk_1ECE43368 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE43378 = 0;
          unk_1ECE43380 = 0;
          qword_1ECE43370 = 0;
        }
        qword_1ECE36410 = (uint64_t)&ggl::gradientPolylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref;
        if ((v102 & 1) == 0
        {
          ggl::gradientPolylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref = 0x1D18D7C52;
          qword_1ECE43648 = (uint64_t)"GradientPolylineOverlayAlphaShader";
          unk_1ECE43650 = 0;
          qword_1ECE43658 = 0;
          unk_1ECE43660 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43668 = 2;
          unk_1ECE43670 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE43678 = 0;
          unk_1ECE43680 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE43688 = 1;
          unk_1ECE43690 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE436A0 = 0;
          unk_1ECE436A8 = 0;
          qword_1ECE43698 = 1;
        }
        qword_1ECE36418 = (uint64_t)&ggl::gradientPolylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref;
        if ((v103 & 1) == 0
        {
          qword_1ECE436C0 = (uint64_t)"GradientPolylineOverlayAlphaFillShader";
          unk_1ECE436C8 = ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE436D0 = 1;
          unk_1ECE436D8 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE436E0 = 3;
          unk_1ECE436E8 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE436F0 = 0;
          unk_1ECE436F8 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::gradientPolylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref = 503820842;
          qword_1ECE43700 = 0;
          unk_1ECE43708 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE43718 = 0;
          unk_1ECE43720 = 0;
          qword_1ECE43710 = 0;
        }
        qword_1ECE36420 = (uint64_t)&ggl::gradientPolylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref;
        if ((v104 & 1) == 0
        {
          ggl::gradientPolylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref = 0x10A41F7BCLL;
          qword_1ECE43738 = (uint64_t)"GradientPolylineOverlayAlphaFillShader";
          unk_1ECE43740 = 0;
          qword_1ECE43748 = 0;
          unk_1ECE43750 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43758 = 2;
          unk_1ECE43760 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE43768 = 0;
          unk_1ECE43770 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE43778 = 1;
          unk_1ECE43780 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE43790 = 0;
          unk_1ECE43798 = 0;
          qword_1ECE43788 = 1;
        }
        qword_1ECE36428 = (uint64_t)&ggl::gradientPolylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref;
        if ((v105 & 1) == 0
        {
          v521 = ggl::crc32::compute<17ul>("GridShaderVertex");
          qword_1ECE3C448 = (uint64_t)"GridShader";
          unk_1ECE3C450 = ggl::gridShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3C458 = 1;
          unk_1ECE3C460 = &ggl::gridShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3C468 = 4;
          unk_1ECE3C470 = &ggl::gridShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3C478 = 0;
          unk_1ECE3C480 = &ggl::gridShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::gridShaderVertexFunctionDescriptor(void)::ref = v521;
          *(_DWORD *)algn_1ECE3C444 = 0;
          qword_1ECE3C488 = 0;
          unk_1ECE3C490 = &ggl::gridShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3C4A0 = 0;
          unk_1ECE3C4A8 = 0;
          qword_1ECE3C498 = 0;
        }
        qword_1ECE36430 = (uint64_t)&ggl::gridShaderVertexFunctionDescriptor(void)::ref;
        if ((v106 & 1) == 0
        {
          ggl::gridShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("GridShaderFragment");
          *(_DWORD *)algn_1ECE3CB0C = 1;
          qword_1ECE3CB20 = 0;
          unk_1ECE3CB28 = &ggl::gridShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3CB30 = 2;
          unk_1ECE3CB38 = &ggl::gridShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3CB40 = 0;
          unk_1ECE3CB48 = &ggl::gridShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3CB10 = (uint64_t)"GridShader";
          unk_1ECE3CB18 = 0;
          qword_1ECE3CB50 = 0;
          unk_1ECE3CB58 = &ggl::gridShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3CB68 = 0;
          unk_1ECE3CB70 = 0;
          qword_1ECE3CB60 = 0;
        }
        qword_1ECE36438 = (uint64_t)&ggl::gridShaderFragmentFunctionDescriptor(void)::ref;
        if ((v107 & 1) == 0
        {
          v522 = ggl::crc32::compute<19ul>("GridUVShaderVertex");
          qword_1EE578068 = (uint64_t)"GridUVShader";
          unk_1EE578070 = ggl::gridUVShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EE578078 = 1;
          unk_1EE578080 = &ggl::gridUVShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EE578088 = 4;
          unk_1EE578090 = &ggl::gridUVShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EE578098 = 0;
          unk_1EE5780A0 = &ggl::gridUVShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::gridUVShaderVertexFunctionDescriptor(void)::ref = v522;
          *(_DWORD *)algn_1EE578064 = 0;
          qword_1EE5780A8 = 0;
          unk_1EE5780B0 = &ggl::gridUVShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EE5780C0 = 0;
          unk_1EE5780C8 = 0;
          qword_1EE5780B8 = 0;
        }
        qword_1ECE36440 = (uint64_t)&ggl::gridUVShaderVertexFunctionDescriptor(void)::ref;
        if ((v108 & 1) == 0
        {
          ggl::gridUVShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("GridUVShaderFragment");
          *(_DWORD *)algn_1EE57814C = 1;
          qword_1EE578160 = 0;
          unk_1EE578168 = &ggl::gridUVShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EE578170 = 2;
          unk_1EE578178 = &ggl::gridUVShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EE578180 = 0;
          unk_1EE578188 = &ggl::gridUVShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EE578150 = (uint64_t)"GridUVShader";
          unk_1EE578158 = 0;
          qword_1EE578190 = 0;
          unk_1EE578198 = &ggl::gridUVShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EE5781A8 = 0;
          unk_1EE5781B0 = 0;
          qword_1EE5781A0 = 0;
        }
        qword_1ECE36448 = (uint64_t)&ggl::gridUVShaderFragmentFunctionDescriptor(void)::ref;
        if ((v109 & 1) == 0
        {
          v523 = ggl::crc32::compute<17ul>("IconShaderVertex");
          qword_1ECE3C4C0 = (uint64_t)"IconShader";
          unk_1ECE3C4C8 = ggl::iconShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3C4D0 = 1;
          unk_1ECE3C4D8 = &ggl::iconShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3C4E0 = 2;
          unk_1ECE3C4E8 = &ggl::iconShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3C4F0 = 0;
          unk_1ECE3C4F8 = &ggl::iconShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::iconShaderVertexFunctionDescriptor(void)::ref = v523;
          *(_DWORD *)algn_1ECE3C4BC = 0;
          qword_1ECE3C500 = 1;
          unk_1ECE3C508 = &ggl::iconShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3C518 = 0;
          unk_1ECE3C520 = 0;
          qword_1ECE3C510 = 1;
        }
        qword_1ECE36450 = (uint64_t)&ggl::iconShaderVertexFunctionDescriptor(void)::ref;
        if ((v110 & 1) == 0
        {
          v524 = ggl::crc32::compute<19ul>("IconShaderFragment");
          qword_1ECE3CB98 = 0;
          unk_1ECE3CBA0 = &ggl::iconShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3CBA8 = 1;
          unk_1ECE3CBB0 = &ggl::iconShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::iconShaderFragmentFunctionDescriptor(void)::ref = v524;
          *(_DWORD *)algn_1ECE3CB84 = 1;
          qword_1ECE3CBB8 = 0;
          unk_1ECE3CBC0 = &ggl::iconShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3CB88 = (uint64_t)"IconShader";
          unk_1ECE3CB90 = 0;
          qword_1ECE3CBC8 = 1;
          unk_1ECE3CBD0 = &ggl::iconShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3CBE0 = 0;
          unk_1ECE3CBE8 = 0;
          qword_1ECE3CBD8 = 1;
        }
        qword_1ECE36458 = (uint64_t)&ggl::iconShaderFragmentFunctionDescriptor(void)::ref;
        if ((v111 & 1) == 0
        {
          ggl::maskedIconShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("MaskedIconShaderVertex");
          *(_DWORD *)algn_1ECE3045C = 0;
          qword_1ECE30460 = (uint64_t)"MaskedIconShader";
          unk_1ECE30468 = ggl::maskedIconShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE30470 = 1;
          unk_1ECE30478 = &ggl::maskedIconShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE30480 = 4;
          unk_1ECE30488 = &ggl::maskedIconShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE30490 = 0;
          unk_1ECE30498 = &ggl::maskedIconShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE304A0 = 2;
          unk_1ECE304A8 = &ggl::maskedIconShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE304B8 = 0;
          unk_1ECE304C0 = 0;
          qword_1ECE304B0 = 2;
        }
        qword_1ECE36460 = (uint64_t)&ggl::maskedIconShaderVertexFunctionDescriptor(void)::ref;
        if ((v112 & 1) == 0
        {
          v525 = ggl::crc32::compute<25ul>("MaskedIconShaderFragment");
          qword_1ECE30558 = 0;
          unk_1ECE30560 = &ggl::maskedIconShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE30568 = 1;
          unk_1ECE30570 = &ggl::maskedIconShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::maskedIconShaderFragmentFunctionDescriptor(void)::ref = v525;
          *(_DWORD *)algn_1ECE30544 = 1;
          qword_1ECE30578 = 0;
          unk_1ECE30580 = &ggl::maskedIconShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE30548 = (uint64_t)"MaskedIconShader";
          unk_1ECE30550 = 0;
          qword_1ECE30588 = 1;
          unk_1ECE30590 = &ggl::maskedIconShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE305A0 = 0;
          unk_1ECE305A8 = 0;
          qword_1ECE30598 = 1;
        }
        qword_1ECE36468 = (uint64_t)&ggl::maskedIconShaderFragmentFunctionDescriptor(void)::ref;
        if ((v113 & 1) == 0
        {
          ggl::waypointShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("WaypointShaderVertex");
          *(_DWORD *)algn_1ECE34C0C = 0;
          qword_1ECE34C10 = (uint64_t)"WaypointShader";
          unk_1ECE34C18 = ggl::waypointShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE34C20 = 1;
          unk_1ECE34C28 = &ggl::waypointShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE34C30 = 4;
          unk_1ECE34C38 = &ggl::waypointShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE34C40 = 0;
          unk_1ECE34C48 = &ggl::waypointShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE34C50 = 2;
          unk_1ECE34C58 = &ggl::waypointShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE34C68 = 0;
          unk_1ECE34C70 = 0;
          qword_1ECE34C60 = 2;
        }
        qword_1ECE36470 = (uint64_t)&ggl::waypointShaderVertexFunctionDescriptor(void)::ref;
        if ((v114 & 1) == 0
        {
          ggl::waypointShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("WaypointShaderFragment");
          *(_DWORD *)algn_1ECE34CF4 = 1;
          qword_1ECE34CF8 = (uint64_t)"WaypointShader";
          unk_1ECE34D00 = 0;
          qword_1ECE34D08 = 0;
          unk_1ECE34D10 = &ggl::waypointShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE34D18 = 1;
          unk_1ECE34D20 = &ggl::waypointShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE34D28 = 0;
          unk_1ECE34D30 = &ggl::waypointShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE34D38 = 0;
          unk_1ECE34D40 = &ggl::waypointShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE34D50 = 0;
          unk_1ECE34D58 = 0;
          qword_1ECE34D48 = 0;
        }
        qword_1ECE36478 = (uint64_t)&ggl::waypointShaderFragmentFunctionDescriptor(void)::ref;
        if ((v115 & 1) == 0
        {
          ggl::shadowShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("ShadowShaderVertex");
          *(_DWORD *)algn_1EE5780DC = 0;
          qword_1EE5780E0 = (uint64_t)"ShadowShader";
          unk_1EE5780E8 = ggl::shadowShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EE5780F0 = 1;
          unk_1EE5780F8 = &ggl::shadowShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EE578100 = 3;
          unk_1EE578108 = &ggl::shadowShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EE578110 = 0;
          unk_1EE578118 = &ggl::shadowShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1EE578120 = 2;
          unk_1EE578128 = &ggl::shadowShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EE578138 = 0;
          unk_1EE578140 = 0;
          qword_1EE578130 = 2;
        }
        qword_1ECE36480 = (uint64_t)&ggl::shadowShaderVertexFunctionDescriptor(void)::ref;
        if ((v116 & 1) == 0
        {
          ggl::shadowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("ShadowShaderFragment");
          *(_DWORD *)algn_1EE5781C4 = 1;
          qword_1EE5781C8 = (uint64_t)"ShadowShader";
          unk_1EE5781D0 = 0;
          qword_1EE5781D8 = 0;
          unk_1EE5781E0 = &ggl::shadowShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EE5781E8 = 1;
          unk_1EE5781F0 = &ggl::shadowShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EE5781F8 = 0;
          unk_1EE578200 = &ggl::shadowShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EE578208 = 0;
          unk_1EE578210 = &ggl::shadowShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EE578220 = 0;
          unk_1EE578228 = 0;
          qword_1EE578218 = 0;
        }
        qword_1ECE36488 = (uint64_t)&ggl::shadowShaderFragmentFunctionDescriptor(void)::ref;
        if ((v117 & 1) == 0
        {
          v526 = ggl::crc32::compute<22ul>("ImageCopyShaderVertex");
          qword_1ECE3D410 = (uint64_t)"ImageCopyShader";
          unk_1ECE3D418 = ggl::imageCopyShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3D420 = 1;
          unk_1ECE3D428 = &ggl::imageCopyShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3D430 = 0;
          unk_1ECE3D438 = &ggl::imageCopyShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3D440 = 0;
          unk_1ECE3D448 = &ggl::imageCopyShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::imageCopyShaderVertexFunctionDescriptor(void)::ref = v526;
          *(_DWORD *)algn_1ECE3D40C = 0;
          qword_1ECE3D450 = 0;
          unk_1ECE3D458 = &ggl::imageCopyShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3D468 = 0;
          unk_1ECE3D470 = 0;
          qword_1ECE3D460 = 0;
        }
        qword_1ECE36490 = (uint64_t)&ggl::imageCopyShaderVertexFunctionDescriptor(void)::ref;
        if ((v118 & 1) == 0
        {
          v527 = ggl::crc32::compute<24ul>("ImageCopyShaderFragment");
          qword_1ECE3D978 = 0;
          unk_1ECE3D980 = &ggl::imageCopyShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3D988 = 0;
          unk_1ECE3D990 = &ggl::imageCopyShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::imageCopyShaderFragmentFunctionDescriptor(void)::ref = v527;
          *(_DWORD *)algn_1ECE3D964 = 1;
          qword_1ECE3D998 = 0;
          unk_1ECE3D9A0 = &ggl::imageCopyShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3D968 = (uint64_t)"ImageCopyShader";
          unk_1ECE3D970 = 0;
          qword_1ECE3D9A8 = 1;
          unk_1ECE3D9B0 = &ggl::imageCopyShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3D9C0 = 0;
          unk_1ECE3D9C8 = 0;
          qword_1ECE3D9B8 = 1;
        }
        qword_1ECE36498 = (uint64_t)&ggl::imageCopyShaderFragmentFunctionDescriptor(void)::ref;
        if ((v119 & 1) == 0
        {
          v528 = ggl::crc32::compute<26ul>("LandmarkDepthShaderVertex");
          qword_1ECE3E340 = (uint64_t)"LandmarkDepthShader";
          unk_1ECE3E348 = ggl::landmarkDepthShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3E350 = 1;
          unk_1ECE3E358 = &ggl::landmarkDepthShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3E360 = 2;
          unk_1ECE3E368 = &ggl::landmarkDepthShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3E370 = 0;
          unk_1ECE3E378 = &ggl::landmarkDepthShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::landmarkDepthShaderVertexFunctionDescriptor(void)::ref = v528;
          *(_DWORD *)algn_1ECE3E33C = 0;
          qword_1ECE3E380 = 0;
          unk_1ECE3E388 = &ggl::landmarkDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3E398 = 0;
          unk_1ECE3E3A0 = 0;
          qword_1ECE3E390 = 0;
        }
        qword_1ECE364A0 = (uint64_t)&ggl::landmarkDepthShaderVertexFunctionDescriptor(void)::ref;
        if ((v120 & 1) == 0
        {
          ggl::landmarkDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("LandmarkDepthShaderFragment");
          *(_DWORD *)algn_1ECE3F234 = 1;
          qword_1ECE3F248 = 0;
          unk_1ECE3F250 = &ggl::landmarkDepthShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3F258 = 0;
          unk_1ECE3F260 = &ggl::landmarkDepthShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3F268 = 0;
          unk_1ECE3F270 = &ggl::landmarkDepthShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3F238 = (uint64_t)"LandmarkDepthShader";
          unk_1ECE3F240 = 0;
          qword_1ECE3F278 = 0;
          unk_1ECE3F280 = &ggl::landmarkDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3F290 = 0;
          unk_1ECE3F298 = 0;
          qword_1ECE3F288 = 0;
        }
        qword_1ECE364A8 = (uint64_t)&ggl::landmarkDepthShaderFragmentFunctionDescriptor(void)::ref;
        if ((v121 & 1) == 0
        {
          v529 = ggl::crc32::compute<25ul>("LandmarkFlatShaderVertex");
          qword_1ECE3DF30 = (uint64_t)"LandmarkFlatShader";
          unk_1ECE3DF38 = ggl::landmarkFlatShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3DF40 = 1;
          unk_1ECE3DF48 = &ggl::landmarkFlatShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3DF50 = 4;
          unk_1ECE3DF58 = &ggl::landmarkFlatShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3DF60 = 0;
          unk_1ECE3DF68 = &ggl::landmarkFlatShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::landmarkFlatShaderVertexFunctionDescriptor(void)::ref = v529;
          *(_DWORD *)algn_1ECE3DF2C = 0;
          qword_1ECE3DF70 = 0;
          unk_1ECE3DF78 = &ggl::landmarkFlatShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3DF88 = 0;
          unk_1ECE3DF90 = 0;
          qword_1ECE3DF80 = 0;
        }
        qword_1ECE364B0 = (uint64_t)&ggl::landmarkFlatShaderVertexFunctionDescriptor(void)::ref;
        if ((v122 & 1) == 0
        {
          v530 = ggl::crc32::compute<27ul>("LandmarkFlatShaderFragment");
          qword_1ECE3EB68 = 0;
          unk_1ECE3EB70 = &ggl::landmarkFlatShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3EB78 = 1;
          unk_1ECE3EB80 = &ggl::landmarkFlatShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::landmarkFlatShaderFragmentFunctionDescriptor(void)::ref = v530;
          *(_DWORD *)algn_1ECE3EB54 = 1;
          qword_1ECE3EB88 = 0;
          unk_1ECE3EB90 = &ggl::landmarkFlatShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3EB58 = (uint64_t)"LandmarkFlatShader";
          unk_1ECE3EB60 = 0;
          qword_1ECE3EB98 = 1;
          unk_1ECE3EBA0 = &ggl::landmarkFlatShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3EBB0 = 0;
          unk_1ECE3EBB8 = 0;
          qword_1ECE3EBA8 = 1;
        }
        qword_1ECE364B8 = (uint64_t)&ggl::landmarkFlatShaderFragmentFunctionDescriptor(void)::ref;
        if ((v123 & 1) == 0
        {
          ggl::lineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<17ul>("LineShaderVertex");
          *(_DWORD *)algn_1ECE3C534 = 0;
          qword_1ECE3C538 = (uint64_t)"LineShader";
          unk_1ECE3C540 = ggl::lineShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3C548 = 1;
          unk_1ECE3C550 = &ggl::lineShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3C558 = 1;
          unk_1ECE3C560 = &ggl::lineShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3C568 = 0;
          unk_1ECE3C570 = &ggl::lineShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3C578 = 0;
          unk_1ECE3C580 = &ggl::lineShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3C590 = 0;
          unk_1ECE3C598 = 0;
          qword_1ECE3C588 = 0;
        }
        qword_1ECE364C0 = (uint64_t)&ggl::lineShaderVertexFunctionDescriptor(void)::ref;
        if ((v124 & 1) == 0
        {
          ggl::lineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("LineShaderFragment");
          *(_DWORD *)algn_1ECE3CBFC = 1;
          qword_1ECE3CC00 = (uint64_t)"LineShader";
          unk_1ECE3CC08 = 0;
          qword_1ECE3CC10 = 0;
          unk_1ECE3CC18 = &ggl::lineShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3CC20 = 1;
          unk_1ECE3CC28 = &ggl::lineShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3CC30 = 0;
          unk_1ECE3CC38 = &ggl::lineShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3CC40 = 0;
          unk_1ECE3CC48 = &ggl::lineShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3CC58 = 0;
          unk_1ECE3CC60 = 0;
          qword_1ECE3CC50 = 0;
        }
        qword_1ECE364C8 = (uint64_t)&ggl::lineShaderFragmentFunctionDescriptor(void)::ref;
        if ((v125 & 1) == 0
        {
          v531 = ggl::crc32::compute<26ul>("ManeuverPointShaderVertex");
          qword_1ECE3E3B0 = (uint64_t)"ManeuverPointShader";
          unk_1ECE3E3B8 = ggl::maneuverPointShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3E3C0 = 1;
          unk_1ECE3E3C8 = &ggl::maneuverPointShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3E3D0 = 2;
          unk_1ECE3E3D8 = &ggl::maneuverPointShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3E3E0 = 0;
          unk_1ECE3E3E8 = &ggl::maneuverPointShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::maneuverPointShaderVertexFunctionDescriptor(void)::ref = v531;
          *(_DWORD *)algn_1ECE3E3AC = 0;
          qword_1ECE3E3F0 = 0;
          unk_1ECE3E3F8 = &ggl::maneuverPointShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3E408 = 0;
          unk_1ECE3E410 = 0;
          qword_1ECE3E400 = 0;
        }
        qword_1ECE364D0 = (uint64_t)&ggl::maneuverPointShaderVertexFunctionDescriptor(void)::ref;
        if ((v126 & 1) == 0
        {
          v532 = ggl::crc32::compute<28ul>("ManeuverPointShaderFragment");
          qword_1ECE3F2B8 = 0;
          unk_1ECE3F2C0 = &ggl::maneuverPointShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3F2C8 = 1;
          unk_1ECE3F2D0 = &ggl::maneuverPointShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::maneuverPointShaderFragmentFunctionDescriptor(void)::ref = v532;
          *(_DWORD *)algn_1ECE3F2A4 = 1;
          qword_1ECE3F2D8 = 0;
          unk_1ECE3F2E0 = &ggl::maneuverPointShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3F2A8 = (uint64_t)"ManeuverPointShader";
          unk_1ECE3F2B0 = 0;
          qword_1ECE3F2E8 = 1;
          unk_1ECE3F2F0 = &ggl::maneuverPointShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3F300 = 0;
          unk_1ECE3F308 = 0;
          qword_1ECE3F2F8 = 1;
        }
        qword_1ECE364D8 = (uint64_t)&ggl::maneuverPointShaderFragmentFunctionDescriptor(void)::ref;
        if ((v127 & 1) == 0
        {
          ggl::occlusionLineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("OcclusionLineShaderVertex");
          *(_DWORD *)algn_1ECE3E424 = 0;
          qword_1ECE3E428 = (uint64_t)"OcclusionLineShader";
          unk_1ECE3E430 = ggl::occlusionLineShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3E438 = 1;
          unk_1ECE3E440 = &ggl::occlusionLineShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3E448 = 1;
          unk_1ECE3E450 = &ggl::occlusionLineShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3E458 = 0;
          unk_1ECE3E460 = &ggl::occlusionLineShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3E468 = 0;
          unk_1ECE3E470 = &ggl::occlusionLineShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3E480 = 0;
          unk_1ECE3E488 = 0;
          qword_1ECE3E478 = 0;
        }
        qword_1ECE364E0 = (uint64_t)&ggl::occlusionLineShaderVertexFunctionDescriptor(void)::ref;
        if ((v128 & 1) == 0
        {
          ggl::occlusionLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("OcclusionLineShaderFragment");
          *(_DWORD *)algn_1ECE3F31C = 1;
          qword_1ECE3F320 = (uint64_t)"OcclusionLineShader";
          unk_1ECE3F328 = 0;
          qword_1ECE3F330 = 0;
          unk_1ECE3F338 = &ggl::occlusionLineShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3F340 = 1;
          unk_1ECE3F348 = &ggl::occlusionLineShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3F350 = 0;
          unk_1ECE3F358 = &ggl::occlusionLineShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3F360 = 0;
          unk_1ECE3F368 = &ggl::occlusionLineShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3F378 = 0;
          unk_1ECE3F380 = 0;
          qword_1ECE3F370 = 0;
        }
        qword_1ECE364E8 = (uint64_t)&ggl::occlusionLineShaderFragmentFunctionDescriptor(void)::ref;
        if ((v129 & 1) == 0
        {
          v533 = ggl::crc32::compute<29ul>("OptimizedTrafficShaderVertex");
          qword_1ECE3F978 = (uint64_t)"OptimizedTrafficShader";
          unk_1ECE3F980 = ggl::optimizedTrafficShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3F988 = 1;
          unk_1ECE3F990 = &ggl::optimizedTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3F998 = 3;
          unk_1ECE3F9A0 = &ggl::optimizedTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3F9A8 = 0;
          unk_1ECE3F9B0 = &ggl::optimizedTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::optimizedTrafficShaderVertexFunctionDescriptor(void)::ref = v533;
          *(_DWORD *)algn_1ECE3F974 = 0;
          qword_1ECE3F9B8 = 0;
          unk_1ECE3F9C0 = &ggl::optimizedTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3F9D0 = 0;
          unk_1ECE3F9D8 = 0;
          qword_1ECE3F9C8 = 0;
        }
        qword_1ECE364F0 = (uint64_t)&ggl::optimizedTrafficShaderVertexFunctionDescriptor(void)::ref;
        if ((v130 & 1) == 0
        {
          ggl::optimizedTrafficShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("OptimizedTrafficShaderFragment");
          *(_DWORD *)algn_1ECE406CC = 1;
          qword_1ECE406D0 = (uint64_t)"OptimizedTrafficShader";
          unk_1ECE406D8 = 0;
          qword_1ECE406E0 = 0;
          unk_1ECE406E8 = &ggl::optimizedTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE406F0 = 1;
          unk_1ECE406F8 = &ggl::optimizedTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE40700 = 0;
          unk_1ECE40708 = &ggl::optimizedTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE40710 = 0;
          unk_1ECE40718 = &ggl::optimizedTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40728 = 0;
          unk_1ECE40730 = 0;
          qword_1ECE40720 = 0;
        }
        qword_1ECE364F8 = (uint64_t)&ggl::optimizedTrafficShaderFragmentFunctionDescriptor(void)::ref;
        if ((v131 & 1) == 0
        {
          v534 = ggl::crc32::compute<30ul>("OuterShadowRibbonShaderVertex");
          qword_1ECE400F0 = (uint64_t)"OuterShadowRibbonShader";
          unk_1ECE400F8 = ggl::outerShadowRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE40100 = 1;
          unk_1ECE40108 = &ggl::outerShadowRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40110 = 3;
          unk_1ECE40118 = &ggl::outerShadowRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE40120 = 0;
          unk_1ECE40128 = &ggl::outerShadowRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::outerShadowRibbonShaderVertexFunctionDescriptor(void)::ref = v534;
          *(_DWORD *)algn_1ECE400EC = 0;
          qword_1ECE40130 = 0;
          unk_1ECE40138 = &ggl::outerShadowRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40148 = 0;
          unk_1ECE40150 = 0;
          qword_1ECE40140 = 0;
        }
        qword_1ECE36500 = (uint64_t)&ggl::outerShadowRibbonShaderVertexFunctionDescriptor(void)::ref;
        if ((v132 & 1) == 0
        {
          v535 = ggl::crc32::compute<32ul>("OuterShadowRibbonShaderFragment");
          qword_1ECE40E08 = 0;
          unk_1ECE40E10 = &ggl::outerShadowRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40E18 = 1;
          unk_1ECE40E20 = &ggl::outerShadowRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::outerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref = v535;
          *(_DWORD *)algn_1ECE40DF4 = 1;
          qword_1ECE40E28 = 0;
          unk_1ECE40E30 = &ggl::outerShadowRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE40DF8 = (uint64_t)"OuterShadowRibbonShader";
          unk_1ECE40E00 = 0;
          qword_1ECE40E38 = 1;
          unk_1ECE40E40 = &ggl::outerShadowRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40E50 = 0;
          unk_1ECE40E58 = 0;
          qword_1ECE40E48 = 1;
        }
        qword_1ECE36508 = (uint64_t)&ggl::outerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref;
        if ((v133 & 1) == 0
        {
          v536 = ggl::crc32::compute<31ul>("PolygonOverlayFillShaderVertex");
          qword_1ECE407B8 = (uint64_t)"PolygonOverlayFillShader";
          unk_1ECE407C0 = ggl::polygonOverlayFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE407C8 = 1;
          unk_1ECE407D0 = &ggl::polygonOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE407D8 = 3;
          unk_1ECE407E0 = &ggl::polygonOverlayFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE407E8 = 0;
          unk_1ECE407F0 = &ggl::polygonOverlayFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonOverlayFillShaderVertexFunctionDescriptor(void)::ref = v536;
          *(_DWORD *)algn_1ECE407B4 = 0;
          qword_1ECE407F8 = 0;
          unk_1ECE40800 = &ggl::polygonOverlayFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40810 = 0;
          unk_1ECE40818 = 0;
          qword_1ECE40808 = 0;
        }
        qword_1ECE36510 = (uint64_t)&ggl::polygonOverlayFillShaderVertexFunctionDescriptor(void)::ref;
        if ((v134 & 1) == 0
        {
          ggl::polygonOverlayFillShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("PolygonOverlayFillShaderFragment");
          *(_DWORD *)algn_1ECE4144C = 1;
          qword_1ECE41460 = 0;
          unk_1ECE41468 = &ggl::polygonOverlayFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41470 = 2;
          unk_1ECE41478 = &ggl::polygonOverlayFillShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE41480 = 0;
          unk_1ECE41488 = &ggl::polygonOverlayFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE41450 = (uint64_t)"PolygonOverlayFillShader";
          unk_1ECE41458 = 0;
          qword_1ECE41490 = 0;
          unk_1ECE41498 = &ggl::polygonOverlayFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE414A8 = 0;
          unk_1ECE414B0 = 0;
          qword_1ECE414A0 = 0;
        }
        qword_1ECE36518 = (uint64_t)&ggl::polygonOverlayFillShaderFragmentFunctionDescriptor(void)::ref;
        if ((v135 & 1) == 0
        {
          v537 = ggl::crc32::compute<36ul>("PolygonOverlayAntialiasShaderVertex");
          qword_1ECE42338 = (uint64_t)"PolygonOverlayAntialiasShader";
          unk_1ECE42340 = ggl::polygonOverlayAntialiasShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE42348 = 1;
          unk_1ECE42350 = &ggl::polygonOverlayAntialiasShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42358 = 3;
          unk_1ECE42360 = &ggl::polygonOverlayAntialiasShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42368 = 0;
          unk_1ECE42370 = &ggl::polygonOverlayAntialiasShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonOverlayAntialiasShaderVertexFunctionDescriptor(void)::ref = v537;
          *(_DWORD *)algn_1ECE42334 = 0;
          qword_1ECE42378 = 0;
          unk_1ECE42380 = &ggl::polygonOverlayAntialiasShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42390 = 0;
          unk_1ECE42398 = 0;
          qword_1ECE42388 = 0;
        }
        qword_1ECE36520 = (uint64_t)&ggl::polygonOverlayAntialiasShaderVertexFunctionDescriptor(void)::ref;
        if ((v136 & 1) == 0
        {
          v538 = ggl::crc32::compute<38ul>("PolygonOverlayAntialiasShaderFragment");
          qword_1ECE42BF0 = 0;
          unk_1ECE42BF8 = &ggl::polygonOverlayAntialiasShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42C00 = 2;
          unk_1ECE42C08 = &ggl::polygonOverlayAntialiasShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::polygonOverlayAntialiasShaderFragmentFunctionDescriptor(void)::ref = v538;
          *(_DWORD *)algn_1ECE42BDC = 1;
          qword_1ECE42C10 = 0;
          unk_1ECE42C18 = &ggl::polygonOverlayAntialiasShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE42BE0 = (uint64_t)"PolygonOverlayAntialiasShader";
          unk_1ECE42BE8 = 0;
          qword_1ECE42C20 = 1;
          unk_1ECE42C28 = &ggl::polygonOverlayAntialiasShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42C38 = 0;
          unk_1ECE42C40 = 0;
          qword_1ECE42C30 = 1;
        }
        qword_1ECE36528 = (uint64_t)&ggl::polygonOverlayAntialiasShaderFragmentFunctionDescriptor(void)::ref;
        if ((v137 & 1) == 0
        {
          v539 = ggl::crc32::compute<31ul>("MaskingOverlayFillShaderVertex");
          qword_1ECE307F8 = (uint64_t)"MaskingOverlayFillShader";
          unk_1ECE30800 = ggl::maskingOverlayFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE30808 = 1;
          unk_1ECE30810 = &ggl::maskingOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE30818 = 3;
          unk_1ECE30820 = &ggl::maskingOverlayFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE30828 = 0;
          unk_1ECE30830 = &ggl::maskingOverlayFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::maskingOverlayFillShaderVertexFunctionDescriptor(void)::ref = v539;
          *(_DWORD *)algn_1ECE307F4 = 0;
          qword_1ECE30838 = 0;
          unk_1ECE30840 = &ggl::maskingOverlayFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE30850 = 0;
          unk_1ECE30858 = 0;
          qword_1ECE30848 = 0;
        }
        qword_1ECE36530 = (uint64_t)&ggl::maskingOverlayFillShaderVertexFunctionDescriptor(void)::ref;
        if ((v138 & 1) == 0
        {
          v540 = ggl::crc32::compute<33ul>("MaskingOverlayFillShaderFragment");
          qword_1ECE30A50 = 0;
          unk_1ECE30A58 = &ggl::maskingOverlayFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE30A60 = 1;
          unk_1ECE30A68 = &ggl::maskingOverlayFillShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::maskingOverlayFillShaderFragmentFunctionDescriptor(void)::ref = v540;
          *(_DWORD *)algn_1ECE30A3C = 1;
          qword_1ECE30A70 = 0;
          unk_1ECE30A78 = &ggl::maskingOverlayFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE30A40 = (uint64_t)"MaskingOverlayFillShader";
          unk_1ECE30A48 = 0;
          qword_1ECE30A80 = 1;
          unk_1ECE30A88 = &ggl::maskingOverlayFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE30A98 = 0;
          unk_1ECE30AA0 = 0;
          qword_1ECE30A90 = 1;
        }
        qword_1ECE36538 = (uint64_t)&ggl::maskingOverlayFillShaderFragmentFunctionDescriptor(void)::ref;
        if ((v139 & 1) == 0
        {
          v541 = ggl::crc32::compute<34ul>("MaskingOverlayMaskingShaderVertex");
          qword_1ECE30B28 = (uint64_t)"MaskingOverlayMaskingShader";
          unk_1ECE30B30 = ggl::maskingOverlayMaskingShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE30B38 = 1;
          unk_1ECE30B40 = &ggl::maskingOverlayMaskingShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE30B48 = 2;
          unk_1ECE30B50 = &ggl::maskingOverlayMaskingShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE30B58 = 0;
          unk_1ECE30B60 = &ggl::maskingOverlayMaskingShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::maskingOverlayMaskingShaderVertexFunctionDescriptor(void)::ref = v541;
          *(_DWORD *)algn_1ECE30B24 = 0;
          qword_1ECE30B68 = 0;
          unk_1ECE30B70 = &ggl::maskingOverlayMaskingShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE30B80 = 0;
          unk_1ECE30B88 = 0;
          qword_1ECE30B78 = 0;
        }
        qword_1ECE36540 = (uint64_t)&ggl::maskingOverlayMaskingShaderVertexFunctionDescriptor(void)::ref;
        if ((v140 & 1) == 0
        {
          ggl::maskingOverlayMaskingShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("MaskingOverlayMaskingShaderFragment");
          *(_DWORD *)algn_1ECE30B9C = 1;
          qword_1ECE30BA0 = (uint64_t)"MaskingOverlayMaskingShader";
          unk_1ECE30BA8 = 0;
          qword_1ECE30BB0 = 0;
          unk_1ECE30BB8 = &ggl::maskingOverlayMaskingShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE30BC0 = 1;
          unk_1ECE30BC8 = &ggl::maskingOverlayMaskingShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE30BD0 = 0;
          unk_1ECE30BD8 = &ggl::maskingOverlayMaskingShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE30BE0 = 0;
          unk_1ECE30BE8 = &ggl::maskingOverlayMaskingShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE30BF8 = 0;
          unk_1ECE30C00 = 0;
          qword_1ECE30BF0 = 0;
        }
        qword_1ECE36548 = (uint64_t)&ggl::maskingOverlayMaskingShaderFragmentFunctionDescriptor(void)::ref;
        if ((v141 & 1) == 0
        {
          v542 = ggl::crc32::compute<28ul>("PatternedRibbonShaderVertex");
          qword_1ECE3F390 = (uint64_t)"PatternedRibbonShader";
          unk_1ECE3F398 = ggl::patternedRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3F3A0 = 1;
          unk_1ECE3F3A8 = &ggl::patternedRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3F3B0 = 4;
          unk_1ECE3F3B8 = &ggl::patternedRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3F3C0 = 0;
          unk_1ECE3F3C8 = &ggl::patternedRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::patternedRibbonShaderVertexFunctionDescriptor(void)::ref = v542;
          *(_DWORD *)algn_1ECE3F38C = 0;
          qword_1ECE3F3D0 = 0;
          unk_1ECE3F3D8 = &ggl::patternedRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3F3E8 = 0;
          unk_1ECE3F3F0 = 0;
          qword_1ECE3F3E0 = 0;
        }
        qword_1ECE36550 = (uint64_t)&ggl::patternedRibbonShaderVertexFunctionDescriptor(void)::ref;
        if ((v142 & 1) == 0
        {
          v543 = ggl::crc32::compute<30ul>("PatternedRibbonShaderFragment");
          qword_1ECE40178 = 0;
          unk_1ECE40180 = &ggl::patternedRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40188 = 2;
          unk_1ECE40190 = &ggl::patternedRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::patternedRibbonShaderFragmentFunctionDescriptor(void)::ref = v543;
          *(_DWORD *)algn_1ECE40164 = 1;
          qword_1ECE40198 = 0;
          unk_1ECE401A0 = &ggl::patternedRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE40168 = (uint64_t)"PatternedRibbonShader";
          unk_1ECE40170 = 0;
          qword_1ECE401A8 = 1;
          unk_1ECE401B0 = &ggl::patternedRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE401C0 = 0;
          unk_1ECE401C8 = 0;
          qword_1ECE401B8 = 1;
        }
        qword_1ECE36558 = (uint64_t)&ggl::patternedRibbonShaderFragmentFunctionDescriptor(void)::ref;
        if ((v143 & 1) == 0
        {
          qword_1ECE432B0 = (uint64_t)"WriteStencilPatternedRibbonShader";
          unk_1ECE432B8 = ggl::writeStencilPatternedRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE432C0 = 1;
          unk_1ECE432C8 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE432D0 = 3;
          unk_1ECE432D8 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE432E0 = 0;
          unk_1ECE432E8 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::writeStencilPatternedRibbonShaderVertexFunctionDescriptor(void)::ref = 3294471237;
          qword_1ECE432F0 = 0;
          unk_1ECE432F8 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE43308 = 0;
          unk_1ECE43310 = 0;
          qword_1ECE43300 = 0;
        }
        qword_1ECE36560 = (uint64_t)&ggl::writeStencilPatternedRibbonShaderVertexFunctionDescriptor(void)::ref;
        if ((v144 & 1) == 0
        {
          qword_1ECE435E8 = 0;
          unk_1ECE435F0 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE435F8 = 1;
          unk_1ECE43600 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::writeStencilPatternedRibbonShaderFragmentFunctionDescriptor(void)::ref = 0x11CF0EFDFLL;
          qword_1ECE43608 = 0;
          unk_1ECE43610 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE435D8 = (uint64_t)"WriteStencilPatternedRibbonShader";
          unk_1ECE435E0 = 0;
          qword_1ECE43618 = 0;
          unk_1ECE43620 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE43630 = 0;
          unk_1ECE43638 = 0;
          qword_1ECE43628 = 0;
        }
        qword_1ECE36568 = (uint64_t)&ggl::writeStencilPatternedRibbonShaderFragmentFunctionDescriptor(void)::ref;
        if ((v145 & 1) == 0
        {
          v544 = ggl::crc32::compute<34ul>("PolygonAnimatableFillShaderVertex");
          qword_1ECE41948 = (uint64_t)"PolygonAnimatableFillShader";
          unk_1ECE41950 = ggl::polygonAnimatableFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE41958 = 1;
          unk_1ECE41960 = &ggl::polygonAnimatableFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41968 = 3;
          unk_1ECE41970 = &ggl::polygonAnimatableFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE41978 = 0;
          unk_1ECE41980 = &ggl::polygonAnimatableFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonAnimatableFillShaderVertexFunctionDescriptor(void)::ref = v544;
          *(_DWORD *)algn_1ECE41944 = 0;
          qword_1ECE41988 = 0;
          unk_1ECE41990 = &ggl::polygonAnimatableFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE419A0 = 0;
          unk_1ECE419A8 = 0;
          qword_1ECE41998 = 0;
        }
        qword_1ECE36570 = (uint64_t)&ggl::polygonAnimatableFillShaderVertexFunctionDescriptor(void)::ref;
        if ((v146 & 1) == 0
        {
          ggl::polygonAnimatableFillShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("PolygonAnimatableFillShaderFragment");
          *(_DWORD *)algn_1ECE4224C = 1;
          qword_1ECE42260 = 0;
          unk_1ECE42268 = &ggl::polygonAnimatableFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42270 = 2;
          unk_1ECE42278 = &ggl::polygonAnimatableFillShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42280 = 0;
          unk_1ECE42288 = &ggl::polygonAnimatableFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE42250 = (uint64_t)"PolygonAnimatableFillShader";
          unk_1ECE42258 = 0;
          qword_1ECE42290 = 2;
          unk_1ECE42298 = &ggl::polygonAnimatableFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE422A8 = 0;
          unk_1ECE422B0 = 0;
          qword_1ECE422A0 = 2;
        }
        qword_1ECE36578 = (uint64_t)&ggl::polygonAnimatableFillShaderFragmentFunctionDescriptor(void)::ref;
        if ((v147 & 1) == 0
        {
          v545 = ggl::crc32::compute<36ul>("PolygonAnimatableStrokeShaderVertex");
          qword_1ECE422C0 = (uint64_t)"PolygonAnimatableStrokeShader";
          unk_1ECE422C8 = ggl::polygonAnimatableStrokeShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE422D0 = 1;
          unk_1ECE422D8 = &ggl::polygonAnimatableStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE422E0 = 3;
          unk_1ECE422E8 = &ggl::polygonAnimatableStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE422F0 = 0;
          unk_1ECE422F8 = &ggl::polygonAnimatableStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonAnimatableStrokeShaderVertexFunctionDescriptor(void)::ref = v545;
          *(_DWORD *)algn_1ECE422BC = 0;
          qword_1ECE42300 = 0;
          unk_1ECE42308 = &ggl::polygonAnimatableStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42318 = 0;
          unk_1ECE42320 = 0;
          qword_1ECE42310 = 0;
        }
        qword_1ECE36580 = (uint64_t)&ggl::polygonAnimatableStrokeShaderVertexFunctionDescriptor(void)::ref;
        if ((v148 & 1) == 0
        {
          ggl::polygonAnimatableStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("PolygonAnimatableStrokeShaderFragment");
          *(_DWORD *)algn_1ECE42B64 = 1;
          qword_1ECE42B78 = 0;
          unk_1ECE42B80 = &ggl::polygonAnimatableStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42B88 = 3;
          unk_1ECE42B90 = &ggl::polygonAnimatableStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42B98 = 0;
          unk_1ECE42BA0 = &ggl::polygonAnimatableStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE42B68 = (uint64_t)"PolygonAnimatableStrokeShader";
          unk_1ECE42B70 = 0;
          qword_1ECE42BA8 = 3;
          unk_1ECE42BB0 = &ggl::polygonAnimatableStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42BC0 = 0;
          unk_1ECE42BC8 = 0;
          qword_1ECE42BB8 = 3;
        }
        qword_1ECE36588 = (uint64_t)&ggl::polygonAnimatableStrokeShaderFragmentFunctionDescriptor(void)::ref;
        if ((v149 & 1) == 0
        {
          v546 = ggl::crc32::compute<24ul>("PolygonFillShaderVertex");
          qword_1ECE3D9D8 = (uint64_t)"PolygonFillShader";
          unk_1ECE3D9E0 = ggl::polygonFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3D9E8 = 1;
          unk_1ECE3D9F0 = &ggl::polygonFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3D9F8 = 3;
          unk_1ECE3DA00 = &ggl::polygonFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3DA08 = 0;
          unk_1ECE3DA10 = &ggl::polygonFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonFillShaderVertexFunctionDescriptor(void)::ref = v546;
          *(_DWORD *)algn_1ECE3D9D4 = 0;
          qword_1ECE3DA18 = 0;
          unk_1ECE3DA20 = &ggl::polygonFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3DA30 = 0;
          unk_1ECE3DA38 = 0;
          qword_1ECE3DA28 = 0;
        }
        qword_1ECE36590 = (uint64_t)&ggl::polygonFillShaderVertexFunctionDescriptor(void)::ref;
        if ((v150 & 1) == 0
        {
          v547 = ggl::crc32::compute<26ul>("PolygonFillShaderFragment");
          qword_1ECE3E520 = 0;
          unk_1ECE3E528 = &ggl::polygonFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3E530 = 1;
          unk_1ECE3E538 = &ggl::polygonFillShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::polygonFillShaderFragmentFunctionDescriptor(void)::ref = v547;
          *(_DWORD *)algn_1ECE3E50C = 1;
          qword_1ECE3E540 = 0;
          unk_1ECE3E548 = &ggl::polygonFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3E510 = (uint64_t)"PolygonFillShader";
          unk_1ECE3E518 = 0;
          qword_1ECE3E550 = 1;
          unk_1ECE3E558 = &ggl::polygonFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3E568 = 0;
          unk_1ECE3E570 = 0;
          qword_1ECE3E560 = 1;
        }
        qword_1ECE36598 = (uint64_t)&ggl::polygonFillShaderFragmentFunctionDescriptor(void)::ref;
        if ((v151 & 1) == 0
        {
          v548 = ggl::crc32::compute<34ul>("PolygonShadowedStrokeShaderVertex");
          qword_1ECE419C0 = (uint64_t)"PolygonShadowedStrokeShader";
          unk_1ECE419C8 = ggl::polygonShadowedStrokeShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE419D0 = 1;
          unk_1ECE419D8 = &ggl::polygonShadowedStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE419E0 = 3;
          unk_1ECE419E8 = &ggl::polygonShadowedStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE419F0 = 0;
          unk_1ECE419F8 = &ggl::polygonShadowedStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonShadowedStrokeShaderVertexFunctionDescriptor(void)::ref = v548;
          *(_DWORD *)algn_1ECE419BC = 0;
          qword_1ECE41A00 = 0;
          unk_1ECE41A08 = &ggl::polygonShadowedStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41A18 = 0;
          unk_1ECE41A20 = 0;
          qword_1ECE41A10 = 0;
        }
        qword_1ECE365A0 = (uint64_t)&ggl::polygonShadowedStrokeShaderVertexFunctionDescriptor(void)::ref;
        if ((v152 & 1) == 0
        {
          ggl::polygonShadowedStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("PolygonShadowedStrokeShaderFragment");
          *(_DWORD *)algn_1ECE423A4 = 1;
          qword_1ECE423A8 = (uint64_t)"PolygonShadowedStrokeShader";
          unk_1ECE423B0 = 0;
          qword_1ECE423B8 = 0;
          unk_1ECE423C0 = &ggl::polygonShadowedStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE423C8 = 1;
          unk_1ECE423D0 = &ggl::polygonShadowedStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE423D8 = 0;
          unk_1ECE423E0 = &ggl::polygonShadowedStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE423E8 = 0;
          unk_1ECE423F0 = &ggl::polygonShadowedStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42400 = 0;
          unk_1ECE42408 = 0;
          qword_1ECE423F8 = 0;
        }
        qword_1ECE365A8 = (uint64_t)&ggl::polygonShadowedStrokeShaderFragmentFunctionDescriptor(void)::ref;
        if ((v153 & 1) == 0
        {
          v549 = ggl::crc32::compute<29ul>("PolygonSolidFillShaderVertex");
          qword_1ECE3F9F0 = (uint64_t)"PolygonSolidFillShader";
          unk_1ECE3F9F8 = ggl::polygonSolidFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3FA00 = 1;
          unk_1ECE3FA08 = &ggl::polygonSolidFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3FA10 = 3;
          unk_1ECE3FA18 = &ggl::polygonSolidFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3FA20 = 0;
          unk_1ECE3FA28 = &ggl::polygonSolidFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonSolidFillShaderVertexFunctionDescriptor(void)::ref = v549;
          *(_DWORD *)algn_1ECE3F9EC = 0;
          qword_1ECE3FA30 = 0;
          unk_1ECE3FA38 = &ggl::polygonSolidFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3FA48 = 0;
          unk_1ECE3FA50 = 0;
          qword_1ECE3FA40 = 0;
        }
        qword_1ECE365B0 = (uint64_t)&ggl::polygonSolidFillShaderVertexFunctionDescriptor(void)::ref;
        if ((v154 & 1) == 0
        {
          ggl::polygonSolidFillShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("PolygonSolidFillShaderFragment");
          *(_DWORD *)algn_1ECE40824 = 1;
          qword_1ECE40828 = (uint64_t)"PolygonSolidFillShader";
          unk_1ECE40830 = 0;
          qword_1ECE40838 = 0;
          unk_1ECE40840 = &ggl::polygonSolidFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40848 = 1;
          unk_1ECE40850 = &ggl::polygonSolidFillShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE40858 = 0;
          unk_1ECE40860 = &ggl::polygonSolidFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE40868 = 0;
          unk_1ECE40870 = &ggl::polygonSolidFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40880 = 0;
          unk_1ECE40888 = 0;
          qword_1ECE40878 = 0;
        }
        qword_1ECE365B8 = (uint64_t)&ggl::polygonSolidFillShaderFragmentFunctionDescriptor(void)::ref;
        if ((v155 & 1) == 0
        {
          v550 = ggl::crc32::compute<31ul>("PolygonSolidFillS2ShaderVertex");
          qword_1ECE33090 = (uint64_t)"PolygonSolidFillS2Shader";
          unk_1ECE33098 = ggl::polygonSolidFillS2ShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE330A0 = 1;
          unk_1ECE330A8 = &ggl::polygonSolidFillS2ShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE330B0 = 3;
          unk_1ECE330B8 = &ggl::polygonSolidFillS2ShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE330C0 = 0;
          unk_1ECE330C8 = &ggl::polygonSolidFillS2ShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonSolidFillS2ShaderVertexFunctionDescriptor(void)::ref = v550;
          *(_DWORD *)algn_1ECE3308C = 0;
          qword_1ECE330D0 = 0;
          unk_1ECE330D8 = &ggl::polygonSolidFillS2ShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE330E8 = 0;
          unk_1ECE330F0 = 0;
          qword_1ECE330E0 = 0;
        }
        qword_1ECE365C0 = (uint64_t)&ggl::polygonSolidFillS2ShaderVertexFunctionDescriptor(void)::ref;
        if ((v156 & 1) == 0
        {
          ggl::polygonSolidFillS2ShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("PolygonSolidFillS2ShaderFragment");
          *(_DWORD *)algn_1ECE33254 = 1;
          qword_1ECE33258 = (uint64_t)"PolygonSolidFillS2Shader";
          unk_1ECE33260 = 0;
          qword_1ECE33268 = 0;
          unk_1ECE33270 = &ggl::polygonSolidFillS2ShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE33278 = 1;
          unk_1ECE33280 = &ggl::polygonSolidFillS2ShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE33288 = 0;
          unk_1ECE33290 = &ggl::polygonSolidFillS2ShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE33298 = 0;
          unk_1ECE332A0 = &ggl::polygonSolidFillS2ShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE332B0 = 0;
          unk_1ECE332B8 = 0;
          qword_1ECE332A8 = 0;
        }
        qword_1ECE365C8 = (uint64_t)&ggl::polygonSolidFillS2ShaderFragmentFunctionDescriptor(void)::ref;
        if ((v157 & 1) == 0
        {
          v551 = ggl::crc32::compute<26ul>("PolygonStrokeShaderVertex");
          qword_1ECE3E580 = (uint64_t)"PolygonStrokeShader";
          unk_1ECE3E588 = ggl::polygonStrokeShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3E590 = 1;
          unk_1ECE3E598 = &ggl::polygonStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3E5A0 = 3;
          unk_1ECE3E5A8 = &ggl::polygonStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3E5B0 = 0;
          unk_1ECE3E5B8 = &ggl::polygonStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonStrokeShaderVertexFunctionDescriptor(void)::ref = v551;
          *(_DWORD *)algn_1ECE3E57C = 0;
          qword_1ECE3E5C0 = 0;
          unk_1ECE3E5C8 = &ggl::polygonStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3E5D8 = 0;
          unk_1ECE3E5E0 = 0;
          qword_1ECE3E5D0 = 0;
        }
        qword_1ECE365D0 = (uint64_t)&ggl::polygonStrokeShaderVertexFunctionDescriptor(void)::ref;
        if ((v158 & 1) == 0
        {
          ggl::polygonStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("PolygonStrokeShaderFragment");
          *(_DWORD *)algn_1ECE3F474 = 1;
          qword_1ECE3F478 = (uint64_t)"PolygonStrokeShader";
          unk_1ECE3F480 = 0;
          qword_1ECE3F488 = 0;
          unk_1ECE3F490 = &ggl::polygonStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3F498 = 1;
          unk_1ECE3F4A0 = &ggl::polygonStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3F4A8 = 0;
          unk_1ECE3F4B0 = &ggl::polygonStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3F4B8 = 2;
          unk_1ECE3F4C0 = &ggl::polygonStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3F4D0 = 0;
          unk_1ECE3F4D8 = 0;
          qword_1ECE3F4C8 = 2;
        }
        qword_1ECE365D8 = (uint64_t)&ggl::polygonStrokeShaderFragmentFunctionDescriptor(void)::ref;
        if ((v159 & 1) == 0
        {
          v552 = ggl::crc32::compute<30ul>("PolygonStrokeMaskShaderVertex");
          qword_1ECE30780 = (uint64_t)"PolygonStrokeMaskShader";
          unk_1ECE30788 = ggl::polygonStrokeMaskShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE30790 = 1;
          unk_1ECE30798 = &ggl::polygonStrokeMaskShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE307A0 = 3;
          unk_1ECE307A8 = &ggl::polygonStrokeMaskShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE307B0 = 0;
          unk_1ECE307B8 = &ggl::polygonStrokeMaskShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polygonStrokeMaskShaderVertexFunctionDescriptor(void)::ref = v552;
          *(_DWORD *)algn_1ECE3077C = 0;
          qword_1ECE307C0 = 0;
          unk_1ECE307C8 = &ggl::polygonStrokeMaskShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE307D8 = 0;
          unk_1ECE307E0 = 0;
          qword_1ECE307D0 = 0;
        }
        qword_1ECE365E0 = (uint64_t)&ggl::polygonStrokeMaskShaderVertexFunctionDescriptor(void)::ref;
        if ((v160 & 1) == 0
        {
          v553 = ggl::crc32::compute<32ul>("PolygonStrokeMaskShaderFragment");
          qword_1ECE309D8 = 0;
          unk_1ECE309E0 = &ggl::polygonStrokeMaskShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE309E8 = 0;
          unk_1ECE309F0 = &ggl::polygonStrokeMaskShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::polygonStrokeMaskShaderFragmentFunctionDescriptor(void)::ref = v553;
          *(_DWORD *)algn_1ECE309C4 = 1;
          qword_1ECE309F8 = 0;
          unk_1ECE30A00 = &ggl::polygonStrokeMaskShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE309C8 = (uint64_t)"PolygonStrokeMaskShader";
          unk_1ECE309D0 = 0;
          qword_1ECE30A08 = 1;
          unk_1ECE30A10 = &ggl::polygonStrokeMaskShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE30A20 = 0;
          unk_1ECE30A28 = 0;
          qword_1ECE30A18 = 1;
        }
        qword_1ECE365E8 = (uint64_t)&ggl::polygonStrokeMaskShaderFragmentFunctionDescriptor(void)::ref;
        if ((v161 & 1) == 0
        {
          v554 = ggl::crc32::compute<30ul>("HillshadeFillMaskShaderVertex");
          qword_1EE585FA8 = (uint64_t)"HillshadeFillMaskShader";
          unk_1EE585FB0 = ggl::hillshadeFillMaskShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EE585FB8 = 1;
          unk_1EE585FC0 = &ggl::hillshadeFillMaskShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EE585FC8 = 3;
          unk_1EE585FD0 = &ggl::hillshadeFillMaskShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EE585FD8 = 0;
          unk_1EE585FE0 = &ggl::hillshadeFillMaskShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::hillshadeFillMaskShaderVertexFunctionDescriptor(void)::ref = v554;
          *(_DWORD *)algn_1EE585FA4 = 0;
          qword_1EE585FE8 = 0;
          unk_1EE585FF0 = &ggl::hillshadeFillMaskShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EE586000 = 0;
          unk_1EE586008 = 0;
          qword_1EE585FF8 = 0;
        }
        qword_1ECE365F0 = (uint64_t)&ggl::hillshadeFillMaskShaderVertexFunctionDescriptor(void)::ref;
        if ((v162 & 1) == 0
        {
          ggl::hillshadeFillMaskShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("HillshadeFillMaskShaderFragment");
          *(_DWORD *)algn_1EE58601C = 1;
          qword_1EE586030 = 0;
          unk_1EE586038 = &ggl::hillshadeFillMaskShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EE586040 = 0;
          unk_1EE586048 = &ggl::hillshadeFillMaskShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EE586050 = 0;
          unk_1EE586058 = &ggl::hillshadeFillMaskShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EE586020 = (uint64_t)"HillshadeFillMaskShader";
          unk_1EE586028 = 0;
          qword_1EE586060 = 0;
          unk_1EE586068 = &ggl::hillshadeFillMaskShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EE586078 = 0;
          unk_1EE586080 = 0;
          qword_1EE586070 = 0;
        }
        qword_1ECE365F8 = (uint64_t)&ggl::hillshadeFillMaskShaderFragmentFunctionDescriptor(void)::ref;
        if ((v163 & 1) == 0
        {
          v555 = ggl::crc32::compute<32ul>("PolylineOverlayFillShaderVertex");
          qword_1ECE40E68 = (uint64_t)"PolylineOverlayFillShader";
          unk_1ECE40E70 = ggl::polylineOverlayFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE40E78 = 1;
          unk_1ECE40E80 = &ggl::polylineOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40E88 = 3;
          unk_1ECE40E90 = &ggl::polylineOverlayFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE40E98 = 0;
          unk_1ECE40EA0 = &ggl::polylineOverlayFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polylineOverlayFillShaderVertexFunctionDescriptor(void)::ref = v555;
          *(_DWORD *)algn_1ECE40E64 = 0;
          qword_1ECE40EA8 = 0;
          unk_1ECE40EB0 = &ggl::polylineOverlayFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40EC0 = 0;
          unk_1ECE40EC8 = 0;
          qword_1ECE40EB8 = 0;
        }
        qword_1ECE36600 = (uint64_t)&ggl::polylineOverlayFillShaderVertexFunctionDescriptor(void)::ref;
        if ((v164 & 1) == 0
        {
          v556 = ggl::crc32::compute<34ul>("PolylineOverlayFillShaderFragment");
          qword_1ECE41A40 = 0;
          unk_1ECE41A48 = &ggl::polylineOverlayFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41A50 = 1;
          unk_1ECE41A58 = &ggl::polylineOverlayFillShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::polylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref = v556;
          *(_DWORD *)algn_1ECE41A2C = 1;
          qword_1ECE41A60 = 0;
          unk_1ECE41A68 = &ggl::polylineOverlayFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE41A30 = (uint64_t)"PolylineOverlayFillShader";
          unk_1ECE41A38 = 0;
          qword_1ECE41A70 = 1;
          unk_1ECE41A78 = &ggl::polylineOverlayFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41A88 = 0;
          unk_1ECE41A90 = 0;
          qword_1ECE41A80 = 1;
        }
        qword_1ECE36608 = (uint64_t)&ggl::polylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref;
        if ((v165 & 1) == 0
        {
          v557 = ggl::crc32::compute<33ul>("PolylineOverlayAlphaShaderVertex");
          qword_1ECE414C8 = (uint64_t)"PolylineOverlayAlphaShader";
          unk_1ECE414D0 = ggl::polylineOverlayAlphaShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE414D8 = 1;
          unk_1ECE414E0 = &ggl::polylineOverlayAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE414E8 = 3;
          unk_1ECE414F0 = &ggl::polylineOverlayAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE414F8 = 0;
          unk_1ECE41500 = &ggl::polylineOverlayAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref = v557;
          *(_DWORD *)algn_1ECE414C4 = 0;
          qword_1ECE41508 = 0;
          unk_1ECE41510 = &ggl::polylineOverlayAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41520 = 0;
          unk_1ECE41528 = 0;
          qword_1ECE41518 = 0;
        }
        qword_1ECE36610 = (uint64_t)&ggl::polylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref;
        if ((v166 & 1) == 0
        {
          v558 = ggl::crc32::compute<35ul>("PolylineOverlayAlphaShaderFragment");
          qword_1ECE41E50 = 0;
          unk_1ECE41E58 = &ggl::polylineOverlayAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41E60 = 1;
          unk_1ECE41E68 = &ggl::polylineOverlayAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::polylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref = v558;
          *(_DWORD *)algn_1ECE41E3C = 1;
          qword_1ECE41E70 = 0;
          unk_1ECE41E78 = &ggl::polylineOverlayAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE41E40 = (uint64_t)"PolylineOverlayAlphaShader";
          unk_1ECE41E48 = 0;
          qword_1ECE41E80 = 1;
          unk_1ECE41E88 = &ggl::polylineOverlayAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41E98 = 0;
          unk_1ECE41EA0 = 0;
          qword_1ECE41E90 = 1;
        }
        qword_1ECE36618 = (uint64_t)&ggl::polylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref;
        if ((v167 & 1) == 0
        {
          v559 = ggl::crc32::compute<37ul>("PolylineOverlayAlphaFillShaderVertex");
          qword_1ECE426D8 = (uint64_t)"PolylineOverlayAlphaFillShader";
          unk_1ECE426E0 = ggl::polylineOverlayAlphaFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE426E8 = 1;
          unk_1ECE426F0 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE426F8 = 3;
          unk_1ECE42700 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42708 = 0;
          unk_1ECE42710 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref = v559;
          *(_DWORD *)algn_1ECE426D4 = 0;
          qword_1ECE42718 = 0;
          unk_1ECE42720 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42730 = 0;
          unk_1ECE42738 = 0;
          qword_1ECE42728 = 0;
        }
        qword_1ECE36620 = (uint64_t)&ggl::polylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref;
        if ((v168 & 1) == 0
        {
          qword_1ECE42E40 = 0;
          unk_1ECE42E48 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42E50 = 1;
          unk_1ECE42E58 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::polylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref = 0x17E32C928;
          qword_1ECE42E60 = 0;
          unk_1ECE42E68 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE42E30 = (uint64_t)"PolylineOverlayAlphaFillShader";
          unk_1ECE42E38 = 0;
          qword_1ECE42E70 = 1;
          unk_1ECE42E78 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42E88 = 0;
          unk_1ECE42E90 = 0;
          qword_1ECE42E80 = 1;
        }
        qword_1ECE36628 = (uint64_t)&ggl::polylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref;
        if ((v169 & 1) == 0
        {
          v560 = ggl::crc32::compute<18ul>("PointShaderVertex");
          qword_1ECE3C7F0 = (uint64_t)"PointShader";
          unk_1ECE3C7F8 = ggl::pointShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3C800 = 1;
          unk_1ECE3C808 = &ggl::pointShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3C810 = 2;
          unk_1ECE3C818 = &ggl::pointShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3C820 = 0;
          unk_1ECE3C828 = &ggl::pointShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::pointShaderVertexFunctionDescriptor(void)::ref = v560;
          *(_DWORD *)algn_1ECE3C7EC = 0;
          qword_1ECE3C830 = 0;
          unk_1ECE3C838 = &ggl::pointShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3C848 = 0;
          unk_1ECE3C850 = 0;
          qword_1ECE3C840 = 0;
        }
        qword_1ECE36630 = (uint64_t)&ggl::pointShaderVertexFunctionDescriptor(void)::ref;
        if ((v170 & 1) == 0
        {
          ggl::pointShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<20ul>("PointShaderFragment");
          *(_DWORD *)algn_1ECE3CF24 = 1;
          qword_1ECE3CF28 = (uint64_t)"PointShader";
          unk_1ECE3CF30 = 0;
          qword_1ECE3CF38 = 0;
          unk_1ECE3CF40 = &ggl::pointShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3CF48 = 1;
          unk_1ECE3CF50 = &ggl::pointShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3CF58 = 0;
          unk_1ECE3CF60 = &ggl::pointShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3CF68 = 0;
          unk_1ECE3CF70 = &ggl::pointShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3CF80 = 0;
          unk_1ECE3CF88 = 0;
          qword_1ECE3CF78 = 0;
        }
        qword_1ECE36638 = (uint64_t)&ggl::pointShaderFragmentFunctionDescriptor(void)::ref;
        if ((v171 & 1) == 0
        {
          v561 = ggl::crc32::compute<26ul>("PointExtendedShaderVertex");
          qword_1ECE3E4A0 = (uint64_t)"PointExtendedShader";
          unk_1ECE3E4A8 = ggl::pointExtendedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3E4B0 = 1;
          unk_1ECE3E4B8 = &ggl::pointExtendedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3E4C0 = 2;
          unk_1ECE3E4C8 = &ggl::pointExtendedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3E4D0 = 0;
          unk_1ECE3E4D8 = &ggl::pointExtendedShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::pointExtendedShaderVertexFunctionDescriptor(void)::ref = v561;
          *(_DWORD *)algn_1ECE3E49C = 0;
          qword_1ECE3E4E0 = 0;
          unk_1ECE3E4E8 = &ggl::pointExtendedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3E4F8 = 0;
          unk_1ECE3E500 = 0;
          qword_1ECE3E4F0 = 0;
        }
        qword_1ECE36640 = (uint64_t)&ggl::pointExtendedShaderVertexFunctionDescriptor(void)::ref;
        if ((v172 & 1) == 0
        {
          ggl::pointExtendedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("PointExtendedShaderFragment");
          *(_DWORD *)algn_1ECE3F404 = 1;
          qword_1ECE3F408 = (uint64_t)"PointExtendedShader";
          unk_1ECE3F410 = 0;
          qword_1ECE3F418 = 0;
          unk_1ECE3F420 = &ggl::pointExtendedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3F428 = 1;
          unk_1ECE3F430 = &ggl::pointExtendedShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3F438 = 0;
          unk_1ECE3F440 = &ggl::pointExtendedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3F448 = 0;
          unk_1ECE3F450 = &ggl::pointExtendedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3F460 = 0;
          unk_1ECE3F468 = 0;
          qword_1ECE3F458 = 0;
        }
        qword_1ECE36648 = (uint64_t)&ggl::pointExtendedShaderFragmentFunctionDescriptor(void)::ref;
        if ((v173 & 1) == 0
        {
          v562 = ggl::crc32::compute<28ul>("PrefilteredLineShaderVertex");
          qword_1ECE3F4F0 = (uint64_t)"PrefilteredLineShader";
          unk_1ECE3F4F8 = ggl::prefilteredLineShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3F500 = 1;
          unk_1ECE3F508 = &ggl::prefilteredLineShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3F510 = 3;
          unk_1ECE3F518 = &ggl::prefilteredLineShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3F520 = 0;
          unk_1ECE3F528 = &ggl::prefilteredLineShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::prefilteredLineShaderVertexFunctionDescriptor(void)::ref = v562;
          *(_DWORD *)algn_1ECE3F4EC = 0;
          qword_1ECE3F530 = 0;
          unk_1ECE3F538 = &ggl::prefilteredLineShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3F548 = 0;
          unk_1ECE3F550 = 0;
          qword_1ECE3F540 = 0;
        }
        qword_1ECE36650 = (uint64_t)&ggl::prefilteredLineShaderVertexFunctionDescriptor(void)::ref;
        if ((v174 & 1) == 0
        {
          v563 = ggl::crc32::compute<30ul>("PrefilteredLineShaderFragment");
          qword_1ECE401E8 = 0;
          unk_1ECE401F0 = &ggl::prefilteredLineShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE401F8 = 0;
          unk_1ECE40200 = &ggl::prefilteredLineShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::prefilteredLineShaderFragmentFunctionDescriptor(void)::ref = v563;
          *(_DWORD *)algn_1ECE401D4 = 1;
          qword_1ECE40208 = 0;
          unk_1ECE40210 = &ggl::prefilteredLineShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE401D8 = (uint64_t)"PrefilteredLineShader";
          unk_1ECE401E0 = 0;
          qword_1ECE40218 = 1;
          unk_1ECE40220 = &ggl::prefilteredLineShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40230 = 0;
          unk_1ECE40238 = 0;
          qword_1ECE40228 = 1;
        }
        qword_1ECE36658 = (uint64_t)&ggl::prefilteredLineShaderFragmentFunctionDescriptor(void)::ref;
        if ((v175 & 1) == 0
        {
          v564 = ggl::crc32::compute<30ul>("RenderTargetBlendShaderVertex");
          qword_1ECE40250 = (uint64_t)"RenderTargetBlendShader";
          unk_1ECE40258 = ggl::renderTargetBlendShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE40260 = 1;
          unk_1ECE40268 = &ggl::renderTargetBlendShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40270 = 0;
          unk_1ECE40278 = &ggl::renderTargetBlendShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE40280 = 0;
          unk_1ECE40288 = &ggl::renderTargetBlendShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::renderTargetBlendShaderVertexFunctionDescriptor(void)::ref = v564;
          *(_DWORD *)algn_1ECE4024C = 0;
          qword_1ECE40290 = 0;
          unk_1ECE40298 = &ggl::renderTargetBlendShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE402A8 = 0;
          unk_1ECE402B0 = 0;
          qword_1ECE402A0 = 0;
        }
        qword_1ECE36660 = (uint64_t)&ggl::renderTargetBlendShaderVertexFunctionDescriptor(void)::ref;
        if ((v176 & 1) == 0
        {
          v565 = ggl::crc32::compute<32ul>("RenderTargetBlendShaderFragment");
          qword_1ECE40EE8 = 0;
          unk_1ECE40EF0 = &ggl::renderTargetBlendShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40EF8 = 1;
          unk_1ECE40F00 = &ggl::renderTargetBlendShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::renderTargetBlendShaderFragmentFunctionDescriptor(void)::ref = v565;
          *(_DWORD *)algn_1ECE40ED4 = 1;
          qword_1ECE40F08 = 0;
          unk_1ECE40F10 = &ggl::renderTargetBlendShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE40ED8 = (uint64_t)"RenderTargetBlendShader";
          unk_1ECE40EE0 = 0;
          qword_1ECE40F18 = 1;
          unk_1ECE40F20 = &ggl::renderTargetBlendShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40F30 = 0;
          unk_1ECE40F38 = 0;
          qword_1ECE40F28 = 1;
        }
        qword_1ECE36668 = (uint64_t)&ggl::renderTargetBlendShaderFragmentFunctionDescriptor(void)::ref;
        if ((v177 & 1) == 0
        {
          v566 = ggl::crc32::compute<22ul>("RouteLineShaderVertex");
          qword_1ECE3D480 = (uint64_t)"RouteLineShader";
          unk_1ECE3D488 = ggl::routeLineShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3D490 = 1;
          unk_1ECE3D498 = &ggl::routeLineShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3D4A0 = 3;
          unk_1ECE3D4A8 = &ggl::routeLineShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3D4B0 = 0;
          unk_1ECE3D4B8 = &ggl::routeLineShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::routeLineShaderVertexFunctionDescriptor(void)::ref = v566;
          *(_DWORD *)algn_1ECE3D47C = 0;
          qword_1ECE3D4C0 = 0;
          unk_1ECE3D4C8 = &ggl::routeLineShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3D4D8 = 0;
          unk_1ECE3D4E0 = 0;
          qword_1ECE3D4D0 = 0;
        }
        qword_1ECE36670 = (uint64_t)&ggl::routeLineShaderVertexFunctionDescriptor(void)::ref;
        if ((v178 & 1) == 0
        {
          v567 = ggl::crc32::compute<24ul>("RouteLineShaderFragment");
          qword_1ECE3DA58 = 0;
          unk_1ECE3DA60 = &ggl::routeLineShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3DA68 = 1;
          unk_1ECE3DA70 = &ggl::routeLineShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::routeLineShaderFragmentFunctionDescriptor(void)::ref = v567;
          *(_DWORD *)algn_1ECE3DA44 = 1;
          qword_1ECE3DA78 = 0;
          unk_1ECE3DA80 = &ggl::routeLineShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3DA48 = (uint64_t)"RouteLineShader";
          unk_1ECE3DA50 = 0;
          qword_1ECE3DA88 = 1;
          unk_1ECE3DA90 = &ggl::routeLineShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3DAA0 = 0;
          unk_1ECE3DAA8 = 0;
          qword_1ECE3DA98 = 1;
        }
        qword_1ECE36678 = (uint64_t)&ggl::routeLineShaderFragmentFunctionDescriptor(void)::ref;
        if ((v179 & 1) == 0
        {
          v568 = ggl::crc32::compute<31ul>("PatternedRouteLineShaderVertex");
          qword_1ECE40740 = (uint64_t)"PatternedRouteLineShader";
          unk_1ECE40748 = ggl::patternedRouteLineShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE40750 = 1;
          unk_1ECE40758 = &ggl::patternedRouteLineShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40760 = 3;
          unk_1ECE40768 = &ggl::patternedRouteLineShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE40770 = 0;
          unk_1ECE40778 = &ggl::patternedRouteLineShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::patternedRouteLineShaderVertexFunctionDescriptor(void)::ref = v568;
          *(_DWORD *)algn_1ECE4073C = 0;
          qword_1ECE40780 = 0;
          unk_1ECE40788 = &ggl::patternedRouteLineShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40798 = 0;
          unk_1ECE407A0 = 0;
          qword_1ECE40790 = 0;
        }
        qword_1ECE36680 = (uint64_t)&ggl::patternedRouteLineShaderVertexFunctionDescriptor(void)::ref;
        if ((v180 & 1) == 0
        {
          v569 = ggl::crc32::compute<33ul>("PatternedRouteLineShaderFragment");
          qword_1ECE413E8 = 0;
          unk_1ECE413F0 = &ggl::patternedRouteLineShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE413F8 = 1;
          unk_1ECE41400 = &ggl::patternedRouteLineShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::patternedRouteLineShaderFragmentFunctionDescriptor(void)::ref = v569;
          *(_DWORD *)algn_1ECE413D4 = 1;
          qword_1ECE41408 = 0;
          unk_1ECE41410 = &ggl::patternedRouteLineShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE413D8 = (uint64_t)"PatternedRouteLineShader";
          unk_1ECE413E0 = 0;
          qword_1ECE41418 = 1;
          unk_1ECE41420 = &ggl::patternedRouteLineShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41430 = 0;
          unk_1ECE41438 = 0;
          qword_1ECE41428 = 1;
        }
        qword_1ECE36688 = (uint64_t)&ggl::patternedRouteLineShaderFragmentFunctionDescriptor(void)::ref;
        if ((v181 & 1) == 0
        {
          v570 = ggl::crc32::compute<26ul>("RouteLineMaskShaderVertex");
          qword_1ECE447B0 = (uint64_t)"RouteLineMaskShader";
          unk_1ECE447B8 = ggl::routeLineMaskShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE447C0 = 1;
          unk_1ECE447C8 = &ggl::routeLineMaskShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE447D0 = 3;
          unk_1ECE447D8 = &ggl::routeLineMaskShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE447E0 = 0;
          unk_1ECE447E8 = &ggl::routeLineMaskShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::routeLineMaskShaderVertexFunctionDescriptor(void)::ref = v570;
          *(_DWORD *)algn_1ECE447AC = 0;
          qword_1ECE447F0 = 0;
          unk_1ECE447F8 = &ggl::routeLineMaskShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE44808 = 0;
          unk_1ECE44810 = 0;
          qword_1ECE44800 = 0;
        }
        qword_1ECE36690 = (uint64_t)&ggl::routeLineMaskShaderVertexFunctionDescriptor(void)::ref;
        if ((v182 & 1) == 0
        {
          ggl::routeLineMaskShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("RouteLineMaskShaderFragment");
          *(_DWORD *)algn_1ECE454B4 = 1;
          qword_1ECE454B8 = (uint64_t)"RouteLineMaskShader";
          unk_1ECE454C0 = 0;
          qword_1ECE454C8 = 0;
          unk_1ECE454D0 = &ggl::routeLineMaskShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE454D8 = 1;
          unk_1ECE454E0 = &ggl::routeLineMaskShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE454E8 = 0;
          unk_1ECE454F0 = &ggl::routeLineMaskShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE454F8 = 0;
          unk_1ECE45500 = &ggl::routeLineMaskShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE45510 = 0;
          unk_1ECE45518 = 0;
          qword_1ECE45508 = 0;
        }
        qword_1ECE36698 = (uint64_t)&ggl::routeLineMaskShaderFragmentFunctionDescriptor(void)::ref;
        if ((v183 & 1) == 0
        {
          v571 = ggl::crc32::compute<32ul>("RouteLineAlphaResetShaderVertex");
          qword_1ECE40F50 = (uint64_t)"RouteLineAlphaResetShader";
          unk_1ECE40F58 = ggl::routeLineAlphaResetShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE40F60 = 1;
          unk_1ECE40F68 = &ggl::routeLineAlphaResetShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40F70 = 3;
          unk_1ECE40F78 = &ggl::routeLineAlphaResetShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE40F80 = 0;
          unk_1ECE40F88 = &ggl::routeLineAlphaResetShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::routeLineAlphaResetShaderVertexFunctionDescriptor(void)::ref = v571;
          *(_DWORD *)algn_1ECE40F4C = 0;
          qword_1ECE40F90 = 0;
          unk_1ECE40F98 = &ggl::routeLineAlphaResetShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40FA8 = 0;
          unk_1ECE40FB0 = 0;
          qword_1ECE40FA0 = 0;
        }
        qword_1ECE366A0 = (uint64_t)&ggl::routeLineAlphaResetShaderVertexFunctionDescriptor(void)::ref;
        if ((v184 & 1) == 0
        {
          ggl::routeLineAlphaResetShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("RouteLineAlphaResetShaderFragment");
          *(_DWORD *)algn_1ECE41AA4 = 1;
          qword_1ECE41AA8 = (uint64_t)"RouteLineAlphaResetShader";
          unk_1ECE41AB0 = 0;
          qword_1ECE41AB8 = 0;
          unk_1ECE41AC0 = &ggl::routeLineAlphaResetShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41AC8 = 1;
          unk_1ECE41AD0 = &ggl::routeLineAlphaResetShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE41AD8 = 0;
          unk_1ECE41AE0 = &ggl::routeLineAlphaResetShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE41AE8 = 0;
          unk_1ECE41AF0 = &ggl::routeLineAlphaResetShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41B00 = 0;
          unk_1ECE41B08 = 0;
          qword_1ECE41AF8 = 0;
        }
        qword_1ECE366A8 = (uint64_t)&ggl::routeLineAlphaResetShaderFragmentFunctionDescriptor(void)::ref;
        if ((v185 & 1) == 0
        {
          v572 = ggl::crc32::compute<27ul>("RouteLineArrowShaderVertex");
          qword_1ECE3EBD0 = (uint64_t)"RouteLineArrowShader";
          unk_1ECE3EBD8 = ggl::routeLineArrowShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3EBE0 = 1;
          unk_1ECE3EBE8 = &ggl::routeLineArrowShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3EBF0 = 3;
          unk_1ECE3EBF8 = &ggl::routeLineArrowShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3EC00 = 0;
          unk_1ECE3EC08 = &ggl::routeLineArrowShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::routeLineArrowShaderVertexFunctionDescriptor(void)::ref = v572;
          *(_DWORD *)algn_1ECE3EBCC = 0;
          qword_1ECE3EC10 = 0;
          unk_1ECE3EC18 = &ggl::routeLineArrowShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3EC28 = 0;
          unk_1ECE3EC30 = 0;
          qword_1ECE3EC20 = 0;
        }
        qword_1ECE366B0 = (uint64_t)&ggl::routeLineArrowShaderVertexFunctionDescriptor(void)::ref;
        if ((v186 & 1) == 0
        {
          v573 = ggl::crc32::compute<29ul>("RouteLineArrowShaderFragment");
          qword_1ECE3FA78 = 0;
          unk_1ECE3FA80 = &ggl::routeLineArrowShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3FA88 = 1;
          unk_1ECE3FA90 = &ggl::routeLineArrowShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::routeLineArrowShaderFragmentFunctionDescriptor(void)::ref = v573;
          *(_DWORD *)algn_1ECE3FA64 = 1;
          qword_1ECE3FA98 = 0;
          unk_1ECE3FAA0 = &ggl::routeLineArrowShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3FA68 = (uint64_t)"RouteLineArrowShader";
          unk_1ECE3FA70 = 0;
          qword_1ECE3FAA8 = 1;
          unk_1ECE3FAB0 = &ggl::routeLineArrowShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3FAC0 = 0;
          unk_1ECE3FAC8 = 0;
          qword_1ECE3FAB8 = 1;
        }
        qword_1ECE366B8 = (uint64_t)&ggl::routeLineArrowShaderFragmentFunctionDescriptor(void)::ref;
        if ((v187 & 1) == 0
        {
          v574 = ggl::crc32::compute<29ul>("RouteLineTrafficShaderVertex");
          qword_1ECE3FAE0 = (uint64_t)"RouteLineTrafficShader";
          unk_1ECE3FAE8 = ggl::routeLineTrafficShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3FAF0 = 1;
          unk_1ECE3FAF8 = &ggl::routeLineTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3FB00 = 3;
          unk_1ECE3FB08 = &ggl::routeLineTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3FB10 = 0;
          unk_1ECE3FB18 = &ggl::routeLineTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::routeLineTrafficShaderVertexFunctionDescriptor(void)::ref = v574;
          *(_DWORD *)algn_1ECE3FADC = 0;
          qword_1ECE3FB20 = 0;
          unk_1ECE3FB28 = &ggl::routeLineTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3FB38 = 0;
          unk_1ECE3FB40 = 0;
          qword_1ECE3FB30 = 0;
        }
        qword_1ECE366C0 = (uint64_t)&ggl::routeLineTrafficShaderVertexFunctionDescriptor(void)::ref;
        if ((v188 & 1) == 0
        {
          v575 = ggl::crc32::compute<31ul>("RouteLineTrafficShaderFragment");
          qword_1ECE408A8 = 0;
          unk_1ECE408B0 = &ggl::routeLineTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE408B8 = 1;
          unk_1ECE408C0 = &ggl::routeLineTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::routeLineTrafficShaderFragmentFunctionDescriptor(void)::ref = v575;
          *(_DWORD *)algn_1ECE40894 = 1;
          qword_1ECE408C8 = 0;
          unk_1ECE408D0 = &ggl::routeLineTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE40898 = (uint64_t)"RouteLineTrafficShader";
          unk_1ECE408A0 = 0;
          qword_1ECE408D8 = 1;
          unk_1ECE408E0 = &ggl::routeLineTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE408F0 = 0;
          unk_1ECE408F8 = 0;
          qword_1ECE408E8 = 1;
        }
        qword_1ECE366C8 = (uint64_t)&ggl::routeLineTrafficShaderFragmentFunctionDescriptor(void)::ref;
        if ((v189 & 1) == 0
        {
          v576 = ggl::crc32::compute<32ul>("SinglePassRouteLineShaderVertex");
          qword_1ECE33178 = (uint64_t)"SinglePassRouteLineShader";
          unk_1ECE33180 = ggl::singlePassRouteLineShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE33188 = 1;
          unk_1ECE33190 = &ggl::singlePassRouteLineShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE33198 = 4;
          unk_1ECE331A0 = &ggl::singlePassRouteLineShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE331A8 = 0;
          unk_1ECE331B0 = &ggl::singlePassRouteLineShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::singlePassRouteLineShaderVertexFunctionDescriptor(void)::ref = v576;
          *(_DWORD *)algn_1ECE33174 = 0;
          qword_1ECE331B8 = 0;
          unk_1ECE331C0 = &ggl::singlePassRouteLineShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE331D0 = 0;
          unk_1ECE331D8 = 0;
          qword_1ECE331C8 = 0;
        }
        qword_1ECE366D0 = (uint64_t)&ggl::singlePassRouteLineShaderVertexFunctionDescriptor(void)::ref;
        if ((v190 & 1) == 0
        {
          v577 = ggl::crc32::compute<34ul>("SinglePassRouteLineShaderFragment");
          qword_1ECE33350 = 0;
          unk_1ECE33358 = &ggl::singlePassRouteLineShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE33360 = 2;
          unk_1ECE33368 = &ggl::singlePassRouteLineShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::singlePassRouteLineShaderFragmentFunctionDescriptor(void)::ref = v577;
          *(_DWORD *)algn_1ECE3333C = 1;
          qword_1ECE33370 = 0;
          unk_1ECE33378 = &ggl::singlePassRouteLineShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE33340 = (uint64_t)"SinglePassRouteLineShader";
          unk_1ECE33348 = 0;
          qword_1ECE33380 = 1;
          unk_1ECE33388 = &ggl::singlePassRouteLineShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE33398 = 0;
          unk_1ECE333A0 = 0;
          qword_1ECE33390 = 1;
        }
        qword_1ECE366D8 = (uint64_t)&ggl::singlePassRouteLineShaderFragmentFunctionDescriptor(void)::ref;
        if ((v191 & 1) == 0
        {
          v578 = ggl::crc32::compute<28ul>("DottedRouteLineShaderVertex");
          qword_1ECE305B8 = (uint64_t)"DottedRouteLineShader";
          unk_1ECE305C0 = ggl::dottedRouteLineShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE305C8 = 1;
          unk_1ECE305D0 = &ggl::dottedRouteLineShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE305D8 = 3;
          unk_1ECE305E0 = &ggl::dottedRouteLineShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE305E8 = 0;
          unk_1ECE305F0 = &ggl::dottedRouteLineShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::dottedRouteLineShaderVertexFunctionDescriptor(void)::ref = v578;
          *(_DWORD *)algn_1ECE305B4 = 0;
          qword_1ECE305F8 = 0;
          unk_1ECE30600 = &ggl::dottedRouteLineShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE30610 = 0;
          unk_1ECE30618 = 0;
          qword_1ECE30608 = 0;
        }
        qword_1ECE366E0 = (uint64_t)&ggl::dottedRouteLineShaderVertexFunctionDescriptor(void)::ref;
        if ((v192 & 1) == 0
        {
          ggl::dottedRouteLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("DottedRouteLineShaderFragment");
          *(_DWORD *)algn_1ECE3069C = 1;
          qword_1ECE306B0 = 0;
          unk_1ECE306B8 = &ggl::dottedRouteLineShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE306C0 = 2;
          unk_1ECE306C8 = &ggl::dottedRouteLineShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE306D0 = 0;
          unk_1ECE306D8 = &ggl::dottedRouteLineShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE306A0 = (uint64_t)"DottedRouteLineShader";
          unk_1ECE306A8 = 0;
          qword_1ECE306E0 = 0;
          unk_1ECE306E8 = &ggl::dottedRouteLineShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE306F8 = 0;
          unk_1ECE30700 = 0;
          qword_1ECE306F0 = 0;
        }
        qword_1ECE366E8 = (uint64_t)&ggl::dottedRouteLineShaderFragmentFunctionDescriptor(void)::ref;
        if ((v193 & 1) == 0
        {
          ggl::sDFGlyphShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("SDFGlyphShaderVertex");
          *(_DWORD *)algn_1ECE3D15C = 0;
          qword_1ECE3D160 = (uint64_t)"SDFGlyphShader";
          unk_1ECE3D168 = ggl::sDFGlyphShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3D170 = 1;
          unk_1ECE3D178 = &ggl::sDFGlyphShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3D180 = 4;
          unk_1ECE3D188 = &ggl::sDFGlyphShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3D190 = 0;
          unk_1ECE3D198 = &ggl::sDFGlyphShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3D1A0 = 2;
          unk_1ECE3D1A8 = &ggl::sDFGlyphShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3D1B8 = 0;
          unk_1ECE3D1C0 = 0;
          qword_1ECE3D1B0 = 2;
        }
        qword_1ECE366F0 = (uint64_t)&ggl::sDFGlyphShaderVertexFunctionDescriptor(void)::ref;
        if ((v194 & 1) == 0
        {
          v579 = ggl::crc32::compute<23ul>("SDFGlyphShaderFragment");
          qword_1ECE3D658 = 0;
          unk_1ECE3D660 = &ggl::sDFGlyphShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3D668 = 2;
          unk_1ECE3D670 = &ggl::sDFGlyphShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::sDFGlyphShaderFragmentFunctionDescriptor(void)::ref = v579;
          *(_DWORD *)algn_1ECE3D644 = 1;
          qword_1ECE3D678 = 0;
          unk_1ECE3D680 = &ggl::sDFGlyphShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3D648 = (uint64_t)"SDFGlyphShader";
          unk_1ECE3D650 = 0;
          qword_1ECE3D688 = 1;
          unk_1ECE3D690 = &ggl::sDFGlyphShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3D6A0 = 0;
          unk_1ECE3D6A8 = 0;
          qword_1ECE3D698 = 1;
        }
        qword_1ECE366F8 = (uint64_t)&ggl::sDFGlyphShaderFragmentFunctionDescriptor(void)::ref;
        if ((v195 & 1) == 0
        {
          ggl::sDFGlyphHaloShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("SDFGlyphHaloShaderVertex");
          *(_DWORD *)algn_1ECE3DF9C = 0;
          qword_1ECE3DFA0 = (uint64_t)"SDFGlyphHaloShader";
          unk_1ECE3DFA8 = ggl::sDFGlyphHaloShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3DFB0 = 1;
          unk_1ECE3DFB8 = &ggl::sDFGlyphHaloShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3DFC0 = 4;
          unk_1ECE3DFC8 = &ggl::sDFGlyphHaloShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3DFD0 = 0;
          unk_1ECE3DFD8 = &ggl::sDFGlyphHaloShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3DFE0 = 2;
          unk_1ECE3DFE8 = &ggl::sDFGlyphHaloShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3DFF8 = 0;
          unk_1ECE3E000 = 0;
          qword_1ECE3DFF0 = 2;
        }
        qword_1ECE36700 = (uint64_t)&ggl::sDFGlyphHaloShaderVertexFunctionDescriptor(void)::ref;
        if ((v196 & 1) == 0
        {
          v580 = ggl::crc32::compute<27ul>("SDFGlyphHaloShaderFragment");
          qword_1ECE3EC58 = 0;
          unk_1ECE3EC60 = &ggl::sDFGlyphHaloShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3EC68 = 2;
          unk_1ECE3EC70 = &ggl::sDFGlyphHaloShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::sDFGlyphHaloShaderFragmentFunctionDescriptor(void)::ref = v580;
          *(_DWORD *)algn_1ECE3EC44 = 1;
          qword_1ECE3EC78 = 0;
          unk_1ECE3EC80 = &ggl::sDFGlyphHaloShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3EC48 = (uint64_t)"SDFGlyphHaloShader";
          unk_1ECE3EC50 = 0;
          qword_1ECE3EC88 = 1;
          unk_1ECE3EC90 = &ggl::sDFGlyphHaloShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3ECA0 = 0;
          unk_1ECE3ECA8 = 0;
          qword_1ECE3EC98 = 1;
        }
        qword_1ECE36708 = (uint64_t)&ggl::sDFGlyphHaloShaderFragmentFunctionDescriptor(void)::ref;
        if ((v197 & 1) == 0
        {
          ggl::sDFGlyphSuperSampleShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("SDFGlyphSuperSampleShaderVertex");
          *(_DWORD *)algn_1ECE40FBC = 0;
          qword_1ECE40FC0 = (uint64_t)"SDFGlyphSuperSampleShader";
          unk_1ECE40FC8 = ggl::sDFGlyphSuperSampleShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE40FD0 = 1;
          unk_1ECE40FD8 = &ggl::sDFGlyphSuperSampleShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40FE0 = 4;
          unk_1ECE40FE8 = &ggl::sDFGlyphSuperSampleShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE40FF0 = 0;
          unk_1ECE40FF8 = &ggl::sDFGlyphSuperSampleShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE41000 = 2;
          unk_1ECE41008 = &ggl::sDFGlyphSuperSampleShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41018 = 0;
          unk_1ECE41020 = 0;
          qword_1ECE41010 = 2;
        }
        qword_1ECE36710 = (uint64_t)&ggl::sDFGlyphSuperSampleShaderVertexFunctionDescriptor(void)::ref;
        if ((v198 & 1) == 0
        {
          v581 = ggl::crc32::compute<34ul>("SDFGlyphSuperSampleShaderFragment");
          qword_1ECE41B28 = 0;
          unk_1ECE41B30 = &ggl::sDFGlyphSuperSampleShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41B38 = 2;
          unk_1ECE41B40 = &ggl::sDFGlyphSuperSampleShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::sDFGlyphSuperSampleShaderFragmentFunctionDescriptor(void)::ref = v581;
          *(_DWORD *)algn_1ECE41B14 = 1;
          qword_1ECE41B48 = 0;
          unk_1ECE41B50 = &ggl::sDFGlyphSuperSampleShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE41B18 = (uint64_t)"SDFGlyphSuperSampleShader";
          unk_1ECE41B20 = 0;
          qword_1ECE41B58 = 1;
          unk_1ECE41B60 = &ggl::sDFGlyphSuperSampleShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41B70 = 0;
          unk_1ECE41B78 = 0;
          qword_1ECE41B68 = 1;
        }
        qword_1ECE36718 = (uint64_t)&ggl::sDFGlyphSuperSampleShaderFragmentFunctionDescriptor(void)::ref;
        if ((v199 & 1) == 0
        {
          v582 = ggl::crc32::compute<23ul>("SimpleGridShaderVertex");
          qword_1ECE3D6B8 = (uint64_t)"SimpleGridShader";
          unk_1ECE3D6C0 = ggl::simpleGridShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3D6C8 = 1;
          unk_1ECE3D6D0 = &ggl::simpleGridShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3D6D8 = 3;
          unk_1ECE3D6E0 = &ggl::simpleGridShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3D6E8 = 0;
          unk_1ECE3D6F0 = &ggl::simpleGridShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::simpleGridShaderVertexFunctionDescriptor(void)::ref = v582;
          *(_DWORD *)algn_1ECE3D6B4 = 0;
          qword_1ECE3D6F8 = 0;
          unk_1ECE3D700 = &ggl::simpleGridShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3D710 = 0;
          unk_1ECE3D718 = 0;
          qword_1ECE3D708 = 0;
        }
        qword_1ECE36720 = (uint64_t)&ggl::simpleGridShaderVertexFunctionDescriptor(void)::ref;
        if ((v200 & 1) == 0
        {
          ggl::simpleGridShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("SimpleGridShaderFragment");
          *(_DWORD *)algn_1ECE4514C = 1;
          qword_1ECE45160 = 0;
          unk_1ECE45168 = &ggl::simpleGridShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE45170 = 2;
          unk_1ECE45178 = &ggl::simpleGridShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE45180 = 0;
          unk_1ECE45188 = &ggl::simpleGridShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE45150 = (uint64_t)"SimpleGridShader";
          unk_1ECE45158 = 0;
          qword_1ECE45190 = 0;
          unk_1ECE45198 = &ggl::simpleGridShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE451A8 = 0;
          unk_1ECE451B0 = 0;
          qword_1ECE451A0 = 0;
        }
        qword_1ECE36728 = (uint64_t)&ggl::simpleGridShaderFragmentFunctionDescriptor(void)::ref;
        if ((v201 & 1) == 0
        {
          ggl::skyShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<16ul>("SkyShaderVertex");
          *(_DWORD *)algn_1ECE3C2E4 = 0;
          qword_1ECE3C2E8 = (uint64_t)"SkyShader";
          unk_1ECE3C2F0 = ggl::skyShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3C2F8 = 1;
          unk_1ECE3C300 = &ggl::skyShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3C308 = 1;
          unk_1ECE3C310 = &ggl::skyShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3C318 = 0;
          unk_1ECE3C320 = &ggl::skyShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3C328 = 0;
          unk_1ECE3C330 = &ggl::skyShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3C340 = 0;
          unk_1ECE3C348 = 0;
          qword_1ECE3C338 = 0;
        }
        qword_1ECE36730 = (uint64_t)&ggl::skyShaderVertexFunctionDescriptor(void)::ref;
        if ((v202 & 1) == 0
        {
          ggl::skyShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<18ul>("SkyShaderFragment");
          *(_DWORD *)algn_1ECE3C85C = 1;
          qword_1ECE3C860 = (uint64_t)"SkyShader";
          unk_1ECE3C868 = 0;
          qword_1ECE3C870 = 0;
          unk_1ECE3C878 = &ggl::skyShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3C880 = 1;
          unk_1ECE3C888 = &ggl::skyShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3C890 = 0;
          unk_1ECE3C898 = &ggl::skyShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3C8A0 = 0;
          unk_1ECE3C8A8 = &ggl::skyShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3C8B8 = 0;
          unk_1ECE3C8C0 = 0;
          qword_1ECE3C8B0 = 0;
        }
        qword_1ECE36738 = (uint64_t)&ggl::skyShaderFragmentFunctionDescriptor(void)::ref;
        if ((v203 & 1) == 0
        {
          v583 = ggl::crc32::compute<24ul>("SolidRibbonShaderVertex");
          qword_1ECE3DB30 = (uint64_t)"SolidRibbonShader";
          unk_1ECE3DB38 = ggl::solidRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3DB40 = 1;
          unk_1ECE3DB48 = &ggl::solidRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3DB50 = 4;
          unk_1ECE3DB58 = &ggl::solidRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3DB60 = 0;
          unk_1ECE3DB68 = &ggl::solidRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::solidRibbonShaderVertexFunctionDescriptor(void)::ref = v583;
          *(_DWORD *)algn_1ECE3DB2C = 0;
          qword_1ECE3DB70 = 0;
          unk_1ECE3DB78 = &ggl::solidRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3DB88 = 0;
          unk_1ECE3DB90 = 0;
          qword_1ECE3DB80 = 0;
        }
        qword_1ECE36740 = (uint64_t)&ggl::solidRibbonShaderVertexFunctionDescriptor(void)::ref;
        if ((v204 & 1) == 0
        {
          ggl::solidRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("SolidRibbonShaderFragment");
          *(_DWORD *)algn_1ECE3E5F4 = 1;
          qword_1ECE3E608 = 0;
          unk_1ECE3E610 = &ggl::solidRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3E618 = 2;
          unk_1ECE3E620 = &ggl::solidRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3E628 = 0;
          unk_1ECE3E630 = &ggl::solidRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3E5F8 = (uint64_t)"SolidRibbonShader";
          unk_1ECE3E600 = 0;
          qword_1ECE3E638 = 2;
          unk_1ECE3E640 = &ggl::solidRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3E650 = 0;
          unk_1ECE3E658 = 0;
          qword_1ECE3E648 = 2;
        }
        qword_1ECE36748 = (uint64_t)&ggl::solidRibbonShaderFragmentFunctionDescriptor(void)::ref;
        if ((v205 & 1) == 0
        {
          v584 = ggl::crc32::compute<25ul>("SolidTrafficShaderVertex");
          qword_1ECE3E090 = (uint64_t)"SolidTrafficShader";
          unk_1ECE3E098 = ggl::solidTrafficShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3E0A0 = 1;
          unk_1ECE3E0A8 = &ggl::solidTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3E0B0 = 3;
          unk_1ECE3E0B8 = &ggl::solidTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3E0C0 = 0;
          unk_1ECE3E0C8 = &ggl::solidTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::solidTrafficShaderVertexFunctionDescriptor(void)::ref = v584;
          *(_DWORD *)algn_1ECE3E08C = 0;
          qword_1ECE3E0D0 = 0;
          unk_1ECE3E0D8 = &ggl::solidTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3E0E8 = 0;
          unk_1ECE3E0F0 = 0;
          qword_1ECE3E0E0 = 0;
        }
        qword_1ECE36750 = (uint64_t)&ggl::solidTrafficShaderVertexFunctionDescriptor(void)::ref;
        if ((v206 & 1) == 0
        {
          v585 = ggl::crc32::compute<27ul>("SolidTrafficShaderFragment");
          qword_1ECE3ED48 = 0;
          unk_1ECE3ED50 = &ggl::solidTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3ED58 = 1;
          unk_1ECE3ED60 = &ggl::solidTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::solidTrafficShaderFragmentFunctionDescriptor(void)::ref = v585;
          *(_DWORD *)algn_1ECE3ED34 = 1;
          qword_1ECE3ED68 = 0;
          unk_1ECE3ED70 = &ggl::solidTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3ED38 = (uint64_t)"SolidTrafficShader";
          unk_1ECE3ED40 = 0;
          qword_1ECE3ED78 = 1;
          unk_1ECE3ED80 = &ggl::solidTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3ED90 = 0;
          unk_1ECE3ED98 = 0;
          qword_1ECE3ED88 = 1;
        }
        qword_1ECE36758 = (uint64_t)&ggl::solidTrafficShaderFragmentFunctionDescriptor(void)::ref;
        if ((v207 & 1) == 0
        {
          v586 = ggl::crc32::compute<31ul>("SolidMaskedTrafficShaderVertex");
          qword_1ECE40910 = (uint64_t)"SolidMaskedTrafficShader";
          unk_1ECE40918 = ggl::solidMaskedTrafficShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE40920 = 1;
          unk_1ECE40928 = &ggl::solidMaskedTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40930 = 3;
          unk_1ECE40938 = &ggl::solidMaskedTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE40940 = 0;
          unk_1ECE40948 = &ggl::solidMaskedTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::solidMaskedTrafficShaderVertexFunctionDescriptor(void)::ref = v586;
          *(_DWORD *)algn_1ECE4090C = 0;
          qword_1ECE40950 = 0;
          unk_1ECE40958 = &ggl::solidMaskedTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40968 = 0;
          unk_1ECE40970 = 0;
          qword_1ECE40960 = 0;
        }
        qword_1ECE36760 = (uint64_t)&ggl::solidMaskedTrafficShaderVertexFunctionDescriptor(void)::ref;
        if ((v208 & 1) == 0
        {
          v587 = ggl::crc32::compute<33ul>("SolidMaskedTrafficShaderFragment");
          qword_1ECE41548 = 0;
          unk_1ECE41550 = &ggl::solidMaskedTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41558 = 1;
          unk_1ECE41560 = &ggl::solidMaskedTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::solidMaskedTrafficShaderFragmentFunctionDescriptor(void)::ref = v587;
          *(_DWORD *)algn_1ECE41534 = 1;
          qword_1ECE41568 = 0;
          unk_1ECE41570 = &ggl::solidMaskedTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE41538 = (uint64_t)"SolidMaskedTrafficShader";
          unk_1ECE41540 = 0;
          qword_1ECE41578 = 1;
          unk_1ECE41580 = &ggl::solidMaskedTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41590 = 0;
          unk_1ECE41598 = 0;
          qword_1ECE41588 = 1;
        }
        qword_1ECE36768 = (uint64_t)&ggl::solidMaskedTrafficShaderFragmentFunctionDescriptor(void)::ref;
        if ((v209 & 1) == 0
        {
          v588 = ggl::crc32::compute<29ul>("SpecularBuildingShaderVertex");
          qword_1ECE3FB58 = (uint64_t)"SpecularBuildingShader";
          unk_1ECE3FB60 = ggl::specularBuildingShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3FB68 = 1;
          unk_1ECE3FB70 = &ggl::specularBuildingShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3FB78 = 6;
          unk_1ECE3FB80 = &ggl::specularBuildingShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3FB88 = 0;
          unk_1ECE3FB90 = &ggl::specularBuildingShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::specularBuildingShaderVertexFunctionDescriptor(void)::ref = v588;
          *(_DWORD *)algn_1ECE3FB54 = 0;
          qword_1ECE3FB98 = 0;
          unk_1ECE3FBA0 = &ggl::specularBuildingShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3FBB0 = 0;
          unk_1ECE3FBB8 = 0;
          qword_1ECE3FBA8 = 0;
        }
        qword_1ECE36770 = (uint64_t)&ggl::specularBuildingShaderVertexFunctionDescriptor(void)::ref;
        if ((v210 & 1) == 0
        {
          v589 = ggl::crc32::compute<31ul>("SpecularBuildingShaderFragment");
          qword_1ECE40990 = 0;
          unk_1ECE40998 = &ggl::specularBuildingShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE409A0 = 4;
          unk_1ECE409A8 = &ggl::specularBuildingShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::specularBuildingShaderFragmentFunctionDescriptor(void)::ref = v589;
          *(_DWORD *)algn_1ECE4097C = 1;
          qword_1ECE409B0 = 0;
          unk_1ECE409B8 = &ggl::specularBuildingShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE40980 = (uint64_t)"SpecularBuildingShader";
          unk_1ECE40988 = 0;
          qword_1ECE409C0 = 1;
          unk_1ECE409C8 = &ggl::specularBuildingShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE409D8 = 0;
          unk_1ECE409E0 = 0;
          qword_1ECE409D0 = 1;
        }
        qword_1ECE36778 = (uint64_t)&ggl::specularBuildingShaderFragmentFunctionDescriptor(void)::ref;
        if ((v211 & 1) == 0
        {
          qword_1ECE42EA0 = (uint64_t)"SpecularBuildingPointyRoofShader";
          unk_1ECE42EA8 = ggl::specularBuildingPointyRoofShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE42EB0 = 1;
          unk_1ECE42EB8 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42EC0 = 6;
          unk_1ECE42EC8 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42ED0 = 0;
          unk_1ECE42ED8 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::specularBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref = 1075938269;
          qword_1ECE42EE0 = 0;
          unk_1ECE42EE8 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42EF8 = 0;
          unk_1ECE42F00 = 0;
          qword_1ECE42EF0 = 0;
        }
        qword_1ECE36780 = (uint64_t)&ggl::specularBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref;
        if ((v212 & 1) == 0
        {
          qword_1ECE43418 = 0;
          unk_1ECE43420 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43428 = 4;
          unk_1ECE43430 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::specularBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref = 0x10062DEDALL;
          qword_1ECE43438 = 0;
          unk_1ECE43440 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE43408 = (uint64_t)"SpecularBuildingPointyRoofShader";
          unk_1ECE43410 = 0;
          qword_1ECE43448 = 0;
          unk_1ECE43450 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE43460 = 0;
          unk_1ECE43468 = 0;
          qword_1ECE43458 = 0;
        }
        qword_1ECE36788 = (uint64_t)&ggl::specularBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref;
        if ((v213 & 1) == 0
        {
          v590 = ggl::crc32::compute<32ul>("SpecularBuildingTopShaderVertex");
          qword_1ECE41030 = (uint64_t)"SpecularBuildingTopShader";
          unk_1ECE41038 = ggl::specularBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE41040 = 1;
          unk_1ECE41048 = &ggl::specularBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41050 = 6;
          unk_1ECE41058 = &ggl::specularBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE41060 = 0;
          unk_1ECE41068 = &ggl::specularBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::specularBuildingTopShaderVertexFunctionDescriptor(void)::ref = v590;
          *(_DWORD *)algn_1ECE4102C = 0;
          qword_1ECE41070 = 0;
          unk_1ECE41078 = &ggl::specularBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41088 = 0;
          unk_1ECE41090 = 0;
          qword_1ECE41080 = 0;
        }
        qword_1ECE36790 = (uint64_t)&ggl::specularBuildingTopShaderVertexFunctionDescriptor(void)::ref;
        if ((v214 & 1) == 0
        {
          ggl::specularBuildingTopShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("SpecularBuildingTopShaderFragment");
          *(_DWORD *)algn_1ECE41B84 = 1;
          qword_1ECE41B98 = 0;
          unk_1ECE41BA0 = &ggl::specularBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41BA8 = 4;
          unk_1ECE41BB0 = &ggl::specularBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE41BB8 = 0;
          unk_1ECE41BC0 = &ggl::specularBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE41B88 = (uint64_t)"SpecularBuildingTopShader";
          unk_1ECE41B90 = 0;
          qword_1ECE41BC8 = 0;
          unk_1ECE41BD0 = &ggl::specularBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41BE0 = 0;
          unk_1ECE41BE8 = 0;
          qword_1ECE41BD8 = 0;
        }
        qword_1ECE36798 = (uint64_t)&ggl::specularBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
        if ((v215 & 1) == 0
        {
          v591 = ggl::crc32::compute<29ul>("SpecularLandmarkShaderVertex");
          qword_1ECE3FBD0 = (uint64_t)"SpecularLandmarkShader";
          unk_1ECE3FBD8 = ggl::specularLandmarkShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3FBE0 = 1;
          unk_1ECE3FBE8 = &ggl::specularLandmarkShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3FBF0 = 6;
          unk_1ECE3FBF8 = &ggl::specularLandmarkShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3FC00 = 0;
          unk_1ECE3FC08 = &ggl::specularLandmarkShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::specularLandmarkShaderVertexFunctionDescriptor(void)::ref = v591;
          *(_DWORD *)algn_1ECE3FBCC = 0;
          qword_1ECE3FC10 = 0;
          unk_1ECE3FC18 = &ggl::specularLandmarkShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3FC28 = 0;
          unk_1ECE3FC30 = 0;
          qword_1ECE3FC20 = 0;
        }
        qword_1ECE367A0 = (uint64_t)&ggl::specularLandmarkShaderVertexFunctionDescriptor(void)::ref;
        if ((v216 & 1) == 0
        {
          v592 = ggl::crc32::compute<31ul>("SpecularLandmarkShaderFragment");
          qword_1ECE40A08 = 0;
          unk_1ECE40A10 = &ggl::specularLandmarkShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40A18 = 4;
          unk_1ECE40A20 = &ggl::specularLandmarkShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::specularLandmarkShaderFragmentFunctionDescriptor(void)::ref = v592;
          *(_DWORD *)algn_1ECE409F4 = 1;
          qword_1ECE40A28 = 0;
          unk_1ECE40A30 = &ggl::specularLandmarkShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE409F8 = (uint64_t)"SpecularLandmarkShader";
          unk_1ECE40A00 = 0;
          qword_1ECE40A38 = 1;
          unk_1ECE40A40 = &ggl::specularLandmarkShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40A50 = 0;
          unk_1ECE40A58 = 0;
          qword_1ECE40A48 = 1;
        }
        qword_1ECE367A8 = (uint64_t)&ggl::specularLandmarkShaderFragmentFunctionDescriptor(void)::ref;
        if ((v217 & 1) == 0
        {
          qword_1ECE356E8 = (uint64_t)"StandardPostchainCompositeShader";
          unk_1ECE356F0 = ggl::standardPostchainCompositeShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE356F8 = 1;
          unk_1ECE35700 = &ggl::standardPostchainCompositeShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35708 = 0;
          unk_1ECE35710 = &ggl::standardPostchainCompositeShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35718 = 0;
          unk_1ECE35720 = &ggl::standardPostchainCompositeShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainCompositeShaderVertexFunctionDescriptor(void)::ref = 3269181341;
          qword_1ECE35728 = 0;
          unk_1ECE35730 = &ggl::standardPostchainCompositeShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35740 = 0;
          unk_1ECE35748 = 0;
          qword_1ECE35738 = 0;
        }
        qword_1ECE367B0 = (uint64_t)&ggl::standardPostchainCompositeShaderVertexFunctionDescriptor(void)::ref;
        if ((v218 & 1) == 0
        {
          ggl::standardPostchainCompositeShaderFragmentFunctionDescriptor(void)::ref = 0x1DF746FA2;
          qword_1ECE35A20 = (uint64_t)"StandardPostchainCompositeShader";
          unk_1ECE35A28 = 0;
          qword_1ECE35A30 = 0;
          unk_1ECE35A38 = &ggl::standardPostchainCompositeShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35A40 = 1;
          unk_1ECE35A48 = &ggl::standardPostchainCompositeShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35A50 = 0;
          unk_1ECE35A58 = &ggl::standardPostchainCompositeShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE35A60 = 4;
          unk_1ECE35A68 = &ggl::standardPostchainCompositeShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35A78 = 0;
          unk_1ECE35A80 = 0;
          qword_1ECE35A70 = 4;
        }
        qword_1ECE367B8 = (uint64_t)&ggl::standardPostchainCompositeShaderFragmentFunctionDescriptor(void)::ref;
        if ((v219 & 1) == 0
        {
          qword_1ECE35848 = (uint64_t)"StandardPostchainSplitFrameShader";
          unk_1ECE35850 = ggl::standardPostchainSplitFrameShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE35858 = 1;
          unk_1ECE35860 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35868 = 0;
          unk_1ECE35870 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35878 = 0;
          unk_1ECE35880 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainSplitFrameShaderVertexFunctionDescriptor(void)::ref = 1892780714;
          qword_1ECE35888 = 0;
          unk_1ECE35890 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE358A0 = 0;
          unk_1ECE358A8 = 0;
          qword_1ECE35898 = 0;
        }
        qword_1ECE367C0 = (uint64_t)&ggl::standardPostchainSplitFrameShaderVertexFunctionDescriptor(void)::ref;
        if ((v220 & 1) == 0
        {
          ggl::standardPostchainSplitFrameShaderFragmentFunctionDescriptor(void)::ref = 0x119C0B9BFLL;
          qword_1ECE35B80 = (uint64_t)"StandardPostchainSplitFrameShader";
          unk_1ECE35B88 = 0;
          qword_1ECE35B90 = 0;
          unk_1ECE35B98 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35BA0 = 1;
          unk_1ECE35BA8 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35BB0 = 0;
          unk_1ECE35BB8 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE35BC0 = 2;
          unk_1ECE35BC8 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35BD8 = 0;
          unk_1ECE35BE0 = 0;
          qword_1ECE35BD0 = 2;
        }
        qword_1ECE367C8 = (uint64_t)&ggl::standardPostchainSplitFrameShaderFragmentFunctionDescriptor(void)::ref;
        if ((v221 & 1) == 0
        {
          qword_1ECE35C68 = (uint64_t)"StandardPostchainDownsampleCoCShader";
          unk_1ECE35C70 = ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE35C78 = 1;
          unk_1ECE35C80 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35C88 = 0;
          unk_1ECE35C90 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35C98 = 0;
          unk_1ECE35CA0 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainDownsampleCoCShaderVertexFunctionDescriptor(void)::ref = 579759095;
          qword_1ECE35CA8 = 0;
          unk_1ECE35CB0 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35CC0 = 0;
          unk_1ECE35CC8 = 0;
          qword_1ECE35CB8 = 0;
        }
        qword_1ECE367D0 = (uint64_t)&ggl::standardPostchainDownsampleCoCShaderVertexFunctionDescriptor(void)::ref;
        if ((v222 & 1) == 0
        {
          ggl::standardPostchainDownsampleCoCShaderFragmentFunctionDescriptor(void)::ref = 0x1C1D81A17;
          qword_1ECE35E30 = (uint64_t)"StandardPostchainDownsampleCoCShader";
          unk_1ECE35E38 = 0;
          qword_1ECE35E40 = 0;
          unk_1ECE35E48 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35E50 = 0;
          unk_1ECE35E58 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35E60 = 0;
          unk_1ECE35E68 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE35E70 = 1;
          unk_1ECE35E78 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35E88 = 0;
          unk_1ECE35E90 = 0;
          qword_1ECE35E80 = 1;
        }
        qword_1ECE367D8 = (uint64_t)&ggl::standardPostchainDownsampleCoCShaderFragmentFunctionDescriptor(void)::ref;
        if ((v223 & 1) == 0
        {
          v593 = ggl::crc32::compute<36ul>("StandardPostchainBGBlurShaderVertex");
          qword_1ECE35108 = (uint64_t)"StandardPostchainBGBlurShader";
          unk_1ECE35110 = ggl::standardPostchainBGBlurShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE35118 = 1;
          unk_1ECE35120 = &ggl::standardPostchainBGBlurShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35128 = 0;
          unk_1ECE35130 = &ggl::standardPostchainBGBlurShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35138 = 0;
          unk_1ECE35140 = &ggl::standardPostchainBGBlurShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainBGBlurShaderVertexFunctionDescriptor(void)::ref = v593;
          *(_DWORD *)algn_1ECE35104 = 0;
          qword_1ECE35148 = 0;
          unk_1ECE35150 = &ggl::standardPostchainBGBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35160 = 0;
          unk_1ECE35168 = 0;
          qword_1ECE35158 = 0;
        }
        qword_1ECE367E0 = (uint64_t)&ggl::standardPostchainBGBlurShaderVertexFunctionDescriptor(void)::ref;
        if ((v224 & 1) == 0
        {
          v594 = ggl::crc32::compute<38ul>("StandardPostchainBGBlurShaderFragment");
          qword_1ECE35440 = 0;
          unk_1ECE35448 = &ggl::standardPostchainBGBlurShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35450 = 1;
          unk_1ECE35458 = &ggl::standardPostchainBGBlurShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::standardPostchainBGBlurShaderFragmentFunctionDescriptor(void)::ref = v594;
          *(_DWORD *)algn_1ECE3542C = 1;
          qword_1ECE35460 = 0;
          unk_1ECE35468 = &ggl::standardPostchainBGBlurShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE35430 = (uint64_t)"StandardPostchainBGBlurShader";
          unk_1ECE35438 = 0;
          qword_1ECE35470 = 1;
          unk_1ECE35478 = &ggl::standardPostchainBGBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35488 = 0;
          unk_1ECE35490 = 0;
          qword_1ECE35480 = 1;
        }
        qword_1ECE367E8 = (uint64_t)&ggl::standardPostchainBGBlurShaderFragmentFunctionDescriptor(void)::ref;
        if ((v225 & 1) == 0
        {
          v595 = ggl::crc32::compute<36ul>("StandardPostchainFGBlurShaderVertex");
          qword_1ECE35178 = (uint64_t)"StandardPostchainFGBlurShader";
          unk_1ECE35180 = ggl::standardPostchainFGBlurShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE35188 = 1;
          unk_1ECE35190 = &ggl::standardPostchainFGBlurShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35198 = 0;
          unk_1ECE351A0 = &ggl::standardPostchainFGBlurShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE351A8 = 0;
          unk_1ECE351B0 = &ggl::standardPostchainFGBlurShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainFGBlurShaderVertexFunctionDescriptor(void)::ref = v595;
          *(_DWORD *)algn_1ECE35174 = 0;
          qword_1ECE351B8 = 0;
          unk_1ECE351C0 = &ggl::standardPostchainFGBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE351D0 = 0;
          unk_1ECE351D8 = 0;
          qword_1ECE351C8 = 0;
        }
        qword_1ECE367F0 = (uint64_t)&ggl::standardPostchainFGBlurShaderVertexFunctionDescriptor(void)::ref;
        if ((v226 & 1) == 0
        {
          ggl::standardPostchainFGBlurShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("StandardPostchainFGBlurShaderFragment");
          *(_DWORD *)algn_1ECE3549C = 1;
          qword_1ECE354A0 = (uint64_t)"StandardPostchainFGBlurShader";
          unk_1ECE354A8 = 0;
          qword_1ECE354B0 = 0;
          unk_1ECE354B8 = &ggl::standardPostchainFGBlurShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE354C0 = 1;
          unk_1ECE354C8 = &ggl::standardPostchainFGBlurShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE354D0 = 0;
          unk_1ECE354D8 = &ggl::standardPostchainFGBlurShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE354E0 = 2;
          unk_1ECE354E8 = &ggl::standardPostchainFGBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE354F8 = 0;
          unk_1ECE35500 = 0;
          qword_1ECE354F0 = 2;
        }
        qword_1ECE367F8 = (uint64_t)&ggl::standardPostchainFGBlurShaderFragmentFunctionDescriptor(void)::ref;
        if ((v227 & 1) == 0
        {
          v596 = ggl::crc32::compute<38ul>("StandardPostchainTentBlurShaderVertex");
          qword_1ECE35588 = (uint64_t)"StandardPostchainTentBlurShader";
          unk_1ECE35590 = ggl::standardPostchainTentBlurShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE35598 = 1;
          unk_1ECE355A0 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE355A8 = 0;
          unk_1ECE355B0 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE355B8 = 0;
          unk_1ECE355C0 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref = v596;
          *(_DWORD *)algn_1ECE35584 = 0;
          qword_1ECE355C8 = 0;
          unk_1ECE355D0 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE355E0 = 0;
          unk_1ECE355E8 = 0;
          qword_1ECE355D8 = 0;
        }
        qword_1ECE36800 = (uint64_t)&ggl::standardPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref;
        if ((v228 & 1) == 0
        {
          ggl::standardPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref = 0x11C5A8EEELL;
          qword_1ECE358C0 = (uint64_t)"StandardPostchainTentBlurShader";
          unk_1ECE358C8 = 0;
          qword_1ECE358D0 = 0;
          unk_1ECE358D8 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE358E0 = 0;
          unk_1ECE358E8 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE358F0 = 0;
          unk_1ECE358F8 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE35900 = 1;
          unk_1ECE35908 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35918 = 0;
          unk_1ECE35920 = 0;
          qword_1ECE35910 = 1;
        }
        qword_1ECE36808 = (uint64_t)&ggl::standardPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref;
        if ((v229 & 1) == 0
        {
          qword_1ECE35EA8 = (uint64_t)"StandardPostchainDownsampleDepthShader";
          unk_1ECE35EB0 = ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE35EB8 = 1;
          unk_1ECE35EC0 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35EC8 = 0;
          unk_1ECE35ED0 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35ED8 = 0;
          unk_1ECE35EE0 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainDownsampleDepthShaderVertexFunctionDescriptor(void)::ref = 2938732211;
          qword_1ECE35EE8 = 0;
          unk_1ECE35EF0 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35F00 = 0;
          unk_1ECE35F08 = 0;
          qword_1ECE35EF8 = 0;
        }
        qword_1ECE36810 = (uint64_t)&ggl::standardPostchainDownsampleDepthShaderVertexFunctionDescriptor(void)::ref;
        if ((v230 & 1) == 0
        {
          ggl::standardPostchainDownsampleDepthShaderFragmentFunctionDescriptor(void)::ref = 0x13810F95ALL;
          qword_1ECE35F90 = (uint64_t)"StandardPostchainDownsampleDepthShader";
          unk_1ECE35F98 = 0;
          qword_1ECE35FA0 = 0;
          unk_1ECE35FA8 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35FB0 = 0;
          unk_1ECE35FB8 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35FC0 = 0;
          unk_1ECE35FC8 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE35FD0 = 1;
          unk_1ECE35FD8 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35FE8 = 0;
          unk_1ECE35FF0 = 0;
          qword_1ECE35FE0 = 1;
        }
        qword_1ECE36818 = (uint64_t)&ggl::standardPostchainDownsampleDepthShaderFragmentFunctionDescriptor(void)::ref;
        if ((v231 & 1) == 0
        {
          v597 = ggl::crc32::compute<38ul>("StandardPostchainSSAOBlurShaderVertex");
          qword_1ECE35518 = (uint64_t)"StandardPostchainSSAOBlurShader";
          unk_1ECE35520 = ggl::standardPostchainSSAOBlurShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE35528 = 1;
          unk_1ECE35530 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35538 = 0;
          unk_1ECE35540 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35548 = 0;
          unk_1ECE35550 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainSSAOBlurShaderVertexFunctionDescriptor(void)::ref = v597;
          *(_DWORD *)algn_1ECE35514 = 0;
          qword_1ECE35558 = 0;
          unk_1ECE35560 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35570 = 0;
          unk_1ECE35578 = 0;
          qword_1ECE35568 = 0;
        }
        qword_1ECE36820 = (uint64_t)&ggl::standardPostchainSSAOBlurShaderVertexFunctionDescriptor(void)::ref;
        if ((v232 & 1) == 0
        {
          ggl::standardPostchainSSAOBlurShaderFragmentFunctionDescriptor(void)::ref = 0x1AAC07444;
          qword_1ECE357D0 = (uint64_t)"StandardPostchainSSAOBlurShader";
          unk_1ECE357D8 = 0;
          qword_1ECE357E0 = 0;
          unk_1ECE357E8 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE357F0 = 1;
          unk_1ECE357F8 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35800 = 0;
          unk_1ECE35808 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE35810 = 2;
          unk_1ECE35818 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35828 = 0;
          unk_1ECE35830 = 0;
          qword_1ECE35820 = 2;
        }
        qword_1ECE36828 = (uint64_t)&ggl::standardPostchainSSAOBlurShaderFragmentFunctionDescriptor(void)::ref;
        if ((v233 & 1) == 0
        {
          qword_1ECE35B08 = (uint64_t)"StandardPostchainSSAOUpsampleShader";
          unk_1ECE35B10 = ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE35B18 = 1;
          unk_1ECE35B20 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35B28 = 0;
          unk_1ECE35B30 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35B38 = 0;
          unk_1ECE35B40 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainSSAOUpsampleShaderVertexFunctionDescriptor(void)::ref = 1285258797;
          qword_1ECE35B48 = 0;
          unk_1ECE35B50 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35B60 = 0;
          unk_1ECE35B68 = 0;
          qword_1ECE35B58 = 0;
        }
        qword_1ECE36830 = (uint64_t)&ggl::standardPostchainSSAOUpsampleShaderVertexFunctionDescriptor(void)::ref;
        if ((v234 & 1) == 0
        {
          ggl::standardPostchainSSAOUpsampleShaderFragmentFunctionDescriptor(void)::ref = 0x1D7D2BD7CLL;
          qword_1ECE35DC0 = (uint64_t)"StandardPostchainSSAOUpsampleShader";
          unk_1ECE35DC8 = 0;
          qword_1ECE35DD0 = 0;
          unk_1ECE35DD8 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35DE0 = 1;
          unk_1ECE35DE8 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35DF0 = 0;
          unk_1ECE35DF8 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE35E00 = 3;
          unk_1ECE35E08 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35E18 = 0;
          unk_1ECE35E20 = 0;
          qword_1ECE35E10 = 3;
        }
        qword_1ECE36838 = (uint64_t)&ggl::standardPostchainSSAOUpsampleShaderFragmentFunctionDescriptor(void)::ref;
        if ((v235 & 1) == 0
        {
          v598 = ggl::crc32::compute<34ul>("StandardPostchainSSAOShaderVertex");
          qword_1ECE34FB8 = (uint64_t)"StandardPostchainSSAOShader";
          unk_1ECE34FC0 = ggl::standardPostchainSSAOShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE34FC8 = 1;
          unk_1ECE34FD0 = &ggl::standardPostchainSSAOShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE34FD8 = 0;
          unk_1ECE34FE0 = &ggl::standardPostchainSSAOShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE34FE8 = 0;
          unk_1ECE34FF0 = &ggl::standardPostchainSSAOShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::standardPostchainSSAOShaderVertexFunctionDescriptor(void)::ref = v598;
          *(_DWORD *)algn_1ECE34FB4 = 0;
          qword_1ECE34FF8 = 0;
          unk_1ECE35000 = &ggl::standardPostchainSSAOShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35010 = 0;
          unk_1ECE35018 = 0;
          qword_1ECE35008 = 0;
        }
        qword_1ECE36840 = (uint64_t)&ggl::standardPostchainSSAOShaderVertexFunctionDescriptor(void)::ref;
        if ((v236 & 1) == 0
        {
          ggl::standardPostchainSSAOShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("StandardPostchainSSAOShaderFragment");
          *(_DWORD *)algn_1ECE351EC = 1;
          qword_1ECE351F0 = (uint64_t)"StandardPostchainSSAOShader";
          unk_1ECE351F8 = 0;
          qword_1ECE35200 = 0;
          unk_1ECE35208 = &ggl::standardPostchainSSAOShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35210 = 1;
          unk_1ECE35218 = &ggl::standardPostchainSSAOShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35220 = 0;
          unk_1ECE35228 = &ggl::standardPostchainSSAOShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE35230 = 2;
          unk_1ECE35238 = &ggl::standardPostchainSSAOShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE35248 = 0;
          unk_1ECE35250 = 0;
          qword_1ECE35240 = 2;
        }
        qword_1ECE36848 = (uint64_t)&ggl::standardPostchainSSAOShaderFragmentFunctionDescriptor(void)::ref;
        if ((v237 & 1) == 0
        {
          v599 = ggl::crc32::compute<31ul>("StyleTextureRibbonShaderVertex");
          qword_1ECE40A68 = (uint64_t)"StyleTextureRibbonShader";
          unk_1ECE40A70 = ggl::styleTextureRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE40A78 = 1;
          unk_1ECE40A80 = &ggl::styleTextureRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40A88 = 2;
          unk_1ECE40A90 = &ggl::styleTextureRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE40A98 = 0;
          unk_1ECE40AA0 = &ggl::styleTextureRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::styleTextureRibbonShaderVertexFunctionDescriptor(void)::ref = v599;
          *(_DWORD *)algn_1ECE40A64 = 0;
          qword_1ECE40AA8 = 1;
          unk_1ECE40AB0 = &ggl::styleTextureRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40AC0 = 0;
          unk_1ECE40AC8 = 0;
          qword_1ECE40AB8 = 1;
        }
        qword_1ECE36850 = (uint64_t)&ggl::styleTextureRibbonShaderVertexFunctionDescriptor(void)::ref;
        if ((v238 & 1) == 0
        {
          v600 = ggl::crc32::compute<33ul>("StyleTextureRibbonShaderFragment");
          qword_1ECE415C0 = 0;
          unk_1ECE415C8 = &ggl::styleTextureRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE415D0 = 1;
          unk_1ECE415D8 = &ggl::styleTextureRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::styleTextureRibbonShaderFragmentFunctionDescriptor(void)::ref = v600;
          *(_DWORD *)algn_1ECE415AC = 1;
          qword_1ECE415E0 = 0;
          unk_1ECE415E8 = &ggl::styleTextureRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE415B0 = (uint64_t)"StyleTextureRibbonShader";
          unk_1ECE415B8 = 0;
          qword_1ECE415F0 = 1;
          unk_1ECE415F8 = &ggl::styleTextureRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41608 = 0;
          unk_1ECE41610 = 0;
          qword_1ECE41600 = 1;
        }
        qword_1ECE36858 = (uint64_t)&ggl::styleTextureRibbonShaderFragmentFunctionDescriptor(void)::ref;
        if ((v239 & 1) == 0
        {
          ggl::textureAlphaMaskShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("TextureAlphaMaskShaderVertex");
          *(_DWORD *)algn_1ECE3FCBC = 0;
          qword_1ECE3FCC0 = (uint64_t)"TextureAlphaMaskShader";
          unk_1ECE3FCC8 = ggl::textureAlphaMaskShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3FCD0 = 1;
          unk_1ECE3FCD8 = &ggl::textureAlphaMaskShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3FCE0 = 1;
          unk_1ECE3FCE8 = &ggl::textureAlphaMaskShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3FCF0 = 0;
          unk_1ECE3FCF8 = &ggl::textureAlphaMaskShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3FD00 = 0;
          unk_1ECE3FD08 = &ggl::textureAlphaMaskShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3FD18 = 0;
          unk_1ECE3FD20 = 0;
          qword_1ECE3FD10 = 0;
        }
        qword_1ECE36860 = (uint64_t)&ggl::textureAlphaMaskShaderVertexFunctionDescriptor(void)::ref;
        if ((v240 & 1) == 0
        {
          v601 = ggl::crc32::compute<31ul>("TextureAlphaMaskShaderFragment");
          qword_1ECE40AE8 = 0;
          unk_1ECE40AF0 = &ggl::textureAlphaMaskShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40AF8 = 1;
          unk_1ECE40B00 = &ggl::textureAlphaMaskShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::textureAlphaMaskShaderFragmentFunctionDescriptor(void)::ref = v601;
          *(_DWORD *)algn_1ECE40AD4 = 1;
          qword_1ECE40B08 = 0;
          unk_1ECE40B10 = &ggl::textureAlphaMaskShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE40AD8 = (uint64_t)"TextureAlphaMaskShader";
          unk_1ECE40AE0 = 0;
          qword_1ECE40B18 = 1;
          unk_1ECE40B20 = &ggl::textureAlphaMaskShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40B30 = 0;
          unk_1ECE40B38 = 0;
          qword_1ECE40B28 = 1;
        }
        qword_1ECE36868 = (uint64_t)&ggl::textureAlphaMaskShaderFragmentFunctionDescriptor(void)::ref;
        if ((v241 & 1) == 0
        {
          v602 = ggl::crc32::compute<21ul>("TexturedShaderVertex");
          qword_1ECE3D1D0 = (uint64_t)"TexturedShader";
          unk_1ECE3D1D8 = ggl::texturedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3D1E0 = 1;
          unk_1ECE3D1E8 = &ggl::texturedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3D1F0 = 3;
          unk_1ECE3D1F8 = &ggl::texturedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3D200 = 0;
          unk_1ECE3D208 = &ggl::texturedShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::texturedShaderVertexFunctionDescriptor(void)::ref = v602;
          *(_DWORD *)algn_1ECE3D1CC = 0;
          qword_1ECE3D210 = 0;
          unk_1ECE3D218 = &ggl::texturedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3D228 = 0;
          unk_1ECE3D230 = 0;
          qword_1ECE3D220 = 0;
        }
        qword_1ECE36870 = (uint64_t)&ggl::texturedShaderVertexFunctionDescriptor(void)::ref;
        if ((v242 & 1) == 0
        {
          v603 = ggl::crc32::compute<23ul>("TexturedShaderFragment");
          qword_1ECE3D738 = 0;
          unk_1ECE3D740 = &ggl::texturedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3D748 = 0;
          unk_1ECE3D750 = &ggl::texturedShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::texturedShaderFragmentFunctionDescriptor(void)::ref = v603;
          *(_DWORD *)algn_1ECE3D724 = 1;
          qword_1ECE3D758 = 0;
          unk_1ECE3D760 = &ggl::texturedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3D728 = (uint64_t)"TexturedShader";
          unk_1ECE3D730 = 0;
          qword_1ECE3D768 = 1;
          unk_1ECE3D770 = &ggl::texturedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3D780 = 0;
          unk_1ECE3D788 = 0;
          qword_1ECE3D778 = 1;
        }
        qword_1ECE36878 = (uint64_t)&ggl::texturedShaderFragmentFunctionDescriptor(void)::ref;
        if ((v243 & 1) == 0
        {
          v604 = ggl::crc32::compute<36ul>("TexturedDrapedSRGBBlendShaderVertex");
          qword_1EE578500 = (uint64_t)"TexturedDrapedSRGBBlendShader";
          unk_1EE578508 = ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EE578510 = 1;
          unk_1EE578518 = &ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EE578520 = 3;
          unk_1EE578528 = &ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EE578530 = 0;
          unk_1EE578538 = &ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::texturedDrapedSRGBBlendShaderVertexFunctionDescriptor(void)::ref = v604;
          *(_DWORD *)algn_1EE5784FC = 0;
          qword_1EE578540 = 0;
          unk_1EE578548 = &ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EE578558 = 0;
          unk_1EE578560 = 0;
          qword_1EE578550 = 0;
        }
        qword_1ECE36880 = (uint64_t)&ggl::texturedDrapedSRGBBlendShaderVertexFunctionDescriptor(void)::ref;
        if ((v244 & 1) == 0
        {
          v605 = ggl::crc32::compute<38ul>("TexturedDrapedSRGBBlendShaderFragment");
          qword_1EE578588 = 0;
          unk_1EE578590 = &ggl::texturedDrapedSRGBBlendShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EE578598 = 2;
          unk_1EE5785A0 = &ggl::texturedDrapedSRGBBlendShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::texturedDrapedSRGBBlendShaderFragmentFunctionDescriptor(void)::ref = v605;
          *(_DWORD *)algn_1EE578574 = 1;
          qword_1EE5785A8 = 0;
          unk_1EE5785B0 = &ggl::texturedDrapedSRGBBlendShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EE578578 = (uint64_t)"TexturedDrapedSRGBBlendShader";
          unk_1EE578580 = 0;
          qword_1EE5785B8 = 1;
          unk_1EE5785C0 = &ggl::texturedDrapedSRGBBlendShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EE5785D0 = 0;
          unk_1EE5785D8 = 0;
          qword_1EE5785C8 = 1;
        }
        qword_1ECE36888 = (uint64_t)&ggl::texturedDrapedSRGBBlendShaderFragmentFunctionDescriptor(void)::ref;
        if ((v245 & 1) == 0
        {
          v606 = ggl::crc32::compute<30ul>("TexturedSRGBBlendShaderVertex");
          qword_1ECE402C0 = (uint64_t)"TexturedSRGBBlendShader";
          unk_1ECE402C8 = ggl::texturedSRGBBlendShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE402D0 = 1;
          unk_1ECE402D8 = &ggl::texturedSRGBBlendShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE402E0 = 3;
          unk_1ECE402E8 = &ggl::texturedSRGBBlendShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE402F0 = 0;
          unk_1ECE402F8 = &ggl::texturedSRGBBlendShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::texturedSRGBBlendShaderVertexFunctionDescriptor(void)::ref = v606;
          *(_DWORD *)algn_1ECE402BC = 0;
          qword_1ECE40300 = 0;
          unk_1ECE40308 = &ggl::texturedSRGBBlendShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40318 = 0;
          unk_1ECE40320 = 0;
          qword_1ECE40310 = 0;
        }
        qword_1ECE36890 = (uint64_t)&ggl::texturedSRGBBlendShaderVertexFunctionDescriptor(void)::ref;
        if ((v246 & 1) == 0
        {
          v607 = ggl::crc32::compute<32ul>("TexturedSRGBBlendShaderFragment");
          qword_1ECE41128 = 0;
          unk_1ECE41130 = &ggl::texturedSRGBBlendShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41138 = 2;
          unk_1ECE41140 = &ggl::texturedSRGBBlendShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::texturedSRGBBlendShaderFragmentFunctionDescriptor(void)::ref = v607;
          *(_DWORD *)algn_1ECE41114 = 1;
          qword_1ECE41148 = 0;
          unk_1ECE41150 = &ggl::texturedSRGBBlendShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE41118 = (uint64_t)"TexturedSRGBBlendShader";
          unk_1ECE41120 = 0;
          qword_1ECE41158 = 1;
          unk_1ECE41160 = &ggl::texturedSRGBBlendShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41170 = 0;
          unk_1ECE41178 = 0;
          qword_1ECE41168 = 1;
        }
        qword_1ECE36898 = (uint64_t)&ggl::texturedSRGBBlendShaderFragmentFunctionDescriptor(void)::ref;
        if ((v247 & 1) == 0
        {
          qword_1ECE33590 = (uint64_t)"TexturedColormappedSRGBTexturedShader";
          unk_1ECE33598 = ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE335A0 = 1;
          unk_1ECE335A8 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE335B0 = 3;
          unk_1ECE335B8 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE335C0 = 0;
          unk_1ECE335C8 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::texturedColormappedSRGBTexturedShaderVertexFunctionDescriptor(void)::ref = 103723494;
          qword_1ECE335D0 = 0;
          unk_1ECE335D8 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE335E8 = 0;
          unk_1ECE335F0 = 0;
          qword_1ECE335E0 = 0;
        }
        qword_1ECE368A0 = (uint64_t)&ggl::texturedColormappedSRGBTexturedShaderVertexFunctionDescriptor(void)::ref;
        if ((v248 & 1) == 0
        {
          qword_1ECE33618 = 0;
          unk_1ECE33620 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE33628 = 2;
          unk_1ECE33630 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::texturedColormappedSRGBTexturedShaderFragmentFunctionDescriptor(void)::ref = 0x1F407266DLL;
          qword_1ECE33638 = 0;
          unk_1ECE33640 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE33608 = (uint64_t)"TexturedColormappedSRGBTexturedShader";
          unk_1ECE33610 = 0;
          qword_1ECE33648 = 2;
          unk_1ECE33650 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE33660 = 0;
          unk_1ECE33668 = 0;
          qword_1ECE33658 = 2;
        }
        qword_1ECE368A8 = (uint64_t)&ggl::texturedColormappedSRGBTexturedShaderFragmentFunctionDescriptor(void)::ref;
        if ((v249 & 1) == 0
        {
          v608 = ggl::crc32::compute<29ul>("TexturedExtendedShaderVertex");
          qword_1ECE3FD30 = (uint64_t)"TexturedExtendedShader";
          unk_1ECE3FD38 = ggl::texturedExtendedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3FD40 = 1;
          unk_1ECE3FD48 = &ggl::texturedExtendedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3FD50 = 3;
          unk_1ECE3FD58 = &ggl::texturedExtendedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3FD60 = 0;
          unk_1ECE3FD68 = &ggl::texturedExtendedShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::texturedExtendedShaderVertexFunctionDescriptor(void)::ref = v608;
          *(_DWORD *)algn_1ECE3FD2C = 0;
          qword_1ECE3FD70 = 0;
          unk_1ECE3FD78 = &ggl::texturedExtendedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3FD88 = 0;
          unk_1ECE3FD90 = 0;
          qword_1ECE3FD80 = 0;
        }
        qword_1ECE368B0 = (uint64_t)&ggl::texturedExtendedShaderVertexFunctionDescriptor(void)::ref;
        if ((v250 & 1) == 0
        {
          v609 = ggl::crc32::compute<31ul>("TexturedExtendedShaderFragment");
          qword_1ECE40B58 = 0;
          unk_1ECE40B60 = &ggl::texturedExtendedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40B68 = 1;
          unk_1ECE40B70 = &ggl::texturedExtendedShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::texturedExtendedShaderFragmentFunctionDescriptor(void)::ref = v609;
          *(_DWORD *)algn_1ECE40B44 = 1;
          qword_1ECE40B78 = 0;
          unk_1ECE40B80 = &ggl::texturedExtendedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE40B48 = (uint64_t)"TexturedExtendedShader";
          unk_1ECE40B50 = 0;
          qword_1ECE40B88 = 1;
          unk_1ECE40B90 = &ggl::texturedExtendedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40BA0 = 0;
          unk_1ECE40BA8 = 0;
          qword_1ECE40B98 = 1;
        }
        qword_1ECE368B8 = (uint64_t)&ggl::texturedExtendedShaderFragmentFunctionDescriptor(void)::ref;
        if ((v251 & 1) == 0
        {
          v610 = ggl::crc32::compute<27ul>("StyledTexturedShaderVertex");
          qword_1ECE3EDB0 = (uint64_t)"StyledTexturedShader";
          unk_1ECE3EDB8 = ggl::styledTexturedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3EDC0 = 1;
          unk_1ECE3EDC8 = &ggl::styledTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3EDD0 = 2;
          unk_1ECE3EDD8 = &ggl::styledTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3EDE0 = 0;
          unk_1ECE3EDE8 = &ggl::styledTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::styledTexturedShaderVertexFunctionDescriptor(void)::ref = v610;
          *(_DWORD *)algn_1ECE3EDAC = 0;
          qword_1ECE3EDF0 = 0;
          unk_1ECE3EDF8 = &ggl::styledTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3EE08 = 0;
          unk_1ECE3EE10 = 0;
          qword_1ECE3EE00 = 0;
        }
        qword_1ECE368C0 = (uint64_t)&ggl::styledTexturedShaderVertexFunctionDescriptor(void)::ref;
        if ((v252 & 1) == 0
        {
          ggl::styledTexturedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("StyledTexturedShaderFragment");
          *(_DWORD *)algn_1ECE3FC44 = 1;
          qword_1ECE3FC48 = (uint64_t)"StyledTexturedShader";
          unk_1ECE3FC50 = 0;
          qword_1ECE3FC58 = 0;
          unk_1ECE3FC60 = &ggl::styledTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3FC68 = 0;
          unk_1ECE3FC70 = &ggl::styledTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3FC78 = 0;
          unk_1ECE3FC80 = &ggl::styledTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3FC88 = 2;
          unk_1ECE3FC90 = &ggl::styledTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3FCA0 = 0;
          unk_1ECE3FCA8 = 0;
          qword_1ECE3FC98 = 2;
        }
        qword_1ECE368C8 = (uint64_t)&ggl::styledTexturedShaderFragmentFunctionDescriptor(void)::ref;
        if ((v253 & 1) == 0
        {
          ggl::screenTexturedQuadShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("ScreenTexturedQuadShaderVertex");
          *(_DWORD *)algn_1ECE3086C = 0;
          qword_1ECE30870 = (uint64_t)"ScreenTexturedQuadShader";
          unk_1ECE30878 = ggl::screenTexturedQuadShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE30880 = 1;
          unk_1ECE30888 = &ggl::screenTexturedQuadShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE30890 = 1;
          unk_1ECE30898 = &ggl::screenTexturedQuadShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE308A0 = 0;
          unk_1ECE308A8 = &ggl::screenTexturedQuadShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE308B0 = 0;
          unk_1ECE308B8 = &ggl::screenTexturedQuadShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE308C8 = 0;
          unk_1ECE308D0 = 0;
          qword_1ECE308C0 = 0;
        }
        qword_1ECE368D0 = (uint64_t)&ggl::screenTexturedQuadShaderVertexFunctionDescriptor(void)::ref;
        if ((v254 & 1) == 0
        {
          v611 = ggl::crc32::compute<33ul>("ScreenTexturedQuadShaderFragment");
          qword_1ECE30AC8 = 0;
          unk_1ECE30AD0 = &ggl::screenTexturedQuadShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE30AD8 = 0;
          unk_1ECE30AE0 = &ggl::screenTexturedQuadShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::screenTexturedQuadShaderFragmentFunctionDescriptor(void)::ref = v611;
          *(_DWORD *)algn_1ECE30AB4 = 1;
          qword_1ECE30AE8 = 0;
          unk_1ECE30AF0 = &ggl::screenTexturedQuadShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE30AB8 = (uint64_t)"ScreenTexturedQuadShader";
          unk_1ECE30AC0 = 0;
          qword_1ECE30AF8 = 1;
          unk_1ECE30B00 = &ggl::screenTexturedQuadShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE30B10 = 0;
          unk_1ECE30B18 = 0;
          qword_1ECE30B08 = 1;
        }
        qword_1ECE368D8 = (uint64_t)&ggl::screenTexturedQuadShaderFragmentFunctionDescriptor(void)::ref;
        if ((v255 & 1) == 0
        {
          v612 = ggl::crc32::compute<30ul>("PoleTexturedBlendShaderVertex");
          qword_1EE5783A0 = (uint64_t)"PoleTexturedBlendShader";
          unk_1EE5783A8 = ggl::poleTexturedBlendShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EE5783B0 = 1;
          unk_1EE5783B8 = &ggl::poleTexturedBlendShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EE5783C0 = 3;
          unk_1EE5783C8 = &ggl::poleTexturedBlendShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EE5783D0 = 0;
          unk_1EE5783D8 = &ggl::poleTexturedBlendShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::poleTexturedBlendShaderVertexFunctionDescriptor(void)::ref = v612;
          *(_DWORD *)algn_1EE57839C = 0;
          qword_1EE5783E0 = 0;
          unk_1EE5783E8 = &ggl::poleTexturedBlendShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EE5783F8 = 0;
          unk_1EE578400 = 0;
          qword_1EE5783F0 = 0;
        }
        qword_1ECE368E0 = (uint64_t)&ggl::poleTexturedBlendShaderVertexFunctionDescriptor(void)::ref;
        if ((v256 & 1) == 0
        {
          v613 = ggl::crc32::compute<32ul>("PoleTexturedBlendShaderFragment");
          qword_1EE578498 = 0;
          unk_1EE5784A0 = &ggl::poleTexturedBlendShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EE5784A8 = 1;
          unk_1EE5784B0 = &ggl::poleTexturedBlendShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::poleTexturedBlendShaderFragmentFunctionDescriptor(void)::ref = v613;
          *(_DWORD *)algn_1EE578484 = 1;
          qword_1EE5784B8 = 0;
          unk_1EE5784C0 = &ggl::poleTexturedBlendShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EE578488 = (uint64_t)"PoleTexturedBlendShader";
          unk_1EE578490 = 0;
          qword_1EE5784C8 = 1;
          unk_1EE5784D0 = &ggl::poleTexturedBlendShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EE5784E0 = 0;
          unk_1EE5784E8 = 0;
          qword_1EE5784D8 = 1;
        }
        qword_1ECE368E8 = (uint64_t)&ggl::poleTexturedBlendShaderFragmentFunctionDescriptor(void)::ref;
        if ((v257 & 1) == 0
        {
          v614 = ggl::crc32::compute<38ul>("TexturedInnerShadowRibbonShaderVertex");
          qword_1ECE45418 = (uint64_t)"TexturedInnerShadowRibbonShader";
          unk_1ECE45420 = ggl::texturedInnerShadowRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE45428 = 1;
          unk_1ECE45430 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE45438 = 4;
          unk_1ECE45440 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE45448 = 0;
          unk_1ECE45450 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::texturedInnerShadowRibbonShaderVertexFunctionDescriptor(void)::ref = v614;
          *(_DWORD *)algn_1ECE45414 = 0;
          qword_1ECE45458 = 0;
          unk_1ECE45460 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE45470 = 0;
          unk_1ECE45478 = 0;
          qword_1ECE45468 = 0;
        }
        qword_1ECE368F0 = (uint64_t)&ggl::texturedInnerShadowRibbonShaderVertexFunctionDescriptor(void)::ref;
        if ((v258 & 1) == 0
        {
          qword_1ECE431E0 = 0;
          unk_1ECE431E8 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE431F0 = 3;
          unk_1ECE431F8 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::texturedInnerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref = 0x17C729238;
          qword_1ECE43200 = 0;
          unk_1ECE43208 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE431D0 = (uint64_t)"TexturedInnerShadowRibbonShader";
          unk_1ECE431D8 = 0;
          qword_1ECE43210 = 3;
          unk_1ECE43218 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE43228 = 0;
          unk_1ECE43230 = 0;
          qword_1ECE43220 = 3;
        }
        qword_1ECE368F8 = (uint64_t)&ggl::texturedInnerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref;
        if ((v259 & 1) == 0
        {
          v615 = ggl::crc32::compute<32ul>("TexturedSolidRibbonShaderVertex");
          qword_1ECE41188 = (uint64_t)"TexturedSolidRibbonShader";
          unk_1ECE41190 = ggl::texturedSolidRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE41198 = 1;
          unk_1ECE411A0 = &ggl::texturedSolidRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE411A8 = 4;
          unk_1ECE411B0 = &ggl::texturedSolidRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE411B8 = 0;
          unk_1ECE411C0 = &ggl::texturedSolidRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::texturedSolidRibbonShaderVertexFunctionDescriptor(void)::ref = v615;
          *(_DWORD *)algn_1ECE41184 = 0;
          qword_1ECE411C8 = 0;
          unk_1ECE411D0 = &ggl::texturedSolidRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE411E0 = 0;
          unk_1ECE411E8 = 0;
          qword_1ECE411D8 = 0;
        }
        qword_1ECE36900 = (uint64_t)&ggl::texturedSolidRibbonShaderVertexFunctionDescriptor(void)::ref;
        if ((v260 & 1) == 0
        {
          ggl::texturedSolidRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("TexturedSolidRibbonShaderFragment");
          *(_DWORD *)algn_1ECE41C6C = 1;
          qword_1ECE41C70 = (uint64_t)"TexturedSolidRibbonShader";
          unk_1ECE41C78 = 0;
          qword_1ECE41C80 = 0;
          unk_1ECE41C88 = &ggl::texturedSolidRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41C90 = 1;
          unk_1ECE41C98 = &ggl::texturedSolidRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE41CA0 = 0;
          unk_1ECE41CA8 = &ggl::texturedSolidRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE41CB0 = 2;
          unk_1ECE41CB8 = &ggl::texturedSolidRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41CC8 = 0;
          unk_1ECE41CD0 = 0;
          qword_1ECE41CC0 = 2;
        }
        qword_1ECE36908 = (uint64_t)&ggl::texturedSolidRibbonShaderFragmentFunctionDescriptor(void)::ref;
        if ((v261 & 1) == 0
        {
          v616 = ggl::crc32::compute<36ul>("TextureWithReverseAlphaShaderVertex");
          qword_1ECE42418 = (uint64_t)"TextureWithReverseAlphaShader";
          unk_1ECE42420 = ggl::textureWithReverseAlphaShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE42428 = 1;
          unk_1ECE42430 = &ggl::textureWithReverseAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42438 = 2;
          unk_1ECE42440 = &ggl::textureWithReverseAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42448 = 0;
          unk_1ECE42450 = &ggl::textureWithReverseAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::textureWithReverseAlphaShaderVertexFunctionDescriptor(void)::ref = v616;
          *(_DWORD *)algn_1ECE42414 = 0;
          qword_1ECE42458 = 0;
          unk_1ECE42460 = &ggl::textureWithReverseAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42470 = 0;
          unk_1ECE42478 = 0;
          qword_1ECE42468 = 0;
        }
        qword_1ECE36910 = (uint64_t)&ggl::textureWithReverseAlphaShaderVertexFunctionDescriptor(void)::ref;
        if ((v262 & 1) == 0
        {
          v617 = ggl::crc32::compute<38ul>("TextureWithReverseAlphaShaderFragment");
          qword_1ECE42C60 = 0;
          unk_1ECE42C68 = &ggl::textureWithReverseAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42C70 = 1;
          unk_1ECE42C78 = &ggl::textureWithReverseAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::textureWithReverseAlphaShaderFragmentFunctionDescriptor(void)::ref = v617;
          *(_DWORD *)algn_1ECE42C4C = 1;
          qword_1ECE42C80 = 0;
          unk_1ECE42C88 = &ggl::textureWithReverseAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE42C50 = (uint64_t)"TextureWithReverseAlphaShader";
          unk_1ECE42C58 = 0;
          qword_1ECE42C90 = 1;
          unk_1ECE42C98 = &ggl::textureWithReverseAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42CA8 = 0;
          unk_1ECE42CB0 = 0;
          qword_1ECE42CA0 = 1;
        }
        qword_1ECE36918 = (uint64_t)&ggl::textureWithReverseAlphaShaderFragmentFunctionDescriptor(void)::ref;
        if ((v263 & 1) == 0
        {
          v618 = ggl::crc32::compute<24ul>("TrafficGlowShaderVertex");
          qword_1ECE3DC10 = (uint64_t)"TrafficGlowShader";
          unk_1ECE3DC18 = ggl::trafficGlowShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3DC20 = 1;
          unk_1ECE3DC28 = &ggl::trafficGlowShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3DC30 = 3;
          unk_1ECE3DC38 = &ggl::trafficGlowShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3DC40 = 0;
          unk_1ECE3DC48 = &ggl::trafficGlowShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::trafficGlowShaderVertexFunctionDescriptor(void)::ref = v618;
          *(_DWORD *)algn_1ECE3DC0C = 0;
          qword_1ECE3DC50 = 0;
          unk_1ECE3DC58 = &ggl::trafficGlowShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3DC68 = 0;
          unk_1ECE3DC70 = 0;
          qword_1ECE3DC60 = 0;
        }
        qword_1ECE36920 = (uint64_t)&ggl::trafficGlowShaderVertexFunctionDescriptor(void)::ref;
        if ((v264 & 1) == 0
        {
          ggl::trafficGlowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("TrafficGlowShaderFragment");
          *(_DWORD *)algn_1ECE3E6D4 = 1;
          qword_1ECE3E6D8 = (uint64_t)"TrafficGlowShader";
          unk_1ECE3E6E0 = 0;
          qword_1ECE3E6E8 = 0;
          unk_1ECE3E6F0 = &ggl::trafficGlowShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3E6F8 = 1;
          unk_1ECE3E700 = &ggl::trafficGlowShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3E708 = 0;
          unk_1ECE3E710 = &ggl::trafficGlowShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3E718 = 0;
          unk_1ECE3E720 = &ggl::trafficGlowShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3E730 = 0;
          unk_1ECE3E738 = 0;
          qword_1ECE3E728 = 0;
        }
        qword_1ECE36928 = (uint64_t)&ggl::trafficGlowShaderFragmentFunctionDescriptor(void)::ref;
        if ((v265 & 1) == 0
        {
          v619 = ggl::crc32::compute<30ul>("TransitLineRibbonShaderVertex");
          qword_1ECE403A8 = (uint64_t)"TransitLineRibbonShader";
          unk_1ECE403B0 = ggl::transitLineRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE403B8 = 1;
          unk_1ECE403C0 = &ggl::transitLineRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE403C8 = 5;
          unk_1ECE403D0 = &ggl::transitLineRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE403D8 = 0;
          unk_1ECE403E0 = &ggl::transitLineRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::transitLineRibbonShaderVertexFunctionDescriptor(void)::ref = v619;
          *(_DWORD *)algn_1ECE403A4 = 0;
          qword_1ECE403E8 = 1;
          unk_1ECE403F0 = &ggl::transitLineRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40400 = 0;
          unk_1ECE40408 = 0;
          qword_1ECE403F8 = 1;
        }
        qword_1ECE36930 = (uint64_t)&ggl::transitLineRibbonShaderVertexFunctionDescriptor(void)::ref;
        if ((v266 & 1) == 0
        {
          v620 = ggl::crc32::compute<32ul>("TransitLineRibbonShaderFragment");
          qword_1ECE41210 = 0;
          unk_1ECE41218 = &ggl::transitLineRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41220 = 1;
          unk_1ECE41228 = &ggl::transitLineRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::transitLineRibbonShaderFragmentFunctionDescriptor(void)::ref = v620;
          *(_DWORD *)algn_1ECE411FC = 1;
          qword_1ECE41230 = 0;
          unk_1ECE41238 = &ggl::transitLineRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE41200 = (uint64_t)"TransitLineRibbonShader";
          unk_1ECE41208 = 0;
          qword_1ECE41240 = 1;
          unk_1ECE41248 = &ggl::transitLineRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41258 = 0;
          unk_1ECE41260 = 0;
          qword_1ECE41250 = 1;
        }
        qword_1ECE36938 = (uint64_t)&ggl::transitLineRibbonShaderFragmentFunctionDescriptor(void)::ref;
        if ((v267 & 1) == 0
        {
          qword_1ECE42DB8 = (uint64_t)"PatternedTransitLineRibbonShader";
          unk_1ECE42DC0 = ggl::patternedTransitLineRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE42DC8 = 1;
          unk_1ECE42DD0 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42DD8 = 6;
          unk_1ECE42DE0 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42DE8 = 0;
          unk_1ECE42DF0 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::patternedTransitLineRibbonShaderVertexFunctionDescriptor(void)::ref = 1746350796;
          qword_1ECE42DF8 = 1;
          unk_1ECE42E00 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42E10 = 0;
          unk_1ECE42E18 = 0;
          qword_1ECE42E08 = 1;
        }
        qword_1ECE36940 = (uint64_t)&ggl::patternedTransitLineRibbonShaderVertexFunctionDescriptor(void)::ref;
        if ((v268 & 1) == 0
        {
          ggl::patternedTransitLineRibbonShaderFragmentFunctionDescriptor(void)::ref = 0x1EFDD56E6;
          qword_1ECE43390 = (uint64_t)"PatternedTransitLineRibbonShader";
          unk_1ECE43398 = 0;
          qword_1ECE433A0 = 0;
          unk_1ECE433A8 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE433B0 = 1;
          unk_1ECE433B8 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE433C0 = 0;
          unk_1ECE433C8 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE433D0 = 2;
          unk_1ECE433D8 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE433E8 = 0;
          unk_1ECE433F0 = 0;
          qword_1ECE433E0 = 2;
        }
        qword_1ECE36948 = (uint64_t)&ggl::patternedTransitLineRibbonShaderFragmentFunctionDescriptor(void)::ref;
        if ((v269 & 1) == 0
        {
          ggl::transitNodeColorizedShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("TransitNodeColorizedShaderVertex");
          *(_DWORD *)algn_1ECE41624 = 0;
          qword_1ECE41628 = (uint64_t)"TransitNodeColorizedShader";
          unk_1ECE41630 = ggl::transitNodeColorizedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE41638 = 1;
          unk_1ECE41640 = &ggl::transitNodeColorizedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41648 = 1;
          unk_1ECE41650 = &ggl::transitNodeColorizedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE41658 = 0;
          unk_1ECE41660 = &ggl::transitNodeColorizedShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE41668 = 0;
          unk_1ECE41670 = &ggl::transitNodeColorizedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41680 = 0;
          unk_1ECE41688 = 0;
          qword_1ECE41678 = 0;
        }
        qword_1ECE36950 = (uint64_t)&ggl::transitNodeColorizedShaderVertexFunctionDescriptor(void)::ref;
        if ((v270 & 1) == 0
        {
          v621 = ggl::crc32::compute<35ul>("TransitNodeColorizedShaderFragment");
          qword_1ECE41EC0 = 0;
          unk_1ECE41EC8 = &ggl::transitNodeColorizedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41ED0 = 0;
          unk_1ECE41ED8 = &ggl::transitNodeColorizedShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::transitNodeColorizedShaderFragmentFunctionDescriptor(void)::ref = v621;
          *(_DWORD *)algn_1ECE41EAC = 1;
          qword_1ECE41EE0 = 0;
          unk_1ECE41EE8 = &ggl::transitNodeColorizedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE41EB0 = (uint64_t)"TransitNodeColorizedShader";
          unk_1ECE41EB8 = 0;
          qword_1ECE41EF0 = 1;
          unk_1ECE41EF8 = &ggl::transitNodeColorizedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41F08 = 0;
          unk_1ECE41F10 = 0;
          qword_1ECE41F00 = 1;
        }
        qword_1ECE36958 = (uint64_t)&ggl::transitNodeColorizedShaderFragmentFunctionDescriptor(void)::ref;
        if ((v271 & 1) == 0
        {
          ggl::transitNodeRGBShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("TransitNodeRGBShaderVertex");
          *(_DWORD *)algn_1ECE3EE1C = 0;
          qword_1ECE3EE20 = (uint64_t)"TransitNodeRGBShader";
          unk_1ECE3EE28 = ggl::transitNodeRGBShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3EE30 = 1;
          unk_1ECE3EE38 = &ggl::transitNodeRGBShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3EE40 = 1;
          unk_1ECE3EE48 = &ggl::transitNodeRGBShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3EE50 = 0;
          unk_1ECE3EE58 = &ggl::transitNodeRGBShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3EE60 = 0;
          unk_1ECE3EE68 = &ggl::transitNodeRGBShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3EE78 = 0;
          unk_1ECE3EE80 = 0;
          qword_1ECE3EE70 = 0;
        }
        qword_1ECE36960 = (uint64_t)&ggl::transitNodeRGBShaderVertexFunctionDescriptor(void)::ref;
        if ((v272 & 1) == 0
        {
          v622 = ggl::crc32::compute<29ul>("TransitNodeRGBShaderFragment");
          qword_1ECE3FDB8 = 0;
          unk_1ECE3FDC0 = &ggl::transitNodeRGBShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3FDC8 = 0;
          unk_1ECE3FDD0 = &ggl::transitNodeRGBShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::transitNodeRGBShaderFragmentFunctionDescriptor(void)::ref = v622;
          *(_DWORD *)algn_1ECE3FDA4 = 1;
          qword_1ECE3FDD8 = 0;
          unk_1ECE3FDE0 = &ggl::transitNodeRGBShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3FDA8 = (uint64_t)"TransitNodeRGBShader";
          unk_1ECE3FDB0 = 0;
          qword_1ECE3FDE8 = 1;
          unk_1ECE3FDF0 = &ggl::transitNodeRGBShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3FE00 = 0;
          unk_1ECE3FE08 = 0;
          qword_1ECE3FDF8 = 1;
        }
        qword_1ECE36968 = (uint64_t)&ggl::transitNodeRGBShaderFragmentFunctionDescriptor(void)::ref;
        if ((v273 & 1) == 0
        {
          v623 = ggl::crc32::compute<22ul>("VenueWallShaderVertex");
          qword_1ECE3D560 = (uint64_t)"VenueWallShader";
          unk_1ECE3D568 = ggl::venueWallShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3D570 = 1;
          unk_1ECE3D578 = &ggl::venueWallShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3D580 = 4;
          unk_1ECE3D588 = &ggl::venueWallShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3D590 = 0;
          unk_1ECE3D598 = &ggl::venueWallShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::venueWallShaderVertexFunctionDescriptor(void)::ref = v623;
          *(_DWORD *)algn_1ECE3D55C = 0;
          qword_1ECE3D5A0 = 0;
          unk_1ECE3D5A8 = &ggl::venueWallShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3D5B8 = 0;
          unk_1ECE3D5C0 = 0;
          qword_1ECE3D5B0 = 0;
        }
        qword_1ECE36970 = (uint64_t)&ggl::venueWallShaderVertexFunctionDescriptor(void)::ref;
        if ((v274 & 1) == 0
        {
          v624 = ggl::crc32::compute<24ul>("VenueWallShaderFragment");
          qword_1ECE3DC98 = 0;
          unk_1ECE3DCA0 = &ggl::venueWallShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3DCA8 = 0;
          unk_1ECE3DCB0 = &ggl::venueWallShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::venueWallShaderFragmentFunctionDescriptor(void)::ref = v624;
          *(_DWORD *)algn_1ECE3DC84 = 1;
          qword_1ECE3DCB8 = 0;
          unk_1ECE3DCC0 = &ggl::venueWallShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3DC88 = (uint64_t)"VenueWallShader";
          unk_1ECE3DC90 = 0;
          qword_1ECE3DCC8 = 1;
          unk_1ECE3DCD0 = &ggl::venueWallShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3DCE0 = 0;
          unk_1ECE3DCE8 = 0;
          qword_1ECE3DCD8 = 1;
        }
        qword_1ECE36978 = (uint64_t)&ggl::venueWallShaderFragmentFunctionDescriptor(void)::ref;
        if ((v275 & 1) == 0
        {
          v625 = ggl::crc32::compute<25ul>("VenueWallTopShaderVertex");
          qword_1ECE3E100 = (uint64_t)"VenueWallTopShader";
          unk_1ECE3E108 = ggl::venueWallTopShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3E110 = 1;
          unk_1ECE3E118 = &ggl::venueWallTopShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3E120 = 3;
          unk_1ECE3E128 = &ggl::venueWallTopShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3E130 = 0;
          unk_1ECE3E138 = &ggl::venueWallTopShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::venueWallTopShaderVertexFunctionDescriptor(void)::ref = v625;
          *(_DWORD *)algn_1ECE3E0FC = 0;
          qword_1ECE3E140 = 0;
          unk_1ECE3E148 = &ggl::venueWallTopShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3E158 = 0;
          unk_1ECE3E160 = 0;
          qword_1ECE3E150 = 0;
        }
        qword_1ECE36980 = (uint64_t)&ggl::venueWallTopShaderVertexFunctionDescriptor(void)::ref;
        if ((v276 & 1) == 0
        {
          v626 = ggl::crc32::compute<27ul>("VenueWallTopShaderFragment");
          qword_1ECE3EEA8 = 0;
          unk_1ECE3EEB0 = &ggl::venueWallTopShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3EEB8 = 0;
          unk_1ECE3EEC0 = &ggl::venueWallTopShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::venueWallTopShaderFragmentFunctionDescriptor(void)::ref = v626;
          *(_DWORD *)algn_1ECE3EE94 = 1;
          qword_1ECE3EEC8 = 0;
          unk_1ECE3EED0 = &ggl::venueWallTopShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3EE98 = (uint64_t)"VenueWallTopShader";
          unk_1ECE3EEA0 = 0;
          qword_1ECE3EED8 = 1;
          unk_1ECE3EEE0 = &ggl::venueWallTopShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3EEF0 = 0;
          unk_1ECE3EEF8 = 0;
          qword_1ECE3EEE8 = 1;
        }
        qword_1ECE36988 = (uint64_t)&ggl::venueWallTopShaderFragmentFunctionDescriptor(void)::ref;
        if ((v277 & 1) == 0
        {
          v627 = ggl::crc32::compute<28ul>("VenueWallEndCapShaderVertex");
          qword_1ECE3F6C0 = (uint64_t)"VenueWallEndCapShader";
          unk_1ECE3F6C8 = ggl::venueWallEndCapShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3F6D0 = 1;
          unk_1ECE3F6D8 = &ggl::venueWallEndCapShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3F6E0 = 4;
          unk_1ECE3F6E8 = &ggl::venueWallEndCapShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3F6F0 = 0;
          unk_1ECE3F6F8 = &ggl::venueWallEndCapShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::venueWallEndCapShaderVertexFunctionDescriptor(void)::ref = v627;
          *(_DWORD *)algn_1ECE3F6BC = 0;
          qword_1ECE3F700 = 0;
          unk_1ECE3F708 = &ggl::venueWallEndCapShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3F718 = 0;
          unk_1ECE3F720 = 0;
          qword_1ECE3F710 = 0;
        }
        qword_1ECE36990 = (uint64_t)&ggl::venueWallEndCapShaderVertexFunctionDescriptor(void)::ref;
        if ((v278 & 1) == 0
        {
          v628 = ggl::crc32::compute<30ul>("VenueWallEndCapShaderFragment");
          qword_1ECE40428 = 0;
          unk_1ECE40430 = &ggl::venueWallEndCapShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE40438 = 0;
          unk_1ECE40440 = &ggl::venueWallEndCapShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::venueWallEndCapShaderFragmentFunctionDescriptor(void)::ref = v628;
          *(_DWORD *)algn_1ECE40414 = 1;
          qword_1ECE40448 = 0;
          unk_1ECE40450 = &ggl::venueWallEndCapShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE40418 = (uint64_t)"VenueWallEndCapShader";
          unk_1ECE40420 = 0;
          qword_1ECE40458 = 1;
          unk_1ECE40460 = &ggl::venueWallEndCapShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE40470 = 0;
          unk_1ECE40478 = 0;
          qword_1ECE40468 = 1;
        }
        qword_1ECE36998 = (uint64_t)&ggl::venueWallEndCapShaderFragmentFunctionDescriptor(void)::ref;
        if ((v279 & 1) == 0
        {
          v629 = ggl::crc32::compute<28ul>("VenueWallShadowShaderVertex");
          qword_1ECE3F738 = (uint64_t)"VenueWallShadowShader";
          unk_1ECE3F740 = ggl::venueWallShadowShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3F748 = 1;
          unk_1ECE3F750 = &ggl::venueWallShadowShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3F758 = 2;
          unk_1ECE3F760 = &ggl::venueWallShadowShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3F768 = 0;
          unk_1ECE3F770 = &ggl::venueWallShadowShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::venueWallShadowShaderVertexFunctionDescriptor(void)::ref = v629;
          *(_DWORD *)algn_1ECE3F734 = 0;
          qword_1ECE3F778 = 0;
          unk_1ECE3F780 = &ggl::venueWallShadowShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3F790 = 0;
          unk_1ECE3F798 = 0;
          qword_1ECE3F788 = 0;
        }
        qword_1ECE369A0 = (uint64_t)&ggl::venueWallShadowShaderVertexFunctionDescriptor(void)::ref;
        if ((v280 & 1) == 0
        {
          ggl::venueWallShadowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("VenueWallShadowShaderFragment");
          *(_DWORD *)algn_1ECE4048C = 1;
          qword_1ECE404A0 = 0;
          unk_1ECE404A8 = &ggl::venueWallShadowShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE404B0 = 0;
          unk_1ECE404B8 = &ggl::venueWallShadowShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE404C0 = 0;
          unk_1ECE404C8 = &ggl::venueWallShadowShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE40490 = (uint64_t)"VenueWallShadowShader";
          unk_1ECE40498 = 0;
          qword_1ECE404D0 = 0;
          unk_1ECE404D8 = &ggl::venueWallShadowShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE404E8 = 0;
          unk_1ECE404F0 = 0;
          qword_1ECE404E0 = 0;
        }
        qword_1ECE369A8 = (uint64_t)&ggl::venueWallShadowShaderFragmentFunctionDescriptor(void)::ref;
        if ((v281 & 1) == 0
        {
          v630 = ggl::crc32::compute<36ul>("HorizontalVenue3DStrokeShaderVertex");
          qword_1ECE421E0 = (uint64_t)"HorizontalVenue3DStrokeShader";
          unk_1ECE421E8 = ggl::horizontalVenue3DStrokeShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE421F0 = 1;
          unk_1ECE421F8 = &ggl::horizontalVenue3DStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42200 = 2;
          unk_1ECE42208 = &ggl::horizontalVenue3DStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42210 = 0;
          unk_1ECE42218 = &ggl::horizontalVenue3DStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::horizontalVenue3DStrokeShaderVertexFunctionDescriptor(void)::ref = v630;
          *(_DWORD *)algn_1ECE421DC = 0;
          qword_1ECE42220 = 0;
          unk_1ECE42228 = &ggl::horizontalVenue3DStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42238 = 0;
          unk_1ECE42240 = 0;
          qword_1ECE42230 = 0;
        }
        qword_1ECE369B0 = (uint64_t)&ggl::horizontalVenue3DStrokeShaderVertexFunctionDescriptor(void)::ref;
        if ((v282 & 1) == 0
        {
          v631 = ggl::crc32::compute<38ul>("HorizontalVenue3DStrokeShaderFragment");
          qword_1ECE42B08 = 0;
          unk_1ECE42B10 = &ggl::horizontalVenue3DStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42B18 = 0;
          unk_1ECE42B20 = &ggl::horizontalVenue3DStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::horizontalVenue3DStrokeShaderFragmentFunctionDescriptor(void)::ref = v631;
          *(_DWORD *)algn_1ECE42AF4 = 1;
          qword_1ECE42B28 = 0;
          unk_1ECE42B30 = &ggl::horizontalVenue3DStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE42AF8 = (uint64_t)"HorizontalVenue3DStrokeShader";
          unk_1ECE42B00 = 0;
          qword_1ECE42B38 = 1;
          unk_1ECE42B40 = &ggl::horizontalVenue3DStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42B50 = 0;
          unk_1ECE42B58 = 0;
          qword_1ECE42B48 = 1;
        }
        qword_1ECE369B8 = (uint64_t)&ggl::horizontalVenue3DStrokeShaderFragmentFunctionDescriptor(void)::ref;
        if ((v283 & 1) == 0
        {
          v632 = ggl::crc32::compute<34ul>("VerticalVenue3DStrokeShaderVertex");
          qword_1ECE41CE0 = (uint64_t)"VerticalVenue3DStrokeShader";
          unk_1ECE41CE8 = ggl::verticalVenue3DStrokeShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE41CF0 = 1;
          unk_1ECE41CF8 = &ggl::verticalVenue3DStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41D00 = 2;
          unk_1ECE41D08 = &ggl::verticalVenue3DStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE41D10 = 0;
          unk_1ECE41D18 = &ggl::verticalVenue3DStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::verticalVenue3DStrokeShaderVertexFunctionDescriptor(void)::ref = v632;
          *(_DWORD *)algn_1ECE41CDC = 0;
          qword_1ECE41D20 = 0;
          unk_1ECE41D28 = &ggl::verticalVenue3DStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41D38 = 0;
          unk_1ECE41D40 = 0;
          qword_1ECE41D30 = 0;
        }
        qword_1ECE369C0 = (uint64_t)&ggl::verticalVenue3DStrokeShaderVertexFunctionDescriptor(void)::ref;
        if ((v284 & 1) == 0
        {
          v633 = ggl::crc32::compute<36ul>("VerticalVenue3DStrokeShaderFragment");
          qword_1ECE42498 = 0;
          unk_1ECE424A0 = &ggl::verticalVenue3DStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE424A8 = 0;
          unk_1ECE424B0 = &ggl::verticalVenue3DStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::verticalVenue3DStrokeShaderFragmentFunctionDescriptor(void)::ref = v633;
          *(_DWORD *)algn_1ECE42484 = 1;
          qword_1ECE424B8 = 0;
          unk_1ECE424C0 = &ggl::verticalVenue3DStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE42488 = (uint64_t)"VerticalVenue3DStrokeShader";
          unk_1ECE42490 = 0;
          qword_1ECE424C8 = 1;
          unk_1ECE424D0 = &ggl::verticalVenue3DStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE424E0 = 0;
          unk_1ECE424E8 = 0;
          qword_1ECE424D8 = 1;
        }
        qword_1ECE369C8 = (uint64_t)&ggl::verticalVenue3DStrokeShaderFragmentFunctionDescriptor(void)::ref;
        if ((v285 & 1) == 0
        {
          qword_1ECE43240 = (uint64_t)"VenueOpenToBelowShadowAlphaShader";
          unk_1ECE43248 = ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE43250 = 1;
          unk_1ECE43258 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43260 = 2;
          unk_1ECE43268 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE43270 = 0;
          unk_1ECE43278 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::venueOpenToBelowShadowAlphaShaderVertexFunctionDescriptor(void)::ref = 1346813876;
          qword_1ECE43280 = 0;
          unk_1ECE43288 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE43298 = 0;
          unk_1ECE432A0 = 0;
          qword_1ECE43290 = 0;
        }
        qword_1ECE369D0 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderVertexFunctionDescriptor(void)::ref;
        if ((v286 & 1) == 0
        {
          qword_1ECE43578 = 0;
          unk_1ECE43580 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43588 = 0;
          unk_1ECE43590 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::venueOpenToBelowShadowAlphaShaderFragmentFunctionDescriptor(void)::ref = 0x19B3262D4;
          qword_1ECE43598 = 0;
          unk_1ECE435A0 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE43568 = (uint64_t)"VenueOpenToBelowShadowAlphaShader";
          unk_1ECE43570 = 0;
          qword_1ECE435A8 = 0;
          unk_1ECE435B0 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE435C0 = 0;
          unk_1ECE435C8 = 0;
          qword_1ECE435B8 = 0;
        }
        qword_1ECE369D8 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderFragmentFunctionDescriptor(void)::ref;
        if ((v287 & 1) == 0
        {
          v634 = ggl::crc32::compute<35ul>("VenueOpenToBelowShadowShaderVertex");
          qword_1ECE41F20 = (uint64_t)"VenueOpenToBelowShadowShader";
          unk_1ECE41F28 = ggl::venueOpenToBelowShadowShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE41F30 = 1;
          unk_1ECE41F38 = &ggl::venueOpenToBelowShadowShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE41F40 = 2;
          unk_1ECE41F48 = &ggl::venueOpenToBelowShadowShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE41F50 = 0;
          unk_1ECE41F58 = &ggl::venueOpenToBelowShadowShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::venueOpenToBelowShadowShaderVertexFunctionDescriptor(void)::ref = v634;
          *(_DWORD *)algn_1ECE41F1C = 0;
          qword_1ECE41F60 = 0;
          unk_1ECE41F68 = &ggl::venueOpenToBelowShadowShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE41F78 = 0;
          unk_1ECE41F80 = 0;
          qword_1ECE41F70 = 0;
        }
        qword_1ECE369E0 = (uint64_t)&ggl::venueOpenToBelowShadowShaderVertexFunctionDescriptor(void)::ref;
        if ((v288 & 1) == 0
        {
          ggl::venueOpenToBelowShadowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("VenueOpenToBelowShadowShaderFragment");
          *(_DWORD *)algn_1ECE42744 = 1;
          qword_1ECE42748 = (uint64_t)"VenueOpenToBelowShadowShader";
          unk_1ECE42750 = 0;
          qword_1ECE42758 = 0;
          unk_1ECE42760 = &ggl::venueOpenToBelowShadowShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42768 = 1;
          unk_1ECE42770 = &ggl::venueOpenToBelowShadowShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42778 = 0;
          unk_1ECE42780 = &ggl::venueOpenToBelowShadowShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE42788 = 0;
          unk_1ECE42790 = &ggl::venueOpenToBelowShadowShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE427A0 = 0;
          unk_1ECE427A8 = 0;
          qword_1ECE42798 = 0;
        }
        qword_1ECE369E8 = (uint64_t)&ggl::venueOpenToBelowShadowShaderFragmentFunctionDescriptor(void)::ref;
        if ((v289 & 1) == 0
        {
          v635 = ggl::crc32::compute<27ul>("DaVinciTrafficShaderVertex");
          qword_1ECE32EC8 = (uint64_t)"DaVinciTrafficShader";
          unk_1ECE32ED0 = ggl::daVinciTrafficShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE32ED8 = 1;
          unk_1ECE32EE0 = &ggl::daVinciTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE32EE8 = 4;
          unk_1ECE32EF0 = &ggl::daVinciTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE32EF8 = 0;
          unk_1ECE32F00 = &ggl::daVinciTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::daVinciTrafficShaderVertexFunctionDescriptor(void)::ref = v635;
          *(_DWORD *)algn_1ECE32EC4 = 0;
          qword_1ECE32F08 = 0;
          unk_1ECE32F10 = &ggl::daVinciTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE32F20 = 0;
          unk_1ECE32F28 = 0;
          qword_1ECE32F18 = 0;
        }
        qword_1ECE369F0 = (uint64_t)&ggl::daVinciTrafficShaderVertexFunctionDescriptor(void)::ref;
        if ((v290 & 1) == 0
        {
          ggl::daVinciTrafficShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("DaVinciTrafficShaderFragment");
          *(_DWORD *)algn_1ECE32FAC = 1;
          qword_1ECE32FC0 = 0;
          unk_1ECE32FC8 = &ggl::daVinciTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE32FD0 = 2;
          unk_1ECE32FD8 = &ggl::daVinciTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE32FE0 = 0;
          unk_1ECE32FE8 = &ggl::daVinciTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE32FB0 = (uint64_t)"DaVinciTrafficShader";
          unk_1ECE32FB8 = 0;
          qword_1ECE32FF0 = 2;
          unk_1ECE32FF8 = &ggl::daVinciTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE33008 = 0;
          unk_1ECE33010 = 0;
          qword_1ECE33000 = 2;
        }
        qword_1ECE369F8 = (uint64_t)&ggl::daVinciTrafficShaderFragmentFunctionDescriptor(void)::ref;
        if ((v291 & 1) == 0
        {
          v636 = ggl::crc32::compute<25ul>("DaVinciDecalShaderVertex");
          qword_1ECE44568 = (uint64_t)"DaVinciDecalShader";
          unk_1ECE44570 = ggl::daVinciDecalShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE44578 = 2;
          unk_1ECE44580 = &ggl::daVinciDecalShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE44588 = 4;
          unk_1ECE44590 = &ggl::daVinciDecalShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE44598 = 1;
          unk_1ECE445A0 = &ggl::daVinciDecalShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::daVinciDecalShaderVertexFunctionDescriptor(void)::ref = v636;
          *(_DWORD *)algn_1ECE44564 = 0;
          qword_1ECE445A8 = 0;
          unk_1ECE445B0 = &ggl::daVinciDecalShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE445C0 = 0;
          unk_1ECE445C8 = 0;
          qword_1ECE445B8 = 0;
        }
        qword_1ECE36A00 = (uint64_t)&ggl::daVinciDecalShaderVertexFunctionDescriptor(void)::ref;
        if ((v292 & 1) == 0
        {
          ggl::daVinciDecalShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("DaVinciDecalShaderFragment");
          *(_DWORD *)algn_1ECE44824 = 1;
          qword_1ECE44828 = (uint64_t)"DaVinciDecalShader";
          unk_1ECE44830 = 0;
          qword_1ECE44838 = 0;
          unk_1ECE44840 = &ggl::daVinciDecalShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE44848 = 5;
          unk_1ECE44850 = &ggl::daVinciDecalShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE44858 = 0;
          unk_1ECE44860 = &ggl::daVinciDecalShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE44868 = 4;
          unk_1ECE44870 = &ggl::daVinciDecalShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE44880 = 0;
          unk_1ECE44888 = 0;
          qword_1ECE44878 = 4;
        }
        qword_1ECE36A08 = (uint64_t)&ggl::daVinciDecalShaderFragmentFunctionDescriptor(void)::ref;
        if ((v293 & 1) == 0
        {
          ggl::daVinciGroundShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("DaVinciGroundShaderVertex");
          *(_DWORD *)algn_1ECE446C4 = 0;
          qword_1ECE446C8 = (uint64_t)"DaVinciGroundShader";
          unk_1ECE446D0 = ggl::daVinciGroundShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE446D8 = 5;
          unk_1ECE446E0 = &ggl::daVinciGroundShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE446E8 = 12;
          unk_1ECE446F0 = &ggl::daVinciGroundShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE446F8 = 4;
          unk_1ECE44700 = &ggl::daVinciGroundShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE44708 = 1;
          unk_1ECE44710 = &ggl::daVinciGroundShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE44720 = 0;
          unk_1ECE44728 = 0;
          qword_1ECE44718 = 1;
        }
        qword_1ECE36A10 = (uint64_t)&ggl::daVinciGroundShaderVertexFunctionDescriptor(void)::ref;
        if ((v294 & 1) == 0
        {
          ggl::daVinciGroundShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("DaVinciGroundShaderFragment");
          *(_DWORD *)algn_1ECE4497C = 1;
          qword_1ECE44980 = (uint64_t)"DaVinciGroundShader";
          unk_1ECE44988 = 0;
          qword_1ECE44990 = 0;
          unk_1ECE44998 = &ggl::daVinciGroundShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE449A0 = 21;
          unk_1ECE449A8 = &ggl::daVinciGroundShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE449B0 = 0;
          unk_1ECE449B8 = &ggl::daVinciGroundShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE449C0 = 12;
          unk_1ECE449C8 = &ggl::daVinciGroundShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE449D8 = 0;
          unk_1ECE449E0 = 0;
          qword_1ECE449D0 = 12;
        }
        qword_1ECE36A18 = (uint64_t)&ggl::daVinciGroundShaderFragmentFunctionDescriptor(void)::ref;
        if ((v295 & 1) == 0
        {
          ggl::daVinciGroundNotCompressedShaderVertexFunctionDescriptor(void)::ref = 2461507574;
          qword_1ECE334A8 = (uint64_t)"DaVinciGroundNotCompressedShader";
          unk_1ECE334B0 = ggl::daVinciGroundNotCompressedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE334B8 = 5;
          unk_1ECE334C0 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE334C8 = 12;
          unk_1ECE334D0 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE334D8 = 4;
          unk_1ECE334E0 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE334E8 = 1;
          unk_1ECE334F0 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE33500 = 0;
          unk_1ECE33508 = 0;
          qword_1ECE334F8 = 1;
        }
        qword_1ECE36A20 = (uint64_t)&ggl::daVinciGroundNotCompressedShaderVertexFunctionDescriptor(void)::ref;
        if ((v296 & 1) == 0
        {
          ggl::daVinciGroundNotCompressedShaderFragmentFunctionDescriptor(void)::ref = 0x16213AD6ALL;
          qword_1ECE33520 = (uint64_t)"DaVinciGroundNotCompressedShader";
          unk_1ECE33528 = 0;
          qword_1ECE33530 = 0;
          unk_1ECE33538 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE33540 = 21;
          unk_1ECE33548 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE33550 = 0;
          unk_1ECE33558 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE33560 = 12;
          unk_1ECE33568 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE33578 = 0;
          unk_1ECE33580 = 0;
          qword_1ECE33570 = 12;
        }
        qword_1ECE36A28 = (uint64_t)&ggl::daVinciGroundNotCompressedShaderFragmentFunctionDescriptor(void)::ref;
        if ((v297 & 1) == 0
        {
          v637 = ggl::crc32::compute<31ul>("DaVinciGroundDepthShaderVertex");
          qword_1ECE33020 = (uint64_t)"DaVinciGroundDepthShader";
          unk_1ECE33028 = ggl::daVinciGroundDepthShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE33030 = 3;
          unk_1ECE33038 = &ggl::daVinciGroundDepthShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE33040 = 4;
          unk_1ECE33048 = &ggl::daVinciGroundDepthShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE33050 = 2;
          unk_1ECE33058 = &ggl::daVinciGroundDepthShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::daVinciGroundDepthShaderVertexFunctionDescriptor(void)::ref = v637;
          *(_DWORD *)algn_1ECE3301C = 0;
          qword_1ECE33060 = 0;
          unk_1ECE33068 = &ggl::daVinciGroundDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE33078 = 0;
          unk_1ECE33080 = 0;
          qword_1ECE33070 = 0;
        }
        qword_1ECE36A30 = (uint64_t)&ggl::daVinciGroundDepthShaderVertexFunctionDescriptor(void)::ref;
        if ((v298 & 1) == 0
        {
          ggl::daVinciGroundDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("DaVinciGroundDepthShaderFragment");
          *(_DWORD *)algn_1ECE331E4 = 1;
          qword_1ECE331E8 = (uint64_t)"DaVinciGroundDepthShader";
          unk_1ECE331F0 = 0;
          qword_1ECE331F8 = 0;
          unk_1ECE33200 = &ggl::daVinciGroundDepthShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE33208 = 1;
          unk_1ECE33210 = &ggl::daVinciGroundDepthShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE33218 = 0;
          unk_1ECE33220 = &ggl::daVinciGroundDepthShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE33228 = 0;
          unk_1ECE33230 = &ggl::daVinciGroundDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE33240 = 0;
          unk_1ECE33248 = 0;
          qword_1ECE33238 = 0;
        }
        qword_1ECE36A38 = (uint64_t)&ggl::daVinciGroundDepthShaderFragmentFunctionDescriptor(void)::ref;
        if ((v299 & 1) == 0
        {
          v638 = ggl::crc32::compute<26ul>("DaVinciRibbonShaderVertex");
          qword_1ECE44740 = (uint64_t)"DaVinciRibbonShader";
          unk_1ECE44748 = ggl::daVinciRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE44750 = 1;
          unk_1ECE44758 = &ggl::daVinciRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE44760 = 8;
          unk_1ECE44768 = &ggl::daVinciRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE44770 = 0;
          unk_1ECE44778 = &ggl::daVinciRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::daVinciRibbonShaderVertexFunctionDescriptor(void)::ref = v638;
          *(_DWORD *)algn_1ECE4473C = 0;
          qword_1ECE44780 = 1;
          unk_1ECE44788 = &ggl::daVinciRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE44798 = 0;
          unk_1ECE447A0 = 0;
          qword_1ECE44790 = 1;
        }
        qword_1ECE36A40 = (uint64_t)&ggl::daVinciRibbonShaderVertexFunctionDescriptor(void)::ref;
        if ((v300 & 1) == 0
        {
          ggl::daVinciRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("DaVinciRibbonShaderFragment");
          *(_DWORD *)algn_1ECE449F4 = 1;
          qword_1ECE449F8 = (uint64_t)"DaVinciRibbonShader";
          unk_1ECE44A00 = 0;
          qword_1ECE44A08 = 0;
          unk_1ECE44A10 = &ggl::daVinciRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE44A18 = 4;
          unk_1ECE44A20 = &ggl::daVinciRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE44A28 = 0;
          unk_1ECE44A30 = &ggl::daVinciRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE44A38 = 3;
          unk_1ECE44A40 = &ggl::daVinciRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE44A50 = 0;
          unk_1ECE44A58 = 0;
          qword_1ECE44A48 = 3;
        }
        qword_1ECE36A48 = (uint64_t)&ggl::daVinciRibbonShaderFragmentFunctionDescriptor(void)::ref;
        if ((v301 & 1) == 0
        {
          v639 = ggl::crc32::compute<35ul>("DaVinciGroundShadowMapShaderVertex");
          qword_1ECE44C40 = (uint64_t)"DaVinciGroundShadowMapShader";
          unk_1ECE44C48 = ggl::daVinciGroundShadowMapShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE44C50 = 3;
          unk_1ECE44C58 = &ggl::daVinciGroundShadowMapShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE44C60 = 6;
          unk_1ECE44C68 = &ggl::daVinciGroundShadowMapShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE44C70 = 2;
          unk_1ECE44C78 = &ggl::daVinciGroundShadowMapShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::daVinciGroundShadowMapShaderVertexFunctionDescriptor(void)::ref = v639;
          *(_DWORD *)algn_1ECE44C3C = 0;
          qword_1ECE44C80 = 0;
          unk_1ECE44C88 = &ggl::daVinciGroundShadowMapShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE44C98 = 0;
          unk_1ECE44CA0 = 0;
          qword_1ECE44C90 = 0;
        }
        qword_1ECE36A50 = (uint64_t)&ggl::daVinciGroundShadowMapShaderVertexFunctionDescriptor(void)::ref;
        if ((v302 & 1) == 0
        {
          ggl::daVinciGroundShadowMapShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("DaVinciGroundShadowMapShaderFragment");
          *(_DWORD *)algn_1ECE44CB4 = 1;
          qword_1ECE44CC8 = 0;
          unk_1ECE44CD0 = &ggl::daVinciGroundShadowMapShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE44CD8 = 2;
          unk_1ECE44CE0 = &ggl::daVinciGroundShadowMapShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE44CE8 = 0;
          unk_1ECE44CF0 = &ggl::daVinciGroundShadowMapShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE44CB8 = (uint64_t)"DaVinciGroundShadowMapShader";
          unk_1ECE44CC0 = 0;
          qword_1ECE44CF8 = 0;
          unk_1ECE44D00 = &ggl::daVinciGroundShadowMapShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE44D10 = 0;
          unk_1ECE44D18 = 0;
          qword_1ECE44D08 = 0;
        }
        qword_1ECE36A58 = (uint64_t)&ggl::daVinciGroundShadowMapShaderFragmentFunctionDescriptor(void)::ref;
        if ((v303 & 1) == 0
        {
          v640 = ggl::crc32::compute<24ul>("LinearDepthShaderVertex");
          qword_1ECE34DE0 = (uint64_t)"LinearDepthShader";
          unk_1ECE34DE8 = ggl::linearDepthShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE34DF0 = 3;
          unk_1ECE34DF8 = &ggl::linearDepthShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE34E00 = 6;
          unk_1ECE34E08 = &ggl::linearDepthShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE34E10 = 2;
          unk_1ECE34E18 = &ggl::linearDepthShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::linearDepthShaderVertexFunctionDescriptor(void)::ref = v640;
          *(_DWORD *)algn_1ECE34DDC = 0;
          qword_1ECE34E20 = 0;
          unk_1ECE34E28 = &ggl::linearDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE34E38 = 0;
          unk_1ECE34E40 = 0;
          qword_1ECE34E30 = 0;
        }
        qword_1ECE36A60 = (uint64_t)&ggl::linearDepthShaderVertexFunctionDescriptor(void)::ref;
        if ((v304 & 1) == 0
        {
          ggl::linearDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("LinearDepthShaderFragment");
          *(_DWORD *)algn_1ECE34E54 = 1;
          qword_1ECE34E68 = 0;
          unk_1ECE34E70 = &ggl::linearDepthShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE34E78 = 2;
          unk_1ECE34E80 = &ggl::linearDepthShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE34E88 = 0;
          unk_1ECE34E90 = &ggl::linearDepthShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE34E58 = (uint64_t)"LinearDepthShader";
          unk_1ECE34E60 = 0;
          qword_1ECE34E98 = 0;
          unk_1ECE34EA0 = &ggl::linearDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE34EB0 = 0;
          unk_1ECE34EB8 = 0;
          qword_1ECE34EA8 = 0;
        }
        qword_1ECE36A68 = (uint64_t)&ggl::linearDepthShaderFragmentFunctionDescriptor(void)::ref;
        if ((v305 & 1) == 0
        {
          v641 = ggl::crc32::compute<30ul>("PackedLinearDepthShaderVertex");
          qword_1ECE30710 = (uint64_t)"PackedLinearDepthShader";
          unk_1ECE30718 = ggl::packedLinearDepthShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE30720 = 3;
          unk_1ECE30728 = &ggl::packedLinearDepthShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE30730 = 5;
          unk_1ECE30738 = &ggl::packedLinearDepthShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE30740 = 2;
          unk_1ECE30748 = &ggl::packedLinearDepthShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::packedLinearDepthShaderVertexFunctionDescriptor(void)::ref = v641;
          *(_DWORD *)algn_1ECE3070C = 0;
          qword_1ECE30750 = 0;
          unk_1ECE30758 = &ggl::packedLinearDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE30768 = 0;
          unk_1ECE30770 = 0;
          qword_1ECE30760 = 0;
        }
        qword_1ECE36A70 = (uint64_t)&ggl::packedLinearDepthShaderVertexFunctionDescriptor(void)::ref;
        if ((v306 & 1) == 0
        {
          ggl::packedLinearDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("PackedLinearDepthShaderFragment");
          *(_DWORD *)algn_1ECE30954 = 1;
          qword_1ECE30968 = 0;
          unk_1ECE30970 = &ggl::packedLinearDepthShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE30978 = 2;
          unk_1ECE30980 = &ggl::packedLinearDepthShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE30988 = 0;
          unk_1ECE30990 = &ggl::packedLinearDepthShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE30958 = (uint64_t)"PackedLinearDepthShader";
          unk_1ECE30960 = 0;
          qword_1ECE30998 = 0;
          unk_1ECE309A0 = &ggl::packedLinearDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE309B0 = 0;
          unk_1ECE309B8 = 0;
          qword_1ECE309A8 = 0;
        }
        qword_1ECE36A78 = (uint64_t)&ggl::packedLinearDepthShaderFragmentFunctionDescriptor(void)::ref;
        if ((v307 & 1) == 0
        {
          v642 = ggl::crc32::compute<35ul>("TexturedAnimatedRibbonShaderVertex");
          qword_1ECE333B8 = (uint64_t)"TexturedAnimatedRibbonShader";
          unk_1ECE333C0 = ggl::texturedAnimatedRibbonShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE333C8 = 1;
          unk_1ECE333D0 = &ggl::texturedAnimatedRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE333D8 = 3;
          unk_1ECE333E0 = &ggl::texturedAnimatedRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE333E8 = 0;
          unk_1ECE333F0 = &ggl::texturedAnimatedRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::texturedAnimatedRibbonShaderVertexFunctionDescriptor(void)::ref = v642;
          *(_DWORD *)algn_1ECE333B4 = 0;
          qword_1ECE333F8 = 0;
          unk_1ECE33400 = &ggl::texturedAnimatedRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE33410 = 0;
          unk_1ECE33418 = 0;
          qword_1ECE33408 = 0;
        }
        qword_1ECE36A80 = (uint64_t)&ggl::texturedAnimatedRibbonShaderVertexFunctionDescriptor(void)::ref;
        if ((v308 & 1) == 0
        {
          ggl::texturedAnimatedRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("TexturedAnimatedRibbonShaderFragment");
          *(_DWORD *)algn_1ECE3342C = 1;
          qword_1ECE33430 = (uint64_t)"TexturedAnimatedRibbonShader";
          unk_1ECE33438 = 0;
          qword_1ECE33440 = 0;
          unk_1ECE33448 = &ggl::texturedAnimatedRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE33450 = 1;
          unk_1ECE33458 = &ggl::texturedAnimatedRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE33460 = 0;
          unk_1ECE33468 = &ggl::texturedAnimatedRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE33470 = 2;
          unk_1ECE33478 = &ggl::texturedAnimatedRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE33488 = 0;
          unk_1ECE33490 = 0;
          qword_1ECE33480 = 2;
        }
        qword_1ECE36A88 = (uint64_t)&ggl::texturedAnimatedRibbonShaderFragmentFunctionDescriptor(void)::ref;
        if ((v309 & 1) == 0
        {
          v643 = ggl::crc32::compute<27ul>("FlyoverOverlayShaderVertex");
          qword_1ECE3EA00 = (uint64_t)"FlyoverOverlayShader";
          unk_1ECE3EA08 = ggl::flyoverOverlayShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE3EA10 = 1;
          unk_1ECE3EA18 = &ggl::flyoverOverlayShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3EA20 = 3;
          unk_1ECE3EA28 = &ggl::flyoverOverlayShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE3EA30 = 0;
          unk_1ECE3EA38 = &ggl::flyoverOverlayShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::flyoverOverlayShaderVertexFunctionDescriptor(void)::ref = v643;
          *(_DWORD *)algn_1ECE3E9FC = 0;
          qword_1ECE3EA40 = 0;
          unk_1ECE3EA48 = &ggl::flyoverOverlayShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3EA58 = 0;
          unk_1ECE3EA60 = 0;
          qword_1ECE3EA50 = 0;
        }
        qword_1ECE36A90 = (uint64_t)&ggl::flyoverOverlayShaderVertexFunctionDescriptor(void)::ref;
        if ((v310 & 1) == 0
        {
          v644 = ggl::crc32::compute<29ul>("FlyoverOverlayShaderFragment");
          qword_1ECE3F898 = 0;
          unk_1ECE3F8A0 = &ggl::flyoverOverlayShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE3F8A8 = 2;
          unk_1ECE3F8B0 = &ggl::flyoverOverlayShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::flyoverOverlayShaderFragmentFunctionDescriptor(void)::ref = v644;
          *(_DWORD *)algn_1ECE3F884 = 1;
          qword_1ECE3F8B8 = 0;
          unk_1ECE3F8C0 = &ggl::flyoverOverlayShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE3F888 = (uint64_t)"FlyoverOverlayShader";
          unk_1ECE3F890 = 0;
          qword_1ECE3F8C8 = 1;
          unk_1ECE3F8D0 = &ggl::flyoverOverlayShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE3F8E0 = 0;
          unk_1ECE3F8E8 = 0;
          qword_1ECE3F8D8 = 1;
        }
        qword_1ECE36A98 = (uint64_t)&ggl::flyoverOverlayShaderFragmentFunctionDescriptor(void)::ref;
        if ((v311 & 1) == 0
        {
          v645 = ggl::crc32::compute<26ul>("GlobeTexturedShaderVertex");
          qword_1EE585658 = (uint64_t)"GlobeTexturedShader";
          unk_1EE585660 = ggl::globeTexturedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EE585668 = 1;
          unk_1EE585670 = &ggl::globeTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EE585678 = 3;
          unk_1EE585680 = &ggl::globeTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EE585688 = 0;
          unk_1EE585690 = &ggl::globeTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::globeTexturedShaderVertexFunctionDescriptor(void)::ref = v645;
          *(_DWORD *)algn_1EE585654 = 0;
          qword_1EE585698 = 1;
          unk_1EE5856A0 = &ggl::globeTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EE5856B0 = 0;
          unk_1EE5856B8 = 0;
          qword_1EE5856A8 = 1;
        }
        qword_1ECE36AA0 = (uint64_t)&ggl::globeTexturedShaderVertexFunctionDescriptor(void)::ref;
        if ((v312 & 1) == 0
        {
          v646 = ggl::crc32::compute<28ul>("GlobeTexturedShaderFragment");
          qword_1EE5856E0 = 0;
          unk_1EE5856E8 = &ggl::globeTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EE5856F0 = 1;
          unk_1EE5856F8 = &ggl::globeTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::globeTexturedShaderFragmentFunctionDescriptor(void)::ref = v646;
          *(_DWORD *)algn_1EE5856CC = 1;
          qword_1EE585700 = 0;
          unk_1EE585708 = &ggl::globeTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EE5856D0 = (uint64_t)"GlobeTexturedShader";
          unk_1EE5856D8 = 0;
          qword_1EE585710 = 1;
          unk_1EE585718 = &ggl::globeTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EE585728 = 0;
          unk_1EE585730 = 0;
          qword_1EE585720 = 1;
        }
        qword_1ECE36AA8 = (uint64_t)&ggl::globeTexturedShaderFragmentFunctionDescriptor(void)::ref;
        if ((v313 & 1) == 0
        {
          ggl::clearTextureComputeShaderFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("ClearTextureComputeShaderKernel");
          *(_DWORD *)algn_1ECE32C0C = 2;
          qword_1ECE32C10 = (uint64_t)"ClearTextureComputeShader";
          unk_1ECE32C18 = 0;
          qword_1ECE32C20 = 0;
          unk_1ECE32C28 = &ggl::clearTextureComputeShaderFunctionConstantMapping(void)::ref;
          qword_1ECE32C30 = 0;
          unk_1ECE32C38 = &ggl::clearTextureComputeShaderFunctionBufferMapping(void)::ref;
          qword_1ECE32C40 = 0;
          unk_1ECE32C48 = &ggl::clearTextureComputeShaderFunctionTextureMapping(void)::ref;
          qword_1ECE32C50 = 1;
          unk_1ECE32C58 = &ggl::clearTextureComputeShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE32C68 = 0;
          unk_1ECE32C70 = 0;
          qword_1ECE32C60 = 1;
        }
        qword_1ECE36AB0 = (uint64_t)&ggl::clearTextureComputeShaderFunctionDescriptor(void)::ref;
        if ((v314 & 1) == 0
        {
          v647 = ggl::crc32::compute<36ul>("DownscaleTextureComputeShaderKernel");
          qword_1ECE32C98 = 0;
          unk_1ECE32CA0 = &ggl::downscaleTextureComputeShaderFunctionConstantMapping(void)::ref;
          qword_1ECE32CA8 = 0;
          unk_1ECE32CB0 = &ggl::downscaleTextureComputeShaderFunctionBufferMapping(void)::ref;
          ggl::downscaleTextureComputeShaderFunctionDescriptor(void)::ref = v647;
          *(_DWORD *)algn_1ECE32C84 = 2;
          qword_1ECE32CB8 = 0;
          unk_1ECE32CC0 = &ggl::downscaleTextureComputeShaderFunctionTextureMapping(void)::ref;
          qword_1ECE32C88 = (uint64_t)"DownscaleTextureComputeShader";
          unk_1ECE32C90 = 0;
          qword_1ECE32CC8 = 2;
          unk_1ECE32CD0 = &ggl::downscaleTextureComputeShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE32CE0 = 0;
          unk_1ECE32CE8 = 0;
          qword_1ECE32CD8 = 2;
        }
        qword_1ECE36AB8 = (uint64_t)&ggl::downscaleTextureComputeShaderFunctionDescriptor(void)::ref;
        if ((v315 & 1) == 0
        {
          ggl::resetTileShaderFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("ResetTileShaderKernel");
          *(_DWORD *)algn_1ECE3037C = 3;
          qword_1ECE30390 = 0;
          unk_1ECE30398 = &ggl::resetTileShaderFunctionConstantMapping(void)::ref;
          qword_1ECE303A0 = 0;
          unk_1ECE303A8 = &ggl::resetTileShaderFunctionBufferMapping(void)::ref;
          qword_1ECE303B0 = 0;
          unk_1ECE303B8 = &ggl::resetTileShaderFunctionTextureMapping(void)::ref;
          qword_1ECE30380 = (uint64_t)"ResetTileShader";
          unk_1ECE30388 = 0;
          qword_1ECE303C0 = 0;
          unk_1ECE303C8 = &ggl::resetTileShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE303D8 = 0;
          unk_1ECE303E0 = 0;
          qword_1ECE303D0 = 0;
        }
        qword_1ECE36AC0 = (uint64_t)&ggl::resetTileShaderFunctionDescriptor(void)::ref;
      }
      qword_1ECE44EC8 = (uint64_t)&StandardLibraryShaderFunctions(void)::desc;
      unk_1ECE44ED0 = 305;
      if ((v8 & 1) == 0)
      {
        if ((_DWORD)v316)
        {
          if ((v317 & 1) == 0)
          {
            if ((_DWORD)v316)
            {
              ggl::AnimatableTextureShader::typedReflection(void)::ref = (uint64_t)"AnimatableTextureShader";
              if ((v648 & 1) == 0
              {
                ggl::animatableTextureShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("AnimatableTextureShaderVertex");
                *(_DWORD *)algn_1ECE6583C = 0;
                qword_1ECE65840 = (uint64_t)"AnimatableTextureShader";
                unk_1ECE65848 = ggl::animatableTextureShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE65850 = 1;
                unk_1ECE65858 = &ggl::animatableTextureShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE65860 = 1;
                unk_1ECE65868 = &ggl::animatableTextureShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE65870 = 0;
                unk_1ECE65878 = &ggl::animatableTextureShaderVertShaderFunctionTextureMapping(void)::ref;
                qword_1ECE65880 = 0;
                unk_1ECE65888 = &ggl::animatableTextureShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE65898 = 0;
                unk_1ECE658A0 = 0;
                qword_1ECE65890 = 0;
              }
              qword_1ECE3AA20 = (uint64_t)&ggl::animatableTextureShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE3AA28 = ggl::crc32::compute<30ul>("AnimatableTextureShaderVertex");
              if ((v649 & 1) == 0
              {
                ggl::animatableTextureShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("AnimatableTextureShaderFragment");
                *(_DWORD *)algn_1ECE45324 = 1;
                qword_1ECE45328 = (uint64_t)"AnimatableTextureShader";
                unk_1ECE45330 = 0;
                qword_1ECE45338 = 0;
                unk_1ECE45340 = &ggl::animatableTextureShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE45348 = 1;
                unk_1ECE45350 = &ggl::animatableTextureShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE45358 = 0;
                unk_1ECE45360 = &ggl::animatableTextureShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE45368 = 2;
                unk_1ECE45370 = &ggl::animatableTextureShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE45380 = 0;
                unk_1ECE45388 = 0;
                qword_1ECE45378 = 2;
              }
              qword_1ECE3AA30 = (uint64_t)&ggl::animatableTextureShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE3AA38 = ggl::crc32::compute<32ul>("AnimatableTextureShaderFragment");
              qword_1ECE3AA40 = (uint64_t)ggl::animatableTextureShaderShaderConstants(void)::ref;
              unk_1ECE3AA48 = 2;
              qword_1ECE3AA50 = (uint64_t)ggl::animatableTextureShaderShaderTextures(void)::ref;
              unk_1ECE3AA58 = 2;
              qword_1ECE3AA60 = (uint64_t)ggl::animatableTextureShaderShaderSamplers(void)::ref;
              unk_1ECE3AA68 = 2;
            }
          }
          StandardLibraryShaders(void)::desc = (uint64_t)&ggl::AnimatableTextureShader::typedReflection(void)::ref;
          ggl::ARMeshShader::typedReflection(v316);
          qword_1ECE36C38 = (uint64_t)&ggl::ARMeshShader::typedReflection(void)::ref;
          ggl::ARDepthMeshShader::typedReflection(v318);
          qword_1ECE36C40 = (uint64_t)&ggl::ARDepthMeshShader::typedReflection(void)::ref;
          ggl::ARGroundShadowShader::typedReflection(v319);
          qword_1ECE36C48 = (uint64_t)&ggl::ARGroundShadowShader::typedReflection(void)::ref;
          ggl::ARCameraImageShader::typedReflection(v320);
          qword_1ECE36C50 = (uint64_t)&ggl::ARCameraImageShader::typedReflection(void)::ref;
          ggl::BuildingFacadeDepthShader::typedReflection(v321);
          qword_1ECE36C58 = (uint64_t)&ggl::BuildingFacadeDepthShader::typedReflection(void)::ref;
          ggl::BuildingFlatShader::typedReflection(v322);
          qword_1ECE36C60 = (uint64_t)&ggl::BuildingFlatShader::typedReflection(void)::ref;
          ggl::BuildingFlatStrokeShader::typedReflection(v323);
          qword_1ECE36C68 = (uint64_t)&ggl::BuildingFlatStrokeShader::typedReflection(void)::ref;
          ggl::BuildingPointyRoofDepthShader::typedReflection(v324);
          qword_1ECE36C70 = (uint64_t)&ggl::BuildingPointyRoofDepthShader::typedReflection(void)::ref;
          ggl::BuildingShadowShader::typedReflection(v325);
          qword_1ECE36C78 = (uint64_t)&ggl::BuildingShadowShader::typedReflection(void)::ref;
          ggl::BuildingTopDepthShader::typedReflection(v326);
          qword_1ECE36C80 = (uint64_t)&ggl::BuildingTopDepthShader::typedReflection(void)::ref;
          ggl::CircleShader::typedReflection(v327);
          qword_1ECE36C88 = (uint64_t)&ggl::CircleShader::typedReflection(void)::ref;
          ggl::CircleMultiStrokeShader::typedReflection(v328);
          qword_1ECE36C90 = (uint64_t)&ggl::CircleMultiStrokeShader::typedReflection(void)::ref;
          ggl::ClutShader::typedReflection(v329);
          qword_1ECE36C98 = (uint64_t)&ggl::ClutShader::typedReflection(void)::ref;
          if ((v331 & 1) == 0)
          {
            if ((_DWORD)v330)
            {
              ggl::ColorGlyphWithNormalHaloShader::typedReflection(void)::ref = (uint64_t)"ColorGlyphWithNormalHaloShader";
              if ((v650 & 1) == 0
              {
                v651 = ggl::crc32::compute<37ul>("ColorGlyphWithNormalHaloShaderVertex");
                qword_1ECE42500 = (uint64_t)"ColorGlyphWithNormalHaloShader";
                unk_1ECE42508 = ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE42510 = 1;
                unk_1ECE42518 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE42520 = 3;
                unk_1ECE42528 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE42530 = 0;
                unk_1ECE42538 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::colorGlyphWithNormalHaloShaderVertexFunctionDescriptor(void)::ref = v651;
                *(_DWORD *)algn_1ECE424FC = 0;
                qword_1ECE42540 = 1;
                unk_1ECE42548 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE42558 = 0;
                unk_1ECE42560 = 0;
                qword_1ECE42550 = 1;
              }
              qword_1ECE3B990 = (uint64_t)&ggl::colorGlyphWithNormalHaloShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE3B998 = ggl::crc32::compute<37ul>("ColorGlyphWithNormalHaloShaderVertex");
              if ((v652 & 1) == 0
              {
                ggl::colorGlyphWithNormalHaloShaderFragmentFunctionDescriptor(void)::ref = 0x101385EE6;
                qword_1ECE42CC8 = (uint64_t)"ColorGlyphWithNormalHaloShader";
                unk_1ECE42CD0 = 0;
                qword_1ECE42CD8 = 0;
                unk_1ECE42CE0 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE42CE8 = 2;
                unk_1ECE42CF0 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE42CF8 = 0;
                unk_1ECE42D00 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE42D08 = 1;
                unk_1ECE42D10 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE42D20 = 0;
                unk_1ECE42D28 = 0;
                qword_1ECE42D18 = 1;
              }
              qword_1ECE3B9A0 = (uint64_t)&ggl::colorGlyphWithNormalHaloShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE3B9A8 = 20471526;
              qword_1ECE3B9B0 = (uint64_t)ggl::colorGlyphWithNormalHaloShaderShaderConstants(void)::ref;
              unk_1ECE3B9B8 = 5;
              qword_1ECE3B9C0 = (uint64_t)ggl::colorGlyphWithNormalHaloShaderShaderTextures(void)::ref;
              unk_1ECE3B9C8 = 2;
              qword_1ECE3B9D0 = (uint64_t)ggl::colorGlyphWithNormalHaloShaderShaderSamplers(void)::ref;
              unk_1ECE3B9D8 = 2;
            }
          }
          qword_1ECE36CA0 = (uint64_t)&ggl::ColorGlyphWithNormalHaloShader::typedReflection(void)::ref;
          ggl::InstancedDebugShader::typedReflection(v330);
          qword_1ECE36CA8 = (uint64_t)&ggl::InstancedDebugShader::typedReflection(void)::ref;
          ggl::DebugShader::typedReflection(v332);
          qword_1ECE36CB0 = (uint64_t)&ggl::DebugShader::typedReflection(void)::ref;
          ggl::DebugExtendedShader::typedReflection(v333);
          qword_1ECE36CB8 = (uint64_t)&ggl::DebugExtendedShader::typedReflection(void)::ref;
          ggl::DebugLineShader::typedReflection(v334);
          qword_1ECE36CC0 = (uint64_t)&ggl::DebugLineShader::typedReflection(void)::ref;
          ggl::HillshadeShader::typedReflection(v335);
          qword_1ECE36CC8 = (uint64_t)&ggl::HillshadeShader::typedReflection(void)::ref;
          ggl::DiffuseBuildingShader::typedReflection(v336);
          qword_1ECE36CD0 = (uint64_t)&ggl::DiffuseBuildingShader::typedReflection(void)::ref;
          if ((v338 & 1) == 0)
          {
            if ((_DWORD)v337)
            {
              ggl::DiffuseBuildingPointyRoofShader::typedReflection(void)::ref = (uint64_t)"DiffuseBuildingPointyRoofShader";
              if ((v653 & 1) == 0
              {
                v654 = ggl::crc32::compute<38ul>("DiffuseBuildingPointyRoofShaderVertex");
                qword_1ECE42838 = (uint64_t)"DiffuseBuildingPointyRoofShader";
                unk_1ECE42840 = ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE42848 = 1;
                unk_1ECE42850 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE42858 = 6;
                unk_1ECE42860 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE42868 = 0;
                unk_1ECE42870 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::diffuseBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref = v654;
                *(_DWORD *)algn_1ECE42834 = 0;
                qword_1ECE42878 = 0;
                unk_1ECE42880 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE42890 = 0;
                unk_1ECE42898 = 0;
                qword_1ECE42888 = 0;
              }
              qword_1ECE3BAA8 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE3BAB0 = ggl::crc32::compute<38ul>("DiffuseBuildingPointyRoofShaderVertex");
              if ((v655 & 1) == 0
              {
                ggl::diffuseBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref = 0x19F819965;
                qword_1ECE42F10 = (uint64_t)"DiffuseBuildingPointyRoofShader";
                unk_1ECE42F18 = 0;
                qword_1ECE42F20 = 0;
                unk_1ECE42F28 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE42F30 = 3;
                unk_1ECE42F38 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE42F40 = 0;
                unk_1ECE42F48 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE42F50 = 0;
                unk_1ECE42F58 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE42F68 = 0;
                unk_1ECE42F70 = 0;
                qword_1ECE42F60 = 0;
              }
              qword_1ECE3BAB8 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE3BAC0 = -1618896539;
              qword_1ECE3BAC8 = (uint64_t)ggl::diffuseBuildingPointyRoofShaderShaderConstants(void)::ref;
              unk_1ECE3BAD0 = 7;
              qword_1ECE3BAD8 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderShaderTextures(void)::ref;
              unk_1ECE3BAE0 = 0;
              qword_1ECE3BAE8 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderShaderSamplers(void)::ref;
              unk_1ECE3BAF0 = 0;
            }
          }
          qword_1ECE36CD8 = (uint64_t)&ggl::DiffuseBuildingPointyRoofShader::typedReflection(void)::ref;
          ggl::DiffuseBuildingTopShader::typedReflection(v337);
          qword_1ECE36CE0 = (uint64_t)&ggl::DiffuseBuildingTopShader::typedReflection(void)::ref;
          ggl::DiffuseLandmarkShader::typedReflection(v339);
          qword_1ECE36CE8 = (uint64_t)&ggl::DiffuseLandmarkShader::typedReflection(void)::ref;
          ggl::ElevatedFillColorShader::typedReflection(v340);
          qword_1ECE36CF0 = (uint64_t)&ggl::ElevatedFillColorShader::typedReflection(void)::ref;
          if ((v342 & 1) == 0)
          {
            if ((_DWORD)v341)
            {
              ggl::ElevatedFillNoWidthClipColorShader::typedReflection(void)::ref = (uint64_t)"ElevatedFillNoWidthClipColorShader";
              if ((v656 & 1) == 0
              {
                qword_1ECE35938 = (uint64_t)"ElevatedFillNoWidthClipColorShader";
                unk_1ECE35940 = ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE35948 = 1;
                unk_1ECE35950 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE35958 = 4;
                unk_1ECE35960 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE35968 = 0;
                unk_1ECE35970 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::elevatedFillNoWidthClipColorShaderVertexFunctionDescriptor(void)::ref = 2431374733;
                qword_1ECE35978 = 0;
                unk_1ECE35980 = &ggl::elevatedFillNoWidthClipColorShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE35990 = 0;
                unk_1ECE35998 = 0;
                qword_1ECE35988 = 0;
              }
              qword_1ECE349E8 = (uint64_t)&ggl::elevatedFillNoWidthClipColorShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE349F0 = -1863592563;
              if ((v657 & 1) == 0
              {
                ggl::elevatedFillNoWidthClipColorShaderFragmentFunctionDescriptor(void)::ref = 0x138D1A785;
                qword_1ECE35BF0 = (uint64_t)"ElevatedFillNoWidthClipColorShader";
                unk_1ECE35BF8 = 0;
                qword_1ECE35C00 = 0;
                unk_1ECE35C08 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE35C10 = 2;
                unk_1ECE35C18 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE35C20 = 0;
                unk_1ECE35C28 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE35C30 = 0;
                unk_1ECE35C38 = &ggl::elevatedFillNoWidthClipColorShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE35C48 = 0;
                unk_1ECE35C50 = 0;
                qword_1ECE35C40 = 0;
              }
              qword_1ECE349F8 = (uint64_t)&ggl::elevatedFillNoWidthClipColorShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE34A00 = 953264005;
              qword_1ECE34A08 = (uint64_t)ggl::elevatedFillNoWidthClipColorShaderShaderConstants(void)::ref;
              unk_1ECE34A10 = 4;
              qword_1ECE34A18 = (uint64_t)&ggl::elevatedFillNoWidthClipColorShaderShaderTextures(void)::ref;
              unk_1ECE34A20 = 0;
              qword_1ECE34A28 = (uint64_t)&ggl::elevatedFillNoWidthClipColorShaderShaderSamplers(void)::ref;
              unk_1ECE34A30 = 0;
            }
          }
          qword_1ECE36CF8 = (uint64_t)&ggl::ElevatedFillNoWidthClipColorShader::typedReflection(void)::ref;
          ggl::ElevatedStrokeColorShader::typedReflection(v341);
          qword_1ECE36D00 = (uint64_t)&ggl::ElevatedStrokeColorShader::typedReflection(void)::ref;
          if ((v344 & 1) == 0)
          {
            if ((_DWORD)v343)
            {
              ggl::ElevatedStrokeColorWithDistanceShader::typedReflection(void)::ref = (uint64_t)"ElevatedStrokeColorWithDistanceShader";
              if ((v658 & 1) == 0
              {
                qword_1ECE35CE0 = (uint64_t)"ElevatedStrokeColorWithDistanceShader";
                unk_1ECE35CE8 = ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE35CF0 = 1;
                unk_1ECE35CF8 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE35D00 = 4;
                unk_1ECE35D08 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE35D10 = 0;
                unk_1ECE35D18 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::elevatedStrokeColorWithDistanceShaderVertexFunctionDescriptor(void)::ref = 1731713468;
                qword_1ECE35D20 = 0;
                unk_1ECE35D28 = &ggl::elevatedStrokeColorWithDistanceShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE35D38 = 0;
                unk_1ECE35D40 = 0;
                qword_1ECE35D30 = 0;
              }
              qword_1ECE34B60 = (uint64_t)&ggl::elevatedStrokeColorWithDistanceShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE34B68 = 1731713468;
              if ((v659 & 1) == 0
              {
                ggl::elevatedStrokeColorWithDistanceShaderFragmentFunctionDescriptor(void)::ref = 0x1F73A1BC0;
                qword_1ECE35F18 = (uint64_t)"ElevatedStrokeColorWithDistanceShader";
                unk_1ECE35F20 = 0;
                qword_1ECE35F28 = 0;
                unk_1ECE35F30 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE35F38 = 3;
                unk_1ECE35F40 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE35F48 = 0;
                unk_1ECE35F50 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE35F58 = 1;
                unk_1ECE35F60 = &ggl::elevatedStrokeColorWithDistanceShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE35F70 = 0;
                unk_1ECE35F78 = 0;
                qword_1ECE35F68 = 1;
              }
              qword_1ECE34B70 = (uint64_t)&ggl::elevatedStrokeColorWithDistanceShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE34B78 = -147186752;
              qword_1ECE34B80 = (uint64_t)ggl::elevatedStrokeColorWithDistanceShaderShaderConstants(void)::ref;
              unk_1ECE34B88 = 5;
              qword_1ECE34B90 = (uint64_t)ggl::elevatedStrokeColorWithDistanceShaderShaderTextures(void)::ref;
              unk_1ECE34B98 = 1;
              qword_1ECE34BA0 = (uint64_t)&ggl::elevatedStrokeColorWithDistanceShaderShaderSamplers(void)::ref;
              unk_1ECE34BA8 = 1;
            }
          }
          qword_1ECE36D08 = (uint64_t)&ggl::ElevatedStrokeColorWithDistanceShader::typedReflection(void)::ref;
          ggl::FogShader::typedReflection(v343);
          qword_1ECE36D10 = (uint64_t)&ggl::FogShader::typedReflection(void)::ref;
          ggl::FoggedDiffuseBuildingShader::typedReflection(v345);
          qword_1ECE36D18 = (uint64_t)&ggl::FoggedDiffuseBuildingShader::typedReflection(void)::ref;
          if ((v347 & 1) == 0)
          {
            if ((_DWORD)v346)
            {
              ggl::FoggedDiffuseBuildingTopShader::typedReflection(void)::ref = (uint64_t)"FoggedDiffuseBuildingTopShader";
              if ((v660 & 1) == 0
              {
                v661 = ggl::crc32::compute<37ul>("FoggedDiffuseBuildingTopShaderVertex");
                qword_1ECE42578 = (uint64_t)"FoggedDiffuseBuildingTopShader";
                unk_1ECE42580 = ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE42588 = 1;
                unk_1ECE42590 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE42598 = 6;
                unk_1ECE425A0 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE425A8 = 0;
                unk_1ECE425B0 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::foggedDiffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref = v661;
                *(_DWORD *)algn_1ECE42574 = 0;
                qword_1ECE425B8 = 0;
                unk_1ECE425C0 = &ggl::foggedDiffuseBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE425D0 = 0;
                unk_1ECE425D8 = 0;
                qword_1ECE425C8 = 0;
              }
              qword_1ECE3B9E8 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE3B9F0 = ggl::crc32::compute<37ul>("FoggedDiffuseBuildingTopShaderVertex");
              if ((v662 & 1) == 0
              {
                ggl::foggedDiffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref = 0x1AC1081B8;
                qword_1ECE42D40 = (uint64_t)"FoggedDiffuseBuildingTopShader";
                unk_1ECE42D48 = 0;
                qword_1ECE42D50 = 0;
                unk_1ECE42D58 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE42D60 = 3;
                unk_1ECE42D68 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE42D70 = 0;
                unk_1ECE42D78 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE42D80 = 0;
                unk_1ECE42D88 = &ggl::foggedDiffuseBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE42D98 = 0;
                unk_1ECE42DA0 = 0;
                qword_1ECE42D90 = 0;
              }
              qword_1ECE3B9F8 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE3BA00 = -1408204360;
              qword_1ECE3BA08 = (uint64_t)ggl::foggedDiffuseBuildingTopShaderShaderConstants(void)::ref;
              unk_1ECE3BA10 = 7;
              qword_1ECE3BA18 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderShaderTextures(void)::ref;
              unk_1ECE3BA20 = 0;
              qword_1ECE3BA28 = (uint64_t)&ggl::foggedDiffuseBuildingTopShaderShaderSamplers(void)::ref;
              unk_1ECE3BA30 = 0;
            }
          }
          qword_1ECE36D20 = (uint64_t)&ggl::FoggedDiffuseBuildingTopShader::typedReflection(void)::ref;
          ggl::FoggedDiffuseLandmarkShader::typedReflection(v346);
          qword_1ECE36D28 = (uint64_t)&ggl::FoggedDiffuseLandmarkShader::typedReflection(void)::ref;
          ggl::FoggedSpecularBuildingShader::typedReflection(v348);
          qword_1ECE36D30 = (uint64_t)&ggl::FoggedSpecularBuildingShader::typedReflection(void)::ref;
          if ((v350 & 1) == 0)
          {
            if ((_DWORD)v349)
            {
              ggl::FoggedSpecularBuildingTopShader::typedReflection(void)::ref = (uint64_t)"FoggedSpecularBuildingTopShader";
              if ((v663 & 1) == 0
              {
                v664 = ggl::crc32::compute<38ul>("FoggedSpecularBuildingTopShaderVertex");
                qword_1ECE42A10 = (uint64_t)"FoggedSpecularBuildingTopShader";
                unk_1ECE42A18 = ggl::foggedSpecularBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE42A20 = 1;
                unk_1ECE42A28 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE42A30 = 6;
                unk_1ECE42A38 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE42A40 = 0;
                unk_1ECE42A48 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::foggedSpecularBuildingTopShaderVertexFunctionDescriptor(void)::ref = v664;
                *(_DWORD *)algn_1ECE42A0C = 0;
                qword_1ECE42A50 = 0;
                unk_1ECE42A58 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE42A68 = 0;
                unk_1ECE42A70 = 0;
                qword_1ECE42A60 = 0;
              }
              qword_1ECE3BBB0 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE3BBB8 = ggl::crc32::compute<38ul>("FoggedSpecularBuildingTopShaderVertex");
              if ((v665 & 1) == 0
              {
                ggl::foggedSpecularBuildingTopShaderFragmentFunctionDescriptor(void)::ref = 0x113B913CCLL;
                qword_1ECE430E8 = (uint64_t)"FoggedSpecularBuildingTopShader";
                unk_1ECE430F0 = 0;
                qword_1ECE430F8 = 0;
                unk_1ECE43100 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE43108 = 4;
                unk_1ECE43110 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE43118 = 0;
                unk_1ECE43120 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE43128 = 0;
                unk_1ECE43130 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE43140 = 0;
                unk_1ECE43148 = 0;
                qword_1ECE43138 = 0;
              }
              qword_1ECE3BBC0 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE3BBC8 = 330896332;
              qword_1ECE3BBD0 = (uint64_t)ggl::foggedSpecularBuildingTopShaderShaderConstants(void)::ref;
              unk_1ECE3BBD8 = 7;
              qword_1ECE3BBE0 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderShaderTextures(void)::ref;
              unk_1ECE3BBE8 = 0;
              qword_1ECE3BBF0 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderShaderSamplers(void)::ref;
              unk_1ECE3BBF8 = 0;
            }
          }
          qword_1ECE36D38 = (uint64_t)&ggl::FoggedSpecularBuildingTopShader::typedReflection(void)::ref;
          ggl::FoggedSpecularLandmarkShader::typedReflection(v349);
          qword_1ECE36D40 = (uint64_t)&ggl::FoggedSpecularLandmarkShader::typedReflection(void)::ref;
          ggl::GlobeAtmosphereShader::typedReflection(v351);
          qword_1ECE36D48 = (uint64_t)&ggl::GlobeAtmosphereShader::typedReflection(void)::ref;
          ggl::GlobeStarsShader::typedReflection(v352);
          qword_1ECE36D50 = (uint64_t)&ggl::GlobeStarsShader::typedReflection(void)::ref;
          ggl::GlowShader::typedReflection(v353);
          qword_1ECE36D58 = (uint64_t)&ggl::GlowShader::typedReflection(void)::ref;
          ggl::GlowAlphaShader::typedReflection(v354);
          qword_1ECE36D60 = (uint64_t)&ggl::GlowAlphaShader::typedReflection(void)::ref;
          ggl::Glyph3dShader::typedReflection(v355);
          qword_1ECE36D68 = (uint64_t)&ggl::Glyph3dShader::typedReflection(void)::ref;
          ggl::Glyph3dLowPrecisionShader::typedReflection(v356);
          qword_1ECE36D70 = (uint64_t)&ggl::Glyph3dLowPrecisionShader::typedReflection(void)::ref;
          ggl::Glyph3dLowPrecisionHaloShader::typedReflection(v357);
          qword_1ECE36D78 = (uint64_t)&ggl::Glyph3dLowPrecisionHaloShader::typedReflection(void)::ref;
          ggl::Glyph3dRaymarchShader::typedReflection(v358);
          qword_1ECE36D80 = (uint64_t)&ggl::Glyph3dRaymarchShader::typedReflection(void)::ref;
          ggl::GlyphWithNormalHaloShader::typedReflection(v359);
          qword_1ECE36D88 = (uint64_t)&ggl::GlyphWithNormalHaloShader::typedReflection(void)::ref;
          if ((v361 & 1) == 0)
          {
            if ((_DWORD)v360)
            {
              ggl::GradientPolylineOverlayFillShader::typedReflection(void)::ref = (uint64_t)"GradientPolylineOverlayFillShader";
              if ((v666 & 1) == 0
              {
                qword_1ECE43160 = (uint64_t)"GradientPolylineOverlayFillShader";
                unk_1ECE43168 = ggl::gradientPolylineOverlayFillShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE43170 = 1;
                unk_1ECE43178 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE43180 = 3;
                unk_1ECE43188 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE43190 = 0;
                unk_1ECE43198 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::gradientPolylineOverlayFillShaderVertexFunctionDescriptor(void)::ref = 878884475;
                qword_1ECE431A0 = 0;
                unk_1ECE431A8 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE431B8 = 0;
                unk_1ECE431C0 = 0;
                qword_1ECE431B0 = 0;
              }
              qword_1ECE3BD70 = (uint64_t)&ggl::gradientPolylineOverlayFillShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE3BD78 = 878884475;
              if ((v667 & 1) == 0
              {
                ggl::gradientPolylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref = 0x1AE8C75D5;
                qword_1ECE434F8 = (uint64_t)"GradientPolylineOverlayFillShader";
                unk_1ECE43500 = 0;
                qword_1ECE43508 = 0;
                unk_1ECE43510 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE43518 = 2;
                unk_1ECE43520 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE43528 = 0;
                unk_1ECE43530 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE43538 = 1;
                unk_1ECE43540 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE43550 = 0;
                unk_1ECE43558 = 0;
                qword_1ECE43548 = 1;
              }
              qword_1ECE3BD80 = (uint64_t)&ggl::gradientPolylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE3BD88 = -1366526507;
              qword_1ECE3BD90 = (uint64_t)ggl::gradientPolylineOverlayFillShaderShaderConstants(void)::ref;
              unk_1ECE3BD98 = 4;
              qword_1ECE3BDA0 = (uint64_t)ggl::gradientPolylineOverlayFillShaderShaderTextures(void)::ref;
              unk_1ECE3BDA8 = 1;
              qword_1ECE3BDB0 = (uint64_t)ggl::gradientPolylineOverlayFillShaderShaderSamplers(void)::ref;
              unk_1ECE3BDB8 = 1;
            }
          }
          qword_1ECE36D90 = (uint64_t)&ggl::GradientPolylineOverlayFillShader::typedReflection(void)::ref;
          if ((v362 & 1) == 0)
          {
            if ((_DWORD)v360)
            {
              ggl::GradientPolylineOverlayAlphaShader::typedReflection(void)::ref = (uint64_t)"GradientPolylineOverlayAlphaShader";
              if ((v668 & 1) == 0
              {
                qword_1ECE43320 = (uint64_t)"GradientPolylineOverlayAlphaShader";
                unk_1ECE43328 = ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE43330 = 1;
                unk_1ECE43338 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE43340 = 3;
                unk_1ECE43348 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE43350 = 0;
                unk_1ECE43358 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::gradientPolylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref = 1527713323;
                qword_1ECE43360 = 0;
                unk_1ECE43368 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE43378 = 0;
                unk_1ECE43380 = 0;
                qword_1ECE43370 = 0;
              }
              qword_1ECE3BE90 = (uint64_t)&ggl::gradientPolylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE3BE98 = 1527713323;
              if ((v669 & 1) == 0
              {
                ggl::gradientPolylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref = 0x1D18D7C52;
                qword_1ECE43648 = (uint64_t)"GradientPolylineOverlayAlphaShader";
                unk_1ECE43650 = 0;
                qword_1ECE43658 = 0;
                unk_1ECE43660 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE43668 = 2;
                unk_1ECE43670 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE43678 = 0;
                unk_1ECE43680 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE43688 = 1;
                unk_1ECE43690 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE436A0 = 0;
                unk_1ECE436A8 = 0;
                qword_1ECE43698 = 1;
              }
              qword_1ECE3BEA0 = (uint64_t)&ggl::gradientPolylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE3BEA8 = -779256750;
              qword_1ECE3BEB0 = (uint64_t)ggl::gradientPolylineOverlayAlphaShaderShaderConstants(void)::ref;
              unk_1ECE3BEB8 = 4;
              qword_1ECE3BEC0 = (uint64_t)ggl::gradientPolylineOverlayAlphaShaderShaderTextures(void)::ref;
              unk_1ECE3BEC8 = 1;
              qword_1ECE3BED0 = (uint64_t)ggl::gradientPolylineOverlayAlphaShaderShaderSamplers(void)::ref;
              unk_1ECE3BED8 = 1;
            }
          }
          qword_1ECE36D98 = (uint64_t)&ggl::GradientPolylineOverlayAlphaShader::typedReflection(void)::ref;
          if ((v363 & 1) == 0)
          {
            if ((_DWORD)v360)
            {
              ggl::GradientPolylineOverlayAlphaFillShader::typedReflection(void)::ref = (uint64_t)"GradientPolylineOverlayAlphaFillShader";
              if ((v670 & 1) == 0
              {
                qword_1ECE436C0 = (uint64_t)"GradientPolylineOverlayAlphaFillShader";
                unk_1ECE436C8 = ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE436D0 = 1;
                unk_1ECE436D8 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE436E0 = 3;
                unk_1ECE436E8 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE436F0 = 0;
                unk_1ECE436F8 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::gradientPolylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref = 503820842;
                qword_1ECE43700 = 0;
                unk_1ECE43708 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE43718 = 0;
                unk_1ECE43720 = 0;
                qword_1ECE43710 = 0;
              }
              qword_1ECE3BEF0 = (uint64_t)&ggl::gradientPolylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE3BEF8 = 503820842;
              if ((v671 & 1) == 0
              {
                ggl::gradientPolylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref = 0x10A41F7BCLL;
                qword_1ECE43738 = (uint64_t)"GradientPolylineOverlayAlphaFillShader";
                unk_1ECE43740 = 0;
                qword_1ECE43748 = 0;
                unk_1ECE43750 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE43758 = 2;
                unk_1ECE43760 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE43768 = 0;
                unk_1ECE43770 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE43778 = 1;
                unk_1ECE43780 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE43790 = 0;
                unk_1ECE43798 = 0;
                qword_1ECE43788 = 1;
              }
              qword_1ECE3BF00 = (uint64_t)&ggl::gradientPolylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE3BF08 = 172095420;
              qword_1ECE3BF10 = (uint64_t)ggl::gradientPolylineOverlayAlphaFillShaderShaderConstants(void)::ref;
              unk_1ECE3BF18 = 4;
              qword_1ECE3BF20 = (uint64_t)ggl::gradientPolylineOverlayAlphaFillShaderShaderTextures(void)::ref;
              unk_1ECE3BF28 = 1;
              qword_1ECE3BF30 = (uint64_t)&ggl::gradientPolylineOverlayAlphaFillShaderShaderSamplers(void)::ref;
              unk_1ECE3BF38 = 1;
            }
          }
          qword_1ECE36DA0 = (uint64_t)&ggl::GradientPolylineOverlayAlphaFillShader::typedReflection(void)::ref;
          ggl::GridShader::typedReflection(v360);
          qword_1ECE36DA8 = (uint64_t)&ggl::GridShader::typedReflection(void)::ref;
          ggl::GridUVShader::typedReflection(v364);
          qword_1ECE36DB0 = (uint64_t)&ggl::GridUVShader::typedReflection(void)::ref;
          ggl::IconShader::typedReflection(v365);
          qword_1ECE36DB8 = (uint64_t)&ggl::IconShader::typedReflection(void)::ref;
          ggl::MaskedIconShader::typedReflection(v366);
          qword_1ECE36DC0 = (uint64_t)&ggl::MaskedIconShader::typedReflection(void)::ref;
          ggl::WaypointShader::typedReflection(v367);
          qword_1ECE36DC8 = (uint64_t)&ggl::WaypointShader::typedReflection(void)::ref;
          ggl::ShadowShader::typedReflection(v368);
          qword_1ECE36DD0 = (uint64_t)&ggl::ShadowShader::typedReflection(void)::ref;
          ggl::ImageCopyShader::typedReflection(v369);
          qword_1ECE36DD8 = (uint64_t)&ggl::ImageCopyShader::typedReflection(void)::ref;
          ggl::LandmarkDepthShader::typedReflection(v370);
          qword_1ECE36DE0 = (uint64_t)&ggl::LandmarkDepthShader::typedReflection(void)::ref;
          ggl::LandmarkFlatShader::typedReflection(v371);
          qword_1ECE36DE8 = (uint64_t)&ggl::LandmarkFlatShader::typedReflection(void)::ref;
          ggl::LineShader::typedReflection(v372);
          qword_1ECE36DF0 = (uint64_t)&ggl::LineShader::typedReflection(void)::ref;
          ggl::ManeuverPointShader::typedReflection(v373);
          qword_1ECE36DF8 = (uint64_t)&ggl::ManeuverPointShader::typedReflection(void)::ref;
          ggl::OcclusionLineShader::typedReflection(v374);
          qword_1ECE36E00 = (uint64_t)&ggl::OcclusionLineShader::typedReflection(void)::ref;
          ggl::OptimizedTrafficShader::typedReflection(v375);
          qword_1ECE36E08 = (uint64_t)&ggl::OptimizedTrafficShader::typedReflection(void)::ref;
          ggl::OuterShadowRibbonShader::typedReflection(v376);
          qword_1ECE36E10 = (uint64_t)&ggl::OuterShadowRibbonShader::typedReflection(void)::ref;
          ggl::PolygonOverlayFillShader::typedReflection(v377);
          qword_1ECE36E18 = (uint64_t)&ggl::PolygonOverlayFillShader::typedReflection(void)::ref;
          ggl::PolygonOverlayAntialiasShader::typedReflection(v378);
          qword_1ECE36E20 = (uint64_t)&ggl::PolygonOverlayAntialiasShader::typedReflection(void)::ref;
          ggl::MaskingOverlayFillShader::typedReflection(v379);
          qword_1ECE36E28 = (uint64_t)&ggl::MaskingOverlayFillShader::typedReflection(void)::ref;
          ggl::MaskingOverlayMaskingShader::typedReflection(v380);
          qword_1ECE36E30 = (uint64_t)&ggl::MaskingOverlayMaskingShader::typedReflection(void)::ref;
          ggl::PatternedRibbonShader::typedReflection(v381);
          qword_1ECE36E38 = (uint64_t)&ggl::PatternedRibbonShader::typedReflection(void)::ref;
          if ((v383 & 1) == 0)
          {
            if ((_DWORD)v382)
            {
              ggl::WriteStencilPatternedRibbonShader::typedReflection(void)::ref = (uint64_t)"WriteStencilPatternedRibbonShader";
              if ((v672 & 1) == 0
              {
                qword_1ECE432B0 = (uint64_t)"WriteStencilPatternedRibbonShader";
                unk_1ECE432B8 = ggl::writeStencilPatternedRibbonShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE432C0 = 1;
                unk_1ECE432C8 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE432D0 = 3;
                unk_1ECE432D8 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE432E0 = 0;
                unk_1ECE432E8 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::writeStencilPatternedRibbonShaderVertexFunctionDescriptor(void)::ref = 3294471237;
                qword_1ECE432F0 = 0;
                unk_1ECE432F8 = &ggl::writeStencilPatternedRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE43308 = 0;
                unk_1ECE43310 = 0;
                qword_1ECE43300 = 0;
              }
              qword_1ECE3BE30 = (uint64_t)&ggl::writeStencilPatternedRibbonShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE3BE38 = -1000496059;
              if ((v673 & 1) == 0
              {
                ggl::writeStencilPatternedRibbonShaderFragmentFunctionDescriptor(void)::ref = 0x11CF0EFDFLL;
                qword_1ECE435D8 = (uint64_t)"WriteStencilPatternedRibbonShader";
                unk_1ECE435E0 = 0;
                qword_1ECE435E8 = 0;
                unk_1ECE435F0 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE435F8 = 1;
                unk_1ECE43600 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE43608 = 0;
                unk_1ECE43610 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE43618 = 0;
                unk_1ECE43620 = &ggl::writeStencilPatternedRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE43630 = 0;
                unk_1ECE43638 = 0;
                qword_1ECE43628 = 0;
              }
              qword_1ECE3BE40 = (uint64_t)&ggl::writeStencilPatternedRibbonShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE3BE48 = 485552095;
              qword_1ECE3BE50 = (uint64_t)ggl::writeStencilPatternedRibbonShaderShaderConstants(void)::ref;
              unk_1ECE3BE58 = 3;
              qword_1ECE3BE60 = (uint64_t)&ggl::writeStencilPatternedRibbonShaderShaderTextures(void)::ref;
              unk_1ECE3BE68 = 0;
              qword_1ECE3BE70 = (uint64_t)&ggl::writeStencilPatternedRibbonShaderShaderSamplers(void)::ref;
              unk_1ECE3BE78 = 0;
            }
          }
          qword_1ECE36E40 = (uint64_t)&ggl::WriteStencilPatternedRibbonShader::typedReflection(void)::ref;
          ggl::PolygonAnimatableFillShader::typedReflection(v382);
          qword_1ECE36E48 = (uint64_t)&ggl::PolygonAnimatableFillShader::typedReflection(void)::ref;
          ggl::PolygonAnimatableStrokeShader::typedReflection(v384);
          qword_1ECE36E50 = (uint64_t)&ggl::PolygonAnimatableStrokeShader::typedReflection(void)::ref;
          ggl::PolygonFillShader::typedReflection(v385);
          qword_1ECE36E58 = (uint64_t)&ggl::PolygonFillShader::typedReflection(void)::ref;
          ggl::PolygonShadowedStrokeShader::typedReflection(v386);
          qword_1ECE36E60 = (uint64_t)&ggl::PolygonShadowedStrokeShader::typedReflection(void)::ref;
          ggl::PolygonSolidFillShader::typedReflection(v387);
          qword_1ECE36E68 = (uint64_t)&ggl::PolygonSolidFillShader::typedReflection(void)::ref;
          ggl::PolygonSolidFillS2Shader::typedReflection(v388);
          qword_1ECE36E70 = (uint64_t)&ggl::PolygonSolidFillS2Shader::typedReflection(void)::ref;
          ggl::PolygonStrokeShader::typedReflection(v389);
          qword_1ECE36E78 = (uint64_t)&ggl::PolygonStrokeShader::typedReflection(void)::ref;
          ggl::PolygonStrokeMaskShader::typedReflection(v390);
          qword_1ECE36E80 = (uint64_t)&ggl::PolygonStrokeMaskShader::typedReflection(void)::ref;
          ggl::HillshadeFillMaskShader::typedReflection(v391);
          qword_1ECE36E88 = (uint64_t)&ggl::HillshadeFillMaskShader::typedReflection(void)::ref;
          ggl::PolylineOverlayFillShader::typedReflection(v392);
          qword_1ECE36E90 = (uint64_t)&ggl::PolylineOverlayFillShader::typedReflection(void)::ref;
          ggl::PolylineOverlayAlphaShader::typedReflection(v393);
          qword_1ECE36E98 = (uint64_t)&ggl::PolylineOverlayAlphaShader::typedReflection(void)::ref;
          if ((v395 & 1) == 0)
          {
            if ((_DWORD)v394)
            {
              ggl::PolylineOverlayAlphaFillShader::typedReflection(void)::ref = (uint64_t)"PolylineOverlayAlphaFillShader";
              if ((v674 & 1) == 0
              {
                v675 = ggl::crc32::compute<37ul>("PolylineOverlayAlphaFillShaderVertex");
                qword_1ECE426D8 = (uint64_t)"PolylineOverlayAlphaFillShader";
                unk_1ECE426E0 = ggl::polylineOverlayAlphaFillShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE426E8 = 1;
                unk_1ECE426F0 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE426F8 = 3;
                unk_1ECE42700 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE42708 = 0;
                unk_1ECE42710 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::polylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref = v675;
                *(_DWORD *)algn_1ECE426D4 = 0;
                qword_1ECE42718 = 0;
                unk_1ECE42720 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE42730 = 0;
                unk_1ECE42738 = 0;
                qword_1ECE42728 = 0;
              }
              qword_1ECE3BA48 = (uint64_t)&ggl::polylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE3BA50 = ggl::crc32::compute<37ul>("PolylineOverlayAlphaFillShaderVertex");
              if ((v676 & 1) == 0
              {
                qword_1ECE42E40 = 0;
                unk_1ECE42E48 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE42E50 = 1;
                unk_1ECE42E58 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionBufferMapping(void)::ref;
                ggl::polylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref = 0x17E32C928;
                qword_1ECE42E60 = 0;
                unk_1ECE42E68 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE42E30 = (uint64_t)"PolylineOverlayAlphaFillShader";
                unk_1ECE42E38 = 0;
                qword_1ECE42E70 = 1;
                unk_1ECE42E78 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE42E88 = 0;
                unk_1ECE42E90 = 0;
                qword_1ECE42E80 = 1;
              }
              qword_1ECE3BA58 = (uint64_t)&ggl::polylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE3BA60 = 2117257512;
              qword_1ECE3BA68 = (uint64_t)ggl::polylineOverlayAlphaFillShaderShaderConstants(void)::ref;
              unk_1ECE3BA70 = 3;
              qword_1ECE3BA78 = (uint64_t)ggl::polylineOverlayAlphaFillShaderShaderTextures(void)::ref;
              unk_1ECE3BA80 = 1;
              qword_1ECE3BA88 = (uint64_t)&ggl::polylineOverlayAlphaFillShaderShaderSamplers(void)::ref;
              unk_1ECE3BA90 = 1;
            }
          }
          qword_1ECE36EA0 = (uint64_t)&ggl::PolylineOverlayAlphaFillShader::typedReflection(void)::ref;
          ggl::PointShader::typedReflection(v394);
          qword_1ECE36EA8 = (uint64_t)&ggl::PointShader::typedReflection(void)::ref;
          ggl::PointExtendedShader::typedReflection(v396);
          qword_1ECE36EB0 = (uint64_t)&ggl::PointExtendedShader::typedReflection(void)::ref;
          ggl::PrefilteredLineShader::typedReflection(v397);
          qword_1ECE36EB8 = (uint64_t)&ggl::PrefilteredLineShader::typedReflection(void)::ref;
          if ((v399 & 1) == 0)
          {
            if ((_DWORD)v398)
            {
              ggl::RenderTargetBlendShader::typedReflection(void)::ref = (uint64_t)"RenderTargetBlendShader";
              if ((v677 & 1) == 0
              {
                v678 = ggl::crc32::compute<30ul>("RenderTargetBlendShaderVertex");
                qword_1ECE40250 = (uint64_t)"RenderTargetBlendShader";
                unk_1ECE40258 = ggl::renderTargetBlendShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE40260 = 1;
                unk_1ECE40268 = &ggl::renderTargetBlendShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE40270 = 0;
                unk_1ECE40278 = &ggl::renderTargetBlendShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE40280 = 0;
                unk_1ECE40288 = &ggl::renderTargetBlendShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::renderTargetBlendShaderVertexFunctionDescriptor(void)::ref = v678;
                *(_DWORD *)algn_1ECE4024C = 0;
                qword_1ECE40290 = 0;
                unk_1ECE40298 = &ggl::renderTargetBlendShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE402A8 = 0;
                unk_1ECE402B0 = 0;
                qword_1ECE402A0 = 0;
              }
              qword_1ECE3ABA0 = (uint64_t)&ggl::renderTargetBlendShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE3ABA8 = ggl::crc32::compute<30ul>("RenderTargetBlendShaderVertex");
              if ((v679 & 1) == 0
              {
                v680 = ggl::crc32::compute<32ul>("RenderTargetBlendShaderFragment");
                qword_1ECE40EE8 = 0;
                unk_1ECE40EF0 = &ggl::renderTargetBlendShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE40EF8 = 1;
                unk_1ECE40F00 = &ggl::renderTargetBlendShaderFragShaderFunctionBufferMapping(void)::ref;
                ggl::renderTargetBlendShaderFragmentFunctionDescriptor(void)::ref = v680;
                *(_DWORD *)algn_1ECE40ED4 = 1;
                qword_1ECE40F08 = 0;
                unk_1ECE40F10 = &ggl::renderTargetBlendShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE40ED8 = (uint64_t)"RenderTargetBlendShader";
                unk_1ECE40EE0 = 0;
                qword_1ECE40F18 = 1;
                unk_1ECE40F20 = &ggl::renderTargetBlendShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE40F30 = 0;
                unk_1ECE40F38 = 0;
                qword_1ECE40F28 = 1;
              }
              qword_1ECE3ABB0 = (uint64_t)&ggl::renderTargetBlendShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE3ABB8 = ggl::crc32::compute<32ul>("RenderTargetBlendShaderFragment");
              qword_1ECE3ABC0 = (uint64_t)ggl::renderTargetBlendShaderShaderConstants(void)::ref;
              unk_1ECE3ABC8 = 1;
              qword_1ECE3ABD0 = (uint64_t)ggl::renderTargetBlendShaderShaderTextures(void)::ref;
              unk_1ECE3ABD8 = 1;
              qword_1ECE3ABE0 = (uint64_t)&ggl::renderTargetBlendShaderShaderSamplers(void)::ref;
              unk_1ECE3ABE8 = 1;
            }
          }
          qword_1ECE36EC0 = (uint64_t)&ggl::RenderTargetBlendShader::typedReflection(void)::ref;
          ggl::RouteLineShader::typedReflection(v398);
          qword_1ECE36EC8 = (uint64_t)&ggl::RouteLineShader::typedReflection(void)::ref;
          ggl::PatternedRouteLineShader::typedReflection(v400);
          qword_1ECE36ED0 = (uint64_t)&ggl::PatternedRouteLineShader::typedReflection(void)::ref;
          ggl::RouteLineMaskShader::typedReflection(v401);
          qword_1ECE36ED8 = (uint64_t)&ggl::RouteLineMaskShader::typedReflection(void)::ref;
          ggl::RouteLineAlphaResetShader::typedReflection(v402);
          qword_1ECE36EE0 = (uint64_t)&ggl::RouteLineAlphaResetShader::typedReflection(void)::ref;
          ggl::RouteLineArrowShader::typedReflection(v403);
          qword_1ECE36EE8 = (uint64_t)&ggl::RouteLineArrowShader::typedReflection(void)::ref;
          ggl::RouteLineTrafficShader::typedReflection(v404);
          qword_1ECE36EF0 = (uint64_t)&ggl::RouteLineTrafficShader::typedReflection(void)::ref;
          ggl::SinglePassRouteLineShader::typedReflection(v405);
          qword_1ECE36EF8 = (uint64_t)&ggl::SinglePassRouteLineShader::typedReflection(void)::ref;
          ggl::DottedRouteLineShader::typedReflection(v406);
          qword_1ECE36F00 = (uint64_t)&ggl::DottedRouteLineShader::typedReflection(void)::ref;
          ggl::SDFGlyphShader::typedReflection(v407);
          qword_1ECE36F08 = (uint64_t)&ggl::SDFGlyphShader::typedReflection(void)::ref;
          ggl::SDFGlyphHaloShader::typedReflection(v408);
          qword_1ECE36F10 = (uint64_t)&ggl::SDFGlyphHaloShader::typedReflection(void)::ref;
          ggl::SDFGlyphSuperSampleShader::typedReflection(v409);
          qword_1ECE36F18 = (uint64_t)&ggl::SDFGlyphSuperSampleShader::typedReflection(void)::ref;
          if ((v411 & 1) == 0)
          {
            if ((_DWORD)v410)
            {
              ggl::SimpleGridShader::typedReflection(void)::ref = (uint64_t)"SimpleGridShader";
              if ((v681 & 1) == 0
              {
                v682 = ggl::crc32::compute<23ul>("SimpleGridShaderVertex");
                qword_1ECE3D6B8 = (uint64_t)"SimpleGridShader";
                unk_1ECE3D6C0 = ggl::simpleGridShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE3D6C8 = 1;
                unk_1ECE3D6D0 = &ggl::simpleGridShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE3D6D8 = 3;
                unk_1ECE3D6E0 = &ggl::simpleGridShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE3D6E8 = 0;
                unk_1ECE3D6F0 = &ggl::simpleGridShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::simpleGridShaderVertexFunctionDescriptor(void)::ref = v682;
                *(_DWORD *)algn_1ECE3D6B4 = 0;
                qword_1ECE3D6F8 = 0;
                unk_1ECE3D700 = &ggl::simpleGridShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE3D710 = 0;
                unk_1ECE3D718 = 0;
                qword_1ECE3D708 = 0;
              }
              qword_1ECE39668 = (uint64_t)&ggl::simpleGridShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE39670 = ggl::crc32::compute<23ul>("SimpleGridShaderVertex");
              if ((v683 & 1) == 0
              {
                ggl::simpleGridShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("SimpleGridShaderFragment");
                *(_DWORD *)algn_1ECE4514C = 1;
                qword_1ECE45150 = (uint64_t)"SimpleGridShader";
                unk_1ECE45158 = 0;
                qword_1ECE45160 = 0;
                unk_1ECE45168 = &ggl::simpleGridShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE45170 = 2;
                unk_1ECE45178 = &ggl::simpleGridShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE45180 = 0;
                unk_1ECE45188 = &ggl::simpleGridShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE45190 = 0;
                unk_1ECE45198 = &ggl::simpleGridShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE451A8 = 0;
                unk_1ECE451B0 = 0;
                qword_1ECE451A0 = 0;
              }
              qword_1ECE39678 = (uint64_t)&ggl::simpleGridShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE39680 = ggl::crc32::compute<25ul>("SimpleGridShaderFragment");
              qword_1ECE39688 = (uint64_t)ggl::simpleGridShaderShaderConstants(void)::ref;
              unk_1ECE39690 = 3;
              qword_1ECE39698 = (uint64_t)&ggl::simpleGridShaderShaderTextures(void)::ref;
              unk_1ECE396A0 = 0;
              qword_1ECE396A8 = (uint64_t)&ggl::simpleGridShaderShaderSamplers(void)::ref;
              unk_1ECE396B0 = 0;
            }
          }
          qword_1ECE36F20 = (uint64_t)&ggl::SimpleGridShader::typedReflection(void)::ref;
          ggl::SkyShader::typedReflection(v410);
          qword_1ECE36F28 = (uint64_t)&ggl::SkyShader::typedReflection(void)::ref;
          ggl::SolidRibbonShader::typedReflection(v412);
          qword_1ECE36F30 = (uint64_t)&ggl::SolidRibbonShader::typedReflection(void)::ref;
          ggl::SolidTrafficShader::typedReflection(v413);
          qword_1ECE36F38 = (uint64_t)&ggl::SolidTrafficShader::typedReflection(void)::ref;
          ggl::SolidMaskedTrafficShader::typedReflection(v414);
          qword_1ECE36F40 = (uint64_t)&ggl::SolidMaskedTrafficShader::typedReflection(void)::ref;
          ggl::SpecularBuildingShader::typedReflection(v415);
          qword_1ECE36F48 = (uint64_t)&ggl::SpecularBuildingShader::typedReflection(void)::ref;
          if ((v417 & 1) == 0)
          {
            if ((_DWORD)v416)
            {
              ggl::SpecularBuildingPointyRoofShader::typedReflection(void)::ref = (uint64_t)"SpecularBuildingPointyRoofShader";
              if ((v684 & 1) == 0
              {
                qword_1ECE42EA0 = (uint64_t)"SpecularBuildingPointyRoofShader";
                unk_1ECE42EA8 = ggl::specularBuildingPointyRoofShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE42EB0 = 1;
                unk_1ECE42EB8 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE42EC0 = 6;
                unk_1ECE42EC8 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE42ED0 = 0;
                unk_1ECE42ED8 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::specularBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref = 1075938269;
                qword_1ECE42EE0 = 0;
                unk_1ECE42EE8 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE42EF8 = 0;
                unk_1ECE42F00 = 0;
                qword_1ECE42EF0 = 0;
              }
              qword_1ECE3BCC0 = (uint64_t)&ggl::specularBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE3BCC8 = 1075938269;
              if ((v685 & 1) == 0
              {
                ggl::specularBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref = 0x10062DEDALL;
                qword_1ECE43408 = (uint64_t)"SpecularBuildingPointyRoofShader";
                unk_1ECE43410 = 0;
                qword_1ECE43418 = 0;
                unk_1ECE43420 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE43428 = 4;
                unk_1ECE43430 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE43438 = 0;
                unk_1ECE43440 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE43448 = 0;
                unk_1ECE43450 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE43460 = 0;
                unk_1ECE43468 = 0;
                qword_1ECE43458 = 0;
              }
              qword_1ECE3BCD0 = (uint64_t)&ggl::specularBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE3BCD8 = 6479578;
              qword_1ECE3BCE0 = (uint64_t)ggl::specularBuildingPointyRoofShaderShaderConstants(void)::ref;
              unk_1ECE3BCE8 = 7;
              qword_1ECE3BCF0 = (uint64_t)&ggl::specularBuildingPointyRoofShaderShaderTextures(void)::ref;
              unk_1ECE3BCF8 = 0;
              qword_1ECE3BD00 = (uint64_t)&ggl::specularBuildingPointyRoofShaderShaderSamplers(void)::ref;
              unk_1ECE3BD08 = 0;
            }
          }
          qword_1ECE36F50 = (uint64_t)&ggl::SpecularBuildingPointyRoofShader::typedReflection(void)::ref;
          ggl::SpecularBuildingTopShader::typedReflection(v416);
          qword_1ECE36F58 = (uint64_t)&ggl::SpecularBuildingTopShader::typedReflection(void)::ref;
          ggl::SpecularLandmarkShader::typedReflection(v418);
          qword_1ECE36F60 = (uint64_t)&ggl::SpecularLandmarkShader::typedReflection(void)::ref;
          if ((v420 & 1) == 0)
          {
            if ((_DWORD)v419)
            {
              ggl::StandardPostchainCompositeShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainCompositeShader";
              if ((v686 & 1) == 0
              {
                qword_1ECE356E8 = (uint64_t)"StandardPostchainCompositeShader";
                unk_1ECE356F0 = ggl::standardPostchainCompositeShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE356F8 = 1;
                unk_1ECE35700 = &ggl::standardPostchainCompositeShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE35708 = 0;
                unk_1ECE35710 = &ggl::standardPostchainCompositeShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE35718 = 0;
                unk_1ECE35720 = &ggl::standardPostchainCompositeShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::standardPostchainCompositeShaderVertexFunctionDescriptor(void)::ref = 3269181341;
                qword_1ECE35728 = 0;
                unk_1ECE35730 = &ggl::standardPostchainCompositeShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE35740 = 0;
                unk_1ECE35748 = 0;
                qword_1ECE35738 = 0;
              }
              qword_1ECE34928 = (uint64_t)&ggl::standardPostchainCompositeShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE34930 = -1025785955;
              if ((v687 & 1) == 0
              {
                ggl::standardPostchainCompositeShaderFragmentFunctionDescriptor(void)::ref = 0x1DF746FA2;
                qword_1ECE35A20 = (uint64_t)"StandardPostchainCompositeShader";
                unk_1ECE35A28 = 0;
                qword_1ECE35A30 = 0;
                unk_1ECE35A38 = &ggl::standardPostchainCompositeShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE35A40 = 1;
                unk_1ECE35A48 = &ggl::standardPostchainCompositeShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE35A50 = 0;
                unk_1ECE35A58 = &ggl::standardPostchainCompositeShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE35A60 = 4;
                unk_1ECE35A68 = &ggl::standardPostchainCompositeShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE35A78 = 0;
                unk_1ECE35A80 = 0;
                qword_1ECE35A70 = 4;
              }
              qword_1ECE34938 = (uint64_t)&ggl::standardPostchainCompositeShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE34940 = -546017374;
              qword_1ECE34948 = (uint64_t)ggl::standardPostchainCompositeShaderShaderConstants(void)::ref;
              unk_1ECE34950 = 1;
              qword_1ECE34958 = (uint64_t)ggl::standardPostchainCompositeShaderShaderTextures(void)::ref;
              unk_1ECE34960 = 4;
              qword_1ECE34968 = (uint64_t)ggl::standardPostchainCompositeShaderShaderSamplers(void)::ref;
              unk_1ECE34970 = 4;
            }
          }
          qword_1ECE36F68 = (uint64_t)&ggl::StandardPostchainCompositeShader::typedReflection(void)::ref;
          if ((v421 & 1) == 0)
          {
            if ((_DWORD)v419)
            {
              ggl::StandardPostchainSplitFrameShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainSplitFrameShader";
              if ((v688 & 1) == 0
              {
                qword_1ECE35848 = (uint64_t)"StandardPostchainSplitFrameShader";
                unk_1ECE35850 = ggl::standardPostchainSplitFrameShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE35858 = 1;
                unk_1ECE35860 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE35868 = 0;
                unk_1ECE35870 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE35878 = 0;
                unk_1ECE35880 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::standardPostchainSplitFrameShaderVertexFunctionDescriptor(void)::ref = 1892780714;
                qword_1ECE35888 = 0;
                unk_1ECE35890 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE358A0 = 0;
                unk_1ECE358A8 = 0;
                qword_1ECE35898 = 0;
              }
              qword_1ECE34988 = (uint64_t)&ggl::standardPostchainSplitFrameShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE34990 = 1892780714;
              if ((v689 & 1) == 0
              {
                ggl::standardPostchainSplitFrameShaderFragmentFunctionDescriptor(void)::ref = 0x119C0B9BFLL;
                qword_1ECE35B80 = (uint64_t)"StandardPostchainSplitFrameShader";
                unk_1ECE35B88 = 0;
                qword_1ECE35B90 = 0;
                unk_1ECE35B98 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE35BA0 = 1;
                unk_1ECE35BA8 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE35BB0 = 0;
                unk_1ECE35BB8 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE35BC0 = 2;
                unk_1ECE35BC8 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE35BD8 = 0;
                unk_1ECE35BE0 = 0;
                qword_1ECE35BD0 = 2;
              }
              qword_1ECE34998 = (uint64_t)&ggl::standardPostchainSplitFrameShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE349A0 = 432060863;
              qword_1ECE349A8 = (uint64_t)ggl::standardPostchainSplitFrameShaderShaderConstants(void)::ref;
              unk_1ECE349B0 = 1;
              qword_1ECE349B8 = (uint64_t)ggl::standardPostchainSplitFrameShaderShaderTextures(void)::ref;
              unk_1ECE349C0 = 2;
              qword_1ECE349C8 = (uint64_t)ggl::standardPostchainSplitFrameShaderShaderSamplers(void)::ref;
              unk_1ECE349D0 = 2;
            }
          }
          qword_1ECE36F70 = (uint64_t)&ggl::StandardPostchainSplitFrameShader::typedReflection(void)::ref;
          if ((v422 & 1) == 0)
          {
            if ((_DWORD)v419)
            {
              ggl::StandardPostchainDownsampleCoCShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainDownsampleCoCShader";
              if ((v690 & 1) == 0
              {
                qword_1ECE35C68 = (uint64_t)"StandardPostchainDownsampleCoCShader";
                unk_1ECE35C70 = ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE35C78 = 1;
                unk_1ECE35C80 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE35C88 = 0;
                unk_1ECE35C90 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE35C98 = 0;
                unk_1ECE35CA0 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::standardPostchainDownsampleCoCShaderVertexFunctionDescriptor(void)::ref = 579759095;
                qword_1ECE35CA8 = 0;
                unk_1ECE35CB0 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE35CC0 = 0;
                unk_1ECE35CC8 = 0;
                qword_1ECE35CB8 = 0;
              }
              qword_1ECE34B08 = (uint64_t)&ggl::standardPostchainDownsampleCoCShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE34B10 = 579759095;
              if ((v691 & 1) == 0
              {
                ggl::standardPostchainDownsampleCoCShaderFragmentFunctionDescriptor(void)::ref = 0x1C1D81A17;
                qword_1ECE35E30 = (uint64_t)"StandardPostchainDownsampleCoCShader";
                unk_1ECE35E38 = 0;
                qword_1ECE35E40 = 0;
                unk_1ECE35E48 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE35E50 = 0;
                unk_1ECE35E58 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE35E60 = 0;
                unk_1ECE35E68 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE35E70 = 1;
                unk_1ECE35E78 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE35E88 = 0;
                unk_1ECE35E90 = 0;
                qword_1ECE35E80 = 1;
              }
              qword_1ECE34B18 = (uint64_t)&ggl::standardPostchainDownsampleCoCShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE34B20 = -1042802153;
              qword_1ECE34B28 = (uint64_t)&ggl::standardPostchainDownsampleCoCShaderShaderConstants(void)::ref;
              unk_1ECE34B30 = 0;
              qword_1ECE34B38 = (uint64_t)ggl::standardPostchainDownsampleCoCShaderShaderTextures(void)::ref;
              unk_1ECE34B40 = 1;
              qword_1ECE34B48 = (uint64_t)ggl::standardPostchainDownsampleCoCShaderShaderSamplers(void)::ref;
              unk_1ECE34B50 = 1;
            }
          }
          qword_1ECE36F78 = (uint64_t)&ggl::StandardPostchainDownsampleCoCShader::typedReflection(void)::ref;
          ggl::StandardPostchainBGBlurShader::typedReflection(v419);
          qword_1ECE36F80 = (uint64_t)&ggl::StandardPostchainBGBlurShader::typedReflection(void)::ref;
          ggl::StandardPostchainFGBlurShader::typedReflection(v423);
          qword_1ECE36F88 = (uint64_t)&ggl::StandardPostchainFGBlurShader::typedReflection(void)::ref;
          if ((v425 & 1) == 0)
          {
            if ((_DWORD)v424)
            {
              ggl::StandardPostchainTentBlurShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainTentBlurShader";
              if ((v692 & 1) == 0
              {
                v693 = ggl::crc32::compute<38ul>("StandardPostchainTentBlurShaderVertex");
                qword_1ECE35588 = (uint64_t)"StandardPostchainTentBlurShader";
                unk_1ECE35590 = ggl::standardPostchainTentBlurShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE35598 = 1;
                unk_1ECE355A0 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE355A8 = 0;
                unk_1ECE355B0 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE355B8 = 0;
                unk_1ECE355C0 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::standardPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref = v693;
                *(_DWORD *)algn_1ECE35584 = 0;
                qword_1ECE355C8 = 0;
                unk_1ECE355D0 = &ggl::standardPostchainTentBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE355E0 = 0;
                unk_1ECE355E8 = 0;
                qword_1ECE355D8 = 0;
              }
              qword_1ECE34868 = (uint64_t)&ggl::standardPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE34870 = ggl::crc32::compute<38ul>("StandardPostchainTentBlurShaderVertex");
              if ((v694 & 1) == 0
              {
                ggl::standardPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref = 0x11C5A8EEELL;
                qword_1ECE358C0 = (uint64_t)"StandardPostchainTentBlurShader";
                unk_1ECE358C8 = 0;
                qword_1ECE358D0 = 0;
                unk_1ECE358D8 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE358E0 = 0;
                unk_1ECE358E8 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE358F0 = 0;
                unk_1ECE358F8 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE35900 = 1;
                unk_1ECE35908 = &ggl::standardPostchainTentBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE35918 = 0;
                unk_1ECE35920 = 0;
                qword_1ECE35910 = 1;
              }
              qword_1ECE34878 = (uint64_t)&ggl::standardPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE34880 = 475696878;
              qword_1ECE34888 = (uint64_t)&ggl::standardPostchainTentBlurShaderShaderConstants(void)::ref;
              unk_1ECE34890 = 0;
              qword_1ECE34898 = (uint64_t)ggl::standardPostchainTentBlurShaderShaderTextures(void)::ref;
              unk_1ECE348A0 = 1;
              qword_1ECE348A8 = (uint64_t)ggl::standardPostchainTentBlurShaderShaderSamplers(void)::ref;
              unk_1ECE348B0 = 1;
            }
          }
          qword_1ECE36F90 = (uint64_t)&ggl::StandardPostchainTentBlurShader::typedReflection(void)::ref;
          if ((v426 & 1) == 0)
          {
            if ((_DWORD)v424)
            {
              ggl::StandardPostchainDownsampleDepthShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainDownsampleDepthShader";
              if ((v695 & 1) == 0
              {
                qword_1ECE35EA8 = (uint64_t)"StandardPostchainDownsampleDepthShader";
                unk_1ECE35EB0 = ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE35EB8 = 1;
                unk_1ECE35EC0 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE35EC8 = 0;
                unk_1ECE35ED0 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE35ED8 = 0;
                unk_1ECE35EE0 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::standardPostchainDownsampleDepthShaderVertexFunctionDescriptor(void)::ref = 2938732211;
                qword_1ECE35EE8 = 0;
                unk_1ECE35EF0 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE35F00 = 0;
                unk_1ECE35F08 = 0;
                qword_1ECE35EF8 = 0;
              }
              qword_1ECE34BB8 = (uint64_t)&ggl::standardPostchainDownsampleDepthShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE34BC0 = -1356235085;
              if ((v696 & 1) == 0
              {
                ggl::standardPostchainDownsampleDepthShaderFragmentFunctionDescriptor(void)::ref = 0x13810F95ALL;
                qword_1ECE35F90 = (uint64_t)"StandardPostchainDownsampleDepthShader";
                unk_1ECE35F98 = 0;
                qword_1ECE35FA0 = 0;
                unk_1ECE35FA8 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE35FB0 = 0;
                unk_1ECE35FB8 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE35FC0 = 0;
                unk_1ECE35FC8 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE35FD0 = 1;
                unk_1ECE35FD8 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE35FE8 = 0;
                unk_1ECE35FF0 = 0;
                qword_1ECE35FE0 = 1;
              }
              qword_1ECE34BC8 = (uint64_t)&ggl::standardPostchainDownsampleDepthShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE34BD0 = 940636506;
              qword_1ECE34BD8 = (uint64_t)&ggl::standardPostchainDownsampleDepthShaderShaderConstants(void)::ref;
              unk_1ECE34BE0 = 0;
              qword_1ECE34BE8 = (uint64_t)ggl::standardPostchainDownsampleDepthShaderShaderTextures(void)::ref;
              unk_1ECE34BF0 = 1;
              qword_1ECE34BF8 = (uint64_t)ggl::standardPostchainDownsampleDepthShaderShaderSamplers(void)::ref;
              unk_1ECE34C00 = 1;
            }
          }
          qword_1ECE36F98 = (uint64_t)&ggl::StandardPostchainDownsampleDepthShader::typedReflection(void)::ref;
          if ((v427 & 1) == 0)
          {
            if ((_DWORD)v424)
            {
              ggl::StandardPostchainSSAOBlurShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainSSAOBlurShader";
              if ((v697 & 1) == 0
              {
                v698 = ggl::crc32::compute<38ul>("StandardPostchainSSAOBlurShaderVertex");
                qword_1ECE35518 = (uint64_t)"StandardPostchainSSAOBlurShader";
                unk_1ECE35520 = ggl::standardPostchainSSAOBlurShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE35528 = 1;
                unk_1ECE35530 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE35538 = 0;
                unk_1ECE35540 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE35548 = 0;
                unk_1ECE35550 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::standardPostchainSSAOBlurShaderVertexFunctionDescriptor(void)::ref = v698;
                *(_DWORD *)algn_1ECE35514 = 0;
                qword_1ECE35558 = 0;
                unk_1ECE35560 = &ggl::standardPostchainSSAOBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE35570 = 0;
                unk_1ECE35578 = 0;
                qword_1ECE35568 = 0;
              }
              qword_1ECE34808 = (uint64_t)&ggl::standardPostchainSSAOBlurShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE34810 = ggl::crc32::compute<38ul>("StandardPostchainSSAOBlurShaderVertex");
              if ((v699 & 1) == 0
              {
                ggl::standardPostchainSSAOBlurShaderFragmentFunctionDescriptor(void)::ref = 0x1AAC07444;
                qword_1ECE357D0 = (uint64_t)"StandardPostchainSSAOBlurShader";
                unk_1ECE357D8 = 0;
                qword_1ECE357E0 = 0;
                unk_1ECE357E8 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE357F0 = 1;
                unk_1ECE357F8 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE35800 = 0;
                unk_1ECE35808 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE35810 = 2;
                unk_1ECE35818 = &ggl::standardPostchainSSAOBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE35828 = 0;
                unk_1ECE35830 = 0;
                qword_1ECE35820 = 2;
              }
              qword_1ECE34818 = (uint64_t)&ggl::standardPostchainSSAOBlurShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE34820 = -1430227900;
              qword_1ECE34828 = (uint64_t)ggl::standardPostchainSSAOBlurShaderShaderConstants(void)::ref;
              unk_1ECE34830 = 1;
              qword_1ECE34838 = (uint64_t)ggl::standardPostchainSSAOBlurShaderShaderTextures(void)::ref;
              unk_1ECE34840 = 2;
              qword_1ECE34848 = (uint64_t)ggl::standardPostchainSSAOBlurShaderShaderSamplers(void)::ref;
              unk_1ECE34850 = 2;
            }
          }
          qword_1ECE36FA0 = (uint64_t)&ggl::StandardPostchainSSAOBlurShader::typedReflection(void)::ref;
          if ((v428 & 1) == 0)
          {
            if ((_DWORD)v424)
            {
              ggl::StandardPostchainSSAOUpsampleShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainSSAOUpsampleShader";
              if ((v700 & 1) == 0
              {
                qword_1ECE35B08 = (uint64_t)"StandardPostchainSSAOUpsampleShader";
                unk_1ECE35B10 = ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE35B18 = 1;
                unk_1ECE35B20 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE35B28 = 0;
                unk_1ECE35B30 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE35B38 = 0;
                unk_1ECE35B40 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::standardPostchainSSAOUpsampleShaderVertexFunctionDescriptor(void)::ref = 1285258797;
                qword_1ECE35B48 = 0;
                unk_1ECE35B50 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE35B60 = 0;
                unk_1ECE35B68 = 0;
                qword_1ECE35B58 = 0;
              }
              qword_1ECE34AA8 = (uint64_t)&ggl::standardPostchainSSAOUpsampleShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE34AB0 = 1285258797;
              if ((v701 & 1) == 0
              {
                ggl::standardPostchainSSAOUpsampleShaderFragmentFunctionDescriptor(void)::ref = 0x1D7D2BD7CLL;
                qword_1ECE35DC0 = (uint64_t)"StandardPostchainSSAOUpsampleShader";
                unk_1ECE35DC8 = 0;
                qword_1ECE35DD0 = 0;
                unk_1ECE35DD8 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE35DE0 = 1;
                unk_1ECE35DE8 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE35DF0 = 0;
                unk_1ECE35DF8 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE35E00 = 3;
                unk_1ECE35E08 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE35E18 = 0;
                unk_1ECE35E20 = 0;
                qword_1ECE35E10 = 3;
              }
              qword_1ECE34AB8 = (uint64_t)&ggl::standardPostchainSSAOUpsampleShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE34AC0 = -674054788;
              qword_1ECE34AC8 = (uint64_t)ggl::standardPostchainSSAOUpsampleShaderShaderConstants(void)::ref;
              unk_1ECE34AD0 = 1;
              qword_1ECE34AD8 = (uint64_t)ggl::standardPostchainSSAOUpsampleShaderShaderTextures(void)::ref;
              unk_1ECE34AE0 = 3;
              qword_1ECE34AE8 = (uint64_t)ggl::standardPostchainSSAOUpsampleShaderShaderSamplers(void)::ref;
              unk_1ECE34AF0 = 3;
            }
          }
          qword_1ECE36FA8 = (uint64_t)&ggl::StandardPostchainSSAOUpsampleShader::typedReflection(void)::ref;
          ggl::StandardPostchainSSAOShader::typedReflection(v424);
          qword_1ECE36FB0 = (uint64_t)&ggl::StandardPostchainSSAOShader::typedReflection(void)::ref;
          if ((v430 & 1) == 0)
          {
            if ((_DWORD)v429)
            {
              ggl::StyleTextureRibbonShader::typedReflection(void)::ref = (uint64_t)"StyleTextureRibbonShader";
              if ((v702 & 1) == 0
              {
                v703 = ggl::crc32::compute<31ul>("StyleTextureRibbonShaderVertex");
                qword_1ECE40A68 = (uint64_t)"StyleTextureRibbonShader";
                unk_1ECE40A70 = ggl::styleTextureRibbonShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE40A78 = 1;
                unk_1ECE40A80 = &ggl::styleTextureRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE40A88 = 2;
                unk_1ECE40A90 = &ggl::styleTextureRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE40A98 = 0;
                unk_1ECE40AA0 = &ggl::styleTextureRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::styleTextureRibbonShaderVertexFunctionDescriptor(void)::ref = v703;
                *(_DWORD *)algn_1ECE40A64 = 0;
                qword_1ECE40AA8 = 1;
                unk_1ECE40AB0 = &ggl::styleTextureRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE40AC0 = 0;
                unk_1ECE40AC8 = 0;
                qword_1ECE40AB8 = 1;
              }
              qword_1ECE3AF18 = (uint64_t)&ggl::styleTextureRibbonShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE3AF20 = ggl::crc32::compute<31ul>("StyleTextureRibbonShaderVertex");
              if ((v704 & 1) == 0
              {
                v705 = ggl::crc32::compute<33ul>("StyleTextureRibbonShaderFragment");
                qword_1ECE415C0 = 0;
                unk_1ECE415C8 = &ggl::styleTextureRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE415D0 = 1;
                unk_1ECE415D8 = &ggl::styleTextureRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
                ggl::styleTextureRibbonShaderFragmentFunctionDescriptor(void)::ref = v705;
                *(_DWORD *)algn_1ECE415AC = 1;
                qword_1ECE415E0 = 0;
                unk_1ECE415E8 = &ggl::styleTextureRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE415B0 = (uint64_t)"StyleTextureRibbonShader";
                unk_1ECE415B8 = 0;
                qword_1ECE415F0 = 1;
                unk_1ECE415F8 = &ggl::styleTextureRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE41608 = 0;
                unk_1ECE41610 = 0;
                qword_1ECE41600 = 1;
              }
              qword_1ECE3AF28 = (uint64_t)&ggl::styleTextureRibbonShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE3AF30 = ggl::crc32::compute<33ul>("StyleTextureRibbonShaderFragment");
              qword_1ECE3AF38 = (uint64_t)ggl::styleTextureRibbonShaderShaderConstants(void)::ref;
              unk_1ECE3AF40 = 2;
              qword_1ECE3AF48 = (uint64_t)ggl::styleTextureRibbonShaderShaderTextures(void)::ref;
              unk_1ECE3AF50 = 2;
              qword_1ECE3AF58 = (uint64_t)ggl::styleTextureRibbonShaderShaderSamplers(void)::ref;
              unk_1ECE3AF60 = 2;
            }
          }
          qword_1ECE36FB8 = (uint64_t)&ggl::StyleTextureRibbonShader::typedReflection(void)::ref;
          ggl::TextureAlphaMaskShader::typedReflection(v429);
          qword_1ECE36FC0 = (uint64_t)&ggl::TextureAlphaMaskShader::typedReflection(void)::ref;
          ggl::TexturedShader::typedReflection(v431);
          qword_1ECE36FC8 = (uint64_t)&ggl::TexturedShader::typedReflection(void)::ref;
          ggl::TexturedDrapedSRGBBlendShader::typedReflection(v432);
          qword_1ECE36FD0 = (uint64_t)&ggl::TexturedDrapedSRGBBlendShader::typedReflection(void)::ref;
          ggl::TexturedSRGBBlendShader::typedReflection(v433);
          qword_1ECE36FD8 = (uint64_t)&ggl::TexturedSRGBBlendShader::typedReflection(void)::ref;
          if ((v435 & 1) == 0)
          {
            if ((_DWORD)v434)
            {
              ggl::TexturedColormappedSRGBTexturedShader::typedReflection(void)::ref = (uint64_t)"TexturedColormappedSRGBTexturedShader";
              if ((v706 & 1) == 0
              {
                qword_1ECE33590 = (uint64_t)"TexturedColormappedSRGBTexturedShader";
                unk_1ECE33598 = ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE335A0 = 1;
                unk_1ECE335A8 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE335B0 = 3;
                unk_1ECE335B8 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE335C0 = 0;
                unk_1ECE335C8 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::texturedColormappedSRGBTexturedShaderVertexFunctionDescriptor(void)::ref = 103723494;
                qword_1ECE335D0 = 0;
                unk_1ECE335D8 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE335E8 = 0;
                unk_1ECE335F0 = 0;
                qword_1ECE335E0 = 0;
              }
              qword_1ECE32BB0 = (uint64_t)&ggl::texturedColormappedSRGBTexturedShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE32BB8 = 103723494;
              if ((v707 & 1) == 0
              {
                qword_1ECE33618 = 0;
                unk_1ECE33620 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE33628 = 2;
                unk_1ECE33630 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
                ggl::texturedColormappedSRGBTexturedShaderFragmentFunctionDescriptor(void)::ref = 0x1F407266DLL;
                qword_1ECE33638 = 0;
                unk_1ECE33640 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE33608 = (uint64_t)"TexturedColormappedSRGBTexturedShader";
                unk_1ECE33610 = 0;
                qword_1ECE33648 = 2;
                unk_1ECE33650 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE33660 = 0;
                unk_1ECE33668 = 0;
                qword_1ECE33658 = 2;
              }
              qword_1ECE32BC0 = (uint64_t)&ggl::texturedColormappedSRGBTexturedShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE32BC8 = -200858003;
              qword_1ECE32BD0 = (uint64_t)ggl::texturedColormappedSRGBTexturedShaderShaderConstants(void)::ref;
              unk_1ECE32BD8 = 5;
              qword_1ECE32BE0 = (uint64_t)ggl::texturedColormappedSRGBTexturedShaderShaderTextures(void)::ref;
              unk_1ECE32BE8 = 2;
              qword_1ECE32BF0 = (uint64_t)ggl::texturedColormappedSRGBTexturedShaderShaderSamplers(void)::ref;
              unk_1ECE32BF8 = 2;
            }
          }
          qword_1ECE36FE0 = (uint64_t)&ggl::TexturedColormappedSRGBTexturedShader::typedReflection(void)::ref;
          ggl::TexturedExtendedShader::typedReflection(v434);
          qword_1ECE36FE8 = (uint64_t)&ggl::TexturedExtendedShader::typedReflection(void)::ref;
          if ((v437 & 1) == 0)
          {
            if ((_DWORD)v436)
            {
              ggl::StyledTexturedShader::typedReflection(void)::ref = (uint64_t)"StyledTexturedShader";
              if ((v708 & 1) == 0
              {
                v709 = ggl::crc32::compute<27ul>("StyledTexturedShaderVertex");
                qword_1ECE3EDB0 = (uint64_t)"StyledTexturedShader";
                unk_1ECE3EDB8 = ggl::styledTexturedShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE3EDC0 = 1;
                unk_1ECE3EDC8 = &ggl::styledTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE3EDD0 = 2;
                unk_1ECE3EDD8 = &ggl::styledTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE3EDE0 = 0;
                unk_1ECE3EDE8 = &ggl::styledTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::styledTexturedShaderVertexFunctionDescriptor(void)::ref = v709;
                *(_DWORD *)algn_1ECE3EDAC = 0;
                qword_1ECE3EDF0 = 0;
                unk_1ECE3EDF8 = &ggl::styledTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE3EE08 = 0;
                unk_1ECE3EE10 = 0;
                qword_1ECE3EE00 = 0;
              }
              qword_1ECE3A2E0 = (uint64_t)&ggl::styledTexturedShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE3A2E8 = ggl::crc32::compute<27ul>("StyledTexturedShaderVertex");
              if ((v710 & 1) == 0
              {
                ggl::styledTexturedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("StyledTexturedShaderFragment");
                *(_DWORD *)algn_1ECE3FC44 = 1;
                qword_1ECE3FC48 = (uint64_t)"StyledTexturedShader";
                unk_1ECE3FC50 = 0;
                qword_1ECE3FC58 = 0;
                unk_1ECE3FC60 = &ggl::styledTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE3FC68 = 0;
                unk_1ECE3FC70 = &ggl::styledTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE3FC78 = 0;
                unk_1ECE3FC80 = &ggl::styledTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE3FC88 = 2;
                unk_1ECE3FC90 = &ggl::styledTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE3FCA0 = 0;
                unk_1ECE3FCA8 = 0;
                qword_1ECE3FC98 = 2;
              }
              qword_1ECE3A2F0 = (uint64_t)&ggl::styledTexturedShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE3A2F8 = ggl::crc32::compute<29ul>("StyledTexturedShaderFragment");
              qword_1ECE3A300 = (uint64_t)ggl::styledTexturedShaderShaderConstants(void)::ref;
              unk_1ECE3A308 = 2;
              qword_1ECE3A310 = (uint64_t)ggl::styledTexturedShaderShaderTextures(void)::ref;
              unk_1ECE3A318 = 2;
              qword_1ECE3A320 = (uint64_t)ggl::styledTexturedShaderShaderSamplers(void)::ref;
              unk_1ECE3A328 = 2;
            }
          }
          qword_1ECE36FF0 = (uint64_t)&ggl::StyledTexturedShader::typedReflection(void)::ref;
          ggl::ScreenTexturedQuadShader::typedReflection(v436);
          qword_1ECE36FF8 = (uint64_t)&ggl::ScreenTexturedQuadShader::typedReflection(void)::ref;
          ggl::PoleTexturedBlendShader::typedReflection(v438);
          qword_1ECE37000 = (uint64_t)&ggl::PoleTexturedBlendShader::typedReflection(void)::ref;
          if ((v440 & 1) == 0)
          {
            if ((_DWORD)v439)
            {
              ggl::TexturedInnerShadowRibbonShader::typedReflection(void)::ref = (uint64_t)"TexturedInnerShadowRibbonShader";
              if ((v711 & 1) == 0
              {
                v712 = ggl::crc32::compute<38ul>("TexturedInnerShadowRibbonShaderVertex");
                qword_1ECE45418 = (uint64_t)"TexturedInnerShadowRibbonShader";
                unk_1ECE45420 = ggl::texturedInnerShadowRibbonShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE45428 = 1;
                unk_1ECE45430 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE45438 = 4;
                unk_1ECE45440 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE45448 = 0;
                unk_1ECE45450 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::texturedInnerShadowRibbonShaderVertexFunctionDescriptor(void)::ref = v712;
                *(_DWORD *)algn_1ECE45414 = 0;
                qword_1ECE45458 = 0;
                unk_1ECE45460 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE45470 = 0;
                unk_1ECE45478 = 0;
                qword_1ECE45468 = 0;
              }
              qword_1ECE3BC08 = (uint64_t)&ggl::texturedInnerShadowRibbonShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE3BC10 = ggl::crc32::compute<38ul>("TexturedInnerShadowRibbonShaderVertex");
              if ((v713 & 1) == 0
              {
                qword_1ECE431E0 = 0;
                unk_1ECE431E8 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE431F0 = 3;
                unk_1ECE431F8 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
                ggl::texturedInnerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref = 0x17C729238;
                qword_1ECE43200 = 0;
                unk_1ECE43208 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE431D0 = (uint64_t)"TexturedInnerShadowRibbonShader";
                unk_1ECE431D8 = 0;
                qword_1ECE43210 = 3;
                unk_1ECE43218 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE43228 = 0;
                unk_1ECE43230 = 0;
                qword_1ECE43220 = 3;
              }
              qword_1ECE3BC18 = (uint64_t)&ggl::texturedInnerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE3BC20 = 2087883320;
              qword_1ECE3BC28 = (uint64_t)ggl::texturedInnerShadowRibbonShaderShaderConstants(void)::ref;
              unk_1ECE3BC30 = 5;
              qword_1ECE3BC38 = (uint64_t)ggl::texturedInnerShadowRibbonShaderShaderTextures(void)::ref;
              unk_1ECE3BC40 = 3;
              qword_1ECE3BC48 = (uint64_t)ggl::texturedInnerShadowRibbonShaderShaderSamplers(void)::ref;
              unk_1ECE3BC50 = 3;
            }
          }
          qword_1ECE37008 = (uint64_t)&ggl::TexturedInnerShadowRibbonShader::typedReflection(void)::ref;
          ggl::TexturedSolidRibbonShader::typedReflection(v439);
          qword_1ECE37010 = (uint64_t)&ggl::TexturedSolidRibbonShader::typedReflection(void)::ref;
          ggl::TextureWithReverseAlphaShader::typedReflection(v441);
          qword_1ECE37018 = (uint64_t)&ggl::TextureWithReverseAlphaShader::typedReflection(void)::ref;
          ggl::TrafficGlowShader::typedReflection(v442);
          qword_1ECE37020 = (uint64_t)&ggl::TrafficGlowShader::typedReflection(void)::ref;
          ggl::TransitLineRibbonShader::typedReflection(v443);
          qword_1ECE37028 = (uint64_t)&ggl::TransitLineRibbonShader::typedReflection(void)::ref;
          if ((v445 & 1) == 0)
          {
            if ((_DWORD)v444)
            {
              ggl::PatternedTransitLineRibbonShader::typedReflection(void)::ref = (uint64_t)"PatternedTransitLineRibbonShader";
              if ((v714 & 1) == 0
              {
                qword_1ECE42DB8 = (uint64_t)"PatternedTransitLineRibbonShader";
                unk_1ECE42DC0 = ggl::patternedTransitLineRibbonShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE42DC8 = 1;
                unk_1ECE42DD0 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE42DD8 = 6;
                unk_1ECE42DE0 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE42DE8 = 0;
                unk_1ECE42DF0 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::patternedTransitLineRibbonShaderVertexFunctionDescriptor(void)::ref = 1746350796;
                qword_1ECE42DF8 = 1;
                unk_1ECE42E00 = &ggl::patternedTransitLineRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE42E10 = 0;
                unk_1ECE42E18 = 0;
                qword_1ECE42E08 = 1;
              }
              qword_1ECE3BC68 = (uint64_t)&ggl::patternedTransitLineRibbonShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE3BC70 = 1746350796;
              if ((v715 & 1) == 0
              {
                ggl::patternedTransitLineRibbonShaderFragmentFunctionDescriptor(void)::ref = 0x1EFDD56E6;
                qword_1ECE43390 = (uint64_t)"PatternedTransitLineRibbonShader";
                unk_1ECE43398 = 0;
                qword_1ECE433A0 = 0;
                unk_1ECE433A8 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE433B0 = 1;
                unk_1ECE433B8 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE433C0 = 0;
                unk_1ECE433C8 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE433D0 = 2;
                unk_1ECE433D8 = &ggl::patternedTransitLineRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE433E8 = 0;
                unk_1ECE433F0 = 0;
                qword_1ECE433E0 = 2;
              }
              qword_1ECE3BC78 = (uint64_t)&ggl::patternedTransitLineRibbonShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE3BC80 = -270706970;
              qword_1ECE3BC88 = (uint64_t)ggl::patternedTransitLineRibbonShaderShaderConstants(void)::ref;
              unk_1ECE3BC90 = 6;
              qword_1ECE3BC98 = (uint64_t)ggl::patternedTransitLineRibbonShaderShaderTextures(void)::ref;
              unk_1ECE3BCA0 = 3;
              qword_1ECE3BCA8 = (uint64_t)ggl::patternedTransitLineRibbonShaderShaderSamplers(void)::ref;
              unk_1ECE3BCB0 = 3;
            }
          }
          qword_1ECE37030 = (uint64_t)&ggl::PatternedTransitLineRibbonShader::typedReflection(void)::ref;
          ggl::TransitNodeColorizedShader::typedReflection(v444);
          qword_1ECE37038 = (uint64_t)&ggl::TransitNodeColorizedShader::typedReflection(void)::ref;
          ggl::TransitNodeRGBShader::typedReflection(v446);
          qword_1ECE37040 = (uint64_t)&ggl::TransitNodeRGBShader::typedReflection(void)::ref;
          ggl::VenueWallShader::typedReflection(v447);
          qword_1ECE37048 = (uint64_t)&ggl::VenueWallShader::typedReflection(void)::ref;
          ggl::VenueWallTopShader::typedReflection(v448);
          qword_1ECE37050 = (uint64_t)&ggl::VenueWallTopShader::typedReflection(void)::ref;
          ggl::VenueWallEndCapShader::typedReflection(v449);
          qword_1ECE37058 = (uint64_t)&ggl::VenueWallEndCapShader::typedReflection(void)::ref;
          ggl::VenueWallShadowShader::typedReflection(v450);
          qword_1ECE37060 = (uint64_t)&ggl::VenueWallShadowShader::typedReflection(void)::ref;
          ggl::HorizontalVenue3DStrokeShader::typedReflection(v451);
          qword_1ECE37068 = (uint64_t)&ggl::HorizontalVenue3DStrokeShader::typedReflection(void)::ref;
          ggl::VerticalVenue3DStrokeShader::typedReflection(v452);
          qword_1ECE37070 = (uint64_t)&ggl::VerticalVenue3DStrokeShader::typedReflection(void)::ref;
          if ((v454 & 1) == 0)
          {
            if ((_DWORD)v453)
            {
              ggl::VenueOpenToBelowShadowAlphaShader::typedReflection(void)::ref = (uint64_t)"VenueOpenToBelowShadowAlphaShader";
              if ((v716 & 1) == 0
              {
                qword_1ECE43240 = (uint64_t)"VenueOpenToBelowShadowAlphaShader";
                unk_1ECE43248 = ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE43250 = 1;
                unk_1ECE43258 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE43260 = 2;
                unk_1ECE43268 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE43270 = 0;
                unk_1ECE43278 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
                ggl::venueOpenToBelowShadowAlphaShaderVertexFunctionDescriptor(void)::ref = 1346813876;
                qword_1ECE43280 = 0;
                unk_1ECE43288 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE43298 = 0;
                unk_1ECE432A0 = 0;
                qword_1ECE43290 = 0;
              }
              qword_1ECE3BDD0 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE3BDD8 = 1346813876;
              if ((v717 & 1) == 0
              {
                ggl::venueOpenToBelowShadowAlphaShaderFragmentFunctionDescriptor(void)::ref = 0x19B3262D4;
                qword_1ECE43568 = (uint64_t)"VenueOpenToBelowShadowAlphaShader";
                unk_1ECE43570 = 0;
                qword_1ECE43578 = 0;
                unk_1ECE43580 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE43588 = 0;
                unk_1ECE43590 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE43598 = 0;
                unk_1ECE435A0 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE435A8 = 0;
                unk_1ECE435B0 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE435C0 = 0;
                unk_1ECE435C8 = 0;
                qword_1ECE435B8 = 0;
              }
              qword_1ECE3BDE0 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE3BDE8 = -1691196716;
              qword_1ECE3BDF0 = (uint64_t)ggl::venueOpenToBelowShadowAlphaShaderShaderConstants(void)::ref;
              unk_1ECE3BDF8 = 2;
              qword_1ECE3BE00 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderShaderTextures(void)::ref;
              unk_1ECE3BE08 = 0;
              qword_1ECE3BE10 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderShaderSamplers(void)::ref;
              unk_1ECE3BE18 = 0;
            }
          }
          qword_1ECE37078 = (uint64_t)&ggl::VenueOpenToBelowShadowAlphaShader::typedReflection(void)::ref;
          ggl::VenueOpenToBelowShadowShader::typedReflection(v453);
          qword_1ECE37080 = (uint64_t)&ggl::VenueOpenToBelowShadowShader::typedReflection(void)::ref;
          ggl::DaVinciTrafficShader::typedReflection(v455);
          qword_1ECE37088 = (uint64_t)&ggl::DaVinciTrafficShader::typedReflection(void)::ref;
          ggl::DaVinciDecalShader::typedReflection(v456);
          qword_1ECE37090 = (uint64_t)&ggl::DaVinciDecalShader::typedReflection(void)::ref;
          ggl::DaVinciGroundShader::typedReflection(v457);
          qword_1ECE37098 = (uint64_t)&ggl::DaVinciGroundShader::typedReflection(void)::ref;
          if ((v459 & 1) == 0)
          {
            if ((_DWORD)v458)
            {
              ggl::DaVinciGroundNotCompressedShader::typedReflection(void)::ref = (uint64_t)"DaVinciGroundNotCompressedShader";
              if ((v718 & 1) == 0
              {
                ggl::daVinciGroundNotCompressedShaderVertexFunctionDescriptor(void)::ref = 2461507574;
                qword_1ECE334A8 = (uint64_t)"DaVinciGroundNotCompressedShader";
                unk_1ECE334B0 = ggl::daVinciGroundNotCompressedShaderVertShaderFunctionAttributes(void)::ref;
                qword_1ECE334B8 = 5;
                unk_1ECE334C0 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionConstantMapping(void)::ref;
                qword_1ECE334C8 = 12;
                unk_1ECE334D0 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionBufferMapping(void)::ref;
                qword_1ECE334D8 = 4;
                unk_1ECE334E0 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionTextureMapping(void)::ref;
                qword_1ECE334E8 = 1;
                unk_1ECE334F0 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE33500 = 0;
                unk_1ECE33508 = 0;
                qword_1ECE334F8 = 1;
              }
              qword_1ECE32B10 = (uint64_t)&ggl::daVinciGroundNotCompressedShaderVertexFunctionDescriptor(void)::ref;
              dword_1ECE32B18 = -1833459722;
              if ((v719 & 1) == 0
              {
                ggl::daVinciGroundNotCompressedShaderFragmentFunctionDescriptor(void)::ref = 0x16213AD6ALL;
                qword_1ECE33520 = (uint64_t)"DaVinciGroundNotCompressedShader";
                unk_1ECE33528 = 0;
                qword_1ECE33530 = 0;
                unk_1ECE33538 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionConstantMapping(void)::ref;
                qword_1ECE33540 = 21;
                unk_1ECE33548 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionBufferMapping(void)::ref;
                qword_1ECE33550 = 0;
                unk_1ECE33558 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionTextureMapping(void)::ref;
                qword_1ECE33560 = 12;
                unk_1ECE33568 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionSamplerMapping(void)::ref;
                qword_1ECE33578 = 0;
                unk_1ECE33580 = 0;
                qword_1ECE33570 = 12;
              }
              qword_1ECE32B20 = (uint64_t)&ggl::daVinciGroundNotCompressedShaderFragmentFunctionDescriptor(void)::ref;
              dword_1ECE32B28 = 1645456746;
              qword_1ECE32B30 = (uint64_t)ggl::daVinciGroundNotCompressedShaderShaderConstants(void)::ref;
              unk_1ECE32B38 = 30;
              qword_1ECE32B40 = (uint64_t)ggl::daVinciGroundNotCompressedShaderShaderTextures(void)::ref;
              unk_1ECE32B48 = 13;
              qword_1ECE32B50 = (uint64_t)ggl::daVinciGroundNotCompressedShaderShaderSamplers(void)::ref;
              unk_1ECE32B58 = 13;
            }
          }
          qword_1ECE370A0 = (uint64_t)&ggl::DaVinciGroundNotCompressedShader::typedReflection(void)::ref;
          ggl::DaVinciGroundDepthShader::typedReflection(v458);
          qword_1ECE370A8 = (uint64_t)&ggl::DaVinciGroundDepthShader::typedReflection(void)::ref;
          ggl::DaVinciRibbonShader::typedReflection(v460);
          qword_1ECE370B0 = (uint64_t)&ggl::DaVinciRibbonShader::typedReflection(void)::ref;
          ggl::DaVinciGroundShadowMapShader::typedReflection(v461);
          qword_1ECE370B8 = (uint64_t)&ggl::DaVinciGroundShadowMapShader::typedReflection(void)::ref;
          ggl::LinearDepthShader::typedReflection(v462);
          qword_1ECE370C0 = (uint64_t)&ggl::LinearDepthShader::typedReflection(void)::ref;
          ggl::PackedLinearDepthShader::typedReflection(v463);
          qword_1ECE370C8 = (uint64_t)&ggl::PackedLinearDepthShader::typedReflection(void)::ref;
          ggl::TexturedAnimatedRibbonShader::typedReflection(v464);
          qword_1ECE370D0 = (uint64_t)&ggl::TexturedAnimatedRibbonShader::typedReflection(void)::ref;
          ggl::FlyoverOverlayShader::typedReflection(v465);
          qword_1ECE370D8 = (uint64_t)&ggl::FlyoverOverlayShader::typedReflection(void)::ref;
          ggl::GlobeTexturedShader::typedReflection(v466);
          qword_1ECE370E0 = (uint64_t)&ggl::GlobeTexturedShader::typedReflection(void)::ref;
        }
      }
      qword_1ECE44ED8 = (uint64_t)&StandardLibraryShaders(void)::desc;
      unk_1ECE44EE0 = 151;
      {
        if ((v467 & 1) == 0
        {
          ggl::clearTextureComputeShaderFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("ClearTextureComputeShaderKernel");
          *(_DWORD *)algn_1ECE32C0C = 2;
          qword_1ECE32C10 = (uint64_t)"ClearTextureComputeShader";
          unk_1ECE32C18 = 0;
          qword_1ECE32C20 = 0;
          unk_1ECE32C28 = &ggl::clearTextureComputeShaderFunctionConstantMapping(void)::ref;
          qword_1ECE32C30 = 0;
          unk_1ECE32C38 = &ggl::clearTextureComputeShaderFunctionBufferMapping(void)::ref;
          qword_1ECE32C40 = 0;
          unk_1ECE32C48 = &ggl::clearTextureComputeShaderFunctionTextureMapping(void)::ref;
          qword_1ECE32C50 = 1;
          unk_1ECE32C58 = &ggl::clearTextureComputeShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE32C68 = 0;
          unk_1ECE32C70 = 0;
          qword_1ECE32C60 = 1;
        }
        StandardLibraryComputeShaders(void)::desc = ggl::clearTextureComputeShaderFunctionDescriptor(void)::ref;
        if ((v468 & 1) == 0
        {
          v720 = ggl::crc32::compute<36ul>("DownscaleTextureComputeShaderKernel");
          qword_1ECE32C98 = 0;
          unk_1ECE32CA0 = &ggl::downscaleTextureComputeShaderFunctionConstantMapping(void)::ref;
          qword_1ECE32CA8 = 0;
          unk_1ECE32CB0 = &ggl::downscaleTextureComputeShaderFunctionBufferMapping(void)::ref;
          ggl::downscaleTextureComputeShaderFunctionDescriptor(void)::ref = v720;
          *(_DWORD *)algn_1ECE32C84 = 2;
          qword_1ECE32CB8 = 0;
          unk_1ECE32CC0 = &ggl::downscaleTextureComputeShaderFunctionTextureMapping(void)::ref;
          qword_1ECE32C88 = (uint64_t)"DownscaleTextureComputeShader";
          unk_1ECE32C90 = 0;
          qword_1ECE32CC8 = 2;
          unk_1ECE32CD0 = &ggl::downscaleTextureComputeShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE32CE0 = 0;
          unk_1ECE32CE8 = 0;
          qword_1ECE32CD8 = 2;
        }
        dword_1ECE343F4 = ggl::downscaleTextureComputeShaderFunctionDescriptor(void)::ref;
      }
      qword_1ECE44EE8 = (uint64_t)&StandardLibraryComputeShaders(void)::desc;
      unk_1ECE44EF0 = 2;
      {
        if ((v469 & 1) == 0
        {
          ggl::resetTileShaderFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("ResetTileShaderKernel");
          *(_DWORD *)algn_1ECE3037C = 3;
          qword_1ECE30390 = 0;
          unk_1ECE30398 = &ggl::resetTileShaderFunctionConstantMapping(void)::ref;
          qword_1ECE303A0 = 0;
          unk_1ECE303A8 = &ggl::resetTileShaderFunctionBufferMapping(void)::ref;
          qword_1ECE303B0 = 0;
          unk_1ECE303B8 = &ggl::resetTileShaderFunctionTextureMapping(void)::ref;
          qword_1ECE30380 = (uint64_t)"ResetTileShader";
          unk_1ECE30388 = 0;
          qword_1ECE303C0 = 0;
          unk_1ECE303C8 = &ggl::resetTileShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE303D8 = 0;
          unk_1ECE303E0 = 0;
          qword_1ECE303D0 = 0;
        }
        StandardLibraryTileShaders(void)::desc = ggl::resetTileShaderFunctionDescriptor(void)::ref;
      }
      qword_1ECE44EF8 = (uint64_t)&StandardLibraryTileShaders(void)::desc;
      unk_1ECE44F00 = 1;
      qword_1ECE44F08 = 0;
      unk_1ECE44F10 = 0;
      v2 = a2;
    }
  }
  result = ggl::ShaderLibrary::ShaderLibrary((uint64_t)a1, &ggl::StandardLibrary::typedReflection(void)::desc, v2);
  *a1 = &off_1E42B73E0;
  return result;
}

void ggl::StandardLibraryBundleMTLData::~StandardLibraryBundleMTLData(ggl::StandardLibraryBundleMTLData *this)
{
  ggl::MTLShaderLibraryData::~MTLShaderLibraryData(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::util::LoadImageJob::~LoadImageJob(altitude::util::LoadImageJob *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C68D8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  karo::Job::~Job(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C68D8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  karo::Job::~Job(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::util::LoadImageJob::jobStep(altitude::util::LoadImageJob *this)
{
  int v2;
  char *SubJob;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  pwin_jpg *v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  _QWORD v42[3];
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unsigned __int16 v46[11];
  char v47;

  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  v2 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  if ((v2 & 2) != 0)
  {
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    *((_DWORD *)this + 40) |= 1u;
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    return;
  }
  SubJob = karo::Job::getSubJob((pthread_mutex_t **)this, 0);
  v5 = *(_QWORD *)SubJob;
  v4 = (std::__shared_weak_count *)*((_QWORD *)SubJob + 1);
  v44 = *(_QWORD *)SubJob;
  v45 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (!v5
    || (pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 152)),
        v8 = *(_DWORD *)(v5 + 160),
        pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 152)),
        (v8 & 2) != 0))
  {
    **((_DWORD **)this + 22) = 1;
    (*(void (**)(altitude::util::LoadImageJob *))(*(_QWORD *)this + 16))(this);
    goto LABEL_12;
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5) == 4
    && *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5) == 0x2000000)
  {
    **((_DWORD **)this + 22) = 2;
    (*(void (**)(altitude::util::LoadImageJob *))(*(_QWORD *)this + 16))(this);
LABEL_12:
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    *((_DWORD *)this + 40) |= 1u;
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    goto LABEL_13;
  }
  v11 = *((_QWORD *)this + 24);
  if (!v11)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 72) + 8);
    v16 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5) >= 0xBuLL
      && *v16 == 255
      && v16[1] == 216
      && v16[2] == 255
      && v16[3] == 224
      && v16[6] == 74
      && v16[7] == 70
      && v16[8] == 73
      && v16[9] == 70
      && !v16[10]
      && v15)
    {
      v17 = operator new();
      v18 = (_QWORD *)v17;
      v19 = *((_QWORD *)this + 22);
      v21 = *(_QWORD *)(v19 + 8);
      v20 = *(std::__shared_weak_count **)(v19 + 16);
      v42[2] = v21;
      v43 = v20;
      if (v20)
      {
        v22 = (unint64_t *)&v20->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      karo::Job::Job(v17, *((_QWORD *)this + 1));
      *v18 = &off_1E42C68A0;
      v18[22] = v5;
      v18[23] = v4;
      if (v4)
      {
        v24 = (unint64_t *)&v4->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v18[24] = v21;
      v18[25] = v20;
      if (v20)
      {
        v26 = (unint64_t *)&v20->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = (_QWORD *)operator new();
      *v28 = &off_1E42E8CC8;
      v28[1] = 0;
      v28[2] = 0;
      v28[3] = v18;
      v29 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
      *((_QWORD *)this + 24) = v18;
      *((_QWORD *)this + 25) = v28;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (v43)
      {
        v32 = &v43->__shared_owners_;
        do
          v33 = __ldaxr((unint64_t *)v32);
        while (__stlxr(v33 - 1, (unint64_t *)v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v34 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
      v42[0] = *((_QWORD *)this + 24);
      v42[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        karo::Job::addBlockingSubJob((uint64_t *)this, v42, -1, 1);
        do
          v37 = __ldaxr(v35);
        while (__stlxr(v37 - 1, v35));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      else
      {
        karo::Job::addBlockingSubJob((uint64_t *)this, v42, -1, 1);
      }
      karo::JobManager::queueJob(v15, (_QWORD *)this + 24);
      v4 = v45;
      goto LABEL_13;
    }
    goto LABEL_60;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(v11 + 152));
  v12 = *(_DWORD *)(v11 + 160);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v11 + 152));
  if ((v12 & 1) == 0
    || (v13 = *((_QWORD *)this + 24),
        pthread_mutex_lock(*(pthread_mutex_t **)(v13 + 152)),
        v14 = *(_DWORD *)(v13 + 160),
        pthread_mutex_unlock(*(pthread_mutex_t **)(v13 + 152)),
        (v14 & 2) != 0))
  {
LABEL_60:
    v41 = *(_DWORD *)(*((_QWORD *)this + 1) + 44);
    v38 = (pwin_jpg *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
    v40 = *(_QWORD *)(*((_QWORD *)this + 22) + 8);
    v47 = 0;
    LOBYTE(v46[0]) = 0;
    if ((karo::media::ImageLoader::loadFromChunk(&v41, v38, (unsigned __int8 *)v39, v46, v40) & 1) == 0)
    {
      **((_DWORD **)this + 22) = 3;
      (*(void (**)(altitude::util::LoadImageJob *))(*(_QWORD *)this + 16))(this);
    }
    goto LABEL_12;
  }
  karo::Job::setDone((pthread_mutex_t **)this);
LABEL_13:
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19FDB0CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t karo::Job::setDone(pthread_mutex_t **this)
{
  pthread_mutex_lock(this[19]);
  *((_DWORD *)this + 40) |= 1u;
  return pthread_mutex_unlock(this[19]);
}

void std::__shared_ptr_pointer<altitude::util::LoadImageJob::FigLoaderSubJob *,std::shared_ptr<karo::Job>::__shared_ptr_default_delete<karo::Job,altitude::util::LoadImageJob::FigLoaderSubJob>,std::allocator<altitude::util::LoadImageJob::FigLoaderSubJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::util::LoadImageJob::FigLoaderSubJob *,std::shared_ptr<karo::Job>::__shared_ptr_default_delete<karo::Job,altitude::util::LoadImageJob::FigLoaderSubJob>,std::allocator<altitude::util::LoadImageJob::FigLoaderSubJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void altitude::util::LoadImageJob::FigLoaderSubJob::~FigLoaderSubJob(altitude::util::LoadImageJob::FigLoaderSubJob *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C68A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  karo::Job::~Job(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C68A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  karo::Job::~Job(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::util::LoadImageJob::FigLoaderSubJob::jobStep(altitude::util::LoadImageJob::FigLoaderSubJob *this)
{
  int v2;
  pwin_jpg *v3;
  unsigned int v4;
  int *v5;
  int v7;

  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  v2 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  if ((v2 & 2) == 0)
  {
    v7 = *(_DWORD *)(*((_QWORD *)this + 1) + 44);
    v3 = (pwin_jpg *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 56))(*((_QWORD *)this + 22));
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 48))(*((_QWORD *)this + 22));
    if ((karo::media::JpegLoaderFig::loadFromChunk(&v7, v3, (unsigned __int8 *)v4, *((_QWORD *)this + 24), v5) & 1) == 0)
      (*(void (**)(altitude::util::LoadImageJob::FigLoaderSubJob *))(*(_QWORD *)this + 16))(this);
  }
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  return pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
}

void altitude::util::ComputeAltBoundsJob::~ComputeAltBoundsJob(altitude::util::ComputeAltBoundsJob *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C6980;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  karo::Job::~Job(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C6980;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  karo::Job::~Job(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::util::ComputeAltBoundsJob::jobStep(pthread_mutex_t **this)
{
  int v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  double v7;
  float v8;
  char *v9;
  int v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  int v15;
  float v16;

  pthread_mutex_lock(this[19]);
  v2 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(this[19]);
  if ((v2 & 2) != 0)
    goto LABEL_17;
  v3 = (uint64_t)this[22];
  v4 = (std::__shared_weak_count *)this[23];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = 626172.136 / (double)(1 << *((_BYTE *)this + 193));
  v8 = v7;
  if (!v3)
  {
    *((float *)this + 55) = -v8;
    *((_DWORD *)this + 56) = 0;
    if (!v4)
      goto LABEL_17;
    goto LABEL_13;
  }
  v9 = (char *)(this + 24);
  v15 = -8388609;
  v16 = 3.4028e38;
  v10 = *(_DWORD *)(v3 + 132);
  if (v10 == 16)
  {
    karo::media::DigitalTerrainModel::heightBoundsT<unsigned short>(v3, (uint64_t)v9, &v16, (float *)&v15, *(float *)&v7);
  }
  else if (v10 == 8)
  {
    karo::media::DigitalTerrainModel::heightBoundsT<unsigned char>(v3, (uint64_t)v9, &v16, (float *)&v15, *(float *)&v7);
  }
  v11 = v15;
  *((float *)this + 55) = v16 - v8;
  *((_DWORD *)this + 56) = v11;
  if (v4)
  {
LABEL_13:
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
LABEL_17:
  pthread_mutex_lock(this[19]);
  *((_DWORD *)this + 40) |= 1u;
  return pthread_mutex_unlock(this[19]);
}

void altitude::util::BuildHeightMeshJob::~BuildHeightMeshJob(altitude::util::BuildHeightMeshJob *this)
{
  altitude::util::BuildHeightMeshJob::~BuildHeightMeshJob(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)this = &off_1E42C6948;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (char *)*((_QWORD *)this + 34);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = (char *)*((_QWORD *)this + 34);
    if (!v5)
      goto LABEL_16;
  }
  v6 = (char *)*((_QWORD *)this + 35);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 16;
    }
    while (v6 != v5);
    v7 = (char *)*((_QWORD *)this + 34);
  }
  *((_QWORD *)this + 35) = v5;
  operator delete(v7);
LABEL_16:
  v11 = *((_QWORD *)this + 31);
  if (v11)
  {
    v12 = *((_QWORD *)this + 32);
    v13 = (void *)*((_QWORD *)this + 31);
    if (v12 != v11)
    {
      do
      {
        v14 = *(std::__shared_weak_count **)(v12 - 8);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 16;
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 31);
    }
    *((_QWORD *)this + 32) = v11;
    operator delete(v13);
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if ((*((char *)this + 199) & 0x80000000) == 0)
        goto LABEL_33;
      goto LABEL_32;
    }
  }
  if (*((char *)this + 199) < 0)
LABEL_32:
    operator delete(*((void **)this + 22));
LABEL_33:
  karo::Job::~Job(this);
}

uint64_t altitude::util::BuildHeightMeshJob::jobStep(altitude::util::BuildHeightMeshJob *this)
{
  int v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  const QuadTile *v11;
  unsigned int v12;
  float v13;
  int v14;
  size_t v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  __int128 *p_dst;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  std::string *v31;
  int v32;
  _BYTE *v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  _QWORD *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  int64_t v55;
  _QWORD *shared_weak_owners;
  _QWORD *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  char ***v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  size_t v75;
  unint64_t v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  int v80;
  size_t v81;
  unint64_t v82;
  __int128 *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  const char *v87;
  unsigned __int8 v88;
  uint64_t v89;
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  const char *v104;
  unsigned __int8 v105;
  uint64_t v106;
  unsigned __int8 v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  const char *v118;
  unsigned __int8 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  unsigned __int8 v123;
  _QWORD *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  const char *v128;
  unsigned __int8 v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  unsigned __int8 v133;
  _QWORD *v134;
  unint64_t *v135;
  uint64_t v136;
  __int128 v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  int v143;
  size_t v144;
  unint64_t v145;
  __int128 *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  __int128 *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  int64x2_t *v160;
  uint64_t v161;
  _QWORD *v162;
  unint64_t v163;
  void *v164;
  unint64_t shared_owners;
  std::__shared_weak_count_vtbl *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  unsigned __int8 v196;
  uint64_t v197;
  geo::read_write_lock *v198;
  const char *v199;
  malloc_zone_t *zone;
  uint64_t v201;
  geo::read_write_lock *v202;
  const char *v203;
  malloc_zone_t *v204;
  uint64_t v205;
  geo::read_write_lock *v206;
  const char *v207;
  malloc_zone_t *v208;
  int v209;
  uint64_t v210;
  geo::read_write_lock *v211;
  const char *v212;
  malloc_zone_t *v213;
  unsigned __int8 v214;
  uint64_t v215;
  geo::read_write_lock *v216;
  const char *v217;
  malloc_zone_t *v218;
  uint64_t v219;
  geo::read_write_lock *v220;
  const char *v221;
  malloc_zone_t *v222;
  uint64_t v223;
  geo::read_write_lock *v224;
  const char *v225;
  malloc_zone_t *v226;
  int v227;
  uint64_t v228;
  geo::read_write_lock *v229;
  const char *v230;
  malloc_zone_t *v231;
  const char *v232;
  const char *v233;
  unint64_t v234;
  char **v235;
  _QWORD *v236;
  _QWORD *v237;
  _BYTE *__src;
  void *__srca[2];
  std::__shared_weak_count *v240;
  std::__shared_weak_count *v241;
  char *v242;
  __int128 v243;
  std::__shared_weak_count *v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  __int128 v247;
  void *__p[2];
  uint64_t v249;
  int v250;
  _OWORD v251[3];
  uint64_t v252;
  _WORD v253[26];
  int v254;
  int v255;
  char v256;
  __int128 __dst;
  int64_t v258;

  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  v2 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  if ((v2 & 2) != 0)
    goto LABEL_262;
  v3 = *((_QWORD *)this + 25);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v245 = v3;
    v246 = v4;
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  else
  {
    v245 = *((_QWORD *)this + 25);
    v246 = 0;
  }
  v249 = 0;
  *(_OWORD *)__p = 0u;
  v247 = 0u;
  v250 = -1;
  memset(v251, 0, sizeof(v251));
  v252 = 0x3FF0000000000000;
  v253[24] = 255;
  v255 = 0;
  v254 = 0;
  v256 = 0;
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v11 = (const QuadTile *)((char *)this + 216);
  v12 = *((_DWORD *)this + 60);
  v13 = *((float *)this + 76);
  if (!*((_BYTE *)this + 300))
  {
    altitude::HeightMeshBuilder::buildHeightMesh((uint64_t)&v245, v11, v12, 0, v13);
    altitude::HeightMeshBuilder::createGlobeElement((uint64_t *)&__dst, (uint64_t)&v245, (const void **)this + 22, *((_QWORD *)this + 1), (uint64_t)this + 248, (uint64_t **)this + 34);
    v20 = __dst;
    __dst = 0uLL;
    v21 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
    *(_OWORD *)((char *)this + 312) = v20;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (!*((_QWORD *)&__dst + 1))
      goto LABEL_250;
    v25 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    goto LABEL_248;
  }
  altitude::HeightMeshBuilder::buildHeightMesh((uint64_t)&v245, v11, v12, 2u, v13);
  v14 = *((char *)this + 199);
  if (v14 >= 0)
    v15 = *((unsigned __int8 *)this + 199);
  else
    v15 = *((_QWORD *)this + 23);
  v16 = v15 + 8;
  if (v15 + 8 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_263;
  v17 = *((_QWORD *)this + 1);
  v18 = *((float *)this + 74);
  if (v16 >= 0x17)
  {
    v27 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v27 = v16 | 7;
    v28 = v27 + 1;
    p_dst = (__int128 *)operator new(v27 + 1);
    *((_QWORD *)&__dst + 1) = v15 + 8;
    v258 = v28 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    v258 = 0;
    __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(v258) = v15 + 8;
    if (!v15)
      goto LABEL_38;
  }
  if (v14 >= 0)
    v29 = (char *)this + 176;
  else
    v29 = (char *)*((_QWORD *)this + 22);
  memmove(p_dst, v29, v15);
LABEL_38:
  strcpy((char *)p_dst + v15, "/Element");
  v30 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v30 + 1) = 0;
  *((_QWORD *)v30 + 2) = 0;
  *(_QWORD *)v30 = &off_1E42E6140;
  *((_QWORD *)v30 + 3) = off_1E42BE278;
  v242 = v30 + 24;
  v31 = (std::string *)(v30 + 32);
  v32 = SHIBYTE(v258);
  if (SHIBYTE(v258) < 0)
  {
    std::string::__init_copy_ctor_external(v31, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&v31->__r_.__value_.__l.__data_ = __dst;
    *((_QWORD *)v30 + 6) = v258;
  }
  v235 = (char **)((char *)this + 176);
  *((_QWORD *)v30 + 3) = &off_1E42C4580;
  *((_QWORD *)v30 + 7) = 0;
  v30[64] = 1;
  *(_OWORD *)(v30 + 72) = 0u;
  *(_OWORD *)(v30 + 88) = 0u;
  *(_OWORD *)(v30 + 104) = 0u;
  *(_OWORD *)(v30 + 120) = 0u;
  *((_QWORD *)v30 + 17) = 0;
  v30[144] = 1;
  *((_QWORD *)v30 + 19) = 0;
  *((_QWORD *)v30 + 20) = 0;
  if (v32 < 0)
    operator delete((void *)__dst);
  v33 = __p[1];
  v34 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v17 + 8) + 40) + 8);
  v36 = v34[13];
  v35 = (std::__shared_weak_count *)v34[14];
  v237 = v34;
  __src = __p[0];
  if (v35)
  {
    v37 = (unint64_t *)&v35->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v240 = v35;
  v39 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v39->__shared_owners_ = 0;
  v40 = (unint64_t *)&v39->__shared_owners_;
  v39->__shared_weak_owners_ = 0;
  v39->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1980;
  v41 = &v39[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v39[1], qword_1EE5724F8, 2, 1, 6, 1);
  v39[9].__shared_owners_ = (uint64_t)ggl::TileBaseSurface::Element::reflection(void)::reflection;
  v241 = v39;
  v39[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9250;
  v42 = v237[21];
  v43 = (std::__shared_weak_count *)v237[22];
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = (std::__shared_weak_count *)operator new(0x100uLL);
  v46->__shared_owners_ = 0;
  v47 = (unint64_t *)&v46->__shared_owners_;
  v46->__shared_weak_owners_ = 0;
  v46->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF760;
  v244 = v46;
  v48 = &v46[1].__vftable;
  v49 = v240;
  v236 = v48;
  if (v240)
  {
    v50 = (unint64_t *)&v240->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    ggl::PipelineSetup::PipelineSetup(v48, v36, (uint64_t)v240);
    v52 = (unint64_t *)&v240->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v48, v36, 0);
  }
  *(_QWORD *)&v54 = v30 + 24;
  *((_QWORD *)&v54 + 1) = v30;
  v243 = v54;
  v55 = v33 - __src;
  v244[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7440;
  shared_weak_owners = (_QWORD *)v244[3].__shared_weak_owners_;
  *shared_weak_owners = v41;
  shared_weak_owners[1] = 0;
  v57 = (_QWORD *)v244[7].__shared_weak_owners_;
  do
    v58 = __ldxr(v40);
  while (__stxr(v58 + 1, v40));
  v59 = (std::__shared_weak_count *)v57[1];
  *v57 = v41;
  v57[1] = v241;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v244[3].__shared_weak_owners_;
  *(_QWORD *)(v62 + 16) = v42;
  *(_QWORD *)(v62 + 24) = 0;
  v63 = v244[7].__shared_weak_owners_;
  if (v43)
  {
    v64 = (unint64_t *)&v43->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  v66 = *(std::__shared_weak_count **)(v63 + 24);
  *(_QWORD *)(v63 + 16) = v42;
  *(_QWORD *)(v63 + 24) = v43;
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v43)
  {
    v69 = (unint64_t *)&v43->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v71 = *(char ****)(v247 + 216);
  if (v71 == &ggl::CommonMesh::bufferPos4UVReflection)
  {
    v234 = v55;
    v73 = operator new();
    v74 = *((char *)this + 199);
    if (v74 >= 0)
      v75 = *((unsigned __int8 *)this + 199);
    else
      v75 = *((_QWORD *)this + 23);
    v76 = v75 + 5;
    if (v75 + 5 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_263;
    v77 = v73;
    if (v76 >= 0x17)
    {
      v84 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v76 | 7) != 0x17)
        v84 = v76 | 7;
      v85 = v84 + 1;
      v78 = (__int128 *)operator new(v84 + 1);
      *((_QWORD *)&__dst + 1) = v75 + 5;
      v258 = v85 | 0x8000000000000000;
      *(_QWORD *)&__dst = v78;
    }
    else
    {
      v258 = 0;
      __dst = 0uLL;
      v78 = &__dst;
      HIBYTE(v258) = v75 + 5;
      if (!v75)
        goto LABEL_101;
    }
    if (v74 >= 0)
      v86 = (char *)this + 176;
    else
      v86 = *v235;
    memmove(v78, v86, v75);
LABEL_101:
    strcpy((char *)v78 + v75, "/mesh");
    if (v258 >= 0)
      v87 = (const char *)&__dst;
    else
      v87 = (const char *)__dst;
    if ((v88 & 1) == 0
    {
      if ((v196 & 1) == 0
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
      *(_QWORD *)algn_1EE585510 = 1;
    }
    *(_QWORD *)(v77 + 32) = 0;
    *(_QWORD *)(v77 + 40) = 0;
    *(_DWORD *)(v77 + 48) = 0;
    *(_QWORD *)v77 = &off_1E42BBC08;
    *(_QWORD *)(v77 + 8) = v87;
    *(_QWORD *)(v77 + 16) = &unk_1E42BBC28;
    *(_QWORD *)(v77 + 24) = 0;
    *(_QWORD *)(v77 + 64) = 0;
    v89 = v77 + 64;
    *(_QWORD *)(v77 + 56) = &ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
    *(_QWORD *)(v77 + 72) = 0;
    *(_QWORD *)(v77 + 80) = 0;
    {
      v197 = operator new();
      *(_QWORD *)(v197 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v197 + 24) = "GeoGL";
      *(_OWORD *)(v197 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v197 = &off_1E42B5668;
      *(_QWORD *)(v197 + 8) = "GeoGL";
      *(_OWORD *)(v197 + 72) = 0u;
      *(_OWORD *)(v197 + 88) = 0u;
      *(_OWORD *)(v197 + 104) = 0u;
      *(_OWORD *)(v197 + 120) = 0u;
      *(_OWORD *)(v197 + 136) = 0u;
      *(_OWORD *)(v197 + 152) = 0u;
      *(_OWORD *)(v197 + 168) = 0u;
      *(_OWORD *)(v197 + 184) = 0u;
      *(_OWORD *)(v197 + 200) = 0u;
      *(_OWORD *)(v197 + 216) = 0u;
      *(_OWORD *)(v197 + 232) = 0u;
      *(_QWORD *)(v197 + 248) = 0;
      *(_OWORD *)(v197 + 56) = 0u;
      v198 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v197 + 56), 0);
      if ((_DWORD)v198)
        geo::read_write_lock::logFailure(v198, (uint64_t)"initialization", v199);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v197 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v197 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v197;
    }
    v91 = ggl::Allocator::instance(void)::alloc;
    *(_QWORD *)(v77 + 120) = 0;
    *(_QWORD *)(v77 + 96) = 0;
    *(_QWORD *)(v77 + 104) = 0;
    *(_QWORD *)(v77 + 88) = v91;
    {
      v201 = operator new();
      *(_QWORD *)(v201 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v201 + 24) = "GeoGL";
      *(_OWORD *)(v201 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v201 = &off_1E42B5668;
      *(_QWORD *)(v201 + 8) = "GeoGL";
      *(_OWORD *)(v201 + 72) = 0u;
      *(_OWORD *)(v201 + 88) = 0u;
      *(_OWORD *)(v201 + 104) = 0u;
      *(_OWORD *)(v201 + 120) = 0u;
      *(_OWORD *)(v201 + 136) = 0u;
      *(_OWORD *)(v201 + 152) = 0u;
      *(_OWORD *)(v201 + 168) = 0u;
      *(_OWORD *)(v201 + 184) = 0u;
      *(_OWORD *)(v201 + 200) = 0u;
      *(_OWORD *)(v201 + 216) = 0u;
      *(_OWORD *)(v201 + 232) = 0u;
      *(_QWORD *)(v201 + 248) = 0;
      *(_OWORD *)(v201 + 56) = 0u;
      v202 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v201 + 56), 0);
      if ((_DWORD)v202)
        geo::read_write_lock::logFailure(v202, (uint64_t)"initialization", v203);
      v204 = malloc_create_zone(0, 0);
      *(_QWORD *)(v201 + 48) = v204;
      malloc_set_zone_name(v204, "GeoGL");
      *(_QWORD *)(v201 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v201;
    }
    *(_QWORD *)(v77 + 128) = ggl::Allocator::instance(void)::alloc;
    *(_QWORD *)(v77 + 136) = 0;
    *(_QWORD *)(v77 + 112) = v77 + 120;
    *(_QWORD *)v77 = &off_1E42BD238;
    *(_QWORD *)(v77 + 16) = &unk_1E42BD258;
    v92 = *(_QWORD *)(v77 + 64);
    v93 = *(_QWORD *)(*(_QWORD *)(v77 + 56) + 8);
    v94 = *(_QWORD *)(v77 + 72);
    v95 = (v94 - v92) >> 4;
    v96 = v93 - v95;
    if (v93 <= v95)
    {
      if (v93 < v95)
      {
        v97 = v92 + 16 * v93;
        while (v94 != v97)
        {
          v98 = *(std::__shared_weak_count **)(v94 - 8);
          if (v98)
          {
            v99 = (unint64_t *)&v98->__shared_owners_;
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v98->__on_zero_shared)(v98, v96);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          v94 -= 16;
        }
        *(_QWORD *)(v77 + 72) = v97;
      }
    }
    else
    {
      std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(v77 + 64, v96);
    }
    *(_QWORD *)v77 = &off_1E42B57A8;
    *(_QWORD *)(v77 + 16) = &unk_1E42B57C8;
    v118 = "/VertexData";
    if (v87)
      v118 = v87;
    v232 = v118;
    {
      v205 = operator new();
      *(_QWORD *)(v205 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v205 + 24) = "GeoGL";
      *(_OWORD *)(v205 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v205 = &off_1E42B5668;
      *(_QWORD *)(v205 + 8) = "GeoGL";
      *(_OWORD *)(v205 + 72) = 0u;
      *(_OWORD *)(v205 + 88) = 0u;
      *(_OWORD *)(v205 + 104) = 0u;
      *(_OWORD *)(v205 + 120) = 0u;
      *(_OWORD *)(v205 + 136) = 0u;
      *(_OWORD *)(v205 + 152) = 0u;
      *(_OWORD *)(v205 + 168) = 0u;
      *(_OWORD *)(v205 + 184) = 0u;
      *(_OWORD *)(v205 + 200) = 0u;
      *(_OWORD *)(v205 + 216) = 0u;
      *(_OWORD *)(v205 + 232) = 0u;
      *(_QWORD *)(v205 + 248) = 0;
      *(_OWORD *)(v205 + 56) = 0u;
      v206 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v205 + 56), 0);
      if ((_DWORD)v206)
        geo::read_write_lock::logFailure(v206, (uint64_t)"initialization", v207);
      v208 = malloc_create_zone(0, 0);
      *(_QWORD *)(v205 + 48) = v208;
      malloc_set_zone_name(v208, "GeoGL");
      *(_QWORD *)(v205 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v205;
    }
    v120 = ggl::Allocator::instance(void)::alloc;
    v121 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
    *(_QWORD *)v121 = &off_1E42DF958;
    *(_QWORD *)(v121 + 8) = 0;
    *(_QWORD *)(v121 + 32) = &off_1E42B5748;
    *(_QWORD *)(v121 + 16) = 0;
    *(_QWORD *)(v121 + 24) = v120;
    *(_QWORD *)(v121 + 40) = 32;
    *(_DWORD *)(v121 + 48) = 6;
    v122 = 0uLL;
    *(_OWORD *)(v121 + 56) = 0u;
    *(_OWORD *)(v121 + 72) = 0u;
    *(_OWORD *)(v121 + 88) = 0u;
    *(_OWORD *)(v121 + 104) = 0u;
    *(_QWORD *)(v121 + 120) = 0;
    if ((v123 & 1) == 0)
    {
      v122 = 0uLL;
      if (v209)
      {
        v210 = operator new();
        *(_QWORD *)(v210 + 16) = 0xA3D02C1100000005;
        *(_QWORD *)(v210 + 24) = "GeoGL";
        *(_OWORD *)(v210 + 32) = xmmword_19FFB2DE0;
        *(_QWORD *)v210 = &off_1E42B5668;
        *(_QWORD *)(v210 + 8) = "GeoGL";
        *(_OWORD *)(v210 + 72) = 0u;
        *(_OWORD *)(v210 + 88) = 0u;
        *(_OWORD *)(v210 + 104) = 0u;
        *(_OWORD *)(v210 + 120) = 0u;
        *(_OWORD *)(v210 + 136) = 0u;
        *(_OWORD *)(v210 + 152) = 0u;
        *(_OWORD *)(v210 + 168) = 0u;
        *(_OWORD *)(v210 + 184) = 0u;
        *(_OWORD *)(v210 + 200) = 0u;
        *(_OWORD *)(v210 + 216) = 0u;
        *(_OWORD *)(v210 + 232) = 0u;
        *(_QWORD *)(v210 + 248) = 0;
        *(_OWORD *)(v210 + 56) = 0u;
        v211 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v210 + 56), 0);
        if ((_DWORD)v211)
          geo::read_write_lock::logFailure(v211, (uint64_t)"initialization", v212);
        v213 = malloc_create_zone(0, 0);
        *(_QWORD *)(v210 + 48) = v213;
        malloc_set_zone_name(v213, "GeoGL");
        *(_QWORD *)(v210 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        ggl::Allocator::instance(void)::alloc = v210;
        v122 = 0uLL;
      }
    }
    *(_QWORD *)(v121 + 128) = ggl::Allocator::instance(void)::alloc;
    *(_QWORD *)(v121 + 136) = 0;
    *(_OWORD *)(v121 + 200) = v122;
    *(_OWORD *)(v121 + 184) = v122;
    *(_OWORD *)(v121 + 168) = v122;
    *(_QWORD *)(v121 + 216) = 0;
    *(_QWORD *)(v121 + 224) = -1;
    *(_OWORD *)(v121 + 152) = xmmword_19FFB2DD0;
    *(_DWORD *)(v121 + 144) = 0;
    *(_QWORD *)(v121 + 32) = &off_1E42B75A0;
    *(_QWORD *)(v121 + 240) = v232;
    *(_QWORD *)(v121 + 248) = &ggl::CommonMesh::bufferPos4UVReflection;
    *(_QWORD *)(v121 + 232) = &unk_1E42B75C0;
    v124 = *(_QWORD **)v89;
    v125 = *(std::__shared_weak_count **)(*(_QWORD *)v89 + 8);
    *v124 = v121 + 32;
    v124[1] = v121;
    if (v125)
    {
      v126 = (unint64_t *)&v125->__shared_owners_;
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
LABEL_159:
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
LABEL_161:
    if (SHIBYTE(v258) < 0)
      operator delete((void *)__dst);
    v136 = *(_QWORD *)(v77 + 64);
    v137 = v247;
    if (*((_QWORD *)&v247 + 1))
    {
      v138 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
      do
        v139 = __ldxr(v138);
      while (__stxr(v139 + 1, v138));
    }
    v140 = *(std::__shared_weak_count **)(v136 + 8);
    *(_OWORD *)v136 = v137;
    if (v140)
    {
      v141 = (unint64_t *)&v140->__shared_owners_;
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    v143 = *((char *)this + 199);
    if (v143 >= 0)
      v144 = *((unsigned __int8 *)this + 199);
    else
      v144 = *((_QWORD *)this + 23);
    v145 = v144 + 10;
    if (v144 + 10 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v145 >= 0x17)
      {
        v147 = (v145 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v145 | 7) != 0x17)
          v147 = v145 | 7;
        v148 = v147 + 1;
        v146 = (__int128 *)operator new(v147 + 1);
        *((_QWORD *)&__dst + 1) = v144 + 10;
        v258 = v148 | 0x8000000000000000;
        *(_QWORD *)&__dst = v146;
      }
      else
      {
        v258 = 0;
        __dst = 0uLL;
        v146 = &__dst;
        HIBYTE(v258) = v144 + 10;
        if (!v144)
          goto LABEL_185;
      }
      if (v143 >= 0)
        v149 = (char *)this + 176;
      else
        v149 = *v235;
      memmove(v146, v149, v144);
LABEL_185:
      strcpy((char *)v146 + v144, "/indexdata");
      if (v258 >= 0)
        v150 = &__dst;
      else
        v150 = (__int128 *)__dst;
      v151 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v151->__shared_owners_ = 0;
      v152 = (unint64_t *)&v151->__shared_owners_;
      v151->__shared_weak_owners_ = 0;
      v151->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
      v153 = (v234 >> 1);
      v154 = ggl::BufferData::BufferData((uint64_t)&v151[1], 2, 1, 0, 7, v153);
      LODWORD(v151[10].__vftable) = 0;
      v151[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
      v151[1].__shared_owners_ = 2;
      v151[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
      v151[9].__shared_weak_owners_ = (uint64_t)v150;
      do
        v155 = __ldxr(v152);
      while (__stxr(v155 + 1, v152));
      v156 = *(std::__shared_weak_count **)(v77 + 104);
      *(_QWORD *)(v77 + 96) = v154;
      *(_QWORD *)(v77 + 104) = v151;
      if (v156)
      {
        v157 = (unint64_t *)&v156->__shared_owners_;
        do
          v158 = __ldaxr(v157);
        while (__stlxr(v158 - 1, v157));
        if (!v158)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
      }
      do
        v159 = __ldaxr(v152);
      while (__stlxr(v159 - 1, v152));
      if (v159)
      {
        if ((SHIBYTE(v258) & 0x80000000) == 0)
        {
LABEL_198:
          v160 = (int64x2_t *)operator new();
          v161 = v237[9];
          v160->i64[0] = (uint64_t)&off_1E42B59B0;
          v160[1].i64[0] = (uint64_t)"";
          v160[1].i64[1] = v161;
          v160[2].i64[0] = (uint64_t)v236;
          v160[2].i32[2] = 0;
          v160[3].i64[0] = 0;
          v160[3].i32[2] = 1065353216;
          v160[4].i64[0] = v77;
          v160[4].i64[1] = 0;
          v160[5].i64[0] = 0;
          v160[5].i64[1] = 0;
          v160[6] = vdupq_n_s64(1uLL);
          v160[7].i64[0] = 0;
          v162 = *(_QWORD **)(v77 + 96);
          v163 = v162[1] * v153;
          if (v163)
            v164 = (void *)v162[9];
          else
            v164 = 0;
          memcpy(v164, __src, 2 * v153);
          shared_owners = v241[1].__shared_owners_;
          if (shared_owners)
          {
            v166 = v241[4].__vftable;
            *(_OWORD *)&v166[1].__get_deleter = xmmword_19FFB3850;
            *(float *)&v166[2].~__shared_weak_count = v18;
            *((float *)&v166[2].~__shared_weak_count + 1) = 1.0 / v18;
            if (v166)
            {
              if (v241[3].__shared_weak_owners_ > shared_owners)
                shared_owners = v241[3].__shared_weak_owners_;
              v241[3].__shared_owners_ = 0;
              v241[3].__shared_weak_owners_ = shared_owners;
            }
          }
          else
          {
            MEMORY[0x40] = xmmword_19FFB3850;
            MEMORY[0x50] = LODWORD(v18);
            MEMORY[0x54] = 1.0 / v18;
          }
          v72 = operator new();
          do
            v167 = __ldxr(v47);
          while (__stxr(v167 + 1, v47));
          v168 = (std::__shared_weak_count *)operator new();
          v169 = v168;
          v168->__shared_owners_ = 0;
          v170 = (unint64_t *)&v168->__shared_owners_;
          v168->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E7C28;
          v168->__shared_weak_owners_ = 0;
          v168[1].__vftable = (std::__shared_weak_count_vtbl *)v77;
          *(_OWORD *)(v72 + 8) = 0u;
          *(_OWORD *)(v72 + 24) = 0u;
          *(_QWORD *)(v72 + 56) = 0x3FF0000000000000;
          *(_OWORD *)(v72 + 40) = 0u;
          *(_QWORD *)v72 = &off_1E42C3938;
          *(_QWORD *)(v72 + 160) = 0xFFFFFFFF00000000;
          *(_WORD *)(v72 + 168) = 0;
          *(_QWORD *)(v72 + 172) = -1;
          *(_BYTE *)(v72 + 180) = 1;
          *(_QWORD *)(v72 + 184) = v160;
          *(_QWORD *)(v72 + 192) = v236;
          *(_QWORD *)(v72 + 200) = v244;
          do
            v171 = __ldxr(v47);
          while (__stxr(v171 + 1, v47));
          *(_QWORD *)(v72 + 208) = 0;
          *(_QWORD *)(v72 + 216) = v77;
          *(_QWORD *)(v72 + 224) = v168;
          do
            v172 = __ldxr(v170);
          while (__stxr(v172 + 1, v170));
          __asm { FMOV            V0.2D, #1.0 }
          *(_OWORD *)__srca = _Q0;
          *(_OWORD *)(v72 + 232) = _Q0;
          *(_QWORD *)(v72 + 248) = 0x3FF0000000000000;
          *(_QWORD *)(v72 + 256) = 0;
          *(_QWORD *)(v72 + 264) = 0;
          *(_QWORD *)(v72 + 272) = 0;
          do
            v178 = __ldaxr(v170);
          while (__stlxr(v178 - 1, v170));
          if (!v178)
          {
            ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
            std::__shared_weak_count::__release_weak(v169);
          }
          do
            v179 = __ldaxr(v47);
          while (__stlxr(v179 - 1, v47));
          if (!v179)
          {
            ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
            std::__shared_weak_count::__release_weak(v244);
          }
          v180 = (_QWORD *)v160[2].i64[0];
          if (v180[9] != v180[8])
          {
            v181 = 0;
            do
            {
              (*(void (**)(_QWORD *, unint64_t))(*v180 + 16))(v180, v181++);
              v180 = (_QWORD *)v160[2].i64[0];
            }
            while (v181 < (uint64_t)(v180[9] - v180[8]) >> 4);
          }
          if (v180[13] != v180[12])
          {
            v182 = 0;
            do
            {
              (*(void (**)(_QWORD *, unint64_t))(*v180 + 24))(v180, v182++);
              v180 = (_QWORD *)v160[2].i64[0];
            }
            while (v182 < (uint64_t)(v180[13] - v180[12]) >> 3);
          }
          (*(void (**)(uint64_t, _WORD *))(*(_QWORD *)v72 + 32))(v72, v253);
          (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v72 + 16))(v72, v251);
          *(_OWORD *)(v72 + 232) = *(_OWORD *)__srca;
          *(_QWORD *)(v72 + 248) = 0x3FF0000000000000;
          if (v164)
          {
            v49 = v240;
            if (v163)
            {
              v183 = v162[8];
              if (v183 <= v163)
                v183 = v163;
              v162[7] = 0;
              v162[8] = v183;
            }
          }
          else
          {
            v49 = v240;
          }
          goto LABEL_234;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
        if ((SHIBYTE(v258) & 0x80000000) == 0)
          goto LABEL_198;
      }
      operator delete((void *)__dst);
      goto LABEL_198;
    }
LABEL_263:
    abort();
  }
  if (v71 == &ggl::TileBaseSurface::p3T2T2BufferReflection)
  {
    v234 = v55;
    v79 = operator new();
    v80 = *((char *)this + 199);
    if (v80 >= 0)
      v81 = *((unsigned __int8 *)this + 199);
    else
      v81 = *((_QWORD *)this + 23);
    v82 = v81 + 5;
    if (v81 + 5 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_263;
    v77 = v79;
    if (v82 >= 0x17)
    {
      v101 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v82 | 7) != 0x17)
        v101 = v82 | 7;
      v102 = v101 + 1;
      v83 = (__int128 *)operator new(v101 + 1);
      *((_QWORD *)&__dst + 1) = v81 + 5;
      v258 = v102 | 0x8000000000000000;
      *(_QWORD *)&__dst = v83;
    }
    else
    {
      v258 = 0;
      __dst = 0uLL;
      v83 = &__dst;
      HIBYTE(v258) = v81 + 5;
      if (!v81)
        goto LABEL_125;
    }
    if (v80 >= 0)
      v103 = (char *)this + 176;
    else
      v103 = *v235;
    memmove(v83, v103, v81);
LABEL_125:
    strcpy((char *)v83 + v81, "/mesh");
    if (v258 >= 0)
      v104 = (const char *)&__dst;
    else
      v104 = (const char *)__dst;
    if ((v105 & 1) == 0
    {
      if ((v214 & 1) == 0
      {
        ggl::MeshTyped<ggl::TileBaseSurface::P3T2T2Buffer>::attributesReflection(void)::r = (uint64_t)&ggl::TileBaseSurface::p3T2T2BufferReflection;
      }
      ggl::MeshTyped<ggl::TileBaseSurface::P3T2T2Buffer>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TileBaseSurface::P3T2T2Buffer>::attributesReflection(void)::r;
      unk_1EE576280 = 1;
    }
    *(_QWORD *)(v77 + 32) = 0;
    *(_QWORD *)(v77 + 40) = 0;
    *(_DWORD *)(v77 + 48) = 0;
    *(_QWORD *)v77 = &off_1E42BBC08;
    *(_QWORD *)(v77 + 8) = v104;
    *(_QWORD *)(v77 + 16) = &unk_1E42BBC28;
    *(_QWORD *)(v77 + 24) = 0;
    *(_QWORD *)(v77 + 56) = &ggl::MeshTyped<ggl::TileBaseSurface::P3T2T2Buffer>::typedReflection(void)::r;
    *(_QWORD *)(v77 + 64) = 0;
    v106 = v77 + 64;
    *(_QWORD *)(v77 + 72) = 0;
    *(_QWORD *)(v77 + 80) = 0;
    {
      v215 = operator new();
      *(_QWORD *)(v215 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v215 + 24) = "GeoGL";
      *(_OWORD *)(v215 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v215 = &off_1E42B5668;
      *(_QWORD *)(v215 + 8) = "GeoGL";
      *(_OWORD *)(v215 + 72) = 0u;
      *(_OWORD *)(v215 + 88) = 0u;
      *(_OWORD *)(v215 + 104) = 0u;
      *(_OWORD *)(v215 + 120) = 0u;
      *(_OWORD *)(v215 + 136) = 0u;
      *(_OWORD *)(v215 + 152) = 0u;
      *(_OWORD *)(v215 + 168) = 0u;
      *(_OWORD *)(v215 + 184) = 0u;
      *(_OWORD *)(v215 + 200) = 0u;
      *(_OWORD *)(v215 + 216) = 0u;
      *(_OWORD *)(v215 + 232) = 0u;
      *(_QWORD *)(v215 + 248) = 0;
      *(_OWORD *)(v215 + 56) = 0u;
      v216 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v215 + 56), 0);
      if ((_DWORD)v216)
        geo::read_write_lock::logFailure(v216, (uint64_t)"initialization", v217);
      v218 = malloc_create_zone(0, 0);
      *(_QWORD *)(v215 + 48) = v218;
      malloc_set_zone_name(v218, "GeoGL");
      *(_QWORD *)(v215 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v215;
    }
    v108 = ggl::Allocator::instance(void)::alloc;
    *(_QWORD *)(v77 + 120) = 0;
    *(_QWORD *)(v77 + 96) = 0;
    *(_QWORD *)(v77 + 104) = 0;
    *(_QWORD *)(v77 + 88) = v108;
    {
      v219 = operator new();
      *(_QWORD *)(v219 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v219 + 24) = "GeoGL";
      *(_OWORD *)(v219 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v219 = &off_1E42B5668;
      *(_QWORD *)(v219 + 8) = "GeoGL";
      *(_OWORD *)(v219 + 72) = 0u;
      *(_OWORD *)(v219 + 88) = 0u;
      *(_OWORD *)(v219 + 104) = 0u;
      *(_OWORD *)(v219 + 120) = 0u;
      *(_OWORD *)(v219 + 136) = 0u;
      *(_OWORD *)(v219 + 152) = 0u;
      *(_OWORD *)(v219 + 168) = 0u;
      *(_OWORD *)(v219 + 184) = 0u;
      *(_OWORD *)(v219 + 200) = 0u;
      *(_OWORD *)(v219 + 216) = 0u;
      *(_OWORD *)(v219 + 232) = 0u;
      *(_QWORD *)(v219 + 248) = 0;
      *(_OWORD *)(v219 + 56) = 0u;
      v220 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v219 + 56), 0);
      if ((_DWORD)v220)
        geo::read_write_lock::logFailure(v220, (uint64_t)"initialization", v221);
      v222 = malloc_create_zone(0, 0);
      *(_QWORD *)(v219 + 48) = v222;
      malloc_set_zone_name(v222, "GeoGL");
      *(_QWORD *)(v219 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v219;
    }
    *(_QWORD *)(v77 + 128) = ggl::Allocator::instance(void)::alloc;
    *(_QWORD *)(v77 + 136) = 0;
    *(_QWORD *)(v77 + 112) = v77 + 120;
    *(_QWORD *)v77 = &off_1E42BD8F8;
    *(_QWORD *)(v77 + 16) = &unk_1E42BD918;
    v109 = *(_QWORD *)(v77 + 64);
    v110 = *(_QWORD *)(*(_QWORD *)(v77 + 56) + 8);
    v111 = *(_QWORD *)(v77 + 72);
    v112 = (v111 - v109) >> 4;
    v113 = v110 - v112;
    if (v110 <= v112)
    {
      if (v110 < v112)
      {
        v114 = v109 + 16 * v110;
        while (v111 != v114)
        {
          v115 = *(std::__shared_weak_count **)(v111 - 8);
          if (v115)
          {
            v116 = (unint64_t *)&v115->__shared_owners_;
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v115->__on_zero_shared)(v115, v113);
              std::__shared_weak_count::__release_weak(v115);
            }
          }
          v111 -= 16;
        }
        *(_QWORD *)(v77 + 72) = v114;
      }
    }
    else
    {
      std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(v77 + 64, v113);
    }
    *(_QWORD *)v77 = &off_1E42B7400;
    *(_QWORD *)(v77 + 16) = &unk_1E42B7420;
    v128 = "/VertexData";
    if (v104)
      v128 = v104;
    v233 = v128;
    {
      v223 = operator new();
      *(_QWORD *)(v223 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v223 + 24) = "GeoGL";
      *(_OWORD *)(v223 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v223 = &off_1E42B5668;
      *(_QWORD *)(v223 + 8) = "GeoGL";
      *(_OWORD *)(v223 + 72) = 0u;
      *(_OWORD *)(v223 + 88) = 0u;
      *(_OWORD *)(v223 + 104) = 0u;
      *(_OWORD *)(v223 + 120) = 0u;
      *(_OWORD *)(v223 + 136) = 0u;
      *(_OWORD *)(v223 + 152) = 0u;
      *(_OWORD *)(v223 + 168) = 0u;
      *(_OWORD *)(v223 + 184) = 0u;
      *(_OWORD *)(v223 + 200) = 0u;
      *(_OWORD *)(v223 + 216) = 0u;
      *(_OWORD *)(v223 + 232) = 0u;
      *(_QWORD *)(v223 + 248) = 0;
      *(_OWORD *)(v223 + 56) = 0u;
      v224 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v223 + 56), 0);
      if ((_DWORD)v224)
        geo::read_write_lock::logFailure(v224, (uint64_t)"initialization", v225);
      v226 = malloc_create_zone(0, 0);
      *(_QWORD *)(v223 + 48) = v226;
      malloc_set_zone_name(v226, "GeoGL");
      *(_QWORD *)(v223 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v223;
    }
    v130 = ggl::Allocator::instance(void)::alloc;
    v131 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
    *(_QWORD *)v131 = &off_1E42DFFB0;
    *(_QWORD *)(v131 + 8) = 0;
    *(_QWORD *)(v131 + 32) = &off_1E42B5748;
    *(_QWORD *)(v131 + 16) = 0;
    *(_QWORD *)(v131 + 24) = v130;
    *(_QWORD *)(v131 + 40) = 32;
    *(_DWORD *)(v131 + 48) = 6;
    v132 = 0uLL;
    *(_OWORD *)(v131 + 56) = 0u;
    *(_OWORD *)(v131 + 72) = 0u;
    *(_OWORD *)(v131 + 88) = 0u;
    *(_OWORD *)(v131 + 104) = 0u;
    *(_QWORD *)(v131 + 120) = 0;
    if ((v133 & 1) == 0)
    {
      v132 = 0uLL;
      if (v227)
      {
        v228 = operator new();
        *(_QWORD *)(v228 + 16) = 0xA3D02C1100000005;
        *(_QWORD *)(v228 + 24) = "GeoGL";
        *(_OWORD *)(v228 + 32) = xmmword_19FFB2DE0;
        *(_QWORD *)v228 = &off_1E42B5668;
        *(_QWORD *)(v228 + 8) = "GeoGL";
        *(_OWORD *)(v228 + 72) = 0u;
        *(_OWORD *)(v228 + 88) = 0u;
        *(_OWORD *)(v228 + 104) = 0u;
        *(_OWORD *)(v228 + 120) = 0u;
        *(_OWORD *)(v228 + 136) = 0u;
        *(_OWORD *)(v228 + 152) = 0u;
        *(_OWORD *)(v228 + 168) = 0u;
        *(_OWORD *)(v228 + 184) = 0u;
        *(_OWORD *)(v228 + 200) = 0u;
        *(_OWORD *)(v228 + 216) = 0u;
        *(_OWORD *)(v228 + 232) = 0u;
        *(_QWORD *)(v228 + 248) = 0;
        *(_OWORD *)(v228 + 56) = 0u;
        v229 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v228 + 56), 0);
        if ((_DWORD)v229)
          geo::read_write_lock::logFailure(v229, (uint64_t)"initialization", v230);
        v231 = malloc_create_zone(0, 0);
        *(_QWORD *)(v228 + 48) = v231;
        malloc_set_zone_name(v231, "GeoGL");
        *(_QWORD *)(v228 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        ggl::Allocator::instance(void)::alloc = v228;
        v132 = 0uLL;
      }
    }
    *(_QWORD *)(v131 + 128) = ggl::Allocator::instance(void)::alloc;
    *(_QWORD *)(v131 + 136) = 0;
    *(_OWORD *)(v131 + 200) = v132;
    *(_OWORD *)(v131 + 184) = v132;
    *(_OWORD *)(v131 + 168) = v132;
    *(_QWORD *)(v131 + 216) = 0;
    *(_QWORD *)(v131 + 224) = -1;
    *(_OWORD *)(v131 + 152) = xmmword_19FFB2DD0;
    *(_DWORD *)(v131 + 144) = 0;
    *(_QWORD *)(v131 + 32) = &off_1E42B7C60;
    *(_QWORD *)(v131 + 240) = v233;
    *(_QWORD *)(v131 + 248) = &ggl::TileBaseSurface::p3T2T2BufferReflection;
    *(_QWORD *)(v131 + 232) = &unk_1E42B7C80;
    v134 = *(_QWORD **)v106;
    v125 = *(std::__shared_weak_count **)(*(_QWORD *)v106 + 8);
    *v134 = v131 + 32;
    v134[1] = v131;
    if (v125)
    {
      v135 = (unint64_t *)&v125->__shared_owners_;
      do
        v127 = __ldaxr(v135);
      while (__stlxr(v127 - 1, v135));
      goto LABEL_159;
    }
    goto LABEL_161;
  }
  v72 = 0;
  do
LABEL_234:
    v184 = __ldaxr(v47);
  while (__stlxr(v184 - 1, v47));
  if (!v184)
  {
    ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
    std::__shared_weak_count::__release_weak(v244);
  }
  do
    v185 = __ldaxr(v40);
  while (__stlxr(v185 - 1, v40));
  if (!v185)
  {
    ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
    std::__shared_weak_count::__release_weak(v241);
  }
  if (v49)
  {
    v186 = (unint64_t *)&v49->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v242 + 16))(v242, v72);
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  *(_OWORD *)((char *)this + 312) = v243;
  if (!v24)
    goto LABEL_250;
  v188 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v188);
  while (__stlxr(v26 - 1, v188));
LABEL_248:
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_250:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v189 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
  if (*((_QWORD *)&v247 + 1))
  {
    v190 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = v246;
  if (v246)
  {
    v193 = (unint64_t *)&v246->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
LABEL_262:
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  return pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
}

void altitude::util::GenericJob::~GenericJob(altitude::util::GenericJob *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E42C6868;
  v2 = (char *)this + 176;
  v3 = (char *)*((_QWORD *)this + 25);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  karo::Job::~Job(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E42C6868;
  v2 = (char *)this + 176;
  v3 = (char *)*((_QWORD *)this + 25);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      karo::Job::~Job(this);
      JUMPOUT(0x1A1AF4E00);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

void altitude::util::GenericJob::jobStep(altitude::util::GenericJob *this)
{
  uint64_t v2;
  altitude::util::MipmapAndCompressImageJob *v3;

  v2 = *((_QWORD *)this + 25);
  if (v2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2))
    {
      pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
      *((_DWORD *)this + 40) |= 1u;
      pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    altitude::util::MipmapAndCompressImageJob::~MipmapAndCompressImageJob(v3);
  }
}

void altitude::util::MipmapAndCompressImageJob::~MipmapAndCompressImageJob(altitude::util::MipmapAndCompressImageJob *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C69B8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  karo::Job::~Job(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C69B8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  karo::Job::~Job(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::util::MipmapAndCompressImageJob::jobStep(altitude::util::MipmapAndCompressImageJob *this)
{
  karo::media::Image::mipmapAndCompress(*((_QWORD *)this + 22), *((_DWORD *)this + 48));
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  return pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
}

void altitude::util::MergeImagesJob::~MergeImagesJob(altitude::util::MergeImagesJob *this)
{
  altitude::util::MergeImagesJob::~MergeImagesJob(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E42C6910;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (char *)*((_QWORD *)this + 22);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = (char *)*((_QWORD *)this + 22);
    if (!v5)
      goto LABEL_16;
  }
  v6 = (char *)*((_QWORD *)this + 23);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 16;
    }
    while (v6 != v5);
    v7 = (char *)*((_QWORD *)this + 22);
  }
  *((_QWORD *)this + 23) = v5;
  operator delete(v7);
LABEL_16:
  karo::Job::~Job(this);
}

uint64_t altitude::util::MergeImagesJob::jobStep(altitude::util::MergeImagesJob *this)
{
  altitude::util::MergeImagesJob *v1;
  uint64_t v2;
  int *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  size_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  ggl::Data *v45;
  uint64_t shared_owners;
  ggl::Data **v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  altitude::util::MergeImagesJob *v57;
  std::__shared_weak_count *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;

  v1 = this;
  karo::media::Image::setFormat(*((_QWORD *)this + 25), *(_DWORD *)(*(_QWORD *)(**((_QWORD **)this + 22) + 8) + 16));
  v2 = *(_QWORD *)(**((_QWORD **)v1 + 22) + 8);
  if (*(_DWORD *)(v2 + 16) != 29)
  {
    v3 = *(int **)(v2 + 8);
    v4 = *v3;
    v5 = v3[1];
    v6 = v3[2];
    if (v6 >= 0x3B)
      v7 = 1;
    else
      v7 = dword_1A007E7DC[v6];
    v8 = 2 * v4;
    v9 = *(_DWORD **)(*((_QWORD *)v1 + 25) + 8);
    *v9 = 2 * v4;
    v9[1] = 2 * v5;
    v10 = (uint64_t *)*((_QWORD *)v3 + 2);
    v11 = *v10;
    v12 = (std::__shared_weak_count *)v10[1];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      v15 = *(_QWORD *)(v11 + 8);
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        v17 = v4;
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        v4 = v17;
      }
    }
    else
    {
      v15 = *(_QWORD *)(v11 + 8);
    }
    v18 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 22) + 32) + 8) + 8) + 16);
    v19 = *v18;
    v20 = (std::__shared_weak_count *)v18[1];
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      v60 = *(_QWORD *)(v19 + 8);
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        v24 = v4;
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        v4 = v24;
      }
    }
    else
    {
      v60 = *(_QWORD *)(v19 + 8);
    }
    v25 = v7 * v8;
    v26 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 22) + 16) + 8) + 8) + 16);
    v27 = *v26;
    v28 = (std::__shared_weak_count *)v26[1];
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      v31 = *(_QWORD *)(v27 + 8);
      do
        v32 = __ldaxr(v29);
      while (__stlxr(v32 - 1, v29));
      if (!v32)
      {
        v33 = v4;
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
        v4 = v33;
      }
    }
    else
    {
      v31 = *(_QWORD *)(v27 + 8);
    }
    v34 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 22) + 48) + 8) + 8) + 16);
    v35 = *v34;
    v36 = (std::__shared_weak_count *)v34[1];
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      v39 = *(_QWORD *)(v35 + 8);
      do
        v40 = __ldaxr(v37);
      while (__stlxr(v40 - 1, v37));
      if (!v40)
      {
        v41 = v4;
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
        v4 = v41;
      }
    }
    else
    {
      v39 = *(_QWORD *)(v35 + 8);
    }
    v42 = (v7 * v4);
    v43 = (std::__shared_weak_count *)operator new(0x30uLL);
    v43->__shared_owners_ = 0;
    v44 = (unint64_t *)&v43->__shared_owners_;
    v43->__shared_weak_owners_ = 0;
    v43->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
    v45 = ggl::Data::Data((ggl::Data *)&v43[1], (v25 * 2 * v5));
    v58 = v43;
    shared_owners = v43[1].__shared_owners_;
    v47 = *(ggl::Data ***)(*(_QWORD *)(*((_QWORD *)v1 + 25) + 8) + 16);
    do
      v48 = __ldxr(v44);
    while (__stxr(v48 + 1, v44));
    v49 = (std::__shared_weak_count *)v47[1];
    *v47 = v45;
    v47[1] = (ggl::Data *)v58;
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v57 = v1;
    v61 = v31;
    if ((_DWORD)v5)
    {
      v52 = 0;
      v53 = 0;
      v59 = v42 * ((2 * v5) | 1);
      v54 = 2 * v42 * v5;
      do
      {
        memcpy((void *)(shared_owners + v53), (const void *)(v15 + v52), v42);
        memcpy((void *)(shared_owners + v42 + v53), (const void *)(v60 + v52), v42);
        memcpy((void *)(shared_owners + v54 + v53), (const void *)(v61 + v52), v42);
        memcpy((void *)(shared_owners + v59 + v53), (const void *)(v39 + v52), v42);
        v53 += v25;
        v52 += v42;
        --v5;
      }
      while (v5);
    }
    do
      v55 = __ldaxr(v44);
    while (__stlxr(v55 - 1, v44));
    v1 = v57;
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  pthread_mutex_lock(*((pthread_mutex_t **)v1 + 19));
  *((_DWORD *)v1 + 40) |= 1u;
  return pthread_mutex_unlock(*((pthread_mutex_t **)v1 + 19));
}

_QWORD *std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::vector(_QWORD *a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 != *a2)
  {
    if (v5 < 0)
      abort();
    v6 = v5 >> 4;
    v7 = operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[2 * v6];
    do
    {
      *v7 = 0;
      v7[1] = 0;
      v8 = *v3;
      v9 = v3[1];
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        v12 = (std::__shared_weak_count *)v7[1];
        *v7 = v8;
        v7[1] = v9;
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
      else
      {
        *v7 = v8;
        v7[1] = 0;
      }
      v3 += 2;
      v7 += 2;
    }
    while (v3 != v4);
    a1[1] = v7;
  }
  return a1;
}

void md::LabelRenderDeviceBuffer::initialize(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  *(_QWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  v6 = operator new(0xE8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E42E24A8;
  v7 = ggl::BufferData::BufferData((uint64_t)(v6 + 3), qword_1EE559010, 2, 1, 6, 1);
  v6[28] = ggl::Label::DeviceBufferTextureSize::reflection(void)::reflection;
  v6[3] = &off_1E42B98F0;
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v6;
  if (!v8)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v12 = *a4;
    v11 = a4[1];
    if (!v11)
      goto LABEL_8;
  }
  else
  {
LABEL_5:
    v12 = *a4;
    v11 = a4[1];
    if (!v11)
      goto LABEL_8;
  }
  v13 = (unint64_t *)(v11 + 8);
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
LABEL_8:
  v15 = *(std::__shared_weak_count **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = v11;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

uint64_t ggl::ConstantDataTyped<ggl::Label::DeviceBufferTextureSize>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Label::DeviceBufferTextureSize>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::DeviceBufferTextureSize>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E24A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::DeviceBufferTextureSize>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E24A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::DeviceBufferTextureSize>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t md::LabelRenderer::LabelRenderer(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  _OWORD *v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  unsigned __int8 v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  unsigned __int8 v69;
  _QWORD *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  __int128 v91;
  unsigned __int8 v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  char *v175;
  __int128 v176;
  unsigned __int8 v177;
  __int128 v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t v181;
  int8x16_t *v182;
  __int128 v183;
  unint64_t *v184;
  unint64_t v185;
  int8x16_t v186;
  int16x8_t v187;
  int32x4_t v188;
  int8x16_t v189;
  int8x16_t v190;
  int16x8_t v191;
  int32x4_t v192;
  int8x16_t v193;
  int32x4_t v194;
  int8x16_t v195;
  int32x4_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int8x16_t v202;
  int8x16_t v203;
  int8x16_t v204;
  int8x16_t v205;
  int16x8_t v206;
  int32x4_t v207;
  int8x16_t v208;
  int16x8_t v209;
  int32x4_t v210;
  int8x16_t v211;
  int32x4_t v212;
  int8x16_t v213;
  int32x4_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int8x16_t v217;
  int8x16_t v218;
  int8x16_t v219;
  int8x16_t v220;
  int8x16_t v221;
  int8x16_t v222;
  int8x16_t v223;
  int8x16_t v224;
  int8x16_t v225;
  int8x16_t v226;
  int8x16_t v227;
  int8x16_t v228;
  int16x8_t v229;
  int32x4_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int16x8_t v233;
  int32x4_t v234;
  int8x16_t v235;
  int16x8_t v236;
  int32x4_t v237;
  int8x16_t v238;
  int16x8_t v239;
  int32x4_t v240;
  int8x16_t v241;
  int32x4_t v242;
  int8x16_t v243;
  int32x4_t v244;
  int8x16_t v245;
  int32x4_t v246;
  int8x16_t v247;
  int32x4_t v248;
  int8x16_t v249;
  int8x16_t v250;
  int8x16_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int8x16_t v255;
  int8x16_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  char *v268;
  __int128 v269;
  unsigned __int8 v270;
  __int128 v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t v274;
  int8x16_t *v275;
  __int128 v276;
  unint64_t *v277;
  unint64_t v278;
  int8x16_t v279;
  int16x8_t v280;
  int32x4_t v281;
  int8x16_t v282;
  int8x16_t v283;
  int16x8_t v284;
  int32x4_t v285;
  int8x16_t v286;
  int32x4_t v287;
  int8x16_t v288;
  int32x4_t v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v292;
  int8x16_t v293;
  int8x16_t v294;
  int8x16_t v295;
  int8x16_t v296;
  int8x16_t v297;
  int8x16_t v298;
  int16x8_t v299;
  int32x4_t v300;
  int8x16_t v301;
  int16x8_t v302;
  int32x4_t v303;
  int8x16_t v304;
  int32x4_t v305;
  int8x16_t v306;
  int32x4_t v307;
  int8x16_t v308;
  int8x16_t v309;
  int8x16_t v310;
  int8x16_t v311;
  int8x16_t v312;
  int8x16_t v313;
  int8x16_t v314;
  int8x16_t v315;
  int8x16_t v316;
  int8x16_t v317;
  int8x16_t v318;
  int8x16_t v319;
  int8x16_t v320;
  int8x16_t v321;
  int16x8_t v322;
  int32x4_t v323;
  int16x8_t v324;
  int32x4_t v325;
  int32x4_t v326;
  int32x4_t v327;
  int8x16_t v328;
  int8x16_t v329;
  int8x16_t v330;
  int16x8_t v331;
  int32x4_t v332;
  int16x8_t v333;
  int32x4_t v334;
  int8x16_t v335;
  int8x16_t v336;
  int8x16_t v337;
  int32x4_t v338;
  int8x16_t v339;
  int8x16_t v340;
  int8x16_t v341;
  int32x4_t v342;
  int8x16_t v343;
  int8x16_t v344;
  int8x16_t v345;
  int8x16_t v346;
  int8x16_t v347;
  int8x16_t v348;
  int8x16_t v349;
  int8x16_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t *v360;
  unint64_t v361;
  char *v362;
  __int128 v363;
  unsigned __int8 v364;
  __int128 v365;
  unint64_t *v366;
  unint64_t v367;
  unint64_t v368;
  int8x16_t *v369;
  __int128 v370;
  unint64_t *v371;
  unint64_t v372;
  int8x16_t v373;
  int16x8_t v374;
  int32x4_t v375;
  int8x16_t v376;
  int8x16_t v377;
  int16x8_t v378;
  int32x4_t v379;
  int8x16_t v380;
  int32x4_t v381;
  int8x16_t v382;
  int32x4_t v383;
  int8x16_t v384;
  int8x16_t v385;
  int8x16_t v386;
  int8x16_t v387;
  int8x16_t v388;
  int8x16_t v389;
  int8x16_t v390;
  int8x16_t v391;
  int8x16_t v392;
  int16x8_t v393;
  int32x4_t v394;
  int8x16_t v395;
  int16x8_t v396;
  int32x4_t v397;
  int8x16_t v398;
  int32x4_t v399;
  int8x16_t v400;
  int32x4_t v401;
  int8x16_t v402;
  int8x16_t v403;
  int8x16_t v404;
  int8x16_t v405;
  int8x16_t v406;
  int8x16_t v407;
  int8x16_t v408;
  int8x16_t v409;
  int8x16_t v410;
  int8x16_t v411;
  int8x16_t v412;
  int8x16_t v413;
  int8x16_t v414;
  int8x16_t v415;
  int16x8_t v416;
  int32x4_t v417;
  int16x8_t v418;
  int32x4_t v419;
  int32x4_t v420;
  int32x4_t v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int16x8_t v425;
  int32x4_t v426;
  int16x8_t v427;
  int32x4_t v428;
  int8x16_t v429;
  int8x16_t v430;
  int8x16_t v431;
  int32x4_t v432;
  int8x16_t v433;
  int8x16_t v434;
  int8x16_t v435;
  int32x4_t v436;
  int8x16_t v437;
  int8x16_t v438;
  int8x16_t v439;
  int8x16_t v440;
  int8x16_t v441;
  int8x16_t v442;
  int8x16_t v443;
  int8x16_t v444;
  std::__shared_weak_count *v445;
  unint64_t *v446;
  unint64_t v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t *v454;
  unint64_t v455;
  char *v456;
  __int128 v457;
  unsigned __int8 v458;
  __int128 v459;
  unint64_t *v460;
  unint64_t v461;
  unint64_t v462;
  int8x16_t *v463;
  __int128 v464;
  unint64_t *v465;
  unint64_t v466;
  int8x16_t v467;
  int16x8_t v468;
  int32x4_t v469;
  int8x16_t v470;
  int8x16_t v471;
  int16x8_t v472;
  int32x4_t v473;
  int8x16_t v474;
  int32x4_t v475;
  int8x16_t v476;
  int32x4_t v477;
  int8x16_t v478;
  int8x16_t v479;
  int8x16_t v480;
  int8x16_t v481;
  int8x16_t v482;
  int8x16_t v483;
  int8x16_t v484;
  int8x16_t v485;
  int8x16_t v486;
  int16x8_t v487;
  int32x4_t v488;
  int8x16_t v489;
  int16x8_t v490;
  int32x4_t v491;
  int8x16_t v492;
  int32x4_t v493;
  int8x16_t v494;
  int32x4_t v495;
  int8x16_t v496;
  int8x16_t v497;
  int8x16_t v498;
  int8x16_t v499;
  int8x16_t v500;
  int8x16_t v501;
  int8x16_t v502;
  int8x16_t v503;
  int8x16_t v504;
  int8x16_t v505;
  int8x16_t v506;
  int8x16_t v507;
  int8x16_t v508;
  int8x16_t v509;
  int16x8_t v510;
  int32x4_t v511;
  int16x8_t v512;
  int32x4_t v513;
  int32x4_t v514;
  int32x4_t v515;
  int8x16_t v516;
  int8x16_t v517;
  int8x16_t v518;
  int16x8_t v519;
  int32x4_t v520;
  int16x8_t v521;
  int32x4_t v522;
  int8x16_t v523;
  int8x16_t v524;
  int8x16_t v525;
  int32x4_t v526;
  int8x16_t v527;
  int8x16_t v528;
  int8x16_t v529;
  int32x4_t v530;
  int8x16_t v531;
  int8x16_t v532;
  int8x16_t v533;
  int8x16_t v534;
  int8x16_t v535;
  int8x16_t v536;
  int8x16_t v537;
  int8x16_t v538;
  std::__shared_weak_count *v539;
  unint64_t *v540;
  unint64_t v541;
  std::__shared_weak_count *v542;
  unint64_t *v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t *v548;
  unint64_t v549;
  char *v550;
  __int128 v551;
  unsigned __int8 v552;
  __int128 v553;
  unint64_t *v554;
  unint64_t v555;
  unint64_t v556;
  int8x16_t *v557;
  __int128 v558;
  unint64_t *v559;
  unint64_t v560;
  int8x16_t v561;
  int16x8_t v562;
  int32x4_t v563;
  int8x16_t v564;
  int8x16_t v565;
  int16x8_t v566;
  int32x4_t v567;
  int8x16_t v568;
  int32x4_t v569;
  int8x16_t v570;
  int32x4_t v571;
  int8x16_t v572;
  int8x16_t v573;
  int8x16_t v574;
  int8x16_t v575;
  int8x16_t v576;
  int8x16_t v577;
  int8x16_t v578;
  int8x16_t v579;
  int8x16_t v580;
  int16x8_t v581;
  int32x4_t v582;
  int8x16_t v583;
  int16x8_t v584;
  int32x4_t v585;
  int8x16_t v586;
  int32x4_t v587;
  int8x16_t v588;
  int32x4_t v589;
  int8x16_t v590;
  int8x16_t v591;
  int8x16_t v592;
  int8x16_t v593;
  int8x16_t v594;
  int8x16_t v595;
  int8x16_t v596;
  int8x16_t v597;
  int8x16_t v598;
  int8x16_t v599;
  int8x16_t v600;
  int8x16_t v601;
  int8x16_t v602;
  int8x16_t v603;
  int16x8_t v604;
  int32x4_t v605;
  int16x8_t v606;
  int32x4_t v607;
  int32x4_t v608;
  int32x4_t v609;
  int8x16_t v610;
  int8x16_t v611;
  int8x16_t v612;
  int16x8_t v613;
  int32x4_t v614;
  int16x8_t v615;
  int32x4_t v616;
  int8x16_t v617;
  int8x16_t v618;
  int8x16_t v619;
  int32x4_t v620;
  int8x16_t v621;
  int8x16_t v622;
  int8x16_t v623;
  int32x4_t v624;
  int8x16_t v625;
  int8x16_t v626;
  int8x16_t v627;
  int8x16_t v628;
  int8x16_t v629;
  int8x16_t v630;
  int8x16_t v631;
  int8x16_t v632;
  std::__shared_weak_count *v633;
  unint64_t *v634;
  unint64_t v635;
  std::__shared_weak_count *v636;
  unint64_t *v637;
  unint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  unint64_t *v642;
  unint64_t v643;
  char *v644;
  __int128 v645;
  unsigned __int8 v646;
  __int128 v647;
  unint64_t *v648;
  unint64_t v649;
  unint64_t v650;
  int8x16_t *v651;
  __int128 v652;
  unint64_t *v653;
  unint64_t v654;
  int8x16_t v655;
  int16x8_t v656;
  int32x4_t v657;
  int8x16_t v658;
  int8x16_t v659;
  int16x8_t v660;
  int32x4_t v661;
  int8x16_t v662;
  int32x4_t v663;
  int8x16_t v664;
  int32x4_t v665;
  int8x16_t v666;
  int8x16_t v667;
  int8x16_t v668;
  int8x16_t v669;
  int8x16_t v670;
  int8x16_t v671;
  int8x16_t v672;
  int8x16_t v673;
  int8x16_t v674;
  int16x8_t v675;
  int32x4_t v676;
  int8x16_t v677;
  int16x8_t v678;
  int32x4_t v679;
  int8x16_t v680;
  int32x4_t v681;
  int8x16_t v682;
  int32x4_t v683;
  int8x16_t v684;
  int8x16_t v685;
  int8x16_t v686;
  int8x16_t v687;
  int8x16_t v688;
  int8x16_t v689;
  int8x16_t v690;
  int8x16_t v691;
  int8x16_t v692;
  int8x16_t v693;
  int8x16_t v694;
  int8x16_t v695;
  int8x16_t v696;
  int8x16_t v697;
  int16x8_t v698;
  int32x4_t v699;
  int16x8_t v700;
  int32x4_t v701;
  int32x4_t v702;
  int32x4_t v703;
  int8x16_t v704;
  int8x16_t v705;
  int8x16_t v706;
  int16x8_t v707;
  int32x4_t v708;
  int16x8_t v709;
  int32x4_t v710;
  int8x16_t v711;
  int8x16_t v712;
  int8x16_t v713;
  int32x4_t v714;
  int8x16_t v715;
  int8x16_t v716;
  int8x16_t v717;
  int32x4_t v718;
  int8x16_t v719;
  int8x16_t v720;
  int8x16_t v721;
  int8x16_t v722;
  int8x16_t v723;
  int8x16_t v724;
  int8x16_t v725;
  int8x16_t v726;
  std::__shared_weak_count *v727;
  unint64_t *v728;
  unint64_t v729;
  std::__shared_weak_count *v730;
  unint64_t *v731;
  unint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  unint64_t *v736;
  unint64_t v737;
  char *v738;
  __int128 v739;
  unsigned __int8 v740;
  __int128 v741;
  unint64_t *v742;
  unint64_t v743;
  unint64_t v744;
  int8x16_t *v745;
  __int128 v746;
  unint64_t *v747;
  unint64_t v748;
  int8x16_t v749;
  int16x8_t v750;
  int32x4_t v751;
  int8x16_t v752;
  int8x16_t v753;
  int16x8_t v754;
  int32x4_t v755;
  int8x16_t v756;
  int32x4_t v757;
  int8x16_t v758;
  int32x4_t v759;
  int8x16_t v760;
  int8x16_t v761;
  int8x16_t v762;
  int8x16_t v763;
  int8x16_t v764;
  int8x16_t v765;
  int8x16_t v766;
  int8x16_t v767;
  int8x16_t v768;
  int16x8_t v769;
  int32x4_t v770;
  int8x16_t v771;
  int16x8_t v772;
  int32x4_t v773;
  int8x16_t v774;
  int32x4_t v775;
  int8x16_t v776;
  int32x4_t v777;
  int8x16_t v778;
  int8x16_t v779;
  int8x16_t v780;
  int8x16_t v781;
  int8x16_t v782;
  int8x16_t v783;
  int8x16_t v784;
  int8x16_t v785;
  int8x16_t v786;
  int8x16_t v787;
  int8x16_t v788;
  int8x16_t v789;
  int8x16_t v790;
  int8x16_t v791;
  int16x8_t v792;
  int32x4_t v793;
  int16x8_t v794;
  int32x4_t v795;
  int32x4_t v796;
  int32x4_t v797;
  int8x16_t v798;
  int8x16_t v799;
  int8x16_t v800;
  int16x8_t v801;
  int32x4_t v802;
  int16x8_t v803;
  int32x4_t v804;
  int8x16_t v805;
  int8x16_t v806;
  int8x16_t v807;
  int32x4_t v808;
  int8x16_t v809;
  int8x16_t v810;
  int8x16_t v811;
  int32x4_t v812;
  int8x16_t v813;
  int8x16_t v814;
  int8x16_t v815;
  int8x16_t v816;
  int8x16_t v817;
  int8x16_t v818;
  int8x16_t v819;
  int8x16_t v820;
  std::__shared_weak_count *v821;
  unint64_t *v822;
  unint64_t v823;
  std::__shared_weak_count *v824;
  unint64_t *v825;
  unint64_t v826;
  uint64_t v827;
  std::__shared_weak_count *v828;
  std::__shared_weak_count *v829;
  unint64_t *v830;
  unint64_t v831;
  _QWORD *v832;
  __int128 v833;
  std::__shared_weak_count *v834;
  unint64_t *v835;
  unint64_t v836;
  std::__shared_weak_count *v837;
  unint64_t *v838;
  unint64_t v839;
  uint64_t v840;
  std::__shared_weak_count *v841;
  std::__shared_weak_count *v842;
  unint64_t *v843;
  unint64_t v844;
  _QWORD *v845;
  __int128 v846;
  std::__shared_weak_count *v847;
  unint64_t *v848;
  unint64_t v849;
  std::__shared_weak_count *v850;
  unint64_t *v851;
  unint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  unint64_t *v856;
  unint64_t v857;
  char *v858;
  __int128 v859;
  unsigned __int8 v860;
  __int128 v861;
  unint64_t *v862;
  unint64_t v863;
  unint64_t v864;
  int8x16_t *v865;
  __int128 v866;
  unint64_t *v867;
  unint64_t v868;
  int8x16_t v869;
  int16x8_t v870;
  int32x4_t v871;
  int8x16_t v872;
  int8x16_t v873;
  int16x8_t v874;
  int32x4_t v875;
  int8x16_t v876;
  int32x4_t v877;
  int8x16_t v878;
  int32x4_t v879;
  int8x16_t v880;
  int8x16_t v881;
  int8x16_t v882;
  int8x16_t v883;
  int8x16_t v884;
  int8x16_t v885;
  int8x16_t v886;
  int8x16_t v887;
  int8x16_t v888;
  int16x8_t v889;
  int32x4_t v890;
  int8x16_t v891;
  int16x8_t v892;
  int32x4_t v893;
  int8x16_t v894;
  int32x4_t v895;
  int8x16_t v896;
  int32x4_t v897;
  int8x16_t v898;
  int8x16_t v899;
  int8x16_t v900;
  int8x16_t v901;
  int8x16_t v902;
  int8x16_t v903;
  int8x16_t v904;
  int8x16_t v905;
  int8x16_t v906;
  int8x16_t v907;
  int8x16_t v908;
  int8x16_t v909;
  int8x16_t v910;
  int8x16_t v911;
  int16x8_t v912;
  int32x4_t v913;
  int16x8_t v914;
  int32x4_t v915;
  int32x4_t v916;
  int32x4_t v917;
  int8x16_t v918;
  int8x16_t v919;
  int8x16_t v920;
  int16x8_t v921;
  int32x4_t v922;
  int16x8_t v923;
  int32x4_t v924;
  int8x16_t v925;
  int8x16_t v926;
  int8x16_t v927;
  int32x4_t v928;
  int8x16_t v929;
  int8x16_t v930;
  int8x16_t v931;
  int32x4_t v932;
  int8x16_t v933;
  int8x16_t v934;
  int8x16_t v935;
  int8x16_t v936;
  int8x16_t v937;
  int8x16_t v938;
  int8x16_t v939;
  int8x16_t v940;
  std::__shared_weak_count *v941;
  unint64_t *v942;
  unint64_t v943;
  std::__shared_weak_count *v944;
  unint64_t *v945;
  unint64_t v946;
  uint64_t v947;
  unint64_t v948;
  std::__shared_weak_count *v949;
  unint64_t *v950;
  unint64_t v951;
  __int128 v952;
  unint64_t *v953;
  unint64_t v954;
  std::__shared_weak_count *v955;
  unint64_t *v956;
  unint64_t v957;
  _QWORD *v958;
  __int128 v959;
  std::__shared_weak_count *v960;
  uint64_t v961;
  unint64_t *v962;
  unint64_t v963;
  __int128 v964;
  _QWORD *v965;
  uint64_t v966;
  std::__shared_weak_count *v967;
  unint64_t *v968;
  unint64_t v969;
  unint64_t *v970;
  unint64_t v971;
  uint64_t v972;
  unint64_t v973;
  std::__shared_weak_count *v974;
  unint64_t *v975;
  unint64_t v976;
  __int128 v977;
  unint64_t *v978;
  unint64_t v979;
  std::__shared_weak_count *v980;
  unint64_t *v981;
  unint64_t v982;
  _QWORD *v983;
  __int128 v984;
  std::__shared_weak_count *v985;
  uint64_t v986;
  unint64_t *v987;
  unint64_t v988;
  __int128 v989;
  _QWORD *v990;
  uint64_t v991;
  std::__shared_weak_count *v992;
  unint64_t *v993;
  unint64_t v994;
  unint64_t *v995;
  unint64_t v996;
  uint64_t v997;
  unint64_t v998;
  std::__shared_weak_count *v999;
  unint64_t *v1000;
  unint64_t v1001;
  __int128 v1002;
  unint64_t *v1003;
  unint64_t v1004;
  std::__shared_weak_count *v1005;
  unint64_t *v1006;
  unint64_t v1007;
  _QWORD *v1008;
  __int128 v1009;
  std::__shared_weak_count *v1010;
  unint64_t *v1011;
  unint64_t v1012;
  __int128 v1013;
  _QWORD *v1014;
  uint64_t v1015;
  std::__shared_weak_count *v1016;
  unint64_t *v1017;
  unint64_t v1018;
  unint64_t *v1019;
  unint64_t v1020;
  uint64_t *v1021;
  unsigned __int8 v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  unint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  unint64_t v1034;
  unint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  _OWORD *v1038;
  __int128 *v1039;
  uint64_t v1040;
  __int128 v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  unint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  unint64_t v1052;
  unint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  _OWORD *v1056;
  __int128 *v1057;
  uint64_t v1058;
  __int128 v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  _QWORD *v1064;
  uint64_t v1065;
  _QWORD *v1066;
  uint64_t v1067;
  uint64_t *v1068;
  unsigned __int8 v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  unint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  unint64_t v1081;
  unint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  _OWORD *v1085;
  __int128 *v1086;
  uint64_t v1087;
  __int128 v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  unint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  unint64_t v1099;
  unint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  _OWORD *v1103;
  __int128 *v1104;
  uint64_t v1105;
  __int128 v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  _QWORD *v1111;
  uint64_t v1112;
  _QWORD *v1113;
  uint64_t v1114;
  uint64_t *v1115;
  unsigned __int8 v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  unint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  unint64_t v1128;
  unint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  _OWORD *v1132;
  __int128 *v1133;
  uint64_t v1134;
  __int128 v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  unint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  unint64_t v1146;
  unint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  _OWORD *v1150;
  __int128 *v1151;
  uint64_t v1152;
  __int128 v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  _QWORD *v1158;
  uint64_t v1159;
  _QWORD *v1160;
  uint64_t v1161;
  uint64_t *v1162;
  unsigned __int8 v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  unint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  unint64_t v1175;
  unint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  _OWORD *v1179;
  __int128 *v1180;
  uint64_t v1181;
  __int128 v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  unint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  unint64_t v1193;
  unint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  _OWORD *v1197;
  __int128 *v1198;
  uint64_t v1199;
  __int128 v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  _QWORD *v1205;
  uint64_t v1206;
  _QWORD *v1207;
  uint64_t v1208;
  uint64_t *v1209;
  unsigned __int8 v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  unint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  unint64_t v1222;
  unint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  _OWORD *v1226;
  __int128 *v1227;
  uint64_t v1228;
  __int128 v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  unint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  unint64_t v1240;
  unint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  _OWORD *v1244;
  __int128 *v1245;
  uint64_t v1246;
  __int128 v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  _QWORD *v1252;
  uint64_t v1253;
  _QWORD *v1254;
  uint64_t v1255;
  uint64_t *v1256;
  unsigned __int8 v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  unint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  unint64_t v1269;
  unint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  _OWORD *v1273;
  __int128 *v1274;
  uint64_t v1275;
  __int128 v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  unint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  unint64_t v1287;
  unint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  _OWORD *v1291;
  __int128 *v1292;
  uint64_t v1293;
  __int128 v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  _QWORD *v1299;
  uint64_t v1300;
  _QWORD *v1301;
  uint64_t v1302;
  uint64_t *v1303;
  unsigned __int8 v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  unint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  unint64_t v1316;
  unint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  _OWORD *v1320;
  __int128 *v1321;
  uint64_t v1322;
  __int128 v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  unint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  unint64_t v1334;
  unint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  _OWORD *v1338;
  __int128 *v1339;
  uint64_t v1340;
  __int128 v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  _QWORD *v1346;
  uint64_t v1347;
  _QWORD *v1348;
  uint64_t v1349;
  unint64_t *v1350;
  uint64_t v1351;
  uint64_t v1352;
  _QWORD *v1353;
  uint64_t v1354;
  _QWORD *v1355;
  uint64_t v1356;
  unint64_t *v1357;
  uint64_t v1358;
  uint64_t v1359;
  _QWORD *v1360;
  uint64_t v1361;
  _QWORD *v1362;
  uint64_t v1363;
  uint64_t *v1364;
  unsigned __int8 v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  unint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  unint64_t v1377;
  unint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  _OWORD *v1381;
  __int128 *v1382;
  uint64_t v1383;
  __int128 v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  unint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  unint64_t v1395;
  unint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  _OWORD *v1399;
  __int128 *v1400;
  uint64_t v1401;
  __int128 v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  _QWORD *v1407;
  uint64_t v1408;
  _QWORD *v1409;
  uint64_t v1410;
  std::__shared_weak_count *v1411;
  unint64_t *v1412;
  std::__shared_count v1413;
  unsigned __int8 v1414;
  _QWORD *v1415;
  unint64_t v1416;
  std::__shared_weak_count *v1417;
  unint64_t *v1418;
  unint64_t v1419;
  unint64_t v1420;
  uint64_t v1421;
  std::__shared_weak_count *v1422;
  unint64_t *v1423;
  unint64_t v1424;
  unint64_t v1425;
  std::__shared_weak_count *v1426;
  unint64_t *v1427;
  unint64_t v1428;
  unint64_t *v1429;
  unint64_t v1430;
  uint64_t v1431;
  std::__shared_weak_count *v1432;
  std::__shared_weak_count *v1433;
  unint64_t *v1434;
  unint64_t v1435;
  _QWORD *v1436;
  __int128 v1437;
  std::__shared_weak_count *v1438;
  unint64_t *v1439;
  unint64_t v1440;
  std::__shared_weak_count *v1441;
  unint64_t *v1442;
  unint64_t v1443;
  uint64_t *v1444;
  unsigned __int8 v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  unint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  unint64_t v1457;
  unint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  _OWORD *v1461;
  __int128 *v1462;
  uint64_t v1463;
  __int128 v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  unint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  unint64_t v1475;
  unint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  _OWORD *v1479;
  __int128 *v1480;
  uint64_t v1481;
  __int128 v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  _QWORD *v1487;
  uint64_t v1488;
  _QWORD *v1489;
  uint64_t v1490;
  uint64_t v1491;
  std::__shared_weak_count *v1492;
  std::__shared_weak_count *v1493;
  unint64_t *v1494;
  unint64_t v1495;
  _QWORD *v1496;
  __int128 v1497;
  std::__shared_weak_count *v1498;
  unint64_t *v1499;
  unint64_t v1500;
  std::__shared_weak_count *v1501;
  unint64_t *v1502;
  unint64_t v1503;
  uint64_t *v1504;
  unsigned __int8 v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  unint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  unint64_t v1517;
  unint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  _OWORD *v1521;
  __int128 *v1522;
  uint64_t v1523;
  __int128 v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  unint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  unint64_t v1535;
  unint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  _OWORD *v1539;
  __int128 *v1540;
  uint64_t v1541;
  __int128 v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  _QWORD *v1547;
  uint64_t v1548;
  _QWORD *v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  unint64_t *v1554;
  unint64_t v1555;
  char *v1556;
  __int128 v1557;
  unsigned __int8 v1558;
  __int128 v1559;
  unint64_t *v1560;
  unint64_t v1561;
  unint64_t v1562;
  int8x16_t *v1563;
  __int128 v1564;
  unint64_t *v1565;
  unint64_t v1566;
  int8x16_t v1567;
  int16x8_t v1568;
  int32x4_t v1569;
  int8x16_t v1570;
  int8x16_t v1571;
  int16x8_t v1572;
  int32x4_t v1573;
  int8x16_t v1574;
  int32x4_t v1575;
  int8x16_t v1576;
  int32x4_t v1577;
  int8x16_t v1578;
  int8x16_t v1579;
  int8x16_t v1580;
  int8x16_t v1581;
  int8x16_t v1582;
  int8x16_t v1583;
  int8x16_t v1584;
  int8x16_t v1585;
  int8x16_t v1586;
  int16x8_t v1587;
  int32x4_t v1588;
  int8x16_t v1589;
  int16x8_t v1590;
  int32x4_t v1591;
  int8x16_t v1592;
  int32x4_t v1593;
  int8x16_t v1594;
  int32x4_t v1595;
  int8x16_t v1596;
  int8x16_t v1597;
  int8x16_t v1598;
  int8x16_t v1599;
  int8x16_t v1600;
  int8x16_t v1601;
  int8x16_t v1602;
  int8x16_t v1603;
  int8x16_t v1604;
  int8x16_t v1605;
  int8x16_t v1606;
  int8x16_t v1607;
  int8x16_t v1608;
  int8x16_t v1609;
  int16x8_t v1610;
  int32x4_t v1611;
  int16x8_t v1612;
  int32x4_t v1613;
  int32x4_t v1614;
  int32x4_t v1615;
  int8x16_t v1616;
  int8x16_t v1617;
  int8x16_t v1618;
  int16x8_t v1619;
  int32x4_t v1620;
  int16x8_t v1621;
  int32x4_t v1622;
  int8x16_t v1623;
  int8x16_t v1624;
  int8x16_t v1625;
  int32x4_t v1626;
  int8x16_t v1627;
  int8x16_t v1628;
  int8x16_t v1629;
  int32x4_t v1630;
  int8x16_t v1631;
  int8x16_t v1632;
  int8x16_t v1633;
  int8x16_t v1634;
  int8x16_t v1635;
  int8x16_t v1636;
  int8x16_t v1637;
  int8x16_t v1638;
  std::__shared_weak_count *v1639;
  unint64_t *v1640;
  unint64_t v1641;
  std::__shared_weak_count *v1642;
  unint64_t *v1643;
  unint64_t v1644;
  uint64_t *v1645;
  unsigned __int8 v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  unint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  unint64_t v1658;
  unint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  _OWORD *v1662;
  __int128 *v1663;
  uint64_t v1664;
  __int128 v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  unint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  unint64_t v1676;
  unint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  _OWORD *v1680;
  __int128 *v1681;
  uint64_t v1682;
  __int128 v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  _QWORD *v1688;
  _QWORD *v1689;
  uint64_t v1690;
  _QWORD *v1691;
  uint64_t v1692;
  std::__shared_weak_count *v1693;
  unint64_t *v1694;
  std::__shared_count v1695;
  unsigned __int8 v1696;
  _QWORD *v1697;
  unint64_t v1698;
  std::__shared_weak_count *v1699;
  unint64_t *v1700;
  unint64_t v1701;
  unint64_t v1702;
  uint64_t v1703;
  std::__shared_weak_count *v1704;
  unint64_t *v1705;
  unint64_t v1706;
  unint64_t v1707;
  std::__shared_weak_count *v1708;
  unint64_t *v1709;
  unint64_t v1710;
  unint64_t *v1711;
  unint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  unint64_t *v1716;
  unint64_t v1717;
  char *v1718;
  __int128 v1719;
  unsigned __int8 v1720;
  __int128 v1721;
  unint64_t *v1722;
  unint64_t v1723;
  unint64_t v1724;
  int8x16_t *v1725;
  __int128 v1726;
  unint64_t *v1727;
  unint64_t v1728;
  int8x16_t v1729;
  int16x8_t v1730;
  int32x4_t v1731;
  int8x16_t v1732;
  int8x16_t v1733;
  int16x8_t v1734;
  int32x4_t v1735;
  int8x16_t v1736;
  int32x4_t v1737;
  int8x16_t v1738;
  int32x4_t v1739;
  int8x16_t v1740;
  int8x16_t v1741;
  int8x16_t v1742;
  int8x16_t v1743;
  int8x16_t v1744;
  int8x16_t v1745;
  int16x8_t v1746;
  int32x4_t v1747;
  int8x16_t v1748;
  int16x8_t v1749;
  int32x4_t v1750;
  int8x16_t v1751;
  int32x4_t v1752;
  int8x16_t v1753;
  int32x4_t v1754;
  int8x16_t v1755;
  int8x16_t v1756;
  int8x16_t v1757;
  int8x16_t v1758;
  int8x16_t v1759;
  int8x16_t v1760;
  int8x16_t v1761;
  int8x16_t v1762;
  int8x16_t v1763;
  int8x16_t v1764;
  int8x16_t v1765;
  int8x16_t v1766;
  int8x16_t v1767;
  int16x8_t v1768;
  int32x4_t v1769;
  int16x8_t v1770;
  int32x4_t v1771;
  int32x4_t v1772;
  int32x4_t v1773;
  int8x16_t v1774;
  int8x16_t v1775;
  int8x16_t v1776;
  int8x16_t v1777;
  int8x16_t v1778;
  int8x16_t v1779;
  int8x16_t v1780;
  int8x16_t v1781;
  int8x16_t v1782;
  int16x8_t v1783;
  int32x4_t v1784;
  int16x8_t v1785;
  int32x4_t v1786;
  int32x4_t v1787;
  int32x4_t v1788;
  int8x16_t v1789;
  int8x16_t v1790;
  int8x16_t v1791;
  int8x16_t v1792;
  int8x16_t v1793;
  int8x16_t v1794;
  int8x16_t v1795;
  std::__shared_weak_count *v1796;
  unint64_t *v1797;
  unint64_t v1798;
  std::__shared_weak_count *v1799;
  unint64_t *v1800;
  unint64_t v1801;
  uint64_t *v1802;
  unsigned __int8 v1803;
  uint64_t v1804;
  uint64_t v1805;
  uint64_t v1806;
  uint64_t v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t v1810;
  unint64_t v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  unint64_t v1815;
  unint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  _OWORD *v1819;
  __int128 *v1820;
  uint64_t v1821;
  __int128 v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  unint64_t v1829;
  uint64_t v1830;
  uint64_t v1831;
  uint64_t v1832;
  unint64_t v1833;
  unint64_t v1834;
  uint64_t v1835;
  uint64_t v1836;
  _OWORD *v1837;
  __int128 *v1838;
  uint64_t v1839;
  __int128 v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  _QWORD *v1845;
  uint64_t v1846;
  _QWORD *v1847;
  uint64_t v1848;
  char *v1849;
  unint64_t *v1850;
  std::__shared_weak_count *v1851;
  unint64_t *v1852;
  _QWORD *v1853;
  _QWORD *v1854;
  _QWORD *v1855;
  char *v1856;
  unint64_t v1857;
  int shared_owners_high;
  int shared_owners;
  unint64_t v1860;
  unint64_t v1861;
  unint64_t v1862;
  std::__shared_weak_count *v1863;
  unint64_t *v1864;
  unint64_t v1865;
  std::__shared_weak_count *v1866;
  unint64_t *v1867;
  _QWORD *v1868;
  _QWORD *v1869;
  _QWORD *v1870;
  char *v1871;
  unint64_t v1872;
  int v1873;
  int v1874;
  unint64_t v1875;
  uint64_t v1876;
  unint64_t *v1877;
  unint64_t v1878;
  unint64_t v1879;
  std::__shared_weak_count *v1880;
  unint64_t *v1881;
  unint64_t v1882;
  std::__shared_weak_count *v1883;
  unint64_t *v1884;
  unint64_t v1885;
  std::__shared_weak_count *v1886;
  unint64_t *v1887;
  unint64_t v1888;
  std::__shared_weak_count *v1889;
  unint64_t *v1890;
  unint64_t v1891;
  std::__shared_weak_count *v1892;
  unint64_t *v1893;
  unint64_t v1894;
  uint64_t v1896;
  geo::read_write_lock *v1897;
  const char *v1898;
  malloc_zone_t *zone;
  uint64_t v1900;
  geo::read_write_lock *v1901;
  const char *v1902;
  malloc_zone_t *v1903;
  uint64_t v1904;
  uint64_t v1905;
  uint64_t v1906;
  uint64_t v1907;
  int v1908;
  uint64_t v1909;
  unsigned __int8 v1910;
  uint64_t v1911;
  geo::read_write_lock *v1912;
  const char *v1913;
  malloc_zone_t *v1914;
  uint64_t v1915;
  geo::read_write_lock *v1916;
  const char *v1917;
  malloc_zone_t *v1918;
  uint64_t v1919;
  geo::read_write_lock *v1920;
  const char *v1921;
  malloc_zone_t *v1922;
  int v1923;
  uint64_t v1924;
  geo::read_write_lock *v1925;
  const char *v1926;
  malloc_zone_t *v1927;
  unsigned __int8 v1928;
  uint64_t v1929;
  geo::read_write_lock *v1930;
  const char *v1931;
  malloc_zone_t *v1932;
  uint64_t v1933;
  geo::read_write_lock *v1934;
  const char *v1935;
  malloc_zone_t *v1936;
  uint64_t v1937;
  geo::read_write_lock *v1938;
  const char *v1939;
  malloc_zone_t *v1940;
  int v1941;
  uint64_t v1942;
  geo::read_write_lock *v1943;
  const char *v1944;
  malloc_zone_t *v1945;
  int v1946;
  uint64_t v1947;
  uint64_t v1948;
  uint64_t v1949;
  int v1950;
  uint64_t v1951;
  ggl::SDFGlyphShader *v1952;
  unsigned __int8 v1953;
  unsigned __int8 v1954;
  unsigned __int8 v1955;
  ggl::SDFGlyphHaloShader *v1956;
  unsigned __int8 v1957;
  unsigned __int8 v1958;
  unsigned __int8 v1959;
  ggl::SDFGlyphSuperSampleShader *v1960;
  unsigned __int8 v1961;
  unsigned __int8 v1962;
  unsigned __int8 v1963;
  ggl::Glyph3dShader *v1964;
  unsigned __int8 v1965;
  unsigned __int8 v1966;
  unsigned __int8 v1967;
  ggl::Glyph3dLowPrecisionShader *v1968;
  unsigned __int8 v1969;
  unsigned __int8 v1970;
  unsigned __int8 v1971;
  ggl::Glyph3dLowPrecisionHaloShader *v1972;
  unsigned __int8 v1973;
  unsigned __int8 v1974;
  unsigned __int8 v1975;
  ggl::Glyph3dRaymarchShader *v1976;
  unsigned __int8 v1977;
  unsigned __int8 v1978;
  unsigned __int8 v1979;
  unsigned __int8 v1980;
  unsigned __int8 v1981;
  unsigned __int8 v1982;
  unsigned __int8 v1983;
  uint64_t v1984;
  uint64_t v1985;
  uint64_t v1986;
  uint64_t v1987;
  uint64_t v1988;
  uint64_t v1989;
  uint64_t v1990;
  uint64_t v1991;
  uint64_t v1992;
  uint64_t v1993;
  uint64_t v1994;
  uint64_t v1995;
  uint64_t v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  int v2000;
  uint64_t v2001;
  uint64_t v2002;
  uint64_t v2003;
  uint64_t v2004;
  uint64_t v2005;
  ggl::MaskedIconShader *v2006;
  unsigned __int8 v2007;
  unsigned __int8 v2008;
  unsigned __int8 v2009;
  uint64_t v2010;
  uint64_t v2011;
  int v2012;
  uint64_t v2013;
  ggl::WaypointShader *v2014;
  unsigned __int8 v2015;
  unsigned __int8 v2016;
  unsigned __int8 v2017;
  uint64_t v2018;
  uint64_t v2019;
  unsigned __int8 v2020;
  unsigned __int8 v2021;
  unsigned __int8 v2022;
  unsigned __int8 v2023;
  unsigned __int8 v2024;
  unsigned __int8 v2025;
  unsigned __int8 v2026;
  unsigned __int8 v2027;
  unsigned __int8 v2028;
  unsigned __int8 v2029;
  unsigned __int8 v2030;
  unsigned __int8 v2031;
  unsigned __int8 v2032;
  unsigned __int8 v2033;
  unsigned __int8 v2034;
  unsigned __int8 v2035;
  unsigned __int8 v2036;
  unsigned __int8 v2037;
  unsigned __int8 v2038;
  unsigned __int8 v2039;
  unsigned __int8 v2040;
  unsigned __int8 v2041;
  unsigned __int8 v2042;
  unsigned __int8 v2043;
  unsigned __int8 v2044;
  unsigned __int8 v2045;
  unsigned __int8 v2046;
  unsigned __int8 v2047;
  unsigned __int8 v2048;
  unsigned __int8 v2049;
  int v2050;
  unsigned __int8 v2051;
  unsigned __int8 v2052;
  uint64_t v2053;
  uint64_t v2054;
  uint64_t *v2055;
  uint64_t *v2056;
  uint64_t *v2057;
  uint64_t *v2058;
  uint64_t *v2059;
  uint64_t *v2060;
  uint64_t *v2061;
  uint64_t *v2062;
  uint64_t *v2063;
  uint64_t *v2064;
  uint64_t *v2065;
  uint64_t *v2066;
  uint64_t *v2067;
  uint64_t *v2068;
  _OWORD *v2069;
  uint64_t *v2070;
  uint64_t **v2071;
  uint64_t **v2072;
  uint64_t **v2073;
  uint64_t *v2074;
  uint64_t *v2075;
  uint64_t *v2076;
  uint64_t v2077;
  uint64_t v2078;
  uint64_t v2079;
  _BYTE v2080[32];
  __int128 v2081;
  _BYTE v2082[44];
  char v2083;
  __int128 v2084;
  uint64_t v2085;
  std::__shared_weak_count *v2086;
  std::__shared_weak_count *v2087;
  _QWORD *v2088;
  std::__shared_weak_count *v2089;
  __int128 v2090;
  __int128 v2091;
  _QWORD v2092[3];
  _QWORD *v2093;
  _QWORD v2094[3];
  _QWORD *v2095;
  _QWORD v2096[3];
  _QWORD *v2097;
  _QWORD v2098[3];
  _QWORD *v2099;
  _QWORD v2100[3];
  _QWORD *v2101;
  _QWORD v2102[3];
  _QWORD *v2103;
  _QWORD v2104[3];
  _QWORD *v2105;
  _QWORD v2106[3];
  _QWORD *v2107;
  _QWORD v2108[3];
  _QWORD *v2109;
  _QWORD v2110[3];
  _QWORD *v2111;
  _QWORD v2112[3];
  _QWORD *v2113;
  _QWORD v2114[3];
  _QWORD *v2115;
  _QWORD v2116[3];
  _QWORD *v2117;
  _QWORD v2118[3];
  _QWORD *v2119;
  _QWORD v2120[3];
  _QWORD *v2121;
  _QWORD v2122[3];
  _QWORD *v2123;
  _QWORD v2124[3];
  _QWORD *v2125;
  _QWORD v2126[3];
  _QWORD *v2127;
  _QWORD v2128[3];
  _QWORD *v2129;
  _QWORD v2130[3];
  _QWORD *v2131;
  _QWORD v2132[3];
  _QWORD *v2133;
  _QWORD v2134[3];
  _QWORD *v2135;
  _QWORD v2136[3];
  _QWORD *v2137;
  _QWORD v2138[3];
  _QWORD *v2139;
  _QWORD v2140[3];
  _QWORD *v2141;
  _QWORD v2142[3];
  _QWORD *v2143;
  _QWORD v2144[3];
  _QWORD *v2145;
  _QWORD v2146[3];
  _QWORD *v2147;
  _QWORD v2148[3];
  _QWORD *v2149;
  _QWORD v2150[3];
  _QWORD *v2151;
  uint64_t v2152;

  v2152 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a2;
  v9 = *(_QWORD **)a5;
  v10 = *(_QWORD **)(a5 + 8);
  if (*(_QWORD **)a5 != v10)
  {
    while (*v9 != 0xD369A4D92C8FFE6CLL)
    {
      v9 += 5;
      if (v9 == v10)
        goto LABEL_12;
    }
  }
  if (v9 == v10)
  {
LABEL_12:
    v12 = 0;
  }
  else
  {
    v12 = v9[3];
    v11 = (std::__shared_weak_count *)v9[4];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  *(_QWORD *)(a1 + 8) = v12;
  v16 = *(_QWORD **)a5;
  v17 = *(_QWORD **)(a5 + 8);
  if (*(_QWORD **)a5 != v17)
  {
    while (*v16 != 0x6F66BE14E10A8F81)
    {
      v16 += 5;
      if (v16 == v17)
        goto LABEL_24;
    }
  }
  if (v16 == v17)
  {
LABEL_24:
    v19 = 0;
  }
  else
  {
    v19 = v16[3];
    v18 = (std::__shared_weak_count *)v16[4];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 16) = v19;
  *(_OWORD *)(a1 + 40) = 0u;
  {
    v1896 = operator new();
    *(_QWORD *)(v1896 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v1896 + 24) = "VectorKitLabels";
    *(_OWORD *)(v1896 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v1896 = &off_1E42B5668;
    *(_QWORD *)(v1896 + 8) = "VectorKitLabels";
    *(_OWORD *)(v1896 + 72) = 0u;
    *(_OWORD *)(v1896 + 88) = 0u;
    *(_OWORD *)(v1896 + 104) = 0u;
    *(_OWORD *)(v1896 + 120) = 0u;
    *(_OWORD *)(v1896 + 136) = 0u;
    *(_OWORD *)(v1896 + 152) = 0u;
    *(_OWORD *)(v1896 + 168) = 0u;
    *(_OWORD *)(v1896 + 184) = 0u;
    *(_OWORD *)(v1896 + 200) = 0u;
    *(_OWORD *)(v1896 + 216) = 0u;
    *(_OWORD *)(v1896 + 232) = 0u;
    *(_QWORD *)(v1896 + 248) = 0;
    *(_OWORD *)(v1896 + 56) = 0u;
    v1897 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1896 + 56), 0);
    if ((_DWORD)v1897)
      geo::read_write_lock::logFailure(v1897, (uint64_t)"initialization", v1898);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v1896 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v1896 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v1896;
  }
  *(_QWORD *)(a1 + 56) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  {
    v1900 = operator new();
    *(_QWORD *)(v1900 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v1900 + 24) = "VectorKitLabels";
    *(_OWORD *)(v1900 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v1900 = &off_1E42B5668;
    *(_QWORD *)(v1900 + 8) = "VectorKitLabels";
    *(_OWORD *)(v1900 + 72) = 0u;
    *(_OWORD *)(v1900 + 88) = 0u;
    *(_OWORD *)(v1900 + 104) = 0u;
    *(_OWORD *)(v1900 + 120) = 0u;
    *(_OWORD *)(v1900 + 136) = 0u;
    *(_OWORD *)(v1900 + 152) = 0u;
    *(_OWORD *)(v1900 + 168) = 0u;
    *(_OWORD *)(v1900 + 184) = 0u;
    *(_OWORD *)(v1900 + 200) = 0u;
    *(_OWORD *)(v1900 + 216) = 0u;
    *(_OWORD *)(v1900 + 232) = 0u;
    *(_QWORD *)(v1900 + 248) = 0;
    *(_OWORD *)(v1900 + 56) = 0u;
    v1901 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1900 + 56), 0);
    if ((_DWORD)v1901)
      geo::read_write_lock::logFailure(v1901, (uint64_t)"initialization", v1902);
    v1903 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1900 + 48) = v1903;
    malloc_set_zone_name(v1903, "VectorKitLabels");
    *(_QWORD *)(v1900 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v1900;
  }
  v25 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = v25;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  {
    v1904 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1904, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v26 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = v26;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  {
    v1905 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1905, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v27 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = v27;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  {
    v1906 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1906, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v28 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = v28;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  {
    v1907 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1907, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v29 = (_OWORD *)(a1 + 472);
  v30 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = v30;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  if ((v30 & 1) == 0)
  {
    v29 = (_OWORD *)(a1 + 472);
    if (v1908)
    {
      v1909 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1909, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v29 = (_OWORD *)(a1 + 472);
    }
  }
  *(_QWORD *)(a1 + 248) = mdm::Allocator::instance(void)::alloc;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_QWORD *)(a1 + 308) = 0;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_DWORD *)(a1 + 276) = 1065353216;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_DWORD *)(a1 + 316) = 1065353216;
  *(_QWORD *)(a1 + 320) = -1;
  *(_BYTE *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)((char *)v29 + 52) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 556) = 0;
  *(_QWORD *)(a1 + 540) = 0;
  *(_QWORD *)(a1 + 548) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  v2079 = a1 + 576;
  *(_QWORD *)(a1 + 568) = a1 + 576;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_BYTE *)(a1 + 640) = 0;
  *(_OWORD *)((char *)v29 + 172) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 676) = 0;
  *(_QWORD *)(a1 + 660) = 0;
  *(_QWORD *)(a1 + 668) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  v2053 = a1 + 696;
  *(_QWORD *)(a1 + 688) = a1 + 696;
  v29[15] = 0u;
  v31 = v29 + 15;
  *((_BYTE *)v31 + 48) = 0;
  v31[1] = 0u;
  v31[2] = 0u;
  v2069 = v31;
  *(_OWORD *)(a1 + 764) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 788) = 0;
  *(_QWORD *)(a1 + 780) = 0;
  *(_QWORD *)(a1 + 796) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 816) = 0;
  v2054 = a1 + 816;
  *(_QWORD *)(a1 + 808) = a1 + 816;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  if ((v32 & 1) == 0
  {
    if ((v1910 & 1) == 0
    {
      ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Glyph::defaultVboReflection;
    }
    ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r;
    *(_QWORD *)algn_1ECE43D90 = 1;
  }
  *(_QWORD *)(a1 + 1032) = "LabelGlyphMesh";
  *(_QWORD *)(a1 + 1048) = 0;
  *(_QWORD *)(a1 + 1064) = 0;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_DWORD *)(a1 + 1072) = 0;
  *(_QWORD *)(a1 + 1024) = &off_1E42BBC08;
  *(_QWORD *)(a1 + 1040) = &unk_1E42BBC28;
  *(_QWORD *)(a1 + 1080) = &ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_QWORD *)(a1 + 1104) = 0;
  *(_QWORD *)(a1 + 1096) = 0;
  {
    v1911 = operator new();
    *(_QWORD *)(v1911 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1911 + 24) = "GeoGL";
    *(_OWORD *)(v1911 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1911 = &off_1E42B5668;
    *(_QWORD *)(v1911 + 8) = "GeoGL";
    *(_OWORD *)(v1911 + 72) = 0u;
    *(_OWORD *)(v1911 + 88) = 0u;
    *(_OWORD *)(v1911 + 104) = 0u;
    *(_OWORD *)(v1911 + 120) = 0u;
    *(_OWORD *)(v1911 + 136) = 0u;
    *(_OWORD *)(v1911 + 152) = 0u;
    *(_OWORD *)(v1911 + 168) = 0u;
    *(_OWORD *)(v1911 + 184) = 0u;
    *(_OWORD *)(v1911 + 200) = 0u;
    *(_OWORD *)(v1911 + 216) = 0u;
    *(_OWORD *)(v1911 + 232) = 0u;
    *(_QWORD *)(v1911 + 248) = 0;
    *(_OWORD *)(v1911 + 56) = 0u;
    v1912 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1911 + 56), 0);
    if ((_DWORD)v1912)
      geo::read_write_lock::logFailure(v1912, (uint64_t)"initialization", v1913);
    v1914 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1911 + 48) = v1914;
    malloc_set_zone_name(v1914, "GeoGL");
    *(_QWORD *)(v1911 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1911;
  }
  *(_QWORD *)(a1 + 1112) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 1128) = 0;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_QWORD *)(a1 + 1144) = 0;
  {
    v1915 = operator new();
    *(_QWORD *)(v1915 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1915 + 24) = "GeoGL";
    *(_OWORD *)(v1915 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1915 = &off_1E42B5668;
    *(_QWORD *)(v1915 + 8) = "GeoGL";
    *(_OWORD *)(v1915 + 72) = 0u;
    *(_OWORD *)(v1915 + 88) = 0u;
    *(_OWORD *)(v1915 + 104) = 0u;
    *(_OWORD *)(v1915 + 120) = 0u;
    *(_OWORD *)(v1915 + 136) = 0u;
    *(_OWORD *)(v1915 + 152) = 0u;
    *(_OWORD *)(v1915 + 168) = 0u;
    *(_OWORD *)(v1915 + 184) = 0u;
    *(_OWORD *)(v1915 + 200) = 0u;
    *(_OWORD *)(v1915 + 216) = 0u;
    *(_OWORD *)(v1915 + 232) = 0u;
    *(_QWORD *)(v1915 + 248) = 0;
    *(_OWORD *)(v1915 + 56) = 0u;
    v1916 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1915 + 56), 0);
    if ((_DWORD)v1916)
      geo::read_write_lock::logFailure(v1916, (uint64_t)"initialization", v1917);
    v1918 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1915 + 48) = v1918;
    malloc_set_zone_name(v1918, "GeoGL");
    *(_QWORD *)(v1915 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1915;
  }
  *(_QWORD *)(a1 + 1152) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 1160) = 0;
  *(_QWORD *)(a1 + 1136) = a1 + 1144;
  *(_QWORD *)(a1 + 1024) = &off_1E42BDD78;
  *(_QWORD *)(a1 + 1040) = &unk_1E42BDD98;
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 1080) + 8);
  v36 = *(_QWORD *)(a1 + 1096);
  v37 = *(_QWORD *)(a1 + 1088);
  v38 = (v36 - v37) >> 4;
  v39 = v35 - v38;
  if (v35 <= v38)
  {
    if (v35 < v38)
    {
      v40 = v37 + 16 * v35;
      while (v36 != v40)
      {
        v41 = *(std::__shared_weak_count **)(v36 - 8);
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v41->__on_zero_shared)(v41, v39);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v36 -= 16;
      }
      *(_QWORD *)(a1 + 1096) = v40;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(a1 + 1088, v39);
  }
  v2078 = a1 + 1088;
  *(_QWORD *)(a1 + 1024) = &off_1E42BBE98;
  *(_QWORD *)(a1 + 1040) = &unk_1E42BBEB8;
  {
    v1919 = operator new();
    *(_QWORD *)(v1919 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1919 + 24) = "GeoGL";
    *(_OWORD *)(v1919 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1919 = &off_1E42B5668;
    *(_QWORD *)(v1919 + 8) = "GeoGL";
    *(_OWORD *)(v1919 + 72) = 0u;
    *(_OWORD *)(v1919 + 88) = 0u;
    *(_OWORD *)(v1919 + 104) = 0u;
    *(_OWORD *)(v1919 + 120) = 0u;
    *(_OWORD *)(v1919 + 136) = 0u;
    *(_OWORD *)(v1919 + 152) = 0u;
    *(_OWORD *)(v1919 + 168) = 0u;
    *(_OWORD *)(v1919 + 184) = 0u;
    *(_OWORD *)(v1919 + 200) = 0u;
    *(_OWORD *)(v1919 + 216) = 0u;
    *(_OWORD *)(v1919 + 232) = 0u;
    *(_QWORD *)(v1919 + 248) = 0;
    *(_OWORD *)(v1919 + 56) = 0u;
    v1920 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1919 + 56), 0);
    if ((_DWORD)v1920)
      geo::read_write_lock::logFailure(v1920, (uint64_t)"initialization", v1921);
    v1922 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1919 + 48) = v1922;
    malloc_set_zone_name(v1922, "GeoGL");
    *(_QWORD *)(v1919 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1919;
  }
  v45 = ggl::Allocator::instance(void)::alloc;
  v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v46 = &off_1E42E03D8;
  *(_QWORD *)(v46 + 8) = 0;
  *(_QWORD *)(v46 + 32) = &off_1E42B5748;
  *(_QWORD *)(v46 + 16) = 0;
  *(_QWORD *)(v46 + 24) = v45;
  *(_QWORD *)(v46 + 40) = 40;
  *(_DWORD *)(v46 + 48) = 6;
  v47 = 0uLL;
  *(_OWORD *)(v46 + 56) = 0u;
  *(_OWORD *)(v46 + 72) = 0u;
  *(_OWORD *)(v46 + 88) = 0u;
  *(_OWORD *)(v46 + 104) = 0u;
  *(_QWORD *)(v46 + 120) = 0;
  if ((v48 & 1) == 0)
  {
    v47 = 0uLL;
    if (v1923)
    {
      v1924 = operator new();
      *(_QWORD *)(v1924 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v1924 + 24) = "GeoGL";
      *(_OWORD *)(v1924 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v1924 = &off_1E42B5668;
      *(_QWORD *)(v1924 + 8) = "GeoGL";
      *(_OWORD *)(v1924 + 72) = 0u;
      *(_OWORD *)(v1924 + 88) = 0u;
      *(_OWORD *)(v1924 + 104) = 0u;
      *(_OWORD *)(v1924 + 120) = 0u;
      *(_OWORD *)(v1924 + 136) = 0u;
      *(_OWORD *)(v1924 + 152) = 0u;
      *(_OWORD *)(v1924 + 168) = 0u;
      *(_OWORD *)(v1924 + 184) = 0u;
      *(_OWORD *)(v1924 + 200) = 0u;
      *(_OWORD *)(v1924 + 216) = 0u;
      *(_OWORD *)(v1924 + 232) = 0u;
      *(_QWORD *)(v1924 + 248) = 0;
      *(_OWORD *)(v1924 + 56) = 0u;
      v1925 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1924 + 56), 0);
      if ((_DWORD)v1925)
        geo::read_write_lock::logFailure(v1925, (uint64_t)"initialization", v1926);
      v1927 = malloc_create_zone(0, 0);
      *(_QWORD *)(v1924 + 48) = v1927;
      malloc_set_zone_name(v1927, "GeoGL");
      *(_QWORD *)(v1924 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v1924;
      v47 = 0uLL;
    }
  }
  *(_QWORD *)(v46 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v46 + 136) = 0;
  *(_OWORD *)(v46 + 200) = v47;
  *(_OWORD *)(v46 + 184) = v47;
  *(_OWORD *)(v46 + 168) = v47;
  *(_QWORD *)(v46 + 216) = 0;
  *(_QWORD *)(v46 + 224) = -1;
  *(_OWORD *)(v46 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v46 + 144) = 0;
  *(_QWORD *)(v46 + 32) = &off_1E42B80E0;
  *(_QWORD *)(v46 + 240) = "LabelGlyphMesh";
  *(_QWORD *)(v46 + 248) = &ggl::Glyph::defaultVboReflection;
  *(_QWORD *)(v46 + 232) = &unk_1E42B8100;
  v49 = *(_QWORD **)v2078;
  v50 = *(std::__shared_weak_count **)(*(_QWORD *)v2078 + 8);
  *v49 = v46 + 32;
  v49[1] = v46;
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  if ((v53 & 1) == 0
  {
    if ((v1928 & 1) == 0
    {
      ggl::MeshTyped<ggl::Icon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Icon::defaultVboReflection;
    }
    ggl::MeshTyped<ggl::Icon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Icon::DefaultVbo>::attributesReflection(void)::r;
    unk_1ECE43D68 = 1;
  }
  *(_QWORD *)(a1 + 1240) = "LabelIconMesh";
  *(_QWORD *)(a1 + 1256) = 0;
  *(_QWORD *)(a1 + 1272) = 0;
  *(_QWORD *)(a1 + 1264) = 0;
  *(_DWORD *)(a1 + 1280) = 0;
  *(_QWORD *)(a1 + 1232) = &off_1E42BBC08;
  *(_QWORD *)(a1 + 1248) = &unk_1E42BBC28;
  *(_QWORD *)(a1 + 1288) = &ggl::MeshTyped<ggl::Icon::DefaultVbo>::typedReflection(void)::r;
  *(_QWORD *)(a1 + 1296) = 0;
  *(_QWORD *)(a1 + 1312) = 0;
  *(_QWORD *)(a1 + 1304) = 0;
  {
    v1929 = operator new();
    *(_QWORD *)(v1929 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1929 + 24) = "GeoGL";
    *(_OWORD *)(v1929 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1929 = &off_1E42B5668;
    *(_QWORD *)(v1929 + 8) = "GeoGL";
    *(_OWORD *)(v1929 + 72) = 0u;
    *(_OWORD *)(v1929 + 88) = 0u;
    *(_OWORD *)(v1929 + 104) = 0u;
    *(_OWORD *)(v1929 + 120) = 0u;
    *(_OWORD *)(v1929 + 136) = 0u;
    *(_OWORD *)(v1929 + 152) = 0u;
    *(_OWORD *)(v1929 + 168) = 0u;
    *(_OWORD *)(v1929 + 184) = 0u;
    *(_OWORD *)(v1929 + 200) = 0u;
    *(_OWORD *)(v1929 + 216) = 0u;
    *(_OWORD *)(v1929 + 232) = 0u;
    *(_QWORD *)(v1929 + 248) = 0;
    *(_OWORD *)(v1929 + 56) = 0u;
    v1930 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1929 + 56), 0);
    if ((_DWORD)v1930)
      geo::read_write_lock::logFailure(v1930, (uint64_t)"initialization", v1931);
    v1932 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1929 + 48) = v1932;
    malloc_set_zone_name(v1932, "GeoGL");
    *(_QWORD *)(v1929 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1929;
  }
  *(_QWORD *)(a1 + 1320) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 1336) = 0;
  *(_QWORD *)(a1 + 1328) = 0;
  *(_QWORD *)(a1 + 1352) = 0;
  {
    v1933 = operator new();
    *(_QWORD *)(v1933 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1933 + 24) = "GeoGL";
    *(_OWORD *)(v1933 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1933 = &off_1E42B5668;
    *(_QWORD *)(v1933 + 8) = "GeoGL";
    *(_OWORD *)(v1933 + 72) = 0u;
    *(_OWORD *)(v1933 + 88) = 0u;
    *(_OWORD *)(v1933 + 104) = 0u;
    *(_OWORD *)(v1933 + 120) = 0u;
    *(_OWORD *)(v1933 + 136) = 0u;
    *(_OWORD *)(v1933 + 152) = 0u;
    *(_OWORD *)(v1933 + 168) = 0u;
    *(_OWORD *)(v1933 + 184) = 0u;
    *(_OWORD *)(v1933 + 200) = 0u;
    *(_OWORD *)(v1933 + 216) = 0u;
    *(_OWORD *)(v1933 + 232) = 0u;
    *(_QWORD *)(v1933 + 248) = 0;
    *(_OWORD *)(v1933 + 56) = 0u;
    v1934 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1933 + 56), 0);
    if ((_DWORD)v1934)
      geo::read_write_lock::logFailure(v1934, (uint64_t)"initialization", v1935);
    v1936 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1933 + 48) = v1936;
    malloc_set_zone_name(v1936, "GeoGL");
    *(_QWORD *)(v1933 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1933;
  }
  *(_QWORD *)(a1 + 1360) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 1368) = 0;
  *(_QWORD *)(a1 + 1344) = a1 + 1352;
  *(_QWORD *)(a1 + 1232) = &off_1E42BDC78;
  *(_QWORD *)(a1 + 1248) = &unk_1E42BDC98;
  v56 = *(_QWORD *)(*(_QWORD *)(a1 + 1288) + 8);
  v57 = *(_QWORD *)(a1 + 1304);
  v58 = *(_QWORD *)(a1 + 1296);
  v59 = (v57 - v58) >> 4;
  v60 = v56 - v59;
  v2077 = a1 + 1296;
  if (v56 <= v59)
  {
    if (v56 < v59)
    {
      v61 = v58 + 16 * v56;
      while (v57 != v61)
      {
        v62 = *(std::__shared_weak_count **)(v57 - 8);
        if (v62)
        {
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v62->__on_zero_shared)(v62, v60);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        v57 -= 16;
      }
      *(_QWORD *)(a1 + 1304) = v61;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(a1 + 1296, v60);
  }
  *(_QWORD *)(a1 + 1232) = &off_1E42BBB78;
  *(_QWORD *)(a1 + 1248) = &unk_1E42BBB98;
  {
    v1937 = operator new();
    *(_QWORD *)(v1937 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1937 + 24) = "GeoGL";
    *(_OWORD *)(v1937 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1937 = &off_1E42B5668;
    *(_QWORD *)(v1937 + 8) = "GeoGL";
    *(_OWORD *)(v1937 + 72) = 0u;
    *(_OWORD *)(v1937 + 88) = 0u;
    *(_OWORD *)(v1937 + 104) = 0u;
    *(_OWORD *)(v1937 + 120) = 0u;
    *(_OWORD *)(v1937 + 136) = 0u;
    *(_OWORD *)(v1937 + 152) = 0u;
    *(_OWORD *)(v1937 + 168) = 0u;
    *(_OWORD *)(v1937 + 184) = 0u;
    *(_OWORD *)(v1937 + 200) = 0u;
    *(_OWORD *)(v1937 + 216) = 0u;
    *(_OWORD *)(v1937 + 232) = 0u;
    *(_QWORD *)(v1937 + 248) = 0;
    *(_OWORD *)(v1937 + 56) = 0u;
    v1938 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1937 + 56), 0);
    if ((_DWORD)v1938)
      geo::read_write_lock::logFailure(v1938, (uint64_t)"initialization", v1939);
    v1940 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1937 + 48) = v1940;
    malloc_set_zone_name(v1940, "GeoGL");
    *(_QWORD *)(v1937 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1937;
  }
  v66 = ggl::Allocator::instance(void)::alloc;
  v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v67 = &off_1E42E0288;
  *(_QWORD *)(v67 + 8) = 0;
  *(_QWORD *)(v67 + 32) = &off_1E42B5748;
  *(_QWORD *)(v67 + 16) = 0;
  *(_QWORD *)(v67 + 24) = v66;
  *(_QWORD *)(v67 + 40) = 32;
  *(_DWORD *)(v67 + 48) = 6;
  v68 = 0uLL;
  *(_OWORD *)(v67 + 56) = 0u;
  *(_OWORD *)(v67 + 72) = 0u;
  *(_OWORD *)(v67 + 88) = 0u;
  *(_OWORD *)(v67 + 104) = 0u;
  *(_QWORD *)(v67 + 120) = 0;
  if ((v69 & 1) == 0)
  {
    v68 = 0uLL;
    if (v1941)
    {
      v1942 = operator new();
      *(_QWORD *)(v1942 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v1942 + 24) = "GeoGL";
      *(_OWORD *)(v1942 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v1942 = &off_1E42B5668;
      *(_QWORD *)(v1942 + 8) = "GeoGL";
      *(_OWORD *)(v1942 + 72) = 0u;
      *(_OWORD *)(v1942 + 88) = 0u;
      *(_OWORD *)(v1942 + 104) = 0u;
      *(_OWORD *)(v1942 + 120) = 0u;
      *(_OWORD *)(v1942 + 136) = 0u;
      *(_OWORD *)(v1942 + 152) = 0u;
      *(_OWORD *)(v1942 + 168) = 0u;
      *(_OWORD *)(v1942 + 184) = 0u;
      *(_OWORD *)(v1942 + 200) = 0u;
      *(_OWORD *)(v1942 + 216) = 0u;
      *(_OWORD *)(v1942 + 232) = 0u;
      *(_QWORD *)(v1942 + 248) = 0;
      *(_OWORD *)(v1942 + 56) = 0u;
      v1943 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1942 + 56), 0);
      if ((_DWORD)v1943)
        geo::read_write_lock::logFailure(v1943, (uint64_t)"initialization", v1944);
      v1945 = malloc_create_zone(0, 0);
      *(_QWORD *)(v1942 + 48) = v1945;
      malloc_set_zone_name(v1945, "GeoGL");
      *(_QWORD *)(v1942 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v1942;
      v68 = 0uLL;
    }
  }
  *(_QWORD *)(v67 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v67 + 136) = 0;
  *(_OWORD *)(v67 + 200) = v68;
  *(_OWORD *)(v67 + 184) = v68;
  *(_OWORD *)(v67 + 168) = v68;
  *(_QWORD *)(v67 + 216) = 0;
  *(_QWORD *)(v67 + 224) = -1;
  *(_OWORD *)(v67 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v67 + 144) = 0;
  *(_QWORD *)(v67 + 32) = &off_1E42B7FE0;
  *(_QWORD *)(v67 + 240) = "LabelIconMesh";
  *(_QWORD *)(v67 + 248) = &ggl::Icon::defaultVboReflection;
  *(_QWORD *)(v67 + 232) = &unk_1E42B8000;
  v70 = *(_QWORD **)v2077;
  v71 = *(std::__shared_weak_count **)(*(_QWORD *)v2077 + 8);
  *v70 = v67 + 32;
  v70[1] = v67;
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = 0uLL;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  if ((v75 & 1) == 0)
  {
    v74 = 0uLL;
    if (v1946)
    {
      v1947 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1947, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v74 = 0uLL;
    }
  }
  *(_QWORD *)(a1 + 1616) = mdm::Allocator::instance(void)::alloc;
  *(_DWORD *)(a1 + 1624) = 0;
  *(_OWORD *)(a1 + 1632) = v74;
  *(_OWORD *)(a1 + 1648) = v74;
  *(_OWORD *)(a1 + 1664) = v74;
  *(_OWORD *)(a1 + 1680) = v74;
  *(_OWORD *)(a1 + 1696) = v74;
  *(_OWORD *)(a1 + 1712) = v74;
  *(_OWORD *)(a1 + 1728) = v74;
  *(_OWORD *)(a1 + 1744) = v74;
  {
    v1948 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1948, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *(_QWORD *)(a1 + 1760) = mdm::Allocator::instance(void)::alloc;
  *(_DWORD *)(a1 + 1768) = 0;
  *(_QWORD *)(a1 + 1784) = 0;
  *(_QWORD *)(a1 + 1792) = 0;
  *(_QWORD *)(a1 + 1776) = 0;
  {
    v1949 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1949, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v2064 = (uint64_t *)(a1 + 352);
  v2065 = (uint64_t *)(a1 + 344);
  *(_QWORD *)(a1 + 1800) = mdm::Allocator::instance(void)::alloc;
  v2062 = (uint64_t *)(a1 + 368);
  v2063 = (uint64_t *)(a1 + 360);
  *(_DWORD *)(a1 + 1816) = 0;
  *(_QWORD *)(a1 + 1808) = 0;
  v2067 = (uint64_t *)(a1 + 384);
  v2068 = (uint64_t *)(a1 + 376);
  v2066 = (uint64_t *)(a1 + 392);
  *(_BYTE *)(a1 + 1852) = 0;
  v2060 = (uint64_t *)(a1 + 408);
  v2061 = (uint64_t *)(a1 + 400);
  *(_BYTE *)(a1 + 1856) = 0;
  v2058 = (uint64_t *)(a1 + 424);
  v2059 = (uint64_t *)(a1 + 416);
  *(_WORD *)(a1 + 1860) = 0;
  v2056 = (uint64_t *)(a1 + 440);
  v2057 = (uint64_t *)(a1 + 432);
  *(_QWORD *)(a1 + 1824) = 0;
  v2055 = (uint64_t *)(a1 + 448);
  *(_QWORD *)(a1 + 1840) = 0;
  v2075 = (uint64_t *)(a1 + 1440);
  v2076 = (uint64_t *)(a1 + 1424);
  v2074 = (uint64_t *)(a1 + 1456);
  *(_QWORD *)(a1 + 1832) = 0;
  v2072 = (uint64_t **)(a1 + 1832);
  v2073 = (uint64_t **)(a1 + 1824);
  *(_WORD *)(a1 + 1848) = 0;
  v2070 = (uint64_t *)(a1 + 992);
  v2071 = (uint64_t **)(a1 + 1840);
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_DWORD *)(a1 + 296) = -1082130432;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(a1 + 304) = _D0;
  v83 = (unint64_t *)operator new();
  v2151 = v2150;
  v2148[0] = &off_1E42D60C8;
  v2149 = v2148;
  v2150[0] = &off_1E42CAC28;
  ggl::FragmentedPool<ggl::RenderItem>::FragmentedPool(v83, (uint64_t)v2150, (uint64_t)v2148);
  v84 = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 336) = v83;
  if (v84)
  {
    v85 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v84);
    MEMORY[0x1A1AF4E00](v85, 0x10A0C40D234DDC7);
  }
  v86 = v2149;
  if (v2149 == v2148)
  {
    v87 = 4;
    v86 = v2148;
  }
  else
  {
    if (!v2149)
      goto LABEL_86;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_86:
  v88 = v2151;
  if (v2151 == v2150)
  {
    v89 = 4;
    v88 = v2150;
    goto LABEL_90;
  }
  if (v2151)
  {
    v89 = 5;
LABEL_90:
    (*(void (**)(void))(*v88 + 8 * v89))();
  }
  v90 = operator new(0xF8uLL);
  v90[1] = 0;
  v90[2] = 0;
  *v90 = &off_1E42DF1E8;
  v90[3] = &off_1E42B5748;
  v90[4] = 2;
  *((_DWORD *)v90 + 10) = 65798;
  v91 = 0uLL;
  *((_OWORD *)v90 + 3) = 0u;
  *((_OWORD *)v90 + 4) = 0u;
  *((_OWORD *)v90 + 5) = 0u;
  *((_OWORD *)v90 + 6) = 0u;
  v90[14] = 0;
  if ((v92 & 1) == 0)
  {
    v91 = 0uLL;
    if (v1950)
    {
      v1951 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1951, "GeoGL", 0xA3D02C1100000005);
      v91 = 0uLL;
    }
  }
  v90[15] = ggl::Allocator::instance(void)::alloc;
  v90[16] = 0;
  *((_OWORD *)v90 + 11) = v91;
  *((_OWORD *)v90 + 12) = v91;
  v90[26] = 0;
  v90[27] = -1;
  *((_OWORD *)v90 + 10) = v91;
  *((_OWORD *)v90 + 9) = xmmword_19FFB2DD0;
  *((_DWORD *)v90 + 34) = 0;
  *((_DWORD *)v90 + 60) = 0;
  v90[3] = &off_1E42B6B88;
  v90[4] = 2;
  v90[28] = &unk_1E42B6BA8;
  v90[29] = "LabelSerialIndexData";
  v93 = *(std::__shared_weak_count **)(a1 + 464);
  *(_QWORD *)(a1 + 456) = v90 + 3;
  *(_QWORD *)(a1 + 464) = v90;
  if (v93)
  {
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = operator new(0xE8uLL);
  v96[1] = 0;
  v96[2] = 0;
  *v96 = &off_1E42E24E0;
  v97 = ggl::BufferData::BufferData((uint64_t)(v96 + 3), qword_1EE558EB0, 2, 1, 6, 1);
  v96[28] = ggl::Label::View::reflection(void)::reflection;
  v96[3] = &off_1E42B9910;
  *(_QWORD *)(a1 + 1376) = v97;
  v98 = *(std::__shared_weak_count **)(a1 + 1384);
  *(_QWORD *)(a1 + 1384) = v96;
  if (v98)
  {
    v99 = (unint64_t *)&v98->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = operator new(0xE8uLL);
  v101[1] = 0;
  v101[2] = 0;
  *v101 = &off_1E42E2470;
  v102 = ggl::BufferData::BufferData((uint64_t)(v101 + 3), qword_1EE558EF0, 2, 1, 6, 1);
  v101[28] = ggl::Label::ViewInScreenSpace::reflection(void)::reflection;
  v101[3] = &off_1E42B98D0;
  *(_QWORD *)(a1 + 1392) = v102;
  v103 = *(std::__shared_weak_count **)(a1 + 1400);
  *(_QWORD *)(a1 + 1400) = v101;
  if (v103)
  {
    v104 = (unint64_t *)&v103->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = operator new(0xE8uLL);
  v106[1] = 0;
  v106[2] = 0;
  *v106 = &off_1E42E2438;
  v107 = ggl::BufferData::BufferData((uint64_t)(v106 + 3), qword_1EE558F30, 2, 1, 6, 1);
  v106[28] = ggl::Label::ViewCommon::reflection(void)::reflection;
  v106[3] = &off_1E42B98B0;
  *(_QWORD *)(a1 + 1408) = v107;
  v108 = *(std::__shared_weak_count **)(a1 + 1416);
  *(_QWORD *)(a1 + 1416) = v106;
  if (v108)
  {
    v109 = (unint64_t *)&v108->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = operator new(0xE8uLL);
  v111[1] = 0;
  v111[2] = 0;
  *v111 = &off_1E42E2518;
  v112 = ggl::BufferData::BufferData((uint64_t)(v111 + 3), qword_1EE558F90, 2, 1, 6, 1);
  v111[28] = ggl::Label::Options::reflection(void)::reflection;
  v111[3] = &off_1E42B9930;
  *(_QWORD *)(a1 + 1424) = v112;
  v113 = *(std::__shared_weak_count **)(a1 + 1432);
  *(_QWORD *)(a1 + 1432) = v111;
  if (v113)
  {
    v114 = (unint64_t *)&v113->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = *v2076;
  v117 = *(_QWORD *)(*v2076 + 8);
  **(_QWORD **)(*v2076 + 72) = 0x3F80000000000000;
  v118 = *(_QWORD *)(v116 + 64);
  if (v118 <= v117)
    v118 = v117;
  if (v118 > v117)
    v117 = v118;
  *(_QWORD *)(v116 + 56) = 0;
  *(_QWORD *)(v116 + 64) = v117;
  v119 = operator new(0xE8uLL);
  v119[1] = 0;
  v119[2] = 0;
  *v119 = &off_1E42E2518;
  v120 = ggl::BufferData::BufferData((uint64_t)(v119 + 3), qword_1EE558F90, 2, 1, 6, 1);
  v119[28] = ggl::Label::Options::reflection(void)::reflection;
  v119[3] = &off_1E42B9930;
  *(_QWORD *)(a1 + 1440) = v120;
  v121 = *(std::__shared_weak_count **)(a1 + 1448);
  *(_QWORD *)(a1 + 1448) = v119;
  if (v121)
  {
    v122 = (unint64_t *)&v121->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = *v2075;
  v125 = *(_QWORD *)(*v2075 + 8);
  **(_QWORD **)(*v2075 + 72) = 0x3F80000000000001;
  v126 = *(_QWORD *)(v124 + 64);
  if (v126 <= v125)
    v126 = v125;
  if (v126 > v125)
    v125 = v126;
  *(_QWORD *)(v124 + 56) = 0;
  *(_QWORD *)(v124 + 64) = v125;
  v127 = operator new(0xE8uLL);
  v127[1] = 0;
  v127[2] = 0;
  *v127 = &off_1E42E2518;
  v128 = ggl::BufferData::BufferData((uint64_t)(v127 + 3), qword_1EE558F90, 2, 1, 6, 1);
  v127[28] = ggl::Label::Options::reflection(void)::reflection;
  v127[3] = &off_1E42B9930;
  *(_QWORD *)(a1 + 1456) = v128;
  v129 = *(std::__shared_weak_count **)(a1 + 1464);
  *(_QWORD *)(a1 + 1464) = v127;
  if (v129)
  {
    v130 = (unint64_t *)&v129->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = *v2074;
  v133 = *(_QWORD *)(*v2074 + 8);
  **(_QWORD **)(*v2074 + 72) = 0x3E4CCCCD00000001;
  v134 = *(_QWORD *)(v132 + 64);
  if (v134 <= v133)
    v134 = v133;
  if (v134 > v133)
    v133 = v134;
  *(_QWORD *)(v132 + 56) = 0;
  *(_QWORD *)(v132 + 64) = v133;
  v135 = operator new(0x58uLL);
  v135[1] = 0;
  v135[2] = 0;
  *v135 = &off_1E42DED18;
  v135[5] = 0;
  v135[6] = 0;
  v135[4] = 0;
  *((_DWORD *)v135 + 14) = 0;
  v135[3] = &off_1E42B63B0;
  *((_DWORD *)v135 + 17) = 1;
  *(_QWORD *)((char *)v135 + 60) = 0x100000001;
  v135[9] = 0;
  v135[10] = 0;
  v2088 = v135 + 3;
  v2089 = (std::__shared_weak_count *)v135;
  md::LabelRenderDeviceBuffer::initialize(a1 + 1488, 16, 18, (uint64_t *)&v2088);
  md::LabelRenderDeviceBuffer::initialize(a1 + 1632, 4, 12, (uint64_t *)&v2088);
  v136 = (uint64_t *)operator new();
  md::LabelRenderer::LabelMeshRenderStateSet::LabelMeshRenderStateSet(v136, 65537, 0);
  v137 = *v2073;
  *v2073 = v136;
  if (v137)
  {
    v138 = v137[3];
    v137[3] = 0;
    if (v138)
      (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
    v139 = v137[2];
    v137[2] = 0;
    if (v139)
      (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
    v140 = v137[1];
    v137[1] = 0;
    if (v140)
      (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
    v141 = *v137;
    *v137 = 0;
    if (v141)
      (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
    MEMORY[0x1A1AF4E00](v137, 0x20C40DC1BFBCFLL);
  }
  v142 = (uint64_t *)operator new();
  md::LabelRenderer::LabelMeshRenderStateSet::LabelMeshRenderStateSet(v142, 0xC120000000010300, -1054867456);
  v143 = *v2072;
  *v2072 = v142;
  if (v143)
  {
    v144 = v143[3];
    v143[3] = 0;
    if (v144)
      (*(void (**)(uint64_t))(*(_QWORD *)v144 + 8))(v144);
    v145 = v143[2];
    v143[2] = 0;
    if (v145)
      (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
    v146 = v143[1];
    v143[1] = 0;
    if (v146)
      (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
    v147 = *v143;
    *v143 = 0;
    if (v147)
      (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
    MEMORY[0x1A1AF4E00](v143, 0x20C40DC1BFBCFLL);
  }
  v148 = (uint64_t *)operator new();
  md::LabelRenderer::LabelMeshRenderStateSet::LabelMeshRenderStateSet(v148, 0xC120000000010400, -1054867456);
  v149 = *v2071;
  *v2071 = v148;
  if (v149)
  {
    v150 = v149[3];
    v149[3] = 0;
    if (v150)
      (*(void (**)(uint64_t))(*(_QWORD *)v150 + 8))(v150);
    v151 = v149[2];
    v149[2] = 0;
    if (v151)
      (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
    v152 = v149[1];
    v149[1] = 0;
    if (v152)
      (*(void (**)(uint64_t))(*(_QWORD *)v152 + 8))(v152);
    v153 = *v149;
    *v149 = 0;
    if (v153)
      (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
    MEMORY[0x1A1AF4E00](v149, 0x20C40DC1BFBCFLL);
  }
  v154 = operator new(0xE8uLL);
  v154[1] = 0;
  v154[2] = 0;
  *v154 = &off_1E42E2400;
  v155 = ggl::BufferData::BufferData((uint64_t)(v154 + 3), qword_1EE54F5E0, 2, 1, 6, 1);
  v154[28] = ggl::Glyph::Options::reflection(void)::reflection;
  v154[3] = &off_1E42B9890;
  *(_QWORD *)(a1 + 992) = v155;
  v156 = *(std::__shared_weak_count **)(a1 + 1000);
  *(_QWORD *)(a1 + 1000) = v154;
  if (v156)
  {
    v157 = (unint64_t *)&v156->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = *v2070;
  v160 = *(_QWORD *)(*v2070 + 8);
  v161 = *(_QWORD *)(*v2070 + 72);
  *(_DWORD *)v161 = 0;
  v162 = *(_QWORD *)(v159 + 64);
  if (v162 <= v160)
    v162 = v160;
  *(_QWORD *)(v159 + 56) = 0;
  *(_WORD *)(v161 + 16) = 14848;
  if (v162 > v160)
    v160 = v162;
  *(_QWORD *)(v159 + 64) = v160;
  v163 = operator new(0xE8uLL);
  v163[1] = 0;
  v163[2] = 0;
  *v163 = &off_1E42E2400;
  v164 = ggl::BufferData::BufferData((uint64_t)(v163 + 3), qword_1EE54F5E0, 2, 1, 6, 1);
  v163[28] = ggl::Glyph::Options::reflection(void)::reflection;
  v163[3] = &off_1E42B9890;
  *(_QWORD *)(a1 + 1008) = v164;
  v165 = *(std::__shared_weak_count **)(a1 + 1016);
  *(_QWORD *)(a1 + 1016) = v163;
  if (v165)
  {
    v166 = (unint64_t *)&v165->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = *(_QWORD *)(a1 + 1008);
  v169 = *(_QWORD *)(v168 + 8);
  **(_DWORD **)(v168 + 72) = 1;
  if (*(_QWORD *)(v168 + 64) > v169)
    v169 = *(_QWORD *)(v168 + 64);
  *(_QWORD *)(v168 + 56) = 0;
  *(_QWORD *)(v168 + 64) = v169;
  md::LabelRenderer::onMaxHaloSizeDidChange((_QWORD *)a1);
  v170 = *(_QWORD *)(a3 + 80);
  v171 = *(_QWORD *)(v170 + 2192);
  v172 = *(_QWORD *)(v170 + 2200);
  *(_QWORD *)&v2090 = v171;
  *((_QWORD *)&v2090 + 1) = v172;
  if (v172)
  {
    v173 = (unint64_t *)(v172 + 8);
    do
      v174 = __ldxr(v173);
    while (__stxr(v174 + 1, v173));
  }
  v175 = (char *)operator new(0x198uLL);
  *((_QWORD *)v175 + 1) = 0;
  *((_QWORD *)v175 + 2) = 0;
  *(_QWORD *)v175 = &off_1E42E4F50;
  v176 = a4[1];
  *(_OWORD *)v2080 = *a4;
  *(_OWORD *)&v2080[16] = v176;
  if ((v177 & 1) == 0)
  {
    if ((_DWORD)v1952)
    {
      if ((v1953 & 1) == 0)
      {
        if ((_DWORD)v1952)
        {
          if ((v2020 & 1) == 0
          {
            if ((v2042 & 1) == 0
            {
              ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Glyph::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r;
            *(_QWORD *)algn_1ECE43D90 = 1;
          }
          ggl::SDFGlyph::DefaultPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE583AD8 = &ggl::SDFGlyph::pipelineDataDefaultPipelineDeviceStructs(void)::ref;
          qword_1EE583AE0 = 0;
          if ((v2021 & 1) == 0
          {
            ggl::SDFGlyph::pipelineDataDefaultPipelineConstantStructs(void)::ref = (uint64_t)ggl::Label::View::reflection(void)::reflection;
            unk_1EE583B70 = ggl::Label::Options::reflection(void)::reflection;
            qword_1EE583B78 = (uint64_t)ggl::Label::DeviceBufferTextureSizeB::reflection(void)::reflection;
            unk_1EE583B80 = ggl::Label::DeviceBufferTextureSize::reflection(void)::reflection;
            qword_1EE583B88 = (uint64_t)ggl::Glyph::Options::reflection(void)::reflection;
            unk_1EE583B90 = ggl::Label::ViewCommon::reflection(void)::reflection;
          }
          qword_1EE583AE8 = (uint64_t)&ggl::SDFGlyph::pipelineDataDefaultPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE583AF0 = xmmword_19FFB4850;
        }
      }
      ggl::SDFGlyph::DefaultPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::SDFGlyph::DefaultPipelineSetup::typedReflection(void)::ref;
      ggl::SDFGlyphShader::typedReflection(v1952);
      qword_1ECE32320 = (uint64_t)&ggl::SDFGlyphShader::typedReflection(void)::ref;
      if ((v1954 & 1) == 0
      {
        ggl::SDFGlyph::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE583E50 = 0;
        qword_1EE583E58 = (uint64_t)"";
        dword_1EE583E60 = 0;
        qword_1EE583E68 = (uint64_t)&ggl::SDFGlyph::pipelineStateDefaultPipelineAttributeBinding_0(void)::attr;
        unk_1EE583E70 = 8;
      }
      qword_1ECE32328 = (uint64_t)&ggl::SDFGlyph::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr;
      unk_1ECE32330 = 1;
      qword_1ECE32338 = 0;
      unk_1ECE32340 = 3;
      qword_1ECE32348 = (uint64_t)&ggl::SDFGlyph::pipelineStateDefaultPipelineDeviceStructBinding(void)::ref;
      unk_1ECE32350 = 0;
      if ((v1955 & 1) == 0
      {
        ggl::SDFGlyph::pipelineStateDefaultPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE583D30 = 0;
        qword_1EE583D38 = (uint64_t)"view";
        dword_1EE583D40 = 3;
        qword_1EE583D48 = (uint64_t)&ggl::SDFGlyph::pipelineStateDefaultPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1EE583D50 = xmmword_19FFB35A0;
        qword_1EE583D60 = 1;
        unk_1EE583D68 = "labelOptions";
        dword_1EE583D70 = 3;
        qword_1EE583D78 = (uint64_t)&ggl::SDFGlyph::pipelineStateDefaultPipelineConstantLabelOptionsBinding(void)::reflection;
        unk_1EE583D80 = vdupq_n_s64(2uLL);
        qword_1EE583D90 = 2;
        unk_1EE583D98 = "byteBufferTextureSize";
        dword_1EE583DA0 = 3;
        qword_1EE583DA8 = (uint64_t)&ggl::SDFGlyph::pipelineStateDefaultPipelineConstantByteBufferTextureSizeBinding(void)::reflection;
        *(int64x2_t *)algn_1EE583DB0 = vdupq_n_s64(3uLL);
        qword_1EE583DC0 = 3;
        unk_1EE583DC8 = "floatBufferTextureSize";
        dword_1EE583DD0 = 3;
        qword_1EE583DD8 = (uint64_t)&ggl::SDFGlyph::pipelineStateDefaultPipelineConstantFloatBufferTextureSizeBinding(void)::reflection;
        unk_1EE583DE0 = xmmword_19FFB3440;
        qword_1EE583DF0 = 4;
        unk_1EE583DF8 = "glyphOptions";
        dword_1EE583E00 = 3;
        qword_1EE583E08 = (uint64_t)&ggl::SDFGlyph::pipelineStateDefaultPipelineConstantGlyphOptionsBinding(void)::reflection;
        *(int64x2_t *)algn_1EE583E10 = vdupq_n_s64(5uLL);
        qword_1EE583E20 = 5;
        unk_1EE583E28 = "viewCommon";
        dword_1EE583E30 = 3;
        qword_1EE583E38 = (uint64_t)&ggl::SDFGlyph::pipelineStateDefaultPipelineConstantViewCommonBinding(void)::reflection;
        unk_1EE583E40 = 1;
      }
      qword_1ECE32358 = (uint64_t)&ggl::SDFGlyph::pipelineStateDefaultPipelineConstantStructBinding(void)::ref;
      unk_1ECE32360 = 6;
    }
  }
  v178 = v2090;
  if (*((_QWORD *)&v2090 + 1))
  {
    v179 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v180 = __ldxr(v179);
    while (__stxr(v180 + 1, v179));
    *((_DWORD *)v175 + 14) = 0;
    *((_QWORD *)v175 + 5) = 0;
    *((_QWORD *)v175 + 6) = 0;
    *((_QWORD *)v175 + 3) = &off_1E42B6760;
    *((_QWORD *)v175 + 4) = 0;
    *((_QWORD *)v175 + 8) = &ggl::SDFGlyph::DefaultPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v175 + 72) = v178;
    do
      v181 = __ldxr(v179);
    while (__stxr(v181 + 1, v179));
  }
  else
  {
    *((_DWORD *)v175 + 14) = 0;
    *((_QWORD *)v175 + 5) = 0;
    *((_QWORD *)v175 + 6) = 0;
    *((_QWORD *)v175 + 3) = &off_1E42B6760;
    *((_QWORD *)v175 + 4) = 0;
    *((_QWORD *)v175 + 8) = &ggl::SDFGlyph::DefaultPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v175 + 72) = v178;
  }
  v182 = (int8x16_t *)(v175 + 328);
  v175[136] = 0;
  *(_OWORD *)(v175 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v175 + 156) = 0;
  *(_QWORD *)(v175 + 172) = 0;
  *(_QWORD *)(v175 + 164) = 0;
  v175[184] = 0;
  *(_OWORD *)(v175 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v175 + 204) = 0;
  *(_QWORD *)(v175 + 220) = 0;
  *(_QWORD *)(v175 + 212) = 0;
  v175[232] = 0;
  *(_OWORD *)(v175 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v175 + 252) = 0;
  *(_QWORD *)(v175 + 268) = 0;
  *(_QWORD *)(v175 + 260) = 0;
  v183 = *(_OWORD *)&v2080[16];
  *(_OWORD *)(v175 + 280) = *(_OWORD *)v2080;
  *(_OWORD *)(v175 + 296) = v183;
  v175[312] = 0;
  *((_QWORD *)v175 + 48) = 0;
  *((_OWORD *)v175 + 22) = 0u;
  *((_OWORD *)v175 + 23) = 0u;
  *((_OWORD *)v175 + 20) = 0u;
  *((_OWORD *)v175 + 21) = 0u;
  *((_QWORD *)v175 + 49) = 0x100000001;
  v175[400] = 0;
  v175[88] = 1;
  *(_WORD *)(v175 + 89) = (_WORD)v2086;
  v175[91] = BYTE2(v2086);
  *(_OWORD *)(v175 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v175 + 27) = 7;
  *((_QWORD *)v175 + 14) = 0;
  *((_QWORD *)v175 + 15) = 0;
  *((_DWORD *)v175 + 32) = 0;
  v175[132] = 15;
  if (*((_QWORD *)&v178 + 1))
  {
    v184 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v178 + 1) + 16))(*((_QWORD *)&v178 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v178 + 1));
    }
  }
  v182->i32[0] = 0;
  *(_DWORD *)(v175 + 331) = 0;
  v186 = vceqzq_s8(*v182);
  v187 = vmovl_high_s8(v186);
  v188 = vmovl_s16(*(int16x4_t *)v187.i8);
  v189.i64[0] = v188.u32[0];
  v189.i64[1] = v188.u32[1];
  v190 = v189;
  v191 = vmovl_s8(*(int8x8_t *)v186.i8);
  v192 = vmovl_s16(*(int16x4_t *)v191.i8);
  v189.i64[0] = v192.u32[0];
  v189.i64[1] = v192.u32[1];
  v193 = v189;
  v194 = vmovl_high_s16(v187);
  v189.i64[0] = v194.u32[0];
  v189.i64[1] = v194.u32[1];
  v195 = v189;
  v196 = vmovl_high_s16(v191);
  v189.i64[0] = v196.u32[0];
  v189.i64[1] = v196.u32[1];
  v197 = v189;
  v189.i64[0] = v188.u32[2];
  v189.i64[1] = v188.u32[3];
  v198 = v189;
  v189.i64[0] = v192.u32[2];
  v189.i64[1] = v192.u32[3];
  v199 = v189;
  v189.i64[0] = v194.u32[2];
  v189.i64[1] = v194.u32[3];
  v200 = v189;
  v189.i64[0] = v196.u32[2];
  v189.i64[1] = v196.u32[3];
  v201 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v189);
  v202 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v200);
  v203 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v199);
  v204 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v195);
  v205 = vceqzq_s8(*(int8x16_t *)(v175 + 344));
  v206 = vmovl_high_s8(v205);
  v207 = vmovl_s16(*(int16x4_t *)v206.i8);
  v189.i64[0] = v207.u32[0];
  v189.i64[1] = v207.u32[1];
  v208 = v189;
  v209 = vmovl_s8(*(int8x8_t *)v205.i8);
  v210 = vmovl_s16(*(int16x4_t *)v209.i8);
  v189.i64[0] = v210.u32[0];
  v189.i64[1] = v210.u32[1];
  v211 = v189;
  v212 = vmovl_high_s16(v206);
  v189.i64[0] = v212.u32[0];
  v189.i64[1] = v212.u32[1];
  v213 = v189;
  v214 = vmovl_high_s16(v209);
  v189.i64[0] = v214.u32[0];
  v189.i64[1] = v214.u32[1];
  v215 = v189;
  v189.i64[0] = v207.u32[2];
  v189.i64[1] = v207.u32[3];
  v216 = v189;
  v189.i64[0] = v210.u32[2];
  v189.i64[1] = v210.u32[3];
  v217 = v189;
  v189.i64[0] = v212.u32[2];
  v189.i64[1] = v212.u32[3];
  v218 = v189;
  v189.i64[0] = v214.u32[2];
  v189.i64[1] = v214.u32[3];
  v219 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v218);
  v220 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v208), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v190));
  v221 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v211), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v193));
  v222 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v213), v204);
  v223 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v215), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v197));
  v224 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v216), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v198));
  v225 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v217), v203);
  v226 = vorrq_s8(v219, v202);
  v227 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v189), v201);
  v228 = vceqzq_s8(*(int8x16_t *)(v175 + 360));
  v229 = vmovl_high_s8(v228);
  v230 = vmovl_s16(*(int16x4_t *)v229.i8);
  v189.i64[0] = v230.i32[0];
  v189.i64[1] = v230.i32[1];
  v231 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v189);
  v232 = vceqzq_s8(*(int8x16_t *)(v175 + 376));
  v233 = vmovl_high_s8(v232);
  v234 = vmovl_s16(*(int16x4_t *)v233.i8);
  v189.i64[0] = v234.i32[0];
  v189.i64[1] = v234.i32[1];
  v235 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v189), v231), v220);
  v236 = vmovl_s8(*(int8x8_t *)v228.i8);
  v237 = vmovl_s16(*(int16x4_t *)v236.i8);
  v189.i64[0] = v237.i32[0];
  v189.i64[1] = v237.i32[1];
  v238 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v189);
  v239 = vmovl_s8(*(int8x8_t *)v232.i8);
  v240 = vmovl_s16(*(int16x4_t *)v239.i8);
  v189.i64[0] = v240.i32[0];
  v189.i64[1] = v240.i32[1];
  v241 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v189), v238), v221);
  v242 = vmovl_high_s16(v229);
  v189.i64[0] = v242.i32[0];
  v189.i64[1] = v242.i32[1];
  v243 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v189);
  v244 = vmovl_high_s16(v233);
  v189.i64[0] = v244.i32[0];
  v189.i64[1] = v244.i32[1];
  v245 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v189), v243), v222);
  v246 = vmovl_high_s16(v236);
  v189.i64[0] = v246.i32[0];
  v189.i64[1] = v246.i32[1];
  v247 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v189);
  v248 = vmovl_high_s16(v239);
  v189.i64[0] = v248.i32[0];
  v189.i64[1] = v248.i32[1];
  v249 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v189), v247), v223);
  v189.i64[0] = v230.i32[2];
  v189.i64[1] = v230.i32[3];
  v250 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v189);
  v189.i64[0] = v234.i32[2];
  v189.i64[1] = v234.i32[3];
  v251 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v189), v250), v224);
  v189.i64[0] = v237.i32[2];
  v189.i64[1] = v237.i32[3];
  v252 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v189);
  v189.i64[0] = v240.i32[2];
  v189.i64[1] = v240.i32[3];
  v253 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v189), v252), v225);
  v189.i64[0] = v242.i32[2];
  v189.i64[1] = v242.i32[3];
  v254 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v189);
  v189.i64[0] = v244.i32[2];
  v189.i64[1] = v244.i32[3];
  v255 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v189), v254), v226);
  v189.i64[0] = v246.i32[2];
  v189.i64[1] = v246.i32[3];
  v256 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v189);
  v189.i64[0] = v248.i32[2];
  v189.i64[1] = v248.i32[3];
  *((_QWORD *)v175 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v241, v235), vorrq_s8(v249, v245)), (int64x2_t)vorrq_s8(vorrq_s8(v253, v251), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v189), v256), v227), v255))));
  *((_QWORD *)v175 + 3) = &off_1E42BCD78;
  v175[312] = 1;
  *(_QWORD *)(a1 + 880) = v175 + 24;
  v257 = *(std::__shared_weak_count **)(a1 + 888);
  *(_QWORD *)(a1 + 888) = v175;
  if (v257)
  {
    v258 = (unint64_t *)&v257->__shared_owners_;
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
  v260 = (std::__shared_weak_count *)*((_QWORD *)&v2090 + 1);
  if (*((_QWORD *)&v2090 + 1))
  {
    v261 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v262 = __ldaxr(v261);
    while (__stlxr(v262 - 1, v261));
    if (!v262)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  v263 = *(_QWORD *)(a3 + 80);
  v264 = *(_QWORD *)(v263 + 2216);
  v265 = *(_QWORD *)(v263 + 2224);
  *(_QWORD *)&v2090 = v264;
  *((_QWORD *)&v2090 + 1) = v265;
  if (v265)
  {
    v266 = (unint64_t *)(v265 + 8);
    do
      v267 = __ldxr(v266);
    while (__stxr(v267 + 1, v266));
  }
  v268 = (char *)operator new(0x198uLL);
  *((_QWORD *)v268 + 1) = 0;
  *((_QWORD *)v268 + 2) = 0;
  *(_QWORD *)v268 = &off_1E42E4F18;
  v269 = a4[1];
  *(_OWORD *)v2080 = *a4;
  *(_OWORD *)&v2080[16] = v269;
  if ((v270 & 1) == 0)
  {
    if ((_DWORD)v1956)
    {
      if ((v1957 & 1) == 0)
      {
        if ((_DWORD)v1956)
        {
          if ((v2022 & 1) == 0
          {
            if ((v2043 & 1) == 0
            {
              ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Glyph::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r;
            *(_QWORD *)algn_1ECE43D90 = 1;
          }
          ggl::SDFGlyph::HaloPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE583AA8 = &ggl::SDFGlyph::pipelineDataHaloPipelineDeviceStructs(void)::ref;
          qword_1EE583AB0 = 0;
          if ((v2023 & 1) == 0
          {
            ggl::SDFGlyph::pipelineDataHaloPipelineConstantStructs(void)::ref = (uint64_t)ggl::Label::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE583B38 = ggl::Label::Options::reflection(void)::reflection;
            qword_1EE583B40 = (uint64_t)ggl::Label::DeviceBufferTextureSizeB::reflection(void)::reflection;
            unk_1EE583B48 = ggl::Label::DeviceBufferTextureSize::reflection(void)::reflection;
            qword_1EE583B50 = (uint64_t)ggl::Glyph::Options::reflection(void)::reflection;
            unk_1EE583B58 = ggl::Label::ViewCommon::reflection(void)::reflection;
          }
          qword_1EE583AB8 = (uint64_t)&ggl::SDFGlyph::pipelineDataHaloPipelineConstantStructs(void)::ref;
          unk_1EE583AC0 = xmmword_19FFB4850;
        }
      }
      ggl::SDFGlyph::HaloPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::SDFGlyph::HaloPipelineSetup::typedReflection(void)::ref;
      ggl::SDFGlyphHaloShader::typedReflection(v1956);
      qword_1ECE322D0 = (uint64_t)&ggl::SDFGlyphHaloShader::typedReflection(void)::ref;
      if ((v1958 & 1) == 0
      {
        ggl::SDFGlyph::pipelineStateHaloPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE583CF8 = 0;
        qword_1EE583D00 = (uint64_t)"";
        dword_1EE583D08 = 0;
        qword_1EE583D10 = (uint64_t)&ggl::SDFGlyph::pipelineStateHaloPipelineAttributeBinding_0(void)::attr;
        unk_1EE583D18 = 8;
      }
      qword_1ECE322D8 = (uint64_t)&ggl::SDFGlyph::pipelineStateHaloPipelineAttributeStructBinding(void)::attr;
      unk_1ECE322E0 = 1;
      qword_1ECE322E8 = 0;
      unk_1ECE322F0 = 3;
      qword_1ECE322F8 = (uint64_t)&ggl::SDFGlyph::pipelineStateHaloPipelineDeviceStructBinding(void)::ref;
      unk_1ECE32300 = 0;
      if ((v1959 & 1) == 0
      {
        ggl::SDFGlyph::pipelineStateHaloPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE583BD8 = 0;
        qword_1EE583BE0 = (uint64_t)"view";
        dword_1EE583BE8 = 3;
        qword_1EE583BF0 = (uint64_t)&ggl::SDFGlyph::pipelineStateHaloPipelineConstantViewBinding(void)::reflection;
        unk_1EE583BF8 = xmmword_19FFB35A0;
        qword_1EE583C08 = 1;
        unk_1EE583C10 = "labelOptions";
        dword_1EE583C18 = 3;
        qword_1EE583C20 = (uint64_t)&ggl::SDFGlyph::pipelineStateHaloPipelineConstantLabelOptionsBinding(void)::reflection;
        unk_1EE583C28 = vdupq_n_s64(2uLL);
        qword_1EE583C38 = 2;
        unk_1EE583C40 = "byteBufferTextureSize";
        dword_1EE583C48 = 3;
        qword_1EE583C50 = (uint64_t)&ggl::SDFGlyph::pipelineStateHaloPipelineConstantByteBufferTextureSizeBinding(void)::reflection;
        unk_1EE583C58 = vdupq_n_s64(3uLL);
        qword_1EE583C68 = 3;
        unk_1EE583C70 = "floatBufferTextureSize";
        dword_1EE583C78 = 3;
        qword_1EE583C80 = (uint64_t)&ggl::SDFGlyph::pipelineStateHaloPipelineConstantFloatBufferTextureSizeBinding(void)::reflection;
        unk_1EE583C88 = xmmword_19FFB3440;
        qword_1EE583C98 = 4;
        unk_1EE583CA0 = "glyphOptions";
        dword_1EE583CA8 = 3;
        qword_1EE583CB0 = (uint64_t)&ggl::SDFGlyph::pipelineStateHaloPipelineConstantGlyphOptionsBinding(void)::reflection;
        unk_1EE583CB8 = vdupq_n_s64(5uLL);
        qword_1EE583CC8 = 5;
        unk_1EE583CD0 = "viewCommon";
        dword_1EE583CD8 = 3;
        qword_1EE583CE0 = (uint64_t)&ggl::SDFGlyph::pipelineStateHaloPipelineConstantViewCommonBinding(void)::reflection;
        unk_1EE583CE8 = 1;
      }
      qword_1ECE32308 = (uint64_t)&ggl::SDFGlyph::pipelineStateHaloPipelineConstantStructBinding(void)::ref;
      unk_1ECE32310 = 6;
    }
  }
  v271 = v2090;
  if (*((_QWORD *)&v2090 + 1))
  {
    v272 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v273 = __ldxr(v272);
    while (__stxr(v273 + 1, v272));
    *((_DWORD *)v268 + 14) = 0;
    *((_QWORD *)v268 + 5) = 0;
    *((_QWORD *)v268 + 6) = 0;
    *((_QWORD *)v268 + 3) = &off_1E42B6760;
    *((_QWORD *)v268 + 4) = 0;
    *((_QWORD *)v268 + 8) = &ggl::SDFGlyph::HaloPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v268 + 72) = v271;
    do
      v274 = __ldxr(v272);
    while (__stxr(v274 + 1, v272));
  }
  else
  {
    *((_DWORD *)v268 + 14) = 0;
    *((_QWORD *)v268 + 5) = 0;
    *((_QWORD *)v268 + 6) = 0;
    *((_QWORD *)v268 + 3) = &off_1E42B6760;
    *((_QWORD *)v268 + 4) = 0;
    *((_QWORD *)v268 + 8) = &ggl::SDFGlyph::HaloPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v268 + 72) = v271;
  }
  v275 = (int8x16_t *)(v268 + 328);
  v268[136] = 0;
  *(_OWORD *)(v268 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v268 + 156) = 0;
  *(_QWORD *)(v268 + 172) = 0;
  *(_QWORD *)(v268 + 164) = 0;
  v268[184] = 0;
  *(_OWORD *)(v268 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v268 + 204) = 0;
  *(_QWORD *)(v268 + 220) = 0;
  *(_QWORD *)(v268 + 212) = 0;
  v268[232] = 0;
  *(_OWORD *)(v268 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v268 + 252) = 0;
  *(_QWORD *)(v268 + 268) = 0;
  *(_QWORD *)(v268 + 260) = 0;
  v276 = *(_OWORD *)&v2080[16];
  *(_OWORD *)(v268 + 280) = *(_OWORD *)v2080;
  *(_OWORD *)(v268 + 296) = v276;
  v268[312] = 0;
  *((_QWORD *)v268 + 48) = 0;
  *((_OWORD *)v268 + 22) = 0u;
  *((_OWORD *)v268 + 23) = 0u;
  *((_OWORD *)v268 + 20) = 0u;
  *((_OWORD *)v268 + 21) = 0u;
  *((_QWORD *)v268 + 49) = 0x100000001;
  v268[400] = 0;
  v268[88] = 1;
  *(_WORD *)(v268 + 89) = (_WORD)v2086;
  v268[91] = BYTE2(v2086);
  *(_OWORD *)(v268 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v268 + 27) = 7;
  *((_QWORD *)v268 + 14) = 0;
  *((_QWORD *)v268 + 15) = 0;
  *((_DWORD *)v268 + 32) = 0;
  v268[132] = 15;
  if (*((_QWORD *)&v271 + 1))
  {
    v277 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v271 + 1) + 16))(*((_QWORD *)&v271 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v271 + 1));
    }
  }
  v275->i32[0] = 0;
  *(_DWORD *)(v268 + 331) = 0;
  v279 = vceqzq_s8(*v275);
  v280 = vmovl_high_s8(v279);
  v281 = vmovl_s16(*(int16x4_t *)v280.i8);
  v282.i64[0] = v281.u32[0];
  v282.i64[1] = v281.u32[1];
  v283 = v282;
  v284 = vmovl_s8(*(int8x8_t *)v279.i8);
  v285 = vmovl_s16(*(int16x4_t *)v284.i8);
  v282.i64[0] = v285.u32[0];
  v282.i64[1] = v285.u32[1];
  v286 = v282;
  v287 = vmovl_high_s16(v280);
  v282.i64[0] = v287.u32[0];
  v282.i64[1] = v287.u32[1];
  v288 = v282;
  v289 = vmovl_high_s16(v284);
  v282.i64[0] = v289.u32[0];
  v282.i64[1] = v289.u32[1];
  v290 = v282;
  v282.i64[0] = v281.u32[2];
  v282.i64[1] = v281.u32[3];
  v291 = v282;
  v282.i64[0] = v285.u32[2];
  v282.i64[1] = v285.u32[3];
  v292 = v282;
  v282.i64[0] = v287.u32[2];
  v282.i64[1] = v287.u32[3];
  v293 = v282;
  v282.i64[0] = v289.u32[2];
  v282.i64[1] = v289.u32[3];
  v294 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v282);
  v295 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v293);
  v296 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v292);
  v297 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v288);
  v298 = vceqzq_s8(*(int8x16_t *)(v268 + 344));
  v299 = vmovl_high_s8(v298);
  v300 = vmovl_s16(*(int16x4_t *)v299.i8);
  v282.i64[0] = v300.u32[0];
  v282.i64[1] = v300.u32[1];
  v301 = v282;
  v302 = vmovl_s8(*(int8x8_t *)v298.i8);
  v303 = vmovl_s16(*(int16x4_t *)v302.i8);
  v282.i64[0] = v303.u32[0];
  v282.i64[1] = v303.u32[1];
  v304 = v282;
  v305 = vmovl_high_s16(v299);
  v282.i64[0] = v305.u32[0];
  v282.i64[1] = v305.u32[1];
  v306 = v282;
  v307 = vmovl_high_s16(v302);
  v282.i64[0] = v307.u32[0];
  v282.i64[1] = v307.u32[1];
  v308 = v282;
  v282.i64[0] = v300.u32[2];
  v282.i64[1] = v300.u32[3];
  v309 = v282;
  v282.i64[0] = v303.u32[2];
  v282.i64[1] = v303.u32[3];
  v310 = v282;
  v282.i64[0] = v305.u32[2];
  v282.i64[1] = v305.u32[3];
  v311 = v282;
  v282.i64[0] = v307.u32[2];
  v282.i64[1] = v307.u32[3];
  v312 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v311);
  v313 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v301), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v283));
  v314 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v304), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v286));
  v315 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v306), v297);
  v316 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v308), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v290));
  v317 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v309), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v291));
  v318 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v310), v296);
  v319 = vorrq_s8(v312, v295);
  v320 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v282), v294);
  v321 = vceqzq_s8(*(int8x16_t *)(v268 + 360));
  v322 = vmovl_s8(*(int8x8_t *)v321.i8);
  v323 = vmovl_high_s16(v322);
  v324 = vmovl_high_s8(v321);
  v325 = vmovl_high_s16(v324);
  v326 = vmovl_s16(*(int16x4_t *)v322.i8);
  v327 = vmovl_s16(*(int16x4_t *)v324.i8);
  v282.i64[0] = v326.i32[0];
  v282.i64[1] = v326.i32[1];
  v328 = v282;
  v282.i64[0] = v327.i32[0];
  v282.i64[1] = v327.i32[1];
  v329 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v282);
  v330 = vceqzq_s8(*(int8x16_t *)(v268 + 376));
  v331 = vmovl_high_s8(v330);
  v332 = vmovl_s16(*(int16x4_t *)v331.i8);
  v282.i64[0] = v332.i32[0];
  v282.i64[1] = v332.i32[1];
  v333 = vmovl_s8(*(int8x8_t *)v330.i8);
  v334 = vmovl_s16(*(int16x4_t *)v333.i8);
  v335 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v282), v329), v313);
  v282.i64[0] = v334.i32[0];
  v282.i64[1] = v334.i32[1];
  v336 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v282), vbicq_s8((int8x16_t)xmmword_19FFB3170, v328));
  v282.i64[0] = v325.i32[0];
  v282.i64[1] = v325.i32[1];
  v337 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v282);
  v338 = vmovl_high_s16(v331);
  v339 = vorrq_s8(v336, v314);
  v282.i64[0] = v338.i32[0];
  v282.i64[1] = v338.i32[1];
  v340 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v282), v337);
  v282.i64[0] = v323.i32[0];
  v282.i64[1] = v323.i32[1];
  v341 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v282);
  v342 = vmovl_high_s16(v333);
  v282.i64[0] = v342.i32[0];
  v282.i64[1] = v342.i32[1];
  v343 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v282), v341), v316);
  v282.i64[0] = v327.i32[2];
  v282.i64[1] = v327.i32[3];
  v344 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v282);
  v282.i64[0] = v332.i32[2];
  v282.i64[1] = v332.i32[3];
  v345 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v282), v344), v317);
  v282.i64[0] = v326.i32[2];
  v282.i64[1] = v326.i32[3];
  v346 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v282);
  v282.i64[0] = v334.i32[2];
  v282.i64[1] = v334.i32[3];
  v347 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v282), v346), v318);
  v282.i64[0] = v325.i32[2];
  v282.i64[1] = v325.i32[3];
  v348 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v282);
  v282.i64[0] = v338.i32[2];
  v282.i64[1] = v338.i32[3];
  v349 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v282), v348), v319);
  v282.i64[0] = v323.i32[2];
  v282.i64[1] = v323.i32[3];
  v350 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v282);
  v282.i64[0] = v342.i32[2];
  v282.i64[1] = v342.i32[3];
  *((_QWORD *)v268 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v339, v335), vorrq_s8(v343, vorrq_s8(v340, v315))), (int64x2_t)vorrq_s8(vorrq_s8(v347, v345), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v282), v350), v320), v349))));
  *((_QWORD *)v268 + 3) = &off_1E42BCD28;
  v268[312] = 1;
  *(_QWORD *)(a1 + 896) = v268 + 24;
  v351 = *(std::__shared_weak_count **)(a1 + 904);
  *(_QWORD *)(a1 + 904) = v268;
  if (v351)
  {
    v352 = (unint64_t *)&v351->__shared_owners_;
    do
      v353 = __ldaxr(v352);
    while (__stlxr(v353 - 1, v352));
    if (!v353)
    {
      ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
      std::__shared_weak_count::__release_weak(v351);
    }
  }
  v354 = (std::__shared_weak_count *)*((_QWORD *)&v2090 + 1);
  if (*((_QWORD *)&v2090 + 1))
  {
    v355 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v356 = __ldaxr(v355);
    while (__stlxr(v356 - 1, v355));
    if (!v356)
    {
      ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
      std::__shared_weak_count::__release_weak(v354);
    }
  }
  v357 = *(_QWORD *)(a3 + 80);
  v358 = *(_QWORD *)(v357 + 2240);
  v359 = *(_QWORD *)(v357 + 2248);
  *(_QWORD *)&v2090 = v358;
  *((_QWORD *)&v2090 + 1) = v359;
  if (v359)
  {
    v360 = (unint64_t *)(v359 + 8);
    do
      v361 = __ldxr(v360);
    while (__stxr(v361 + 1, v360));
  }
  v362 = (char *)operator new(0x198uLL);
  *((_QWORD *)v362 + 1) = 0;
  *((_QWORD *)v362 + 2) = 0;
  *(_QWORD *)v362 = &off_1E42E4F88;
  v363 = a4[1];
  *(_OWORD *)v2080 = *a4;
  *(_OWORD *)&v2080[16] = v363;
  if ((v364 & 1) == 0)
  {
    if ((_DWORD)v1960)
    {
      if ((v1961 & 1) == 0)
      {
        if ((_DWORD)v1960)
        {
          if ((v2024 & 1) == 0
          {
            if ((v2044 & 1) == 0
            {
              ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Glyph::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r;
            *(_QWORD *)algn_1ECE43D90 = 1;
          }
          ggl::SDFGlyph::SuperSamplePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE583B08 = &ggl::SDFGlyph::pipelineDataSuperSamplePipelineDeviceStructs(void)::ref;
          qword_1EE583B10 = 0;
          if ((v2025 & 1) == 0
          {
            ggl::SDFGlyph::pipelineDataSuperSamplePipelineConstantStructs(void)::ref = (uint64_t)ggl::Label::View::reflection(void)::reflection;
            unk_1EE583BA0 = ggl::Label::Options::reflection(void)::reflection;
            qword_1EE583BA8 = (uint64_t)ggl::Label::DeviceBufferTextureSizeB::reflection(void)::reflection;
            unk_1EE583BB0 = ggl::Label::DeviceBufferTextureSize::reflection(void)::reflection;
            qword_1EE583BB8 = (uint64_t)ggl::Glyph::Options::reflection(void)::reflection;
            unk_1EE583BC0 = ggl::Label::ViewCommon::reflection(void)::reflection;
          }
          qword_1EE583B18 = (uint64_t)&ggl::SDFGlyph::pipelineDataSuperSamplePipelineConstantStructs(void)::ref;
          unk_1EE583B20 = xmmword_19FFB4850;
        }
      }
      ggl::SDFGlyph::SuperSamplePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::SDFGlyph::SuperSamplePipelineSetup::typedReflection(void)::ref;
      ggl::SDFGlyphSuperSampleShader::typedReflection(v1960);
      qword_1ECE32370 = (uint64_t)&ggl::SDFGlyphSuperSampleShader::typedReflection(void)::ref;
      if ((v1962 & 1) == 0
      {
        ggl::SDFGlyph::pipelineStateSuperSamplePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE583FA0 = 0;
        qword_1EE583FA8 = (uint64_t)"";
        dword_1EE583FB0 = 0;
        qword_1EE583FB8 = (uint64_t)&ggl::SDFGlyph::pipelineStateSuperSamplePipelineAttributeBinding_0(void)::attr;
        unk_1EE583FC0 = 8;
      }
      qword_1ECE32378 = (uint64_t)&ggl::SDFGlyph::pipelineStateSuperSamplePipelineAttributeStructBinding(void)::attr;
      unk_1ECE32380 = 1;
      qword_1ECE32388 = 0;
      unk_1ECE32390 = 3;
      qword_1ECE32398 = (uint64_t)&ggl::SDFGlyph::pipelineStateSuperSamplePipelineDeviceStructBinding(void)::ref;
      unk_1ECE323A0 = 0;
      if ((v1963 & 1) == 0
      {
        ggl::SDFGlyph::pipelineStateSuperSamplePipelineConstantStructBinding(void)::ref = 0;
        unk_1EE583E80 = 0;
        qword_1EE583E88 = (uint64_t)"view";
        dword_1EE583E90 = 3;
        qword_1EE583E98 = (uint64_t)&ggl::SDFGlyph::pipelineStateSuperSamplePipelineConstantViewBinding(void)::reflection;
        unk_1EE583EA0 = xmmword_19FFB35A0;
        qword_1EE583EB0 = 1;
        unk_1EE583EB8 = "labelOptions";
        dword_1EE583EC0 = 3;
        qword_1EE583EC8 = (uint64_t)&ggl::SDFGlyph::pipelineStateSuperSamplePipelineConstantLabelOptionsBinding(void)::reflection;
        *(int64x2_t *)algn_1EE583ED0 = vdupq_n_s64(2uLL);
        qword_1EE583EE0 = 2;
        unk_1EE583EE8 = "byteBufferTextureSize";
        dword_1EE583EF0 = 3;
        qword_1EE583EF8 = (uint64_t)&ggl::SDFGlyph::pipelineStateSuperSamplePipelineConstantByteBufferTextureSizeBinding(void)::reflection;
        unk_1EE583F00 = vdupq_n_s64(3uLL);
        qword_1EE583F10 = 3;
        unk_1EE583F18 = "floatBufferTextureSize";
        dword_1EE583F20 = 3;
        qword_1EE583F28 = (uint64_t)&ggl::SDFGlyph::pipelineStateSuperSamplePipelineConstantFloatBufferTextureSizeBinding(void)::reflection;
        *(_OWORD *)algn_1EE583F30 = xmmword_19FFB3440;
        qword_1EE583F40 = 4;
        unk_1EE583F48 = "glyphOptions";
        dword_1EE583F50 = 3;
        qword_1EE583F58 = (uint64_t)&ggl::SDFGlyph::pipelineStateSuperSamplePipelineConstantGlyphOptionsBinding(void)::reflection;
        unk_1EE583F60 = vdupq_n_s64(5uLL);
        qword_1EE583F70 = 5;
        unk_1EE583F78 = "viewCommon";
        dword_1EE583F80 = 3;
        qword_1EE583F88 = (uint64_t)&ggl::SDFGlyph::pipelineStateSuperSamplePipelineConstantViewCommonBinding(void)::reflection;
        unk_1EE583F90 = 1;
      }
      qword_1ECE323A8 = (uint64_t)&ggl::SDFGlyph::pipelineStateSuperSamplePipelineConstantStructBinding(void)::ref;
      unk_1ECE323B0 = 6;
    }
  }
  v365 = v2090;
  if (*((_QWORD *)&v2090 + 1))
  {
    v366 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v367 = __ldxr(v366);
    while (__stxr(v367 + 1, v366));
    *((_DWORD *)v362 + 14) = 0;
    *((_QWORD *)v362 + 5) = 0;
    *((_QWORD *)v362 + 6) = 0;
    *((_QWORD *)v362 + 3) = &off_1E42B6760;
    *((_QWORD *)v362 + 4) = 0;
    *((_QWORD *)v362 + 8) = &ggl::SDFGlyph::SuperSamplePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v362 + 72) = v365;
    do
      v368 = __ldxr(v366);
    while (__stxr(v368 + 1, v366));
  }
  else
  {
    *((_DWORD *)v362 + 14) = 0;
    *((_QWORD *)v362 + 5) = 0;
    *((_QWORD *)v362 + 6) = 0;
    *((_QWORD *)v362 + 3) = &off_1E42B6760;
    *((_QWORD *)v362 + 4) = 0;
    *((_QWORD *)v362 + 8) = &ggl::SDFGlyph::SuperSamplePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v362 + 72) = v365;
  }
  v369 = (int8x16_t *)(v362 + 328);
  v362[136] = 0;
  *(_OWORD *)(v362 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v362 + 156) = 0;
  *(_QWORD *)(v362 + 172) = 0;
  *(_QWORD *)(v362 + 164) = 0;
  v362[184] = 0;
  *(_OWORD *)(v362 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v362 + 204) = 0;
  *(_QWORD *)(v362 + 220) = 0;
  *(_QWORD *)(v362 + 212) = 0;
  v362[232] = 0;
  *(_OWORD *)(v362 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v362 + 252) = 0;
  *(_QWORD *)(v362 + 268) = 0;
  *(_QWORD *)(v362 + 260) = 0;
  v370 = *(_OWORD *)&v2080[16];
  *(_OWORD *)(v362 + 280) = *(_OWORD *)v2080;
  *(_OWORD *)(v362 + 296) = v370;
  v362[312] = 0;
  *((_QWORD *)v362 + 48) = 0;
  *((_OWORD *)v362 + 22) = 0u;
  *((_OWORD *)v362 + 23) = 0u;
  *((_OWORD *)v362 + 20) = 0u;
  *((_OWORD *)v362 + 21) = 0u;
  *((_QWORD *)v362 + 49) = 0x100000001;
  v362[400] = 0;
  v362[88] = 1;
  *(_WORD *)(v362 + 89) = (_WORD)v2086;
  v362[91] = BYTE2(v2086);
  *(_OWORD *)(v362 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v362 + 27) = 7;
  *((_QWORD *)v362 + 14) = 0;
  *((_QWORD *)v362 + 15) = 0;
  *((_DWORD *)v362 + 32) = 0;
  v362[132] = 15;
  if (*((_QWORD *)&v365 + 1))
  {
    v371 = (unint64_t *)(*((_QWORD *)&v365 + 1) + 8);
    do
      v372 = __ldaxr(v371);
    while (__stlxr(v372 - 1, v371));
    if (!v372)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v365 + 1) + 16))(*((_QWORD *)&v365 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v365 + 1));
    }
  }
  v369->i32[0] = 0;
  *(_DWORD *)(v362 + 331) = 0;
  v373 = vceqzq_s8(*v369);
  v374 = vmovl_high_s8(v373);
  v375 = vmovl_s16(*(int16x4_t *)v374.i8);
  v376.i64[0] = v375.u32[0];
  v376.i64[1] = v375.u32[1];
  v377 = v376;
  v378 = vmovl_s8(*(int8x8_t *)v373.i8);
  v379 = vmovl_s16(*(int16x4_t *)v378.i8);
  v376.i64[0] = v379.u32[0];
  v376.i64[1] = v379.u32[1];
  v380 = v376;
  v381 = vmovl_high_s16(v374);
  v376.i64[0] = v381.u32[0];
  v376.i64[1] = v381.u32[1];
  v382 = v376;
  v383 = vmovl_high_s16(v378);
  v376.i64[0] = v383.u32[0];
  v376.i64[1] = v383.u32[1];
  v384 = v376;
  v376.i64[0] = v375.u32[2];
  v376.i64[1] = v375.u32[3];
  v385 = v376;
  v376.i64[0] = v379.u32[2];
  v376.i64[1] = v379.u32[3];
  v386 = v376;
  v376.i64[0] = v381.u32[2];
  v376.i64[1] = v381.u32[3];
  v387 = v376;
  v376.i64[0] = v383.u32[2];
  v376.i64[1] = v383.u32[3];
  v388 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v376);
  v389 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v387);
  v390 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v386);
  v391 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v382);
  v392 = vceqzq_s8(*(int8x16_t *)(v362 + 344));
  v393 = vmovl_high_s8(v392);
  v394 = vmovl_s16(*(int16x4_t *)v393.i8);
  v376.i64[0] = v394.u32[0];
  v376.i64[1] = v394.u32[1];
  v395 = v376;
  v396 = vmovl_s8(*(int8x8_t *)v392.i8);
  v397 = vmovl_s16(*(int16x4_t *)v396.i8);
  v376.i64[0] = v397.u32[0];
  v376.i64[1] = v397.u32[1];
  v398 = v376;
  v399 = vmovl_high_s16(v393);
  v376.i64[0] = v399.u32[0];
  v376.i64[1] = v399.u32[1];
  v400 = v376;
  v401 = vmovl_high_s16(v396);
  v376.i64[0] = v401.u32[0];
  v376.i64[1] = v401.u32[1];
  v402 = v376;
  v376.i64[0] = v394.u32[2];
  v376.i64[1] = v394.u32[3];
  v403 = v376;
  v376.i64[0] = v397.u32[2];
  v376.i64[1] = v397.u32[3];
  v404 = v376;
  v376.i64[0] = v399.u32[2];
  v376.i64[1] = v399.u32[3];
  v405 = v376;
  v376.i64[0] = v401.u32[2];
  v376.i64[1] = v401.u32[3];
  v406 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v405);
  v407 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v395), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v377));
  v408 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v398), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v380));
  v409 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v400), v391);
  v410 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v402), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v384));
  v411 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v403), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v385));
  v412 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v404), v390);
  v413 = vorrq_s8(v406, v389);
  v414 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v376), v388);
  v415 = vceqzq_s8(*(int8x16_t *)(v362 + 360));
  v416 = vmovl_s8(*(int8x8_t *)v415.i8);
  v417 = vmovl_high_s16(v416);
  v418 = vmovl_high_s8(v415);
  v419 = vmovl_high_s16(v418);
  v420 = vmovl_s16(*(int16x4_t *)v416.i8);
  v421 = vmovl_s16(*(int16x4_t *)v418.i8);
  v376.i64[0] = v420.i32[0];
  v376.i64[1] = v420.i32[1];
  v422 = v376;
  v376.i64[0] = v421.i32[0];
  v376.i64[1] = v421.i32[1];
  v423 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v376);
  v424 = vceqzq_s8(*(int8x16_t *)(v362 + 376));
  v425 = vmovl_high_s8(v424);
  v426 = vmovl_s16(*(int16x4_t *)v425.i8);
  v376.i64[0] = v426.i32[0];
  v376.i64[1] = v426.i32[1];
  v427 = vmovl_s8(*(int8x8_t *)v424.i8);
  v428 = vmovl_s16(*(int16x4_t *)v427.i8);
  v429 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v376), v423), v407);
  v376.i64[0] = v428.i32[0];
  v376.i64[1] = v428.i32[1];
  v430 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v376), vbicq_s8((int8x16_t)xmmword_19FFB3170, v422));
  v376.i64[0] = v419.i32[0];
  v376.i64[1] = v419.i32[1];
  v431 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v376);
  v432 = vmovl_high_s16(v425);
  v433 = vorrq_s8(v430, v408);
  v376.i64[0] = v432.i32[0];
  v376.i64[1] = v432.i32[1];
  v434 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v376), v431);
  v376.i64[0] = v417.i32[0];
  v376.i64[1] = v417.i32[1];
  v435 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v376);
  v436 = vmovl_high_s16(v427);
  v376.i64[0] = v436.i32[0];
  v376.i64[1] = v436.i32[1];
  v437 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v376), v435), v410);
  v376.i64[0] = v421.i32[2];
  v376.i64[1] = v421.i32[3];
  v438 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v376);
  v376.i64[0] = v426.i32[2];
  v376.i64[1] = v426.i32[3];
  v439 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v376), v438), v411);
  v376.i64[0] = v420.i32[2];
  v376.i64[1] = v420.i32[3];
  v440 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v376);
  v376.i64[0] = v428.i32[2];
  v376.i64[1] = v428.i32[3];
  v441 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v376), v440), v412);
  v376.i64[0] = v419.i32[2];
  v376.i64[1] = v419.i32[3];
  v442 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v376);
  v376.i64[0] = v432.i32[2];
  v376.i64[1] = v432.i32[3];
  v443 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v376), v442), v413);
  v376.i64[0] = v417.i32[2];
  v376.i64[1] = v417.i32[3];
  v444 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v376);
  v376.i64[0] = v436.i32[2];
  v376.i64[1] = v436.i32[3];
  *((_QWORD *)v362 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v433, v429), vorrq_s8(v437, vorrq_s8(v434, v409))), (int64x2_t)vorrq_s8(vorrq_s8(v441, v439), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v376), v444), v414), v443))));
  *((_QWORD *)v362 + 3) = &off_1E42BCDC8;
  v362[312] = 1;
  *(_QWORD *)(a1 + 912) = v362 + 24;
  v445 = *(std::__shared_weak_count **)(a1 + 920);
  *(_QWORD *)(a1 + 920) = v362;
  if (v445)
  {
    v446 = (unint64_t *)&v445->__shared_owners_;
    do
      v447 = __ldaxr(v446);
    while (__stlxr(v447 - 1, v446));
    if (!v447)
    {
      ((void (*)(std::__shared_weak_count *))v445->__on_zero_shared)(v445);
      std::__shared_weak_count::__release_weak(v445);
    }
  }
  v448 = (std::__shared_weak_count *)*((_QWORD *)&v2090 + 1);
  if (*((_QWORD *)&v2090 + 1))
  {
    v449 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v450 = __ldaxr(v449);
    while (__stlxr(v450 - 1, v449));
    if (!v450)
    {
      ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
      std::__shared_weak_count::__release_weak(v448);
    }
  }
  v451 = *(_QWORD *)(a3 + 80);
  v452 = *(_QWORD *)(v451 + 944);
  v453 = *(_QWORD *)(v451 + 952);
  *(_QWORD *)&v2090 = v452;
  *((_QWORD *)&v2090 + 1) = v453;
  if (v453)
  {
    v454 = (unint64_t *)(v453 + 8);
    do
      v455 = __ldxr(v454);
    while (__stxr(v455 + 1, v454));
  }
  v456 = (char *)operator new(0x198uLL);
  *((_QWORD *)v456 + 1) = 0;
  *((_QWORD *)v456 + 2) = 0;
  *(_QWORD *)v456 = &off_1E42E4DC8;
  v457 = a4[1];
  *(_OWORD *)v2080 = *a4;
  *(_OWORD *)&v2080[16] = v457;
  if ((v458 & 1) == 0)
  {
    if ((_DWORD)v1964)
    {
      if ((v1965 & 1) == 0)
      {
        if ((_DWORD)v1964)
        {
          if ((v2026 & 1) == 0
          {
            if ((v2045 & 1) == 0
            {
              ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Glyph::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r;
            *(_QWORD *)algn_1ECE43D90 = 1;
          }
          ggl::Glyph3d::DefaultPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE5833A8 = &ggl::Glyph3d::pipelineDataDefaultPipelineDeviceStructs(void)::ref;
          qword_1EE5833B0 = 0;
          if ((v2027 & 1) == 0
          {
            ggl::Glyph3d::pipelineDataDefaultPipelineConstantStructs(void)::ref = (uint64_t)ggl::Label::View::reflection(void)::reflection;
            unk_1EE583470 = ggl::Label::Options::reflection(void)::reflection;
            qword_1EE583478 = (uint64_t)ggl::Label::DeviceBufferTextureSizeB::reflection(void)::reflection;
            unk_1EE583480 = ggl::Label::DeviceBufferTextureSize::reflection(void)::reflection;
            qword_1EE583488 = (uint64_t)ggl::Glyph::Options::reflection(void)::reflection;
            unk_1EE583490 = ggl::Label::ViewCommon::reflection(void)::reflection;
          }
          qword_1EE5833B8 = (uint64_t)&ggl::Glyph3d::pipelineDataDefaultPipelineConstantStructs(void)::ref;
          unk_1EE5833C0 = xmmword_19FFB4850;
        }
      }
      ggl::Glyph3d::DefaultPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Glyph3d::DefaultPipelineSetup::typedReflection(void)::ref;
      ggl::Glyph3dShader::typedReflection(v1964);
      qword_1ECE321E0 = (uint64_t)&ggl::Glyph3dShader::typedReflection(void)::ref;
      if ((v1966 & 1) == 0
      {
        ggl::Glyph3d::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE583630 = 0;
        qword_1EE583638 = (uint64_t)"";
        dword_1EE583640 = 0;
        qword_1EE583648 = (uint64_t)&ggl::Glyph3d::pipelineStateDefaultPipelineAttributeBinding_0(void)::attr;
        unk_1EE583650 = 8;
      }
      qword_1ECE321E8 = (uint64_t)&ggl::Glyph3d::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr;
      unk_1ECE321F0 = 1;
      qword_1ECE321F8 = 0;
      unk_1ECE32200 = 3;
      qword_1ECE32208 = (uint64_t)&ggl::Glyph3d::pipelineStateDefaultPipelineDeviceStructBinding(void)::ref;
      unk_1ECE32210 = 0;
      if ((v1967 & 1) == 0
      {
        ggl::Glyph3d::pipelineStateDefaultPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE583510 = 0;
        qword_1EE583518 = (uint64_t)"view";
        dword_1EE583520 = 3;
        qword_1EE583528 = (uint64_t)&ggl::Glyph3d::pipelineStateDefaultPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1EE583530 = xmmword_19FFB35A0;
        qword_1EE583540 = 1;
        unk_1EE583548 = "labelOptions";
        dword_1EE583550 = 3;
        qword_1EE583558 = (uint64_t)&ggl::Glyph3d::pipelineStateDefaultPipelineConstantLabelOptionsBinding(void)::reflection;
        unk_1EE583560 = vdupq_n_s64(2uLL);
        qword_1EE583570 = 2;
        unk_1EE583578 = "byteBufferTextureSize";
        dword_1EE583580 = 3;
        qword_1EE583588 = (uint64_t)&ggl::Glyph3d::pipelineStateDefaultPipelineConstantByteBufferTextureSizeBinding(void)::reflection;
        *(int64x2_t *)algn_1EE583590 = vdupq_n_s64(3uLL);
        qword_1EE5835A0 = 3;
        unk_1EE5835A8 = "floatBufferTextureSize";
        dword_1EE5835B0 = 3;
        qword_1EE5835B8 = (uint64_t)&ggl::Glyph3d::pipelineStateDefaultPipelineConstantFloatBufferTextureSizeBinding(void)::reflection;
        unk_1EE5835C0 = xmmword_19FFB3440;
        qword_1EE5835D0 = 4;
        unk_1EE5835D8 = "glyphOptions";
        dword_1EE5835E0 = 3;
        qword_1EE5835E8 = (uint64_t)&ggl::Glyph3d::pipelineStateDefaultPipelineConstantGlyphOptionsBinding(void)::reflection;
        *(int64x2_t *)algn_1EE5835F0 = vdupq_n_s64(5uLL);
        qword_1EE583600 = 5;
        unk_1EE583608 = "viewCommon";
        dword_1EE583610 = 3;
        qword_1EE583618 = (uint64_t)&ggl::Glyph3d::pipelineStateDefaultPipelineConstantViewCommonBinding(void)::reflection;
        unk_1EE583620 = 1;
      }
      qword_1ECE32218 = (uint64_t)&ggl::Glyph3d::pipelineStateDefaultPipelineConstantStructBinding(void)::ref;
      unk_1ECE32220 = 6;
    }
  }
  v459 = v2090;
  if (*((_QWORD *)&v2090 + 1))
  {
    v460 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v461 = __ldxr(v460);
    while (__stxr(v461 + 1, v460));
    *((_DWORD *)v456 + 14) = 0;
    *((_QWORD *)v456 + 5) = 0;
    *((_QWORD *)v456 + 6) = 0;
    *((_QWORD *)v456 + 3) = &off_1E42B6760;
    *((_QWORD *)v456 + 4) = 0;
    *((_QWORD *)v456 + 8) = &ggl::Glyph3d::DefaultPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v456 + 72) = v459;
    do
      v462 = __ldxr(v460);
    while (__stxr(v462 + 1, v460));
  }
  else
  {
    *((_DWORD *)v456 + 14) = 0;
    *((_QWORD *)v456 + 5) = 0;
    *((_QWORD *)v456 + 6) = 0;
    *((_QWORD *)v456 + 3) = &off_1E42B6760;
    *((_QWORD *)v456 + 4) = 0;
    *((_QWORD *)v456 + 8) = &ggl::Glyph3d::DefaultPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v456 + 72) = v459;
  }
  v463 = (int8x16_t *)(v456 + 328);
  v456[136] = 0;
  *(_OWORD *)(v456 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v456 + 156) = 0;
  *(_QWORD *)(v456 + 172) = 0;
  *(_QWORD *)(v456 + 164) = 0;
  v456[184] = 0;
  *(_OWORD *)(v456 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v456 + 204) = 0;
  *(_QWORD *)(v456 + 220) = 0;
  *(_QWORD *)(v456 + 212) = 0;
  v456[232] = 0;
  *(_OWORD *)(v456 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v456 + 252) = 0;
  *(_QWORD *)(v456 + 268) = 0;
  *(_QWORD *)(v456 + 260) = 0;
  v464 = *(_OWORD *)&v2080[16];
  *(_OWORD *)(v456 + 280) = *(_OWORD *)v2080;
  *(_OWORD *)(v456 + 296) = v464;
  v456[312] = 0;
  *((_QWORD *)v456 + 48) = 0;
  *((_OWORD *)v456 + 22) = 0u;
  *((_OWORD *)v456 + 23) = 0u;
  *((_OWORD *)v456 + 20) = 0u;
  *((_OWORD *)v456 + 21) = 0u;
  *((_QWORD *)v456 + 49) = 0x100000001;
  v456[400] = 0;
  v456[88] = 1;
  *(_WORD *)(v456 + 89) = (_WORD)v2086;
  v456[91] = BYTE2(v2086);
  *(_OWORD *)(v456 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v456 + 27) = 7;
  *((_QWORD *)v456 + 14) = 0;
  *((_QWORD *)v456 + 15) = 0;
  *((_DWORD *)v456 + 32) = 0;
  v456[132] = 15;
  if (*((_QWORD *)&v459 + 1))
  {
    v465 = (unint64_t *)(*((_QWORD *)&v459 + 1) + 8);
    do
      v466 = __ldaxr(v465);
    while (__stlxr(v466 - 1, v465));
    if (!v466)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v459 + 1) + 16))(*((_QWORD *)&v459 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v459 + 1));
    }
  }
  v463->i32[0] = 0;
  *(_DWORD *)(v456 + 331) = 0;
  v467 = vceqzq_s8(*v463);
  v468 = vmovl_high_s8(v467);
  v469 = vmovl_s16(*(int16x4_t *)v468.i8);
  v470.i64[0] = v469.u32[0];
  v470.i64[1] = v469.u32[1];
  v471 = v470;
  v472 = vmovl_s8(*(int8x8_t *)v467.i8);
  v473 = vmovl_s16(*(int16x4_t *)v472.i8);
  v470.i64[0] = v473.u32[0];
  v470.i64[1] = v473.u32[1];
  v474 = v470;
  v475 = vmovl_high_s16(v468);
  v470.i64[0] = v475.u32[0];
  v470.i64[1] = v475.u32[1];
  v476 = v470;
  v477 = vmovl_high_s16(v472);
  v470.i64[0] = v477.u32[0];
  v470.i64[1] = v477.u32[1];
  v478 = v470;
  v470.i64[0] = v469.u32[2];
  v470.i64[1] = v469.u32[3];
  v479 = v470;
  v470.i64[0] = v473.u32[2];
  v470.i64[1] = v473.u32[3];
  v480 = v470;
  v470.i64[0] = v475.u32[2];
  v470.i64[1] = v475.u32[3];
  v481 = v470;
  v470.i64[0] = v477.u32[2];
  v470.i64[1] = v477.u32[3];
  v482 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v470);
  v483 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v481);
  v484 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v480);
  v485 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v476);
  v486 = vceqzq_s8(*(int8x16_t *)(v456 + 344));
  v487 = vmovl_high_s8(v486);
  v488 = vmovl_s16(*(int16x4_t *)v487.i8);
  v470.i64[0] = v488.u32[0];
  v470.i64[1] = v488.u32[1];
  v489 = v470;
  v490 = vmovl_s8(*(int8x8_t *)v486.i8);
  v491 = vmovl_s16(*(int16x4_t *)v490.i8);
  v470.i64[0] = v491.u32[0];
  v470.i64[1] = v491.u32[1];
  v492 = v470;
  v493 = vmovl_high_s16(v487);
  v470.i64[0] = v493.u32[0];
  v470.i64[1] = v493.u32[1];
  v494 = v470;
  v495 = vmovl_high_s16(v490);
  v470.i64[0] = v495.u32[0];
  v470.i64[1] = v495.u32[1];
  v496 = v470;
  v470.i64[0] = v488.u32[2];
  v470.i64[1] = v488.u32[3];
  v497 = v470;
  v470.i64[0] = v491.u32[2];
  v470.i64[1] = v491.u32[3];
  v498 = v470;
  v470.i64[0] = v493.u32[2];
  v470.i64[1] = v493.u32[3];
  v499 = v470;
  v470.i64[0] = v495.u32[2];
  v470.i64[1] = v495.u32[3];
  v500 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v499);
  v501 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v489), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v471));
  v502 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v492), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v474));
  v503 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v494), v485);
  v504 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v496), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v478));
  v505 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v497), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v479));
  v506 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v498), v484);
  v507 = vorrq_s8(v500, v483);
  v508 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v470), v482);
  v509 = vceqzq_s8(*(int8x16_t *)(v456 + 360));
  v510 = vmovl_s8(*(int8x8_t *)v509.i8);
  v511 = vmovl_high_s16(v510);
  v512 = vmovl_high_s8(v509);
  v513 = vmovl_high_s16(v512);
  v514 = vmovl_s16(*(int16x4_t *)v510.i8);
  v515 = vmovl_s16(*(int16x4_t *)v512.i8);
  v470.i64[0] = v514.i32[0];
  v470.i64[1] = v514.i32[1];
  v516 = v470;
  v470.i64[0] = v515.i32[0];
  v470.i64[1] = v515.i32[1];
  v517 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v470);
  v518 = vceqzq_s8(*(int8x16_t *)(v456 + 376));
  v519 = vmovl_high_s8(v518);
  v520 = vmovl_s16(*(int16x4_t *)v519.i8);
  v470.i64[0] = v520.i32[0];
  v470.i64[1] = v520.i32[1];
  v521 = vmovl_s8(*(int8x8_t *)v518.i8);
  v522 = vmovl_s16(*(int16x4_t *)v521.i8);
  v523 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v470), v517), v501);
  v470.i64[0] = v522.i32[0];
  v470.i64[1] = v522.i32[1];
  v524 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v470), vbicq_s8((int8x16_t)xmmword_19FFB3170, v516));
  v470.i64[0] = v513.i32[0];
  v470.i64[1] = v513.i32[1];
  v525 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v470);
  v526 = vmovl_high_s16(v519);
  v527 = vorrq_s8(v524, v502);
  v470.i64[0] = v526.i32[0];
  v470.i64[1] = v526.i32[1];
  v528 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v470), v525);
  v470.i64[0] = v511.i32[0];
  v470.i64[1] = v511.i32[1];
  v529 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v470);
  v530 = vmovl_high_s16(v521);
  v470.i64[0] = v530.i32[0];
  v470.i64[1] = v530.i32[1];
  v531 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v470), v529), v504);
  v470.i64[0] = v515.i32[2];
  v470.i64[1] = v515.i32[3];
  v532 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v470);
  v470.i64[0] = v520.i32[2];
  v470.i64[1] = v520.i32[3];
  v533 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v470), v532), v505);
  v470.i64[0] = v514.i32[2];
  v470.i64[1] = v514.i32[3];
  v534 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v470);
  v470.i64[0] = v522.i32[2];
  v470.i64[1] = v522.i32[3];
  v535 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v470), v534), v506);
  v470.i64[0] = v513.i32[2];
  v470.i64[1] = v513.i32[3];
  v536 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v470);
  v470.i64[0] = v526.i32[2];
  v470.i64[1] = v526.i32[3];
  v537 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v470), v536), v507);
  v470.i64[0] = v511.i32[2];
  v470.i64[1] = v511.i32[3];
  v538 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v470);
  v470.i64[0] = v530.i32[2];
  v470.i64[1] = v530.i32[3];
  *((_QWORD *)v456 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v527, v523), vorrq_s8(v531, vorrq_s8(v528, v503))), (int64x2_t)vorrq_s8(vorrq_s8(v535, v533), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v470), v538), v508), v537))));
  *((_QWORD *)v456 + 3) = &off_1E42BCAA0;
  v456[312] = 1;
  *(_QWORD *)(a1 + 928) = v456 + 24;
  v539 = *(std::__shared_weak_count **)(a1 + 936);
  *(_QWORD *)(a1 + 936) = v456;
  if (v539)
  {
    v540 = (unint64_t *)&v539->__shared_owners_;
    do
      v541 = __ldaxr(v540);
    while (__stlxr(v541 - 1, v540));
    if (!v541)
    {
      ((void (*)(std::__shared_weak_count *))v539->__on_zero_shared)(v539);
      std::__shared_weak_count::__release_weak(v539);
    }
  }
  v542 = (std::__shared_weak_count *)*((_QWORD *)&v2090 + 1);
  if (*((_QWORD *)&v2090 + 1))
  {
    v543 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v544 = __ldaxr(v543);
    while (__stlxr(v544 - 1, v543));
    if (!v544)
    {
      ((void (*)(std::__shared_weak_count *))v542->__on_zero_shared)(v542);
      std::__shared_weak_count::__release_weak(v542);
    }
  }
  v545 = *(_QWORD *)(a3 + 80);
  v546 = *(_QWORD *)(v545 + 968);
  v547 = *(_QWORD *)(v545 + 976);
  *(_QWORD *)&v2090 = v546;
  *((_QWORD *)&v2090 + 1) = v547;
  if (v547)
  {
    v548 = (unint64_t *)(v547 + 8);
    do
      v549 = __ldxr(v548);
    while (__stxr(v549 + 1, v548));
  }
  v550 = (char *)operator new(0x198uLL);
  *((_QWORD *)v550 + 1) = 0;
  *((_QWORD *)v550 + 2) = 0;
  *(_QWORD *)v550 = &off_1E42E4E38;
  v551 = a4[1];
  *(_OWORD *)v2080 = *a4;
  *(_OWORD *)&v2080[16] = v551;
  if ((v552 & 1) == 0)
  {
    if ((_DWORD)v1968)
    {
      if ((v1969 & 1) == 0)
      {
        if ((_DWORD)v1968)
        {
          if ((v2028 & 1) == 0
          {
            if ((v2046 & 1) == 0
            {
              ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Glyph::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r;
            *(_QWORD *)algn_1ECE43D90 = 1;
          }
          ggl::Glyph3d::LowPrecisionPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE583408 = &ggl::Glyph3d::pipelineDataLowPrecisionPipelineDeviceStructs(void)::ref;
          qword_1EE583410 = 0;
          if ((v2029 & 1) == 0
          {
            ggl::Glyph3d::pipelineDataLowPrecisionPipelineConstantStructs(void)::ref = (uint64_t)ggl::Label::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE5834D8 = ggl::Label::Options::reflection(void)::reflection;
            qword_1EE5834E0 = (uint64_t)ggl::Label::DeviceBufferTextureSizeB::reflection(void)::reflection;
            unk_1EE5834E8 = ggl::Label::DeviceBufferTextureSize::reflection(void)::reflection;
            qword_1EE5834F0 = (uint64_t)ggl::Glyph::Options::reflection(void)::reflection;
            unk_1EE5834F8 = ggl::Label::ViewCommon::reflection(void)::reflection;
          }
          qword_1EE583418 = (uint64_t)&ggl::Glyph3d::pipelineDataLowPrecisionPipelineConstantStructs(void)::ref;
          unk_1EE583420 = xmmword_19FFB4850;
        }
      }
      ggl::Glyph3d::LowPrecisionPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Glyph3d::LowPrecisionPipelineSetup::typedReflection(void)::ref;
      ggl::Glyph3dLowPrecisionShader::typedReflection(v1968);
      qword_1ECE32230 = (uint64_t)&ggl::Glyph3dLowPrecisionShader::typedReflection(void)::ref;
      if ((v1970 & 1) == 0
      {
        ggl::Glyph3d::pipelineStateLowPrecisionPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE583918 = 0;
        qword_1EE583920 = (uint64_t)"";
        dword_1EE583928 = 0;
        qword_1EE583930 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionPipelineAttributeBinding_0(void)::attr;
        unk_1EE583938 = 8;
      }
      qword_1ECE32238 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionPipelineAttributeStructBinding(void)::attr;
      unk_1ECE32240 = 1;
      qword_1ECE32248 = 0;
      unk_1ECE32250 = 3;
      qword_1ECE32258 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionPipelineDeviceStructBinding(void)::ref;
      unk_1ECE32260 = 0;
      if ((v1971 & 1) == 0
      {
        ggl::Glyph3d::pipelineStateLowPrecisionPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE5837F8 = 0;
        qword_1EE583800 = (uint64_t)"view";
        dword_1EE583808 = 3;
        qword_1EE583810 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionPipelineConstantViewBinding(void)::reflection;
        unk_1EE583818 = xmmword_19FFB35A0;
        qword_1EE583828 = 1;
        unk_1EE583830 = "labelOptions";
        dword_1EE583838 = 3;
        qword_1EE583840 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionPipelineConstantLabelOptionsBinding(void)::reflection;
        unk_1EE583848 = vdupq_n_s64(2uLL);
        qword_1EE583858 = 2;
        unk_1EE583860 = "byteBufferTextureSize";
        dword_1EE583868 = 3;
        qword_1EE583870 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionPipelineConstantByteBufferTextureSizeBinding(void)::reflection;
        unk_1EE583878 = vdupq_n_s64(3uLL);
        qword_1EE583888 = 3;
        unk_1EE583890 = "floatBufferTextureSize";
        dword_1EE583898 = 3;
        qword_1EE5838A0 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionPipelineConstantFloatBufferTextureSizeBinding(void)::reflection;
        unk_1EE5838A8 = xmmword_19FFB3440;
        qword_1EE5838B8 = 4;
        unk_1EE5838C0 = "glyphOptions";
        dword_1EE5838C8 = 3;
        qword_1EE5838D0 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionPipelineConstantGlyphOptionsBinding(void)::reflection;
        unk_1EE5838D8 = vdupq_n_s64(5uLL);
        qword_1EE5838E8 = 5;
        unk_1EE5838F0 = "viewCommon";
        dword_1EE5838F8 = 3;
        qword_1EE583900 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionPipelineConstantViewCommonBinding(void)::reflection;
        unk_1EE583908 = 1;
      }
      qword_1ECE32268 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionPipelineConstantStructBinding(void)::ref;
      unk_1ECE32270 = 6;
    }
  }
  v553 = v2090;
  if (*((_QWORD *)&v2090 + 1))
  {
    v554 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v555 = __ldxr(v554);
    while (__stxr(v555 + 1, v554));
    *((_DWORD *)v550 + 14) = 0;
    *((_QWORD *)v550 + 5) = 0;
    *((_QWORD *)v550 + 6) = 0;
    *((_QWORD *)v550 + 3) = &off_1E42B6760;
    *((_QWORD *)v550 + 4) = 0;
    *((_QWORD *)v550 + 8) = &ggl::Glyph3d::LowPrecisionPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v550 + 72) = v553;
    do
      v556 = __ldxr(v554);
    while (__stxr(v556 + 1, v554));
  }
  else
  {
    *((_DWORD *)v550 + 14) = 0;
    *((_QWORD *)v550 + 5) = 0;
    *((_QWORD *)v550 + 6) = 0;
    *((_QWORD *)v550 + 3) = &off_1E42B6760;
    *((_QWORD *)v550 + 4) = 0;
    *((_QWORD *)v550 + 8) = &ggl::Glyph3d::LowPrecisionPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v550 + 72) = v553;
  }
  v557 = (int8x16_t *)(v550 + 328);
  v550[136] = 0;
  *(_OWORD *)(v550 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v550 + 156) = 0;
  *(_QWORD *)(v550 + 172) = 0;
  *(_QWORD *)(v550 + 164) = 0;
  v550[184] = 0;
  *(_OWORD *)(v550 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v550 + 204) = 0;
  *(_QWORD *)(v550 + 220) = 0;
  *(_QWORD *)(v550 + 212) = 0;
  v550[232] = 0;
  *(_OWORD *)(v550 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v550 + 252) = 0;
  *(_QWORD *)(v550 + 268) = 0;
  *(_QWORD *)(v550 + 260) = 0;
  v558 = *(_OWORD *)&v2080[16];
  *(_OWORD *)(v550 + 280) = *(_OWORD *)v2080;
  *(_OWORD *)(v550 + 296) = v558;
  v550[312] = 0;
  *((_QWORD *)v550 + 48) = 0;
  *((_OWORD *)v550 + 22) = 0u;
  *((_OWORD *)v550 + 23) = 0u;
  *((_OWORD *)v550 + 20) = 0u;
  *((_OWORD *)v550 + 21) = 0u;
  *((_QWORD *)v550 + 49) = 0x100000001;
  v550[400] = 0;
  v550[88] = 1;
  *(_WORD *)(v550 + 89) = (_WORD)v2086;
  v550[91] = BYTE2(v2086);
  *(_OWORD *)(v550 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v550 + 27) = 7;
  *((_QWORD *)v550 + 14) = 0;
  *((_QWORD *)v550 + 15) = 0;
  *((_DWORD *)v550 + 32) = 0;
  v550[132] = 15;
  if (*((_QWORD *)&v553 + 1))
  {
    v559 = (unint64_t *)(*((_QWORD *)&v553 + 1) + 8);
    do
      v560 = __ldaxr(v559);
    while (__stlxr(v560 - 1, v559));
    if (!v560)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v553 + 1) + 16))(*((_QWORD *)&v553 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v553 + 1));
    }
  }
  v557->i32[0] = 0;
  *(_DWORD *)(v550 + 331) = 0;
  v561 = vceqzq_s8(*v557);
  v562 = vmovl_high_s8(v561);
  v563 = vmovl_s16(*(int16x4_t *)v562.i8);
  v564.i64[0] = v563.u32[0];
  v564.i64[1] = v563.u32[1];
  v565 = v564;
  v566 = vmovl_s8(*(int8x8_t *)v561.i8);
  v567 = vmovl_s16(*(int16x4_t *)v566.i8);
  v564.i64[0] = v567.u32[0];
  v564.i64[1] = v567.u32[1];
  v568 = v564;
  v569 = vmovl_high_s16(v562);
  v564.i64[0] = v569.u32[0];
  v564.i64[1] = v569.u32[1];
  v570 = v564;
  v571 = vmovl_high_s16(v566);
  v564.i64[0] = v571.u32[0];
  v564.i64[1] = v571.u32[1];
  v572 = v564;
  v564.i64[0] = v563.u32[2];
  v564.i64[1] = v563.u32[3];
  v573 = v564;
  v564.i64[0] = v567.u32[2];
  v564.i64[1] = v567.u32[3];
  v574 = v564;
  v564.i64[0] = v569.u32[2];
  v564.i64[1] = v569.u32[3];
  v575 = v564;
  v564.i64[0] = v571.u32[2];
  v564.i64[1] = v571.u32[3];
  v576 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v564);
  v577 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v575);
  v578 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v574);
  v579 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v570);
  v580 = vceqzq_s8(*(int8x16_t *)(v550 + 344));
  v581 = vmovl_high_s8(v580);
  v582 = vmovl_s16(*(int16x4_t *)v581.i8);
  v564.i64[0] = v582.u32[0];
  v564.i64[1] = v582.u32[1];
  v583 = v564;
  v584 = vmovl_s8(*(int8x8_t *)v580.i8);
  v585 = vmovl_s16(*(int16x4_t *)v584.i8);
  v564.i64[0] = v585.u32[0];
  v564.i64[1] = v585.u32[1];
  v586 = v564;
  v587 = vmovl_high_s16(v581);
  v564.i64[0] = v587.u32[0];
  v564.i64[1] = v587.u32[1];
  v588 = v564;
  v589 = vmovl_high_s16(v584);
  v564.i64[0] = v589.u32[0];
  v564.i64[1] = v589.u32[1];
  v590 = v564;
  v564.i64[0] = v582.u32[2];
  v564.i64[1] = v582.u32[3];
  v591 = v564;
  v564.i64[0] = v585.u32[2];
  v564.i64[1] = v585.u32[3];
  v592 = v564;
  v564.i64[0] = v587.u32[2];
  v564.i64[1] = v587.u32[3];
  v593 = v564;
  v564.i64[0] = v589.u32[2];
  v564.i64[1] = v589.u32[3];
  v594 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v593);
  v595 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v583), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v565));
  v596 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v586), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v568));
  v597 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v588), v579);
  v598 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v590), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v572));
  v599 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v591), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v573));
  v600 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v592), v578);
  v601 = vorrq_s8(v594, v577);
  v602 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v564), v576);
  v603 = vceqzq_s8(*(int8x16_t *)(v550 + 360));
  v604 = vmovl_s8(*(int8x8_t *)v603.i8);
  v605 = vmovl_high_s16(v604);
  v606 = vmovl_high_s8(v603);
  v607 = vmovl_high_s16(v606);
  v608 = vmovl_s16(*(int16x4_t *)v604.i8);
  v609 = vmovl_s16(*(int16x4_t *)v606.i8);
  v564.i64[0] = v608.i32[0];
  v564.i64[1] = v608.i32[1];
  v610 = v564;
  v564.i64[0] = v609.i32[0];
  v564.i64[1] = v609.i32[1];
  v611 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v564);
  v612 = vceqzq_s8(*(int8x16_t *)(v550 + 376));
  v613 = vmovl_high_s8(v612);
  v614 = vmovl_s16(*(int16x4_t *)v613.i8);
  v564.i64[0] = v614.i32[0];
  v564.i64[1] = v614.i32[1];
  v615 = vmovl_s8(*(int8x8_t *)v612.i8);
  v616 = vmovl_s16(*(int16x4_t *)v615.i8);
  v617 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v564), v611), v595);
  v564.i64[0] = v616.i32[0];
  v564.i64[1] = v616.i32[1];
  v618 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v564), vbicq_s8((int8x16_t)xmmword_19FFB3170, v610));
  v564.i64[0] = v607.i32[0];
  v564.i64[1] = v607.i32[1];
  v619 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v564);
  v620 = vmovl_high_s16(v613);
  v621 = vorrq_s8(v618, v596);
  v564.i64[0] = v620.i32[0];
  v564.i64[1] = v620.i32[1];
  v622 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v564), v619);
  v564.i64[0] = v605.i32[0];
  v564.i64[1] = v605.i32[1];
  v623 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v564);
  v624 = vmovl_high_s16(v615);
  v564.i64[0] = v624.i32[0];
  v564.i64[1] = v624.i32[1];
  v625 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v564), v623), v598);
  v564.i64[0] = v609.i32[2];
  v564.i64[1] = v609.i32[3];
  v626 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v564);
  v564.i64[0] = v614.i32[2];
  v564.i64[1] = v614.i32[3];
  v627 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v564), v626), v599);
  v564.i64[0] = v608.i32[2];
  v564.i64[1] = v608.i32[3];
  v628 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v564);
  v564.i64[0] = v616.i32[2];
  v564.i64[1] = v616.i32[3];
  v629 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v564), v628), v600);
  v564.i64[0] = v607.i32[2];
  v564.i64[1] = v607.i32[3];
  v630 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v564);
  v564.i64[0] = v620.i32[2];
  v564.i64[1] = v620.i32[3];
  v631 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v564), v630), v601);
  v564.i64[0] = v605.i32[2];
  v564.i64[1] = v605.i32[3];
  v632 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v564);
  v564.i64[0] = v624.i32[2];
  v564.i64[1] = v624.i32[3];
  *((_QWORD *)v550 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v621, v617), vorrq_s8(v625, vorrq_s8(v622, v597))), (int64x2_t)vorrq_s8(vorrq_s8(v629, v627), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v564), v632), v602), v631))));
  *((_QWORD *)v550 + 3) = &off_1E42BCB40;
  v550[312] = 1;
  *(_QWORD *)(a1 + 944) = v550 + 24;
  v633 = *(std::__shared_weak_count **)(a1 + 952);
  *(_QWORD *)(a1 + 952) = v550;
  if (v633)
  {
    v634 = (unint64_t *)&v633->__shared_owners_;
    do
      v635 = __ldaxr(v634);
    while (__stlxr(v635 - 1, v634));
    if (!v635)
    {
      ((void (*)(std::__shared_weak_count *))v633->__on_zero_shared)(v633);
      std::__shared_weak_count::__release_weak(v633);
    }
  }
  v636 = (std::__shared_weak_count *)*((_QWORD *)&v2090 + 1);
  if (*((_QWORD *)&v2090 + 1))
  {
    v637 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v638 = __ldaxr(v637);
    while (__stlxr(v638 - 1, v637));
    if (!v638)
    {
      ((void (*)(std::__shared_weak_count *))v636->__on_zero_shared)(v636);
      std::__shared_weak_count::__release_weak(v636);
    }
  }
  v639 = *(_QWORD *)(a3 + 80);
  v640 = *(_QWORD *)(v639 + 992);
  v641 = *(_QWORD *)(v639 + 1000);
  *(_QWORD *)&v2090 = v640;
  *((_QWORD *)&v2090 + 1) = v641;
  if (v641)
  {
    v642 = (unint64_t *)(v641 + 8);
    do
      v643 = __ldxr(v642);
    while (__stxr(v643 + 1, v642));
  }
  v644 = (char *)operator new(0x198uLL);
  *((_QWORD *)v644 + 1) = 0;
  *((_QWORD *)v644 + 2) = 0;
  *(_QWORD *)v644 = &off_1E42E4E70;
  v645 = a4[1];
  *(_OWORD *)v2080 = *a4;
  *(_OWORD *)&v2080[16] = v645;
  if ((v646 & 1) == 0)
  {
    if ((_DWORD)v1972)
    {
      if ((v1973 & 1) == 0)
      {
        if ((_DWORD)v1972)
        {
          if ((v2030 & 1) == 0
          {
            if ((v2047 & 1) == 0
            {
              ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Glyph::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r;
            *(_QWORD *)algn_1ECE43D90 = 1;
          }
          ggl::Glyph3d::LowPrecisionHaloPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE583438 = &ggl::Glyph3d::pipelineDataLowPrecisionHaloPipelineDeviceStructs(void)::ref;
          qword_1EE583440 = 0;
          if ((v2031 & 1) == 0
          {
            ggl::Glyph3d::pipelineDataLowPrecisionHaloPipelineConstantStructs(void)::ref = (uint64_t)ggl::Label::View::reflection(void)::reflection;
            unk_1EE583790 = ggl::Label::Options::reflection(void)::reflection;
            qword_1EE583798 = (uint64_t)ggl::Label::DeviceBufferTextureSizeB::reflection(void)::reflection;
            unk_1EE5837A0 = ggl::Label::DeviceBufferTextureSize::reflection(void)::reflection;
            qword_1EE5837A8 = (uint64_t)ggl::Glyph::Options::reflection(void)::reflection;
            unk_1EE5837B0 = ggl::Label::ViewCommon::reflection(void)::reflection;
          }
          qword_1EE583448 = (uint64_t)&ggl::Glyph3d::pipelineDataLowPrecisionHaloPipelineConstantStructs(void)::ref;
          unk_1EE583450 = xmmword_19FFB4850;
        }
      }
      ggl::Glyph3d::LowPrecisionHaloPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Glyph3d::LowPrecisionHaloPipelineSetup::typedReflection(void)::ref;
      ggl::Glyph3dLowPrecisionHaloShader::typedReflection(v1972);
      qword_1ECE32280 = (uint64_t)&ggl::Glyph3dLowPrecisionHaloShader::typedReflection(void)::ref;
      if ((v1974 & 1) == 0
      {
        ggl::Glyph3d::pipelineStateLowPrecisionHaloPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE583A70 = 0;
        qword_1EE583A78 = (uint64_t)"";
        dword_1EE583A80 = 0;
        qword_1EE583A88 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionHaloPipelineAttributeBinding_0(void)::attr;
        unk_1EE583A90 = 8;
      }
      qword_1ECE32288 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionHaloPipelineAttributeStructBinding(void)::attr;
      unk_1ECE32290 = 1;
      qword_1ECE32298 = 0;
      unk_1ECE322A0 = 3;
      qword_1ECE322A8 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionHaloPipelineDeviceStructBinding(void)::ref;
      unk_1ECE322B0 = 0;
      if ((v1975 & 1) == 0
      {
        ggl::Glyph3d::pipelineStateLowPrecisionHaloPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE583950 = 0;
        qword_1EE583958 = (uint64_t)"view";
        dword_1EE583960 = 3;
        qword_1EE583968 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionHaloPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1EE583970 = xmmword_19FFB35A0;
        qword_1EE583980 = 1;
        unk_1EE583988 = "labelOptions";
        dword_1EE583990 = 3;
        qword_1EE583998 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionHaloPipelineConstantLabelOptionsBinding(void)::reflection;
        unk_1EE5839A0 = vdupq_n_s64(2uLL);
        qword_1EE5839B0 = 2;
        unk_1EE5839B8 = "byteBufferTextureSize";
        dword_1EE5839C0 = 3;
        qword_1EE5839C8 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionHaloPipelineConstantByteBufferTextureSizeBinding(void)::reflection;
        *(int64x2_t *)algn_1EE5839D0 = vdupq_n_s64(3uLL);
        qword_1EE5839E0 = 3;
        unk_1EE5839E8 = "floatBufferTextureSize";
        dword_1EE5839F0 = 3;
        qword_1EE5839F8 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionHaloPipelineConstantFloatBufferTextureSizeBinding(void)::reflection;
        unk_1EE583A00 = xmmword_19FFB3440;
        qword_1EE583A10 = 4;
        unk_1EE583A18 = "glyphOptions";
        dword_1EE583A20 = 3;
        qword_1EE583A28 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionHaloPipelineConstantGlyphOptionsBinding(void)::reflection;
        *(int64x2_t *)algn_1EE583A30 = vdupq_n_s64(5uLL);
        qword_1EE583A40 = 5;
        unk_1EE583A48 = "viewCommon";
        dword_1EE583A50 = 3;
        qword_1EE583A58 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionHaloPipelineConstantViewCommonBinding(void)::reflection;
        unk_1EE583A60 = 1;
      }
      qword_1ECE322B8 = (uint64_t)&ggl::Glyph3d::pipelineStateLowPrecisionHaloPipelineConstantStructBinding(void)::ref;
      unk_1ECE322C0 = 6;
    }
  }
  v647 = v2090;
  if (*((_QWORD *)&v2090 + 1))
  {
    v648 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v649 = __ldxr(v648);
    while (__stxr(v649 + 1, v648));
    *((_DWORD *)v644 + 14) = 0;
    *((_QWORD *)v644 + 5) = 0;
    *((_QWORD *)v644 + 6) = 0;
    *((_QWORD *)v644 + 3) = &off_1E42B6760;
    *((_QWORD *)v644 + 4) = 0;
    *((_QWORD *)v644 + 8) = &ggl::Glyph3d::LowPrecisionHaloPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v644 + 72) = v647;
    do
      v650 = __ldxr(v648);
    while (__stxr(v650 + 1, v648));
  }
  else
  {
    *((_DWORD *)v644 + 14) = 0;
    *((_QWORD *)v644 + 5) = 0;
    *((_QWORD *)v644 + 6) = 0;
    *((_QWORD *)v644 + 3) = &off_1E42B6760;
    *((_QWORD *)v644 + 4) = 0;
    *((_QWORD *)v644 + 8) = &ggl::Glyph3d::LowPrecisionHaloPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v644 + 72) = v647;
  }
  v651 = (int8x16_t *)(v644 + 328);
  v644[136] = 0;
  *(_OWORD *)(v644 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v644 + 156) = 0;
  *(_QWORD *)(v644 + 172) = 0;
  *(_QWORD *)(v644 + 164) = 0;
  v644[184] = 0;
  *(_OWORD *)(v644 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v644 + 204) = 0;
  *(_QWORD *)(v644 + 220) = 0;
  *(_QWORD *)(v644 + 212) = 0;
  v644[232] = 0;
  *(_OWORD *)(v644 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v644 + 252) = 0;
  *(_QWORD *)(v644 + 268) = 0;
  *(_QWORD *)(v644 + 260) = 0;
  v652 = *(_OWORD *)&v2080[16];
  *(_OWORD *)(v644 + 280) = *(_OWORD *)v2080;
  *(_OWORD *)(v644 + 296) = v652;
  v644[312] = 0;
  *((_QWORD *)v644 + 48) = 0;
  *((_OWORD *)v644 + 22) = 0u;
  *((_OWORD *)v644 + 23) = 0u;
  *((_OWORD *)v644 + 20) = 0u;
  *((_OWORD *)v644 + 21) = 0u;
  *((_QWORD *)v644 + 49) = 0x100000001;
  v644[400] = 0;
  v644[88] = 1;
  *(_WORD *)(v644 + 89) = (_WORD)v2086;
  v644[91] = BYTE2(v2086);
  *(_OWORD *)(v644 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v644 + 27) = 7;
  *((_QWORD *)v644 + 14) = 0;
  *((_QWORD *)v644 + 15) = 0;
  *((_DWORD *)v644 + 32) = 0;
  v644[132] = 15;
  if (*((_QWORD *)&v647 + 1))
  {
    v653 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
    do
      v654 = __ldaxr(v653);
    while (__stlxr(v654 - 1, v653));
    if (!v654)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v647 + 1) + 16))(*((_QWORD *)&v647 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v647 + 1));
    }
  }
  v651->i32[0] = 0;
  *(_DWORD *)(v644 + 331) = 0;
  v655 = vceqzq_s8(*v651);
  v656 = vmovl_high_s8(v655);
  v657 = vmovl_s16(*(int16x4_t *)v656.i8);
  v658.i64[0] = v657.u32[0];
  v658.i64[1] = v657.u32[1];
  v659 = v658;
  v660 = vmovl_s8(*(int8x8_t *)v655.i8);
  v661 = vmovl_s16(*(int16x4_t *)v660.i8);
  v658.i64[0] = v661.u32[0];
  v658.i64[1] = v661.u32[1];
  v662 = v658;
  v663 = vmovl_high_s16(v656);
  v658.i64[0] = v663.u32[0];
  v658.i64[1] = v663.u32[1];
  v664 = v658;
  v665 = vmovl_high_s16(v660);
  v658.i64[0] = v665.u32[0];
  v658.i64[1] = v665.u32[1];
  v666 = v658;
  v658.i64[0] = v657.u32[2];
  v658.i64[1] = v657.u32[3];
  v667 = v658;
  v658.i64[0] = v661.u32[2];
  v658.i64[1] = v661.u32[3];
  v668 = v658;
  v658.i64[0] = v663.u32[2];
  v658.i64[1] = v663.u32[3];
  v669 = v658;
  v658.i64[0] = v665.u32[2];
  v658.i64[1] = v665.u32[3];
  v670 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v658);
  v671 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v669);
  v672 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v668);
  v673 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v664);
  v674 = vceqzq_s8(*(int8x16_t *)(v644 + 344));
  v675 = vmovl_high_s8(v674);
  v676 = vmovl_s16(*(int16x4_t *)v675.i8);
  v658.i64[0] = v676.u32[0];
  v658.i64[1] = v676.u32[1];
  v677 = v658;
  v678 = vmovl_s8(*(int8x8_t *)v674.i8);
  v679 = vmovl_s16(*(int16x4_t *)v678.i8);
  v658.i64[0] = v679.u32[0];
  v658.i64[1] = v679.u32[1];
  v680 = v658;
  v681 = vmovl_high_s16(v675);
  v658.i64[0] = v681.u32[0];
  v658.i64[1] = v681.u32[1];
  v682 = v658;
  v683 = vmovl_high_s16(v678);
  v658.i64[0] = v683.u32[0];
  v658.i64[1] = v683.u32[1];
  v684 = v658;
  v658.i64[0] = v676.u32[2];
  v658.i64[1] = v676.u32[3];
  v685 = v658;
  v658.i64[0] = v679.u32[2];
  v658.i64[1] = v679.u32[3];
  v686 = v658;
  v658.i64[0] = v681.u32[2];
  v658.i64[1] = v681.u32[3];
  v687 = v658;
  v658.i64[0] = v683.u32[2];
  v658.i64[1] = v683.u32[3];
  v688 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v687);
  v689 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v677), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v659));
  v690 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v680), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v662));
  v691 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v682), v673);
  v692 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v684), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v666));
  v693 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v685), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v667));
  v694 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v686), v672);
  v695 = vorrq_s8(v688, v671);
  v696 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v658), v670);
  v697 = vceqzq_s8(*(int8x16_t *)(v644 + 360));
  v698 = vmovl_s8(*(int8x8_t *)v697.i8);
  v699 = vmovl_high_s16(v698);
  v700 = vmovl_high_s8(v697);
  v701 = vmovl_high_s16(v700);
  v702 = vmovl_s16(*(int16x4_t *)v698.i8);
  v703 = vmovl_s16(*(int16x4_t *)v700.i8);
  v658.i64[0] = v702.i32[0];
  v658.i64[1] = v702.i32[1];
  v704 = v658;
  v658.i64[0] = v703.i32[0];
  v658.i64[1] = v703.i32[1];
  v705 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v658);
  v706 = vceqzq_s8(*(int8x16_t *)(v644 + 376));
  v707 = vmovl_high_s8(v706);
  v708 = vmovl_s16(*(int16x4_t *)v707.i8);
  v658.i64[0] = v708.i32[0];
  v658.i64[1] = v708.i32[1];
  v709 = vmovl_s8(*(int8x8_t *)v706.i8);
  v710 = vmovl_s16(*(int16x4_t *)v709.i8);
  v711 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v658), v705), v689);
  v658.i64[0] = v710.i32[0];
  v658.i64[1] = v710.i32[1];
  v712 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v658), vbicq_s8((int8x16_t)xmmword_19FFB3170, v704));
  v658.i64[0] = v701.i32[0];
  v658.i64[1] = v701.i32[1];
  v713 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v658);
  v714 = vmovl_high_s16(v707);
  v715 = vorrq_s8(v712, v690);
  v658.i64[0] = v714.i32[0];
  v658.i64[1] = v714.i32[1];
  v716 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v658), v713);
  v658.i64[0] = v699.i32[0];
  v658.i64[1] = v699.i32[1];
  v717 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v658);
  v718 = vmovl_high_s16(v709);
  v658.i64[0] = v718.i32[0];
  v658.i64[1] = v718.i32[1];
  v719 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v658), v717), v692);
  v658.i64[0] = v703.i32[2];
  v658.i64[1] = v703.i32[3];
  v720 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v658);
  v658.i64[0] = v708.i32[2];
  v658.i64[1] = v708.i32[3];
  v721 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v658), v720), v693);
  v658.i64[0] = v702.i32[2];
  v658.i64[1] = v702.i32[3];
  v722 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v658);
  v658.i64[0] = v710.i32[2];
  v658.i64[1] = v710.i32[3];
  v723 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v658), v722), v694);
  v658.i64[0] = v701.i32[2];
  v658.i64[1] = v701.i32[3];
  v724 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v658);
  v658.i64[0] = v714.i32[2];
  v658.i64[1] = v714.i32[3];
  v725 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v658), v724), v695);
  v658.i64[0] = v699.i32[2];
  v658.i64[1] = v699.i32[3];
  v726 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v658);
  v658.i64[0] = v718.i32[2];
  v658.i64[1] = v718.i32[3];
  *((_QWORD *)v644 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v715, v711), vorrq_s8(v719, vorrq_s8(v716, v691))), (int64x2_t)vorrq_s8(vorrq_s8(v723, v721), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v658), v726), v696), v725))));
  *((_QWORD *)v644 + 3) = &off_1E42BCB90;
  v644[312] = 1;
  *(_QWORD *)(a1 + 960) = v644 + 24;
  v727 = *(std::__shared_weak_count **)(a1 + 968);
  *(_QWORD *)(a1 + 968) = v644;
  if (v727)
  {
    v728 = (unint64_t *)&v727->__shared_owners_;
    do
      v729 = __ldaxr(v728);
    while (__stlxr(v729 - 1, v728));
    if (!v729)
    {
      ((void (*)(std::__shared_weak_count *))v727->__on_zero_shared)(v727);
      std::__shared_weak_count::__release_weak(v727);
    }
  }
  v730 = (std::__shared_weak_count *)*((_QWORD *)&v2090 + 1);
  if (*((_QWORD *)&v2090 + 1))
  {
    v731 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v732 = __ldaxr(v731);
    while (__stlxr(v732 - 1, v731));
    if (!v732)
    {
      ((void (*)(std::__shared_weak_count *))v730->__on_zero_shared)(v730);
      std::__shared_weak_count::__release_weak(v730);
    }
  }
  v733 = *(_QWORD *)(a3 + 80);
  v734 = *(_QWORD *)(v733 + 1016);
  v735 = *(_QWORD *)(v733 + 1024);
  *(_QWORD *)&v2090 = v734;
  *((_QWORD *)&v2090 + 1) = v735;
  if (v735)
  {
    v736 = (unint64_t *)(v735 + 8);
    do
      v737 = __ldxr(v736);
    while (__stxr(v737 + 1, v736));
  }
  v738 = (char *)operator new(0x198uLL);
  *((_QWORD *)v738 + 1) = 0;
  *((_QWORD *)v738 + 2) = 0;
  *(_QWORD *)v738 = &off_1E42E4E00;
  v739 = a4[1];
  *(_OWORD *)v2080 = *a4;
  *(_OWORD *)&v2080[16] = v739;
  if ((v740 & 1) == 0)
  {
    if ((_DWORD)v1976)
    {
      if ((v1977 & 1) == 0)
      {
        if ((_DWORD)v1976)
        {
          if ((v2032 & 1) == 0
          {
            if ((v2048 & 1) == 0
            {
              ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Glyph::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r;
            *(_QWORD *)algn_1ECE43D90 = 1;
          }
          ggl::Glyph3d::RaymarchPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE5833D8 = &ggl::Glyph3d::pipelineDataRaymarchPipelineDeviceStructs(void)::ref;
          qword_1EE5833E0 = 0;
          if ((v2033 & 1) == 0
          {
            ggl::Glyph3d::pipelineDataRaymarchPipelineConstantStructs(void)::ref = (uint64_t)ggl::Label::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE5834A8 = ggl::Label::Options::reflection(void)::reflection;
            qword_1EE5834B0 = (uint64_t)ggl::Label::DeviceBufferTextureSizeB::reflection(void)::reflection;
            unk_1EE5834B8 = ggl::Label::DeviceBufferTextureSize::reflection(void)::reflection;
            qword_1EE5834C0 = (uint64_t)ggl::Glyph::Options::reflection(void)::reflection;
            unk_1EE5834C8 = ggl::Label::ViewCommon::reflection(void)::reflection;
          }
          qword_1EE5833E8 = (uint64_t)&ggl::Glyph3d::pipelineDataRaymarchPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE5833F0 = xmmword_19FFB4850;
        }
      }
      ggl::Glyph3d::RaymarchPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Glyph3d::RaymarchPipelineSetup::typedReflection(void)::ref;
      ggl::Glyph3dRaymarchShader::typedReflection(v1976);
      qword_1ECE2F4F0 = (uint64_t)&ggl::Glyph3dRaymarchShader::typedReflection(void)::ref;
      if ((v1978 & 1) == 0
      {
        ggl::Glyph3d::pipelineStateRaymarchPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE5837C8 = 0;
        qword_1EE5837D0 = (uint64_t)"";
        dword_1EE5837D8 = 0;
        qword_1EE5837E0 = (uint64_t)&ggl::Glyph3d::pipelineStateRaymarchPipelineAttributeBinding_0(void)::attr;
        unk_1EE5837E8 = 8;
      }
      qword_1ECE2F4F8 = (uint64_t)&ggl::Glyph3d::pipelineStateRaymarchPipelineAttributeStructBinding(void)::attr;
      unk_1ECE2F500 = 1;
      qword_1ECE2F508 = 0;
      unk_1ECE2F510 = 3;
      qword_1ECE2F518 = (uint64_t)&ggl::Glyph3d::pipelineStateRaymarchPipelineDeviceStructBinding(void)::ref;
      unk_1ECE2F520 = 0;
      if ((v1979 & 1) == 0
      {
        ggl::Glyph3d::pipelineStateRaymarchPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE583668 = 0;
        qword_1EE583670 = (uint64_t)"view";
        dword_1EE583678 = 3;
        qword_1EE583680 = (uint64_t)&ggl::Glyph3d::pipelineStateRaymarchPipelineConstantViewBinding(void)::reflection;
        unk_1EE583688 = xmmword_19FFB35A0;
        qword_1EE583698 = 1;
        unk_1EE5836A0 = "labelOptions";
        dword_1EE5836A8 = 3;
        qword_1EE5836B0 = (uint64_t)&ggl::Glyph3d::pipelineStateRaymarchPipelineConstantLabelOptionsBinding(void)::reflection;
        unk_1EE5836B8 = vdupq_n_s64(2uLL);
        qword_1EE5836C8 = 2;
        unk_1EE5836D0 = "byteBufferTextureSize";
        dword_1EE5836D8 = 3;
        qword_1EE5836E0 = (uint64_t)&ggl::Glyph3d::pipelineStateRaymarchPipelineConstantByteBufferTextureSizeBinding(void)::reflection;
        unk_1EE5836E8 = vdupq_n_s64(3uLL);
        qword_1EE5836F8 = 3;
        unk_1EE583700 = "floatBufferTextureSize";
        dword_1EE583708 = 3;
        qword_1EE583710 = (uint64_t)&ggl::Glyph3d::pipelineStateRaymarchPipelineConstantFloatBufferTextureSizeBinding(void)::reflection;
        unk_1EE583718 = xmmword_19FFB3440;
        qword_1EE583728 = 4;
        unk_1EE583730 = "glyphOptions";
        dword_1EE583738 = 3;
        qword_1EE583740 = (uint64_t)&ggl::Glyph3d::pipelineStateRaymarchPipelineConstantGlyphOptionsBinding(void)::reflection;
        unk_1EE583748 = vdupq_n_s64(5uLL);
        qword_1EE583758 = 5;
        unk_1EE583760 = "viewCommon";
        dword_1EE583768 = 3;
        qword_1EE583770 = (uint64_t)&ggl::Glyph3d::pipelineStateRaymarchPipelineConstantViewCommonBinding(void)::reflection;
        unk_1EE583778 = 1;
      }
      qword_1ECE2F528 = (uint64_t)&ggl::Glyph3d::pipelineStateRaymarchPipelineConstantStructBinding(void)::ref;
      unk_1ECE2F530 = 6;
    }
  }
  v741 = v2090;
  if (*((_QWORD *)&v2090 + 1))
  {
    v742 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v743 = __ldxr(v742);
    while (__stxr(v743 + 1, v742));
    *((_DWORD *)v738 + 14) = 0;
    *((_QWORD *)v738 + 5) = 0;
    *((_QWORD *)v738 + 6) = 0;
    *((_QWORD *)v738 + 3) = &off_1E42B6760;
    *((_QWORD *)v738 + 4) = 0;
    *((_QWORD *)v738 + 8) = &ggl::Glyph3d::RaymarchPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v738 + 72) = v741;
    do
      v744 = __ldxr(v742);
    while (__stxr(v744 + 1, v742));
  }
  else
  {
    *((_DWORD *)v738 + 14) = 0;
    *((_QWORD *)v738 + 5) = 0;
    *((_QWORD *)v738 + 6) = 0;
    *((_QWORD *)v738 + 3) = &off_1E42B6760;
    *((_QWORD *)v738 + 4) = 0;
    *((_QWORD *)v738 + 8) = &ggl::Glyph3d::RaymarchPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v738 + 72) = v741;
  }
  v745 = (int8x16_t *)(v738 + 328);
  v738[136] = 0;
  *(_OWORD *)(v738 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v738 + 156) = 0;
  *(_QWORD *)(v738 + 172) = 0;
  *(_QWORD *)(v738 + 164) = 0;
  v738[184] = 0;
  *(_OWORD *)(v738 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v738 + 204) = 0;
  *(_QWORD *)(v738 + 220) = 0;
  *(_QWORD *)(v738 + 212) = 0;
  v738[232] = 0;
  *(_OWORD *)(v738 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v738 + 252) = 0;
  *(_QWORD *)(v738 + 268) = 0;
  *(_QWORD *)(v738 + 260) = 0;
  v746 = *(_OWORD *)&v2080[16];
  *(_OWORD *)(v738 + 280) = *(_OWORD *)v2080;
  *(_OWORD *)(v738 + 296) = v746;
  v738[312] = 0;
  *((_QWORD *)v738 + 48) = 0;
  *((_OWORD *)v738 + 22) = 0u;
  *((_OWORD *)v738 + 23) = 0u;
  *((_OWORD *)v738 + 20) = 0u;
  *((_OWORD *)v738 + 21) = 0u;
  *((_QWORD *)v738 + 49) = 0x100000001;
  v738[400] = 0;
  v738[88] = 1;
  *(_WORD *)(v738 + 89) = (_WORD)v2086;
  v738[91] = BYTE2(v2086);
  *(_OWORD *)(v738 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v738 + 27) = 7;
  *((_QWORD *)v738 + 14) = 0;
  *((_QWORD *)v738 + 15) = 0;
  *((_DWORD *)v738 + 32) = 0;
  v738[132] = 15;
  if (*((_QWORD *)&v741 + 1))
  {
    v747 = (unint64_t *)(*((_QWORD *)&v741 + 1) + 8);
    do
      v748 = __ldaxr(v747);
    while (__stlxr(v748 - 1, v747));
    if (!v748)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v741 + 1) + 16))(*((_QWORD *)&v741 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v741 + 1));
    }
  }
  v745->i32[0] = 0;
  *(_DWORD *)(v738 + 331) = 0;
  v749 = vceqzq_s8(*v745);
  v750 = vmovl_high_s8(v749);
  v751 = vmovl_s16(*(int16x4_t *)v750.i8);
  v752.i64[0] = v751.u32[0];
  v752.i64[1] = v751.u32[1];
  v753 = v752;
  v754 = vmovl_s8(*(int8x8_t *)v749.i8);
  v755 = vmovl_s16(*(int16x4_t *)v754.i8);
  v752.i64[0] = v755.u32[0];
  v752.i64[1] = v755.u32[1];
  v756 = v752;
  v757 = vmovl_high_s16(v750);
  v752.i64[0] = v757.u32[0];
  v752.i64[1] = v757.u32[1];
  v758 = v752;
  v759 = vmovl_high_s16(v754);
  v752.i64[0] = v759.u32[0];
  v752.i64[1] = v759.u32[1];
  v760 = v752;
  v752.i64[0] = v751.u32[2];
  v752.i64[1] = v751.u32[3];
  v761 = v752;
  v752.i64[0] = v755.u32[2];
  v752.i64[1] = v755.u32[3];
  v762 = v752;
  v752.i64[0] = v757.u32[2];
  v752.i64[1] = v757.u32[3];
  v763 = v752;
  v752.i64[0] = v759.u32[2];
  v752.i64[1] = v759.u32[3];
  v764 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v752);
  v765 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v763);
  v766 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v762);
  v767 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v758);
  v768 = vceqzq_s8(*(int8x16_t *)(v738 + 344));
  v769 = vmovl_high_s8(v768);
  v770 = vmovl_s16(*(int16x4_t *)v769.i8);
  v752.i64[0] = v770.u32[0];
  v752.i64[1] = v770.u32[1];
  v771 = v752;
  v772 = vmovl_s8(*(int8x8_t *)v768.i8);
  v773 = vmovl_s16(*(int16x4_t *)v772.i8);
  v752.i64[0] = v773.u32[0];
  v752.i64[1] = v773.u32[1];
  v774 = v752;
  v775 = vmovl_high_s16(v769);
  v752.i64[0] = v775.u32[0];
  v752.i64[1] = v775.u32[1];
  v776 = v752;
  v777 = vmovl_high_s16(v772);
  v752.i64[0] = v777.u32[0];
  v752.i64[1] = v777.u32[1];
  v778 = v752;
  v752.i64[0] = v770.u32[2];
  v752.i64[1] = v770.u32[3];
  v779 = v752;
  v752.i64[0] = v773.u32[2];
  v752.i64[1] = v773.u32[3];
  v780 = v752;
  v752.i64[0] = v775.u32[2];
  v752.i64[1] = v775.u32[3];
  v781 = v752;
  v752.i64[0] = v777.u32[2];
  v752.i64[1] = v777.u32[3];
  v782 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v781);
  v783 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v771), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v753));
  v784 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v774), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v756));
  v785 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v776), v767);
  v786 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v778), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v760));
  v787 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v779), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v761));
  v788 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v780), v766);
  v789 = vorrq_s8(v782, v765);
  v790 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v752), v764);
  v791 = vceqzq_s8(*(int8x16_t *)(v738 + 360));
  v792 = vmovl_s8(*(int8x8_t *)v791.i8);
  v793 = vmovl_high_s16(v792);
  v794 = vmovl_high_s8(v791);
  v795 = vmovl_high_s16(v794);
  v796 = vmovl_s16(*(int16x4_t *)v792.i8);
  v797 = vmovl_s16(*(int16x4_t *)v794.i8);
  v752.i64[0] = v796.i32[0];
  v752.i64[1] = v796.i32[1];
  v798 = v752;
  v752.i64[0] = v797.i32[0];
  v752.i64[1] = v797.i32[1];
  v799 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v752);
  v800 = vceqzq_s8(*(int8x16_t *)(v738 + 376));
  v801 = vmovl_high_s8(v800);
  v802 = vmovl_s16(*(int16x4_t *)v801.i8);
  v752.i64[0] = v802.i32[0];
  v752.i64[1] = v802.i32[1];
  v803 = vmovl_s8(*(int8x8_t *)v800.i8);
  v804 = vmovl_s16(*(int16x4_t *)v803.i8);
  v805 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v752), v799), v783);
  v752.i64[0] = v804.i32[0];
  v752.i64[1] = v804.i32[1];
  v806 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v752), vbicq_s8((int8x16_t)xmmword_19FFB3170, v798));
  v752.i64[0] = v795.i32[0];
  v752.i64[1] = v795.i32[1];
  v807 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v752);
  v808 = vmovl_high_s16(v801);
  v809 = vorrq_s8(v806, v784);
  v752.i64[0] = v808.i32[0];
  v752.i64[1] = v808.i32[1];
  v810 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v752), v807);
  v752.i64[0] = v793.i32[0];
  v752.i64[1] = v793.i32[1];
  v811 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v752);
  v812 = vmovl_high_s16(v803);
  v752.i64[0] = v812.i32[0];
  v752.i64[1] = v812.i32[1];
  v813 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v752), v811), v786);
  v752.i64[0] = v797.i32[2];
  v752.i64[1] = v797.i32[3];
  v814 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v752);
  v752.i64[0] = v802.i32[2];
  v752.i64[1] = v802.i32[3];
  v815 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v752), v814), v787);
  v752.i64[0] = v796.i32[2];
  v752.i64[1] = v796.i32[3];
  v816 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v752);
  v752.i64[0] = v804.i32[2];
  v752.i64[1] = v804.i32[3];
  v817 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v752), v816), v788);
  v752.i64[0] = v795.i32[2];
  v752.i64[1] = v795.i32[3];
  v818 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v752);
  v752.i64[0] = v808.i32[2];
  v752.i64[1] = v808.i32[3];
  v819 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v752), v818), v789);
  v752.i64[0] = v793.i32[2];
  v752.i64[1] = v793.i32[3];
  v820 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v752);
  v752.i64[0] = v812.i32[2];
  v752.i64[1] = v812.i32[3];
  *((_QWORD *)v738 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v809, v805), vorrq_s8(v813, vorrq_s8(v810, v785))), (int64x2_t)vorrq_s8(vorrq_s8(v817, v815), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v752), v820), v790), v819))));
  *((_QWORD *)v738 + 3) = &off_1E42BCAF0;
  v738[312] = 1;
  *(_QWORD *)(a1 + 976) = v738 + 24;
  v821 = *(std::__shared_weak_count **)(a1 + 984);
  *(_QWORD *)(a1 + 984) = v738;
  if (v821)
  {
    v822 = (unint64_t *)&v821->__shared_owners_;
    do
      v823 = __ldaxr(v822);
    while (__stlxr(v823 - 1, v822));
    if (!v823)
    {
      ((void (*)(std::__shared_weak_count *))v821->__on_zero_shared)(v821);
      std::__shared_weak_count::__release_weak(v821);
    }
  }
  v824 = (std::__shared_weak_count *)*((_QWORD *)&v2090 + 1);
  if (*((_QWORD *)&v2090 + 1))
  {
    v825 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v826 = __ldaxr(v825);
    while (__stlxr(v826 - 1, v825));
    if (!v826)
    {
      ((void (*)(std::__shared_weak_count *))v824->__on_zero_shared)(v824);
      std::__shared_weak_count::__release_weak(v824);
    }
  }
  v827 = *(_QWORD *)(a3 + 80);
  v828 = *(std::__shared_weak_count **)(v827 + 1040);
  v829 = *(std::__shared_weak_count **)(v827 + 1048);
  v2086 = v828;
  v2087 = v829;
  if (v829)
  {
    v830 = (unint64_t *)&v829->__shared_owners_;
    do
      v831 = __ldxr(v830);
    while (__stxr(v831 + 1, v830));
  }
  *(_QWORD *)&v2081 = 0;
  *(_QWORD *)&v2080[24] = 0;
  DWORD2(v2081) = 0;
  v2080[0] = 1;
  *(_OWORD *)&v2080[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v2080[20] = 7;
  BYTE12(v2081) = 15;
  v832 = operator new(0x198uLL);
  v832[1] = 0;
  v832[2] = 0;
  *v832 = &off_1E42E3708;
  v833 = a4[1];
  v2090 = *a4;
  v2091 = v833;
  *(_QWORD *)(a1 + 848) = ggl::GlyphWithNormalHalo::DefaultPipelineState::DefaultPipelineState((uint64_t)(v832 + 3), &v2086, (uint64_t)v2080, &v2090, 0, 0, 0, 0, 0, 0);
  v834 = *(std::__shared_weak_count **)(a1 + 856);
  *(_QWORD *)(a1 + 856) = v832;
  if (v834)
  {
    v835 = (unint64_t *)&v834->__shared_owners_;
    do
      v836 = __ldaxr(v835);
    while (__stlxr(v836 - 1, v835));
    if (!v836)
    {
      ((void (*)(std::__shared_weak_count *))v834->__on_zero_shared)(v834);
      std::__shared_weak_count::__release_weak(v834);
    }
  }
  v837 = v2087;
  if (v2087)
  {
    v838 = (unint64_t *)&v2087->__shared_owners_;
    do
      v839 = __ldaxr(v838);
    while (__stlxr(v839 - 1, v838));
    if (!v839)
    {
      ((void (*)(std::__shared_weak_count *))v837->__on_zero_shared)(v837);
      std::__shared_weak_count::__release_weak(v837);
    }
  }
  v840 = *(_QWORD *)(a3 + 80);
  v841 = *(std::__shared_weak_count **)(v840 + 1040);
  v842 = *(std::__shared_weak_count **)(v840 + 1048);
  v2086 = v841;
  v2087 = v842;
  if (v842)
  {
    v843 = (unint64_t *)&v842->__shared_owners_;
    do
      v844 = __ldxr(v843);
    while (__stxr(v844 + 1, v843));
  }
  *(_QWORD *)&v2081 = 0;
  *(_QWORD *)&v2080[24] = 0;
  DWORD2(v2081) = 0;
  v2080[0] = 1;
  *(_OWORD *)&v2080[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v2080[20] = 7;
  BYTE12(v2081) = 15;
  v845 = operator new(0x198uLL);
  v845[1] = 0;
  v845[2] = 0;
  *v845 = &off_1E42E3708;
  v846 = a4[1];
  v2090 = *a4;
  v2091 = v846;
  *(_QWORD *)(a1 + 864) = ggl::GlyphWithNormalHalo::DefaultPipelineState::DefaultPipelineState((uint64_t)(v845 + 3), &v2086, (uint64_t)v2080, &v2090, 1, 0, 0, 0, 0, 0);
  v847 = *(std::__shared_weak_count **)(a1 + 872);
  *(_QWORD *)(a1 + 872) = v845;
  if (v847)
  {
    v848 = (unint64_t *)&v847->__shared_owners_;
    do
      v849 = __ldaxr(v848);
    while (__stlxr(v849 - 1, v848));
    if (!v849)
    {
      ((void (*)(std::__shared_weak_count *))v847->__on_zero_shared)(v847);
      std::__shared_weak_count::__release_weak(v847);
    }
  }
  v850 = v2087;
  if (v2087)
  {
    v851 = (unint64_t *)&v2087->__shared_owners_;
    do
      v852 = __ldaxr(v851);
    while (__stlxr(v852 - 1, v851));
    if (!v852)
    {
      ((void (*)(std::__shared_weak_count *))v850->__on_zero_shared)(v850);
      std::__shared_weak_count::__release_weak(v850);
    }
  }
  v853 = *(_QWORD *)(a3 + 80);
  v855 = *(_QWORD *)(v853 + 344);
  v854 = *(_QWORD *)(v853 + 352);
  *(_QWORD *)&v2090 = v855;
  *((_QWORD *)&v2090 + 1) = v854;
  if (v854)
  {
    v856 = (unint64_t *)(v854 + 8);
    do
      v857 = __ldxr(v856);
    while (__stxr(v857 + 1, v856));
  }
  v858 = (char *)operator new(0x198uLL);
  *((_QWORD *)v858 + 1) = 0;
  *((_QWORD *)v858 + 2) = 0;
  *(_QWORD *)v858 = &off_1E42E3D60;
  v859 = a4[1];
  *(_OWORD *)v2080 = *a4;
  *(_OWORD *)&v2080[16] = v859;
  if ((v860 & 1) == 0
  {
    if ((v1980 & 1) == 0
    {
      if ((v2034 & 1) == 0
      {
        if ((v2049 & 1) == 0
        {
          ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Glyph::defaultVboReflection;
        }
        ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r;
        *(_QWORD *)algn_1ECE43D90 = 1;
      }
      ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r;
      *(_QWORD *)algn_1EE57FB18 = &ggl::ColorGlyphWithNormalHalo::pipelineDataDefaultPipelineDeviceStructs(void)::ref;
      qword_1EE57FB20 = 0;
      if ((v2035 & 1) == 0
      {
        ggl::ColorGlyphWithNormalHalo::pipelineDataDefaultPipelineConstantStructs(void)::ref = (uint64_t)ggl::Label::View::reflection(void)::reflection;
        unk_1EE57FB50 = ggl::Label::Options::reflection(void)::reflection;
        qword_1EE57FB58 = (uint64_t)ggl::Label::DeviceBufferTextureSize::reflection(void)::reflection;
        unk_1EE57FB60 = ggl::Glyph::Options::reflection(void)::reflection;
        qword_1EE57FB68 = (uint64_t)ggl::Label::ViewCommon::reflection(void)::reflection;
      }
      qword_1EE57FB28 = (uint64_t)&ggl::ColorGlyphWithNormalHalo::pipelineDataDefaultPipelineConstantStructs(void)::ref;
      unk_1EE57FB30 = xmmword_19FFB3020;
    }
    ggl::ColorGlyphWithNormalHalo::DefaultPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup::typedReflection(void)::ref;
    if ((v1981 & 1) == 0
    {
      ggl::ColorGlyphWithNormalHaloShader::typedReflection(void)::ref = (uint64_t)"ColorGlyphWithNormalHaloShader";
      if ((v2036 & 1) == 0
      {
        v2050 = ggl::crc32::compute<37ul>("ColorGlyphWithNormalHaloShaderVertex");
        qword_1ECE42500 = (uint64_t)"ColorGlyphWithNormalHaloShader";
        unk_1ECE42508 = ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE42510 = 1;
        unk_1ECE42518 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE42520 = 3;
        unk_1ECE42528 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE42530 = 0;
        unk_1ECE42538 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::colorGlyphWithNormalHaloShaderVertexFunctionDescriptor(void)::ref = v2050;
        *(_DWORD *)algn_1ECE424FC = 0;
        qword_1ECE42540 = 1;
        unk_1ECE42548 = &ggl::colorGlyphWithNormalHaloShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE42558 = 0;
        unk_1ECE42560 = 0;
        qword_1ECE42550 = 1;
      }
      qword_1ECE3B990 = (uint64_t)&ggl::colorGlyphWithNormalHaloShaderVertexFunctionDescriptor(void)::ref;
      dword_1ECE3B998 = ggl::crc32::compute<37ul>("ColorGlyphWithNormalHaloShaderVertex");
      if ((v2037 & 1) == 0
      {
        ggl::colorGlyphWithNormalHaloShaderFragmentFunctionDescriptor(void)::ref = 0x101385EE6;
        qword_1ECE42CC8 = (uint64_t)"ColorGlyphWithNormalHaloShader";
        unk_1ECE42CD0 = 0;
        qword_1ECE42CD8 = 0;
        unk_1ECE42CE0 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE42CE8 = 2;
        unk_1ECE42CF0 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE42CF8 = 0;
        unk_1ECE42D00 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE42D08 = 1;
        unk_1ECE42D10 = &ggl::colorGlyphWithNormalHaloShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE42D20 = 0;
        unk_1ECE42D28 = 0;
        qword_1ECE42D18 = 1;
      }
      qword_1ECE3B9A0 = (uint64_t)&ggl::colorGlyphWithNormalHaloShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B9A8 = 20471526;
      qword_1ECE3B9B0 = (uint64_t)ggl::colorGlyphWithNormalHaloShaderShaderConstants(void)::ref;
      unk_1ECE3B9B8 = 5;
      qword_1ECE3B9C0 = (uint64_t)ggl::colorGlyphWithNormalHaloShaderShaderTextures(void)::ref;
      unk_1ECE3B9C8 = 2;
      qword_1ECE3B9D0 = (uint64_t)ggl::colorGlyphWithNormalHaloShaderShaderSamplers(void)::ref;
      unk_1ECE3B9D8 = 2;
    }
    qword_1ECE31C20 = (uint64_t)&ggl::ColorGlyphWithNormalHaloShader::typedReflection(void)::ref;
    if ((v1982 & 1) == 0
    {
      ggl::ColorGlyphWithNormalHalo::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr = 0;
      unk_1EE57FC70 = 0;
      qword_1EE57FC78 = (uint64_t)"";
      dword_1EE57FC80 = 0;
      qword_1EE57FC88 = (uint64_t)&ggl::ColorGlyphWithNormalHalo::pipelineStateDefaultPipelineAttributeBinding_0(void)::attr;
      unk_1EE57FC90 = 8;
    }
    qword_1ECE31C28 = (uint64_t)&ggl::ColorGlyphWithNormalHalo::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr;
    unk_1ECE31C30 = 1;
    qword_1ECE31C38 = 0;
    unk_1ECE31C40 = 2;
    qword_1ECE31C48 = (uint64_t)&ggl::ColorGlyphWithNormalHalo::pipelineStateDefaultPipelineDeviceStructBinding(void)::ref;
    unk_1ECE31C50 = 0;
    if ((v1983 & 1) == 0
    {
      ggl::ColorGlyphWithNormalHalo::pipelineStateDefaultPipelineConstantStructBinding(void)::ref = 0;
      unk_1EE57FB80 = 0;
      qword_1EE57FB88 = (uint64_t)"view";
      dword_1EE57FB90 = 3;
      qword_1EE57FB98 = (uint64_t)&ggl::ColorGlyphWithNormalHalo::pipelineStateDefaultPipelineConstantViewBinding(void)::reflection;
      unk_1EE57FBA0 = xmmword_19FFB35A0;
      qword_1EE57FBB0 = 1;
      unk_1EE57FBB8 = "labelOptions";
      dword_1EE57FBC0 = 3;
      qword_1EE57FBC8 = (uint64_t)&ggl::ColorGlyphWithNormalHalo::pipelineStateDefaultPipelineConstantLabelOptionsBinding(void)::reflection;
      *(int64x2_t *)algn_1EE57FBD0 = vdupq_n_s64(2uLL);
      qword_1EE57FBE0 = 2;
      unk_1EE57FBE8 = "floatBufferTextureSize";
      dword_1EE57FBF0 = 3;
      qword_1EE57FBF8 = (uint64_t)&ggl::ColorGlyphWithNormalHalo::pipelineStateDefaultPipelineConstantFloatBufferTextureSizeBinding(void)::reflection;
      unk_1EE57FC00 = vdupq_n_s64(3uLL);
      qword_1EE57FC10 = 3;
      unk_1EE57FC18 = "glyphOptions";
      dword_1EE57FC20 = 3;
      qword_1EE57FC28 = (uint64_t)&ggl::ColorGlyphWithNormalHalo::pipelineStateDefaultPipelineConstantGlyphOptionsBinding(void)::reflection;
      *(_OWORD *)algn_1EE57FC30 = xmmword_19FFB5E60;
      qword_1EE57FC40 = 4;
      unk_1EE57FC48 = "viewCommon";
      dword_1EE57FC50 = 3;
      qword_1EE57FC58 = (uint64_t)&ggl::ColorGlyphWithNormalHalo::pipelineStateDefaultPipelineConstantViewCommonBinding(void)::reflection;
      unk_1EE57FC60 = 1;
    }
    qword_1ECE31C58 = (uint64_t)&ggl::ColorGlyphWithNormalHalo::pipelineStateDefaultPipelineConstantStructBinding(void)::ref;
    unk_1ECE31C60 = 5;
  }
  v861 = v2090;
  if (*((_QWORD *)&v2090 + 1))
  {
    v862 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v863 = __ldxr(v862);
    while (__stxr(v863 + 1, v862));
    *((_DWORD *)v858 + 14) = 0;
    *((_QWORD *)v858 + 5) = 0;
    *((_QWORD *)v858 + 6) = 0;
    *((_QWORD *)v858 + 3) = &off_1E42B6760;
    *((_QWORD *)v858 + 4) = 0;
    *((_QWORD *)v858 + 8) = &ggl::ColorGlyphWithNormalHalo::DefaultPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v858 + 72) = v861;
    do
      v864 = __ldxr(v862);
    while (__stxr(v864 + 1, v862));
  }
  else
  {
    *((_DWORD *)v858 + 14) = 0;
    *((_QWORD *)v858 + 5) = 0;
    *((_QWORD *)v858 + 6) = 0;
    *((_QWORD *)v858 + 3) = &off_1E42B6760;
    *((_QWORD *)v858 + 4) = 0;
    *((_QWORD *)v858 + 8) = &ggl::ColorGlyphWithNormalHalo::DefaultPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v858 + 72) = v861;
  }
  v865 = (int8x16_t *)(v858 + 328);
  v858[136] = 0;
  *(_OWORD *)(v858 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v858 + 156) = 0;
  *(_QWORD *)(v858 + 172) = 0;
  *(_QWORD *)(v858 + 164) = 0;
  v858[184] = 0;
  *(_OWORD *)(v858 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v858 + 204) = 0;
  *(_QWORD *)(v858 + 220) = 0;
  *(_QWORD *)(v858 + 212) = 0;
  v858[232] = 0;
  *(_OWORD *)(v858 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v858 + 252) = 0;
  *(_QWORD *)(v858 + 268) = 0;
  *(_QWORD *)(v858 + 260) = 0;
  v866 = *(_OWORD *)&v2080[16];
  *(_OWORD *)(v858 + 280) = *(_OWORD *)v2080;
  *(_OWORD *)(v858 + 296) = v866;
  v858[312] = 0;
  *((_QWORD *)v858 + 48) = 0;
  *((_OWORD *)v858 + 22) = 0u;
  *((_OWORD *)v858 + 23) = 0u;
  *((_OWORD *)v858 + 20) = 0u;
  *((_OWORD *)v858 + 21) = 0u;
  *((_QWORD *)v858 + 49) = 0x100000001;
  v858[400] = 0;
  v858[88] = 1;
  *(_WORD *)(v858 + 89) = (_WORD)v2086;
  v858[91] = BYTE2(v2086);
  *(_OWORD *)(v858 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v858 + 27) = 7;
  *((_QWORD *)v858 + 14) = 0;
  *((_QWORD *)v858 + 15) = 0;
  *((_DWORD *)v858 + 32) = 0;
  v858[132] = 15;
  if (*((_QWORD *)&v861 + 1))
  {
    v867 = (unint64_t *)(*((_QWORD *)&v861 + 1) + 8);
    do
      v868 = __ldaxr(v867);
    while (__stlxr(v868 - 1, v867));
    if (!v868)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v861 + 1) + 16))(*((_QWORD *)&v861 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v861 + 1));
    }
  }
  v865->i32[0] = 0;
  *(_DWORD *)(v858 + 331) = 0;
  v869 = vceqzq_s8(*v865);
  v870 = vmovl_high_s8(v869);
  v871 = vmovl_s16(*(int16x4_t *)v870.i8);
  v872.i64[0] = v871.u32[0];
  v872.i64[1] = v871.u32[1];
  v873 = v872;
  v874 = vmovl_s8(*(int8x8_t *)v869.i8);
  v875 = vmovl_s16(*(int16x4_t *)v874.i8);
  v872.i64[0] = v875.u32[0];
  v872.i64[1] = v875.u32[1];
  v876 = v872;
  v877 = vmovl_high_s16(v870);
  v872.i64[0] = v877.u32[0];
  v872.i64[1] = v877.u32[1];
  v878 = v872;
  v879 = vmovl_high_s16(v874);
  v872.i64[0] = v879.u32[0];
  v872.i64[1] = v879.u32[1];
  v880 = v872;
  v872.i64[0] = v871.u32[2];
  v872.i64[1] = v871.u32[3];
  v881 = v872;
  v872.i64[0] = v875.u32[2];
  v872.i64[1] = v875.u32[3];
  v882 = v872;
  v872.i64[0] = v877.u32[2];
  v872.i64[1] = v877.u32[3];
  v883 = v872;
  v872.i64[0] = v879.u32[2];
  v872.i64[1] = v879.u32[3];
  v884 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v872);
  v885 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v883);
  v886 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v882);
  v887 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v878);
  v888 = vceqzq_s8(*(int8x16_t *)(v858 + 344));
  v889 = vmovl_high_s8(v888);
  v890 = vmovl_s16(*(int16x4_t *)v889.i8);
  v872.i64[0] = v890.u32[0];
  v872.i64[1] = v890.u32[1];
  v891 = v872;
  v892 = vmovl_s8(*(int8x8_t *)v888.i8);
  v893 = vmovl_s16(*(int16x4_t *)v892.i8);
  v872.i64[0] = v893.u32[0];
  v872.i64[1] = v893.u32[1];
  v894 = v872;
  v895 = vmovl_high_s16(v889);
  v872.i64[0] = v895.u32[0];
  v872.i64[1] = v895.u32[1];
  v896 = v872;
  v897 = vmovl_high_s16(v892);
  v872.i64[0] = v897.u32[0];
  v872.i64[1] = v897.u32[1];
  v898 = v872;
  v872.i64[0] = v890.u32[2];
  v872.i64[1] = v890.u32[3];
  v899 = v872;
  v872.i64[0] = v893.u32[2];
  v872.i64[1] = v893.u32[3];
  v900 = v872;
  v872.i64[0] = v895.u32[2];
  v872.i64[1] = v895.u32[3];
  v901 = v872;
  v872.i64[0] = v897.u32[2];
  v872.i64[1] = v897.u32[3];
  v902 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v901);
  v903 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v891), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v873));
  v904 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v894), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v876));
  v905 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v896), v887);
  v906 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v898), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v880));
  v907 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v899), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v881));
  v908 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v900), v886);
  v909 = vorrq_s8(v902, v885);
  v910 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v872), v884);
  v911 = vceqzq_s8(*(int8x16_t *)(v858 + 360));
  v912 = vmovl_s8(*(int8x8_t *)v911.i8);
  v913 = vmovl_high_s16(v912);
  v914 = vmovl_high_s8(v911);
  v915 = vmovl_high_s16(v914);
  v916 = vmovl_s16(*(int16x4_t *)v912.i8);
  v917 = vmovl_s16(*(int16x4_t *)v914.i8);
  v872.i64[0] = v916.i32[0];
  v872.i64[1] = v916.i32[1];
  v918 = v872;
  v872.i64[0] = v917.i32[0];
  v872.i64[1] = v917.i32[1];
  v919 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v872);
  v920 = vceqzq_s8(*(int8x16_t *)(v858 + 376));
  v921 = vmovl_high_s8(v920);
  v922 = vmovl_s16(*(int16x4_t *)v921.i8);
  v872.i64[0] = v922.i32[0];
  v872.i64[1] = v922.i32[1];
  v923 = vmovl_s8(*(int8x8_t *)v920.i8);
  v924 = vmovl_s16(*(int16x4_t *)v923.i8);
  v925 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v872), v919), v903);
  v872.i64[0] = v924.i32[0];
  v872.i64[1] = v924.i32[1];
  v926 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v872), vbicq_s8((int8x16_t)xmmword_19FFB3170, v918));
  v872.i64[0] = v915.i32[0];
  v872.i64[1] = v915.i32[1];
  v927 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v872);
  v928 = vmovl_high_s16(v921);
  v929 = vorrq_s8(v926, v904);
  v872.i64[0] = v928.i32[0];
  v872.i64[1] = v928.i32[1];
  v930 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v872), v927);
  v872.i64[0] = v913.i32[0];
  v872.i64[1] = v913.i32[1];
  v931 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v872);
  v932 = vmovl_high_s16(v923);
  v872.i64[0] = v932.i32[0];
  v872.i64[1] = v932.i32[1];
  v933 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v872), v931), v906);
  v872.i64[0] = v917.i32[2];
  v872.i64[1] = v917.i32[3];
  v934 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v872);
  v872.i64[0] = v922.i32[2];
  v872.i64[1] = v922.i32[3];
  v935 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v872), v934), v907);
  v872.i64[0] = v916.i32[2];
  v872.i64[1] = v916.i32[3];
  v936 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v872);
  v872.i64[0] = v924.i32[2];
  v872.i64[1] = v924.i32[3];
  v937 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v872), v936), v908);
  v872.i64[0] = v915.i32[2];
  v872.i64[1] = v915.i32[3];
  v938 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v872);
  v872.i64[0] = v928.i32[2];
  v872.i64[1] = v928.i32[3];
  v939 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v872), v938), v909);
  v872.i64[0] = v913.i32[2];
  v872.i64[1] = v913.i32[3];
  v940 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v872);
  v872.i64[0] = v932.i32[2];
  v872.i64[1] = v932.i32[3];
  *((_QWORD *)v858 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v929, v925), vorrq_s8(v933, vorrq_s8(v930, v905))), (int64x2_t)vorrq_s8(vorrq_s8(v937, v935), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v872), v940), v910), v939))));
  *((_QWORD *)v858 + 3) = &off_1E42BB270;
  v858[312] = 1;
  *(_QWORD *)(a1 + 832) = v858 + 24;
  v941 = *(std::__shared_weak_count **)(a1 + 840);
  *(_QWORD *)(a1 + 840) = v858;
  if (v941)
  {
    v942 = (unint64_t *)&v941->__shared_owners_;
    do
      v943 = __ldaxr(v942);
    while (__stlxr(v943 - 1, v942));
    if (!v943)
    {
      ((void (*)(std::__shared_weak_count *))v941->__on_zero_shared)(v941);
      std::__shared_weak_count::__release_weak(v941);
    }
  }
  v944 = (std::__shared_weak_count *)*((_QWORD *)&v2090 + 1);
  if (*((_QWORD *)&v2090 + 1))
  {
    v945 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v946 = __ldaxr(v945);
    while (__stlxr(v946 - 1, v945));
    if (!v946)
    {
      ((void (*)(std::__shared_weak_count *))v944->__on_zero_shared)(v944);
      std::__shared_weak_count::__release_weak(v944);
    }
  }
  v947 = *(_QWORD *)(a3 + 80);
  v948 = *(_QWORD *)(v947 + 1040);
  v949 = *(std::__shared_weak_count **)(v947 + 1048);
  if (v949)
  {
    v950 = (unint64_t *)&v949->__shared_owners_;
    do
      v951 = __ldxr(v950);
    while (__stxr(v951 + 1, v950));
  }
  v952 = a4[1];
  *(_OWORD *)&v2080[16] = *a4;
  v2081 = v952;
  *(_OWORD *)v2080 = 0uLL;
  v2082[0] = 1;
  *(_OWORD *)&v2082[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v2082[20] = 7;
  memset(&v2082[24], 0, 20);
  v2083 = 15;
  v2085 = 0;
  *((_QWORD *)&v2084 + 1) = 0;
  *(_QWORD *)&v2084 = (char *)&v2084 + 8;
  if (v949)
  {
    v953 = (unint64_t *)&v949->__shared_owners_;
    do
      v954 = __ldxr(v953);
    while (__stxr(v954 + 1, v953));
    v955 = *(std::__shared_weak_count **)&v2080[8];
    *(_QWORD *)v2080 = v948;
    *(_QWORD *)&v2080[8] = v949;
    if (v955)
    {
      v956 = (unint64_t *)&v955->__shared_owners_;
      do
        v957 = __ldaxr(v956);
      while (__stlxr(v957 - 1, v956));
      if (!v957)
      {
        ((void (*)(std::__shared_weak_count *))v955->__on_zero_shared)(v955);
        std::__shared_weak_count::__release_weak(v955);
      }
    }
  }
  else
  {
    *(_OWORD *)v2080 = v948;
  }
  *(_QWORD *)&v2091 = 0;
  *((_QWORD *)&v2090 + 1) = 0;
  *(_QWORD *)&v2090 = (char *)&v2090 + 8;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)&v2084 + 1));
  v958 = (_QWORD *)*((_QWORD *)&v2090 + 1);
  v2084 = v2090;
  v2085 = v2091;
  if ((_QWORD)v2091)
  {
    *(_QWORD *)(*((_QWORD *)&v2090 + 1) + 16) = (char *)&v2084 + 8;
    *(_QWORD *)&v2090 = (char *)&v2090 + 8;
    *((_QWORD *)&v2090 + 1) = 0;
    *(_QWORD *)&v2091 = 0;
    v958 = 0;
  }
  else
  {
    *(_QWORD *)&v2084 = (char *)&v2084 + 8;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v958);
  v959 = *(_OWORD *)v2080;
  *(_OWORD *)v2080 = 0uLL;
  v960 = *(std::__shared_weak_count **)(a1 + 480);
  v961 = a1 + 472;
  *(_OWORD *)(a1 + 472) = v959;
  if (v960)
  {
    v962 = (unint64_t *)&v960->__shared_owners_;
    do
      v963 = __ldaxr(v962);
    while (__stlxr(v963 - 1, v962));
    if (!v963)
    {
      ((void (*)(std::__shared_weak_count *))v960->__on_zero_shared)(v960);
      std::__shared_weak_count::__release_weak(v960);
      v961 = a1 + 472;
    }
  }
  v964 = v2081;
  *(_OWORD *)(a1 + 488) = *(_OWORD *)&v2080[16];
  *(_OWORD *)(a1 + 504) = v964;
  *(_OWORD *)(a1 + 520) = *(_OWORD *)v2082;
  *(_OWORD *)(a1 + 532) = *(_OWORD *)&v2082[12];
  *(_OWORD *)(v961 + 76) = *(_OWORD *)&v2082[28];
  *(_BYTE *)(a1 + 564) = v2083;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(a1 + 576));
  v965 = (_QWORD *)*((_QWORD *)&v2084 + 1);
  *(_QWORD *)(a1 + 568) = v2084;
  *(_QWORD *)(a1 + 576) = v965;
  v966 = v2085;
  *(_QWORD *)(a1 + 584) = v2085;
  if (v966)
  {
    v965[2] = v2079;
    v965 = 0;
    *(_QWORD *)&v2084 = (char *)&v2084 + 8;
    *((_QWORD *)&v2084 + 1) = 0;
    v2085 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 568) = v2079;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v965);
  v967 = *(std::__shared_weak_count **)&v2080[8];
  if (*(_QWORD *)&v2080[8])
  {
    v968 = (unint64_t *)(*(_QWORD *)&v2080[8] + 8);
    do
      v969 = __ldaxr(v968);
    while (__stlxr(v969 - 1, v968));
    if (!v969)
    {
      ((void (*)(std::__shared_weak_count *))v967->__on_zero_shared)(v967);
      std::__shared_weak_count::__release_weak(v967);
    }
  }
  if (v949)
  {
    v970 = (unint64_t *)&v949->__shared_owners_;
    do
      v971 = __ldaxr(v970);
    while (__stlxr(v971 - 1, v970));
    if (!v971)
    {
      ((void (*)(std::__shared_weak_count *))v949->__on_zero_shared)(v949);
      std::__shared_weak_count::__release_weak(v949);
    }
  }
  v972 = *(_QWORD *)(a3 + 80);
  v973 = *(_QWORD *)(v972 + 1184);
  v974 = *(std::__shared_weak_count **)(v972 + 1192);
  if (v974)
  {
    v975 = (unint64_t *)&v974->__shared_owners_;
    do
      v976 = __ldxr(v975);
    while (__stxr(v976 + 1, v975));
  }
  v977 = a4[1];
  *(_OWORD *)&v2080[16] = *a4;
  v2081 = v977;
  *(_OWORD *)v2080 = 0uLL;
  v2082[0] = 1;
  *(_OWORD *)&v2082[4] = xmmword_19FFB35D0;
  *(_DWORD *)&v2082[20] = 7;
  memset(&v2082[24], 0, 20);
  v2083 = 15;
  v2085 = 0;
  *((_QWORD *)&v2084 + 1) = 0;
  *(_QWORD *)&v2084 = (char *)&v2084 + 8;
  if (v974)
  {
    v978 = (unint64_t *)&v974->__shared_owners_;
    do
      v979 = __ldxr(v978);
    while (__stxr(v979 + 1, v978));
    v980 = *(std::__shared_weak_count **)&v2080[8];
    *(_QWORD *)v2080 = v973;
    *(_QWORD *)&v2080[8] = v974;
    if (v980)
    {
      v981 = (unint64_t *)&v980->__shared_owners_;
      do
        v982 = __ldaxr(v981);
      while (__stlxr(v982 - 1, v981));
      if (!v982)
      {
        ((void (*)(std::__shared_weak_count *))v980->__on_zero_shared)(v980);
        std::__shared_weak_count::__release_weak(v980);
      }
    }
  }
  else
  {
    *(_OWORD *)v2080 = v973;
  }
  *(_QWORD *)&v2091 = 0;
  *((_QWORD *)&v2090 + 1) = 0;
  *(_QWORD *)&v2090 = (char *)&v2090 + 8;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)&v2084 + 1));
  v983 = (_QWORD *)*((_QWORD *)&v2090 + 1);
  v2084 = v2090;
  v2085 = v2091;
  if ((_QWORD)v2091)
  {
    *(_QWORD *)(*((_QWORD *)&v2090 + 1) + 16) = (char *)&v2084 + 8;
    *(_QWORD *)&v2090 = (char *)&v2090 + 8;
    *((_QWORD *)&v2090 + 1) = 0;
    *(_QWORD *)&v2091 = 0;
    v983 = 0;
  }
  else
  {
    *(_QWORD *)&v2084 = (char *)&v2084 + 8;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v983);
  v984 = *(_OWORD *)v2080;
  *(_OWORD *)v2080 = 0uLL;
  v985 = *(std::__shared_weak_count **)(a1 + 600);
  *(_OWORD *)(a1 + 592) = v984;
  v986 = a1 + 472;
  if (v985)
  {
    v987 = (unint64_t *)&v985->__shared_owners_;
    do
      v988 = __ldaxr(v987);
    while (__stlxr(v988 - 1, v987));
    if (!v988)
    {
      ((void (*)(std::__shared_weak_count *))v985->__on_zero_shared)(v985);
      std::__shared_weak_count::__release_weak(v985);
      v986 = a1 + 472;
    }
  }
  v989 = v2081;
  *(_OWORD *)(a1 + 608) = *(_OWORD *)&v2080[16];
  *(_OWORD *)(a1 + 624) = v989;
  *(_OWORD *)(a1 + 640) = *(_OWORD *)v2082;
  *(_OWORD *)(a1 + 652) = *(_OWORD *)&v2082[12];
  *(_OWORD *)(v986 + 196) = *(_OWORD *)&v2082[28];
  *(_BYTE *)(a1 + 684) = v2083;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(a1 + 696));
  v990 = (_QWORD *)*((_QWORD *)&v2084 + 1);
  *(_QWORD *)(a1 + 688) = v2084;
  *(_QWORD *)(a1 + 696) = v990;
  v991 = v2085;
  *(_QWORD *)(a1 + 704) = v2085;
  if (v991)
  {
    v990[2] = v2053;
    v990 = 0;
    *(_QWORD *)&v2084 = (char *)&v2084 + 8;
    *((_QWORD *)&v2084 + 1) = 0;
    v2085 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 688) = v2053;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v990);
  v992 = *(std::__shared_weak_count **)&v2080[8];
  if (*(_QWORD *)&v2080[8])
  {
    v993 = (unint64_t *)(*(_QWORD *)&v2080[8] + 8);
    do
      v994 = __ldaxr(v993);
    while (__stlxr(v994 - 1, v993));
    if (!v994)
    {
      ((void (*)(std::__shared_weak_count *))v992->__on_zero_shared)(v992);
      std::__shared_weak_count::__release_weak(v992);
    }
  }
  if (v974)
  {
    v995 = (unint64_t *)&v974->__shared_owners_;
    do
      v996 = __ldaxr(v995);
    while (__stlxr(v996 - 1, v995));
    if (!v996)
    {
      ((void (*)(std::__shared_weak_count *))v974->__on_zero_shared)(v974);
      std::__shared_weak_count::__release_weak(v974);
    }
  }
  v997 = *(_QWORD *)(a3 + 80);
  v998 = *(_QWORD *)(v997 + 1256);
  v999 = *(std::__shared_weak_count **)(v997 + 1264);
  if (v999)
  {
    v1000 = (unint64_t *)&v999->__shared_owners_;
    do
      v1001 = __ldxr(v1000);
    while (__stxr(v1001 + 1, v1000));
  }
  v1002 = a4[1];
  *(_OWORD *)&v2080[16] = *a4;
  v2081 = v1002;
  *(_OWORD *)v2080 = 0uLL;
  v2082[0] = 1;
  *(_OWORD *)&v2082[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v2082[20] = 7;
  memset(&v2082[24], 0, 20);
  v2083 = 15;
  v2085 = 0;
  *((_QWORD *)&v2084 + 1) = 0;
  *(_QWORD *)&v2084 = (char *)&v2084 + 8;
  if (v999)
  {
    v1003 = (unint64_t *)&v999->__shared_owners_;
    do
      v1004 = __ldxr(v1003);
    while (__stxr(v1004 + 1, v1003));
    v1005 = *(std::__shared_weak_count **)&v2080[8];
    *(_QWORD *)v2080 = v998;
    *(_QWORD *)&v2080[8] = v999;
    if (v1005)
    {
      v1006 = (unint64_t *)&v1005->__shared_owners_;
      do
        v1007 = __ldaxr(v1006);
      while (__stlxr(v1007 - 1, v1006));
      if (!v1007)
      {
        ((void (*)(std::__shared_weak_count *))v1005->__on_zero_shared)(v1005);
        std::__shared_weak_count::__release_weak(v1005);
      }
    }
  }
  else
  {
    *(_OWORD *)v2080 = v998;
  }
  *(_QWORD *)&v2091 = 0;
  *((_QWORD *)&v2090 + 1) = 0;
  *(_QWORD *)&v2090 = (char *)&v2090 + 8;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)&v2084 + 1));
  v1008 = (_QWORD *)*((_QWORD *)&v2090 + 1);
  v2084 = v2090;
  v2085 = v2091;
  if ((_QWORD)v2091)
  {
    *(_QWORD *)(*((_QWORD *)&v2090 + 1) + 16) = (char *)&v2084 + 8;
    *(_QWORD *)&v2090 = (char *)&v2090 + 8;
    *((_QWORD *)&v2090 + 1) = 0;
    *(_QWORD *)&v2091 = 0;
    v1008 = 0;
  }
  else
  {
    *(_QWORD *)&v2084 = (char *)&v2084 + 8;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v1008);
  v1009 = *(_OWORD *)v2080;
  *(_OWORD *)v2080 = 0uLL;
  v1010 = *(std::__shared_weak_count **)(a1 + 720);
  *v2069 = v1009;
  if (v1010)
  {
    v1011 = (unint64_t *)&v1010->__shared_owners_;
    do
      v1012 = __ldaxr(v1011);
    while (__stlxr(v1012 - 1, v1011));
    if (!v1012)
    {
      ((void (*)(std::__shared_weak_count *))v1010->__on_zero_shared)(v1010);
      std::__shared_weak_count::__release_weak(v1010);
    }
  }
  v1013 = v2081;
  *(_OWORD *)(a1 + 728) = *(_OWORD *)&v2080[16];
  *(_OWORD *)(a1 + 744) = v1013;
  *(_OWORD *)(a1 + 760) = *(_OWORD *)v2082;
  *(_OWORD *)(a1 + 772) = *(_OWORD *)&v2082[12];
  *(_OWORD *)(a1 + 788) = *(_OWORD *)&v2082[28];
  *(_BYTE *)(a1 + 804) = v2083;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(a1 + 816));
  v1014 = (_QWORD *)*((_QWORD *)&v2084 + 1);
  *(_QWORD *)(a1 + 808) = v2084;
  *(_QWORD *)(a1 + 816) = v1014;
  v1015 = v2085;
  *(_QWORD *)(a1 + 824) = v2085;
  if (v1015)
  {
    v1014[2] = v2054;
    v1014 = 0;
    *(_QWORD *)&v2084 = (char *)&v2084 + 8;
    *((_QWORD *)&v2084 + 1) = 0;
    v2085 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 808) = v2054;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v1014);
  v1016 = *(std::__shared_weak_count **)&v2080[8];
  if (*(_QWORD *)&v2080[8])
  {
    v1017 = (unint64_t *)(*(_QWORD *)&v2080[8] + 8);
    do
      v1018 = __ldaxr(v1017);
    while (__stlxr(v1018 - 1, v1017));
    if (!v1018)
    {
      ((void (*)(std::__shared_weak_count *))v1016->__on_zero_shared)(v1016);
      std::__shared_weak_count::__release_weak(v1016);
    }
  }
  if (v999)
  {
    v1019 = (unint64_t *)&v999->__shared_owners_;
    do
      v1020 = __ldaxr(v1019);
    while (__stlxr(v1020 - 1, v1019));
    if (!v1020)
    {
      ((void (*)(std::__shared_weak_count *))v999->__on_zero_shared)(v999);
      std::__shared_weak_count::__release_weak(v999);
    }
  }
  v1021 = (uint64_t *)operator new();
  v2146[0] = &off_1E42CAC70;
  v2146[1] = a1;
  v2147 = v2146;
  v2144[0] = &off_1E42D7AF0;
  v2145 = v2144;
  v1021[1] = 0;
  v1021[2] = 0;
  *v1021 = 0;
  {
    v1984 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1984, "GeoGL", 0xA3D02C1100000005);
  }
  v1023 = ggl::Allocator::instance(void)::alloc;
  v1021[4] = 0;
  v1021[3] = v1023;
  v1021[5] = 0;
  v1021[6] = 0;
  {
    v1985 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1985, "GeoGL", 0xA3D02C1100000005);
  }
  v1021[7] = ggl::Allocator::instance(void)::alloc;
  v1024 = (uint64_t)v2147;
  if (!v2147)
    goto LABEL_523;
  if (v2147 != v2146)
  {
    v1024 = (*(uint64_t (**)(void))(*v2147 + 16))();
LABEL_523:
    v1021[11] = v1024;
    goto LABEL_525;
  }
  v1021[11] = (uint64_t)(v1021 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v2146[0] + 24))(v2146, v1021 + 8);
LABEL_525:
  v1025 = (uint64_t)v2145;
  if (!v2145)
  {
LABEL_528:
    v1021[15] = v1025;
    goto LABEL_530;
  }
  if (v2145 != v2144)
  {
    v1025 = (*(uint64_t (**)(void))(*v2145 + 16))();
    goto LABEL_528;
  }
  v1021[15] = (uint64_t)(v1021 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v2144[0] + 24))((uint64_t)v2144, v1021 + 12);
LABEL_530:
  v1021[16] = 2000;
  v1026 = *v1021;
  if ((unint64_t)(v1021[2] - *v1021) > 0x31F)
    goto LABEL_543;
  v1027 = v1021[1];
  v1028 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1021[3] + 16))(v1021[3], 800, 8);
  v1029 = v1027 - v1026;
  v1030 = v1028 + ((v1027 - v1026) & 0xFFFFFFFFFFFFFFF8);
  v1032 = *v1021;
  v1031 = v1021[1];
  v1033 = v1031 - *v1021;
  if (v1031 == *v1021)
  {
    v1035 = v1028 + ((v1027 - v1026) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_541;
  }
  v1034 = v1033 - 8;
  if ((unint64_t)(v1033 - 8) >= 0x58)
  {
    v1035 = v1028 + ((v1027 - v1026) & 0xFFFFFFFFFFFFFFF8);
    if (v1031 - (v1029 & 0xFFFFFFFFFFFFFFF8) - v1028 >= 0x20)
    {
      v1036 = v1029 >> 3;
      v1037 = (v1034 >> 3) + 1;
      v1038 = (_OWORD *)(v1028 + 8 * v1036 - 16);
      v1039 = (__int128 *)(v1031 - 16);
      v1040 = v1037 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1041 = *v1039;
        *(v1038 - 1) = *(v1039 - 1);
        *v1038 = v1041;
        v1038 -= 2;
        v1039 -= 2;
        v1040 -= 4;
      }
      while (v1040);
      v1035 = v1030 - 8 * (v1037 & 0x3FFFFFFFFFFFFFFCLL);
      v1031 -= 8 * (v1037 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1037 == (v1037 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_540;
    }
  }
  else
  {
    v1035 = v1028 + ((v1027 - v1026) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1042 = *(_QWORD *)(v1031 - 8);
    v1031 -= 8;
    *(_QWORD *)(v1035 - 8) = v1042;
    v1035 -= 8;
  }
  while (v1031 != v1032);
LABEL_540:
  v1031 = *v1021;
LABEL_541:
  *v1021 = v1035;
  v1021[1] = v1030;
  v1043 = v1021[2];
  v1021[2] = v1028 + 800;
  if (v1031)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1021[3] + 40))(v1021[3], v1031, v1043 - v1031);
LABEL_543:
  v1044 = v1021[4];
  if ((unint64_t)(v1021[6] - v1044) > 0x31F)
    goto LABEL_556;
  v1045 = v1021[5];
  v1046 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1021[7] + 16))(v1021[7], 800, 8);
  v1047 = v1045 - v1044;
  v1048 = v1046 + ((v1045 - v1044) & 0xFFFFFFFFFFFFFFF8);
  v1050 = v1021[4];
  v1049 = v1021[5];
  v1051 = v1049 - v1050;
  if (v1049 == v1050)
  {
    v1053 = v1046 + ((v1045 - v1044) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_554;
  }
  v1052 = v1051 - 8;
  if ((unint64_t)(v1051 - 8) >= 0x58)
  {
    v1053 = v1046 + ((v1045 - v1044) & 0xFFFFFFFFFFFFFFF8);
    if (v1049 - (v1047 & 0xFFFFFFFFFFFFFFF8) - v1046 >= 0x20)
    {
      v1054 = v1047 >> 3;
      v1055 = (v1052 >> 3) + 1;
      v1056 = (_OWORD *)(v1046 + 8 * v1054 - 16);
      v1057 = (__int128 *)(v1049 - 16);
      v1058 = v1055 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1059 = *v1057;
        *(v1056 - 1) = *(v1057 - 1);
        *v1056 = v1059;
        v1056 -= 2;
        v1057 -= 2;
        v1058 -= 4;
      }
      while (v1058);
      v1053 = v1048 - 8 * (v1055 & 0x3FFFFFFFFFFFFFFCLL);
      v1049 -= 8 * (v1055 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1055 == (v1055 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_553;
    }
  }
  else
  {
    v1053 = v1046 + ((v1045 - v1044) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1060 = *(_QWORD *)(v1049 - 8);
    v1049 -= 8;
    *(_QWORD *)(v1053 - 8) = v1060;
    v1053 -= 8;
  }
  while (v1049 != v1050);
LABEL_553:
  v1049 = v1021[4];
LABEL_554:
  v1021[4] = v1053;
  v1021[5] = v1048;
  v1061 = v1021[6];
  v1021[6] = v1046 + 800;
  if (v1049)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1021[7] + 40))(v1021[7], v1049, v1061 - v1049);
LABEL_556:
  v1062 = *v2068;
  *v2068 = (uint64_t)v1021;
  if (v1062)
  {
    v1063 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1062);
    MEMORY[0x1A1AF4E00](v1063, 0x10A0C40D234DDC7);
  }
  v1064 = v2145;
  if (v2145 == v2144)
  {
    v1065 = 4;
    v1064 = v2144;
  }
  else
  {
    if (!v2145)
      goto LABEL_563;
    v1065 = 5;
  }
  (*(void (**)(void))(*v1064 + 8 * v1065))();
LABEL_563:
  v1066 = v2147;
  if (v2147 == v2146)
  {
    v1067 = 4;
    v1066 = v2146;
    goto LABEL_567;
  }
  if (v2147)
  {
    v1067 = 5;
LABEL_567:
    (*(void (**)(void))(*v1066 + 8 * v1067))();
  }
  v1068 = (uint64_t *)operator new();
  v2142[0] = &off_1E42CACB8;
  v2142[1] = a1;
  v2143 = v2142;
  v2140[0] = &off_1E42D7AA8;
  v2141 = v2140;
  v1068[1] = 0;
  v1068[2] = 0;
  *v1068 = 0;
  {
    v1986 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1986, "GeoGL", 0xA3D02C1100000005);
  }
  v1070 = ggl::Allocator::instance(void)::alloc;
  v1068[4] = 0;
  v1068[3] = v1070;
  v1068[5] = 0;
  v1068[6] = 0;
  {
    v1987 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1987, "GeoGL", 0xA3D02C1100000005);
  }
  v1068[7] = ggl::Allocator::instance(void)::alloc;
  v1071 = (uint64_t)v2143;
  if (!v2143)
    goto LABEL_573;
  if (v2143 != v2142)
  {
    v1071 = (*(uint64_t (**)(void))(*v2143 + 16))();
LABEL_573:
    v1068[11] = v1071;
    goto LABEL_575;
  }
  v1068[11] = (uint64_t)(v1068 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v2142[0] + 24))((uint64_t)v2142, v1068 + 8);
LABEL_575:
  v1072 = (uint64_t)v2141;
  if (!v2141)
  {
LABEL_578:
    v1068[15] = v1072;
    goto LABEL_580;
  }
  if (v2141 != v2140)
  {
    v1072 = (*(uint64_t (**)(void))(*v2141 + 16))();
    goto LABEL_578;
  }
  v1068[15] = (uint64_t)(v1068 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v2140[0] + 24))((uint64_t)v2140, v1068 + 12);
LABEL_580:
  v1068[16] = 2000;
  v1073 = *v1068;
  if ((unint64_t)(v1068[2] - *v1068) > 0x31F)
    goto LABEL_593;
  v1074 = v1068[1];
  v1075 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1068[3] + 16))(v1068[3], 800, 8);
  v1076 = v1074 - v1073;
  v1077 = v1075 + ((v1074 - v1073) & 0xFFFFFFFFFFFFFFF8);
  v1079 = *v1068;
  v1078 = v1068[1];
  v1080 = v1078 - *v1068;
  if (v1078 == *v1068)
  {
    v1082 = v1075 + ((v1074 - v1073) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_591;
  }
  v1081 = v1080 - 8;
  if ((unint64_t)(v1080 - 8) >= 0x58)
  {
    v1082 = v1075 + ((v1074 - v1073) & 0xFFFFFFFFFFFFFFF8);
    if (v1078 - (v1076 & 0xFFFFFFFFFFFFFFF8) - v1075 >= 0x20)
    {
      v1083 = v1076 >> 3;
      v1084 = (v1081 >> 3) + 1;
      v1085 = (_OWORD *)(v1075 + 8 * v1083 - 16);
      v1086 = (__int128 *)(v1078 - 16);
      v1087 = v1084 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1088 = *v1086;
        *(v1085 - 1) = *(v1086 - 1);
        *v1085 = v1088;
        v1085 -= 2;
        v1086 -= 2;
        v1087 -= 4;
      }
      while (v1087);
      v1082 = v1077 - 8 * (v1084 & 0x3FFFFFFFFFFFFFFCLL);
      v1078 -= 8 * (v1084 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1084 == (v1084 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_590;
    }
  }
  else
  {
    v1082 = v1075 + ((v1074 - v1073) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1089 = *(_QWORD *)(v1078 - 8);
    v1078 -= 8;
    *(_QWORD *)(v1082 - 8) = v1089;
    v1082 -= 8;
  }
  while (v1078 != v1079);
LABEL_590:
  v1078 = *v1068;
LABEL_591:
  *v1068 = v1082;
  v1068[1] = v1077;
  v1090 = v1068[2];
  v1068[2] = v1075 + 800;
  if (v1078)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1068[3] + 40))(v1068[3], v1078, v1090 - v1078);
LABEL_593:
  v1091 = v1068[4];
  if ((unint64_t)(v1068[6] - v1091) > 0x31F)
    goto LABEL_606;
  v1092 = v1068[5];
  v1093 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1068[7] + 16))(v1068[7], 800, 8);
  v1094 = v1092 - v1091;
  v1095 = v1093 + ((v1092 - v1091) & 0xFFFFFFFFFFFFFFF8);
  v1097 = v1068[4];
  v1096 = v1068[5];
  v1098 = v1096 - v1097;
  if (v1096 == v1097)
  {
    v1100 = v1093 + ((v1092 - v1091) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_604;
  }
  v1099 = v1098 - 8;
  if ((unint64_t)(v1098 - 8) >= 0x58)
  {
    v1100 = v1093 + ((v1092 - v1091) & 0xFFFFFFFFFFFFFFF8);
    if (v1096 - (v1094 & 0xFFFFFFFFFFFFFFF8) - v1093 >= 0x20)
    {
      v1101 = v1094 >> 3;
      v1102 = (v1099 >> 3) + 1;
      v1103 = (_OWORD *)(v1093 + 8 * v1101 - 16);
      v1104 = (__int128 *)(v1096 - 16);
      v1105 = v1102 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1106 = *v1104;
        *(v1103 - 1) = *(v1104 - 1);
        *v1103 = v1106;
        v1103 -= 2;
        v1104 -= 2;
        v1105 -= 4;
      }
      while (v1105);
      v1100 = v1095 - 8 * (v1102 & 0x3FFFFFFFFFFFFFFCLL);
      v1096 -= 8 * (v1102 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1102 == (v1102 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_603;
    }
  }
  else
  {
    v1100 = v1093 + ((v1092 - v1091) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1107 = *(_QWORD *)(v1096 - 8);
    v1096 -= 8;
    *(_QWORD *)(v1100 - 8) = v1107;
    v1100 -= 8;
  }
  while (v1096 != v1097);
LABEL_603:
  v1096 = v1068[4];
LABEL_604:
  v1068[4] = v1100;
  v1068[5] = v1095;
  v1108 = v1068[6];
  v1068[6] = v1093 + 800;
  if (v1096)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1068[7] + 40))(v1068[7], v1096, v1108 - v1096);
LABEL_606:
  v1109 = *v2067;
  *v2067 = (uint64_t)v1068;
  if (v1109)
  {
    v1110 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1109);
    MEMORY[0x1A1AF4E00](v1110, 0x10A0C40D234DDC7);
  }
  v1111 = v2141;
  if (v2141 == v2140)
  {
    v1112 = 4;
    v1111 = v2140;
  }
  else
  {
    if (!v2141)
      goto LABEL_613;
    v1112 = 5;
  }
  (*(void (**)(void))(*v1111 + 8 * v1112))();
LABEL_613:
  v1113 = v2143;
  if (v2143 == v2142)
  {
    v1114 = 4;
    v1113 = v2142;
    goto LABEL_617;
  }
  if (v2143)
  {
    v1114 = 5;
LABEL_617:
    (*(void (**)(void))(*v1113 + 8 * v1114))();
  }
  v1115 = (uint64_t *)operator new();
  v2138[0] = &off_1E42CAD00;
  v2138[1] = a1;
  v2139 = v2138;
  v2136[0] = &off_1E42D7B38;
  v2137 = v2136;
  v1115[1] = 0;
  v1115[2] = 0;
  *v1115 = 0;
  {
    v1988 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1988, "GeoGL", 0xA3D02C1100000005);
  }
  v1117 = ggl::Allocator::instance(void)::alloc;
  v1115[4] = 0;
  v1115[3] = v1117;
  v1115[5] = 0;
  v1115[6] = 0;
  {
    v1989 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1989, "GeoGL", 0xA3D02C1100000005);
  }
  v1115[7] = ggl::Allocator::instance(void)::alloc;
  v1118 = (uint64_t)v2139;
  if (!v2139)
    goto LABEL_623;
  if (v2139 != v2138)
  {
    v1118 = (*(uint64_t (**)(void))(*v2139 + 16))();
LABEL_623:
    v1115[11] = v1118;
    goto LABEL_625;
  }
  v1115[11] = (uint64_t)(v1115 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v2138[0] + 24))((uint64_t)v2138, v1115 + 8);
LABEL_625:
  v1119 = (uint64_t)v2137;
  if (!v2137)
  {
LABEL_628:
    v1115[15] = v1119;
    goto LABEL_630;
  }
  if (v2137 != v2136)
  {
    v1119 = (*(uint64_t (**)(void))(*v2137 + 16))();
    goto LABEL_628;
  }
  v1115[15] = (uint64_t)(v1115 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v2136[0] + 24))((uint64_t)v2136, v1115 + 12);
LABEL_630:
  v1115[16] = 2000;
  v1120 = *v1115;
  if ((unint64_t)(v1115[2] - *v1115) > 0x31F)
    goto LABEL_643;
  v1121 = v1115[1];
  v1122 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1115[3] + 16))(v1115[3], 800, 8);
  v1123 = v1121 - v1120;
  v1124 = v1122 + ((v1121 - v1120) & 0xFFFFFFFFFFFFFFF8);
  v1126 = *v1115;
  v1125 = v1115[1];
  v1127 = v1125 - *v1115;
  if (v1125 == *v1115)
  {
    v1129 = v1122 + ((v1121 - v1120) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_641;
  }
  v1128 = v1127 - 8;
  if ((unint64_t)(v1127 - 8) >= 0x58)
  {
    v1129 = v1122 + ((v1121 - v1120) & 0xFFFFFFFFFFFFFFF8);
    if (v1125 - (v1123 & 0xFFFFFFFFFFFFFFF8) - v1122 >= 0x20)
    {
      v1130 = v1123 >> 3;
      v1131 = (v1128 >> 3) + 1;
      v1132 = (_OWORD *)(v1122 + 8 * v1130 - 16);
      v1133 = (__int128 *)(v1125 - 16);
      v1134 = v1131 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1135 = *v1133;
        *(v1132 - 1) = *(v1133 - 1);
        *v1132 = v1135;
        v1132 -= 2;
        v1133 -= 2;
        v1134 -= 4;
      }
      while (v1134);
      v1129 = v1124 - 8 * (v1131 & 0x3FFFFFFFFFFFFFFCLL);
      v1125 -= 8 * (v1131 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1131 == (v1131 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_640;
    }
  }
  else
  {
    v1129 = v1122 + ((v1121 - v1120) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1136 = *(_QWORD *)(v1125 - 8);
    v1125 -= 8;
    *(_QWORD *)(v1129 - 8) = v1136;
    v1129 -= 8;
  }
  while (v1125 != v1126);
LABEL_640:
  v1125 = *v1115;
LABEL_641:
  *v1115 = v1129;
  v1115[1] = v1124;
  v1137 = v1115[2];
  v1115[2] = v1122 + 800;
  if (v1125)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1115[3] + 40))(v1115[3], v1125, v1137 - v1125);
LABEL_643:
  v1138 = v1115[4];
  if ((unint64_t)(v1115[6] - v1138) > 0x31F)
    goto LABEL_656;
  v1139 = v1115[5];
  v1140 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1115[7] + 16))(v1115[7], 800, 8);
  v1141 = v1139 - v1138;
  v1142 = v1140 + ((v1139 - v1138) & 0xFFFFFFFFFFFFFFF8);
  v1144 = v1115[4];
  v1143 = v1115[5];
  v1145 = v1143 - v1144;
  if (v1143 == v1144)
  {
    v1147 = v1140 + ((v1139 - v1138) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_654;
  }
  v1146 = v1145 - 8;
  if ((unint64_t)(v1145 - 8) >= 0x58)
  {
    v1147 = v1140 + ((v1139 - v1138) & 0xFFFFFFFFFFFFFFF8);
    if (v1143 - (v1141 & 0xFFFFFFFFFFFFFFF8) - v1140 >= 0x20)
    {
      v1148 = v1141 >> 3;
      v1149 = (v1146 >> 3) + 1;
      v1150 = (_OWORD *)(v1140 + 8 * v1148 - 16);
      v1151 = (__int128 *)(v1143 - 16);
      v1152 = v1149 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1153 = *v1151;
        *(v1150 - 1) = *(v1151 - 1);
        *v1150 = v1153;
        v1150 -= 2;
        v1151 -= 2;
        v1152 -= 4;
      }
      while (v1152);
      v1147 = v1142 - 8 * (v1149 & 0x3FFFFFFFFFFFFFFCLL);
      v1143 -= 8 * (v1149 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1149 == (v1149 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_653;
    }
  }
  else
  {
    v1147 = v1140 + ((v1139 - v1138) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1154 = *(_QWORD *)(v1143 - 8);
    v1143 -= 8;
    *(_QWORD *)(v1147 - 8) = v1154;
    v1147 -= 8;
  }
  while (v1143 != v1144);
LABEL_653:
  v1143 = v1115[4];
LABEL_654:
  v1115[4] = v1147;
  v1115[5] = v1142;
  v1155 = v1115[6];
  v1115[6] = v1140 + 800;
  if (v1143)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1115[7] + 40))(v1115[7], v1143, v1155 - v1143);
LABEL_656:
  v1156 = *v2066;
  *v2066 = (uint64_t)v1115;
  if (v1156)
  {
    v1157 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1156);
    MEMORY[0x1A1AF4E00](v1157, 0x10A0C40D234DDC7);
  }
  v1158 = v2137;
  if (v2137 == v2136)
  {
    v1159 = 4;
    v1158 = v2136;
  }
  else
  {
    if (!v2137)
      goto LABEL_663;
    v1159 = 5;
  }
  (*(void (**)(void))(*v1158 + 8 * v1159))();
LABEL_663:
  v1160 = v2139;
  if (v2139 == v2138)
  {
    v1161 = 4;
    v1160 = v2138;
    goto LABEL_667;
  }
  if (v2139)
  {
    v1161 = 5;
LABEL_667:
    (*(void (**)(void))(*v1160 + 8 * v1161))();
  }
  v1162 = (uint64_t *)operator new();
  v2134[0] = &off_1E42CAD48;
  v2134[1] = a1;
  v2135 = v2134;
  v2132[0] = &off_1E42D7988;
  v2133 = v2132;
  v1162[1] = 0;
  v1162[2] = 0;
  *v1162 = 0;
  {
    v1990 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1990, "GeoGL", 0xA3D02C1100000005);
  }
  v1164 = ggl::Allocator::instance(void)::alloc;
  v1162[4] = 0;
  v1162[3] = v1164;
  v1162[5] = 0;
  v1162[6] = 0;
  {
    v1991 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1991, "GeoGL", 0xA3D02C1100000005);
  }
  v1162[7] = ggl::Allocator::instance(void)::alloc;
  v1165 = (uint64_t)v2135;
  if (!v2135)
    goto LABEL_673;
  if (v2135 != v2134)
  {
    v1165 = (*(uint64_t (**)(void))(*v2135 + 16))();
LABEL_673:
    v1162[11] = v1165;
    goto LABEL_675;
  }
  v1162[11] = (uint64_t)(v1162 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v2134[0] + 24))((uint64_t)v2134, v1162 + 8);
LABEL_675:
  v1166 = (uint64_t)v2133;
  if (!v2133)
  {
LABEL_678:
    v1162[15] = v1166;
    goto LABEL_680;
  }
  if (v2133 != v2132)
  {
    v1166 = (*(uint64_t (**)(void))(*v2133 + 16))();
    goto LABEL_678;
  }
  v1162[15] = (uint64_t)(v1162 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v2132[0] + 24))((uint64_t)v2132, v1162 + 12);
LABEL_680:
  v1162[16] = 2000;
  v1167 = *v1162;
  if ((unint64_t)(v1162[2] - *v1162) > 0x31F)
    goto LABEL_693;
  v1168 = v1162[1];
  v1169 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1162[3] + 16))(v1162[3], 800, 8);
  v1170 = v1168 - v1167;
  v1171 = v1169 + ((v1168 - v1167) & 0xFFFFFFFFFFFFFFF8);
  v1173 = *v1162;
  v1172 = v1162[1];
  v1174 = v1172 - *v1162;
  if (v1172 == *v1162)
  {
    v1176 = v1169 + ((v1168 - v1167) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_691;
  }
  v1175 = v1174 - 8;
  if ((unint64_t)(v1174 - 8) >= 0x58)
  {
    v1176 = v1169 + ((v1168 - v1167) & 0xFFFFFFFFFFFFFFF8);
    if (v1172 - (v1170 & 0xFFFFFFFFFFFFFFF8) - v1169 >= 0x20)
    {
      v1177 = v1170 >> 3;
      v1178 = (v1175 >> 3) + 1;
      v1179 = (_OWORD *)(v1169 + 8 * v1177 - 16);
      v1180 = (__int128 *)(v1172 - 16);
      v1181 = v1178 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1182 = *v1180;
        *(v1179 - 1) = *(v1180 - 1);
        *v1179 = v1182;
        v1179 -= 2;
        v1180 -= 2;
        v1181 -= 4;
      }
      while (v1181);
      v1176 = v1171 - 8 * (v1178 & 0x3FFFFFFFFFFFFFFCLL);
      v1172 -= 8 * (v1178 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1178 == (v1178 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_690;
    }
  }
  else
  {
    v1176 = v1169 + ((v1168 - v1167) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1183 = *(_QWORD *)(v1172 - 8);
    v1172 -= 8;
    *(_QWORD *)(v1176 - 8) = v1183;
    v1176 -= 8;
  }
  while (v1172 != v1173);
LABEL_690:
  v1172 = *v1162;
LABEL_691:
  *v1162 = v1176;
  v1162[1] = v1171;
  v1184 = v1162[2];
  v1162[2] = v1169 + 800;
  if (v1172)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1162[3] + 40))(v1162[3], v1172, v1184 - v1172);
LABEL_693:
  v1185 = v1162[4];
  if ((unint64_t)(v1162[6] - v1185) > 0x31F)
    goto LABEL_706;
  v1186 = v1162[5];
  v1187 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1162[7] + 16))(v1162[7], 800, 8);
  v1188 = v1186 - v1185;
  v1189 = v1187 + ((v1186 - v1185) & 0xFFFFFFFFFFFFFFF8);
  v1191 = v1162[4];
  v1190 = v1162[5];
  v1192 = v1190 - v1191;
  if (v1190 == v1191)
  {
    v1194 = v1187 + ((v1186 - v1185) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_704;
  }
  v1193 = v1192 - 8;
  if ((unint64_t)(v1192 - 8) >= 0x58)
  {
    v1194 = v1187 + ((v1186 - v1185) & 0xFFFFFFFFFFFFFFF8);
    if (v1190 - (v1188 & 0xFFFFFFFFFFFFFFF8) - v1187 >= 0x20)
    {
      v1195 = v1188 >> 3;
      v1196 = (v1193 >> 3) + 1;
      v1197 = (_OWORD *)(v1187 + 8 * v1195 - 16);
      v1198 = (__int128 *)(v1190 - 16);
      v1199 = v1196 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1200 = *v1198;
        *(v1197 - 1) = *(v1198 - 1);
        *v1197 = v1200;
        v1197 -= 2;
        v1198 -= 2;
        v1199 -= 4;
      }
      while (v1199);
      v1194 = v1189 - 8 * (v1196 & 0x3FFFFFFFFFFFFFFCLL);
      v1190 -= 8 * (v1196 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1196 == (v1196 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_703;
    }
  }
  else
  {
    v1194 = v1187 + ((v1186 - v1185) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1201 = *(_QWORD *)(v1190 - 8);
    v1190 -= 8;
    *(_QWORD *)(v1194 - 8) = v1201;
    v1194 -= 8;
  }
  while (v1190 != v1191);
LABEL_703:
  v1190 = v1162[4];
LABEL_704:
  v1162[4] = v1194;
  v1162[5] = v1189;
  v1202 = v1162[6];
  v1162[6] = v1187 + 800;
  if (v1190)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1162[7] + 40))(v1162[7], v1190, v1202 - v1190);
LABEL_706:
  v1203 = *v2065;
  *v2065 = (uint64_t)v1162;
  if (v1203)
  {
    v1204 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1203);
    MEMORY[0x1A1AF4E00](v1204, 0x10A0C40D234DDC7);
  }
  v1205 = v2133;
  if (v2133 == v2132)
  {
    v1206 = 4;
    v1205 = v2132;
  }
  else
  {
    if (!v2133)
      goto LABEL_713;
    v1206 = 5;
  }
  (*(void (**)(void))(*v1205 + 8 * v1206))();
LABEL_713:
  v1207 = v2135;
  if (v2135 == v2134)
  {
    v1208 = 4;
    v1207 = v2134;
    goto LABEL_717;
  }
  if (v2135)
  {
    v1208 = 5;
LABEL_717:
    (*(void (**)(void))(*v1207 + 8 * v1208))();
  }
  v1209 = (uint64_t *)operator new();
  v2130[0] = &off_1E42CAD90;
  v2130[1] = a1;
  v2131 = v2130;
  v2128[0] = &off_1E42D7A18;
  v2129 = v2128;
  v1209[1] = 0;
  v1209[2] = 0;
  *v1209 = 0;
  {
    v1992 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1992, "GeoGL", 0xA3D02C1100000005);
  }
  v1211 = ggl::Allocator::instance(void)::alloc;
  v1209[4] = 0;
  v1209[3] = v1211;
  v1209[5] = 0;
  v1209[6] = 0;
  {
    v1993 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1993, "GeoGL", 0xA3D02C1100000005);
  }
  v1209[7] = ggl::Allocator::instance(void)::alloc;
  v1212 = (uint64_t)v2131;
  if (!v2131)
    goto LABEL_723;
  if (v2131 != v2130)
  {
    v1212 = (*(uint64_t (**)(void))(*v2131 + 16))();
LABEL_723:
    v1209[11] = v1212;
    goto LABEL_725;
  }
  v1209[11] = (uint64_t)(v1209 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v2130[0] + 24))((uint64_t)v2130, v1209 + 8);
LABEL_725:
  v1213 = (uint64_t)v2129;
  if (!v2129)
  {
LABEL_728:
    v1209[15] = v1213;
    goto LABEL_730;
  }
  if (v2129 != v2128)
  {
    v1213 = (*(uint64_t (**)(void))(*v2129 + 16))();
    goto LABEL_728;
  }
  v1209[15] = (uint64_t)(v1209 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v2128[0] + 24))((uint64_t)v2128, v1209 + 12);
LABEL_730:
  v1209[16] = 2000;
  v1214 = *v1209;
  if ((unint64_t)(v1209[2] - *v1209) > 0x31F)
    goto LABEL_743;
  v1215 = v1209[1];
  v1216 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1209[3] + 16))(v1209[3], 800, 8);
  v1217 = v1215 - v1214;
  v1218 = v1216 + ((v1215 - v1214) & 0xFFFFFFFFFFFFFFF8);
  v1220 = *v1209;
  v1219 = v1209[1];
  v1221 = v1219 - *v1209;
  if (v1219 == *v1209)
  {
    v1223 = v1216 + ((v1215 - v1214) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_741;
  }
  v1222 = v1221 - 8;
  if ((unint64_t)(v1221 - 8) >= 0x58)
  {
    v1223 = v1216 + ((v1215 - v1214) & 0xFFFFFFFFFFFFFFF8);
    if (v1219 - (v1217 & 0xFFFFFFFFFFFFFFF8) - v1216 >= 0x20)
    {
      v1224 = v1217 >> 3;
      v1225 = (v1222 >> 3) + 1;
      v1226 = (_OWORD *)(v1216 + 8 * v1224 - 16);
      v1227 = (__int128 *)(v1219 - 16);
      v1228 = v1225 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1229 = *v1227;
        *(v1226 - 1) = *(v1227 - 1);
        *v1226 = v1229;
        v1226 -= 2;
        v1227 -= 2;
        v1228 -= 4;
      }
      while (v1228);
      v1223 = v1218 - 8 * (v1225 & 0x3FFFFFFFFFFFFFFCLL);
      v1219 -= 8 * (v1225 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1225 == (v1225 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_740;
    }
  }
  else
  {
    v1223 = v1216 + ((v1215 - v1214) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1230 = *(_QWORD *)(v1219 - 8);
    v1219 -= 8;
    *(_QWORD *)(v1223 - 8) = v1230;
    v1223 -= 8;
  }
  while (v1219 != v1220);
LABEL_740:
  v1219 = *v1209;
LABEL_741:
  *v1209 = v1223;
  v1209[1] = v1218;
  v1231 = v1209[2];
  v1209[2] = v1216 + 800;
  if (v1219)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1209[3] + 40))(v1209[3], v1219, v1231 - v1219);
LABEL_743:
  v1232 = v1209[4];
  if ((unint64_t)(v1209[6] - v1232) > 0x31F)
    goto LABEL_756;
  v1233 = v1209[5];
  v1234 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1209[7] + 16))(v1209[7], 800, 8);
  v1235 = v1233 - v1232;
  v1236 = v1234 + ((v1233 - v1232) & 0xFFFFFFFFFFFFFFF8);
  v1238 = v1209[4];
  v1237 = v1209[5];
  v1239 = v1237 - v1238;
  if (v1237 == v1238)
  {
    v1241 = v1234 + ((v1233 - v1232) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_754;
  }
  v1240 = v1239 - 8;
  if ((unint64_t)(v1239 - 8) >= 0x58)
  {
    v1241 = v1234 + ((v1233 - v1232) & 0xFFFFFFFFFFFFFFF8);
    if (v1237 - (v1235 & 0xFFFFFFFFFFFFFFF8) - v1234 >= 0x20)
    {
      v1242 = v1235 >> 3;
      v1243 = (v1240 >> 3) + 1;
      v1244 = (_OWORD *)(v1234 + 8 * v1242 - 16);
      v1245 = (__int128 *)(v1237 - 16);
      v1246 = v1243 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1247 = *v1245;
        *(v1244 - 1) = *(v1245 - 1);
        *v1244 = v1247;
        v1244 -= 2;
        v1245 -= 2;
        v1246 -= 4;
      }
      while (v1246);
      v1241 = v1236 - 8 * (v1243 & 0x3FFFFFFFFFFFFFFCLL);
      v1237 -= 8 * (v1243 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1243 == (v1243 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_753;
    }
  }
  else
  {
    v1241 = v1234 + ((v1233 - v1232) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1248 = *(_QWORD *)(v1237 - 8);
    v1237 -= 8;
    *(_QWORD *)(v1241 - 8) = v1248;
    v1241 -= 8;
  }
  while (v1237 != v1238);
LABEL_753:
  v1237 = v1209[4];
LABEL_754:
  v1209[4] = v1241;
  v1209[5] = v1236;
  v1249 = v1209[6];
  v1209[6] = v1234 + 800;
  if (v1237)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1209[7] + 40))(v1209[7], v1237, v1249 - v1237);
LABEL_756:
  v1250 = *v2064;
  *v2064 = (uint64_t)v1209;
  if (v1250)
  {
    v1251 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1250);
    MEMORY[0x1A1AF4E00](v1251, 0x10A0C40D234DDC7);
  }
  v1252 = v2129;
  if (v2129 == v2128)
  {
    v1253 = 4;
    v1252 = v2128;
  }
  else
  {
    if (!v2129)
      goto LABEL_763;
    v1253 = 5;
  }
  (*(void (**)(void))(*v1252 + 8 * v1253))();
LABEL_763:
  v1254 = v2131;
  if (v2131 == v2130)
  {
    v1255 = 4;
    v1254 = v2130;
    goto LABEL_767;
  }
  if (v2131)
  {
    v1255 = 5;
LABEL_767:
    (*(void (**)(void))(*v1254 + 8 * v1255))();
  }
  v1256 = (uint64_t *)operator new();
  v2126[0] = &off_1E42CADD8;
  v2126[1] = a1;
  v2127 = v2126;
  v2124[0] = &off_1E42D7A60;
  v2125 = v2124;
  v1256[1] = 0;
  v1256[2] = 0;
  *v1256 = 0;
  {
    v1994 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1994, "GeoGL", 0xA3D02C1100000005);
  }
  v1258 = ggl::Allocator::instance(void)::alloc;
  v1256[4] = 0;
  v1256[3] = v1258;
  v1256[5] = 0;
  v1256[6] = 0;
  {
    v1995 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1995, "GeoGL", 0xA3D02C1100000005);
  }
  v1256[7] = ggl::Allocator::instance(void)::alloc;
  v1259 = (uint64_t)v2127;
  if (!v2127)
    goto LABEL_773;
  if (v2127 != v2126)
  {
    v1259 = (*(uint64_t (**)(void))(*v2127 + 16))();
LABEL_773:
    v1256[11] = v1259;
    goto LABEL_775;
  }
  v1256[11] = (uint64_t)(v1256 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v2126[0] + 24))((uint64_t)v2126, v1256 + 8);
LABEL_775:
  v1260 = (uint64_t)v2125;
  if (!v2125)
  {
LABEL_778:
    v1256[15] = v1260;
    goto LABEL_780;
  }
  if (v2125 != v2124)
  {
    v1260 = (*(uint64_t (**)(void))(*v2125 + 16))();
    goto LABEL_778;
  }
  v1256[15] = (uint64_t)(v1256 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v2124[0] + 24))((uint64_t)v2124, v1256 + 12);
LABEL_780:
  v1256[16] = 2000;
  v1261 = *v1256;
  if ((unint64_t)(v1256[2] - *v1256) > 0x31F)
    goto LABEL_793;
  v1262 = v1256[1];
  v1263 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1256[3] + 16))(v1256[3], 800, 8);
  v1264 = v1262 - v1261;
  v1265 = v1263 + ((v1262 - v1261) & 0xFFFFFFFFFFFFFFF8);
  v1267 = *v1256;
  v1266 = v1256[1];
  v1268 = v1266 - *v1256;
  if (v1266 == *v1256)
  {
    v1270 = v1263 + ((v1262 - v1261) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_791;
  }
  v1269 = v1268 - 8;
  if ((unint64_t)(v1268 - 8) >= 0x58)
  {
    v1270 = v1263 + ((v1262 - v1261) & 0xFFFFFFFFFFFFFFF8);
    if (v1266 - (v1264 & 0xFFFFFFFFFFFFFFF8) - v1263 >= 0x20)
    {
      v1271 = v1264 >> 3;
      v1272 = (v1269 >> 3) + 1;
      v1273 = (_OWORD *)(v1263 + 8 * v1271 - 16);
      v1274 = (__int128 *)(v1266 - 16);
      v1275 = v1272 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1276 = *v1274;
        *(v1273 - 1) = *(v1274 - 1);
        *v1273 = v1276;
        v1273 -= 2;
        v1274 -= 2;
        v1275 -= 4;
      }
      while (v1275);
      v1270 = v1265 - 8 * (v1272 & 0x3FFFFFFFFFFFFFFCLL);
      v1266 -= 8 * (v1272 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1272 == (v1272 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_790;
    }
  }
  else
  {
    v1270 = v1263 + ((v1262 - v1261) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1277 = *(_QWORD *)(v1266 - 8);
    v1266 -= 8;
    *(_QWORD *)(v1270 - 8) = v1277;
    v1270 -= 8;
  }
  while (v1266 != v1267);
LABEL_790:
  v1266 = *v1256;
LABEL_791:
  *v1256 = v1270;
  v1256[1] = v1265;
  v1278 = v1256[2];
  v1256[2] = v1263 + 800;
  if (v1266)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1256[3] + 40))(v1256[3], v1266, v1278 - v1266);
LABEL_793:
  v1279 = v1256[4];
  if ((unint64_t)(v1256[6] - v1279) > 0x31F)
    goto LABEL_806;
  v1280 = v1256[5];
  v1281 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1256[7] + 16))(v1256[7], 800, 8);
  v1282 = v1280 - v1279;
  v1283 = v1281 + ((v1280 - v1279) & 0xFFFFFFFFFFFFFFF8);
  v1285 = v1256[4];
  v1284 = v1256[5];
  v1286 = v1284 - v1285;
  if (v1284 == v1285)
  {
    v1288 = v1281 + ((v1280 - v1279) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_804;
  }
  v1287 = v1286 - 8;
  if ((unint64_t)(v1286 - 8) >= 0x58)
  {
    v1288 = v1281 + ((v1280 - v1279) & 0xFFFFFFFFFFFFFFF8);
    if (v1284 - (v1282 & 0xFFFFFFFFFFFFFFF8) - v1281 >= 0x20)
    {
      v1289 = v1282 >> 3;
      v1290 = (v1287 >> 3) + 1;
      v1291 = (_OWORD *)(v1281 + 8 * v1289 - 16);
      v1292 = (__int128 *)(v1284 - 16);
      v1293 = v1290 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1294 = *v1292;
        *(v1291 - 1) = *(v1292 - 1);
        *v1291 = v1294;
        v1291 -= 2;
        v1292 -= 2;
        v1293 -= 4;
      }
      while (v1293);
      v1288 = v1283 - 8 * (v1290 & 0x3FFFFFFFFFFFFFFCLL);
      v1284 -= 8 * (v1290 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1290 == (v1290 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_803;
    }
  }
  else
  {
    v1288 = v1281 + ((v1280 - v1279) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1295 = *(_QWORD *)(v1284 - 8);
    v1284 -= 8;
    *(_QWORD *)(v1288 - 8) = v1295;
    v1288 -= 8;
  }
  while (v1284 != v1285);
LABEL_803:
  v1284 = v1256[4];
LABEL_804:
  v1256[4] = v1288;
  v1256[5] = v1283;
  v1296 = v1256[6];
  v1256[6] = v1281 + 800;
  if (v1284)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1256[7] + 40))(v1256[7], v1284, v1296 - v1284);
LABEL_806:
  v1297 = *v2063;
  *v2063 = (uint64_t)v1256;
  if (v1297)
  {
    v1298 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1297);
    MEMORY[0x1A1AF4E00](v1298, 0x10A0C40D234DDC7);
  }
  v1299 = v2125;
  if (v2125 == v2124)
  {
    v1300 = 4;
    v1299 = v2124;
  }
  else
  {
    if (!v2125)
      goto LABEL_813;
    v1300 = 5;
  }
  (*(void (**)(void))(*v1299 + 8 * v1300))();
LABEL_813:
  v1301 = v2127;
  if (v2127 == v2126)
  {
    v1302 = 4;
    v1301 = v2126;
    goto LABEL_817;
  }
  if (v2127)
  {
    v1302 = 5;
LABEL_817:
    (*(void (**)(void))(*v1301 + 8 * v1302))();
  }
  v1303 = (uint64_t *)operator new();
  v2122[0] = &off_1E42CAE20;
  v2122[1] = a1;
  v2123 = v2122;
  v2120[0] = &off_1E42D79D0;
  v2121 = v2120;
  v1303[1] = 0;
  v1303[2] = 0;
  *v1303 = 0;
  {
    v1996 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1996, "GeoGL", 0xA3D02C1100000005);
  }
  v1305 = ggl::Allocator::instance(void)::alloc;
  v1303[4] = 0;
  v1303[3] = v1305;
  v1303[5] = 0;
  v1303[6] = 0;
  {
    v1997 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1997, "GeoGL", 0xA3D02C1100000005);
  }
  v1303[7] = ggl::Allocator::instance(void)::alloc;
  v1306 = (uint64_t)v2123;
  if (!v2123)
    goto LABEL_823;
  if (v2123 != v2122)
  {
    v1306 = (*(uint64_t (**)(void))(*v2123 + 16))();
LABEL_823:
    v1303[11] = v1306;
    goto LABEL_825;
  }
  v1303[11] = (uint64_t)(v1303 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v2122[0] + 24))((uint64_t)v2122, v1303 + 8);
LABEL_825:
  v1307 = (uint64_t)v2121;
  if (!v2121)
  {
LABEL_828:
    v1303[15] = v1307;
    goto LABEL_830;
  }
  if (v2121 != v2120)
  {
    v1307 = (*(uint64_t (**)(void))(*v2121 + 16))();
    goto LABEL_828;
  }
  v1303[15] = (uint64_t)(v1303 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v2120[0] + 24))((uint64_t)v2120, v1303 + 12);
LABEL_830:
  v1303[16] = 2000;
  v1308 = *v1303;
  if ((unint64_t)(v1303[2] - *v1303) > 0x31F)
    goto LABEL_843;
  v1309 = v1303[1];
  v1310 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1303[3] + 16))(v1303[3], 800, 8);
  v1311 = v1309 - v1308;
  v1312 = v1310 + ((v1309 - v1308) & 0xFFFFFFFFFFFFFFF8);
  v1314 = *v1303;
  v1313 = v1303[1];
  v1315 = v1313 - *v1303;
  if (v1313 == *v1303)
  {
    v1317 = v1310 + ((v1309 - v1308) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_841;
  }
  v1316 = v1315 - 8;
  if ((unint64_t)(v1315 - 8) >= 0x58)
  {
    v1317 = v1310 + ((v1309 - v1308) & 0xFFFFFFFFFFFFFFF8);
    if (v1313 - (v1311 & 0xFFFFFFFFFFFFFFF8) - v1310 >= 0x20)
    {
      v1318 = v1311 >> 3;
      v1319 = (v1316 >> 3) + 1;
      v1320 = (_OWORD *)(v1310 + 8 * v1318 - 16);
      v1321 = (__int128 *)(v1313 - 16);
      v1322 = v1319 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1323 = *v1321;
        *(v1320 - 1) = *(v1321 - 1);
        *v1320 = v1323;
        v1320 -= 2;
        v1321 -= 2;
        v1322 -= 4;
      }
      while (v1322);
      v1317 = v1312 - 8 * (v1319 & 0x3FFFFFFFFFFFFFFCLL);
      v1313 -= 8 * (v1319 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1319 == (v1319 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_840;
    }
  }
  else
  {
    v1317 = v1310 + ((v1309 - v1308) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1324 = *(_QWORD *)(v1313 - 8);
    v1313 -= 8;
    *(_QWORD *)(v1317 - 8) = v1324;
    v1317 -= 8;
  }
  while (v1313 != v1314);
LABEL_840:
  v1313 = *v1303;
LABEL_841:
  *v1303 = v1317;
  v1303[1] = v1312;
  v1325 = v1303[2];
  v1303[2] = v1310 + 800;
  if (v1313)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1303[3] + 40))(v1303[3], v1313, v1325 - v1313);
LABEL_843:
  v1326 = v1303[4];
  if ((unint64_t)(v1303[6] - v1326) > 0x31F)
    goto LABEL_856;
  v1327 = v1303[5];
  v1328 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1303[7] + 16))(v1303[7], 800, 8);
  v1329 = v1327 - v1326;
  v1330 = v1328 + ((v1327 - v1326) & 0xFFFFFFFFFFFFFFF8);
  v1332 = v1303[4];
  v1331 = v1303[5];
  v1333 = v1331 - v1332;
  if (v1331 == v1332)
  {
    v1335 = v1328 + ((v1327 - v1326) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_854;
  }
  v1334 = v1333 - 8;
  if ((unint64_t)(v1333 - 8) >= 0x58)
  {
    v1335 = v1328 + ((v1327 - v1326) & 0xFFFFFFFFFFFFFFF8);
    if (v1331 - (v1329 & 0xFFFFFFFFFFFFFFF8) - v1328 >= 0x20)
    {
      v1336 = v1329 >> 3;
      v1337 = (v1334 >> 3) + 1;
      v1338 = (_OWORD *)(v1328 + 8 * v1336 - 16);
      v1339 = (__int128 *)(v1331 - 16);
      v1340 = v1337 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1341 = *v1339;
        *(v1338 - 1) = *(v1339 - 1);
        *v1338 = v1341;
        v1338 -= 2;
        v1339 -= 2;
        v1340 -= 4;
      }
      while (v1340);
      v1335 = v1330 - 8 * (v1337 & 0x3FFFFFFFFFFFFFFCLL);
      v1331 -= 8 * (v1337 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1337 == (v1337 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_853;
    }
  }
  else
  {
    v1335 = v1328 + ((v1327 - v1326) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1342 = *(_QWORD *)(v1331 - 8);
    v1331 -= 8;
    *(_QWORD *)(v1335 - 8) = v1342;
    v1335 -= 8;
  }
  while (v1331 != v1332);
LABEL_853:
  v1331 = v1303[4];
LABEL_854:
  v1303[4] = v1335;
  v1303[5] = v1330;
  v1343 = v1303[6];
  v1303[6] = v1328 + 800;
  if (v1331)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1303[7] + 40))(v1303[7], v1331, v1343 - v1331);
LABEL_856:
  v1344 = *v2062;
  *v2062 = (uint64_t)v1303;
  if (v1344)
  {
    v1345 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1344);
    MEMORY[0x1A1AF4E00](v1345, 0x10A0C40D234DDC7);
  }
  v1346 = v2121;
  if (v2121 == v2120)
  {
    v1347 = 4;
    v1346 = v2120;
  }
  else
  {
    if (!v2121)
      goto LABEL_863;
    v1347 = 5;
  }
  (*(void (**)(void))(*v1346 + 8 * v1347))();
LABEL_863:
  v1348 = v2123;
  if (v2123 == v2122)
  {
    v1349 = 4;
    v1348 = v2122;
  }
  else
  {
    if (!v2123)
      goto LABEL_868;
    v1349 = 5;
  }
  (*(void (**)(void))(*v1348 + 8 * v1349))();
LABEL_868:
  v1350 = (unint64_t *)operator new();
  v2118[0] = &off_1E42CAE68;
  v2118[1] = a1;
  v2119 = v2118;
  v2116[0] = &off_1E42D6D28;
  v2117 = v2116;
  ggl::FragmentedPool<ggl::GlyphWithNormalHalo::DefaultPipelineSetup>::FragmentedPool(v1350, (uint64_t)v2118, (uint64_t)v2116);
  v1351 = *v2061;
  *v2061 = (uint64_t)v1350;
  if (v1351)
  {
    v1352 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1351);
    MEMORY[0x1A1AF4E00](v1352, 0x10A0C40D234DDC7);
  }
  v1353 = v2117;
  if (v2117 == v2116)
  {
    v1354 = 4;
    v1353 = v2116;
  }
  else
  {
    if (!v2117)
      goto LABEL_875;
    v1354 = 5;
  }
  (*(void (**)(void))(*v1353 + 8 * v1354))();
LABEL_875:
  v1355 = v2119;
  if (v2119 == v2118)
  {
    v1356 = 4;
    v1355 = v2118;
  }
  else
  {
    if (!v2119)
      goto LABEL_880;
    v1356 = 5;
  }
  (*(void (**)(void))(*v1355 + 8 * v1356))();
LABEL_880:
  v1357 = (unint64_t *)operator new();
  v2114[0] = &off_1E42CAEB0;
  v2114[1] = a1;
  v2115 = v2114;
  v2112[0] = &off_1E42D6D28;
  v2113 = v2112;
  ggl::FragmentedPool<ggl::GlyphWithNormalHalo::DefaultPipelineSetup>::FragmentedPool(v1357, (uint64_t)v2114, (uint64_t)v2112);
  v1358 = *v2060;
  *v2060 = (uint64_t)v1357;
  if (v1358)
  {
    v1359 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1358);
    MEMORY[0x1A1AF4E00](v1359, 0x10A0C40D234DDC7);
  }
  v1360 = v2113;
  if (v2113 == v2112)
  {
    v1361 = 4;
    v1360 = v2112;
  }
  else
  {
    if (!v2113)
      goto LABEL_887;
    v1361 = 5;
  }
  (*(void (**)(void))(*v1360 + 8 * v1361))();
LABEL_887:
  v1362 = v2115;
  if (v2115 == v2114)
  {
    v1363 = 4;
    v1362 = v2114;
    goto LABEL_891;
  }
  if (v2115)
  {
    v1363 = 5;
LABEL_891:
    (*(void (**)(void))(*v1362 + 8 * v1363))();
  }
  v1364 = (uint64_t *)operator new();
  v2110[0] = &off_1E42CAEF8;
  v2110[1] = a1;
  v2111 = v2110;
  v2108[0] = &off_1E42D70D0;
  v2109 = v2108;
  v1364[1] = 0;
  v1364[2] = 0;
  *v1364 = 0;
  {
    v1998 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1998, "GeoGL", 0xA3D02C1100000005);
  }
  v1366 = ggl::Allocator::instance(void)::alloc;
  v1364[4] = 0;
  v1364[3] = v1366;
  v1364[5] = 0;
  v1364[6] = 0;
  {
    v1999 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1999, "GeoGL", 0xA3D02C1100000005);
  }
  v1364[7] = ggl::Allocator::instance(void)::alloc;
  v1367 = (uint64_t)v2111;
  if (!v2111)
    goto LABEL_897;
  if (v2111 != v2110)
  {
    v1367 = (*(uint64_t (**)(void))(*v2111 + 16))();
LABEL_897:
    v1364[11] = v1367;
    goto LABEL_899;
  }
  v1364[11] = (uint64_t)(v1364 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v2110[0] + 24))((uint64_t)v2110, v1364 + 8);
LABEL_899:
  v1368 = (uint64_t)v2109;
  if (!v2109)
  {
LABEL_902:
    v1364[15] = v1368;
    goto LABEL_904;
  }
  if (v2109 != v2108)
  {
    v1368 = (*(uint64_t (**)(void))(*v2109 + 16))();
    goto LABEL_902;
  }
  v1364[15] = (uint64_t)(v1364 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v2108[0] + 24))((uint64_t)v2108, v1364 + 12);
LABEL_904:
  v1364[16] = 2000;
  v1369 = *v1364;
  if ((unint64_t)(v1364[2] - *v1364) > 0x31F)
    goto LABEL_917;
  v1370 = v1364[1];
  v1371 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1364[3] + 16))(v1364[3], 800, 8);
  v1372 = v1370 - v1369;
  v1373 = v1371 + ((v1370 - v1369) & 0xFFFFFFFFFFFFFFF8);
  v1375 = *v1364;
  v1374 = v1364[1];
  v1376 = v1374 - *v1364;
  if (v1374 == *v1364)
  {
    v1378 = v1371 + ((v1370 - v1369) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_915;
  }
  v1377 = v1376 - 8;
  if ((unint64_t)(v1376 - 8) >= 0x58)
  {
    v1378 = v1371 + ((v1370 - v1369) & 0xFFFFFFFFFFFFFFF8);
    if (v1374 - (v1372 & 0xFFFFFFFFFFFFFFF8) - v1371 >= 0x20)
    {
      v1379 = v1372 >> 3;
      v1380 = (v1377 >> 3) + 1;
      v1381 = (_OWORD *)(v1371 + 8 * v1379 - 16);
      v1382 = (__int128 *)(v1374 - 16);
      v1383 = v1380 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1384 = *v1382;
        *(v1381 - 1) = *(v1382 - 1);
        *v1381 = v1384;
        v1381 -= 2;
        v1382 -= 2;
        v1383 -= 4;
      }
      while (v1383);
      v1378 = v1373 - 8 * (v1380 & 0x3FFFFFFFFFFFFFFCLL);
      v1374 -= 8 * (v1380 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1380 == (v1380 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_914;
    }
  }
  else
  {
    v1378 = v1371 + ((v1370 - v1369) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1385 = *(_QWORD *)(v1374 - 8);
    v1374 -= 8;
    *(_QWORD *)(v1378 - 8) = v1385;
    v1378 -= 8;
  }
  while (v1374 != v1375);
LABEL_914:
  v1374 = *v1364;
LABEL_915:
  *v1364 = v1378;
  v1364[1] = v1373;
  v1386 = v1364[2];
  v1364[2] = v1371 + 800;
  if (v1374)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1364[3] + 40))(v1364[3], v1374, v1386 - v1374);
LABEL_917:
  v1387 = v1364[4];
  if ((unint64_t)(v1364[6] - v1387) > 0x31F)
    goto LABEL_930;
  v1388 = v1364[5];
  v1389 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1364[7] + 16))(v1364[7], 800, 8);
  v1390 = v1388 - v1387;
  v1391 = v1389 + ((v1388 - v1387) & 0xFFFFFFFFFFFFFFF8);
  v1393 = v1364[4];
  v1392 = v1364[5];
  v1394 = v1392 - v1393;
  if (v1392 == v1393)
  {
    v1396 = v1389 + ((v1388 - v1387) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_928;
  }
  v1395 = v1394 - 8;
  if ((unint64_t)(v1394 - 8) >= 0x58)
  {
    v1396 = v1389 + ((v1388 - v1387) & 0xFFFFFFFFFFFFFFF8);
    if (v1392 - (v1390 & 0xFFFFFFFFFFFFFFF8) - v1389 >= 0x20)
    {
      v1397 = v1390 >> 3;
      v1398 = (v1395 >> 3) + 1;
      v1399 = (_OWORD *)(v1389 + 8 * v1397 - 16);
      v1400 = (__int128 *)(v1392 - 16);
      v1401 = v1398 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1402 = *v1400;
        *(v1399 - 1) = *(v1400 - 1);
        *v1399 = v1402;
        v1399 -= 2;
        v1400 -= 2;
        v1401 -= 4;
      }
      while (v1401);
      v1396 = v1391 - 8 * (v1398 & 0x3FFFFFFFFFFFFFFCLL);
      v1392 -= 8 * (v1398 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1398 == (v1398 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_927;
    }
  }
  else
  {
    v1396 = v1389 + ((v1388 - v1387) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1403 = *(_QWORD *)(v1392 - 8);
    v1392 -= 8;
    *(_QWORD *)(v1396 - 8) = v1403;
    v1396 -= 8;
  }
  while (v1392 != v1393);
LABEL_927:
  v1392 = v1364[4];
LABEL_928:
  v1364[4] = v1396;
  v1364[5] = v1391;
  v1404 = v1364[6];
  v1364[6] = v1389 + 800;
  if (v1392)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1364[7] + 40))(v1364[7], v1392, v1404 - v1392);
LABEL_930:
  v1405 = *v2059;
  *v2059 = (uint64_t)v1364;
  if (v1405)
  {
    v1406 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1405);
    MEMORY[0x1A1AF4E00](v1406, 0x10A0C40D234DDC7);
  }
  v1407 = v2109;
  if (v2109 == v2108)
  {
    v1408 = 4;
    v1407 = v2108;
  }
  else
  {
    if (!v2109)
      goto LABEL_937;
    v1408 = 5;
  }
  (*(void (**)(void))(*v1407 + 8 * v1408))();
LABEL_937:
  v1409 = v2111;
  if (v2111 == v2110)
  {
    v1410 = 4;
    v1409 = v2110;
    goto LABEL_941;
  }
  if (v2111)
  {
    v1410 = 5;
LABEL_941:
    (*(void (**)(void))(*v1409 + 8 * v1410))();
  }
  v1411 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v1411->__shared_owners_ = 0;
  v1412 = (unint64_t *)&v1411->__shared_owners_;
  v1411->__shared_weak_owners_ = 0;
  v1411->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0410;
  v1411[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
  v1411[1].__shared_owners_ = 40;
  LODWORD(v1411[1].__shared_weak_owners_) = 65542;
  v1413 = (std::__shared_count)0;
  v1411[2].std::__shared_count = 0uLL;
  *(_OWORD *)&v1411[2].__shared_weak_owners_ = 0uLL;
  *(_OWORD *)&v1411[3].__shared_owners_ = 0uLL;
  v1411[4].std::__shared_count = 0uLL;
  v1411[4].__shared_weak_owners_ = 0;
  if ((v1414 & 1) == 0)
  {
    v1413 = (std::__shared_count)0;
    if (v2000)
    {
      v2001 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v2001, "GeoGL", 0xA3D02C1100000005);
      v1413 = (std::__shared_count)0;
    }
  }
  v1411[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
  v1411[5].__shared_owners_ = 0;
  *((std::__shared_count *)v1411 + 11) = v1413;
  v1411[8].std::__shared_count = v1413;
  v1411[8].__shared_weak_owners_ = 0;
  v1411[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
  *((std::__shared_count *)v1411 + 10) = v1413;
  v1411[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
  LODWORD(v1411[5].__shared_weak_owners_) = 0;
  v1411[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B80E0;
  v1411[9].__shared_weak_owners_ = (uint64_t)"LabelGlyphMesh";
  v1411[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::Glyph::defaultVboReflection;
  v1411[9].__shared_owners_ = (uint64_t)&unk_1E42B8100;
  v1415 = *(_QWORD **)v2078;
  do
    v1416 = __ldxr(v1412);
  while (__stxr(v1416 + 1, v1412));
  v1417 = (std::__shared_weak_count *)v1415[1];
  *v1415 = v1411 + 1;
  v1415[1] = v1411;
  if (v1417)
  {
    v1418 = (unint64_t *)&v1417->__shared_owners_;
    do
      v1419 = __ldaxr(v1418);
    while (__stlxr(v1419 - 1, v1418));
    if (!v1419)
    {
      ((void (*)(std::__shared_weak_count *))v1417->__on_zero_shared)(v1417);
      std::__shared_weak_count::__release_weak(v1417);
    }
  }
  do
    v1420 = __ldaxr(v1412);
  while (__stlxr(v1420 - 1, v1412));
  if (!v1420)
  {
    ((void (*)(std::__shared_weak_count *))v1411->__on_zero_shared)(v1411);
    std::__shared_weak_count::__release_weak(v1411);
  }
  v1421 = *(_QWORD *)(a1 + 456);
  v1422 = *(std::__shared_weak_count **)(a1 + 464);
  if (v1422)
  {
    v1423 = (unint64_t *)&v1422->__shared_owners_;
    do
      v1424 = __ldxr(v1423);
    while (__stxr(v1424 + 1, v1423));
    do
      v1425 = __ldxr(v1423);
    while (__stxr(v1425 + 1, v1423));
  }
  *(_QWORD *)(a1 + 1120) = v1421;
  v1426 = *(std::__shared_weak_count **)(a1 + 1128);
  *(_QWORD *)(a1 + 1128) = v1422;
  if (v1426)
  {
    v1427 = (unint64_t *)&v1426->__shared_owners_;
    do
      v1428 = __ldaxr(v1427);
    while (__stlxr(v1428 - 1, v1427));
    if (!v1428)
    {
      ((void (*)(std::__shared_weak_count *))v1426->__on_zero_shared)(v1426);
      std::__shared_weak_count::__release_weak(v1426);
    }
  }
  if (v1422)
  {
    v1429 = (unint64_t *)&v1422->__shared_owners_;
    do
      v1430 = __ldaxr(v1429);
    while (__stlxr(v1430 - 1, v1429));
    if (!v1430)
    {
      ((void (*)(std::__shared_weak_count *))v1422->__on_zero_shared)(v1422);
      std::__shared_weak_count::__release_weak(v1422);
    }
  }
  v1431 = *(_QWORD *)(a3 + 80);
  v1432 = *(std::__shared_weak_count **)(v1431 + 1184);
  v1433 = *(std::__shared_weak_count **)(v1431 + 1192);
  v2086 = v1432;
  v2087 = v1433;
  if (v1433)
  {
    v1434 = (unint64_t *)&v1433->__shared_owners_;
    do
      v1435 = __ldxr(v1434);
    while (__stxr(v1435 + 1, v1434));
  }
  *(_QWORD *)&v2081 = 0;
  *(_QWORD *)&v2080[24] = 0;
  DWORD2(v2081) = 0;
  v2080[0] = 1;
  *(_OWORD *)&v2080[4] = xmmword_19FFB35D0;
  *(_DWORD *)&v2080[20] = 7;
  BYTE12(v2081) = 15;
  v1436 = operator new(0x198uLL);
  v1436[1] = 0;
  v1436[2] = 0;
  *v1436 = &off_1E42E4348;
  v1437 = a4[1];
  v2090 = *a4;
  v2091 = v1437;
  *(_QWORD *)(a1 + 1168) = ggl::Icon::IconPipelineState::IconPipelineState((uint64_t)(v1436 + 3), &v2086, (uint64_t)v2080, &v2090, 0, 0, 0, 0, 0, 0);
  v1438 = *(std::__shared_weak_count **)(a1 + 1176);
  *(_QWORD *)(a1 + 1176) = v1436;
  if (v1438)
  {
    v1439 = (unint64_t *)&v1438->__shared_owners_;
    do
      v1440 = __ldaxr(v1439);
    while (__stlxr(v1440 - 1, v1439));
    if (!v1440)
    {
      ((void (*)(std::__shared_weak_count *))v1438->__on_zero_shared)(v1438);
      std::__shared_weak_count::__release_weak(v1438);
    }
  }
  v1441 = v2087;
  if (v2087)
  {
    v1442 = (unint64_t *)&v2087->__shared_owners_;
    do
      v1443 = __ldaxr(v1442);
    while (__stlxr(v1443 - 1, v1442));
    if (!v1443)
    {
      ((void (*)(std::__shared_weak_count *))v1441->__on_zero_shared)(v1441);
      std::__shared_weak_count::__release_weak(v1441);
    }
  }
  v1444 = (uint64_t *)operator new();
  v2106[0] = &off_1E42CAF40;
  v2106[1] = a1;
  v2107 = v2106;
  v2104[0] = &off_1E42D7430;
  v2105 = v2104;
  v1444[1] = 0;
  v1444[2] = 0;
  *v1444 = 0;
  {
    v2002 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v2002, "GeoGL", 0xA3D02C1100000005);
  }
  v1446 = ggl::Allocator::instance(void)::alloc;
  v1444[4] = 0;
  v1444[3] = v1446;
  v1444[5] = 0;
  v1444[6] = 0;
  {
    v2003 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v2003, "GeoGL", 0xA3D02C1100000005);
  }
  v1444[7] = ggl::Allocator::instance(void)::alloc;
  v1447 = (uint64_t)v2107;
  if (!v2107)
    goto LABEL_985;
  if (v2107 != v2106)
  {
    v1447 = (*(uint64_t (**)(void))(*v2107 + 16))();
LABEL_985:
    v1444[11] = v1447;
    goto LABEL_987;
  }
  v1444[11] = (uint64_t)(v1444 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v2106[0] + 24))((uint64_t)v2106, v1444 + 8);
LABEL_987:
  v1448 = (uint64_t)v2105;
  if (!v2105)
  {
LABEL_990:
    v1444[15] = v1448;
    goto LABEL_992;
  }
  if (v2105 != v2104)
  {
    v1448 = (*(uint64_t (**)(void))(*v2105 + 16))();
    goto LABEL_990;
  }
  v1444[15] = (uint64_t)(v1444 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v2104[0] + 24))((uint64_t)v2104, v1444 + 12);
LABEL_992:
  v1444[16] = 2000;
  v1449 = *v1444;
  if ((unint64_t)(v1444[2] - *v1444) > 0x31F)
    goto LABEL_1005;
  v1450 = v1444[1];
  v1451 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1444[3] + 16))(v1444[3], 800, 8);
  v1452 = v1450 - v1449;
  v1453 = v1451 + ((v1450 - v1449) & 0xFFFFFFFFFFFFFFF8);
  v1455 = *v1444;
  v1454 = v1444[1];
  v1456 = v1454 - *v1444;
  if (v1454 == *v1444)
  {
    v1458 = v1451 + ((v1450 - v1449) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1003;
  }
  v1457 = v1456 - 8;
  if ((unint64_t)(v1456 - 8) >= 0x58)
  {
    v1458 = v1451 + ((v1450 - v1449) & 0xFFFFFFFFFFFFFFF8);
    if (v1454 - (v1452 & 0xFFFFFFFFFFFFFFF8) - v1451 >= 0x20)
    {
      v1459 = v1452 >> 3;
      v1460 = (v1457 >> 3) + 1;
      v1461 = (_OWORD *)(v1451 + 8 * v1459 - 16);
      v1462 = (__int128 *)(v1454 - 16);
      v1463 = v1460 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1464 = *v1462;
        *(v1461 - 1) = *(v1462 - 1);
        *v1461 = v1464;
        v1461 -= 2;
        v1462 -= 2;
        v1463 -= 4;
      }
      while (v1463);
      v1458 = v1453 - 8 * (v1460 & 0x3FFFFFFFFFFFFFFCLL);
      v1454 -= 8 * (v1460 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1460 == (v1460 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1002;
    }
  }
  else
  {
    v1458 = v1451 + ((v1450 - v1449) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1465 = *(_QWORD *)(v1454 - 8);
    v1454 -= 8;
    *(_QWORD *)(v1458 - 8) = v1465;
    v1458 -= 8;
  }
  while (v1454 != v1455);
LABEL_1002:
  v1454 = *v1444;
LABEL_1003:
  *v1444 = v1458;
  v1444[1] = v1453;
  v1466 = v1444[2];
  v1444[2] = v1451 + 800;
  if (v1454)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1444[3] + 40))(v1444[3], v1454, v1466 - v1454);
LABEL_1005:
  v1467 = v1444[4];
  if ((unint64_t)(v1444[6] - v1467) > 0x31F)
    goto LABEL_1018;
  v1468 = v1444[5];
  v1469 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1444[7] + 16))(v1444[7], 800, 8);
  v1470 = v1468 - v1467;
  v1471 = v1469 + ((v1468 - v1467) & 0xFFFFFFFFFFFFFFF8);
  v1473 = v1444[4];
  v1472 = v1444[5];
  v1474 = v1472 - v1473;
  if (v1472 == v1473)
  {
    v1476 = v1469 + ((v1468 - v1467) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1016;
  }
  v1475 = v1474 - 8;
  if ((unint64_t)(v1474 - 8) >= 0x58)
  {
    v1476 = v1469 + ((v1468 - v1467) & 0xFFFFFFFFFFFFFFF8);
    if (v1472 - (v1470 & 0xFFFFFFFFFFFFFFF8) - v1469 >= 0x20)
    {
      v1477 = v1470 >> 3;
      v1478 = (v1475 >> 3) + 1;
      v1479 = (_OWORD *)(v1469 + 8 * v1477 - 16);
      v1480 = (__int128 *)(v1472 - 16);
      v1481 = v1478 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1482 = *v1480;
        *(v1479 - 1) = *(v1480 - 1);
        *v1479 = v1482;
        v1479 -= 2;
        v1480 -= 2;
        v1481 -= 4;
      }
      while (v1481);
      v1476 = v1471 - 8 * (v1478 & 0x3FFFFFFFFFFFFFFCLL);
      v1472 -= 8 * (v1478 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1478 == (v1478 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1015;
    }
  }
  else
  {
    v1476 = v1469 + ((v1468 - v1467) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1483 = *(_QWORD *)(v1472 - 8);
    v1472 -= 8;
    *(_QWORD *)(v1476 - 8) = v1483;
    v1476 -= 8;
  }
  while (v1472 != v1473);
LABEL_1015:
  v1472 = v1444[4];
LABEL_1016:
  v1444[4] = v1476;
  v1444[5] = v1471;
  v1484 = v1444[6];
  v1444[6] = v1469 + 800;
  if (v1472)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1444[7] + 40))(v1444[7], v1472, v1484 - v1472);
LABEL_1018:
  v1485 = *v2058;
  *v2058 = (uint64_t)v1444;
  if (v1485)
  {
    v1486 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1485);
    MEMORY[0x1A1AF4E00](v1486, 0x10A0C40D234DDC7);
  }
  v1487 = v2105;
  if (v2105 == v2104)
  {
    v1488 = 4;
    v1487 = v2104;
  }
  else
  {
    if (!v2105)
      goto LABEL_1025;
    v1488 = 5;
  }
  (*(void (**)(void))(*v1487 + 8 * v1488))();
LABEL_1025:
  v1489 = v2107;
  if (v2107 == v2106)
  {
    v1490 = 4;
    v1489 = v2106;
  }
  else
  {
    if (!v2107)
      goto LABEL_1030;
    v1490 = 5;
  }
  (*(void (**)(void))(*v1489 + 8 * v1490))();
LABEL_1030:
  v1491 = *(_QWORD *)(a3 + 80);
  v1492 = *(std::__shared_weak_count **)(v1491 + 1256);
  v1493 = *(std::__shared_weak_count **)(v1491 + 1264);
  v2086 = v1492;
  v2087 = v1493;
  if (v1493)
  {
    v1494 = (unint64_t *)&v1493->__shared_owners_;
    do
      v1495 = __ldxr(v1494);
    while (__stxr(v1495 + 1, v1494));
  }
  *(_QWORD *)&v2081 = 0;
  *(_QWORD *)&v2080[24] = 0;
  DWORD2(v2081) = 0;
  v2080[0] = 1;
  *(_OWORD *)&v2080[4] = xmmword_19FFB35D0;
  *(_DWORD *)&v2080[20] = 7;
  BYTE12(v2081) = 15;
  v1496 = operator new(0x198uLL);
  v1496[1] = 0;
  v1496[2] = 0;
  *v1496 = &off_1E428A258;
  v1497 = a4[1];
  v2090 = *a4;
  v2091 = v1497;
  *(_QWORD *)(a1 + 1184) = ggl::Icon::ShadowPipelineState::ShadowPipelineState((uint64_t)(v1496 + 3), &v2086, (uint64_t)v2080, &v2090, 0, 0, 0, 0, 0, 0);
  v1498 = *(std::__shared_weak_count **)(a1 + 1192);
  *(_QWORD *)(a1 + 1192) = v1496;
  if (v1498)
  {
    v1499 = (unint64_t *)&v1498->__shared_owners_;
    do
      v1500 = __ldaxr(v1499);
    while (__stlxr(v1500 - 1, v1499));
    if (!v1500)
    {
      ((void (*)(std::__shared_weak_count *))v1498->__on_zero_shared)(v1498);
      std::__shared_weak_count::__release_weak(v1498);
    }
  }
  v1501 = v2087;
  if (v2087)
  {
    v1502 = (unint64_t *)&v2087->__shared_owners_;
    do
      v1503 = __ldaxr(v1502);
    while (__stlxr(v1503 - 1, v1502));
    if (!v1503)
    {
      ((void (*)(std::__shared_weak_count *))v1501->__on_zero_shared)(v1501);
      std::__shared_weak_count::__release_weak(v1501);
    }
  }
  v1504 = (uint64_t *)operator new();
  v2102[0] = &off_1E4279918;
  v2102[1] = a1;
  v2103 = v2102;
  v2100[0] = &off_1E427D428;
  v2101 = v2100;
  v1504[1] = 0;
  v1504[2] = 0;
  *v1504 = 0;
  {
    v2004 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v2004, "GeoGL", 0xA3D02C1100000005);
  }
  v1506 = ggl::Allocator::instance(void)::alloc;
  v1504[4] = 0;
  v1504[3] = v1506;
  v1504[5] = 0;
  v1504[6] = 0;
  {
    v2005 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v2005, "GeoGL", 0xA3D02C1100000005);
  }
  v1504[7] = ggl::Allocator::instance(void)::alloc;
  v1507 = (uint64_t)v2103;
  if (!v2103)
    goto LABEL_1048;
  if (v2103 != v2102)
  {
    v1507 = (*(uint64_t (**)(void))(*v2103 + 16))();
LABEL_1048:
    v1504[11] = v1507;
    goto LABEL_1050;
  }
  v1504[11] = (uint64_t)(v1504 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v2102[0] + 24))((uint64_t)v2102, v1504 + 8);
LABEL_1050:
  v1508 = (uint64_t)v2101;
  if (!v2101)
  {
LABEL_1053:
    v1504[15] = v1508;
    goto LABEL_1055;
  }
  if (v2101 != v2100)
  {
    v1508 = (*(uint64_t (**)(void))(*v2101 + 16))();
    goto LABEL_1053;
  }
  v1504[15] = (uint64_t)(v1504 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v2100[0] + 24))((uint64_t)v2100, v1504 + 12);
LABEL_1055:
  v1504[16] = 2000;
  v1509 = *v1504;
  if ((unint64_t)(v1504[2] - *v1504) > 0x31F)
    goto LABEL_1068;
  v1510 = v1504[1];
  v1511 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1504[3] + 16))(v1504[3], 800, 8);
  v1512 = v1510 - v1509;
  v1513 = v1511 + ((v1510 - v1509) & 0xFFFFFFFFFFFFFFF8);
  v1515 = *v1504;
  v1514 = v1504[1];
  v1516 = v1514 - *v1504;
  if (v1514 == *v1504)
  {
    v1518 = v1511 + ((v1510 - v1509) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1066;
  }
  v1517 = v1516 - 8;
  if ((unint64_t)(v1516 - 8) >= 0x58)
  {
    v1518 = v1511 + ((v1510 - v1509) & 0xFFFFFFFFFFFFFFF8);
    if (v1514 - (v1512 & 0xFFFFFFFFFFFFFFF8) - v1511 >= 0x20)
    {
      v1519 = v1512 >> 3;
      v1520 = (v1517 >> 3) + 1;
      v1521 = (_OWORD *)(v1511 + 8 * v1519 - 16);
      v1522 = (__int128 *)(v1514 - 16);
      v1523 = v1520 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1524 = *v1522;
        *(v1521 - 1) = *(v1522 - 1);
        *v1521 = v1524;
        v1521 -= 2;
        v1522 -= 2;
        v1523 -= 4;
      }
      while (v1523);
      v1518 = v1513 - 8 * (v1520 & 0x3FFFFFFFFFFFFFFCLL);
      v1514 -= 8 * (v1520 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1520 == (v1520 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1065;
    }
  }
  else
  {
    v1518 = v1511 + ((v1510 - v1509) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1525 = *(_QWORD *)(v1514 - 8);
    v1514 -= 8;
    *(_QWORD *)(v1518 - 8) = v1525;
    v1518 -= 8;
  }
  while (v1514 != v1515);
LABEL_1065:
  v1514 = *v1504;
LABEL_1066:
  *v1504 = v1518;
  v1504[1] = v1513;
  v1526 = v1504[2];
  v1504[2] = v1511 + 800;
  if (v1514)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1504[3] + 40))(v1504[3], v1514, v1526 - v1514);
LABEL_1068:
  v1527 = v1504[4];
  if ((unint64_t)(v1504[6] - v1527) > 0x31F)
    goto LABEL_1081;
  v1528 = v1504[5];
  v1529 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1504[7] + 16))(v1504[7], 800, 8);
  v1530 = v1528 - v1527;
  v1531 = v1529 + ((v1528 - v1527) & 0xFFFFFFFFFFFFFFF8);
  v1533 = v1504[4];
  v1532 = v1504[5];
  v1534 = v1532 - v1533;
  if (v1532 == v1533)
  {
    v1536 = v1529 + ((v1528 - v1527) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1079;
  }
  v1535 = v1534 - 8;
  if ((unint64_t)(v1534 - 8) >= 0x58)
  {
    v1536 = v1529 + ((v1528 - v1527) & 0xFFFFFFFFFFFFFFF8);
    if (v1532 - (v1530 & 0xFFFFFFFFFFFFFFF8) - v1529 >= 0x20)
    {
      v1537 = v1530 >> 3;
      v1538 = (v1535 >> 3) + 1;
      v1539 = (_OWORD *)(v1529 + 8 * v1537 - 16);
      v1540 = (__int128 *)(v1532 - 16);
      v1541 = v1538 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1542 = *v1540;
        *(v1539 - 1) = *(v1540 - 1);
        *v1539 = v1542;
        v1539 -= 2;
        v1540 -= 2;
        v1541 -= 4;
      }
      while (v1541);
      v1536 = v1531 - 8 * (v1538 & 0x3FFFFFFFFFFFFFFCLL);
      v1532 -= 8 * (v1538 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1538 == (v1538 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1078;
    }
  }
  else
  {
    v1536 = v1529 + ((v1528 - v1527) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1543 = *(_QWORD *)(v1532 - 8);
    v1532 -= 8;
    *(_QWORD *)(v1536 - 8) = v1543;
    v1536 -= 8;
  }
  while (v1532 != v1533);
LABEL_1078:
  v1532 = v1504[4];
LABEL_1079:
  v1504[4] = v1536;
  v1504[5] = v1531;
  v1544 = v1504[6];
  v1504[6] = v1529 + 800;
  if (v1532)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1504[7] + 40))(v1504[7], v1532, v1544 - v1532);
LABEL_1081:
  v1545 = *v2057;
  *v2057 = (uint64_t)v1504;
  if (v1545)
  {
    v1546 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1545);
    MEMORY[0x1A1AF4E00](v1546, 0x10A0C40D234DDC7);
  }
  v1547 = v2101;
  if (v2101 == v2100)
  {
    v1548 = 4;
    v1547 = v2100;
  }
  else
  {
    if (!v2101)
      goto LABEL_1088;
    v1548 = 5;
  }
  (*(void (**)(void))(*v1547 + 8 * v1548))();
LABEL_1088:
  v1549 = v2103;
  if (v2103 == v2102)
  {
    v1550 = 4;
    v1549 = v2102;
  }
  else
  {
    if (!v2103)
      goto LABEL_1093;
    v1550 = 5;
  }
  (*(void (**)(void))(*v1549 + 8 * v1550))();
LABEL_1093:
  v1551 = *(_QWORD *)(a3 + 80);
  v1552 = *(_QWORD *)(v1551 + 1208);
  v1553 = *(_QWORD *)(v1551 + 1216);
  *(_QWORD *)&v2090 = v1552;
  *((_QWORD *)&v2090 + 1) = v1553;
  if (v1553)
  {
    v1554 = (unint64_t *)(v1553 + 8);
    do
      v1555 = __ldxr(v1554);
    while (__stxr(v1555 + 1, v1554));
  }
  v1556 = (char *)operator new(0x198uLL);
  *((_QWORD *)v1556 + 1) = 0;
  *((_QWORD *)v1556 + 2) = 0;
  *(_QWORD *)v1556 = &off_1E42E43B8;
  v1557 = a4[1];
  *(_OWORD *)v2080 = *a4;
  *(_OWORD *)&v2080[16] = v1557;
  if ((v1558 & 1) == 0)
  {
    if ((_DWORD)v2006)
    {
      if ((v2007 & 1) == 0)
      {
        if ((_DWORD)v2006)
        {
          if ((v2038 & 1) == 0
          {
            if ((v2051 & 1) == 0
            {
              ggl::MeshTyped<ggl::Icon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Icon::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Icon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Icon::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43D68 = 1;
          }
          ggl::Icon::MaskedIconPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Icon::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE580E48 = &ggl::Icon::pipelineDataMaskedIconPipelineDeviceStructs(void)::ref;
          qword_1EE580E50 = 0;
          if ((v2039 & 1) == 0
          {
            ggl::Icon::pipelineDataMaskedIconPipelineConstantStructs(void)::ref = (uint64_t)ggl::Label::View::reflection(void)::reflection;
            unk_1EE580F40 = ggl::Label::Options::reflection(void)::reflection;
            qword_1EE580F48 = (uint64_t)ggl::Label::DeviceBufferTextureSizeB::reflection(void)::reflection;
            unk_1EE580F50 = ggl::Label::DeviceBufferTextureSize::reflection(void)::reflection;
            qword_1EE580F58 = (uint64_t)ggl::Label::ViewCommon::reflection(void)::reflection;
          }
          qword_1EE580E58 = (uint64_t)&ggl::Icon::pipelineDataMaskedIconPipelineConstantStructs(void)::ref;
          unk_1EE580E60 = xmmword_19FFB38C0;
        }
      }
      ggl::Icon::MaskedIconPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Icon::MaskedIconPipelineSetup::typedReflection(void)::ref;
      ggl::MaskedIconShader::typedReflection(v2006);
      qword_1EE580E80 = (uint64_t)&ggl::MaskedIconShader::typedReflection(void)::ref;
      if ((v2008 & 1) == 0
      {
        ggl::Icon::pipelineStateMaskedIconPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE581330 = 0;
        qword_1EE581338 = (uint64_t)"";
        dword_1EE581340 = 0;
        qword_1EE581348 = (uint64_t)&ggl::Icon::pipelineStateMaskedIconPipelineAttributeBinding_0(void)::attr;
        unk_1EE581350 = 4;
      }
      qword_1EE580E88 = (uint64_t)&ggl::Icon::pipelineStateMaskedIconPipelineAttributeStructBinding(void)::attr;
      unk_1EE580E90 = 1;
      qword_1EE580E98 = 0;
      unk_1EE580EA0 = 3;
      qword_1EE580EA8 = (uint64_t)&ggl::Icon::pipelineStateMaskedIconPipelineDeviceStructBinding(void)::ref;
      unk_1EE580EB0 = 0;
      if ((v2009 & 1) == 0
      {
        ggl::Icon::pipelineStateMaskedIconPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE581240 = 0;
        qword_1EE581248 = (uint64_t)"view";
        dword_1EE581250 = 3;
        qword_1EE581258 = (uint64_t)&ggl::Icon::pipelineStateMaskedIconPipelineConstantViewBinding(void)::reflection;
        unk_1EE581260 = xmmword_19FFB35A0;
        qword_1EE581270 = 1;
        unk_1EE581278 = "labelOptions";
        dword_1EE581280 = 3;
        qword_1EE581288 = (uint64_t)&ggl::Icon::pipelineStateMaskedIconPipelineConstantLabelOptionsBinding(void)::reflection;
        *(int64x2_t *)algn_1EE581290 = vdupq_n_s64(2uLL);
        qword_1EE5812A0 = 2;
        unk_1EE5812A8 = "byteBufferTextureSize";
        dword_1EE5812B0 = 3;
        qword_1EE5812B8 = (uint64_t)&ggl::Icon::pipelineStateMaskedIconPipelineConstantByteBufferTextureSizeBinding(void)::reflection;
        unk_1EE5812C0 = vdupq_n_s64(3uLL);
        qword_1EE5812D0 = 3;
        unk_1EE5812D8 = "floatBufferTextureSize";
        dword_1EE5812E0 = 3;
        qword_1EE5812E8 = (uint64_t)&ggl::Icon::pipelineStateMaskedIconPipelineConstantFloatBufferTextureSizeBinding(void)::reflection;
        *(_OWORD *)algn_1EE5812F0 = xmmword_19FFB3440;
        qword_1EE581300 = 4;
        unk_1EE581308 = "viewCommon";
        dword_1EE581310 = 3;
        qword_1EE581318 = (uint64_t)&ggl::Icon::pipelineStateMaskedIconPipelineConstantViewCommonBinding(void)::reflection;
        unk_1EE581320 = 1;
      }
      qword_1EE580EB8 = (uint64_t)&ggl::Icon::pipelineStateMaskedIconPipelineConstantStructBinding(void)::ref;
      unk_1EE580EC0 = 5;
    }
  }
  v1559 = v2090;
  if (*((_QWORD *)&v2090 + 1))
  {
    v1560 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v1561 = __ldxr(v1560);
    while (__stxr(v1561 + 1, v1560));
    *((_DWORD *)v1556 + 14) = 0;
    *((_QWORD *)v1556 + 5) = 0;
    *((_QWORD *)v1556 + 6) = 0;
    *((_QWORD *)v1556 + 3) = &off_1E42B6760;
    *((_QWORD *)v1556 + 4) = 0;
    *((_QWORD *)v1556 + 8) = &ggl::Icon::MaskedIconPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v1556 + 72) = v1559;
    do
      v1562 = __ldxr(v1560);
    while (__stxr(v1562 + 1, v1560));
  }
  else
  {
    *((_DWORD *)v1556 + 14) = 0;
    *((_QWORD *)v1556 + 5) = 0;
    *((_QWORD *)v1556 + 6) = 0;
    *((_QWORD *)v1556 + 3) = &off_1E42B6760;
    *((_QWORD *)v1556 + 4) = 0;
    *((_QWORD *)v1556 + 8) = &ggl::Icon::MaskedIconPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v1556 + 72) = v1559;
  }
  v1563 = (int8x16_t *)(v1556 + 328);
  v1556[136] = 0;
  *(_OWORD *)(v1556 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v1556 + 156) = 0;
  *(_QWORD *)(v1556 + 172) = 0;
  *(_QWORD *)(v1556 + 164) = 0;
  v1556[184] = 0;
  *(_OWORD *)(v1556 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v1556 + 204) = 0;
  *(_QWORD *)(v1556 + 220) = 0;
  *(_QWORD *)(v1556 + 212) = 0;
  v1556[232] = 0;
  *(_OWORD *)(v1556 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v1556 + 252) = 0;
  *(_QWORD *)(v1556 + 268) = 0;
  *(_QWORD *)(v1556 + 260) = 0;
  v1564 = *(_OWORD *)&v2080[16];
  *(_OWORD *)(v1556 + 280) = *(_OWORD *)v2080;
  *(_OWORD *)(v1556 + 296) = v1564;
  v1556[312] = 0;
  *((_QWORD *)v1556 + 48) = 0;
  *((_OWORD *)v1556 + 22) = 0u;
  *((_OWORD *)v1556 + 23) = 0u;
  *((_OWORD *)v1556 + 20) = 0u;
  *((_OWORD *)v1556 + 21) = 0u;
  *((_QWORD *)v1556 + 49) = 0x100000001;
  v1556[400] = 0;
  v1556[88] = 1;
  *(_WORD *)(v1556 + 89) = (_WORD)v2086;
  v1556[91] = BYTE2(v2086);
  *(_OWORD *)(v1556 + 92) = xmmword_19FFB35D0;
  *((_DWORD *)v1556 + 27) = 7;
  *((_QWORD *)v1556 + 14) = 0;
  *((_QWORD *)v1556 + 15) = 0;
  *((_DWORD *)v1556 + 32) = 0;
  v1556[132] = 15;
  if (*((_QWORD *)&v1559 + 1))
  {
    v1565 = (unint64_t *)(*((_QWORD *)&v1559 + 1) + 8);
    do
      v1566 = __ldaxr(v1565);
    while (__stlxr(v1566 - 1, v1565));
    if (!v1566)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1559 + 1) + 16))(*((_QWORD *)&v1559 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1559 + 1));
    }
  }
  v1563->i32[0] = 0;
  *(_DWORD *)(v1556 + 331) = 0;
  v1567 = vceqzq_s8(*v1563);
  v1568 = vmovl_high_s8(v1567);
  v1569 = vmovl_s16(*(int16x4_t *)v1568.i8);
  v1570.i64[0] = v1569.u32[0];
  v1570.i64[1] = v1569.u32[1];
  v1571 = v1570;
  v1572 = vmovl_s8(*(int8x8_t *)v1567.i8);
  v1573 = vmovl_s16(*(int16x4_t *)v1572.i8);
  v1570.i64[0] = v1573.u32[0];
  v1570.i64[1] = v1573.u32[1];
  v1574 = v1570;
  v1575 = vmovl_high_s16(v1568);
  v1570.i64[0] = v1575.u32[0];
  v1570.i64[1] = v1575.u32[1];
  v1576 = v1570;
  v1577 = vmovl_high_s16(v1572);
  v1570.i64[0] = v1577.u32[0];
  v1570.i64[1] = v1577.u32[1];
  v1578 = v1570;
  v1570.i64[0] = v1569.u32[2];
  v1570.i64[1] = v1569.u32[3];
  v1579 = v1570;
  v1570.i64[0] = v1573.u32[2];
  v1570.i64[1] = v1573.u32[3];
  v1580 = v1570;
  v1570.i64[0] = v1575.u32[2];
  v1570.i64[1] = v1575.u32[3];
  v1581 = v1570;
  v1570.i64[0] = v1577.u32[2];
  v1570.i64[1] = v1577.u32[3];
  v1582 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v1570);
  v1583 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v1581);
  v1584 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v1580);
  v1585 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v1576);
  v1586 = vceqzq_s8(*(int8x16_t *)(v1556 + 344));
  v1587 = vmovl_high_s8(v1586);
  v1588 = vmovl_s16(*(int16x4_t *)v1587.i8);
  v1570.i64[0] = v1588.u32[0];
  v1570.i64[1] = v1588.u32[1];
  v1589 = v1570;
  v1590 = vmovl_s8(*(int8x8_t *)v1586.i8);
  v1591 = vmovl_s16(*(int16x4_t *)v1590.i8);
  v1570.i64[0] = v1591.u32[0];
  v1570.i64[1] = v1591.u32[1];
  v1592 = v1570;
  v1593 = vmovl_high_s16(v1587);
  v1570.i64[0] = v1593.u32[0];
  v1570.i64[1] = v1593.u32[1];
  v1594 = v1570;
  v1595 = vmovl_high_s16(v1590);
  v1570.i64[0] = v1595.u32[0];
  v1570.i64[1] = v1595.u32[1];
  v1596 = v1570;
  v1570.i64[0] = v1588.u32[2];
  v1570.i64[1] = v1588.u32[3];
  v1597 = v1570;
  v1570.i64[0] = v1591.u32[2];
  v1570.i64[1] = v1591.u32[3];
  v1598 = v1570;
  v1570.i64[0] = v1593.u32[2];
  v1570.i64[1] = v1593.u32[3];
  v1599 = v1570;
  v1570.i64[0] = v1595.u32[2];
  v1570.i64[1] = v1595.u32[3];
  v1600 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v1599);
  v1601 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v1589), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v1571));
  v1602 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v1592), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v1574));
  v1603 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v1594), v1585);
  v1604 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v1596), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v1578));
  v1605 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v1597), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v1579));
  v1606 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v1598), v1584);
  v1607 = vorrq_s8(v1600, v1583);
  v1608 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v1570), v1582);
  v1609 = vceqzq_s8(*(int8x16_t *)(v1556 + 360));
  v1610 = vmovl_s8(*(int8x8_t *)v1609.i8);
  v1611 = vmovl_high_s16(v1610);
  v1612 = vmovl_high_s8(v1609);
  v1613 = vmovl_high_s16(v1612);
  v1614 = vmovl_s16(*(int16x4_t *)v1610.i8);
  v1615 = vmovl_s16(*(int16x4_t *)v1612.i8);
  v1570.i64[0] = v1614.i32[0];
  v1570.i64[1] = v1614.i32[1];
  v1616 = v1570;
  v1570.i64[0] = v1615.i32[0];
  v1570.i64[1] = v1615.i32[1];
  v1617 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v1570);
  v1618 = vceqzq_s8(*(int8x16_t *)(v1556 + 376));
  v1619 = vmovl_high_s8(v1618);
  v1620 = vmovl_s16(*(int16x4_t *)v1619.i8);
  v1570.i64[0] = v1620.i32[0];
  v1570.i64[1] = v1620.i32[1];
  v1621 = vmovl_s8(*(int8x8_t *)v1618.i8);
  v1622 = vmovl_s16(*(int16x4_t *)v1621.i8);
  v1623 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v1570), v1617), v1601);
  v1570.i64[0] = v1622.i32[0];
  v1570.i64[1] = v1622.i32[1];
  v1624 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v1570), vbicq_s8((int8x16_t)xmmword_19FFB3170, v1616));
  v1570.i64[0] = v1613.i32[0];
  v1570.i64[1] = v1613.i32[1];
  v1625 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v1570);
  v1626 = vmovl_high_s16(v1619);
  v1627 = vorrq_s8(v1624, v1602);
  v1570.i64[0] = v1626.i32[0];
  v1570.i64[1] = v1626.i32[1];
  v1628 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v1570), v1625);
  v1570.i64[0] = v1611.i32[0];
  v1570.i64[1] = v1611.i32[1];
  v1629 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v1570);
  v1630 = vmovl_high_s16(v1621);
  v1570.i64[0] = v1630.i32[0];
  v1570.i64[1] = v1630.i32[1];
  v1631 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v1570), v1629), v1604);
  v1570.i64[0] = v1615.i32[2];
  v1570.i64[1] = v1615.i32[3];
  v1632 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v1570);
  v1570.i64[0] = v1620.i32[2];
  v1570.i64[1] = v1620.i32[3];
  v1633 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v1570), v1632), v1605);
  v1570.i64[0] = v1614.i32[2];
  v1570.i64[1] = v1614.i32[3];
  v1634 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v1570);
  v1570.i64[0] = v1622.i32[2];
  v1570.i64[1] = v1622.i32[3];
  v1635 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v1570), v1634), v1606);
  v1570.i64[0] = v1613.i32[2];
  v1570.i64[1] = v1613.i32[3];
  v1636 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v1570);
  v1570.i64[0] = v1626.i32[2];
  v1570.i64[1] = v1626.i32[3];
  v1637 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v1570), v1636), v1607);
  v1570.i64[0] = v1611.i32[2];
  v1570.i64[1] = v1611.i32[3];
  v1638 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v1570);
  v1570.i64[0] = v1630.i32[2];
  v1570.i64[1] = v1630.i32[3];
  *((_QWORD *)v1556 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v1627, v1623), vorrq_s8(v1631, vorrq_s8(v1628, v1603))), (int64x2_t)vorrq_s8(vorrq_s8(v1635, v1633), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v1570), v1638), v1608), v1637))));
  *((_QWORD *)v1556 + 3) = &off_1E42BBB58;
  v1556[312] = 1;
  *(_QWORD *)(a1 + 1200) = v1556 + 24;
  v1639 = *(std::__shared_weak_count **)(a1 + 1208);
  *(_QWORD *)(a1 + 1208) = v1556;
  if (v1639)
  {
    v1640 = (unint64_t *)&v1639->__shared_owners_;
    do
      v1641 = __ldaxr(v1640);
    while (__stlxr(v1641 - 1, v1640));
    if (!v1641)
    {
      ((void (*)(std::__shared_weak_count *))v1639->__on_zero_shared)(v1639);
      std::__shared_weak_count::__release_weak(v1639);
    }
  }
  v1642 = (std::__shared_weak_count *)*((_QWORD *)&v2090 + 1);
  if (*((_QWORD *)&v2090 + 1))
  {
    v1643 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v1644 = __ldaxr(v1643);
    while (__stlxr(v1644 - 1, v1643));
    if (!v1644)
    {
      ((void (*)(std::__shared_weak_count *))v1642->__on_zero_shared)(v1642);
      std::__shared_weak_count::__release_weak(v1642);
    }
  }
  v1645 = (uint64_t *)operator new();
  v2098[0] = &off_1E4279960;
  v2098[1] = a1;
  v2099 = v2098;
  v2096[0] = &off_1E42D74C0;
  v2097 = v2096;
  v1645[1] = 0;
  v1645[2] = 0;
  *v1645 = 0;
  {
    v2010 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v2010, "GeoGL", 0xA3D02C1100000005);
  }
  v1647 = ggl::Allocator::instance(void)::alloc;
  v1645[4] = 0;
  v1645[3] = v1647;
  v1645[5] = 0;
  v1645[6] = 0;
  {
    v2011 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v2011, "GeoGL", 0xA3D02C1100000005);
  }
  v1645[7] = ggl::Allocator::instance(void)::alloc;
  v1648 = (uint64_t)v2099;
  if (!v2099)
    goto LABEL_1124;
  if (v2099 != v2098)
  {
    v1648 = (*(uint64_t (**)(void))(*v2099 + 16))();
LABEL_1124:
    v1645[11] = v1648;
    goto LABEL_1126;
  }
  v1645[11] = (uint64_t)(v1645 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v2098[0] + 24))((uint64_t)v2098, v1645 + 8);
LABEL_1126:
  v1649 = (uint64_t)v2097;
  if (!v2097)
  {
LABEL_1129:
    v1645[15] = v1649;
    goto LABEL_1131;
  }
  if (v2097 != v2096)
  {
    v1649 = (*(uint64_t (**)(void))(*v2097 + 16))();
    goto LABEL_1129;
  }
  v1645[15] = (uint64_t)(v1645 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v2096[0] + 24))((uint64_t)v2096, v1645 + 12);
LABEL_1131:
  v1645[16] = 2000;
  v1650 = *v1645;
  if ((unint64_t)(v1645[2] - *v1645) > 0x31F)
    goto LABEL_1144;
  v1651 = v1645[1];
  v1652 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1645[3] + 16))(v1645[3], 800, 8);
  v1653 = v1651 - v1650;
  v1654 = v1652 + ((v1651 - v1650) & 0xFFFFFFFFFFFFFFF8);
  v1656 = *v1645;
  v1655 = v1645[1];
  v1657 = v1655 - *v1645;
  if (v1655 == *v1645)
  {
    v1659 = v1652 + ((v1651 - v1650) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1142;
  }
  v1658 = v1657 - 8;
  if ((unint64_t)(v1657 - 8) >= 0x58)
  {
    v1659 = v1652 + ((v1651 - v1650) & 0xFFFFFFFFFFFFFFF8);
    if (v1655 - (v1653 & 0xFFFFFFFFFFFFFFF8) - v1652 >= 0x20)
    {
      v1660 = v1653 >> 3;
      v1661 = (v1658 >> 3) + 1;
      v1662 = (_OWORD *)(v1652 + 8 * v1660 - 16);
      v1663 = (__int128 *)(v1655 - 16);
      v1664 = v1661 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1665 = *v1663;
        *(v1662 - 1) = *(v1663 - 1);
        *v1662 = v1665;
        v1662 -= 2;
        v1663 -= 2;
        v1664 -= 4;
      }
      while (v1664);
      v1659 = v1654 - 8 * (v1661 & 0x3FFFFFFFFFFFFFFCLL);
      v1655 -= 8 * (v1661 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1661 == (v1661 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1141;
    }
  }
  else
  {
    v1659 = v1652 + ((v1651 - v1650) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1666 = *(_QWORD *)(v1655 - 8);
    v1655 -= 8;
    *(_QWORD *)(v1659 - 8) = v1666;
    v1659 -= 8;
  }
  while (v1655 != v1656);
LABEL_1141:
  v1655 = *v1645;
LABEL_1142:
  *v1645 = v1659;
  v1645[1] = v1654;
  v1667 = v1645[2];
  v1645[2] = v1652 + 800;
  if (v1655)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1645[3] + 40))(v1645[3], v1655, v1667 - v1655);
LABEL_1144:
  v1668 = v1645[4];
  if ((unint64_t)(v1645[6] - v1668) > 0x31F)
    goto LABEL_1157;
  v1669 = v1645[5];
  v1670 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1645[7] + 16))(v1645[7], 800, 8);
  v1671 = v1669 - v1668;
  v1672 = v1670 + ((v1669 - v1668) & 0xFFFFFFFFFFFFFFF8);
  v1674 = v1645[4];
  v1673 = v1645[5];
  v1675 = v1673 - v1674;
  if (v1673 == v1674)
  {
    v1677 = v1670 + ((v1669 - v1668) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1155;
  }
  v1676 = v1675 - 8;
  if ((unint64_t)(v1675 - 8) >= 0x58)
  {
    v1677 = v1670 + ((v1669 - v1668) & 0xFFFFFFFFFFFFFFF8);
    if (v1673 - (v1671 & 0xFFFFFFFFFFFFFFF8) - v1670 >= 0x20)
    {
      v1678 = v1671 >> 3;
      v1679 = (v1676 >> 3) + 1;
      v1680 = (_OWORD *)(v1670 + 8 * v1678 - 16);
      v1681 = (__int128 *)(v1673 - 16);
      v1682 = v1679 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1683 = *v1681;
        *(v1680 - 1) = *(v1681 - 1);
        *v1680 = v1683;
        v1680 -= 2;
        v1681 -= 2;
        v1682 -= 4;
      }
      while (v1682);
      v1677 = v1672 - 8 * (v1679 & 0x3FFFFFFFFFFFFFFCLL);
      v1673 -= 8 * (v1679 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1679 == (v1679 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1154;
    }
  }
  else
  {
    v1677 = v1670 + ((v1669 - v1668) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1684 = *(_QWORD *)(v1673 - 8);
    v1673 -= 8;
    *(_QWORD *)(v1677 - 8) = v1684;
    v1677 -= 8;
  }
  while (v1673 != v1674);
LABEL_1154:
  v1673 = v1645[4];
LABEL_1155:
  v1645[4] = v1677;
  v1645[5] = v1672;
  v1685 = v1645[6];
  v1645[6] = v1670 + 800;
  if (v1673)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1645[7] + 40))(v1645[7], v1673, v1685 - v1673);
LABEL_1157:
  v1686 = *v2056;
  *v2056 = (uint64_t)v1645;
  if (v1686)
  {
    v1687 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1686);
    MEMORY[0x1A1AF4E00](v1687, 0x10A0C40D234DDC7);
  }
  v1688 = v2097;
  v1689 = &unk_1ECE44000;
  if (v2097 == v2096)
  {
    v1690 = 4;
    v1688 = v2096;
  }
  else
  {
    if (!v2097)
      goto LABEL_1164;
    v1690 = 5;
  }
  (*(void (**)(void))(*v1688 + 8 * v1690))();
LABEL_1164:
  v1691 = v2099;
  if (v2099 == v2098)
  {
    v1692 = 4;
    v1691 = v2098;
    goto LABEL_1168;
  }
  if (v2099)
  {
    v1692 = 5;
LABEL_1168:
    (*(void (**)(void))(*v1691 + 8 * v1692))();
  }
  v1693 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v1693->__shared_owners_ = 0;
  v1694 = (unint64_t *)&v1693->__shared_owners_;
  v1693->__shared_weak_owners_ = 0;
  v1693->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E02C0;
  v1693[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
  v1693[1].__shared_owners_ = 32;
  LODWORD(v1693[1].__shared_weak_owners_) = 65542;
  v1695 = (std::__shared_count)0;
  v1693[2].std::__shared_count = 0u;
  *(_OWORD *)&v1693[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v1693[3].__shared_owners_ = 0u;
  v1693[4].std::__shared_count = 0u;
  v1693[4].__shared_weak_owners_ = 0;
  if ((v1696 & 1) == 0)
  {
    v1695 = (std::__shared_count)0;
    if (v2012)
    {
      v2013 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v2013, "GeoGL", 0xA3D02C1100000005);
      v1695 = (std::__shared_count)0;
    }
  }
  v1693[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
  v1693[5].__shared_owners_ = 0;
  *((std::__shared_count *)v1693 + 11) = v1695;
  v1693[8].std::__shared_count = v1695;
  v1693[8].__shared_weak_owners_ = 0;
  v1693[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
  *((std::__shared_count *)v1693 + 10) = v1695;
  v1693[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
  LODWORD(v1693[5].__shared_weak_owners_) = 0;
  v1693[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7FE0;
  v1693[9].__shared_weak_owners_ = (uint64_t)"LabelIconMesh";
  v1693[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::Icon::defaultVboReflection;
  v1693[9].__shared_owners_ = (uint64_t)&unk_1E42B8000;
  v1697 = *(_QWORD **)v2077;
  do
    v1698 = __ldxr(v1694);
  while (__stxr(v1698 + 1, v1694));
  v1699 = (std::__shared_weak_count *)v1697[1];
  *v1697 = v1693 + 1;
  v1697[1] = v1693;
  if (v1699)
  {
    v1700 = (unint64_t *)&v1699->__shared_owners_;
    do
      v1701 = __ldaxr(v1700);
    while (__stlxr(v1701 - 1, v1700));
    if (!v1701)
    {
      ((void (*)(std::__shared_weak_count *))v1699->__on_zero_shared)(v1699);
      std::__shared_weak_count::__release_weak(v1699);
    }
  }
  do
    v1702 = __ldaxr(v1694);
  while (__stlxr(v1702 - 1, v1694));
  if (!v1702)
  {
    ((void (*)(std::__shared_weak_count *))v1693->__on_zero_shared)(v1693);
    std::__shared_weak_count::__release_weak(v1693);
  }
  v1703 = *(_QWORD *)(a1 + 456);
  v1704 = *(std::__shared_weak_count **)(a1 + 464);
  if (v1704)
  {
    v1705 = (unint64_t *)&v1704->__shared_owners_;
    do
      v1706 = __ldxr(v1705);
    while (__stxr(v1706 + 1, v1705));
    do
      v1707 = __ldxr(v1705);
    while (__stxr(v1707 + 1, v1705));
  }
  *(_QWORD *)(a1 + 1328) = v1703;
  v1708 = *(std::__shared_weak_count **)(a1 + 1336);
  *(_QWORD *)(a1 + 1336) = v1704;
  if (v1708)
  {
    v1709 = (unint64_t *)&v1708->__shared_owners_;
    do
      v1710 = __ldaxr(v1709);
    while (__stlxr(v1710 - 1, v1709));
    if (!v1710)
    {
      ((void (*)(std::__shared_weak_count *))v1708->__on_zero_shared)(v1708);
      std::__shared_weak_count::__release_weak(v1708);
    }
  }
  if (v1704)
  {
    v1711 = (unint64_t *)&v1704->__shared_owners_;
    do
      v1712 = __ldaxr(v1711);
    while (__stlxr(v1712 - 1, v1711));
    if (!v1712)
    {
      ((void (*)(std::__shared_weak_count *))v1704->__on_zero_shared)(v1704);
      std::__shared_weak_count::__release_weak(v1704);
    }
  }
  v1713 = *(_QWORD *)(a3 + 80);
  v1714 = *(_QWORD *)(v1713 + 1232);
  v1715 = *(_QWORD *)(v1713 + 1240);
  *(_QWORD *)&v2090 = v1714;
  *((_QWORD *)&v2090 + 1) = v1715;
  if (v1715)
  {
    v1716 = (unint64_t *)(v1715 + 8);
    do
      v1717 = __ldxr(v1716);
    while (__stxr(v1717 + 1, v1716));
  }
  v1718 = (char *)operator new(0x198uLL);
  *((_QWORD *)v1718 + 1) = 0;
  *((_QWORD *)v1718 + 2) = 0;
  *(_QWORD *)v1718 = &off_1E42E4380;
  v1719 = a4[1];
  *(_OWORD *)v2080 = *a4;
  *(_OWORD *)&v2080[16] = v1719;
  if ((v1720 & 1) == 0)
  {
    if ((_DWORD)v2014)
    {
      if ((v2015 & 1) == 0)
      {
        if ((_DWORD)v2014)
        {
          if ((v2040 & 1) == 0
          {
            if ((v2052 & 1) == 0
            {
              ggl::MeshTyped<ggl::Icon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Icon::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Icon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Icon::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43D68 = 1;
          }
          ggl::Icon::WaypointPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Icon::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE580DB8 = &ggl::Icon::pipelineDataWaypointPipelineDeviceStructs(void)::ref;
          qword_1EE580DC0 = 0;
          if ((v2041 & 1) == 0
          {
            ggl::Icon::pipelineDataWaypointPipelineConstantStructs(void)::ref = (uint64_t)ggl::Label::View::reflection(void)::reflection;
            unk_1EE580F10 = ggl::Label::Options::reflection(void)::reflection;
            qword_1EE580F18 = (uint64_t)ggl::Label::DeviceBufferTextureSizeB::reflection(void)::reflection;
            unk_1EE580F20 = ggl::Label::DeviceBufferTextureSize::reflection(void)::reflection;
            qword_1EE580F28 = (uint64_t)ggl::Label::ViewCommon::reflection(void)::reflection;
          }
          qword_1EE580DC8 = (uint64_t)&ggl::Icon::pipelineDataWaypointPipelineConstantStructs(void)::ref;
          unk_1EE580DD0 = xmmword_19FFB3020;
        }
      }
      ggl::Icon::WaypointPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Icon::WaypointPipelineSetup::typedReflection(void)::ref;
      ggl::WaypointShader::typedReflection(v2014);
      qword_1EE580DF0 = (uint64_t)&ggl::WaypointShader::typedReflection(void)::ref;
      if ((v2016 & 1) == 0
      {
        ggl::Icon::pipelineStateWaypointPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE581210 = 0;
        qword_1EE581218 = (uint64_t)"";
        dword_1EE581220 = 0;
        qword_1EE581228 = (uint64_t)&ggl::Icon::pipelineStateWaypointPipelineAttributeBinding_0(void)::attr;
        unk_1EE581230 = 4;
      }
      qword_1EE580DF8 = (uint64_t)&ggl::Icon::pipelineStateWaypointPipelineAttributeStructBinding(void)::attr;
      unk_1EE580E00 = 1;
      qword_1EE580E08 = 0;
      unk_1EE580E10 = 2;
      qword_1EE580E18 = (uint64_t)&ggl::Icon::pipelineStateWaypointPipelineDeviceStructBinding(void)::ref;
      unk_1EE580E20 = 0;
      if ((v2017 & 1) == 0
      {
        ggl::Icon::pipelineStateWaypointPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE581120 = 0;
        qword_1EE581128 = (uint64_t)"view";
        dword_1EE581130 = 3;
        qword_1EE581138 = (uint64_t)&ggl::Icon::pipelineStateWaypointPipelineConstantViewBinding(void)::reflection;
        unk_1EE581140 = xmmword_19FFB35A0;
        qword_1EE581150 = 1;
        unk_1EE581158 = "labelOptions";
        dword_1EE581160 = 3;
        qword_1EE581168 = (uint64_t)&ggl::Icon::pipelineStateWaypointPipelineConstantLabelOptionsBinding(void)::reflection;
        *(int64x2_t *)algn_1EE581170 = vdupq_n_s64(2uLL);
        qword_1EE581180 = 2;
        unk_1EE581188 = "byteBufferTextureSize";
        dword_1EE581190 = 3;
        qword_1EE581198 = (uint64_t)&ggl::Icon::pipelineStateWaypointPipelineConstantByteBufferTextureSizeBinding(void)::reflection;
        unk_1EE5811A0 = vdupq_n_s64(3uLL);
        qword_1EE5811B0 = 3;
        unk_1EE5811B8 = "floatBufferTextureSize";
        dword_1EE5811C0 = 3;
        qword_1EE5811C8 = (uint64_t)&ggl::Icon::pipelineStateWaypointPipelineConstantFloatBufferTextureSizeBinding(void)::reflection;
        *(_OWORD *)algn_1EE5811D0 = xmmword_19FFB3440;
        qword_1EE5811E0 = 4;
        unk_1EE5811E8 = "viewCommon";
        dword_1EE5811F0 = 3;
        qword_1EE5811F8 = (uint64_t)&ggl::Icon::pipelineStateWaypointPipelineConstantViewCommonBinding(void)::reflection;
        unk_1EE581200 = 1;
      }
      qword_1EE580E28 = (uint64_t)&ggl::Icon::pipelineStateWaypointPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE580E30 = 5;
      v1689 = (_QWORD *)&unk_1ECE44000;
    }
  }
  v1721 = v2090;
  if (*((_QWORD *)&v2090 + 1))
  {
    v1722 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v1723 = __ldxr(v1722);
    while (__stxr(v1723 + 1, v1722));
    *((_DWORD *)v1718 + 14) = 0;
    *((_QWORD *)v1718 + 5) = 0;
    *((_QWORD *)v1718 + 6) = 0;
    *((_QWORD *)v1718 + 3) = &off_1E42B6760;
    *((_QWORD *)v1718 + 4) = 0;
    *((_QWORD *)v1718 + 8) = &ggl::Icon::WaypointPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v1718 + 72) = v1721;
    do
      v1724 = __ldxr(v1722);
    while (__stxr(v1724 + 1, v1722));
  }
  else
  {
    *((_DWORD *)v1718 + 14) = 0;
    *((_QWORD *)v1718 + 5) = 0;
    *((_QWORD *)v1718 + 6) = 0;
    *((_QWORD *)v1718 + 3) = &off_1E42B6760;
    *((_QWORD *)v1718 + 4) = 0;
    *((_QWORD *)v1718 + 8) = &ggl::Icon::WaypointPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v1718 + 72) = v1721;
  }
  v1725 = (int8x16_t *)(v1718 + 328);
  v1718[136] = 0;
  *(_OWORD *)(v1718 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v1718 + 156) = 0;
  *(_QWORD *)(v1718 + 172) = 0;
  *(_QWORD *)(v1718 + 164) = 0;
  v1718[184] = 0;
  *(_OWORD *)(v1718 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v1718 + 204) = 0;
  *(_QWORD *)(v1718 + 220) = 0;
  *(_QWORD *)(v1718 + 212) = 0;
  v1718[232] = 0;
  *(_OWORD *)(v1718 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v1718 + 252) = 0;
  *(_QWORD *)(v1718 + 268) = 0;
  *(_QWORD *)(v1718 + 260) = 0;
  v1726 = *(_OWORD *)&v2080[16];
  *(_OWORD *)(v1718 + 280) = *(_OWORD *)v2080;
  *(_OWORD *)(v1718 + 296) = v1726;
  v1718[312] = 0;
  *((_QWORD *)v1718 + 48) = 0;
  *((_OWORD *)v1718 + 22) = 0u;
  *((_OWORD *)v1718 + 23) = 0u;
  *((_OWORD *)v1718 + 20) = 0u;
  *((_OWORD *)v1718 + 21) = 0u;
  *((_QWORD *)v1718 + 49) = 0x100000001;
  v1718[400] = 0;
  v1718[88] = 1;
  *(_WORD *)(v1718 + 89) = (_WORD)v2086;
  v1718[91] = BYTE2(v2086);
  *(_OWORD *)(v1718 + 92) = xmmword_19FFB35D0;
  *((_DWORD *)v1718 + 27) = 7;
  *((_QWORD *)v1718 + 14) = 0;
  *((_QWORD *)v1718 + 15) = 0;
  *((_DWORD *)v1718 + 32) = 0;
  v1718[132] = 15;
  if (*((_QWORD *)&v1721 + 1))
  {
    v1727 = (unint64_t *)(*((_QWORD *)&v1721 + 1) + 8);
    do
      v1728 = __ldaxr(v1727);
    while (__stlxr(v1728 - 1, v1727));
    if (!v1728)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1721 + 1) + 16))(*((_QWORD *)&v1721 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1721 + 1));
    }
  }
  v1725->i32[0] = 0;
  *(_DWORD *)(v1718 + 331) = 0;
  v1729 = vceqzq_s8(*v1725);
  v1730 = vmovl_s8(*(int8x8_t *)v1729.i8);
  v1731 = vmovl_high_s16(v1730);
  v1732.i64[0] = v1731.u32[2];
  v1732.i64[1] = v1731.u32[3];
  v1733 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v1732);
  v1734 = vmovl_high_s8(v1729);
  v1735 = vmovl_high_s16(v1734);
  v1732.i64[0] = v1735.u32[2];
  v1732.i64[1] = v1735.u32[3];
  v1736 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v1732);
  v1737 = vmovl_s16(*(int16x4_t *)v1730.i8);
  v1732.i64[0] = v1737.u32[2];
  v1732.i64[1] = v1737.u32[3];
  v1738 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v1732);
  v1739 = vmovl_s16(*(int16x4_t *)v1734.i8);
  v1732.i64[0] = v1739.u32[2];
  v1732.i64[1] = v1739.u32[3];
  v1740 = vbicq_s8((int8x16_t)xmmword_19FFB30A0, v1732);
  v1732.i64[0] = v1731.u32[0];
  v1732.i64[1] = v1731.u32[1];
  v1741 = vbicq_s8((int8x16_t)xmmword_19FFB30B0, v1732);
  v1732.i64[0] = v1735.u32[0];
  v1732.i64[1] = v1735.u32[1];
  v1742 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v1732);
  v1732.i64[0] = v1737.u32[0];
  v1732.i64[1] = v1737.u32[1];
  v1743 = vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v1732);
  v1732.i64[0] = v1739.u32[0];
  v1732.i64[1] = v1739.u32[1];
  v1744 = vbicq_s8((int8x16_t)xmmword_19FFB30D0, v1732);
  v1745 = vceqzq_s8(*(int8x16_t *)(v1718 + 344));
  v1746 = vmovl_s8(*(int8x8_t *)v1745.i8);
  v1747 = vmovl_high_s16(v1746);
  v1732.i64[0] = v1747.u32[2];
  v1732.i64[1] = v1747.u32[3];
  v1748 = vbicq_s8((int8x16_t)xmmword_19FFB30E0, v1732);
  v1749 = vmovl_high_s8(v1745);
  v1750 = vmovl_high_s16(v1749);
  v1732.i64[0] = v1750.u32[2];
  v1732.i64[1] = v1750.u32[3];
  v1751 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v1732);
  v1752 = vmovl_s16(*(int16x4_t *)v1746.i8);
  v1732.i64[0] = v1752.u32[2];
  v1732.i64[1] = v1752.u32[3];
  v1753 = vbicq_s8((int8x16_t)xmmword_19FFB3100, v1732);
  v1754 = vmovl_s16(*(int16x4_t *)v1749.i8);
  v1732.i64[0] = v1754.u32[2];
  v1732.i64[1] = v1754.u32[3];
  v1755 = vbicq_s8((int8x16_t)xmmword_19FFB3110, v1732);
  v1732.i64[0] = v1747.u32[0];
  v1732.i64[1] = v1747.u32[1];
  v1756 = vbicq_s8((int8x16_t)xmmword_19FFB3120, v1732);
  v1732.i64[0] = v1750.u32[0];
  v1732.i64[1] = v1750.u32[1];
  v1757 = vbicq_s8((int8x16_t)xmmword_19FFB3130, v1732);
  v1732.i64[0] = v1752.u32[0];
  v1732.i64[1] = v1752.u32[1];
  v1758 = vbicq_s8((int8x16_t)xmmword_19FFB3140, v1732);
  v1732.i64[0] = v1754.u32[0];
  v1732.i64[1] = v1754.u32[1];
  v1759 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v1732), v1744);
  v1760 = vorrq_s8(v1758, v1743);
  v1761 = vorrq_s8(v1757, v1742);
  v1762 = vorrq_s8(v1756, v1741);
  v1763 = vorrq_s8(v1755, v1740);
  v1764 = vorrq_s8(v1753, v1738);
  v1765 = vorrq_s8(v1751, v1736);
  v1766 = vorrq_s8(v1748, v1733);
  v1767 = vceqzq_s8(*(int8x16_t *)(v1718 + 360));
  v1768 = vmovl_s8(*(int8x8_t *)v1767.i8);
  v1769 = vmovl_high_s16(v1768);
  v1770 = vmovl_high_s8(v1767);
  v1771 = vmovl_high_s16(v1770);
  v1772 = vmovl_s16(*(int16x4_t *)v1768.i8);
  v1773 = vmovl_s16(*(int16x4_t *)v1770.i8);
  v1732.i64[0] = v1773.i32[0];
  v1732.i64[1] = v1773.i32[1];
  v1774 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v1732);
  v1732.i64[0] = v1772.i32[0];
  v1732.i64[1] = v1772.i32[1];
  v1775 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v1732);
  v1732.i64[0] = v1771.i32[0];
  v1732.i64[1] = v1771.i32[1];
  v1776 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v1732);
  v1732.i64[0] = v1769.i32[0];
  v1732.i64[1] = v1769.i32[1];
  v1777 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v1732);
  v1732.i64[0] = v1769.i32[2];
  v1732.i64[1] = v1769.i32[3];
  v1778 = v1732;
  v1732.i64[0] = v1771.i32[2];
  v1732.i64[1] = v1771.i32[3];
  v1779 = v1732;
  v1732.i64[0] = v1772.i32[2];
  v1732.i64[1] = v1772.i32[3];
  v1780 = v1732;
  v1732.i64[0] = v1773.i32[2];
  v1732.i64[1] = v1773.i32[3];
  v1781 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v1732);
  v1782 = vceqzq_s8(*(int8x16_t *)(v1718 + 376));
  v1783 = vmovl_high_s8(v1782);
  v1784 = vmovl_s16(*(int16x4_t *)v1783.i8);
  v1785 = vmovl_s8(*(int8x8_t *)v1782.i8);
  v1786 = vmovl_s16(*(int16x4_t *)v1785.i8);
  v1787 = vmovl_high_s16(v1783);
  v1788 = vmovl_high_s16(v1785);
  v1732.i64[0] = v1788.i32[2];
  v1732.i64[1] = v1788.i32[3];
  v1789 = vbicq_s8((int8x16_t)xmmword_19FFB31E0, v1732);
  v1732.i64[0] = v1787.i32[2];
  v1732.i64[1] = v1787.i32[3];
  v1790 = vbicq_s8((int8x16_t)xmmword_19FFB31F0, v1732);
  v1732.i64[0] = v1786.i32[2];
  v1732.i64[1] = v1786.i32[3];
  v1791 = vbicq_s8((int8x16_t)xmmword_19FFB3200, v1732);
  v1732.i64[0] = v1784.i32[2];
  v1732.i64[1] = v1784.i32[3];
  v1792 = vbicq_s8((int8x16_t)xmmword_19FFB3210, v1732);
  v1732.i64[0] = v1788.i32[0];
  v1732.i64[1] = v1788.i32[1];
  v1793 = vbicq_s8((int8x16_t)xmmword_19FFB3220, v1732);
  v1732.i64[0] = v1787.i32[0];
  v1732.i64[1] = v1787.i32[1];
  v1794 = vbicq_s8((int8x16_t)xmmword_19FFB3230, v1732);
  v1732.i64[0] = v1786.i32[0];
  v1732.i64[1] = v1786.i32[1];
  v1795 = vbicq_s8((int8x16_t)xmmword_19FFB3240, v1732);
  v1732.i64[0] = v1784.i32[0];
  v1732.i64[1] = v1784.i32[1];
  *((_QWORD *)v1718 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v1795, v1775), v1760), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v1732), v1774), v1759)), vorrq_s8(vorrq_s8(vorrq_s8(v1793, v1777), v1762), vorrq_s8(vorrq_s8(v1794, v1776), v1761))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v1791, vbicq_s8((int8x16_t)xmmword_19FFB31B0, v1780)), v1764), vorrq_s8(vorrq_s8(v1792, v1781), v1763)), vorrq_s8(vorrq_s8(vorrq_s8(v1789, vbicq_s8((int8x16_t)xmmword_19FFB31D0, v1778)),
                                                 v1766),
                                               vorrq_s8(vorrq_s8(v1790, vbicq_s8((int8x16_t)xmmword_19FFB31C0, v1779)), v1765)))));
  *((_QWORD *)v1718 + 3) = &off_1E42BBB08;
  v1718[312] = 1;
  *(_QWORD *)(a1 + 1216) = v1718 + 24;
  v1796 = *(std::__shared_weak_count **)(a1 + 1224);
  *(_QWORD *)(a1 + 1224) = v1718;
  if (v1796)
  {
    v1797 = (unint64_t *)&v1796->__shared_owners_;
    do
      v1798 = __ldaxr(v1797);
    while (__stlxr(v1798 - 1, v1797));
    if (!v1798)
    {
      ((void (*)(std::__shared_weak_count *))v1796->__on_zero_shared)(v1796);
      std::__shared_weak_count::__release_weak(v1796);
    }
  }
  v1799 = (std::__shared_weak_count *)*((_QWORD *)&v2090 + 1);
  if (*((_QWORD *)&v2090 + 1))
  {
    v1800 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v1801 = __ldaxr(v1800);
    while (__stlxr(v1801 - 1, v1800));
    if (!v1801)
    {
      ((void (*)(std::__shared_weak_count *))v1799->__on_zero_shared)(v1799);
      std::__shared_weak_count::__release_weak(v1799);
    }
  }
  v1802 = (uint64_t *)operator new();
  v2094[0] = &off_1E42799A8;
  v2094[1] = a1;
  v2095 = v2094;
  v2092[0] = &off_1E42D7478;
  v2093 = v2092;
  v1802[1] = 0;
  v1802[2] = 0;
  *v1802 = 0;
  {
    v2018 = operator new();
    v1689[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v2018, "GeoGL", 0xA3D02C1100000005);
  }
  v1804 = v1689[495];
  v1802[4] = 0;
  v1802[3] = v1804;
  v1802[5] = 0;
  v1802[6] = 0;
  {
    v2019 = operator new();
    v1689[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v2019, "GeoGL", 0xA3D02C1100000005);
  }
  v1802[7] = v1689[495];
  v1805 = (uint64_t)v2095;
  if (!v2095)
    goto LABEL_1225;
  if (v2095 != v2094)
  {
    v1805 = (*(uint64_t (**)(void))(*v2095 + 16))();
LABEL_1225:
    v1802[11] = v1805;
    goto LABEL_1227;
  }
  v1802[11] = (uint64_t)(v1802 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v2094[0] + 24))((uint64_t)v2094, v1802 + 8);
LABEL_1227:
  v1806 = (uint64_t)v2093;
  if (!v2093)
  {
LABEL_1230:
    v1802[15] = v1806;
    goto LABEL_1232;
  }
  if (v2093 != v2092)
  {
    v1806 = (*(uint64_t (**)(void))(*v2093 + 16))();
    goto LABEL_1230;
  }
  v1802[15] = (uint64_t)(v1802 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v2092[0] + 24))((uint64_t)v2092, v1802 + 12);
LABEL_1232:
  v1802[16] = 2000;
  v1807 = *v1802;
  if ((unint64_t)(v1802[2] - *v1802) > 0x31F)
    goto LABEL_1245;
  v1808 = v1802[1];
  v1809 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1802[3] + 16))(v1802[3], 800, 8);
  v1810 = v1808 - v1807;
  v1811 = v1809 + ((v1808 - v1807) & 0xFFFFFFFFFFFFFFF8);
  v1813 = *v1802;
  v1812 = v1802[1];
  v1814 = v1812 - *v1802;
  if (v1812 == *v1802)
  {
    v1816 = v1809 + ((v1808 - v1807) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1243;
  }
  v1815 = v1814 - 8;
  if ((unint64_t)(v1814 - 8) >= 0x58)
  {
    v1816 = v1809 + ((v1808 - v1807) & 0xFFFFFFFFFFFFFFF8);
    if (v1812 - (v1810 & 0xFFFFFFFFFFFFFFF8) - v1809 >= 0x20)
    {
      v1817 = v1810 >> 3;
      v1818 = (v1815 >> 3) + 1;
      v1819 = (_OWORD *)(v1809 + 8 * v1817 - 16);
      v1820 = (__int128 *)(v1812 - 16);
      v1821 = v1818 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1822 = *v1820;
        *(v1819 - 1) = *(v1820 - 1);
        *v1819 = v1822;
        v1819 -= 2;
        v1820 -= 2;
        v1821 -= 4;
      }
      while (v1821);
      v1816 = v1811 - 8 * (v1818 & 0x3FFFFFFFFFFFFFFCLL);
      v1812 -= 8 * (v1818 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1818 == (v1818 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1242;
    }
  }
  else
  {
    v1816 = v1809 + ((v1808 - v1807) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1823 = *(_QWORD *)(v1812 - 8);
    v1812 -= 8;
    *(_QWORD *)(v1816 - 8) = v1823;
    v1816 -= 8;
  }
  while (v1812 != v1813);
LABEL_1242:
  v1812 = *v1802;
LABEL_1243:
  *v1802 = v1816;
  v1802[1] = v1811;
  v1824 = v1802[2];
  v1802[2] = v1809 + 800;
  if (v1812)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1802[3] + 40))(v1802[3], v1812, v1824 - v1812);
LABEL_1245:
  v1825 = v1802[4];
  if ((unint64_t)(v1802[6] - v1825) > 0x31F)
    goto LABEL_1258;
  v1826 = v1802[5];
  v1827 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1802[7] + 16))(v1802[7], 800, 8);
  v1828 = v1826 - v1825;
  v1829 = v1827 + ((v1826 - v1825) & 0xFFFFFFFFFFFFFFF8);
  v1831 = v1802[4];
  v1830 = v1802[5];
  v1832 = v1830 - v1831;
  if (v1830 == v1831)
  {
    v1834 = v1827 + ((v1826 - v1825) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1256;
  }
  v1833 = v1832 - 8;
  if ((unint64_t)(v1832 - 8) >= 0x58)
  {
    v1834 = v1827 + ((v1826 - v1825) & 0xFFFFFFFFFFFFFFF8);
    if (v1830 - (v1828 & 0xFFFFFFFFFFFFFFF8) - v1827 >= 0x20)
    {
      v1835 = v1828 >> 3;
      v1836 = (v1833 >> 3) + 1;
      v1837 = (_OWORD *)(v1827 + 8 * v1835 - 16);
      v1838 = (__int128 *)(v1830 - 16);
      v1839 = v1836 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1840 = *v1838;
        *(v1837 - 1) = *(v1838 - 1);
        *v1837 = v1840;
        v1837 -= 2;
        v1838 -= 2;
        v1839 -= 4;
      }
      while (v1839);
      v1834 = v1829 - 8 * (v1836 & 0x3FFFFFFFFFFFFFFCLL);
      v1830 -= 8 * (v1836 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1836 == (v1836 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1255;
    }
  }
  else
  {
    v1834 = v1827 + ((v1826 - v1825) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1841 = *(_QWORD *)(v1830 - 8);
    v1830 -= 8;
    *(_QWORD *)(v1834 - 8) = v1841;
    v1834 -= 8;
  }
  while (v1830 != v1831);
LABEL_1255:
  v1830 = v1802[4];
LABEL_1256:
  v1802[4] = v1834;
  v1802[5] = v1829;
  v1842 = v1802[6];
  v1802[6] = v1827 + 800;
  if (v1830)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1802[7] + 40))(v1802[7], v1830, v1842 - v1830);
LABEL_1258:
  v1843 = *v2055;
  *v2055 = (uint64_t)v1802;
  if (v1843)
  {
    v1844 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1843);
    MEMORY[0x1A1AF4E00](v1844, 0x10A0C40D234DDC7);
  }
  v1845 = v2093;
  if (v2093 == v2092)
  {
    v1846 = 4;
    v1845 = v2092;
  }
  else
  {
    if (!v2093)
      goto LABEL_1265;
    v1846 = 5;
  }
  (*(void (**)(void))(*v1845 + 8 * v1846))();
LABEL_1265:
  v1847 = v2095;
  if (v2095 == v2094)
  {
    v1848 = 4;
    v1847 = v2094;
    goto LABEL_1269;
  }
  if (v2095)
  {
    v1848 = 5;
LABEL_1269:
    (*(void (**)(void))(*v1847 + 8 * v1848))();
  }
  v1849 = (char *)operator new(0x58uLL);
  *((_QWORD *)v1849 + 1) = 0;
  v1850 = (unint64_t *)(v1849 + 8);
  *((_QWORD *)v1849 + 2) = 0;
  *(_QWORD *)v1849 = &off_1E42DED18;
  *((_QWORD *)v1849 + 3) = &off_1E42B63B0;
  *((_QWORD *)v1849 + 5) = 0;
  *((_QWORD *)v1849 + 6) = 0;
  *((_QWORD *)v1849 + 4) = 0;
  *((_DWORD *)v1849 + 14) = 0;
  *(_OWORD *)(v1849 + 60) = xmmword_19FFB2E40;
  *(_QWORD *)(v1849 + 76) = 0x100000000;
  *((_DWORD *)v1849 + 21) = 0;
  *(_QWORD *)v2080 = v1849 + 24;
  *(_QWORD *)&v2080[8] = v1849;
  v1851 = (std::__shared_weak_count *)operator new(0x60uLL);
  v1851->__shared_owners_ = 0;
  v1852 = (unint64_t *)&v1851->__shared_owners_;
  v1851->__shared_weak_owners_ = 0;
  v1851->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  v1853 = ggl::TextureData2D::TextureData2D((uint64_t)&v1851[1], 1, 1, 1u, 5, 0);
  *(_QWORD *)&v2090 = v1851 + 1;
  *((_QWORD *)&v2090 + 1) = v1851;
  *(_BYTE *)((uint64_t (*)(_QWORD *, _QWORD))v1851[1].__on_zero_shared)(v1853, 0) = 0;
  v1854 = operator new(0xB0uLL);
  v1855 = v1854;
  v1854[1] = 0;
  v1854[2] = 0;
  *v1854 = &off_1E42E53B0;
  v1856 = (char *)(v1854 + 3);
  do
    v1857 = __ldxr(v1852);
  while (__stxr(v1857 + 1, v1852));
  v1854[13] = 0;
  shared_owners = v1851[1].__shared_owners_;
  shared_owners_high = HIDWORD(v1851[1].__shared_owners_);
  *((_DWORD *)v1854 + 22) = 0;
  *((_DWORD *)v1854 + 23) = shared_owners_high;
  v1854[8] = &unk_1E42BE458;
  v1854[9] = "";
  v1854[5] = 0;
  v1854[6] = 0;
  *((_DWORD *)v1854 + 14) = 0;
  v1854[10] = 0x100000001;
  v1854[12] = 0x100000001;
  v1854[14] = 0;
  v1854[15] = 0;
  v1854[3] = &off_1E42BE438;
  v1854[4] = 0;
  *((_DWORD *)v1854 + 32) = shared_owners;
  v1854[17] = v1851 + 1;
  v1854[18] = v1851;
  do
    v1860 = __ldxr(v1852);
  while (__stxr(v1860 + 1, v1852));
  *((_WORD *)v1854 + 76) = 0;
  *((_BYTE *)v1854 + 154) = 1;
  v1854[20] = v1849 + 24;
  v1854[21] = v1849;
  do
    v1861 = __ldxr(v1850);
  while (__stxr(v1861 + 1, v1850));
  v1854[13] = v1851[1].__shared_weak_owners_;
  do
    v1862 = __ldaxr(v1852);
  while (__stlxr(v1862 - 1, v1852));
  if (!v1862)
  {
    ((void (*)(std::__shared_weak_count *))v1851->__on_zero_shared)(v1851);
    std::__shared_weak_count::__release_weak(v1851);
  }
  *(_QWORD *)(a1 + 1872) = v1856;
  v1863 = *(std::__shared_weak_count **)(a1 + 1880);
  *(_QWORD *)(a1 + 1880) = v1855;
  if (v1863)
  {
    v1864 = (unint64_t *)&v1863->__shared_owners_;
    do
      v1865 = __ldaxr(v1864);
    while (__stlxr(v1865 - 1, v1864));
    if (!v1865)
    {
      ((void (*)(std::__shared_weak_count *))v1863->__on_zero_shared)(v1863);
      std::__shared_weak_count::__release_weak(v1863);
    }
  }
  v1866 = (std::__shared_weak_count *)operator new(0x60uLL);
  v1866->__shared_owners_ = 0;
  v1867 = (unint64_t *)&v1866->__shared_owners_;
  v1866->__shared_weak_owners_ = 0;
  v1866->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  v1868 = ggl::TextureData2D::TextureData2D((uint64_t)&v1866[1], 1, 1, 1u, 2, 0);
  v2086 = v1866 + 1;
  v2087 = v1866;
  *(_BYTE *)((uint64_t (*)(_QWORD *, _QWORD))v1866[1].__on_zero_shared)(v1868, 0) = 0;
  v1869 = operator new(0xB0uLL);
  v1870 = v1869;
  v1869[1] = 0;
  v1869[2] = 0;
  v1871 = (char *)(v1869 + 3);
  *v1869 = &off_1E42E53B0;
  do
    v1872 = __ldxr(v1867);
  while (__stxr(v1872 + 1, v1867));
  v1869[13] = 0;
  v1874 = v1866[1].__shared_owners_;
  v1873 = HIDWORD(v1866[1].__shared_owners_);
  *((_DWORD *)v1869 + 22) = 0;
  *((_DWORD *)v1869 + 23) = v1873;
  v1869[5] = 0;
  v1869[6] = 0;
  *((_DWORD *)v1869 + 14) = 0;
  v1869[10] = 0x100000001;
  v1869[12] = 0x100000001;
  v1869[14] = 0;
  v1869[15] = 0;
  v1869[3] = &off_1E42BE438;
  v1869[4] = 0;
  v1869[8] = &unk_1E42BE458;
  v1869[9] = "";
  *((_DWORD *)v1869 + 32) = v1874;
  v1869[17] = v1866 + 1;
  v1869[18] = v1866;
  do
    v1875 = __ldxr(v1867);
  while (__stxr(v1875 + 1, v1867));
  *((_WORD *)v1869 + 76) = 0;
  *((_BYTE *)v1869 + 154) = 1;
  v1876 = *(_QWORD *)&v2080[8];
  v1869[20] = *(_QWORD *)v2080;
  v1869[21] = v1876;
  if (v1876)
  {
    v1877 = (unint64_t *)(v1876 + 8);
    do
      v1878 = __ldxr(v1877);
    while (__stxr(v1878 + 1, v1877));
  }
  v1869[13] = v1866[1].__shared_weak_owners_;
  do
    v1879 = __ldaxr(v1867);
  while (__stlxr(v1879 - 1, v1867));
  if (!v1879)
  {
    ((void (*)(std::__shared_weak_count *))v1866->__on_zero_shared)(v1866);
    std::__shared_weak_count::__release_weak(v1866);
  }
  *(_QWORD *)(a1 + 1888) = v1871;
  v1880 = *(std::__shared_weak_count **)(a1 + 1896);
  *(_QWORD *)(a1 + 1896) = v1870;
  if (v1880)
  {
    v1881 = (unint64_t *)&v1880->__shared_owners_;
    do
      v1882 = __ldaxr(v1881);
    while (__stlxr(v1882 - 1, v1881));
    if (!v1882)
    {
      ((void (*)(std::__shared_weak_count *))v1880->__on_zero_shared)(v1880);
      std::__shared_weak_count::__release_weak(v1880);
    }
  }
  v1883 = v2087;
  if (v2087)
  {
    v1884 = (unint64_t *)&v2087->__shared_owners_;
    do
      v1885 = __ldaxr(v1884);
    while (__stlxr(v1885 - 1, v1884));
    if (!v1885)
    {
      ((void (*)(std::__shared_weak_count *))v1883->__on_zero_shared)(v1883);
      std::__shared_weak_count::__release_weak(v1883);
    }
  }
  v1886 = (std::__shared_weak_count *)*((_QWORD *)&v2090 + 1);
  if (*((_QWORD *)&v2090 + 1))
  {
    v1887 = (unint64_t *)(*((_QWORD *)&v2090 + 1) + 8);
    do
      v1888 = __ldaxr(v1887);
    while (__stlxr(v1888 - 1, v1887));
    if (!v1888)
    {
      ((void (*)(std::__shared_weak_count *))v1886->__on_zero_shared)(v1886);
      std::__shared_weak_count::__release_weak(v1886);
    }
  }
  v1889 = *(std::__shared_weak_count **)&v2080[8];
  if (*(_QWORD *)&v2080[8])
  {
    v1890 = (unint64_t *)(*(_QWORD *)&v2080[8] + 8);
    do
      v1891 = __ldaxr(v1890);
    while (__stlxr(v1891 - 1, v1890));
    if (!v1891)
    {
      ((void (*)(std::__shared_weak_count *))v1889->__on_zero_shared)(v1889);
      std::__shared_weak_count::__release_weak(v1889);
    }
  }
  v1892 = v2089;
  if (v2089)
  {
    v1893 = (unint64_t *)&v2089->__shared_owners_;
    do
      v1894 = __ldaxr(v1893);
    while (__stlxr(v1894 - 1, v1893));
    if (!v1894)
    {
      ((void (*)(std::__shared_weak_count *))v1892->__on_zero_shared)(v1892);
      std::__shared_weak_count::__release_weak(v1892);
    }
  }
  return a1;
}

void sub_19FDBF8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char **a11, uint64_t *a12, uint64_t a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, uint64_t *a17, uint64_t *a18, md::LabelRenderModel *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t *a23,uint64_t *a24,uint64_t *a25,uint64_t *a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,uint64_t *a30,uint64_t *a31,uint64_t *a32,uint64_t *a33,uint64_t *a34,uint64_t *a35,uint64_t *a36,uint64_t a37,uint64_t a38,uint64_t **a39,uint64_t **a40,uint64_t **a41,md::LabelRenderDeviceBuffer *a42,md::LabelRenderDeviceBuffer *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  _QWORD *v52;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v54 = (_QWORD *)v50[11];
  if (v54 == v52)
  {
    v55 = 4;
  }
  else
  {
    if (!v54)
    {
      v56 = *v51;
      if (*v51)
        goto LABEL_16;
      goto LABEL_5;
    }
    v55 = 5;
    v52 = (_QWORD *)v50[11];
  }
  (*(void (**)(_QWORD *))(*v52 + 8 * v55))(v52);
  v56 = *v51;
  if (*v51)
  {
LABEL_16:
    v50[5] = v56;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v50[7] + 40))(v50[7], v56, v50[6] - v56);
    v57 = *v50;
    if (!*v50)
    {
LABEL_7:
      v58 = (unint64_t *)STACK[0x468];
      if ((unint64_t *)STACK[0x468] == &STACK[0x450])
      {
        v59 = 4;
        v58 = &STACK[0x450];
      }
      else
      {
        if (!v58)
          goto LABEL_12;
        v59 = 5;
      }
      (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_12:
      v60 = (unint64_t *)STACK[0x488];
      if ((unint64_t *)STACK[0x488] == &STACK[0x470])
      {
        v61 = 4;
        v60 = &STACK[0x470];
      }
      else
      {
        if (!v60)
          goto LABEL_21;
        v61 = 5;
      }
      (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_21:
      MEMORY[0x1A1AF4E00](v50, 0x10A0C40D234DDC7);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x420]);
      STACK[0x380] = v49 + 848;
      STACK[0x370] = v49 + 864;
      STACK[0x360] = v49 + 880;
      STACK[0x350] = v49 + 896;
      STACK[0x340] = v49 + 912;
      STACK[0x330] = v49 + 928;
      STACK[0x320] = v49 + 944;
      STACK[0x310] = v49 + 960;
      STACK[0x300] = v49 + 976;
      STACK[0x2F0] = v49 + 1008;
      STACK[0x2E0] = v49 + 1024;
      STACK[0x2D0] = v49 + 1168;
      STACK[0x2C0] = v49 + 1184;
      STACK[0x2B0] = v49 + 1200;
      STACK[0x2A0] = v49 + 1216;
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v49 + 1888);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v49 + 1872);
      std::unique_ptr<md::LabelRenderer::LabelMeshRenderStateSet>::~unique_ptr[abi:nn180100](a39);
      std::unique_ptr<md::LabelRenderer::LabelMeshRenderStateSet>::~unique_ptr[abi:nn180100](a40);
      std::unique_ptr<md::LabelRenderer::LabelMeshRenderStateSet>::~unique_ptr[abi:nn180100](a41);
      std::vector<ggl::Texture2DLoadItem,geo::StdAllocator<ggl::Texture2DLoadItem,mdm::Allocator>>::~vector[abi:nn180100](a11);
      md::LabelRenderDeviceBuffer::~LabelRenderDeviceBuffer(a42);
      md::LabelRenderDeviceBuffer::~LabelRenderDeviceBuffer(a43);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v49 + 1472);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a44);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a45);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a46);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v49 + 1408);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v49 + 1392);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v49 + 1376);
      ggl::Mesh::~Mesh((ggl::Mesh *)(v49 + 1232));
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x2A0]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x2B0]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x2C0]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x2D0]);
      ggl::Mesh::~Mesh((ggl::Mesh *)STACK[0x2E0]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x2F0]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a38);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x300]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x310]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x320]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x330]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x340]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x350]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x360]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x370]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x380]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v49 + 832);
      md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a37);
      md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a13);
      md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::~DaVinciPipelineStateManager(a49);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v49 + 456);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a23);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a24);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a25);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a26);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a27);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a28);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a29);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a34);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a35);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a36);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a30);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a31);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a32);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a33);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a12);
      v62 = *a14;
      if (*a14)
      {
        *(_QWORD *)(v49 + 232) = v62;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v49 + 248) + 40))(*(_QWORD *)(v49 + 248), v62, *(_QWORD *)(v49 + 240) - v62);
      }
      v63 = *a15;
      if (*a15)
      {
        *(_QWORD *)(v49 + 200) = v63;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v49 + 216) + 40))(*(_QWORD *)(v49 + 216), v63, *(_QWORD *)(v49 + 208) - v63);
      }
      v64 = *a16;
      if (*a16)
      {
        *(_QWORD *)(v49 + 168) = v64;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v49 + 184) + 40))(*(_QWORD *)(v49 + 184), v64, *(_QWORD *)(v49 + 176) - v64);
      }
      v65 = *a17;
      if (*a17)
      {
        *(_QWORD *)(v49 + 136) = v65;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v49 + 152) + 40))(*(_QWORD *)(v49 + 152), v65, *(_QWORD *)(v49 + 144) - v65);
      }
      v66 = *a18;
      if (*a18)
      {
        *(_QWORD *)(v49 + 104) = v66;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v49 + 120) + 40))(*(_QWORD *)(v49 + 120), v66, *(_QWORD *)(v49 + 112) - v66);
      }
      md::LabelRenderModel::~LabelRenderModel(a19);
      _Unwind_Resume(a1);
    }
LABEL_6:
    v50[1] = v57;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v50[3] + 40))(v50[3], v57, v50[2] - v57);
    goto LABEL_7;
  }
LABEL_5:
  v57 = *v50;
  if (!*v50)
    goto LABEL_7;
  goto LABEL_6;
}

_QWORD *md::LabelRenderer::onMaxHaloSizeDidChange(_QWORD *this)
{
  unsigned int v1;
  _QWORD *v2;
  unint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = (float)(*(float *)(*(_QWORD *)(*this + 8) + 176) * (float)*(unsigned int *)(*this + 52));
  v2 = (_QWORD *)this[124];
  v3 = v2[1];
  v5 = v2[8];
  v4 = (_DWORD *)v2[9];
  if (v5 <= v3)
    v5 = v2[1];
  v4[1] = v1;
  v4[2] = v1;
  v4[3] = v1;
  if (v5 > v3)
    v3 = v5;
  v2[7] = 0;
  v2[8] = v3;
  v6 = (_QWORD *)this[126];
  v7 = v6[1];
  v8 = v6[8];
  *(_DWORD *)(v6[9] + 4) = v1;
  if (v8 <= v7)
    v9 = v7;
  else
    v9 = v8;
  v6[7] = 0;
  v6[8] = v9;
  v10 = v6[9];
  *(_DWORD *)(v10 + 8) = v1;
  *(_DWORD *)(v10 + 12) = v1;
  if (v9 <= v7)
    v11 = v7;
  else
    v11 = v9;
  v6[8] = v11;
  return this;
}

uint64_t **std::unique_ptr<md::LabelRenderer::LabelMeshRenderStateSet>::~unique_ptr[abi:nn180100](uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = v2[3];
    v2[3] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v2[2];
    v2[2] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v2[1];
    v2[1] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *v2;
    *v2 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    MEMORY[0x1A1AF4E00](v2, 0x20C40DC1BFBCFLL);
  }
  return a1;
}

char **std::vector<ggl::Texture2DLoadItem,geo::StdAllocator<ggl::Texture2DLoadItem,mdm::Allocator>>::~vector[abi:nn180100](char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v2 = *a1;
  if (!*a1)
    return a1;
  v3 = a1[1];
  v4 = *a1;
  if (v3 == v2)
    goto LABEL_15;
  v5 = v3 - 32;
  do
  {
    v7 = (char *)*((_QWORD *)v5 + 3);
    if (v5 == v7)
    {
      v7 = v5;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_10;
      v8 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_10:
    if (*(v5 - 28))
      *(v5 - 28) = 0;
    if (*(v5 - 32))
      *(v5 - 32) = 0;
    v6 = v5 - 48;
    v5 -= 80;
  }
  while (v6 != v2);
  v4 = *a1;
LABEL_15:
  a1[1] = v2;
  (*(void (**)(char *, char *, int64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  return a1;
}

void md::LabelRenderDeviceBuffer::~LabelRenderDeviceBuffer(md::LabelRenderDeviceBuffer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16), v2, *((_QWORD *)this + 15) - v2);
  }
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (!v6)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v9)
      return;
  }
  else
  {
LABEL_13:
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v9)
      return;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void md::LabelRenderModel::~LabelRenderModel(md::LabelRenderModel *this)
{
  uint64_t v2;
  uint64_t v3;
  gdc::Registry *v4;

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v2, *((_QWORD *)this + 7) - v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v3, *((_QWORD *)this + 3) - v3);
  }
  v4 = *(gdc::Registry **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    gdc::Registry::~Registry(v4);
    MEMORY[0x1A1AF4E00]();
  }
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon21WaypointPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon21WaypointPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7478;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_14,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_14>,ggl::Icon::WaypointPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_14,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_14>,ggl::Icon::WaypointPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42799A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_14,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_14>,ggl::Icon::WaypointPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42799A8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_14,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_14>,ggl::Icon::WaypointPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 1216);
  v5 = *(std::__shared_weak_count **)(v1 + 1224);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BBAD8;
  return v3;
}

void std::__shared_ptr_emplace<ggl::Icon::WaypointPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4380;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Icon::WaypointPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4380;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Icon::WaypointPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Icon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E02C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Icon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E02C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Icon::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon23MaskedIconPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon23MaskedIconPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D74C0;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_13,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_13>,ggl::Icon::MaskedIconPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_13,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_13>,ggl::Icon::MaskedIconPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279960;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_13,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_13>,ggl::Icon::MaskedIconPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4279960;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_13,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_13>,ggl::Icon::MaskedIconPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 1200);
  v5 = *(std::__shared_weak_count **)(v1 + 1208);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BBB28;
  return v3;
}

void std::__shared_ptr_emplace<ggl::Icon::MaskedIconPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E43B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Icon::MaskedIconPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E43B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Icon::MaskedIconPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon19ShadowPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon19ShadowPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427D428;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon19ShadowPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427D428;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_12,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_12>,ggl::Icon::ShadowPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_12,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_12>,ggl::Icon::ShadowPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279918;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_12,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_12>,ggl::Icon::ShadowPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4279918;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_12,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_12>,ggl::Icon::ShadowPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 1184);
  v5 = *(std::__shared_weak_count **)(v1 + 1192);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42747F8;
  return v3;
}

void std::__shared_ptr_emplace<ggl::Icon::ShadowPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Icon::ShadowPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A258;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Icon::ShadowPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon17IconPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon17IconPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7430;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_11,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_11>,ggl::Icon::IconPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_11,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_11>,ggl::Icon::IconPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CAF40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_11,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_11>,ggl::Icon::IconPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CAF40;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_11,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_11>,ggl::Icon::IconPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 1168);
  v5 = *(std::__shared_weak_count **)(v1 + 1176);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BBA88;
  return v3;
}

void std::__shared_ptr_emplace<ggl::Icon::IconPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4348;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Icon::IconPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4348;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Icon::IconPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0410;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_24ColorGlyphWithNormalHalo20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_24ColorGlyphWithNormalHalo20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D70D0;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_10,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_10>,ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_10,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_10>,ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CAEF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_10,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_10>,ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CAEF8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_10,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_10>,ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 832);
  v5 = *(std::__shared_weak_count **)(v1 + 840);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BB240;
  return v3;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_9,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_9>,ggl::GlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_9,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_9>,ggl::GlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CAEB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_9,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_9>,ggl::GlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CAEB0;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_9,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_9>,ggl::GlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  md::LabelPipelineStateManager<ggl::GlyphWithNormalHalo::DefaultPipelineState,std::shared_ptr<ggl::GlyphWithNormalHaloShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v13, v1 + 472, 0, 0, 1, 1u, 0);
  v3 = v13;
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v3, (uint64_t)v4);
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v13, 0);
  }
  *v2 = &off_1E42BA8D8;
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v2;
}

void sub_19FDC19A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void md::LabelPipelineStateManager<ggl::GlyphWithNormalHalo::DefaultPipelineState,std::shared_ptr<ggl::GlyphWithNormalHaloShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(_QWORD *a1, uint64_t a2, unsigned __int8 a3, unsigned __int8 a4, char a5, unsigned __int8 a6, char a7)
{
  unint64_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int32x4_t v17;
  int8x16_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t **v27;
  uint64_t **v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  __int128 v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t **v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v51;
  __int128 v53;
  __int128 v54;

  LOWORD(v8) = a3;
  WORD1(v8) = a4;
  BYTE4(v8) = a7;
  BYTE5(v8) = a5;
  HIWORD(v8) = a6;
  v9 = vceqzq_s8((int8x16_t)v8);
  v10 = vmovl_s8(*(int8x8_t *)v9.i8);
  v11 = vmovl_high_s16(v10);
  v12.i64[0] = v11.u32[2];
  v12.i64[1] = v11.u32[3];
  v13 = v12;
  v14 = vmovl_high_s8(v9);
  v15 = vmovl_high_s16(v14);
  v12.i64[0] = v15.u32[2];
  v12.i64[1] = v15.u32[3];
  v16 = v12;
  v17 = vmovl_s16(*(int16x4_t *)v10.i8);
  v12.i64[0] = v17.u32[2];
  v12.i64[1] = v17.u32[3];
  v18 = v12;
  v19 = vmovl_s16(*(int16x4_t *)v14.i8);
  v12.i64[0] = v19.u32[2];
  v12.i64[1] = v19.u32[3];
  v20 = v12;
  v12.i64[0] = v11.u32[0];
  v12.i64[1] = v11.u32[1];
  v21 = v12;
  v12.i64[0] = v15.u32[0];
  v12.i64[1] = v15.u32[1];
  v22 = v12;
  v12.i64[0] = v17.u32[0];
  v12.i64[1] = v17.u32[1];
  v23 = v12;
  v12.i64[0] = v19.u32[0];
  v12.i64[1] = v19.u32[1];
  v24 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v23), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v12)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30B0, v21), vbicq_s8((int8x16_t)xmmword_19FFB30C0, v22))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3090, v18), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v20)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3070, v13), vbicq_s8((int8x16_t)xmmword_19FFB3080, v16)))));
  v25 = v24;
  v27 = (uint64_t **)(a2 + 104);
  v26 = *(_QWORD **)(a2 + 104);
  if (!v26)
    goto LABEL_12;
  v28 = (uint64_t **)(a2 + 104);
  do
  {
    v29 = v26[4];
    v30 = v29 >= v24;
    if (v29 >= v24)
      v31 = v26;
    else
      v31 = v26 + 1;
    if (v30)
      v28 = (uint64_t **)v26;
    v26 = (_QWORD *)*v31;
  }
  while (*v31);
  if (v28 != v27 && v24 >= (unint64_t)v28[4])
  {
    *a1 = v28[5];
    v47 = v28[6];
    a1[1] = v47;
    if (v47)
    {
      v48 = (unint64_t *)(v47 + 1);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
  }
  else
  {
LABEL_12:
    v51 = a2 + 48;
    v36 = (std::__shared_weak_count *)operator new(0x198uLL);
    v36->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    v36->__shared_weak_owners_ = 0;
    v36->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3708;
    v38 = *(_OWORD *)(a2 + 32);
    v53 = *(_OWORD *)(a2 + 16);
    v54 = v38;
    ggl::GlyphWithNormalHalo::DefaultPipelineState::DefaultPipelineState((uint64_t)&v36[1], (_QWORD *)a2, v51, &v53, a3, a4, 0, a7, a5, a6);
    *a1 = v36 + 1;
    a1[1] = v36;
    *(_QWORD *)&v53 = v25;
    *((_QWORD *)&v53 + 1) = v36 + 1;
    *(_QWORD *)&v54 = v36;
    do
      v39 = __ldxr(p_shared_owners);
    while (__stxr(v39 + 1, p_shared_owners));
    v40 = *v27;
    v41 = v27;
    if (*v27)
    {
      while (1)
      {
        while (1)
        {
          v41 = (uint64_t **)v40;
          v42 = v40[4];
          if (v25 >= v42)
            break;
          v40 = *v41;
          v27 = v41;
          if (!*v41)
            goto LABEL_21;
        }
        if (v42 >= v25)
          goto LABEL_24;
        v40 = v41[1];
        if (!v40)
        {
          v27 = v41 + 1;
          break;
        }
      }
    }
LABEL_21:
    v43 = (uint64_t *)operator new(0x38uLL);
    v43[4] = v25;
    v43[5] = (uint64_t)&v36[1];
    v43[6] = (uint64_t)v36;
    *((_QWORD *)&v53 + 1) = 0;
    *(_QWORD *)&v54 = 0;
    *v43 = 0;
    v43[1] = 0;
    v43[2] = (uint64_t)v41;
    *v27 = v43;
    v44 = **(_QWORD **)(a2 + 96);
    if (v44)
    {
      *(_QWORD *)(a2 + 96) = v44;
      v43 = *v27;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v43);
    ++*(_QWORD *)(a2 + 112);
    v36 = (std::__shared_weak_count *)v54;
    if ((_QWORD)v54)
    {
LABEL_24:
      v45 = (unint64_t *)&v36->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
}

void sub_19FDC1CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  md::components::Material::~Material((md::components::Material *)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_19GlyphWithNormalHalo20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_19GlyphWithNormalHalo20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6D28;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_8,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_8>,ggl::GlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_8,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_8>,ggl::GlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CAE68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_8,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_8>,ggl::GlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CAE68;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_8,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_8>,ggl::GlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 848);
  v5 = *(std::__shared_weak_count **)(v1 + 856);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BA8D8;
  return v3;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d21RaymarchPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d21RaymarchPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D79D0;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_7,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_7>,ggl::Glyph3d::RaymarchPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_7,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_7>,ggl::Glyph3d::RaymarchPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CAE20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_7,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_7>,ggl::Glyph3d::RaymarchPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CAE20;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_7,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_7>,ggl::Glyph3d::RaymarchPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 976);
  v5 = *(std::__shared_weak_count **)(v1 + 984);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BCAC0;
  return v3;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d29LowPrecisionHaloPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d29LowPrecisionHaloPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7A60;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_6,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_6>,ggl::Glyph3d::LowPrecisionHaloPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_6,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_6>,ggl::Glyph3d::LowPrecisionHaloPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CADD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_6,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_6>,ggl::Glyph3d::LowPrecisionHaloPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CADD8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_6,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_6>,ggl::Glyph3d::LowPrecisionHaloPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 960);
  v5 = *(std::__shared_weak_count **)(v1 + 968);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BCB60;
  return v3;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d25LowPrecisionPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d25LowPrecisionPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7A18;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_5,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_5>,ggl::Glyph3d::LowPrecisionPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_5,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_5>,ggl::Glyph3d::LowPrecisionPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CAD90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_5,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_5>,ggl::Glyph3d::LowPrecisionPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CAD90;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_5,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_5>,ggl::Glyph3d::LowPrecisionPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 944);
  v5 = *(std::__shared_weak_count **)(v1 + 952);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BCB10;
  return v3;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7988;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_4,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_4>,ggl::Glyph3d::DefaultPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_4,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_4>,ggl::Glyph3d::DefaultPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CAD48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_4,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_4>,ggl::Glyph3d::DefaultPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CAD48;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_4,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_4>,ggl::Glyph3d::DefaultPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 928);
  v5 = *(std::__shared_weak_count **)(v1 + 936);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BCA70;
  return v3;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8SDFGlyph24SuperSamplePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8SDFGlyph24SuperSamplePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7B38;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_3,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_3>,ggl::SDFGlyph::SuperSamplePipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_3,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_3>,ggl::SDFGlyph::SuperSamplePipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CAD00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_3,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_3>,ggl::SDFGlyph::SuperSamplePipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CAD00;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_3,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_3>,ggl::SDFGlyph::SuperSamplePipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 912);
  v5 = *(std::__shared_weak_count **)(v1 + 920);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BCD98;
  return v3;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8SDFGlyph17HaloPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8SDFGlyph17HaloPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7AA8;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_2,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_2>,ggl::SDFGlyph::HaloPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_2,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_2>,ggl::SDFGlyph::HaloPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CACB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_2,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_2>,ggl::SDFGlyph::HaloPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CACB8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_2,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_2>,ggl::SDFGlyph::HaloPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 896);
  v5 = *(std::__shared_weak_count **)(v1 + 904);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BCCF8;
  return v3;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8SDFGlyph20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8SDFGlyph20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7AF0;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_1,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_1>,ggl::SDFGlyph::DefaultPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_1,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_1>,ggl::SDFGlyph::DefaultPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CAC70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_1,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_1>,ggl::SDFGlyph::DefaultPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CAC70;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_1,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_1>,ggl::SDFGlyph::DefaultPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 880);
  v5 = *(std::__shared_weak_count **)(v1 + 888);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BCD48;
  return v3;
}

void std::__shared_ptr_emplace<ggl::ColorGlyphWithNormalHalo::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3D60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ColorGlyphWithNormalHalo::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3D60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ColorGlyphWithNormalHalo::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::GlyphWithNormalHalo::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3708;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::GlyphWithNormalHalo::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3708;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::GlyphWithNormalHalo::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::Glyph3d::RaymarchPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4E00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Glyph3d::RaymarchPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4E00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Glyph3d::RaymarchPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::Glyph3d::LowPrecisionHaloPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4E70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Glyph3d::LowPrecisionHaloPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4E70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Glyph3d::LowPrecisionHaloPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::Glyph3d::LowPrecisionPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4E38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Glyph3d::LowPrecisionPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4E38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Glyph3d::LowPrecisionPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::Glyph3d::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4DC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Glyph3d::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4DC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Glyph3d::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::SDFGlyph::SuperSamplePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4F88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::SDFGlyph::SuperSamplePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4F88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::SDFGlyph::SuperSamplePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::SDFGlyph::HaloPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4F18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::SDFGlyph::HaloPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4F18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::SDFGlyph::HaloPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::SDFGlyph::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::SDFGlyph::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4F50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::SDFGlyph::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::Glyph::Options>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Glyph::Options>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Glyph::Options>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Glyph::Options>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Glyph::Options>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::Label::Options>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Label::Options>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::Options>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::Options>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2518;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::Options>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::Label::ViewCommon>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Label::ViewCommon>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::ViewCommon>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::ViewCommon>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::ViewCommon>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::Label::ViewInScreenSpace>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Label::ViewInScreenSpace>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::ViewInScreenSpace>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::ViewInScreenSpace>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2470;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::ViewInScreenSpace>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::Label::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Label::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E24E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E24E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_0,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_0>,ggl::RenderItem * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_0,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_0>,ggl::RenderItem * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CAC28;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_0,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_0>,ggl::RenderItem * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CAC28;
}

int64x2_t std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_0,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_0>,ggl::RenderItem * ()(void)>::operator()()
{
  uint64_t v0;
  int64x2_t result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E42B59B0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = "";
  *(_DWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 56) = 1065353216;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v0 + 96) = result;
  *(_QWORD *)(v0 + 112) = 0;
  return result;
}

void md::LabelRenderer::~LabelRenderer(md::LabelRenderer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  gdc::Registry *v168;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 237);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 235);
    if (v5)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 235);
    if (v5)
    {
LABEL_6:
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v8 = (uint64_t *)*((_QWORD *)this + 230);
  *((_QWORD *)this + 230) = 0;
  if (v8)
  {
    v9 = v8[3];
    v8[3] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v8[2];
    v8[2] = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v8[1];
    v8[1] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *v8;
    *v8 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    MEMORY[0x1A1AF4E00](v8, 0x20C40DC1BFBCFLL);
  }
  v13 = (uint64_t *)*((_QWORD *)this + 229);
  *((_QWORD *)this + 229) = 0;
  if (v13)
  {
    v14 = v13[3];
    v13[3] = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v13[2];
    v13[2] = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v13[1];
    v13[1] = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = *v13;
    *v13 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    MEMORY[0x1A1AF4E00](v13, 0x20C40DC1BFBCFLL);
  }
  v18 = (uint64_t *)*((_QWORD *)this + 228);
  *((_QWORD *)this + 228) = 0;
  if (v18)
  {
    v19 = v18[3];
    v18[3] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v18[2];
    v18[2] = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = v18[1];
    v18[1] = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = *v18;
    *v18 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    MEMORY[0x1A1AF4E00](v18, 0x20C40DC1BFBCFLL);
  }
  v23 = (_QWORD *)*((_QWORD *)this + 222);
  if (!v23)
    goto LABEL_56;
  v24 = (_QWORD *)*((_QWORD *)this + 223);
  v25 = *((_QWORD *)this + 222);
  if (v24 == v23)
    goto LABEL_55;
  v26 = v24 - 4;
  do
  {
    v28 = (_QWORD *)v26[3];
    if (v26 == v28)
    {
      v28 = v26;
      v29 = 4;
    }
    else
    {
      if (!v28)
        goto LABEL_50;
      v29 = 5;
    }
    (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_50:
    if (*((_BYTE *)v26 - 28))
      *((_BYTE *)v26 - 28) = 0;
    if (*((_BYTE *)v26 - 32))
      *((_BYTE *)v26 - 32) = 0;
    v27 = v26 - 6;
    v26 -= 10;
  }
  while (v27 != v23);
  v25 = *((_QWORD *)this + 222);
LABEL_55:
  *((_QWORD *)this + 223) = v23;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 225) + 40))(*((_QWORD *)this + 225), v25, *((_QWORD *)this + 224) - v25);
LABEL_56:
  v30 = *((_QWORD *)this + 217);
  if (v30)
  {
    *((_QWORD *)this + 218) = v30;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 220) + 40))(*((_QWORD *)this + 220), v30, *((_QWORD *)this + 219) - v30);
  }
  v31 = *((_QWORD *)this + 216);
  *((_QWORD *)this + 216) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *((_QWORD *)this + 214);
  *((_QWORD *)this + 214) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *((_QWORD *)this + 212);
  *((_QWORD *)this + 212) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = (std::__shared_weak_count *)*((_QWORD *)this + 208);
  if (!v34)
    goto LABEL_68;
  v35 = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v37 = (std::__shared_weak_count *)*((_QWORD *)this + 206);
    if (v37)
    {
LABEL_69:
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  else
  {
LABEL_68:
    v37 = (std::__shared_weak_count *)*((_QWORD *)this + 206);
    if (v37)
      goto LABEL_69;
  }
  v40 = *((_QWORD *)this + 199);
  if (v40)
  {
    *((_QWORD *)this + 200) = v40;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 202) + 40))(*((_QWORD *)this + 202), v40, *((_QWORD *)this + 201) - v40);
  }
  v41 = *((_QWORD *)this + 198);
  *((_QWORD *)this + 198) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *((_QWORD *)this + 196);
  *((_QWORD *)this + 196) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = *((_QWORD *)this + 194);
  *((_QWORD *)this + 194) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)*((_QWORD *)this + 190);
  if (!v44)
    goto LABEL_86;
  v45 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
    v47 = (std::__shared_weak_count *)*((_QWORD *)this + 188);
    if (v47)
    {
LABEL_87:
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
  }
  else
  {
LABEL_86:
    v47 = (std::__shared_weak_count *)*((_QWORD *)this + 188);
    if (v47)
      goto LABEL_87;
  }
  v50 = (std::__shared_weak_count *)*((_QWORD *)this + 185);
  if (!v50)
    goto LABEL_96;
  v51 = (unint64_t *)&v50->__shared_owners_;
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
    v53 = (std::__shared_weak_count *)*((_QWORD *)this + 183);
    if (v53)
    {
LABEL_97:
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
  }
  else
  {
LABEL_96:
    v53 = (std::__shared_weak_count *)*((_QWORD *)this + 183);
    if (v53)
      goto LABEL_97;
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)this + 181);
  if (!v56)
    goto LABEL_106;
  v57 = (unint64_t *)&v56->__shared_owners_;
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
    v59 = (std::__shared_weak_count *)*((_QWORD *)this + 179);
    if (v59)
    {
LABEL_107:
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }
  else
  {
LABEL_106:
    v59 = (std::__shared_weak_count *)*((_QWORD *)this + 179);
    if (v59)
      goto LABEL_107;
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)this + 177);
  if (!v62)
    goto LABEL_116;
  v63 = (unint64_t *)&v62->__shared_owners_;
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
    v65 = (std::__shared_weak_count *)*((_QWORD *)this + 175);
    if (v65)
    {
LABEL_117:
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
  }
  else
  {
LABEL_116:
    v65 = (std::__shared_weak_count *)*((_QWORD *)this + 175);
    if (v65)
      goto LABEL_117;
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)this + 173);
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  ggl::Mesh::~Mesh((md::LabelRenderer *)((char *)this + 1232));
  v71 = (std::__shared_weak_count *)*((_QWORD *)this + 153);
  if (!v71)
    goto LABEL_131;
  v72 = (unint64_t *)&v71->__shared_owners_;
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v73 - 1, v72));
  if (!v73)
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v71);
    v74 = (std::__shared_weak_count *)*((_QWORD *)this + 151);
    if (v74)
    {
LABEL_132:
      v75 = (unint64_t *)&v74->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
  }
  else
  {
LABEL_131:
    v74 = (std::__shared_weak_count *)*((_QWORD *)this + 151);
    if (v74)
      goto LABEL_132;
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)this + 149);
  if (!v77)
    goto LABEL_141;
  v78 = (unint64_t *)&v77->__shared_owners_;
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 - 1, v78));
  if (!v79)
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
    v80 = (std::__shared_weak_count *)*((_QWORD *)this + 147);
    if (v80)
    {
LABEL_142:
      v81 = (unint64_t *)&v80->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
  }
  else
  {
LABEL_141:
    v80 = (std::__shared_weak_count *)*((_QWORD *)this + 147);
    if (v80)
      goto LABEL_142;
  }
  ggl::Mesh::~Mesh((md::LabelRenderer *)((char *)this + 1024));
  v83 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
  if (!v83)
    goto LABEL_151;
  v84 = (unint64_t *)&v83->__shared_owners_;
  do
    v85 = __ldaxr(v84);
  while (__stlxr(v85 - 1, v84));
  if (!v85)
  {
    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
    std::__shared_weak_count::__release_weak(v83);
    v86 = (std::__shared_weak_count *)*((_QWORD *)this + 125);
    if (v86)
    {
LABEL_152:
      v87 = (unint64_t *)&v86->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
  }
  else
  {
LABEL_151:
    v86 = (std::__shared_weak_count *)*((_QWORD *)this + 125);
    if (v86)
      goto LABEL_152;
  }
  v89 = (std::__shared_weak_count *)*((_QWORD *)this + 123);
  if (!v89)
    goto LABEL_161;
  v90 = (unint64_t *)&v89->__shared_owners_;
  do
    v91 = __ldaxr(v90);
  while (__stlxr(v91 - 1, v90));
  if (!v91)
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
    v92 = (std::__shared_weak_count *)*((_QWORD *)this + 121);
    if (v92)
    {
LABEL_162:
      v93 = (unint64_t *)&v92->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
  }
  else
  {
LABEL_161:
    v92 = (std::__shared_weak_count *)*((_QWORD *)this + 121);
    if (v92)
      goto LABEL_162;
  }
  v95 = (std::__shared_weak_count *)*((_QWORD *)this + 119);
  if (!v95)
    goto LABEL_171;
  v96 = (unint64_t *)&v95->__shared_owners_;
  do
    v97 = __ldaxr(v96);
  while (__stlxr(v97 - 1, v96));
  if (!v97)
  {
    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
    std::__shared_weak_count::__release_weak(v95);
    v98 = (std::__shared_weak_count *)*((_QWORD *)this + 117);
    if (v98)
    {
LABEL_172:
      v99 = (unint64_t *)&v98->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
  }
  else
  {
LABEL_171:
    v98 = (std::__shared_weak_count *)*((_QWORD *)this + 117);
    if (v98)
      goto LABEL_172;
  }
  v101 = (std::__shared_weak_count *)*((_QWORD *)this + 115);
  if (!v101)
    goto LABEL_181;
  v102 = (unint64_t *)&v101->__shared_owners_;
  do
    v103 = __ldaxr(v102);
  while (__stlxr(v103 - 1, v102));
  if (!v103)
  {
    ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
    std::__shared_weak_count::__release_weak(v101);
    v104 = (std::__shared_weak_count *)*((_QWORD *)this + 113);
    if (v104)
    {
LABEL_182:
      v105 = (unint64_t *)&v104->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
  }
  else
  {
LABEL_181:
    v104 = (std::__shared_weak_count *)*((_QWORD *)this + 113);
    if (v104)
      goto LABEL_182;
  }
  v107 = (std::__shared_weak_count *)*((_QWORD *)this + 111);
  if (!v107)
    goto LABEL_191;
  v108 = (unint64_t *)&v107->__shared_owners_;
  do
    v109 = __ldaxr(v108);
  while (__stlxr(v109 - 1, v108));
  if (!v109)
  {
    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
    std::__shared_weak_count::__release_weak(v107);
    v110 = (std::__shared_weak_count *)*((_QWORD *)this + 109);
    if (v110)
    {
LABEL_192:
      v111 = (unint64_t *)&v110->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
  }
  else
  {
LABEL_191:
    v110 = (std::__shared_weak_count *)*((_QWORD *)this + 109);
    if (v110)
      goto LABEL_192;
  }
  v113 = (std::__shared_weak_count *)*((_QWORD *)this + 107);
  if (!v113)
    goto LABEL_201;
  v114 = (unint64_t *)&v113->__shared_owners_;
  do
    v115 = __ldaxr(v114);
  while (__stlxr(v115 - 1, v114));
  if (!v115)
  {
    ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
    std::__shared_weak_count::__release_weak(v113);
    v116 = (std::__shared_weak_count *)*((_QWORD *)this + 105);
    if (v116)
    {
LABEL_202:
      v117 = (unint64_t *)&v116->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
  }
  else
  {
LABEL_201:
    v116 = (std::__shared_weak_count *)*((_QWORD *)this + 105);
    if (v116)
      goto LABEL_202;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 102));
  v119 = (std::__shared_weak_count *)*((_QWORD *)this + 90);
  if (v119)
  {
    v120 = (unint64_t *)&v119->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 87));
  v122 = (std::__shared_weak_count *)*((_QWORD *)this + 75);
  if (v122)
  {
    v123 = (unint64_t *)&v122->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 72));
  v125 = (std::__shared_weak_count *)*((_QWORD *)this + 60);
  if (!v125)
    goto LABEL_221;
  v126 = (unint64_t *)&v125->__shared_owners_;
  do
    v127 = __ldaxr(v126);
  while (__stlxr(v127 - 1, v126));
  if (!v127)
  {
    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
    std::__shared_weak_count::__release_weak(v125);
    v128 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
    if (v128)
    {
LABEL_222:
      v129 = (unint64_t *)&v128->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
  }
  else
  {
LABEL_221:
    v128 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
    if (v128)
      goto LABEL_222;
  }
  v131 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v131)
  {
    v132 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v131);
    MEMORY[0x1A1AF4E00](v132, 0x10A0C40D234DDC7);
  }
  v133 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v133)
  {
    v134 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v133);
    MEMORY[0x1A1AF4E00](v134, 0x10A0C40D234DDC7);
  }
  v135 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v135)
  {
    v136 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v135);
    MEMORY[0x1A1AF4E00](v136, 0x10A0C40D234DDC7);
  }
  v137 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v137)
  {
    v138 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v137);
    MEMORY[0x1A1AF4E00](v138, 0x10A0C40D234DDC7);
  }
  v139 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v139)
  {
    v140 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v139);
    MEMORY[0x1A1AF4E00](v140, 0x10A0C40D234DDC7);
  }
  v141 = *((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v141)
  {
    v142 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v141);
    MEMORY[0x1A1AF4E00](v142, 0x10A0C40D234DDC7);
  }
  v143 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v143)
  {
    v144 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v143);
    MEMORY[0x1A1AF4E00](v144, 0x10A0C40D234DDC7);
  }
  v145 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v145)
  {
    v146 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v145);
    MEMORY[0x1A1AF4E00](v146, 0x10A0C40D234DDC7);
  }
  v147 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v147)
  {
    v148 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v147);
    MEMORY[0x1A1AF4E00](v148, 0x10A0C40D234DDC7);
  }
  v149 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v149)
  {
    v150 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v149);
    MEMORY[0x1A1AF4E00](v150, 0x10A0C40D234DDC7);
  }
  v151 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v151)
  {
    v152 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v151);
    MEMORY[0x1A1AF4E00](v152, 0x10A0C40D234DDC7);
  }
  v153 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v153)
  {
    v154 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v153);
    MEMORY[0x1A1AF4E00](v154, 0x10A0C40D234DDC7);
  }
  v155 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v155)
  {
    v156 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v155);
    MEMORY[0x1A1AF4E00](v156, 0x10A0C40D234DDC7);
  }
  v157 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v157)
  {
    v158 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v157);
    MEMORY[0x1A1AF4E00](v158, 0x10A0C40D234DDC7);
  }
  v159 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v159)
  {
    v160 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v159);
    MEMORY[0x1A1AF4E00](v160, 0x10A0C40D234DDC7);
  }
  v161 = *((_QWORD *)this + 28);
  if (v161)
  {
    *((_QWORD *)this + 29) = v161;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 31) + 40))(*((_QWORD *)this + 31), v161, *((_QWORD *)this + 30) - v161);
  }
  v162 = *((_QWORD *)this + 24);
  if (v162)
  {
    *((_QWORD *)this + 25) = v162;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 27) + 40))(*((_QWORD *)this + 27), v162, *((_QWORD *)this + 26) - v162);
  }
  v163 = *((_QWORD *)this + 20);
  if (v163)
  {
    *((_QWORD *)this + 21) = v163;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 23) + 40))(*((_QWORD *)this + 23), v163, *((_QWORD *)this + 22) - v163);
  }
  v164 = *((_QWORD *)this + 16);
  if (v164)
  {
    *((_QWORD *)this + 17) = v164;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 19) + 40))(*((_QWORD *)this + 19), v164, *((_QWORD *)this + 18) - v164);
  }
  v165 = *((_QWORD *)this + 12);
  if (v165)
  {
    *((_QWORD *)this + 13) = v165;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 15) + 40))(*((_QWORD *)this + 15), v165, *((_QWORD *)this + 14) - v165);
  }
  v166 = *((_QWORD *)this + 8);
  if (v166)
  {
    *((_QWORD *)this + 9) = v166;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), v166, *((_QWORD *)this + 10) - v166);
  }
  v167 = *((_QWORD *)this + 4);
  if (v167)
  {
    *((_QWORD *)this + 5) = v167;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v167, *((_QWORD *)this + 6) - v167);
  }
  v168 = (gdc::Registry *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v168)
  {
    gdc::Registry::~Registry(v168);
    MEMORY[0x1A1AF4E00]();
  }
}

gdc::Registry *md::LabelRenderer::endLayout(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  float v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t *v19;
  _QWORD *v25;
  unint64_t v26;
  _WORD *v27;
  _QWORD *v28;
  unint64_t v29;
  _DWORD *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _OWORD *v76;
  __int128 *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _OWORD *v102;
  __int128 *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _OWORD *v128;
  __int128 *v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t *v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  _OWORD *v154;
  __int128 *v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t *v163;
  _QWORD *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  _OWORD *v180;
  __int128 *v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  _QWORD *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  _OWORD *v206;
  __int128 *v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t *v214;
  uint64_t *v215;
  _QWORD *v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  _OWORD *v232;
  __int128 *v233;
  uint64_t v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t *v240;
  uint64_t *v241;
  _QWORD *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  _OWORD *v258;
  __int128 *v259;
  uint64_t v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t *v266;
  uint64_t *v267;
  _QWORD *v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  _OWORD *v284;
  __int128 *v285;
  uint64_t v286;
  __int128 v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t *v292;
  uint64_t *v293;
  _QWORD *v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _QWORD *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  _OWORD *v310;
  __int128 *v311;
  uint64_t v312;
  __int128 v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  uint64_t v319;
  unsigned __int8 **v320;
  _QWORD *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  unint64_t v325;
  uint64_t *v326;
  _QWORD *v327;
  uint64_t *v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  unint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  _QWORD *v343;
  uint64_t v344;
  _OWORD *v345;
  __int128 *v346;
  uint64_t v347;
  __int128 v348;
  uint64_t v349;
  uint64_t v350;
  char *v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  char *v366;
  char *v367;
  char *v368;
  _QWORD *v369;
  uint64_t v370;
  _QWORD *v371;
  _QWORD *v372;
  uint64_t *v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  __int128 *v379;
  _OWORD *v380;
  uint64_t v381;
  __int128 v382;
  uint64_t v383;
  uint64_t *v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  _OWORD *v389;
  __int128 *v390;
  uint64_t v391;
  __int128 v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  char *v397;
  char *v398;
  uint64_t v399;
  int8x16_t *v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t *v404;
  uint64_t *i;
  uint64_t v406;
  uint64_t v407;
  __int16 v408;
  uint64_t v409;
  int8x16_t *v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t *v414;
  uint64_t *j;
  uint64_t v416;
  uint64_t v417;
  __int16 v418;
  uint64_t v419;
  int8x16_t *v420;
  unint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t *v424;
  uint64_t *k;
  uint64_t v426;
  uint64_t v427;
  __int16 v428;
  uint64_t v429;
  int8x16_t *v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t *v434;
  uint64_t *m;
  uint64_t v436;
  uint64_t v437;
  __int16 v438;
  uint64_t v439;
  int8x16_t *v440;
  unint64_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t *v444;
  uint64_t *n;
  uint64_t v446;
  uint64_t v447;
  __int16 v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  unint64_t v454;
  unint64_t v455;
  uint64_t v456;
  unint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *p_shared_owners;
  unint64_t v460;
  uint64_t v461;
  int8x8_t *v462;
  uint64_t v463;
  uint64_t v464;
  int8x8_t *v465;
  uint64_t v466;
  int8x8_t *v467;
  __int16 v468;
  int8x8_t v469;
  uint64_t v470;
  __int16 v471;
  __int16 v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  unint64_t v476;
  uint64_t v477;
  unint64_t v478;
  std::__shared_weak_count *v479;
  unint64_t *v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  unint64_t v487;
  unint64_t v488;
  uint64_t v489;
  unint64_t v490;
  std::__shared_weak_count *v491;
  unint64_t *v492;
  unint64_t v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  _QWORD *v497;
  _QWORD *v498;
  uint64_t *v499;
  unint64_t *v500;
  uint64_t *v501;
  unint64_t *v502;
  _QWORD *v503;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t *v511;
  unsigned __int8 *v512;
  __int128 v513;
  unint64_t v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  unint64_t v519;
  unint64_t v520;
  uint64_t *v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v527;
  int v528;
  int v529;
  int32x2_t v530;
  uint64_t v531;
  _QWORD *v532;
  _QWORD *v533;
  uint64_t *v534;
  unint64_t *v535;
  uint64_t *v536;
  unint64_t *v537;
  _QWORD *v538;
  _BYTE *v540;
  uint64_t v541;
  unint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t *v547;
  uint64_t v548;
  unsigned int v549;
  __int128 v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  uint64_t v554;
  unint64_t v556;
  unint64_t v557;
  uint64_t *v558;
  uint64_t v559;
  unint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v564;
  _QWORD *v565;
  _QWORD *v566;
  uint64_t *v567;
  unint64_t *v568;
  _QWORD *v569;
  unsigned int v570;
  unsigned int v571;
  uint64_t v573;
  _QWORD *v574;
  uint64_t v575;
  _QWORD *v576;
  uint64_t v577;
  uint64_t *v578;
  unint64_t *v579;
  _QWORD *v580;
  uint64_t v581;
  _QWORD *v582;
  uint64_t v583;
  _QWORD *v584;
  uint64_t v585;
  unint64_t *v586;
  uint64_t *v587;
  _QWORD *v588;
  uint64_t v589;
  _QWORD *v590;
  uint64_t v591;
  _QWORD *v592;
  uint64_t v593;
  uint64_t *v594;
  unint64_t *v595;
  _QWORD *v596;
  unint64_t v597;
  unint64_t v598;
  unsigned __int8 *v599;
  _QWORD *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unint64_t v605;
  unsigned __int8 *v606;
  unint64_t v607;
  uint64_t v608;
  uint64_t v609;
  _QWORD *v610;
  uint64_t v611;
  _QWORD *v612;
  _QWORD *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  unint64_t v618;
  unsigned __int8 *v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  _QWORD *v624;
  _QWORD *v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  unint64_t v630;
  unsigned __int8 *v631;
  unint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  _QWORD *v636;
  _QWORD *v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  unint64_t v642;
  unsigned __int8 *v643;
  unint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  _QWORD *v648;
  _QWORD *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  unint64_t v654;
  unsigned __int8 *v655;
  unint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t *v660;
  uint64_t v661;
  unint64_t v662;
  unint64_t v663;
  uint64_t v664;
  unsigned __int8 *v665;
  __int128 v666;
  unint64_t v667;
  uint64_t v668;
  unint64_t v669;
  uint64_t *v670;
  unint64_t v672;
  unint64_t v673;
  unsigned __int8 *v674;
  uint64_t v675;
  unint64_t v676;
  uint64_t *v677;
  uint64_t v679;
  int v680;
  int v681;
  int32x2_t v682;
  uint64_t *v683;
  uint64_t v684;
  unint64_t v685;
  unint64_t v686;
  uint64_t v687;
  _BYTE *v688;
  uint64_t v689;
  unsigned int v690;
  __int128 v691;
  unint64_t v692;
  uint64_t v693;
  unint64_t v694;
  uint64_t *v695;
  unint64_t v697;
  unint64_t v698;
  _BYTE *v699;
  uint64_t v700;
  unint64_t v701;
  uint64_t *v702;
  uint64_t *v704;
  int v705;
  int v706;
  unint64_t v707;
  uint64_t v708;
  unint64_t v709;
  uint64_t v710;
  unint64_t v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  uint64_t v715;
  unint64_t v717;
  unint64_t v718;
  uint64_t v719;
  unint64_t v720;
  unint64_t v721;
  uint64_t v722;
  BOOL v723;
  unsigned __int8 *v724;
  uint64_t v725;
  unint64_t *v726;
  uint64_t *v727;
  _BYTE *v728;
  uint64_t *v729;
  unsigned __int8 *v730;
  unint64_t v731;
  uint64_t v732;
  unint64_t v733;
  uint64_t v734;
  unint64_t v735;
  uint64_t v736;
  uint64_t v737;
  unint64_t v738;
  uint64_t v739;
  unint64_t v741;
  unint64_t v742;
  uint64_t v743;
  unint64_t v744;
  unint64_t v745;
  uint64_t v746;
  BOOL v747;
  unint64_t *v748;
  uint64_t *v749;
  unsigned __int8 *v750;
  uint64_t *v751;
  unint64_t v752;
  uint64_t v753;
  unint64_t v754;
  uint64_t v755;
  unint64_t v756;
  uint64_t v757;
  uint64_t v758;
  unint64_t v759;
  uint64_t v760;
  unint64_t v762;
  unint64_t v763;
  uint64_t v764;
  unint64_t v765;
  unint64_t v766;
  uint64_t v767;
  BOOL v768;
  uint64_t *v769;
  uint64_t v770;
  unint64_t v771;
  uint64_t v772;
  unint64_t v773;
  uint64_t v774;
  unint64_t v775;
  uint64_t v776;
  uint64_t v777;
  unint64_t v778;
  uint64_t v779;
  unint64_t v781;
  unint64_t v782;
  uint64_t v783;
  unint64_t v784;
  unint64_t v785;
  uint64_t v786;
  BOOL v787;
  unint64_t *v788;
  uint64_t *v789;
  uint64_t v790;
  uint64_t *v791;
  unint64_t v792;
  uint64_t v793;
  unint64_t v794;
  uint64_t v795;
  unint64_t v796;
  uint64_t v797;
  uint64_t v798;
  unint64_t v799;
  uint64_t v800;
  unint64_t v802;
  unint64_t v803;
  uint64_t v804;
  unint64_t v805;
  unint64_t v806;
  uint64_t v807;
  BOOL v808;
  uint64_t *v809;
  uint64_t v810;
  unint64_t v811;
  uint64_t v812;
  unint64_t v813;
  uint64_t v814;
  unint64_t v815;
  uint64_t v816;
  uint64_t v817;
  unint64_t v818;
  uint64_t v819;
  unint64_t v821;
  unint64_t v822;
  uint64_t v823;
  unint64_t v824;
  unint64_t v825;
  uint64_t v826;
  BOOL v827;
  unint64_t *v828;
  uint64_t *v829;
  uint64_t v830;
  uint64_t *v831;
  unint64_t v832;
  uint64_t v833;
  unint64_t v834;
  uint64_t v835;
  unint64_t v836;
  uint64_t v837;
  uint64_t v838;
  unint64_t v839;
  uint64_t v840;
  unint64_t v842;
  unint64_t v843;
  uint64_t v844;
  unint64_t v845;
  unint64_t v846;
  uint64_t v847;
  BOOL v848;
  int v849;
  int v850;
  int v851;
  int v852;
  _QWORD *v853;
  _QWORD *v854;
  _QWORD *v855;
  _DWORD *v856;
  _DWORD *v857;
  _DWORD *v858;
  _DWORD *v859;
  _DWORD *v860;
  _DWORD *v861;
  _DWORD *v862;
  _DWORD *v863;
  _DWORD *v864;
  _DWORD *v865;
  _DWORD *v866;
  _DWORD *v867;
  uint64_t v868;
  uint64_t v869;
  _QWORD *v870;
  _QWORD *v871;
  _QWORD *v872;
  _QWORD *v873;
  _QWORD *v874;
  uint64_t v875;
  gdc::Registry *result;
  int v877;
  int v878;
  unint64_t v879;
  uint64_t v880;
  unint64_t v881;
  uint64_t v882;
  unint64_t v883;
  uint64_t v884;
  uint64_t v885;
  unint64_t v886;
  uint64_t v887;
  unint64_t v889;
  unint64_t v890;
  uint64_t v891;
  unint64_t v892;
  unint64_t v893;
  uint64_t v894;
  BOOL v895;
  uint64_t v896;
  uint64_t v897;
  _Unwind_Exception *v898;
  unint64_t v899;
  unint64_t v900;
  uint64_t v901;
  uint64_t v902;
  unint64_t v903;
  uint64_t v904;
  unint64_t v905;
  unint64_t v906;
  uint64_t v907;
  uint64_t v909;
  void *v910;
  _QWORD *v911;
  __int128 v912;
  uint64_t v913;
  __int128 v914;
  __int128 v915;
  uint64_t v916;
  void *v917;
  int v918;
  void **v919;
  uint64_t *v920;
  void *v921;
  char *v922;
  void *__p[2];
  __int128 v924;
  _OWORD v925[2];
  __int128 v926;
  __int128 v927;
  uint64_t v928;
  uint64_t v929;
  int v930;
  uint64_t v931;
  uint64_t v932;

  v6 = a1;
  v909 = (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v910 = (void *)a2;
  *(_QWORD *)(v6 + 1812) = 0;
  v7 = 2.0 / *(float *)(a2 + 1064);
  *(float *)(v6 + 256) = v7;
  *(float *)(v6 + 276) = 2.0 / *(float *)(a2 + 1068);
  v8 = *(_QWORD **)(v6 + 1376);
  v9 = v8[1];
  if (v9)
    v10 = v8[9];
  else
    v10 = 0;
  *(float *)(v10 + 64) = v7;
  *(_DWORD *)(v10 + 68) = *(_DWORD *)(v6 + 260);
  *(_DWORD *)(v10 + 72) = *(_DWORD *)(v6 + 264);
  *(_DWORD *)(v10 + 76) = *(_DWORD *)(v6 + 268);
  *(_DWORD *)(v10 + 80) = *(_DWORD *)(v6 + 272);
  *(_DWORD *)(v10 + 84) = *(_DWORD *)(v6 + 276);
  *(_DWORD *)(v10 + 88) = *(_DWORD *)(v6 + 280);
  *(_DWORD *)(v10 + 92) = *(_DWORD *)(v6 + 284);
  *(_DWORD *)(v10 + 96) = *(_DWORD *)(v6 + 288);
  *(_DWORD *)(v10 + 100) = *(_DWORD *)(v6 + 292);
  *(_DWORD *)(v10 + 104) = *(_DWORD *)(v6 + 296);
  *(_DWORD *)(v10 + 108) = *(_DWORD *)(v6 + 300);
  *(_DWORD *)(v10 + 112) = *(_DWORD *)(v6 + 304);
  *(_DWORD *)(v10 + 116) = *(_DWORD *)(v6 + 308);
  *(_DWORD *)(v10 + 120) = *(_DWORD *)(v6 + 312);
  *(_DWORD *)(v10 + 124) = *(_DWORD *)(v6 + 316);
  if (v10 && v9)
  {
    v11 = v8[8];
    if (v11 <= v9)
      v11 = v9;
    v8[7] = 0;
    v8[8] = v11;
  }
  v12 = vcvt_f32_f64(*(float64x2_t *)(a2 + 624));
  v13 = vcvt_f32_f64(*(float64x2_t *)(a2 + 640));
  v14 = vcvt_f32_f64(*(float64x2_t *)(a2 + 656));
  v15 = vcvt_f32_f64(*(float64x2_t *)(a2 + 672));
  v16 = vcvt_f32_f64(*(float64x2_t *)(a2 + 688));
  v17 = vcvt_f32_f64(*(float64x2_t *)(a2 + 704));
  v18 = vcvt_f32_f64(*(float64x2_t *)(a2 + 720));
  v19 = (float32x2_t *)v8[9];
  *v19 = vcvt_f32_f64(*(float64x2_t *)(a2 + 608));
  v19[1] = v12;
  v19[2] = v13;
  v19[3] = v14;
  v19[4] = v15;
  v19[5] = v16;
  v19[6] = v17;
  v19[7] = v18;
  if (v9)
  {
    if (v8[8] > v9)
      v9 = v8[8];
    v8[7] = 0;
    v8[8] = v9;
  }
  _S0 = *(_DWORD *)(a4 + 20);
  _S1 = *(_DWORD *)(a4 + 24);
  v907 = a4;
  __asm
  {
    FCVT            H0, S0
    FCVT            H1, S1
  }
  v25 = *(_QWORD **)(v6 + 1408);
  v26 = v25[1];
  v27 = (_WORD *)v25[9];
  *v27 = _S0;
  v27[1] = _S1;
  if (v25[8] > v26)
    v26 = v25[8];
  v25[7] = 0;
  v25[8] = v26;
  v28 = *(_QWORD **)(v6 + 1392);
  v29 = v28[1];
  v30 = (_DWORD *)v28[9];
  *v30 = *(_DWORD *)(v6 + 256);
  v30[1] = *(_DWORD *)(v6 + 260);
  v30[2] = *(_DWORD *)(v6 + 264);
  v30[3] = *(_DWORD *)(v6 + 268);
  v30[4] = *(_DWORD *)(v6 + 272);
  v30[5] = *(_DWORD *)(v6 + 276);
  v30[6] = *(_DWORD *)(v6 + 280);
  v30[7] = *(_DWORD *)(v6 + 284);
  v30[8] = *(_DWORD *)(v6 + 288);
  v30[9] = *(_DWORD *)(v6 + 292);
  v30[10] = *(_DWORD *)(v6 + 296);
  v30[11] = *(_DWORD *)(v6 + 300);
  v30[12] = *(_DWORD *)(v6 + 304);
  v30[13] = *(_DWORD *)(v6 + 308);
  v30[14] = *(_DWORD *)(v6 + 312);
  v30[15] = *(_DWORD *)(v6 + 316);
  if (v28[8] > v29)
    v29 = v28[8];
  v28[7] = 0;
  v28[8] = v29;
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v6 + 336));
  v31 = *(uint64_t **)(v6 + 424);
  v32 = (uint64_t *)v31[4];
  v33 = (uint64_t *)v31[5];
  if (v32 != v33)
  {
    v34 = (_QWORD *)v31[1];
    while (1)
    {
      v35 = *v32;
      v36 = v31[2];
      if ((unint64_t)v34 >= v36)
        break;
      if (v34)
        *v34 = v35;
      ++v34;
LABEL_20:
      v31[1] = (uint64_t)v34;
      if (++v32 == v33)
      {
        v56 = v31[4];
        if (v56 != v31[5])
          v31[5] = v56;
        goto LABEL_49;
      }
    }
    v37 = ((uint64_t)v34 - *v31) >> 3;
    if ((unint64_t)(v37 + 1) >> 61)
      goto LABEL_958;
    v38 = v36 - *v31;
    v39 = v38 >> 2;
    if (v38 >> 2 <= (unint64_t)(v37 + 1))
      v39 = v37 + 1;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
      v40 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v40 = v39;
    if (v40)
    {
      v41 = 8 * v40;
      v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v31[3] + 16))(v31[3], 8 * v40, 8);
      v43 = (_QWORD *)(v42 + 8 * v37);
      v40 = v42 + v41;
      if (v42)
        *v43 = v35;
    }
    else
    {
      v43 = (_QWORD *)(8 * v37);
    }
    v45 = *v31;
    v44 = v31[1];
    v46 = v44 - *v31;
    if (v44 == *v31)
    {
      v48 = v43;
      goto LABEL_45;
    }
    v47 = v46 - 8;
    if ((unint64_t)(v46 - 8) < 0x38)
    {
      v48 = v43;
    }
    else
    {
      v48 = v43;
      if ((unint64_t)(v44 - (_QWORD)v43) >= 0x20)
      {
        v49 = (v47 >> 3) + 1;
        v50 = v43 - 2;
        v51 = (__int128 *)(v44 - 16);
        v52 = v49 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v53 = *v51;
          *(v50 - 1) = *(v51 - 1);
          *v50 = v53;
          v50 -= 2;
          v51 -= 2;
          v52 -= 4;
        }
        while (v52);
        v48 = &v43[-(v49 & 0x3FFFFFFFFFFFFFFCLL)];
        v44 -= 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
        if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_44;
      }
    }
    do
    {
      v54 = *(_QWORD *)(v44 - 8);
      v44 -= 8;
      *--v48 = v54;
    }
    while (v44 != v45);
LABEL_44:
    v44 = *v31;
LABEL_45:
    v34 = v43 + 1;
    *v31 = (uint64_t)v48;
    v31[1] = (uint64_t)(v43 + 1);
    v55 = v31[2];
    v31[2] = v40;
    if (v44)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v31[3] + 40))(v31[3], v44, v55 - v44);
    goto LABEL_20;
  }
LABEL_49:
  v57 = *(uint64_t **)(v6 + 432);
  v58 = (uint64_t *)v57[4];
  v59 = (uint64_t *)v57[5];
  if (v58 == v59)
    goto LABEL_81;
  v60 = (_QWORD *)v57[1];
  do
  {
    v61 = *v58;
    v62 = v57[2];
    if ((unint64_t)v60 < v62)
    {
      if (v60)
        *v60 = v61;
      ++v60;
      goto LABEL_52;
    }
    v63 = ((uint64_t)v60 - *v57) >> 3;
    if ((unint64_t)(v63 + 1) >> 61)
      goto LABEL_958;
    v64 = v62 - *v57;
    v65 = v64 >> 2;
    if (v64 >> 2 <= (unint64_t)(v63 + 1))
      v65 = v63 + 1;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
      v66 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v66 = v65;
    if (v66)
    {
      v67 = 8 * v66;
      v68 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57[3] + 16))(v57[3], 8 * v66, 8);
      v69 = (_QWORD *)(v68 + 8 * v63);
      v66 = v68 + v67;
      if (v68)
        *v69 = v61;
    }
    else
    {
      v69 = (_QWORD *)(8 * v63);
    }
    v71 = *v57;
    v70 = v57[1];
    v72 = v70 - *v57;
    if (v70 == *v57)
    {
      v74 = v69;
      goto LABEL_77;
    }
    v73 = v72 - 8;
    if ((unint64_t)(v72 - 8) < 0x38)
    {
      v74 = v69;
    }
    else
    {
      v74 = v69;
      if ((unint64_t)(v70 - (_QWORD)v69) >= 0x20)
      {
        v75 = (v73 >> 3) + 1;
        v76 = v69 - 2;
        v77 = (__int128 *)(v70 - 16);
        v78 = v75 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v79 = *v77;
          *(v76 - 1) = *(v77 - 1);
          *v76 = v79;
          v76 -= 2;
          v77 -= 2;
          v78 -= 4;
        }
        while (v78);
        v74 = &v69[-(v75 & 0x3FFFFFFFFFFFFFFCLL)];
        v70 -= 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
        if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_76;
      }
    }
    do
    {
      v80 = *(_QWORD *)(v70 - 8);
      v70 -= 8;
      *--v74 = v80;
    }
    while (v70 != v71);
LABEL_76:
    v70 = *v57;
LABEL_77:
    v60 = v69 + 1;
    *v57 = (uint64_t)v74;
    v57[1] = (uint64_t)(v69 + 1);
    v81 = v57[2];
    v57[2] = v66;
    if (v70)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57[3] + 40))(v57[3], v70, v81 - v70);
LABEL_52:
    v57[1] = (uint64_t)v60;
    ++v58;
  }
  while (v58 != v59);
  v82 = v57[4];
  if (v82 != v57[5])
    v57[5] = v82;
LABEL_81:
  v83 = *(uint64_t **)(v6 + 448);
  v84 = (uint64_t *)v83[4];
  v85 = (uint64_t *)v83[5];
  if (v84 == v85)
    goto LABEL_113;
  v86 = (_QWORD *)v83[1];
  while (2)
  {
    v87 = *v84;
    v88 = v83[2];
    if ((unint64_t)v86 < v88)
    {
      if (v86)
        *v86 = v87;
      ++v86;
      goto LABEL_84;
    }
    v89 = ((uint64_t)v86 - *v83) >> 3;
    if ((unint64_t)(v89 + 1) >> 61)
      goto LABEL_958;
    v90 = v88 - *v83;
    v91 = v90 >> 2;
    if (v90 >> 2 <= (unint64_t)(v89 + 1))
      v91 = v89 + 1;
    if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
      v92 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v92 = v91;
    if (v92)
    {
      v93 = 8 * v92;
      v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v83[3] + 16))(v83[3], 8 * v92, 8);
      v95 = (_QWORD *)(v94 + 8 * v89);
      v92 = v94 + v93;
      if (v94)
        *v95 = v87;
    }
    else
    {
      v95 = (_QWORD *)(8 * v89);
    }
    v97 = *v83;
    v96 = v83[1];
    v98 = v96 - *v83;
    if (v96 == *v83)
    {
      v100 = v95;
      goto LABEL_109;
    }
    v99 = v98 - 8;
    if ((unint64_t)(v98 - 8) < 0x38)
    {
      v100 = v95;
      do
      {
LABEL_107:
        v106 = *(_QWORD *)(v96 - 8);
        v96 -= 8;
        *--v100 = v106;
      }
      while (v96 != v97);
      goto LABEL_108;
    }
    v100 = v95;
    if ((unint64_t)(v96 - (_QWORD)v95) < 0x20)
      goto LABEL_107;
    v101 = (v99 >> 3) + 1;
    v102 = v95 - 2;
    v103 = (__int128 *)(v96 - 16);
    v104 = v101 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v105 = *v103;
      *(v102 - 1) = *(v103 - 1);
      *v102 = v105;
      v102 -= 2;
      v103 -= 2;
      v104 -= 4;
    }
    while (v104);
    v100 = &v95[-(v101 & 0x3FFFFFFFFFFFFFFCLL)];
    v96 -= 8 * (v101 & 0x3FFFFFFFFFFFFFFCLL);
    if (v101 != (v101 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_107;
LABEL_108:
    v96 = *v83;
LABEL_109:
    v86 = v95 + 1;
    *v83 = (uint64_t)v100;
    v83[1] = (uint64_t)(v95 + 1);
    v107 = v83[2];
    v83[2] = v92;
    if (v96)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v83[3] + 40))(v83[3], v96, v107 - v96);
LABEL_84:
    v83[1] = (uint64_t)v86;
    if (++v84 != v85)
      continue;
    break;
  }
  v108 = v83[4];
  if (v108 != v83[5])
    v83[5] = v108;
LABEL_113:
  v109 = *(uint64_t **)(v6 + 376);
  v110 = (uint64_t *)v109[4];
  v111 = (uint64_t *)v109[5];
  if (v110 == v111)
    goto LABEL_145;
  v112 = (_QWORD *)v109[1];
  while (2)
  {
    v113 = *v110;
    v114 = v109[2];
    if ((unint64_t)v112 < v114)
    {
      if (v112)
        *v112 = v113;
      ++v112;
      goto LABEL_116;
    }
    v115 = ((uint64_t)v112 - *v109) >> 3;
    if ((unint64_t)(v115 + 1) >> 61)
      goto LABEL_958;
    v116 = v114 - *v109;
    v117 = v116 >> 2;
    if (v116 >> 2 <= (unint64_t)(v115 + 1))
      v117 = v115 + 1;
    if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
      v118 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v118 = v117;
    if (v118)
    {
      v119 = 8 * v118;
      v120 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v109[3] + 16))(v109[3], 8 * v118, 8);
      v121 = (_QWORD *)(v120 + 8 * v115);
      v118 = v120 + v119;
      if (v120)
        *v121 = v113;
    }
    else
    {
      v121 = (_QWORD *)(8 * v115);
    }
    v123 = *v109;
    v122 = v109[1];
    v124 = v122 - *v109;
    if (v122 == *v109)
    {
      v126 = v121;
      goto LABEL_141;
    }
    v125 = v124 - 8;
    if ((unint64_t)(v124 - 8) < 0x38)
    {
      v126 = v121;
      do
      {
LABEL_139:
        v132 = *(_QWORD *)(v122 - 8);
        v122 -= 8;
        *--v126 = v132;
      }
      while (v122 != v123);
      goto LABEL_140;
    }
    v126 = v121;
    if ((unint64_t)(v122 - (_QWORD)v121) < 0x20)
      goto LABEL_139;
    v127 = (v125 >> 3) + 1;
    v128 = v121 - 2;
    v129 = (__int128 *)(v122 - 16);
    v130 = v127 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v131 = *v129;
      *(v128 - 1) = *(v129 - 1);
      *v128 = v131;
      v128 -= 2;
      v129 -= 2;
      v130 -= 4;
    }
    while (v130);
    v126 = &v121[-(v127 & 0x3FFFFFFFFFFFFFFCLL)];
    v122 -= 8 * (v127 & 0x3FFFFFFFFFFFFFFCLL);
    if (v127 != (v127 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_139;
LABEL_140:
    v122 = *v109;
LABEL_141:
    v112 = v121 + 1;
    *v109 = (uint64_t)v126;
    v109[1] = (uint64_t)(v121 + 1);
    v133 = v109[2];
    v109[2] = v118;
    if (v122)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v109[3] + 40))(v109[3], v122, v133 - v122);
LABEL_116:
    v109[1] = (uint64_t)v112;
    if (++v110 != v111)
      continue;
    break;
  }
  v134 = v109[4];
  if (v134 != v109[5])
    v109[5] = v134;
LABEL_145:
  v135 = *(uint64_t **)(v6 + 392);
  v136 = (uint64_t *)v135[4];
  v137 = (uint64_t *)v135[5];
  if (v136 == v137)
    goto LABEL_177;
  v138 = (_QWORD *)v135[1];
  while (2)
  {
    v139 = *v136;
    v140 = v135[2];
    if ((unint64_t)v138 < v140)
    {
      if (v138)
        *v138 = v139;
      ++v138;
      goto LABEL_148;
    }
    v141 = ((uint64_t)v138 - *v135) >> 3;
    if ((unint64_t)(v141 + 1) >> 61)
      goto LABEL_958;
    v142 = v140 - *v135;
    v143 = v142 >> 2;
    if (v142 >> 2 <= (unint64_t)(v141 + 1))
      v143 = v141 + 1;
    if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
      v144 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v144 = v143;
    if (v144)
    {
      v145 = 8 * v144;
      v146 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v135[3] + 16))(v135[3], 8 * v144, 8);
      v147 = (_QWORD *)(v146 + 8 * v141);
      v144 = v146 + v145;
      if (v146)
        *v147 = v139;
    }
    else
    {
      v147 = (_QWORD *)(8 * v141);
    }
    v149 = *v135;
    v148 = v135[1];
    v150 = v148 - *v135;
    if (v148 == *v135)
    {
      v152 = v147;
      goto LABEL_173;
    }
    v151 = v150 - 8;
    if ((unint64_t)(v150 - 8) < 0x38)
    {
      v152 = v147;
      do
      {
LABEL_171:
        v158 = *(_QWORD *)(v148 - 8);
        v148 -= 8;
        *--v152 = v158;
      }
      while (v148 != v149);
      goto LABEL_172;
    }
    v152 = v147;
    if ((unint64_t)(v148 - (_QWORD)v147) < 0x20)
      goto LABEL_171;
    v153 = (v151 >> 3) + 1;
    v154 = v147 - 2;
    v155 = (__int128 *)(v148 - 16);
    v156 = v153 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v157 = *v155;
      *(v154 - 1) = *(v155 - 1);
      *v154 = v157;
      v154 -= 2;
      v155 -= 2;
      v156 -= 4;
    }
    while (v156);
    v152 = &v147[-(v153 & 0x3FFFFFFFFFFFFFFCLL)];
    v148 -= 8 * (v153 & 0x3FFFFFFFFFFFFFFCLL);
    if (v153 != (v153 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_171;
LABEL_172:
    v148 = *v135;
LABEL_173:
    v138 = v147 + 1;
    *v135 = (uint64_t)v152;
    v135[1] = (uint64_t)(v147 + 1);
    v159 = v135[2];
    v135[2] = v144;
    if (v148)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v135[3] + 40))(v135[3], v148, v159 - v148);
LABEL_148:
    v135[1] = (uint64_t)v138;
    if (++v136 != v137)
      continue;
    break;
  }
  v160 = v135[4];
  if (v160 != v135[5])
    v135[5] = v160;
LABEL_177:
  v161 = *(uint64_t **)(v6 + 384);
  v162 = (uint64_t *)v161[4];
  v163 = (uint64_t *)v161[5];
  if (v162 == v163)
    goto LABEL_209;
  v164 = (_QWORD *)v161[1];
  while (2)
  {
    v165 = *v162;
    v166 = v161[2];
    if ((unint64_t)v164 < v166)
    {
      if (v164)
        *v164 = v165;
      ++v164;
      goto LABEL_180;
    }
    v167 = ((uint64_t)v164 - *v161) >> 3;
    if ((unint64_t)(v167 + 1) >> 61)
      goto LABEL_958;
    v168 = v166 - *v161;
    v169 = v168 >> 2;
    if (v168 >> 2 <= (unint64_t)(v167 + 1))
      v169 = v167 + 1;
    if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFF8)
      v170 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v170 = v169;
    if (v170)
    {
      v171 = 8 * v170;
      v172 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v161[3] + 16))(v161[3], 8 * v170, 8);
      v173 = (_QWORD *)(v172 + 8 * v167);
      v170 = v172 + v171;
      if (v172)
        *v173 = v165;
    }
    else
    {
      v173 = (_QWORD *)(8 * v167);
    }
    v175 = *v161;
    v174 = v161[1];
    v176 = v174 - *v161;
    if (v174 == *v161)
    {
      v178 = v173;
      goto LABEL_205;
    }
    v177 = v176 - 8;
    if ((unint64_t)(v176 - 8) < 0x38)
    {
      v178 = v173;
      do
      {
LABEL_203:
        v184 = *(_QWORD *)(v174 - 8);
        v174 -= 8;
        *--v178 = v184;
      }
      while (v174 != v175);
      goto LABEL_204;
    }
    v178 = v173;
    if ((unint64_t)(v174 - (_QWORD)v173) < 0x20)
      goto LABEL_203;
    v179 = (v177 >> 3) + 1;
    v180 = v173 - 2;
    v181 = (__int128 *)(v174 - 16);
    v182 = v179 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v183 = *v181;
      *(v180 - 1) = *(v181 - 1);
      *v180 = v183;
      v180 -= 2;
      v181 -= 2;
      v182 -= 4;
    }
    while (v182);
    v178 = &v173[-(v179 & 0x3FFFFFFFFFFFFFFCLL)];
    v174 -= 8 * (v179 & 0x3FFFFFFFFFFFFFFCLL);
    if (v179 != (v179 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_203;
LABEL_204:
    v174 = *v161;
LABEL_205:
    v164 = v173 + 1;
    *v161 = (uint64_t)v178;
    v161[1] = (uint64_t)(v173 + 1);
    v185 = v161[2];
    v161[2] = v170;
    if (v174)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v161[3] + 40))(v161[3], v174, v185 - v174);
LABEL_180:
    v161[1] = (uint64_t)v164;
    if (++v162 != v163)
      continue;
    break;
  }
  v186 = v161[4];
  if (v186 != v161[5])
    v161[5] = v186;
LABEL_209:
  v187 = *(uint64_t **)(v6 + 344);
  v188 = (uint64_t *)v187[4];
  v189 = (uint64_t *)v187[5];
  if (v188 == v189)
    goto LABEL_241;
  v190 = (_QWORD *)v187[1];
  while (2)
  {
    v191 = *v188;
    v192 = v187[2];
    if ((unint64_t)v190 < v192)
    {
      if (v190)
        *v190 = v191;
      ++v190;
      goto LABEL_212;
    }
    v193 = ((uint64_t)v190 - *v187) >> 3;
    if ((unint64_t)(v193 + 1) >> 61)
      goto LABEL_958;
    v194 = v192 - *v187;
    v195 = v194 >> 2;
    if (v194 >> 2 <= (unint64_t)(v193 + 1))
      v195 = v193 + 1;
    if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFF8)
      v196 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v196 = v195;
    if (v196)
    {
      v197 = 8 * v196;
      v198 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v187[3] + 16))(v187[3], 8 * v196, 8);
      v199 = (_QWORD *)(v198 + 8 * v193);
      v196 = v198 + v197;
      if (v198)
        *v199 = v191;
    }
    else
    {
      v199 = (_QWORD *)(8 * v193);
    }
    v201 = *v187;
    v200 = v187[1];
    v202 = v200 - *v187;
    if (v200 == *v187)
    {
      v204 = v199;
      goto LABEL_237;
    }
    v203 = v202 - 8;
    if ((unint64_t)(v202 - 8) < 0x38)
    {
      v204 = v199;
      do
      {
LABEL_235:
        v210 = *(_QWORD *)(v200 - 8);
        v200 -= 8;
        *--v204 = v210;
      }
      while (v200 != v201);
      goto LABEL_236;
    }
    v204 = v199;
    if ((unint64_t)(v200 - (_QWORD)v199) < 0x20)
      goto LABEL_235;
    v205 = (v203 >> 3) + 1;
    v206 = v199 - 2;
    v207 = (__int128 *)(v200 - 16);
    v208 = v205 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v209 = *v207;
      *(v206 - 1) = *(v207 - 1);
      *v206 = v209;
      v206 -= 2;
      v207 -= 2;
      v208 -= 4;
    }
    while (v208);
    v204 = &v199[-(v205 & 0x3FFFFFFFFFFFFFFCLL)];
    v200 -= 8 * (v205 & 0x3FFFFFFFFFFFFFFCLL);
    if (v205 != (v205 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_235;
LABEL_236:
    v200 = *v187;
LABEL_237:
    v190 = v199 + 1;
    *v187 = (uint64_t)v204;
    v187[1] = (uint64_t)(v199 + 1);
    v211 = v187[2];
    v187[2] = v196;
    if (v200)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v187[3] + 40))(v187[3], v200, v211 - v200);
LABEL_212:
    v187[1] = (uint64_t)v190;
    if (++v188 != v189)
      continue;
    break;
  }
  v212 = v187[4];
  if (v212 != v187[5])
    v187[5] = v212;
LABEL_241:
  v213 = *(uint64_t **)(v6 + 352);
  v214 = (uint64_t *)v213[4];
  v215 = (uint64_t *)v213[5];
  if (v214 == v215)
    goto LABEL_273;
  v216 = (_QWORD *)v213[1];
  while (2)
  {
    v217 = *v214;
    v218 = v213[2];
    if ((unint64_t)v216 < v218)
    {
      if (v216)
        *v216 = v217;
      ++v216;
      goto LABEL_244;
    }
    v219 = ((uint64_t)v216 - *v213) >> 3;
    if ((unint64_t)(v219 + 1) >> 61)
      goto LABEL_958;
    v220 = v218 - *v213;
    v221 = v220 >> 2;
    if (v220 >> 2 <= (unint64_t)(v219 + 1))
      v221 = v219 + 1;
    if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF8)
      v222 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v222 = v221;
    if (v222)
    {
      v223 = 8 * v222;
      v224 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v213[3] + 16))(v213[3], 8 * v222, 8);
      v225 = (_QWORD *)(v224 + 8 * v219);
      v222 = v224 + v223;
      if (v224)
        *v225 = v217;
    }
    else
    {
      v225 = (_QWORD *)(8 * v219);
    }
    v227 = *v213;
    v226 = v213[1];
    v228 = v226 - *v213;
    if (v226 == *v213)
    {
      v230 = v225;
      goto LABEL_269;
    }
    v229 = v228 - 8;
    if ((unint64_t)(v228 - 8) < 0x38)
    {
      v230 = v225;
      do
      {
LABEL_267:
        v236 = *(_QWORD *)(v226 - 8);
        v226 -= 8;
        *--v230 = v236;
      }
      while (v226 != v227);
      goto LABEL_268;
    }
    v230 = v225;
    if ((unint64_t)(v226 - (_QWORD)v225) < 0x20)
      goto LABEL_267;
    v231 = (v229 >> 3) + 1;
    v232 = v225 - 2;
    v233 = (__int128 *)(v226 - 16);
    v234 = v231 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v235 = *v233;
      *(v232 - 1) = *(v233 - 1);
      *v232 = v235;
      v232 -= 2;
      v233 -= 2;
      v234 -= 4;
    }
    while (v234);
    v230 = &v225[-(v231 & 0x3FFFFFFFFFFFFFFCLL)];
    v226 -= 8 * (v231 & 0x3FFFFFFFFFFFFFFCLL);
    if (v231 != (v231 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_267;
LABEL_268:
    v226 = *v213;
LABEL_269:
    v216 = v225 + 1;
    *v213 = (uint64_t)v230;
    v213[1] = (uint64_t)(v225 + 1);
    v237 = v213[2];
    v213[2] = v222;
    if (v226)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v213[3] + 40))(v213[3], v226, v237 - v226);
LABEL_244:
    v213[1] = (uint64_t)v216;
    if (++v214 != v215)
      continue;
    break;
  }
  v238 = v213[4];
  if (v238 != v213[5])
    v213[5] = v238;
LABEL_273:
  v239 = *(uint64_t **)(v6 + 360);
  v240 = (uint64_t *)v239[4];
  v241 = (uint64_t *)v239[5];
  if (v240 == v241)
    goto LABEL_305;
  v242 = (_QWORD *)v239[1];
  while (2)
  {
    v243 = *v240;
    v244 = v239[2];
    if ((unint64_t)v242 < v244)
    {
      if (v242)
        *v242 = v243;
      ++v242;
      goto LABEL_276;
    }
    v245 = ((uint64_t)v242 - *v239) >> 3;
    if ((unint64_t)(v245 + 1) >> 61)
      goto LABEL_958;
    v246 = v244 - *v239;
    v247 = v246 >> 2;
    if (v246 >> 2 <= (unint64_t)(v245 + 1))
      v247 = v245 + 1;
    if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFF8)
      v248 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v248 = v247;
    if (v248)
    {
      v249 = 8 * v248;
      v250 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v239[3] + 16))(v239[3], 8 * v248, 8);
      v251 = (_QWORD *)(v250 + 8 * v245);
      v248 = v250 + v249;
      if (v250)
        *v251 = v243;
    }
    else
    {
      v251 = (_QWORD *)(8 * v245);
    }
    v253 = *v239;
    v252 = v239[1];
    v254 = v252 - *v239;
    if (v252 == *v239)
    {
      v256 = v251;
      goto LABEL_301;
    }
    v255 = v254 - 8;
    if ((unint64_t)(v254 - 8) < 0x38)
    {
      v256 = v251;
      do
      {
LABEL_299:
        v262 = *(_QWORD *)(v252 - 8);
        v252 -= 8;
        *--v256 = v262;
      }
      while (v252 != v253);
      goto LABEL_300;
    }
    v256 = v251;
    if ((unint64_t)(v252 - (_QWORD)v251) < 0x20)
      goto LABEL_299;
    v257 = (v255 >> 3) + 1;
    v258 = v251 - 2;
    v259 = (__int128 *)(v252 - 16);
    v260 = v257 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v261 = *v259;
      *(v258 - 1) = *(v259 - 1);
      *v258 = v261;
      v258 -= 2;
      v259 -= 2;
      v260 -= 4;
    }
    while (v260);
    v256 = &v251[-(v257 & 0x3FFFFFFFFFFFFFFCLL)];
    v252 -= 8 * (v257 & 0x3FFFFFFFFFFFFFFCLL);
    if (v257 != (v257 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_299;
LABEL_300:
    v252 = *v239;
LABEL_301:
    v242 = v251 + 1;
    *v239 = (uint64_t)v256;
    v239[1] = (uint64_t)(v251 + 1);
    v263 = v239[2];
    v239[2] = v248;
    if (v252)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v239[3] + 40))(v239[3], v252, v263 - v252);
LABEL_276:
    v239[1] = (uint64_t)v242;
    if (++v240 != v241)
      continue;
    break;
  }
  v264 = v239[4];
  if (v264 != v239[5])
    v239[5] = v264;
LABEL_305:
  v265 = *(uint64_t **)(v6 + 368);
  v266 = (uint64_t *)v265[4];
  v267 = (uint64_t *)v265[5];
  if (v266 == v267)
    goto LABEL_337;
  v268 = (_QWORD *)v265[1];
  while (2)
  {
    v269 = *v266;
    v270 = v265[2];
    if ((unint64_t)v268 < v270)
    {
      if (v268)
        *v268 = v269;
      ++v268;
      goto LABEL_308;
    }
    v271 = ((uint64_t)v268 - *v265) >> 3;
    if ((unint64_t)(v271 + 1) >> 61)
      goto LABEL_958;
    v272 = v270 - *v265;
    v273 = v272 >> 2;
    if (v272 >> 2 <= (unint64_t)(v271 + 1))
      v273 = v271 + 1;
    if ((unint64_t)v272 >= 0x7FFFFFFFFFFFFFF8)
      v274 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v274 = v273;
    if (v274)
    {
      v275 = 8 * v274;
      v276 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v265[3] + 16))(v265[3], 8 * v274, 8);
      v277 = (_QWORD *)(v276 + 8 * v271);
      v274 = v276 + v275;
      if (v276)
        *v277 = v269;
    }
    else
    {
      v277 = (_QWORD *)(8 * v271);
    }
    v279 = *v265;
    v278 = v265[1];
    v280 = v278 - *v265;
    if (v278 == *v265)
    {
      v282 = v277;
      goto LABEL_333;
    }
    v281 = v280 - 8;
    if ((unint64_t)(v280 - 8) < 0x38)
    {
      v282 = v277;
      do
      {
LABEL_331:
        v288 = *(_QWORD *)(v278 - 8);
        v278 -= 8;
        *--v282 = v288;
      }
      while (v278 != v279);
      goto LABEL_332;
    }
    v282 = v277;
    if ((unint64_t)(v278 - (_QWORD)v277) < 0x20)
      goto LABEL_331;
    v283 = (v281 >> 3) + 1;
    v284 = v277 - 2;
    v285 = (__int128 *)(v278 - 16);
    v286 = v283 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v287 = *v285;
      *(v284 - 1) = *(v285 - 1);
      *v284 = v287;
      v284 -= 2;
      v285 -= 2;
      v286 -= 4;
    }
    while (v286);
    v282 = &v277[-(v283 & 0x3FFFFFFFFFFFFFFCLL)];
    v278 -= 8 * (v283 & 0x3FFFFFFFFFFFFFFCLL);
    if (v283 != (v283 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_331;
LABEL_332:
    v278 = *v265;
LABEL_333:
    v268 = v277 + 1;
    *v265 = (uint64_t)v282;
    v265[1] = (uint64_t)(v277 + 1);
    v289 = v265[2];
    v265[2] = v274;
    if (v278)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v265[3] + 40))(v265[3], v278, v289 - v278);
LABEL_308:
    v265[1] = (uint64_t)v268;
    if (++v266 != v267)
      continue;
    break;
  }
  v290 = v265[4];
  if (v290 != v265[5])
    v265[5] = v290;
LABEL_337:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v6 + 400));
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(v6 + 408));
  v291 = *(uint64_t **)(v6 + 416);
  v292 = (uint64_t *)v291[4];
  v293 = (uint64_t *)v291[5];
  if (v292 == v293)
    goto LABEL_369;
  v294 = (_QWORD *)v291[1];
  while (2)
  {
    v295 = *v292;
    v296 = v291[2];
    if ((unint64_t)v294 < v296)
    {
      if (v294)
        *v294 = v295;
      ++v294;
      goto LABEL_340;
    }
    v297 = ((uint64_t)v294 - *v291) >> 3;
    if ((unint64_t)(v297 + 1) >> 61)
      goto LABEL_958;
    v298 = v296 - *v291;
    v299 = v298 >> 2;
    if (v298 >> 2 <= (unint64_t)(v297 + 1))
      v299 = v297 + 1;
    if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFF8)
      v300 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v300 = v299;
    if (v300)
    {
      v301 = 8 * v300;
      v302 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v291[3] + 16))(v291[3], 8 * v300, 8);
      v303 = (_QWORD *)(v302 + 8 * v297);
      v300 = v302 + v301;
      if (v302)
        *v303 = v295;
    }
    else
    {
      v303 = (_QWORD *)(8 * v297);
    }
    v305 = *v291;
    v304 = v291[1];
    v306 = v304 - *v291;
    if (v304 == *v291)
    {
      v308 = v303;
      goto LABEL_365;
    }
    v307 = v306 - 8;
    if ((unint64_t)(v306 - 8) < 0x38)
    {
      v308 = v303;
      do
      {
LABEL_363:
        v314 = *(_QWORD *)(v304 - 8);
        v304 -= 8;
        *--v308 = v314;
      }
      while (v304 != v305);
      goto LABEL_364;
    }
    v308 = v303;
    if ((unint64_t)(v304 - (_QWORD)v303) < 0x20)
      goto LABEL_363;
    v309 = (v307 >> 3) + 1;
    v310 = v303 - 2;
    v311 = (__int128 *)(v304 - 16);
    v312 = v309 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v313 = *v311;
      *(v310 - 1) = *(v311 - 1);
      *v310 = v313;
      v310 -= 2;
      v311 -= 2;
      v312 -= 4;
    }
    while (v312);
    v308 = &v303[-(v309 & 0x3FFFFFFFFFFFFFFCLL)];
    v304 -= 8 * (v309 & 0x3FFFFFFFFFFFFFFCLL);
    if (v309 != (v309 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_363;
LABEL_364:
    v304 = *v291;
LABEL_365:
    v294 = v303 + 1;
    *v291 = (uint64_t)v308;
    v291[1] = (uint64_t)(v303 + 1);
    v315 = v291[2];
    v291[2] = v300;
    if (v304)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v291[3] + 40))(v291[3], v304, v315 - v304);
LABEL_340:
    v291[1] = (uint64_t)v294;
    if (++v292 != v293)
      continue;
    break;
  }
  v316 = v291[4];
  if (v316 != v291[5])
    v291[5] = v316;
LABEL_369:
  v317 = (_QWORD *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>(*(_QWORD *)(v6 + 24));
  v318 = v317[7];
  v319 = v317[8];
  if (v318 != v319)
  {
    v320 = (unsigned __int8 **)v317[10];
    while (1)
    {
      v322 = (uint64_t)*v320;
      v323 = v6;
      v324 = (uint64_t *)(v6 + 32 * **v320);
      v326 = v324 + 14;
      v325 = v324[14];
      v328 = v324 + 13;
      v327 = (_QWORD *)v324[13];
      if ((unint64_t)v327 >= v325)
        break;
      if (v327)
        *v327 = v322;
      v321 = v327 + 1;
LABEL_372:
      v6 = v323;
      *v328 = (uint64_t)v321;
      ++v320;
      v318 += 8;
      if (v318 == v319)
        goto LABEL_398;
    }
    v329 = v324 + 12;
    v330 = v324[12];
    v331 = ((uint64_t)v327 - v330) >> 3;
    if ((unint64_t)(v331 + 1) >> 61)
      goto LABEL_958;
    v332 = v324 + 15;
    v333 = v325 - v330;
    v334 = (uint64_t)(v325 - v330) >> 2;
    if (v334 <= v331 + 1)
      v334 = v331 + 1;
    _CF = v333 >= 0x7FFFFFFFFFFFFFF8;
    v335 = 0x1FFFFFFFFFFFFFFFLL;
    if (!_CF)
      v335 = v334;
    v911 = v332;
    if (v335)
    {
      v336 = 8 * v335;
      v337 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v332 + 16))(*v332, 8 * v335, 8);
      v338 = (_QWORD *)(v337 + 8 * v331);
      v335 = v337 + v336;
      if (v337)
        *v338 = v322;
    }
    else
    {
      v338 = (_QWORD *)(8 * v331);
    }
    v339 = *v328;
    v340 = *v329;
    v341 = *v328 - *v329;
    if (*v328 != *v329)
    {
      v342 = v341 - 8;
      if ((unint64_t)(v341 - 8) < 0x38)
      {
        v343 = v338;
      }
      else
      {
        v343 = v338;
        if ((unint64_t)(v339 - (_QWORD)v338) >= 0x20)
        {
          v344 = (v342 >> 3) + 1;
          v345 = v338 - 2;
          v346 = (__int128 *)(v339 - 16);
          v347 = v344 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v348 = *v346;
            *(v345 - 1) = *(v346 - 1);
            *v345 = v348;
            v345 -= 2;
            v346 -= 2;
            v347 -= 4;
          }
          while (v347);
          v343 = &v338[-(v344 & 0x3FFFFFFFFFFFFFFCLL)];
          v339 -= 8 * (v344 & 0x3FFFFFFFFFFFFFFCLL);
          if (v344 == (v344 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_395:
            v339 = *v329;
LABEL_396:
            v321 = v338 + 1;
            *v329 = (uint64_t)v343;
            *v328 = (uint64_t)(v338 + 1);
            v350 = *v326;
            *v326 = v335;
            if (v339)
              (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v911 + 40))(*v911, v339, v350 - v339);
            goto LABEL_372;
          }
        }
      }
      do
      {
        v349 = *(_QWORD *)(v339 - 8);
        v339 -= 8;
        *--v343 = v349;
      }
      while (v339 != v340);
      goto LABEL_395;
    }
    v343 = v338;
    goto LABEL_396;
  }
LABEL_398:
  if (!*(_BYTE *)(v6 + 1848))
  {
    v352 = *(char **)(v6 + 160);
    v351 = *(char **)(v6 + 168);
    v353 = v351 - v352;
    if (v351 - v352 < 1)
      goto LABEL_449;
    v354 = v353 >> 3;
    v356 = *(_QWORD *)(v6 + 128);
    v355 = *(_QWORD *)(v6 + 136);
    v357 = v355 - v356;
    v358 = (uint64_t *)(v356 + ((v355 - v356) & 0xFFFFFFFFFFFFFFF8));
    v359 = *(_QWORD *)(v6 + 144);
    if (v353 >> 3 <= (uint64_t)(v359 - v355) >> 3)
    {
      v365 = (uint64_t)(v355 - (_QWORD)v358) >> 3;
      if (v365 >= v354)
      {
        v366 = &v352[8 * v354];
        v368 = *(char **)(v6 + 136);
      }
      else
      {
        v366 = &v352[8 * v365];
        if (v366 == v351)
        {
          v368 = *(char **)(v6 + 136);
        }
        else
        {
          v367 = &v352[8 * v365];
          v368 = *(char **)(v6 + 136);
          do
          {
            if (v368)
              *(_QWORD *)v368 = *(_QWORD *)v367;
            v367 += 8;
            v368 += 8;
          }
          while (v367 != v351);
        }
        *(_QWORD *)(v6 + 136) = v368;
        if ((uint64_t)(v355 - (_QWORD)v358) < 1)
          goto LABEL_449;
      }
      v396 = (char *)&v358[v354];
      v397 = &v368[-8 * v354];
      v398 = v368;
      if ((unint64_t)v397 < v355)
      {
        v398 = v368;
        do
        {
          if (v398)
            *(_QWORD *)v398 = *(_QWORD *)v397;
          v397 += 8;
          v398 += 8;
        }
        while ((unint64_t)v397 < v355);
      }
      *(_QWORD *)(v6 + 136) = v398;
      if (v368 != v396)
        memmove(&v368[-8 * ((v368 - v396) >> 3)], v358, v368 - v396);
      if (v366 != v352)
        memmove(v358, v352, v366 - v352);
      goto LABEL_449;
    }
    v360 = v357 >> 3;
    v361 = (v357 >> 3) + v354;
    if (v361 >> 61)
LABEL_958:
      abort();
    v362 = v359 - v356;
    if (v362 >> 2 > v361)
      v361 = v362 >> 2;
    if ((unint64_t)v362 >= 0x7FFFFFFFFFFFFFF8)
      v363 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v363 = v361;
    if (v363)
      v364 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 152) + 16))(*(_QWORD *)(v6 + 152), 8 * v363, 8);
    else
      v364 = 0;
    v369 = (_QWORD *)(v364 + 8 * v360);
    v370 = 8 * v354;
    v371 = &v369[v354];
    v372 = v369;
    do
    {
      if (v372)
        *v372 = *(_QWORD *)v352;
      ++v372;
      v352 += 8;
      v370 -= 8;
    }
    while (v370);
    v373 = *(uint64_t **)(v6 + 128);
    if (v373 != v358)
    {
      v374 = (v357 & 0xFFFFFFFFFFFFFFF8) + v356;
      v375 = v374 - (_QWORD)v373 - 8;
      if (v375 < 0x68)
      {
        v376 = v358;
        goto LABEL_428;
      }
      v376 = v358;
      if (v374 - ((v357 & 0xFFFFFFFFFFFFFFF8) + v364) < 0x20)
        goto LABEL_972;
      v377 = (v375 >> 3) + 1;
      v376 = &v358[-(v377 & 0x3FFFFFFFFFFFFFFCLL)];
      v378 = 8 * v360 - 16;
      v379 = (__int128 *)(v356 + v378);
      v380 = (_OWORD *)(v364 + v378);
      v381 = v377 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v382 = *v379;
        *(v380 - 1) = *(v379 - 1);
        *v380 = v382;
        v379 -= 2;
        v380 -= 2;
        v381 -= 4;
      }
      while (v381);
      v369 -= v377 & 0x3FFFFFFFFFFFFFFCLL;
      if (v377 != (v377 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_972:
        do
        {
LABEL_428:
          v383 = *--v376;
          *--v369 = v383;
        }
        while (v376 != v373);
      }
    }
    v384 = *(uint64_t **)(v6 + 136);
    if (v384 != v358)
    {
      v385 = (v357 & 0xFFFFFFFFFFFFFFF8) + v356;
      v386 = (unint64_t)v384 - v385 - 8;
      if (v386 < 0x68)
        goto LABEL_973;
      if ((v357 & 0xFFFFFFFFFFFFFFF8) + v364 + v353 - v385 < 0x20)
        goto LABEL_973;
      v387 = (v386 >> 3) + 1;
      v388 = 8 * (v387 & 0x3FFFFFFFFFFFFFFCLL);
      v358 = (uint64_t *)((char *)v358 + v388);
      v389 = (_OWORD *)(8 * v360 + 8 * v354 + v364 + 16);
      v390 = (__int128 *)(8 * v360 + v356 + 16);
      v391 = v387 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v392 = *v390;
        *(v389 - 1) = *(v390 - 1);
        *v389 = v392;
        v389 += 2;
        v390 += 2;
        v391 -= 4;
      }
      while (v391);
      v371 = (_QWORD *)((char *)v371 + v388);
      if (v387 != (v387 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_973:
        do
        {
          v393 = *v358++;
          *v371++ = v393;
        }
        while (v358 != v384);
      }
    }
    v394 = *(_QWORD *)(v6 + 128);
    *(_QWORD *)(v6 + 128) = v369;
    *(_QWORD *)(v6 + 136) = v371;
    v395 = *(_QWORD *)(v6 + 144);
    *(_QWORD *)(v6 + 144) = v364 + 8 * v363;
    if (v394)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 152) + 40))(*(_QWORD *)(v6 + 152), v394, v395 - v394);
LABEL_449:
    *(_QWORD *)(v6 + 168) = *(_QWORD *)(v6 + 160);
  }
  v399 = *(_QWORD *)(v6 + 96);
  v400 = *(int8x16_t **)(v6 + 104);
  v401 = ((uint64_t)v400->i64 - v399) >> 3;
  v402 = 126 - 2 * __clz(v401);
  v918 = 0;
  *(_DWORD *)(v6 + 1808) = v401;
  __p[0] = sortRenderDescriptionFunc;
  if (v400 == (int8x16_t *)v399)
    v403 = 0;
  else
    v403 = v402;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(md::LabelRenderDescriptor const*,md::LabelRenderDescriptor const*),md::LabelRenderDescriptor**,false>(v399, v400, (unsigned int (**)(uint64_t))__p, v403, 1);
  v404 = *(uint64_t **)(v6 + 96);
  for (i = *(uint64_t **)(v6 + 104);
        v404 != i;
        *(_WORD *)((char *)&v918 + v407) = v408 + *(_WORD *)(v406 + 32) * *(unsigned __int8 *)(v406 + 29))
  {
    v406 = *v404++;
    v407 = shaderToVertexID[*(unsigned __int8 *)(v406 + 4)];
    *(_BYTE *)(v406 + 28) = v407;
    v407 *= 2;
    v408 = *(_WORD *)((char *)&v918 + v407);
    *(_WORD *)(v406 + 38) = v408;
  }
  v409 = *(_QWORD *)(v6 + 128);
  v410 = *(int8x16_t **)(v6 + 136);
  v411 = ((uint64_t)v410->i64 - v409) >> 3;
  v412 = 126 - 2 * __clz(v411);
  *(_DWORD *)(v6 + 1808) += v411;
  __p[0] = sortRenderDescriptionFunc;
  if (v410 == (int8x16_t *)v409)
    v413 = 0;
  else
    v413 = v412;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(md::LabelRenderDescriptor const*,md::LabelRenderDescriptor const*),md::LabelRenderDescriptor**,false>(v409, v410, (unsigned int (**)(uint64_t))__p, v413, 1);
  v414 = *(uint64_t **)(v6 + 128);
  for (j = *(uint64_t **)(v6 + 136);
        v414 != j;
        *(_WORD *)((char *)&v918 + v417) = v418 + *(_WORD *)(v416 + 32) * *(unsigned __int8 *)(v416 + 29))
  {
    v416 = *v414++;
    v417 = shaderToVertexID[*(unsigned __int8 *)(v416 + 4)];
    *(_BYTE *)(v416 + 28) = v417;
    v417 *= 2;
    v418 = *(_WORD *)((char *)&v918 + v417);
    *(_WORD *)(v416 + 38) = v418;
  }
  v419 = *(_QWORD *)(v6 + 160);
  v420 = *(int8x16_t **)(v6 + 168);
  v421 = ((uint64_t)v420->i64 - v419) >> 3;
  v422 = 126 - 2 * __clz(v421);
  *(_DWORD *)(v6 + 1808) += v421;
  __p[0] = sortRenderDescriptionFunc;
  if (v420 == (int8x16_t *)v419)
    v423 = 0;
  else
    v423 = v422;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(md::LabelRenderDescriptor const*,md::LabelRenderDescriptor const*),md::LabelRenderDescriptor**,false>(v419, v420, (unsigned int (**)(uint64_t))__p, v423, 1);
  v424 = *(uint64_t **)(v6 + 160);
  for (k = *(uint64_t **)(v6 + 168);
        v424 != k;
        *(_WORD *)((char *)&v918 + v427) = v428 + *(_WORD *)(v426 + 32) * *(unsigned __int8 *)(v426 + 29))
  {
    v426 = *v424++;
    v427 = shaderToVertexID[*(unsigned __int8 *)(v426 + 4)];
    *(_BYTE *)(v426 + 28) = v427;
    v427 *= 2;
    v428 = *(_WORD *)((char *)&v918 + v427);
    *(_WORD *)(v426 + 38) = v428;
  }
  v429 = *(_QWORD *)(v6 + 192);
  v430 = *(int8x16_t **)(v6 + 200);
  v431 = ((uint64_t)v430->i64 - v429) >> 3;
  v432 = 126 - 2 * __clz(v431);
  *(_DWORD *)(v6 + 1808) += v431;
  __p[0] = sortRenderDescriptionFunc;
  if (v430 == (int8x16_t *)v429)
    v433 = 0;
  else
    v433 = v432;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(md::LabelRenderDescriptor const*,md::LabelRenderDescriptor const*),md::LabelRenderDescriptor**,false>(v429, v430, (unsigned int (**)(uint64_t))__p, v433, 1);
  v434 = *(uint64_t **)(v6 + 192);
  for (m = *(uint64_t **)(v6 + 200);
        v434 != m;
        *(_WORD *)((char *)&v918 + v437) = v438 + *(_WORD *)(v436 + 32) * *(unsigned __int8 *)(v436 + 29))
  {
    v436 = *v434++;
    v437 = shaderToVertexID[*(unsigned __int8 *)(v436 + 4)];
    *(_BYTE *)(v436 + 28) = v437;
    v437 *= 2;
    v438 = *(_WORD *)((char *)&v918 + v437);
    *(_WORD *)(v436 + 38) = v438;
  }
  v439 = *(_QWORD *)(v6 + 224);
  v440 = *(int8x16_t **)(v6 + 232);
  v441 = ((uint64_t)v440->i64 - v439) >> 3;
  v442 = 126 - 2 * __clz(v441);
  *(_DWORD *)(v6 + 1808) += v441;
  __p[0] = sortRenderDescriptionFunc;
  if (v440 == (int8x16_t *)v439)
    v443 = 0;
  else
    v443 = v442;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(md::LabelRenderDescriptor const*,md::LabelRenderDescriptor const*),md::LabelRenderDescriptor**,false>(v439, v440, (unsigned int (**)(uint64_t))__p, v443, 1);
  v444 = *(uint64_t **)(v6 + 224);
  for (n = *(uint64_t **)(v6 + 232);
        v444 != n;
        *(_WORD *)((char *)&v918 + v447) = v448 + *(_WORD *)(v446 + 32) * *(unsigned __int8 *)(v446 + 29))
  {
    v446 = *v444++;
    v447 = shaderToVertexID[*(unsigned __int8 *)(v446 + 4)];
    *(_BYTE *)(v446 + 28) = v447;
    v447 *= 2;
    v448 = *(_WORD *)((char *)&v918 + v447);
    *(_WORD *)(v446 + 38) = v448;
  }
  v449 = (unsigned __int16)v918;
  v450 = HIWORD(v918);
  if ((unsigned __int16)v918 <= HIWORD(v918))
    v451 = HIWORD(v918);
  else
    v451 = (unsigned __int16)v918;
  v452 = *(_QWORD *)(v6 + 456);
  v453 = *(_QWORD *)(v452 + 8);
  v454 = 2 * (v451 + 2 * v451);
  if ((*(_QWORD *)(v452 + 48) - *(_QWORD *)(v452 + 40)) / v453 < v454)
  {
    v455 = v453 * v454;
    v456 = *(_QWORD *)(v452 + 72);
    v457 = *(_QWORD *)(v452 + 80) - v456;
    if (v455 != v457)
    {
      if (v455 <= v457)
      {
        if (v455 < v457)
          *(_QWORD *)(v452 + 80) = v456 + v455;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v452 + 72, v455 - v457);
      }
      v458 = *(std::__shared_weak_count **)(v452 + 32);
      *(_QWORD *)(v452 + 24) = 0;
      *(_QWORD *)(v452 + 32) = 0;
      if (v458)
      {
        p_shared_owners = (unint64_t *)&v458->__shared_owners_;
        do
          v460 = __ldaxr(p_shared_owners);
        while (__stlxr(v460 - 1, p_shared_owners));
        if (!v460)
        {
          ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
          std::__shared_weak_count::__release_weak(v458);
        }
      }
      *(_QWORD *)(v452 + 120) = 0;
      *(_DWORD *)(v452 + 112) = 0;
      v461 = *(_QWORD *)(v452 + 80) - *(_QWORD *)(v452 + 72);
      *(_QWORD *)(v452 + 40) = 0;
      *(_QWORD *)(v452 + 48) = v461;
      *(_QWORD *)(v452 + 56) = 0;
      *(_QWORD *)(v452 + 64) = v461;
      v452 = *(_QWORD *)(v6 + 456);
      v455 = *(_QWORD *)(v452 + 8) * v454;
    }
    if (v455)
    {
      v462 = *(int8x8_t **)(v452 + 72);
      if (!(_DWORD)v451)
        goto LABEL_502;
    }
    else
    {
      v462 = 0;
      if (!(_DWORD)v451)
        goto LABEL_502;
    }
    if ((_DWORD)v451 == 1)
    {
      v463 = 0;
      v464 = 0;
      v465 = v462;
    }
    else
    {
      v466 = 0;
      v464 = (unsigned __int16)v451 & 0xFFFE;
      v467 = v462 + 2;
      do
      {
        v467[-2].i16[0] = 4 * v466;
        v467[-2].i16[1] = (4 * v466) | 1;
        v468 = (4 * v466) | 6;
        v467->i16[0] = v468;
        v467[-2].i16[3] = 4 * v466;
        v467->i16[2] = v468;
        v469 = vorr_s8((int8x8_t)vdup_n_s16(4 * (int)v466), (int8x8_t)0x5000400030002);
        v467->i16[1] = v469.i16[2];
        v467[-2].i16[2] = v469.i16[0];
        v467[-1] = v469;
        v467->i16[3] = (4 * v466) | 7;
        v466 += 2;
        v467 += 3;
      }
      while (v464 != v466);
      if (v464 == v451)
        goto LABEL_502;
      v463 = 4 * v464;
      v465 = (int8x8_t *)((char *)v462 + 12 * ((unsigned __int16)v451 & 0xFFFE));
    }
    v470 = v451 - v464;
    do
    {
      v465->i16[0] = v463;
      v465->i16[1] = v463 | 1;
      v471 = v463 | 2;
      v465->i16[2] = v463 | 2;
      v465->i16[3] = v463;
      v472 = v463 | 3;
      v463 += 4;
      v465[1].i16[0] = v471;
      v465[1].i16[1] = v472;
      v465 = (int8x8_t *)((char *)v465 + 12);
      --v470;
    }
    while (v470);
LABEL_502:
    if (v462 && v455)
    {
      if (*(_QWORD *)(v452 + 64) > v455)
        v455 = *(_QWORD *)(v452 + 64);
      *(_QWORD *)(v452 + 56) = 0;
      *(_QWORD *)(v452 + 64) = v455;
    }
  }
  v915 = 0u;
  v914 = 0u;
  v916 = 0;
  v917 = v910;
  v473 = 4 * v449;
  v474 = **(_QWORD **)(v6 + 1296);
  v475 = *(_QWORD *)(v474 + 8);
  if ((*(_QWORD *)(v474 + 48) - *(_QWORD *)(v474 + 40)) / v475 < 4 * v449)
  {
    v476 = v475 * v473;
    v477 = *(_QWORD *)(v474 + 72);
    v478 = *(_QWORD *)(v474 + 80) - v477;
    if (v475 * v473 != v478)
    {
      if (v475 * v473 <= v478)
      {
        if (v476 < v478)
          *(_QWORD *)(v474 + 80) = v477 + v476;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v474 + 72, v475 * v473 - v478);
      }
      v479 = *(std::__shared_weak_count **)(v474 + 32);
      *(_QWORD *)(v474 + 24) = 0;
      *(_QWORD *)(v474 + 32) = 0;
      if (v479)
      {
        v480 = (unint64_t *)&v479->__shared_owners_;
        do
          v481 = __ldaxr(v480);
        while (__stlxr(v481 - 1, v480));
        if (!v481)
        {
          ((void (*)(std::__shared_weak_count *))v479->__on_zero_shared)(v479);
          std::__shared_weak_count::__release_weak(v479);
        }
      }
      *(_QWORD *)(v474 + 120) = 0;
      *(_DWORD *)(v474 + 112) = 0;
      v482 = *(_QWORD *)(v474 + 80) - *(_QWORD *)(v474 + 72);
      *(_QWORD *)(v474 + 40) = 0;
      *(_QWORD *)(v474 + 48) = v482;
      *(_QWORD *)(v474 + 56) = 0;
      *(_QWORD *)(v474 + 64) = v482;
      v474 = **(_QWORD **)(v6 + 1296);
      v475 = *(_QWORD *)(v474 + 8);
    }
  }
  v483 = v475 * v473;
  if (v483)
    v484 = *(_QWORD *)(v474 + 72);
  else
    v484 = 0;
  v913 = v484;
  v485 = 4 * v450;
  v486 = **(_QWORD **)(v6 + 1088);
  v487 = *(_QWORD *)(v486 + 8);
  if ((*(_QWORD *)(v486 + 48) - *(_QWORD *)(v486 + 40)) / v487 < v485)
  {
    v488 = v487 * v485;
    v489 = *(_QWORD *)(v486 + 72);
    v490 = *(_QWORD *)(v486 + 80) - v489;
    if (v487 * v485 != v490)
    {
      if (v487 * v485 <= v490)
      {
        if (v488 < v490)
          *(_QWORD *)(v486 + 80) = v489 + v488;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v486 + 72, v487 * v485 - v490);
      }
      v491 = *(std::__shared_weak_count **)(v486 + 32);
      *(_QWORD *)(v486 + 24) = 0;
      *(_QWORD *)(v486 + 32) = 0;
      if (v491)
      {
        v492 = (unint64_t *)&v491->__shared_owners_;
        do
          v493 = __ldaxr(v492);
        while (__stlxr(v493 - 1, v492));
        if (!v493)
        {
          ((void (*)(std::__shared_weak_count *))v491->__on_zero_shared)(v491);
          std::__shared_weak_count::__release_weak(v491);
        }
      }
      *(_QWORD *)(v486 + 120) = 0;
      *(_DWORD *)(v486 + 112) = 0;
      v494 = *(_QWORD *)(v486 + 80) - *(_QWORD *)(v486 + 72);
      *(_QWORD *)(v486 + 40) = 0;
      *(_QWORD *)(v486 + 48) = v494;
      *(_QWORD *)(v486 + 56) = 0;
      *(_QWORD *)(v486 + 64) = v494;
      v486 = **(_QWORD **)(v6 + 1088);
      v487 = *(_QWORD *)(v486 + 8);
    }
  }
  v495 = v487 * v485;
  v901 = v486;
  v902 = v474;
  v905 = v495;
  v906 = v483;
  v904 = v484;
  if (v495)
    v495 = *(_QWORD *)(v486 + 72);
  v903 = v495;
  *(_QWORD *)&v914 = v495;
  v496 = *(_QWORD *)(v6 + 24);
  v497 = (_QWORD *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>(v496);
  v498 = (_QWORD *)gdc::Registry::storage<md::GlyphMeshDescriptor>(v496);
  v500 = (unint64_t *)v498[7];
  v499 = (uint64_t *)v498[8];
  v502 = (unint64_t *)v497[7];
  v501 = (uint64_t *)v497[8];
  if ((char *)v499 - (char *)v500 >= (unint64_t)((char *)v501 - (char *)v502))
    v503 = v497 + 4;
  else
    v503 = v498 + 4;
  if (v497 + 4 != v503 || v502 == (unint64_t *)v501)
  {
    v912 = 0u;
  }
  else
  {
    v660 = (uint64_t *)v497[10];
    v661 = v498[4];
    v662 = (v498[5] - v661) >> 3;
    v663 = ((char *)v499 - (char *)v500) >> 3;
    v912 = 0u;
    v664 = v498[10];
    v665 = (unsigned __int8 *)v498[11];
    do
    {
      v667 = *((unsigned int *)v502 + 1);
      if (v667 >> 7 < v662)
      {
        v668 = *(_QWORD *)(v661 + 8 * (v667 >> 7));
        if (v668)
        {
          v669 = *(unsigned __int16 *)(v668 + 2 * (v667 & 0x7F));
          if (v663 > v669)
          {
            v670 = (uint64_t *)&v500[v669];
            if (v670 != v499 && *((_DWORD *)v670 + 1) == (_DWORD)v667)
            {
              v672 = *v502;
              v673 = *v502 >> 39;
              v674 = v665;
              if (v673 < v662)
              {
                v675 = *(_QWORD *)(v661 + 8 * v673);
                v674 = v665;
                if (v675)
                {
                  v676 = *(unsigned __int16 *)(v675 + 2 * (HIDWORD(v672) & 0x7F));
                  v674 = v665;
                  if (v663 > v676)
                  {
                    v677 = (uint64_t *)&v500[v676];
                    if (*((_DWORD *)v677 + 1) != HIDWORD(v672) || v677 == v499)
                      v674 = v665;
                    else
                      v674 = (unsigned __int8 *)(v664 + 40 * v676);
                  }
                }
              }
              v679 = *v660;
              v680 = *v674;
              v681 = v674[1];
              *(_WORD *)(*v660 + 30) = 0;
              if (v680)
              {
                *(_BYTE *)(v679 + 30) = 4;
                v682 = (int32x2_t)4;
                if (v681)
                {
                  *(_WORD *)(v679 + 30) = 780;
                  v682 = (int32x2_t)0x30000000CLL;
                }
                *((_QWORD *)&v666 + 1) = *((_QWORD *)&v912 + 1);
                *(int32x2_t *)&v666 = vadd_s32(*(int32x2_t *)&v912, v682);
                v912 = v666;
              }
            }
          }
        }
      }
      ++v660;
      ++v502;
    }
    while (v502 != (unint64_t *)v501);
  }
  if (v498 + 4 == v503 && v500 != (unint64_t *)v499)
  {
    v505 = v497[4];
    v506 = (v497[5] - v505) >> 3;
    v508 = v497[7];
    v507 = v497[8];
    v509 = (v507 - v508) >> 3;
    v510 = v497[10];
    v511 = (uint64_t *)v497[11];
    v512 = (unsigned __int8 *)(v498[10] + 1);
    do
    {
      v514 = *((unsigned int *)v500 + 1);
      if (v514 >> 7 < v506)
      {
        v515 = *(_QWORD *)(v505 + 8 * (v514 >> 7));
        if (v515)
        {
          v516 = *(unsigned __int16 *)(v515 + 2 * (v514 & 0x7F));
          if (v509 > v516)
          {
            v517 = v508 + 8 * v516;
            if (v517 != v507 && *(_DWORD *)(v517 + 4) == (_DWORD)v514)
            {
              v519 = *v500;
              v520 = *v500 >> 39;
              v521 = v511;
              if (v520 < v506)
              {
                v522 = *(_QWORD *)(v505 + 8 * v520);
                v521 = v511;
                if (v522)
                {
                  v523 = *(unsigned __int16 *)(v522 + 2 * (HIDWORD(v519) & 0x7F));
                  v521 = v511;
                  if (v509 > v523)
                  {
                    v524 = 8 * v523;
                    v525 = v508 + 8 * v523;
                    if (*(_DWORD *)(v525 + 4) != HIDWORD(v519) || v525 == v507)
                      v521 = v511;
                    else
                      v521 = (uint64_t *)(v510 + v524);
                  }
                }
              }
              v527 = *v521;
              v528 = *(v512 - 1);
              v529 = *v512;
              *(_WORD *)(v527 + 30) = 0;
              if (v528)
              {
                *(_BYTE *)(v527 + 30) = 4;
                v530 = (int32x2_t)4;
                if (v529)
                {
                  *(_WORD *)(v527 + 30) = 780;
                  v530 = (int32x2_t)0x30000000CLL;
                }
                *((_QWORD *)&v513 + 1) = *((_QWORD *)&v912 + 1);
                *(int32x2_t *)&v513 = vadd_s32(*(int32x2_t *)&v912, v530);
                v912 = v513;
              }
            }
          }
        }
      }
      ++v500;
      v512 += 40;
    }
    while (v500 != (unint64_t *)v499);
  }
  v531 = *(_QWORD *)(v6 + 24);
  v532 = (_QWORD *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>(v531);
  v533 = (_QWORD *)gdc::Registry::storage<md::ShadowMeshDescriptor>(v531);
  v535 = (unint64_t *)v533[7];
  v534 = (uint64_t *)v533[8];
  v537 = (unint64_t *)v532[7];
  v536 = (uint64_t *)v532[8];
  if ((char *)v534 - (char *)v535 >= (unint64_t)((char *)v536 - (char *)v537))
    v538 = v532 + 4;
  else
    v538 = v533 + 4;
  if (v532 + 4 == v538 && v537 != (unint64_t *)v536)
  {
    v683 = (uint64_t *)v532[10];
    v684 = v533[4];
    v685 = (v533[5] - v684) >> 3;
    v686 = ((char *)v534 - (char *)v535) >> 3;
    v687 = v533[10];
    v688 = (_BYTE *)v533[11];
    do
    {
      v692 = *((unsigned int *)v537 + 1);
      if (v692 >> 7 < v685)
      {
        v693 = *(_QWORD *)(v684 + 8 * (v692 >> 7));
        if (v693)
        {
          v694 = *(unsigned __int16 *)(v693 + 2 * (v692 & 0x7F));
          if (v686 > v694)
          {
            v695 = (uint64_t *)&v535[v694];
            if (v695 != v534 && *((_DWORD *)v695 + 1) == (_DWORD)v692)
            {
              v697 = *v537;
              v698 = *v537 >> 39;
              v699 = v688;
              if (v698 < v685)
              {
                v700 = *(_QWORD *)(v684 + 8 * v698);
                v699 = v688;
                if (v700)
                {
                  v701 = *(unsigned __int16 *)(v700 + 2 * (HIDWORD(v697) & 0x7F));
                  v699 = v688;
                  if (v686 > v701)
                  {
                    v702 = (uint64_t *)&v535[v701];
                    if (*((_DWORD *)v702 + 1) != HIDWORD(v697) || v702 == v534)
                      v699 = v688;
                    else
                      v699 = (_BYTE *)(v687 + 40 * v701);
                  }
                }
              }
              v689 = *v683;
              if (*v699)
                v690 = 5;
              else
                v690 = 1;
              *(_BYTE *)(v689 + 30) = v690;
              *(_BYTE *)(v689 + 31) = 1;
              *((_QWORD *)&v691 + 1) = *((_QWORD *)&v912 + 1);
              *(int32x2_t *)&v691 = vadd_s32(*(int32x2_t *)&v912, (int32x2_t)(v690 | 0x100000000));
              v912 = v691;
            }
          }
        }
      }
      ++v683;
      ++v537;
    }
    while (v537 != (unint64_t *)v536);
  }
  if (v533 + 4 == v538 && v535 != (unint64_t *)v534)
  {
    v540 = (_BYTE *)v533[10];
    v541 = v532[4];
    v542 = (v532[5] - v541) >> 3;
    v544 = v532[7];
    v543 = v532[8];
    v545 = (v543 - v544) >> 3;
    v546 = v532[10];
    v547 = (uint64_t *)v532[11];
    do
    {
      v551 = *((unsigned int *)v535 + 1);
      if (v551 >> 7 < v542)
      {
        v552 = *(_QWORD *)(v541 + 8 * (v551 >> 7));
        if (v552)
        {
          v553 = *(unsigned __int16 *)(v552 + 2 * (v551 & 0x7F));
          if (v545 > v553)
          {
            v554 = v544 + 8 * v553;
            if (v554 != v543 && *(_DWORD *)(v554 + 4) == (_DWORD)v551)
            {
              v556 = *v535;
              v557 = *v535 >> 39;
              v558 = v547;
              if (v557 < v542)
              {
                v559 = *(_QWORD *)(v541 + 8 * v557);
                v558 = v547;
                if (v559)
                {
                  v560 = *(unsigned __int16 *)(v559 + 2 * (HIDWORD(v556) & 0x7F));
                  v558 = v547;
                  if (v545 > v560)
                  {
                    v561 = 8 * v560;
                    v562 = v544 + 8 * v560;
                    if (*(_DWORD *)(v562 + 4) != HIDWORD(v556) || v562 == v543)
                      v558 = v547;
                    else
                      v558 = (uint64_t *)(v546 + v561);
                  }
                }
              }
              v548 = *v558;
              if (*v540)
                v549 = 5;
              else
                v549 = 1;
              *(_BYTE *)(v548 + 30) = v549;
              *(_BYTE *)(v548 + 31) = 1;
              *((_QWORD *)&v550 + 1) = *((_QWORD *)&v912 + 1);
              *(int32x2_t *)&v550 = vadd_s32(*(int32x2_t *)&v912, (int32x2_t)(v549 | 0x100000000));
              v912 = v550;
            }
          }
        }
      }
      v540 += 40;
      ++v535;
    }
    while (v535 != (unint64_t *)v534);
  }
  v564 = *(_QWORD *)(v6 + 24);
  v565 = (_QWORD *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>(v564);
  v566 = (_QWORD *)gdc::Registry::storage<md::IconMeshDescriptor>(v564);
  v568 = (unint64_t *)v565[7];
  v567 = (uint64_t *)v565[8];
  if (v566[8] - v566[7] >= (unint64_t)((char *)v567 - (char *)v568))
    v569 = v565 + 4;
  else
    v569 = v566 + 4;
  v570 = v912;
  v571 = DWORD1(v912);
  if (v565 + 4 == v569 && v568 != (unint64_t *)v567)
  {
    v704 = (uint64_t *)v565[10];
    while (2)
    {
      v707 = *((unsigned int *)v568 + 1);
      v708 = v566[4];
      v709 = (v566[5] - v708) >> 3;
      if (v707 >> 7 >= v709)
        goto LABEL_751;
      v710 = *(_QWORD *)(v708 + 8 * (v707 >> 7));
      if (!v710)
        goto LABEL_751;
      v711 = *(unsigned __int16 *)(v710 + 2 * (v707 & 0x7F));
      v712 = v566[7];
      v713 = v566[8];
      v714 = (v713 - v712) >> 3;
      if (v714 <= v711)
        goto LABEL_751;
      v715 = v712 + 8 * v711;
      if (v715 == v713 || *(_DWORD *)(v715 + 4) != (_DWORD)v707)
        goto LABEL_751;
      v717 = *v568;
      v718 = *v568 >> 39;
      if (v718 < v709
        && (v719 = *(_QWORD *)(v708 + 8 * v718)) != 0
        && (v720 = *(unsigned __int16 *)(v719 + 2 * (HIDWORD(v717) & 0x7F)), v714 > v720)
        && ((v721 = HIDWORD(v717), v722 = v712 + 8 * v720, v722 != v713)
          ? (v723 = *(_DWORD *)(v722 + 4) == (_DWORD)v721)
          : (v723 = 0),
            v723))
      {
        v724 = (unsigned __int8 *)(v566[10] + 40 * v720);
      }
      else
      {
        v724 = (unsigned __int8 *)v566[11];
      }
      v725 = *v704;
      *(_WORD *)(*v704 + 30) = 0;
      v705 = *v724;
      if (*v724)
      {
        v705 = 4;
        *(_BYTE *)(v725 + 30) = 4;
      }
      if (v724[1])
      {
        v705 |= 1u;
        *(_BYTE *)(v725 + 30) = v705;
        if (v724[2])
          v706 = 6;
        else
          v706 = 3;
LABEL_749:
        *(_BYTE *)(v725 + 31) = v706;
      }
      else
      {
        v706 = v724[3];
        if (v706)
        {
          v705 |= 1u;
          *(_BYTE *)(v725 + 30) = v705;
          v706 = 1;
          goto LABEL_749;
        }
      }
      v570 += v705;
      v571 += v706;
LABEL_751:
      ++v704;
      if (++v568 == (unint64_t *)v567)
        break;
      continue;
    }
  }
  if (v566 + 4 == v569)
  {
    v726 = (unint64_t *)v566[7];
    v727 = (uint64_t *)v566[8];
    if (v726 != (unint64_t *)v727)
    {
      v728 = (_BYTE *)(v566[10] + 3);
      while (2)
      {
        v879 = *((unsigned int *)v726 + 1);
        v880 = v565[4];
        v881 = (v565[5] - v880) >> 3;
        if (v879 >> 7 >= v881)
          goto LABEL_935;
        v882 = *(_QWORD *)(v880 + 8 * (v879 >> 7));
        if (!v882)
          goto LABEL_935;
        v883 = *(unsigned __int16 *)(v882 + 2 * (v879 & 0x7F));
        v885 = v565[7];
        v884 = v565[8];
        v886 = (v884 - v885) >> 3;
        if (v886 <= v883)
          goto LABEL_935;
        v887 = v885 + 8 * v883;
        if (v887 == v884 || *(_DWORD *)(v887 + 4) != (_DWORD)v879)
          goto LABEL_935;
        v889 = *v726;
        v890 = *v726 >> 39;
        if (v890 < v881
          && (v891 = *(_QWORD *)(v880 + 8 * v890)) != 0
          && (v892 = *(unsigned __int16 *)(v891 + 2 * (HIDWORD(v889) & 0x7F)), v886 > v892)
          && ((v893 = HIDWORD(v889), v894 = v885 + 8 * v892, v894 != v884)
            ? (v895 = *(_DWORD *)(v894 + 4) == (_DWORD)v893)
            : (v895 = 0),
              v895))
        {
          v896 = v565[10] + 8 * v892;
        }
        else
        {
          v896 = v565[11];
        }
        v897 = *(_QWORD *)v896;
        *(_WORD *)(*(_QWORD *)v896 + 30) = 0;
        v877 = *(v728 - 3);
        if (*(v728 - 3))
        {
          v877 = 4;
          *(_BYTE *)(v897 + 30) = 4;
        }
        if (*(v728 - 2))
        {
          v877 |= 1u;
          *(_BYTE *)(v897 + 30) = v877;
          if (*(v728 - 1))
            v878 = 6;
          else
            v878 = 3;
LABEL_933:
          *(_BYTE *)(v897 + 31) = v878;
        }
        else
        {
          v878 = *v728;
          if (*v728)
          {
            v877 |= 1u;
            *(_BYTE *)(v897 + 30) = v877;
            v878 = 1;
            goto LABEL_933;
          }
        }
        v570 += v877;
        v571 += v878;
LABEL_935:
        ++v726;
        v728 += 40;
        if (v726 == (unint64_t *)v727)
          break;
        continue;
      }
    }
  }
  *(_DWORD *)(v6 + 1864) = v570;
  *(_DWORD *)(v6 + 1868) = v571;
  if (v570)
  {
    md::LabelRenderer::prepareDeviceBuffer((md::LabelRenderer *)v6, (md::LabelRenderDeviceBuffer *)(v6 + 1488), v570);
    *(_QWORD *)&v915 = *(_QWORD *)(v6 + 1592);
    v571 = *(_DWORD *)(v6 + 1868);
  }
  if (v571)
  {
    md::LabelRenderer::prepareDeviceBuffer((md::LabelRenderer *)v6, (md::LabelRenderDeviceBuffer *)(v6 + 1632), v571);
    v916 = *(_QWORD *)(v6 + 1736);
  }
  *((_QWORD *)&v925[0] + 1) = 0;
  *(_OWORD *)__p = 0u;
  v924 = 0u;
  LODWORD(v925[0]) = 0;
  v573 = *(_QWORD *)(v6 + 24);
  v574 = (_QWORD *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>(v573);
  v575 = gdc::Registry::storage<md::ShadowMeshDescriptor>(v573);
  v576 = (_QWORD *)v575;
  v577 = v575 + 32;
  v579 = (unint64_t *)v574[7];
  v578 = (uint64_t *)v574[8];
  if (*(_QWORD *)(v575 + 64) - *(_QWORD *)(v575 + 56) >= (unint64_t)((char *)v578 - (char *)v579))
    v580 = v574 + 4;
  else
    v580 = (_QWORD *)(v575 + 32);
  if (v574 + 4 == v580)
  {
    v919 = __p;
    v920 = &v913;
    v921 = v910;
    if (v579 != (unint64_t *)v578)
    {
      v729 = (uint64_t *)v574[10];
      do
      {
        v731 = *((unsigned int *)v579 + 1);
        v732 = v576[4];
        v733 = (v576[5] - v732) >> 3;
        if (v731 >> 7 < v733)
        {
          v734 = *(_QWORD *)(v732 + 8 * (v731 >> 7));
          if (v734)
          {
            v735 = *(unsigned __int16 *)(v734 + 2 * (v731 & 0x7F));
            v737 = v576[7];
            v736 = v576[8];
            v738 = (v736 - v737) >> 3;
            if (v738 > v735)
            {
              v739 = v737 + 8 * v735;
              if (v739 != v736 && *(_DWORD *)(v739 + 4) == (_DWORD)v731)
              {
                v741 = *v579;
                v742 = *v579 >> 39;
                if (v742 < v733
                  && (v743 = *(_QWORD *)(v732 + 8 * v742)) != 0
                  && (v744 = *(unsigned __int16 *)(v743 + 2 * (HIDWORD(v741) & 0x7F)), v738 > v744)
                  && ((v745 = HIDWORD(v741), v746 = v737 + 8 * v744, v746 != v736)
                    ? (v747 = *(_DWORD *)(v746 + 4) == (_DWORD)v745)
                    : (v747 = 0),
                      v747))
                {
                  v730 = (unsigned __int8 *)(v576[10] + 40 * v744);
                }
                else
                {
                  v730 = (unsigned __int8 *)v576[11];
                }
                md::LabelRenderer::initShadowhMeshes(md::LabelRenderData &,md::LabelLayoutContext const&)::$_0::operator()(&v919, *v729, v730);
              }
            }
          }
        }
        ++v729;
        ++v579;
      }
      while (v579 != (unint64_t *)v578);
    }
  }
  if ((_QWORD *)v577 == v580)
  {
    v919 = __p;
    v920 = &v913;
    v921 = v910;
    v748 = (unint64_t *)v576[7];
    v749 = (uint64_t *)v576[8];
    if (v748 != (unint64_t *)v749)
    {
      v750 = (unsigned __int8 *)v576[10];
      do
      {
        v752 = *((unsigned int *)v748 + 1);
        v753 = v574[4];
        v754 = (v574[5] - v753) >> 3;
        if (v752 >> 7 < v754)
        {
          v755 = *(_QWORD *)(v753 + 8 * (v752 >> 7));
          if (v755)
          {
            v756 = *(unsigned __int16 *)(v755 + 2 * (v752 & 0x7F));
            v758 = v574[7];
            v757 = v574[8];
            v759 = (v757 - v758) >> 3;
            if (v759 > v756)
            {
              v760 = v758 + 8 * v756;
              if (v760 != v757 && *(_DWORD *)(v760 + 4) == (_DWORD)v752)
              {
                v762 = *v748;
                v763 = *v748 >> 39;
                if (v763 < v754
                  && (v764 = *(_QWORD *)(v753 + 8 * v763)) != 0
                  && (v765 = *(unsigned __int16 *)(v764 + 2 * (HIDWORD(v762) & 0x7F)), v759 > v765)
                  && ((v766 = HIDWORD(v762), v767 = v758 + 8 * v765, v767 != v757)
                    ? (v768 = *(_DWORD *)(v767 + 4) == (_DWORD)v766)
                    : (v768 = 0),
                      v768))
                {
                  v751 = (uint64_t *)(v574[10] + 8 * v765);
                }
                else
                {
                  v751 = (uint64_t *)v574[11];
                }
                md::LabelRenderer::initShadowhMeshes(md::LabelRenderData &,md::LabelLayoutContext const&)::$_0::operator()(&v919, *v751, v750);
              }
            }
          }
        }
        v750 += 40;
        ++v748;
      }
      while (v748 != (unint64_t *)v749);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)__p = 0u;
  v924 = 0u;
  memset(v925, 0, 28);
  v926 = 0u;
  v927 = 0u;
  v581 = *(_QWORD *)(v6 + 24);
  v582 = (_QWORD *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>(v581);
  v583 = gdc::Registry::storage<md::GlyphMeshDescriptor>(v581);
  v584 = (_QWORD *)v583;
  v585 = v583 + 32;
  v586 = (unint64_t *)v582[7];
  v587 = (uint64_t *)v582[8];
  if (*(_QWORD *)(v583 + 64) - *(_QWORD *)(v583 + 56) >= (unint64_t)((char *)v587 - (char *)v586))
    v588 = v582 + 4;
  else
    v588 = (_QWORD *)(v583 + 32);
  if (v582 + 4 == v588)
  {
    v919 = __p;
    v920 = &v913;
    v921 = v910;
    v922 = (char *)&v926 + 8;
    if (v586 != (unint64_t *)v587)
    {
      v769 = (uint64_t *)v582[10];
      do
      {
        v771 = *((unsigned int *)v586 + 1);
        v772 = v584[4];
        v773 = (v584[5] - v772) >> 3;
        if (v771 >> 7 < v773)
        {
          v774 = *(_QWORD *)(v772 + 8 * (v771 >> 7));
          if (v774)
          {
            v775 = *(unsigned __int16 *)(v774 + 2 * (v771 & 0x7F));
            v777 = v584[7];
            v776 = v584[8];
            v778 = (v776 - v777) >> 3;
            if (v778 > v775)
            {
              v779 = v777 + 8 * v775;
              if (v779 != v776 && *(_DWORD *)(v779 + 4) == (_DWORD)v771)
              {
                v781 = *v586;
                v782 = *v586 >> 39;
                if (v782 < v773
                  && (v783 = *(_QWORD *)(v772 + 8 * v782)) != 0
                  && (v784 = *(unsigned __int16 *)(v783 + 2 * (HIDWORD(v781) & 0x7F)), v778 > v784)
                  && ((v785 = HIDWORD(v781), v786 = v777 + 8 * v784, v786 != v776)
                    ? (v787 = *(_DWORD *)(v786 + 4) == (_DWORD)v785)
                    : (v787 = 0),
                      v787))
                {
                  v770 = v584[10] + 40 * v784;
                }
                else
                {
                  v770 = v584[11];
                }
                md::LabelRenderer::initGlyphMeshes(md::LabelRenderData &,md::LabelLayoutContext const&)::$_0::operator()(&v919, *v769, v770);
              }
            }
          }
        }
        ++v769;
        ++v586;
      }
      while (v586 != (unint64_t *)v587);
    }
  }
  if ((_QWORD *)v585 == v588)
  {
    v919 = __p;
    v920 = &v913;
    v921 = v910;
    v922 = (char *)&v926 + 8;
    v788 = (unint64_t *)v584[7];
    v789 = (uint64_t *)v584[8];
    if (v788 != (unint64_t *)v789)
    {
      v790 = v584[10];
      do
      {
        v792 = *((unsigned int *)v788 + 1);
        v793 = v582[4];
        v794 = (v582[5] - v793) >> 3;
        if (v792 >> 7 < v794)
        {
          v795 = *(_QWORD *)(v793 + 8 * (v792 >> 7));
          if (v795)
          {
            v796 = *(unsigned __int16 *)(v795 + 2 * (v792 & 0x7F));
            v798 = v582[7];
            v797 = v582[8];
            v799 = (v797 - v798) >> 3;
            if (v799 > v796)
            {
              v800 = v798 + 8 * v796;
              if (v800 != v797 && *(_DWORD *)(v800 + 4) == (_DWORD)v792)
              {
                v802 = *v788;
                v803 = *v788 >> 39;
                if (v803 < v794
                  && (v804 = *(_QWORD *)(v793 + 8 * v803)) != 0
                  && (v805 = *(unsigned __int16 *)(v804 + 2 * (HIDWORD(v802) & 0x7F)), v799 > v805)
                  && ((v806 = HIDWORD(v802), v807 = v798 + 8 * v805, v807 != v797)
                    ? (v808 = *(_DWORD *)(v807 + 4) == (_DWORD)v806)
                    : (v808 = 0),
                      v808))
                {
                  v791 = (uint64_t *)(v582[10] + 8 * v805);
                }
                else
                {
                  v791 = (uint64_t *)v582[11];
                }
                md::LabelRenderer::initGlyphMeshes(md::LabelRenderData &,md::LabelLayoutContext const&)::$_0::operator()(&v919, *v791, v790);
              }
            }
          }
        }
        v790 += 40;
        ++v788;
      }
      while (v788 != (unint64_t *)v789);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  DWORD2(v925[1]) = 0;
  *(_QWORD *)&v925[1] = 0;
  v926 = 0uLL;
  *(_QWORD *)&v927 = 0;
  *((_QWORD *)&v927 + 1) = -1;
  v928 = -1;
  v929 = -1;
  v930 = -1;
  v932 = 0;
  v931 = 0;
  v589 = *(_QWORD *)(v6 + 24);
  v590 = (_QWORD *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>(v589);
  v591 = gdc::Registry::storage<md::IconMeshDescriptor>(v589);
  v592 = (_QWORD *)v591;
  v593 = v591 + 32;
  v595 = (unint64_t *)v590[7];
  v594 = (uint64_t *)v590[8];
  if (*(_QWORD *)(v591 + 64) - *(_QWORD *)(v591 + 56) >= (unint64_t)((char *)v594 - (char *)v595))
    v596 = v590 + 4;
  else
    v596 = (_QWORD *)(v591 + 32);
  if (v590 + 4 == v596)
  {
    v919 = __p;
    v920 = &v913;
    if (v595 != (unint64_t *)v594)
    {
      v809 = (uint64_t *)v590[10];
      do
      {
        v811 = *((unsigned int *)v595 + 1);
        v812 = v592[4];
        v813 = (v592[5] - v812) >> 3;
        if (v811 >> 7 < v813)
        {
          v814 = *(_QWORD *)(v812 + 8 * (v811 >> 7));
          if (v814)
          {
            v815 = *(unsigned __int16 *)(v814 + 2 * (v811 & 0x7F));
            v817 = v592[7];
            v816 = v592[8];
            v818 = (v816 - v817) >> 3;
            if (v818 > v815)
            {
              v819 = v817 + 8 * v815;
              if (v819 != v816 && *(_DWORD *)(v819 + 4) == (_DWORD)v811)
              {
                v821 = *v595;
                v822 = *v595 >> 39;
                if (v822 < v813
                  && (v823 = *(_QWORD *)(v812 + 8 * v822)) != 0
                  && (v824 = *(unsigned __int16 *)(v823 + 2 * (HIDWORD(v821) & 0x7F)), v818 > v824)
                  && ((v825 = HIDWORD(v821), v826 = v817 + 8 * v824, v826 != v816)
                    ? (v827 = *(_DWORD *)(v826 + 4) == (_DWORD)v825)
                    : (v827 = 0),
                      v827))
                {
                  v810 = v592[10] + 40 * v824;
                }
                else
                {
                  v810 = v592[11];
                }
                md::LabelRenderer::initIconMeshes(md::LabelRenderData &,md::LabelLayoutContext const&)::$_0::operator()(&v919, *v809, v810);
              }
            }
          }
        }
        ++v809;
        ++v595;
      }
      while (v595 != (unint64_t *)v594);
    }
  }
  if ((_QWORD *)v593 == v596)
  {
    v919 = __p;
    v920 = &v913;
    v828 = (unint64_t *)v592[7];
    v829 = (uint64_t *)v592[8];
    if (v828 != (unint64_t *)v829)
    {
      v830 = v592[10];
      do
      {
        v832 = *((unsigned int *)v828 + 1);
        v833 = v590[4];
        v834 = (v590[5] - v833) >> 3;
        if (v832 >> 7 < v834)
        {
          v835 = *(_QWORD *)(v833 + 8 * (v832 >> 7));
          if (v835)
          {
            v836 = *(unsigned __int16 *)(v835 + 2 * (v832 & 0x7F));
            v838 = v590[7];
            v837 = v590[8];
            v839 = (v837 - v838) >> 3;
            if (v839 > v836)
            {
              v840 = v838 + 8 * v836;
              if (v840 != v837 && *(_DWORD *)(v840 + 4) == (_DWORD)v832)
              {
                v842 = *v828;
                v843 = *v828 >> 39;
                if (v843 < v834
                  && (v844 = *(_QWORD *)(v833 + 8 * v843)) != 0
                  && (v845 = *(unsigned __int16 *)(v844 + 2 * (HIDWORD(v842) & 0x7F)), v839 > v845)
                  && ((v846 = HIDWORD(v842), v847 = v838 + 8 * v845, v847 != v837)
                    ? (v848 = *(_DWORD *)(v847 + 4) == (_DWORD)v846)
                    : (v848 = 0),
                      v848))
                {
                  v831 = (uint64_t *)(v590[10] + 8 * v845);
                }
                else
                {
                  v831 = (uint64_t *)v590[11];
                }
                md::LabelRenderer::initIconMeshes(md::LabelRenderData &,md::LabelLayoutContext const&)::$_0::operator()(&v919, *v831, v830);
              }
            }
          }
        }
        v830 += 40;
        ++v828;
      }
      while (v828 != (unint64_t *)v829);
    }
  }
  if (v903 && v905)
  {
    v597 = *(_QWORD *)(v901 + 64);
    if (v597 <= v905)
      v597 = v905;
    *(_QWORD *)(v901 + 56) = 0;
    *(_QWORD *)(v901 + 64) = v597;
  }
  if (v904 && v906)
  {
    v598 = *(_QWORD *)(v902 + 64);
    if (v598 <= v906)
      v598 = v906;
    *(_QWORD *)(v902 + 56) = 0;
    *(_QWORD *)(v902 + 64) = v598;
  }
  v599 = *(unsigned __int8 **)v6;
  if (!*(_BYTE *)(*(_QWORD *)v6 + 112))
  {
    v898 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:nn180100]();
    if (v903 && v905)
    {
      v899 = *(_QWORD *)(v901 + 64);
      if (v899 <= v905)
        v899 = v905;
      *(_QWORD *)(v901 + 56) = 0;
      *(_QWORD *)(v901 + 64) = v899;
    }
    if (v904 && v906)
    {
      v900 = *(_QWORD *)(v902 + 64);
      if (v900 <= v906)
        v900 = v906;
      *(_QWORD *)(v902 + 56) = 0;
      *(_QWORD *)(v902 + 64) = v900;
    }
    _Unwind_Resume(v898);
  }
  v600 = *(_QWORD **)(v909 + 8);
  v601 = v600[3];
  v602 = v600[4];
  v603 = v602 - v601;
  if (v602 == v601)
    goto LABEL_653;
  v604 = 0;
  v605 = v603 >> 3;
  while (1)
  {
    v606 = *(unsigned __int8 **)(v601 + 8 * v604);
    if (*v606 == v599[110])
    {
      v607 = *((_QWORD *)v606 + 1);
      v608 = v600[15];
      if (v607 < (v600[16] - v608) >> 3)
        break;
    }
    if (++v604 >= v605)
      goto LABEL_653;
  }
  v609 = *(_QWORD *)(v608 + 8 * v607);
  if (!v609)
LABEL_653:
    v610 = 0;
  else
    v610 = *(_QWORD **)(*(_QWORD *)(v609 + 24) + 8 * v599[111]);
  v611 = v610[9];
  if (v610[10] != v611)
    v610[10] = v611;
  v612 = v610;
  if (v599[115])
  {
    v613 = *(_QWORD **)(v909 + 8);
    v614 = v613[3];
    v615 = v613[4];
    v616 = v615 - v614;
    if (v615 == v614)
      goto LABEL_664;
    v617 = 0;
    v618 = v616 >> 3;
    while (1)
    {
      v619 = *(unsigned __int8 **)(v614 + 8 * v617);
      if (*v619 == v599[113])
      {
        v620 = *((_QWORD *)v619 + 1);
        v621 = v613[15];
        if (v620 < (v613[16] - v621) >> 3)
          break;
      }
      if (++v617 >= v618)
        goto LABEL_664;
    }
    v622 = *(_QWORD *)(v621 + 8 * v620);
    if (!v622)
LABEL_664:
      v612 = 0;
    else
      v612 = *(_QWORD **)(*(_QWORD *)(v622 + 24) + 8 * v599[114]);
    v623 = v612[9];
    if (v612[10] != v623)
      v612[10] = v623;
  }
  v624 = v610;
  if (v599[118])
  {
    v625 = *(_QWORD **)(v909 + 8);
    v626 = v625[3];
    v627 = v625[4];
    v628 = v627 - v626;
    if (v627 == v626)
      goto LABEL_675;
    v629 = 0;
    v630 = v628 >> 3;
    while (1)
    {
      v631 = *(unsigned __int8 **)(v626 + 8 * v629);
      if (*v631 == v599[116])
      {
        v632 = *((_QWORD *)v631 + 1);
        v633 = v625[15];
        if (v632 < (v625[16] - v633) >> 3)
          break;
      }
      if (++v629 >= v630)
        goto LABEL_675;
    }
    v634 = *(_QWORD *)(v633 + 8 * v632);
    if (!v634)
LABEL_675:
      v624 = 0;
    else
      v624 = *(_QWORD **)(*(_QWORD *)(v634 + 24) + 8 * v599[117]);
    v635 = v624[9];
    if (v624[10] != v635)
      v624[10] = v635;
  }
  v636 = v610;
  if (v599[121])
  {
    v637 = *(_QWORD **)(v909 + 8);
    v638 = v637[3];
    v639 = v637[4];
    v640 = v639 - v638;
    if (v639 == v638)
      goto LABEL_686;
    v641 = 0;
    v642 = v640 >> 3;
    while (1)
    {
      v643 = *(unsigned __int8 **)(v638 + 8 * v641);
      if (*v643 == v599[119])
      {
        v644 = *((_QWORD *)v643 + 1);
        v645 = v637[15];
        if (v644 < (v637[16] - v645) >> 3)
          break;
      }
      if (++v641 >= v642)
        goto LABEL_686;
    }
    v646 = *(_QWORD *)(v645 + 8 * v644);
    if (!v646)
LABEL_686:
      v636 = 0;
    else
      v636 = *(_QWORD **)(*(_QWORD *)(v646 + 24) + 8 * v599[120]);
    v647 = v636[9];
    if (v636[10] != v647)
      v636[10] = v647;
  }
  v648 = v610;
  if (v599[124])
  {
    v649 = *(_QWORD **)(v909 + 8);
    v650 = v649[3];
    v651 = v649[4];
    v652 = v651 - v650;
    if (v651 == v650)
      goto LABEL_697;
    v653 = 0;
    v654 = v652 >> 3;
    while (1)
    {
      v655 = *(unsigned __int8 **)(v650 + 8 * v653);
      if (*v655 == v599[122])
      {
        v656 = *((_QWORD *)v655 + 1);
        v657 = v649[15];
        if (v656 < (v649[16] - v657) >> 3)
          break;
      }
      if (++v653 >= v654)
        goto LABEL_697;
    }
    v658 = *(_QWORD *)(v657 + 8 * v656);
    if (!v658)
LABEL_697:
      v648 = 0;
    else
      v648 = *(_QWORD **)(*(_QWORD *)(v658 + 24) + 8 * v599[123]);
    v659 = v648[9];
    if (v648[10] != v659)
      v648[10] = v659;
  }
  if (*(_BYTE *)(v907 + 16))
  {
    *(_OWORD *)__p = *(_OWORD *)v907;
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
  }
  if (__p[0] != *(void **)(v6 + 320) || __p[1] != *(void **)(v6 + 328))
  {
    v849 = (int)__p[0];
    v850 = HIDWORD(__p[0]);
    *(_DWORD *)(v6 + 320) = __p[0];
    *(_DWORD *)(v6 + 324) = v850;
    v851 = (int)__p[1];
    v852 = HIDWORD(__p[1]);
    *(_DWORD *)(v6 + 328) = __p[1];
    *(_DWORD *)(v6 + 332) = v852;
    v853 = *(_QWORD **)(v6 + 1824);
    v854 = *(_QWORD **)(v6 + 1832);
    v855 = *(_QWORD **)(v6 + 1840);
    v856 = (_DWORD *)v853[1];
    v856[15] = v849;
    v856[16] = v850;
    v856[17] = v851;
    v856[18] = v852;
    v857 = (_DWORD *)*v853;
    v857[15] = v849;
    v857[16] = v850;
    v857[17] = v851;
    v857[18] = v852;
    v858 = (_DWORD *)v853[3];
    v858[15] = v849;
    v858[16] = v850;
    v858[17] = v851;
    v858[18] = v852;
    v859 = (_DWORD *)v853[2];
    v859[15] = v849;
    v859[16] = v850;
    v859[17] = v851;
    v859[18] = v852;
    v860 = (_DWORD *)v854[1];
    v860[15] = v849;
    v860[16] = v850;
    v860[17] = v851;
    v860[18] = v852;
    v861 = (_DWORD *)*v854;
    v861[15] = v849;
    v861[16] = v850;
    v861[17] = v851;
    v861[18] = v852;
    v862 = (_DWORD *)v854[3];
    v862[15] = v849;
    v862[16] = v850;
    v862[17] = v851;
    v862[18] = v852;
    v863 = (_DWORD *)v854[2];
    v863[15] = v849;
    v863[16] = v850;
    v863[17] = v851;
    v863[18] = v852;
    v864 = (_DWORD *)v855[1];
    v864[15] = v849;
    v864[16] = v850;
    v864[17] = v851;
    v864[18] = v852;
    v865 = (_DWORD *)*v855;
    v865[15] = v849;
    v865[16] = v850;
    v865[17] = v851;
    v865[18] = v852;
    v866 = (_DWORD *)v855[3];
    v866[15] = v849;
    v866[16] = v850;
    v866[17] = v851;
    v866[18] = v852;
    v867 = (_DWORD *)v855[2];
    v867[15] = v849;
    v867[16] = v850;
    v867[17] = v851;
    v867[18] = v852;
  }
  __p[0] = v910;
  LOBYTE(__p[1]) = a3;
  WORD4(v924) = 0;
  *(_QWORD *)&v924 = v610;
  md::LabelRenderer::createRenderItemsForPass(v6, 0, (uint64_t)__p);
  *(_QWORD *)&v924 = v612;
  md::LabelRenderer::createRenderItemsForPass(v6, 1u, (uint64_t)__p);
  *(_QWORD *)&v924 = v624;
  md::LabelRenderer::createRenderItemsForPass(v6, 2u, (uint64_t)__p);
  *(_QWORD *)&v924 = v636;
  md::LabelRenderer::createRenderItemsForPass(v6, 3u, (uint64_t)__p);
  *(_QWORD *)&v924 = v648;
  md::LabelRenderer::createRenderItemsForPass(v6, 4u, (uint64_t)__p);
  v868 = *(_QWORD *)(v6 + 1776);
  v869 = *(_QWORD *)(v6 + 1784);
  if (v868 != v869)
  {
    do
    {
      ggl::CommandBuffer::pushLoadItem(v610, v868);
      v868 += 80;
    }
    while (v868 != v869);
    v870 = *(_QWORD **)(v6 + 1784);
    v871 = *(_QWORD **)(v6 + 1776);
    if (v870 != v871)
    {
      v872 = v870 - 4;
      while (1)
      {
        v874 = (_QWORD *)v872[3];
        if (v872 == v874)
          break;
        if (v874)
        {
          v875 = 5;
LABEL_921:
          (*(void (**)(void))(*v874 + 8 * v875))();
        }
        if (*((_BYTE *)v872 - 28))
          *((_BYTE *)v872 - 28) = 0;
        if (*((_BYTE *)v872 - 32))
          *((_BYTE *)v872 - 32) = 0;
        v873 = v872 - 6;
        v872 -= 10;
        if (v873 == v871)
          goto LABEL_926;
      }
      v874 = v872;
      v875 = 4;
      goto LABEL_921;
    }
LABEL_926:
    *(_QWORD *)(v6 + 1784) = v871;
  }
  *(_QWORD *)(v6 + 104) = *(_QWORD *)(v6 + 96);
  *(_QWORD *)(v6 + 136) = *(_QWORD *)(v6 + 128);
  *(_QWORD *)(v6 + 168) = *(_QWORD *)(v6 + 160);
  *(_QWORD *)(v6 + 200) = *(_QWORD *)(v6 + 192);
  *(_QWORD *)(v6 + 232) = *(_QWORD *)(v6 + 224);
  result = *(gdc::Registry **)(v6 + 24);
  *(_QWORD *)(v6 + 24) = 0;
  if (result)
  {
    gdc::Registry::~Registry(result);
    return (gdc::Registry *)MEMORY[0x1A1AF4E00]();
  }
  return result;
}

void md::LabelRenderer::initIconMeshes(md::LabelRenderData &,md::LabelLayoutContext const&)::$_0::operator()(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  __int16 v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  _DWORD *v19;
  float32x4_t v20;
  float32x4_t v21;
  _DWORD *v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  float64x2_t v36[8];

  v4 = *(_QWORD *)(a3 + 32);
  if (!v4)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    gdc::Registry::storage<md::GlyphMeshDescriptor>(v35);
    return;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 48))(v4, a2, *a1);
  v7 = a1[1];
  v8 = *(unsigned __int8 *)(a2 + 30);
  if (*(_BYTE *)(a2 + 30))
  {
    v9 = *((_DWORD *)v7 + 4);
    v10 = *((_DWORD *)v7 + 5);
    v11 = 256 - v9;
    if (v11 >= v8)
      v11 = 0;
    v12 = v9 + v11;
    *((_DWORD *)v7 + 4) = v9 + v11 + v8;
    *((_DWORD *)v7 + 5) = v10 + v8;
    v13 = v7[3] + 16 * (v9 + v11);
    v14 = *(unsigned __int8 *)(a2 + 31);
    if (*(_BYTE *)(a2 + 31))
    {
LABEL_6:
      v15 = *((_DWORD *)v7 + 8);
      v16 = *((_DWORD *)v7 + 9);
      v17 = 256 - v15;
      if (v17 >= v14)
        v17 = 0;
      v18 = v15 + v17;
      *((_DWORD *)v7 + 8) = v15 + v17 + v14;
      *((_DWORD *)v7 + 9) = v16 + v14;
      v19 = (_DWORD *)(v7[5] + 4 * (v15 + v17));
      if (*(_BYTE *)a3)
        goto LABEL_9;
      goto LABEL_10;
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = *(unsigned __int8 *)(a2 + 31);
    if (*(_BYTE *)(a2 + 31))
      goto LABEL_6;
  }
  v18 = 0;
  v19 = 0;
  if (*(_BYTE *)a3)
  {
LABEL_9:
    gm::operator*<double,4,4,4>(v36[0].f64, (double *)(v7[6] + 736), (double *)(*a1)[8]);
    v20 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v36[2]), v36[3]);
    *(float32x4_t *)v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v36[0]), v36[1]);
    *(float32x4_t *)(v13 + 16) = v20;
    v21 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v36[6]), v36[7]);
    *(float32x4_t *)(v13 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v36[4]), v36[5]);
    *(float32x4_t *)(v13 + 48) = v21;
    v13 += 64;
  }
LABEL_10:
  if (*(_BYTE *)(a3 + 1))
  {
    v22 = *a1;
    *v19 = *((_DWORD *)*a1 + 22);
    v19[1] = v22[23];
    v19[2] = v22[24];
    v23 = *(unsigned __int8 *)(a3 + 2);
    if (*(_BYTE *)(a3 + 2))
    {
      v19[3] = v22[25];
      v19[4] = v22[26];
      v19[5] = v22[27];
      v23 = 3;
    }
    *(_DWORD *)v13 = v22[18];
    *(_DWORD *)(v13 + 4) = v22[19];
    *(_DWORD *)(v13 + 8) = v22[20];
    v24 = v22 + 21;
  }
  else
  {
    v23 = *(unsigned __int8 *)(a3 + 3);
    v25 = (uint64_t)*a1;
    if (!*(_BYTE *)(a3 + 3))
      goto LABEL_20;
    v23 = 0;
    *v19 = *(_DWORD *)(v25 + 112);
    *(_DWORD *)v13 = *(_DWORD *)(v25 + 116);
    *(_DWORD *)(v13 + 4) = *(_DWORD *)(v25 + 120);
    *(_DWORD *)(v13 + 8) = *(_DWORD *)(v25 + 124);
    v24 = (_DWORD *)(v25 + 128);
  }
  *(_DWORD *)(v13 + 12) = *v24;
  v25 = (uint64_t)*a1;
LABEL_20:
  if (*(_BYTE *)(a2 + 29))
  {
    v26 = 0;
    v27 = (int)fminf(fmaxf(*(float *)(v25 + 48) * 255.0, 0.0), 255.0);
    v28 = (int)fminf(fmaxf(*(float *)(v25 + 52) * 100.0, 0.0), 255.0);
    v29 = (int)fminf(fmaxf(*(float *)(v25 + 56) * 255.0, 0.0), 255.0);
    v30 = (int)fminf(fmaxf(*(float *)(v25 + 32) * 65535.0, 0.0), 65535.0);
    v31 = (int)fminf(fmaxf(*(float *)(v25 + 36) * 65535.0, 0.0), 65535.0);
    v32 = (int)fminf(fmaxf(*(float *)(v25 + 40) * 65535.0, 0.0), 65535.0);
    v33 = (int)fminf(fmaxf(*(float *)(v25 + 44) * 65535.0, 0.0), 65535.0);
    v34 = *a1[1] + ((unint64_t)*(unsigned __int16 *)(a2 + 38) << 7);
    do
    {
      *(_QWORD *)v34 = *(_QWORD *)v25;
      *(_DWORD *)(v34 + 8) = 0;
      *(_WORD *)(v34 + 16) = v30;
      *(_WORD *)(v34 + 18) = v31;
      *(_BYTE *)(v34 + 20) = v27;
      *(_BYTE *)(v34 + 21) = v28;
      *(_BYTE *)(v34 + 22) = v29;
      *(_BYTE *)(v34 + 23) = 0;
      *(_WORD *)(v34 + 24) = v12;
      *(_WORD *)(v34 + 26) = v18;
      *(_QWORD *)(v34 + 32) = *(_QWORD *)(v25 + 8);
      *(_DWORD *)(v34 + 40) = 0;
      *(_WORD *)(v34 + 48) = v32;
      *(_WORD *)(v34 + 50) = v31;
      *(_BYTE *)(v34 + 52) = v27;
      *(_BYTE *)(v34 + 53) = v28;
      *(_BYTE *)(v34 + 54) = v29;
      *(_BYTE *)(v34 + 55) = 1;
      *(_WORD *)(v34 + 56) = v12;
      *(_WORD *)(v34 + 58) = v18;
      *(_QWORD *)(v34 + 64) = *(_QWORD *)(v25 + 16);
      *(_DWORD *)(v34 + 72) = 0;
      *(_WORD *)(v34 + 80) = v32;
      *(_WORD *)(v34 + 82) = v33;
      *(_BYTE *)(v34 + 84) = v27;
      *(_BYTE *)(v34 + 85) = v28;
      *(_BYTE *)(v34 + 86) = v29;
      *(_BYTE *)(v34 + 87) = 2;
      *(_WORD *)(v34 + 88) = v12;
      *(_WORD *)(v34 + 90) = v18;
      *(_QWORD *)(v34 + 96) = *(_QWORD *)(v25 + 24);
      *(_DWORD *)(v34 + 104) = 0;
      *(_WORD *)(v34 + 112) = v30;
      *(_WORD *)(v34 + 114) = v33;
      *(_BYTE *)(v34 + 116) = v27;
      *(_BYTE *)(v34 + 117) = v28;
      *(_BYTE *)(v34 + 118) = v29;
      *(_BYTE *)(v34 + 119) = 3;
      *(_WORD *)(v34 + 120) = v12;
      *(_WORD *)(v34 + 122) = v18;
      v18 += v23;
      ++v26;
      v34 += 128;
    }
    while (v26 < *(unsigned __int8 *)(a2 + 29));
  }
}

uint64_t gdc::Registry::storage<md::GlyphMeshDescriptor>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6080C5D91E489CF6;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6080C5D91E489CF6;
      if (*(_QWORD *)&v3 <= 0x6080C5D91E489CF6uLL)
        v5 = 0x6080C5D91E489CF6uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6080C5D91E489CF6;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6080C5D91E489CF6)
            {
              if (v7[2] == 0x6080C5D91E489CF6)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6080C5D91E489CF6)
          {
            if (v7[2] == 0x6080C5D91E489CF6)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::GlyphMeshDescriptor]";
  *(_QWORD *)(v11 + 24) = 23;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B39A8;
  *(_QWORD *)(v11 + 8) = 0x6080C5D91E489CF6;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6080C5D91E489CF6uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6080C5D91E489CF6;
  v15[1] = "md::GlyphMeshDescriptor]";
  v15[2] = 23;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6080C5D91E489CF6, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FDC7974(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::LabelRenderer::initGlyphMeshes(md::LabelRenderData &,md::LabelLayoutContext const&)::$_0::operator()(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  __int16 v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  float32x4_t v23;
  float32x4_t v24;
  double v25;
  double v26;
  float v27;
  float v28;
  double v29;
  double v30;
  float v31;
  float v32;
  double v33;
  double v34;
  float v35;
  float v36;
  double v37;
  double v38;
  float v39;
  float v40;
  double v41;
  double v42;
  float v43;
  float v44;
  double v45;
  double v46;
  float v47;
  float v48;
  double v49;
  double v50;
  float v51;
  float v52;
  double v53;
  double v54;
  float v55;
  float v56;
  float32x4_t v57;
  float32x4_t v58;
  float *v59;
  float v60;
  float v61;
  int v62;
  unint64_t v63;
  float32x4_t v64;
  int8x8_t v65;
  uint64_t v66;
  uint64_t v67;
  float *v68;
  int v75;
  int v76;
  int v77;
  int v78;
  float v79;
  float v82;
  uint64_t v85;
  double v86[16];
  float64x2_t v87[8];
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  float64x2_t v104[8];

  v4 = *(_QWORD *)(a3 + 32);
  if (!v4)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    gdc::ComponentStorageWrapper<md::GlyphMeshDescriptor>::~ComponentStorageWrapper();
    return;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 48))(v4, a2, *a1);
  v7 = a1[1];
  v8 = *(unsigned __int8 *)(a2 + 30);
  if (*(_BYTE *)(a2 + 30))
  {
    v9 = *(_DWORD *)(v7 + 16);
    v10 = *(_DWORD *)(v7 + 20);
    v11 = 256 - v9;
    if (v11 >= v8)
      v11 = 0;
    v12 = v9 + v11;
    *(_DWORD *)(v7 + 16) = v9 + v11 + v8;
    *(_DWORD *)(v7 + 20) = v10 + v8;
    v13 = *(_QWORD *)(v7 + 24) + 16 * (v9 + v11);
    v14 = *(unsigned __int8 *)(a2 + 31);
    if (*(_BYTE *)(a2 + 31))
      goto LABEL_6;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = *(unsigned __int8 *)(a2 + 31);
    if (*(_BYTE *)(a2 + 31))
    {
LABEL_6:
      v15 = *(_DWORD *)(v7 + 32);
      v16 = *(_DWORD *)(v7 + 36);
      v17 = 256 - v15;
      if (v17 >= v14)
        v17 = 0;
      v18 = v15 + v17;
      *(_DWORD *)(v7 + 32) = v15 + v17 + v14;
      *(_DWORD *)(v7 + 36) = v16 + v14;
      v19 = *(_QWORD *)(v7 + 40) + 4 * (v15 + v17);
      goto LABEL_11;
    }
  }
  v18 = 0;
  v19 = 0;
LABEL_11:
  v20 = *a1;
  if (*(_BYTE *)a3)
  {
    v85 = v19;
    v21 = a1[2];
    v22 = *(double **)(v20 + 64);
    gm::operator*<double,4,4,4>(v104[0].f64, (double *)(v21 + 736), v22);
    v23 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v104[2]), v104[3]);
    *(float32x4_t *)v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v104[0]), v104[1]);
    *(float32x4_t *)(v13 + 16) = v23;
    v24 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v104[6]), v104[7]);
    *(float32x4_t *)(v13 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v104[4]), v104[5]);
    *(float32x4_t *)(v13 + 48) = v24;
    if (*(_BYTE *)(a3 + 1))
    {
      gm::operator*<double,4,4,4>(&v88, (double *)(v21 + 480), v22);
      v25 = v88;
      v26 = v89;
      v27 = v88;
      v28 = v89;
      v29 = v90;
      v30 = v91;
      v31 = v90;
      v32 = v91;
      v33 = v92;
      v34 = v93;
      v35 = v92;
      v36 = v93;
      v37 = v94;
      v38 = v95;
      v39 = v94;
      v40 = v95;
      v41 = v96;
      v42 = v97;
      v43 = v96;
      v44 = v97;
      v45 = v98;
      v46 = v99;
      v47 = v98;
      v48 = v99;
      v49 = v100;
      v50 = v101;
      v51 = v100;
      v52 = v101;
      v53 = v102;
      v54 = v103;
      v55 = v102;
      v56 = v103;
      *(float *)(v13 + 64) = v27;
      *(float *)(v13 + 68) = v28;
      *(float *)(v13 + 72) = v31;
      *(float *)(v13 + 76) = v32;
      *(float *)(v13 + 80) = v35;
      *(float *)(v13 + 84) = v36;
      *(float *)(v13 + 88) = v39;
      *(float *)(v13 + 92) = v40;
      *(float *)(v13 + 96) = v43;
      *(float *)(v13 + 100) = v44;
      *(float *)(v13 + 104) = v47;
      *(float *)(v13 + 108) = v48;
      *(float *)(v13 + 112) = v51;
      *(float *)(v13 + 116) = v52;
      *(float *)(v13 + 120) = v55;
      *(float *)(v13 + 124) = v56;
      v86[0] = v25;
      v86[1] = v33;
      v86[2] = v41;
      v86[3] = v49;
      v86[4] = v26;
      v86[5] = v34;
      v86[6] = v42;
      v86[7] = v50;
      v86[8] = v29;
      v86[9] = v37;
      v86[10] = v45;
      v86[11] = v53;
      v86[12] = v30;
      v86[13] = v38;
      v86[14] = v46;
      v86[15] = v54;
      gm::Matrix<double,4,4>::inverted<int,void>(v87[0].f64, v86);
      v57 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v87[2]), v87[3]);
      *(float32x4_t *)(v13 + 128) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v87[0]), v87[1]);
      *(float32x4_t *)(v13 + 144) = v57;
      v58 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v87[6]), v87[7]);
      *(float32x4_t *)(v13 + 160) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v87[4]), v87[5]);
      *(float32x4_t *)(v13 + 176) = v58;
      v59 = (float *)a1[3];
      v60 = fmaxf(v59[2] / *v59, -1.0);
      v61 = (float)(v60 * 127.5) + 127.5;
      if (*v59 == 0.0)
        LOBYTE(v62) = 0;
      else
        v62 = (int)fminf(fmaxf((float)(v59[3] * 255.0) / *v59, 0.0), 255.0);
      if (v60 > 1.0)
        v61 = 255.0;
      *(_BYTE *)v85 = v62;
      *(_BYTE *)(v85 + 1) = (int)fminf(fmaxf(v61, 0.0), 255.0);
      *(_BYTE *)(v85 + 2) = (int)fminf(fmaxf(*(float *)(a1[3] + 4) * 255.0, 0.0), 255.0);
      *(_DWORD *)(v85 + 4) = *(_DWORD *)(a1[3] + 16);
      *(_DWORD *)(v85 + 8) = *(_DWORD *)(a1[3] + 20);
      v20 = *a1;
      v7 = a1[1];
    }
  }
  if (*(_WORD *)(a2 + 32))
  {
    v63 = 0;
    v64 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    v65 = vuzp1_s8((int8x8_t)vmovn_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)(v20 + 28), v64))), (int8x8_t)vmovn_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)(v20 + 44), v64))));
    v66 = *(_QWORD *)(v7 + 8) + 160 * *(unsigned __int16 *)(a2 + 38);
    v67 = 88;
    do
    {
      v68 = (float *)(*(_QWORD *)*a1 + v67);
      _S4 = *(_DWORD *)(*a1 + 24);
      __asm { FCVT            H4, S4 }
      _S5 = *v68;
      __asm { FCVT            H5, S5 }
      v75 = (int)fminf(fmaxf(*(v68 - 10) * 65535.0, 0.0), 65535.0);
      v76 = (int)fminf(fmaxf(*(v68 - 9) * 65535.0, 0.0), 65535.0);
      v77 = (int)fminf(fmaxf(*(v68 - 8) * 65535.0, 0.0), 65535.0);
      v78 = (int)fminf(fmaxf(*(v68 - 7) * 65535.0, 0.0), 65535.0);
      *(float *)v66 = *(v68 - 22);
      *(float *)(v66 + 4) = *(v68 - 21);
      *(float *)(v66 + 8) = *(v68 - 20);
      *(_WORD *)(v66 + 12) = v75;
      *(_WORD *)(v66 + 14) = v76;
      *(_WORD *)(v66 + 16) = _S4;
      *(_WORD *)(v66 + 18) = LOWORD(_S5);
      *(int8x8_t *)(v66 + 20) = v65;
      *(_WORD *)(v66 + 28) = v12;
      *(_WORD *)(v66 + 30) = v18;
      v79 = *(v68 - 4) + 1.0;
      _S6 = (float)((float)(*(v68 - 6) * 0.28126) / v79) + 0.5;
      _S7 = (float)((float)(*(v68 - 5) * 0.28126) / v79) + 0.5;
      __asm
      {
        FCVT            H6, S6
        FCVT            H7, S7
      }
      *(_WORD *)(v66 + 32) = LOWORD(_S6);
      *(_WORD *)(v66 + 34) = LOWORD(_S7);
      v82 = *(v68 - 1) + 1.0;
      _S16 = (float)((float)(*(v68 - 3) * 0.28126) / v82) + 0.5;
      _S17 = (float)((float)(*(v68 - 2) * 0.28126) / v82) + 0.5;
      __asm
      {
        FCVT            H16, S16
        FCVT            H17, S17
      }
      *(_WORD *)(v66 + 36) = LOWORD(_S16);
      *(_WORD *)(v66 + 38) = LOWORD(_S17);
      *(float *)(v66 + 40) = *(v68 - 19);
      *(float *)(v66 + 44) = *(v68 - 18);
      *(float *)(v66 + 48) = *(v68 - 17);
      *(_WORD *)(v66 + 52) = v77;
      *(_WORD *)(v66 + 54) = v76;
      *(_WORD *)(v66 + 56) = _S4;
      *(_WORD *)(v66 + 58) = LOWORD(_S5);
      *(int8x8_t *)(v66 + 60) = v65;
      *(_WORD *)(v66 + 68) = v12;
      *(_WORD *)(v66 + 70) = v18;
      *(_WORD *)(v66 + 72) = LOWORD(_S6);
      *(_WORD *)(v66 + 74) = LOWORD(_S7);
      *(_WORD *)(v66 + 76) = LOWORD(_S16);
      *(_WORD *)(v66 + 78) = LOWORD(_S17);
      *(float *)(v66 + 80) = *(v68 - 16);
      *(float *)(v66 + 84) = *(v68 - 15);
      *(float *)(v66 + 88) = *(v68 - 14);
      *(_WORD *)(v66 + 92) = v77;
      *(_WORD *)(v66 + 94) = v78;
      *(_WORD *)(v66 + 96) = _S4;
      *(_WORD *)(v66 + 98) = LOWORD(_S5);
      *(int8x8_t *)(v66 + 100) = v65;
      *(_WORD *)(v66 + 108) = v12;
      *(_WORD *)(v66 + 110) = v18;
      *(_WORD *)(v66 + 112) = LOWORD(_S6);
      *(_WORD *)(v66 + 114) = LOWORD(_S7);
      *(_WORD *)(v66 + 116) = LOWORD(_S16);
      *(_WORD *)(v66 + 118) = LOWORD(_S17);
      *(float *)(v66 + 120) = *(v68 - 13);
      *(float *)(v66 + 124) = *(v68 - 12);
      *(float *)(v66 + 128) = *(v68 - 11);
      *(_WORD *)(v66 + 132) = v75;
      *(_WORD *)(v66 + 134) = v78;
      *(_WORD *)(v66 + 136) = _S4;
      *(_WORD *)(v66 + 138) = LOWORD(_S5);
      *(int8x8_t *)(v66 + 140) = v65;
      *(_WORD *)(v66 + 148) = v12;
      *(_WORD *)(v66 + 150) = v18;
      *(_WORD *)(v66 + 152) = LOWORD(_S6);
      *(_WORD *)(v66 + 154) = LOWORD(_S7);
      *(_WORD *)(v66 + 156) = LOWORD(_S16);
      *(_WORD *)(v66 + 158) = LOWORD(_S17);
      ++v63;
      v67 += 92;
      v66 += 160;
    }
    while (v63 < *(unsigned __int16 *)(a2 + 32));
  }
}

void gdc::ComponentStorageWrapper<md::GlyphMeshDescriptor>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::IconMeshDescriptor>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ComponentStorageWrapper<md::GlyphMeshDescriptor>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[4];

  v36[3] = *MEMORY[0x1E0C80C00];
  v33 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  v15 = (_WORD *)(v14 + 40 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v16 = a1[11];
  *v15 = *(_WORD *)(v16 - 40);
  v17 = v15 + 4;
  v18 = *(_QWORD *)(v16 - 8);
  if (v18)
  {
    v19 = v16 - 32;
    if (v18 == v19)
    {
      v35 = v34;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v19 + 24))(v19, v34);
    }
    else
    {
      v35 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    }
  }
  else
  {
    v35 = 0;
  }
  if (v17 != v34)
  {
    v20 = v35;
    v21 = v14 + 40 * v7;
    v24 = *(_QWORD **)(v21 + 32);
    v23 = (_QWORD *)(v21 + 32);
    v22 = v24;
    if (v35 == v34)
    {
      if (v22 == v17)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v34[0] + 24))(v34, v36);
        (*(void (**)(_QWORD *))(*v35 + 32))(v35);
        v35 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v23 + 24))(*v23, v34);
        (*(void (**)(_QWORD))(*(_QWORD *)*v23 + 32))(*v23);
        *v23 = 0;
        v35 = v34;
        (*(void (**)(_QWORD *, _QWORD *))(v36[0] + 24))(v36, v17);
        (*(void (**)(_QWORD *))(v36[0] + 32))(v36);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v34[0] + 24))(v34, v17);
        (*(void (**)(_QWORD *))(*v35 + 32))(v35);
        v35 = (_QWORD *)*v23;
      }
      *v23 = v17;
    }
    else if (v22 == v17)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*v17 + 24))(v17, v34);
      (*(void (**)(_QWORD))(*(_QWORD *)*v23 + 32))(*v23);
      *v23 = v35;
      v35 = v34;
    }
    else
    {
      v35 = v22;
      *v23 = v20;
    }
  }
  v25 = v35;
  if (v35 == v34)
  {
    v26 = 4;
    v25 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_29;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_29:
  v27 = a1[11];
  v28 = *(_QWORD **)(v27 - 8);
  if (v28 == (_QWORD *)(v27 - 32))
  {
    v29 = 4;
    v28 = (_QWORD *)(v27 - 32);
    goto LABEL_33;
  }
  if (v28)
  {
    v29 = 5;
LABEL_33:
    (*(void (**)(void))(*v28 + 8 * v29))();
  }
  a1[11] = v27 - 40;
  v30 = (_QWORD *)a1[28];
  if (v30)
  {
    v31 = a1[31];
    do
    {
      v34[0] = &v33;
      v34[1] = 1;
      v36[0] = v31;
      v32 = v30[6];
      if (!v32)
        std::__throw_bad_function_call[abi:nn180100]();
      (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v32 + 48))(v32, v36, v34);
      v30 = (_QWORD *)*v30;
    }
    while (v30);
  }
  return 1;
}

BOOL gdc::ComponentStorageWrapper<md::GlyphMeshDescriptor>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<md::ShadowMeshDescriptor>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xF09D1DB37876C764;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF09D1DB37876C764;
      if (*(_QWORD *)&v3 <= 0xF09D1DB37876C764)
        v5 = 0xF09D1DB37876C764 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF09D1DB37876C764;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF09D1DB37876C764)
            {
              if (v7[2] == 0xF09D1DB37876C764)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF09D1DB37876C764)
          {
            if (v7[2] == 0xF09D1DB37876C764)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ShadowMeshDescriptor]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270E48;
  *(_QWORD *)(v11 + 8) = 0xF09D1DB37876C764;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF09D1DB37876C764, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF09D1DB37876C764;
  v15[1] = "md::ShadowMeshDescriptor]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF09D1DB37876C764, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FDC84DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::LabelRenderer::initShadowhMeshes(md::LabelRenderData &,md::LabelLayoutContext const&)::$_0::operator()(_QWORD *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  __int16 v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  __int16 v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  float *v28;
  int v29;
  int v30;
  float64x2_t v31[8];

  v4 = *((_QWORD *)a3 + 4);
  if (!v4)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    gdc::ComponentStorageWrapper<md::ShadowMeshDescriptor>::~ComponentStorageWrapper();
    return;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 48))(v4, a2, *a1);
  v7 = a1[1];
  v8 = *(unsigned __int8 *)(a2 + 30);
  if (*(_BYTE *)(a2 + 30))
  {
    v9 = *(_DWORD *)(v7 + 16);
    v10 = *(_DWORD *)(v7 + 20);
    v11 = 256 - v9;
    if (v11 >= v8)
      v11 = 0;
    v12 = v9 + v11;
    *(_DWORD *)(v7 + 16) = v9 + v11 + v8;
    *(_DWORD *)(v7 + 20) = v10 + v8;
    v13 = *(_QWORD *)(v7 + 24) + 16 * (v9 + v11);
    v14 = *(unsigned __int8 *)(a2 + 31);
    if (*(_BYTE *)(a2 + 31))
      goto LABEL_6;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = *(unsigned __int8 *)(a2 + 31);
    if (*(_BYTE *)(a2 + 31))
    {
LABEL_6:
      v15 = *(_DWORD *)(v7 + 32);
      v16 = *(_DWORD *)(v7 + 36);
      v17 = 256 - v15;
      if (v17 >= v14)
        v17 = 0;
      v18 = v15 + v17;
      *(_DWORD *)(v7 + 32) = v15 + v17 + v14;
      *(_DWORD *)(v7 + 36) = v16 + v14;
      v19 = (_DWORD *)(*(_QWORD *)(v7 + 40) + 4 * (v15 + v17));
      goto LABEL_11;
    }
  }
  v18 = 0;
  v19 = 0;
LABEL_11:
  v20 = *a3;
  v21 = *a1;
  if (v20)
  {
    gm::operator*<double,4,4,4>(v31[0].f64, (double *)(a1[2] + 736), *(double **)(v21 + 40));
    v22 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v31[2]), v31[3]);
    *(float32x4_t *)v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v31[0]), v31[1]);
    *(float32x4_t *)(v13 + 16) = v22;
    v23 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v31[6]), v31[7]);
    *(float32x4_t *)(v13 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v31[4]), v31[5]);
    *(float32x4_t *)(v13 + 48) = v23;
    v13 += 64;
  }
  *(_DWORD *)v13 = *(_DWORD *)(v21 + 28);
  *v19 = *(_DWORD *)(v21 + 32);
  if (*(_WORD *)(a2 + 32))
  {
    v24 = 0;
    v25 = *(_QWORD *)a1[1] + ((unint64_t)*(unsigned __int16 *)(a2 + 38) << 7);
    v26 = 52;
    v27 = (int)fminf(fmaxf(*(float *)(*a1 + 24) * 255.0, 0.0), 255.0);
    do
    {
      v28 = (float *)(*(_QWORD *)*a1 + v26);
      v29 = (int)fminf(fmaxf(*(v28 - 1) * 32.0, 0.0), 65535.0);
      v30 = (int)fminf(fmaxf(*v28 * 32.0, 0.0), 65535.0);
      *(float *)v25 = *(v28 - 13);
      *(float *)(v25 + 4) = *(v28 - 12);
      *(float *)(v25 + 8) = *(v28 - 11);
      *(_WORD *)(v25 + 16) = v29;
      *(_WORD *)(v25 + 18) = v30;
      *(_BYTE *)(v25 + 20) = v27;
      *(_WORD *)(v25 + 21) = 100;
      *(_BYTE *)(v25 + 23) = 0;
      *(_WORD *)(v25 + 24) = v12;
      *(_WORD *)(v25 + 26) = v18;
      *(float *)(v25 + 32) = *(v28 - 10);
      *(float *)(v25 + 36) = *(v28 - 9);
      *(float *)(v25 + 40) = *(v28 - 8);
      *(_WORD *)(v25 + 48) = v29;
      *(_WORD *)(v25 + 50) = v30;
      *(_BYTE *)(v25 + 52) = v27;
      *(_WORD *)(v25 + 53) = 100;
      *(_BYTE *)(v25 + 55) = 1;
      *(_WORD *)(v25 + 56) = v12;
      *(_WORD *)(v25 + 58) = v18;
      *(float *)(v25 + 64) = *(v28 - 7);
      *(float *)(v25 + 68) = *(v28 - 6);
      *(float *)(v25 + 72) = *(v28 - 5);
      *(_WORD *)(v25 + 80) = v29;
      *(_WORD *)(v25 + 82) = v30;
      *(_BYTE *)(v25 + 84) = v27;
      *(_WORD *)(v25 + 85) = 100;
      *(_BYTE *)(v25 + 87) = 2;
      *(_WORD *)(v25 + 88) = v12;
      *(_WORD *)(v25 + 90) = v18;
      *(float *)(v25 + 96) = *(v28 - 4);
      *(float *)(v25 + 100) = *(v28 - 3);
      *(float *)(v25 + 104) = *(v28 - 2);
      *(_WORD *)(v25 + 112) = v29;
      *(_WORD *)(v25 + 114) = v30;
      *(_BYTE *)(v25 + 116) = v27;
      *(_WORD *)(v25 + 117) = 100;
      *(_BYTE *)(v25 + 119) = 3;
      *(_WORD *)(v25 + 120) = v12;
      *(_WORD *)(v25 + 122) = v18;
      ++v24;
      v26 += 56;
      v25 += 128;
    }
    while (v24 < *(unsigned __int16 *)(a2 + 32));
  }
}

void gdc::ComponentStorageWrapper<md::ShadowMeshDescriptor>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::IconMeshDescriptor>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ComponentStorageWrapper<md::ShadowMeshDescriptor>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[4];

  v36[3] = *MEMORY[0x1E0C80C00];
  v33 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  v15 = (_BYTE *)(v14 + 40 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v16 = a1[11];
  *v15 = *(_BYTE *)(v16 - 40);
  v17 = v15 + 8;
  v18 = *(_QWORD *)(v16 - 8);
  if (v18)
  {
    v19 = v16 - 32;
    if (v18 == v19)
    {
      v35 = v34;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v19 + 24))(v19, v34);
    }
    else
    {
      v35 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    }
  }
  else
  {
    v35 = 0;
  }
  if (v17 != v34)
  {
    v20 = v35;
    v21 = v14 + 40 * v7;
    v24 = *(_QWORD **)(v21 + 32);
    v23 = (_QWORD *)(v21 + 32);
    v22 = v24;
    if (v35 == v34)
    {
      if (v22 == v17)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v34[0] + 24))(v34, v36);
        (*(void (**)(_QWORD *))(*v35 + 32))(v35);
        v35 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v23 + 24))(*v23, v34);
        (*(void (**)(_QWORD))(*(_QWORD *)*v23 + 32))(*v23);
        *v23 = 0;
        v35 = v34;
        (*(void (**)(_QWORD *, _QWORD *))(v36[0] + 24))(v36, v17);
        (*(void (**)(_QWORD *))(v36[0] + 32))(v36);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v34[0] + 24))(v34, v17);
        (*(void (**)(_QWORD *))(*v35 + 32))(v35);
        v35 = (_QWORD *)*v23;
      }
      *v23 = v17;
    }
    else if (v22 == v17)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*v17 + 24))(v17, v34);
      (*(void (**)(_QWORD))(*(_QWORD *)*v23 + 32))(*v23);
      *v23 = v35;
      v35 = v34;
    }
    else
    {
      v35 = v22;
      *v23 = v20;
    }
  }
  v25 = v35;
  if (v35 == v34)
  {
    v26 = 4;
    v25 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_29;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_29:
  v27 = a1[11];
  v28 = *(_QWORD **)(v27 - 8);
  if (v28 == (_QWORD *)(v27 - 32))
  {
    v29 = 4;
    v28 = (_QWORD *)(v27 - 32);
    goto LABEL_33;
  }
  if (v28)
  {
    v29 = 5;
LABEL_33:
    (*(void (**)(void))(*v28 + 8 * v29))();
  }
  a1[11] = v27 - 40;
  v30 = (_QWORD *)a1[28];
  if (v30)
  {
    v31 = a1[31];
    do
    {
      v34[0] = &v33;
      v34[1] = 1;
      v36[0] = v31;
      v32 = v30[6];
      if (!v32)
        std::__throw_bad_function_call[abi:nn180100]();
      (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v32 + 48))(v32, v36, v34);
      v30 = (_QWORD *)*v30;
    }
    while (v30);
  }
  return 1;
}

BOOL gdc::ComponentStorageWrapper<md::ShadowMeshDescriptor>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *md::LabelRenderer::prepareDeviceBuffer(md::LabelRenderer *this, md::LabelRenderDeviceBuffer *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint32x2_t *v10;
  uint32x2_t *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _WORD *v25;
  unint64_t v26;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  unint64_t v49;
  _BYTE *v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *result;
  uint64_t v69;
  uint32x2_t v70;
  _QWORD v71[3];
  _QWORD *v72;
  __int128 v73;
  char v74;
  char v75;
  char v76;
  int v77;
  __int128 v78;
  _QWORD v79[3];
  _QWORD *v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)a2 + 34) = a3;
  v5 = (*((_DWORD *)a2 + 13) + 1) % 3u;
  *((_DWORD *)a2 + 13) = v5;
  if (a3 >= 0x100)
    v6 = 256;
  else
    v6 = a3;
  if (a3 >= 0xF0)
    v7 = 240;
  else
    v7 = a3;
  v8 = (a3 - 1) / v7;
  v9 = v8 + 1;
  v10 = (uint32x2_t *)((char *)a2 + 16 * v5);
  v12 = v10[7].u32[0];
  v11 = v10 + 7;
  if (v12 < v6 || v11->i32[1] <= v8 || *v11 != *(_QWORD *)a2)
  {
    v70 = vmax_u32(vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)vand_s8((int8x8_t)vneg_s32(vclz_s32(vadd_s32((int32x2_t)__PAIR64__(v9, v6), (int32x2_t)-1))), (int8x8_t)0x1F0000001FLL)), *(uint32x2_t *)a2);
    *v11 = v70;
    v13 = operator new();
    v14 = *((_DWORD *)a2 + 12);
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_DWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 56) = 0x100000001;
    *(_DWORD *)(v13 + 64) = 2;
    *(_DWORD *)(v13 + 68) = v14;
    *(_DWORD *)(v13 + 72) = 1;
    *(_QWORD *)(v13 + 76) = 0;
    *(_QWORD *)(v13 + 92) = 0;
    *(_QWORD *)(v13 + 84) = 0;
    *(_QWORD *)(v13 + 100) = 0x100000000;
    *(_QWORD *)v13 = &off_1E42BE438;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 40) = &unk_1E42BE458;
    *(_QWORD *)(v13 + 48) = "";
    *(_WORD *)(v13 + 128) = 0;
    *(_QWORD *)(v13 + 112) = 0;
    *(_QWORD *)(v13 + 120) = 0;
    *(_BYTE *)(v13 + 130) = 1;
    v15 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(v13 + 136) = *((_QWORD *)a2 + 3);
    *(_QWORD *)(v13 + 144) = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    *(uint32x2_t *)(v13 + 80) = v70;
    v18 = (char *)a2 + 16 * v5;
    v19 = *((_QWORD *)v18 + 8);
    *((_QWORD *)v18 + 8) = v13;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (*(_QWORD *)a2 != *(_QWORD *)&v70)
    {
      *(uint32x2_t *)a2 = v70;
      v20 = *((_QWORD *)a2 + 13);
      v21 = *((_QWORD *)a2 + 5) * (v70.i32[1] * v70.i32[0]);
      v22 = *((_QWORD *)a2 + 14) - v20;
      if (v21 <= v22)
      {
        if (v21 < v22)
          *((_QWORD *)a2 + 14) = v20 + v21;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append((unint64_t)a2 + 104, v21 - v22);
      }
      v23 = (_QWORD *)*((_QWORD *)a2 + 1);
      v24 = v23[1];
      v25 = (_WORD *)v23[9];
      *v25 = v70.i16[0];
      v26 = v23[8];
      if (v26 <= v24)
        v26 = v24;
      v23[7] = 0;
      v25[1] = v70.i16[2];
      if (v26 <= v24)
        v26 = v24;
      _S0 = 1.0 / (float)v70.u32[0];
      __asm { FCVT            H0, S0 }
      _S1 = 1.0 / (float)v70.u32[1];
      __asm { FCVT            H1, S1 }
      v25[2] = LOWORD(_S0);
      v25[3] = LOWORD(_S1);
      if (v26 > v24)
        v24 = v26;
      v23[8] = v24;
    }
  }
  v33 = operator new();
  v34 = ggl::TextureData2DNoCopy::TextureData2DNoCopy(v33, v6, v9, *((_DWORD *)a2 + 12), *((_QWORD *)a2 + 13));
  v35 = (char *)a2 + 16 * *((unsigned int *)a2 + 13);
  v71[0] = &off_1E42CABE0;
  v72 = v71;
  *(_QWORD *)&v73 = v34;
  *((_QWORD *)&v73 + 1) = *((_QWORD *)v35 + 8);
  v74 = 0;
  v76 = 0;
  *(_QWORD *)&v78 = 0;
  *((_QWORD *)&v78 + 1) = v6 | (v9 << 32);
  v36 = v79;
  v80 = v79;
  std::__function::__func<md::LabelRenderer::prepareDeviceBuffer(md::LabelRenderDeviceBuffer &,unsigned int)::$_0,std::allocator<md::LabelRenderer::prepareDeviceBuffer(md::LabelRenderDeviceBuffer &,unsigned int)::$_0>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v71, v79);
  v37 = *((_QWORD *)this + 223);
  v38 = *((_QWORD *)this + 224);
  if (v37 >= v38)
  {
    v40 = *((_QWORD *)this + 222);
    v41 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v37 - v40) >> 4);
    if (v41 + 1 > 0x333333333333333)
      abort();
    v42 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v38 - v40) >> 4);
    v43 = 2 * v42;
    if (2 * v42 <= v41 + 1)
      v43 = v41 + 1;
    if (v42 >= 0x199999999999999)
      v44 = 0x333333333333333;
    else
      v44 = v43;
    if (v44)
    {
      v45 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 225) + 16))(*((_QWORD *)this + 225), 80 * v44, 8);
      v46 = v45 + 80 * v41;
      v44 = v45 + 80 * v44;
      if (v45)
      {
        *(_OWORD *)v46 = v73;
        v47 = v45 + 80 * v41;
        *(_BYTE *)(v47 + 16) = 0;
        v48 = (_BYTE *)(v47 + 16);
        if (v74)
        {
          *(_BYTE *)(v45 + 80 * v41 + 17) = v75;
          *v48 = 1;
        }
        v49 = v45 + 80 * v41;
        *(_BYTE *)(v49 + 20) = 0;
        v50 = (_BYTE *)(v49 + 20);
        if (v76)
        {
          *(_DWORD *)(v45 + 80 * v41 + 24) = v77;
          *v50 = 1;
        }
        v51 = v45 + 80 * v41;
        *(_OWORD *)(v51 + 28) = v78;
        if (v80)
        {
          v52 = (_QWORD *)(v45 + 80 * v41 + 72);
          if (v80 == v79)
          {
            *v52 = v51 + 48;
            (*(void (**)(_QWORD *))(*v80 + 24))(v80);
          }
          else
          {
            *v52 = v80;
            v80 = 0;
          }
        }
        else
        {
          *(_QWORD *)(v45 + 80 * v41 + 72) = 0;
        }
      }
    }
    else
    {
      v46 = 80 * v41;
    }
    v39 = v46 + 80;
    v53 = (_QWORD *)*((_QWORD *)this + 223);
    v54 = (_QWORD *)*((_QWORD *)this + 222);
    if (v53 == v54)
    {
      *((_QWORD *)this + 222) = v46;
      *((_QWORD *)this + 223) = v39;
      v62 = *((_QWORD *)this + 224);
      *((_QWORD *)this + 224) = v44;
    }
    else
    {
      v55 = 0;
      do
      {
        v56 = v46 + v55 * 8;
        v57 = &v53[v55];
        *(_OWORD *)(v56 - 80) = *(_OWORD *)&v53[v55 - 10];
        *(_BYTE *)(v56 - 64) = 0;
        if (LOBYTE(v53[v55 - 8]))
        {
          *(_BYTE *)(v56 - 63) = *((_BYTE *)v57 - 63);
          *(_BYTE *)(v56 - 64) = 1;
        }
        *(_BYTE *)(v56 - 60) = 0;
        if (*((_BYTE *)v57 - 60))
        {
          *(_DWORD *)(v46 + v55 * 8 - 56) = v53[v55 - 7];
          *(_BYTE *)(v56 - 60) = 1;
        }
        v58 = v46 + v55 * 8;
        v59 = &v53[v55];
        *(_OWORD *)(v46 + v55 * 8 - 52) = *(_OWORD *)((char *)&v53[v55 - 6] - 4);
        v60 = (_QWORD *)v53[v55 - 1];
        if (v60)
        {
          if (v59 - 4 == v60)
          {
            *(_QWORD *)(v58 - 8) = v58 - 32;
            (*(void (**)(_QWORD))(*(_QWORD *)*(v59 - 1) + 24))(*(v59 - 1));
          }
          else
          {
            *(_QWORD *)(v58 - 8) = v60;
            *(v59 - 1) = 0;
          }
        }
        else
        {
          *(_QWORD *)(v58 - 8) = 0;
        }
        v55 -= 10;
      }
      while (&v53[v55] != v54);
      v53 = (_QWORD *)*((_QWORD *)this + 222);
      v61 = (_QWORD *)*((_QWORD *)this + 223);
      *((_QWORD *)this + 222) = v46 + v55 * 8;
      *((_QWORD *)this + 223) = v39;
      v62 = *((_QWORD *)this + 224);
      *((_QWORD *)this + 224) = v44;
      if (v61 != v53)
      {
        v63 = v61 - 4;
        while (1)
        {
          v65 = (_QWORD *)v63[3];
          if (v63 == v65)
            break;
          if (v65)
          {
            v66 = 5;
LABEL_76:
            (*(void (**)(void))(*v65 + 8 * v66))();
          }
          if (*((_BYTE *)v63 - 28))
            *((_BYTE *)v63 - 28) = 0;
          if (*((_BYTE *)v63 - 32))
            *((_BYTE *)v63 - 32) = 0;
          v64 = v63 - 6;
          v63 -= 10;
          if (v64 == v53)
            goto LABEL_82;
        }
        v65 = v63;
        v66 = 4;
        goto LABEL_76;
      }
    }
LABEL_82:
    if (v53)
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 225) + 40))(*((_QWORD *)this + 225), v53, v62 - (_QWORD)v53);
    goto LABEL_84;
  }
  if (!v37)
  {
LABEL_36:
    v39 = v37 + 80;
    goto LABEL_84;
  }
  *(_OWORD *)v37 = v73;
  *(_BYTE *)(v37 + 16) = 0;
  if (v74)
  {
    *(_BYTE *)(v37 + 17) = v75;
    *(_BYTE *)(v37 + 16) = 1;
  }
  *(_BYTE *)(v37 + 20) = 0;
  if (v76)
  {
    *(_DWORD *)(v37 + 24) = v77;
    *(_BYTE *)(v37 + 20) = 1;
  }
  *(_OWORD *)(v37 + 28) = v78;
  if (v80)
  {
    if (v80 != v79)
    {
      *(_QWORD *)(v37 + 72) = v80;
      v80 = 0;
      goto LABEL_36;
    }
    *(_QWORD *)(v37 + 72) = v37 + 48;
    (*(void (**)(_QWORD *))(*v80 + 24))(v80);
    v39 = v37 + 80;
  }
  else
  {
    *(_QWORD *)(v37 + 72) = 0;
    v39 = v37 + 80;
  }
LABEL_84:
  *((_QWORD *)this + 223) = v39;
  if (v80 == v79)
  {
    v67 = 4;
  }
  else
  {
    if (!v80)
      goto LABEL_89;
    v67 = 5;
    v36 = v80;
  }
  (*(void (**)(_QWORD *))(*v36 + 8 * v67))(v36);
LABEL_89:
  if (v76)
    v76 = 0;
  if (v74)
    v74 = 0;
  result = v72;
  if (v72 == v71)
  {
    v69 = 4;
    result = v71;
  }
  else
  {
    if (!v72)
      return result;
    v69 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v69))();
}

void sub_19FDC9260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, char a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,_QWORD *a28)
{
  _QWORD *v28;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  if (a28 == v28)
  {
    v30 = 4;
  }
  else
  {
    if (!a28)
    {
      if (a20)
        goto LABEL_15;
      goto LABEL_5;
    }
    v30 = 5;
    v28 = a28;
  }
  (*(void (**)(_QWORD *))(*v28 + 8 * v30))(v28);
  if (a20)
  {
LABEL_15:
    a20 = 0;
    if (!a18)
    {
LABEL_7:
      v31 = a15;
      if (a15 == &a12)
      {
        v32 = 4;
        v31 = &a12;
      }
      else
      {
        if (!a15)
          goto LABEL_12;
        v32 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_12:
      _Unwind_Resume(exception_object);
    }
LABEL_6:
    a18 = 0;
    goto LABEL_7;
  }
LABEL_5:
  if (!a18)
    goto LABEL_7;
  goto LABEL_6;
}

void std::__function::__func<md::LabelRenderer::prepareDeviceBuffer(md::LabelRenderDeviceBuffer &,unsigned int)::$_0,std::allocator<md::LabelRenderer::prepareDeviceBuffer(md::LabelRenderDeviceBuffer &,unsigned int)::$_0>,void ()(ggl::Texture2DLoadItem const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelRenderer::prepareDeviceBuffer(md::LabelRenderDeviceBuffer &,unsigned int)::$_0,std::allocator<md::LabelRenderer::prepareDeviceBuffer(md::LabelRenderDeviceBuffer &,unsigned int)::$_0>,void ()(ggl::Texture2DLoadItem const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CABE0;
  return result;
}

void std::__function::__func<md::LabelRenderer::prepareDeviceBuffer(md::LabelRenderDeviceBuffer &,unsigned int)::$_0,std::allocator<md::LabelRenderer::prepareDeviceBuffer(md::LabelRenderDeviceBuffer &,unsigned int)::$_0>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CABE0;
}

uint64_t std::__function::__func<md::LabelRenderer::prepareDeviceBuffer(md::LabelRenderDeviceBuffer &,unsigned int)::$_0,std::allocator<md::LabelRenderer::prepareDeviceBuffer(md::LabelRenderDeviceBuffer &,unsigned int)::$_0>,void ()(ggl::Texture2DLoadItem const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (*a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(md::LabelRenderDescriptor const*,md::LabelRenderDescriptor const*),md::LabelRenderDescriptor**>(_QWORD *a1, _QWORD *a2, unsigned int (**a3)(uint64_t))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      v9 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
      v10 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), a1[1]);
      if ((v9 & 1) != 0)
      {
        v11 = *a1;
        if (v10)
        {
          *a1 = *(a2 - 1);
          *(a2 - 1) = v11;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v11;
          if ((*a3)(*(a2 - 1)))
          {
            v26 = a1[1];
            a1[1] = *(a2 - 1);
            *(a2 - 1) = v26;
          }
        }
      }
      else if (v10)
      {
        v24 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v24;
        v19 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
LABEL_17:
        if (v19)
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v12 = a1 + 2;
      v13 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), a1[3]))
        return 1;
      v14 = *v13;
      *v13 = *(a2 - 1);
      *(a2 - 1) = v14;
      if (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*v13, *v12))
        return 1;
      v15 = *v12;
      *v12 = *v13;
      *v13 = v15;
      if (!((unsigned int (*)(void))*a3)())
        return 1;
      v17 = a1[1];
      v16 = a1[2];
      v18 = *a1;
      a1[1] = v16;
      a1[2] = v17;
      v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v16, v18);
      goto LABEL_17;
    default:
      v20 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
      v21 = a1 + 2;
      v22 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[2], a1[1]);
      if ((v20 & 1) != 0)
      {
        v23 = *a1;
        if (v22)
        {
          *a1 = a1[2];
          a1[2] = v23;
        }
        else
        {
          v27 = a1[2];
          *a1 = a1[1];
          a1[1] = v23;
          if ((*a3)(v27))
            *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
        }
      }
      else if (v22)
      {
        v25 = a1[1];
        a1[1] = a1[2];
        a1[2] = v25;
        if (((unsigned int (*)(void))*a3)())
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      v28 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v29 = 0;
      v30 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v28, *v21))
    {
      v32 = *v28;
      v33 = v29;
      do
      {
        v34 = (char *)a1 + v33;
        *(_QWORD *)((char *)a1 + v33 + 24) = *(_QWORD *)((char *)a1 + v33 + 16);
        if (v33 == -16)
        {
          v31 = a1;
          goto LABEL_29;
        }
        v33 -= 8;
      }
      while ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v32, *((_QWORD *)v34 + 1)) & 1) != 0);
      v31 = (_QWORD *)((char *)a1 + v33 + 24);
LABEL_29:
      *v31 = v32;
      if (++v30 == 8)
        return v28 + 1 == a2;
    }
    v21 = v28;
    v29 += 8;
    if (++v28 == a2)
      return 1;
  }
}

void md::LabelMapTile::~LabelMapTile(md::LabelMapTile *this)
{
  std::mutex *v2;
  uint64_t sig;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;

  *(_QWORD *)this = off_1E428CEB0;
  v2 = (std::mutex *)*((_QWORD *)this + 17);
  if (v2)
  {
    std::mutex::lock(*((std::mutex **)this + 17));
    sig = v2[1].__m_.__sig;
    if (sig)
      (*(void (**)(uint64_t, md::LabelMapTile *))(*(_QWORD *)sig + 16))(sig, this);
    std::mutex::unlock(v2);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 60);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 56);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::__tree<std::shared_ptr<md::MuninRoadLabel>,std::less<std::shared_ptr<md::MuninRoadLabel>>,geo::StdAllocator<std::shared_ptr<md::MuninRoadLabel>,mdm::Allocator>>::destroy((uint64_t)this + 408, *((_QWORD **)this + 52));
  v13 = *((_QWORD *)this + 47);
  if (v13)
  {
    v14 = *((_QWORD *)this + 48);
    v15 = *((_QWORD *)this + 47);
    if (v14 != v13)
    {
      do
      {
        v16 = *(std::__shared_weak_count **)(v14 - 8);
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v16->__on_zero_shared)(v16, v15);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v14 -= 16;
      }
      while (v14 != v13);
      v15 = *((_QWORD *)this + 47);
    }
    *((_QWORD *)this + 48) = v13;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 50) + 40))(*((_QWORD *)this + 50), v15, *((_QWORD *)this + 49) - v15);
  }
  v19 = *((_QWORD *)this + 43);
  if (v19)
  {
    v20 = *((_QWORD *)this + 44);
    v21 = *((_QWORD *)this + 43);
    if (v20 != v19)
    {
      do
      {
        v22 = *(std::__shared_weak_count **)(v20 - 8);
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v22->__on_zero_shared)(v22, v21);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v20 -= 16;
      }
      while (v20 != v19);
      v21 = *((_QWORD *)this + 43);
    }
    *((_QWORD *)this + 44) = v19;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 46) + 40))(*((_QWORD *)this + 46), v21, *((_QWORD *)this + 45) - v21);
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)this + 42);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  md::LabelTileSet::~LabelTileSet((md::LabelMapTile *)((char *)this + 168));
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
}

void sub_19FDC9954(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::mutex *v3;
  std::mutex *v4;
  std::__shared_weak_count *v6;

  v4 = v3;
  std::mutex::unlock(v4);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 472);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 456);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 440);
  std::__tree<std::shared_ptr<md::MuninRoadLabel>,std::less<std::shared_ptr<md::MuninRoadLabel>>,geo::StdAllocator<std::shared_ptr<md::MuninRoadLabel>,mdm::Allocator>>::destroy(v1 + 408, *(_QWORD **)(v1 + 416));
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100]((uint64_t *)(v1 + 376));
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100]((uint64_t *)(v1 + 344));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 328);
  md::LabelTileSet::~LabelTileSet((md::LabelTileSet *)(v1 + 168));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 152);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  v6 = *(std::__shared_weak_count **)(v1 + 80);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  _Unwind_Resume(a1);
}

void md::LabelMapTile::broadcastLabelDeactivate(md::LabelMapTile *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BYTE *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::mutex *v17;
  uint64_t sig;

  if (!*((_BYTE *)this + 131))
    return;
  *((_BYTE *)this + 131) = 0;
  v2 = *((_QWORD *)this + 43);
  v3 = *((_QWORD *)this + 44);
  if (v2 != v3)
  {
    do
    {
      v4 = *(std::__shared_weak_count **)(v3 - 8);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      v3 -= 16;
    }
    while (v3 != v2);
    *((_QWORD *)this + 44) = v2;
    *((_BYTE *)this + 128) = 1;
  }
  v7 = (__int128 *)*((_QWORD *)this + 47);
  v8 = (__int128 *)*((_QWORD *)this + 48);
  if (v7 == v8)
  {
    v8 = (__int128 *)*((_QWORD *)this + 47);
  }
  else
  {
    while (**(_BYTE **)v7 != 4)
    {
      if (++v7 == v8)
      {
        v9 = (__int128 *)*((_QWORD *)this + 48);
        goto LABEL_29;
      }
    }
    if (v7 != v8)
    {
      v10 = v7 + 1;
      if (v7 + 1 != v8)
      {
        v9 = v7;
        do
        {
          v11 = v10;
          v12 = (_BYTE *)*((_QWORD *)v7 + 2);
          if (*v12 != 4)
          {
            v13 = *((_QWORD *)v7 + 3);
            *v11 = 0;
            v11[1] = 0;
            v14 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
            *(_QWORD *)v9 = v12;
            *((_QWORD *)v9 + 1) = v13;
            if (v14)
            {
              v15 = (unint64_t *)&v14->__shared_owners_;
              do
                v16 = __ldaxr(v15);
              while (__stlxr(v16 - 1, v15));
              if (!v16)
              {
                ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                std::__shared_weak_count::__release_weak(v14);
              }
            }
            ++v9;
          }
          v10 = v11 + 2;
          v7 = (__int128 *)v11;
        }
        while (v11 + 2 != (_QWORD *)v8);
        v8 = (__int128 *)*((_QWORD *)this + 48);
        goto LABEL_29;
      }
    }
  }
  v9 = v7;
LABEL_29:
  std::vector<std::shared_ptr<md::Label>,geo::StdAllocator<std::shared_ptr<md::Label>,mdm::Allocator>>::erase((uint64_t)this + 376, v9, v8);
  v17 = (std::mutex *)*((_QWORD *)this + 17);
  if (v17)
  {
    std::mutex::lock(*((std::mutex **)this + 17));
    sig = v17[1].__m_.__sig;
    if (sig)
      (*(void (**)(uint64_t, md::LabelMapTile *))(*(_QWORD *)sig + 8))(sig, this);
    std::mutex::unlock(v17);
  }
}

void sub_19FDC9B90(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void md::LabelMapTile::updateLabels(md::LabelManager *,md::LabelPool &,int,BOOL)::$_0::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  md::LabelPoint *v6;
  double *v7;
  double v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  md::LabelPool *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  md::Label *v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  md::Label *v44;
  std::__shared_weak_count *v45;

  v4 = *(_QWORD *)a1;
  v5 = *a2;
  LODWORD(v44) = 1;
  v6 = (md::LabelPoint *)(*(uint64_t (**)(uint64_t, md::Label **))(*(_QWORD *)v5 + 112))(v5, &v44);
  v7 = (double *)md::LabelPoint::mercatorPoint(v6);
  if (*v7 >= *(double *)(v4 + 40) && *v7 <= *(double *)(v4 + 56))
  {
    v8 = v7[1];
    if (v8 >= *(double *)(v4 + 48) && v8 <= *(double *)(v4 + 64))
    {
      v9 = *a2;
      if (!*(_QWORD *)(*a2 + 72))
      {
        v10 = (unint64_t *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 288) + 680);
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 + 1;
        }
        while (__stlxr(v12, v10));
        *(_QWORD *)(v9 + 72) = v12;
        v9 = *a2;
      }
      md::TrafficIncidentLabelFeature::updateStyle((id *)v9, **(md::LabelManager ***)(a1 + 8));
      if (*(_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 552))(*a2, 0, 0, 0, 0))
      {
        v13 = *(md::LabelPool **)(a1 + 16);
        v14 = **(_QWORD **)(a1 + 8);
        v15 = (std::__shared_weak_count *)a2[1];
        v42 = *a2;
        v43 = v15;
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
        }
        v41 = 1;
        md::LabelPool::labelForFeature(&v44, v13, v14, &v42, &v41, 1);
        if (v15)
        {
          v18 = (unint64_t *)&v15->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v20 = v44;
        if (v44)
        {
          v21 = *(uint64_t **)(v4 + 416);
          if (v21)
          {
            while (1)
            {
              while (1)
              {
                v23 = (uint64_t **)v21;
                v24 = v21[4];
                if ((unint64_t)v44 >= v24)
                  break;
                v21 = *v23;
                v22 = v23;
                if (!*v23)
                  goto LABEL_26;
              }
              if (v24 >= (unint64_t)v44)
                break;
              v21 = v23[1];
              if (!v21)
              {
                v22 = v23 + 1;
                goto LABEL_26;
              }
            }
          }
          else
          {
            v22 = (uint64_t **)(v4 + 416);
            v23 = (uint64_t **)(v4 + 416);
LABEL_26:
            v25 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 424) + 16))(*(_QWORD *)(v4 + 424), 48, 8);
            v26 = v25;
            v27 = v45;
            v25[4] = (uint64_t)v44;
            v25[5] = (uint64_t)v27;
            if (v27)
            {
              v28 = (unint64_t *)&v27->__shared_owners_;
              do
                v29 = __ldxr(v28);
              while (__stxr(v29 + 1, v28));
            }
            *v25 = 0;
            v25[1] = 0;
            v25[2] = (uint64_t)v23;
            *v22 = v25;
            v30 = **(_QWORD **)(v4 + 408);
            if (v30)
            {
              *(_QWORD *)(v4 + 408) = v30;
              v26 = *v22;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 416), v26);
            ++*(_QWORD *)(v4 + 432);
            md::Label::incTileRefCount(v44);
            v20 = v44;
          }
          v31 = **(_QWORD **)(a1 + 8);
          v32 = *a2;
          v33 = (std::__shared_weak_count *)a2[1];
          v42 = v32;
          v43 = v33;
          if (v33)
          {
            v34 = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
          }
          md::Label::update((uint64_t)v20, v31, v4);
          if (v33)
          {
            v36 = (unint64_t *)&v33->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
        }
        v38 = v45;
        if (v45)
        {
          v39 = (unint64_t *)&v45->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
      }
      else
      {
        ++*(_DWORD *)(v4 + 92);
      }
    }
  }
}

void sub_19FDC9E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19FDC9EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::LabelMapTileCollisionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD1C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelMapTileCollisionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD1C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::LabelMapTileCollisionInfo>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  void (***v2)(_QWORD, uint64_t);
  void (***v3)(_QWORD, uint64_t);
  uint64_t v4;
  void (***v5)(_QWORD, uint64_t);
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = result;
  v2 = *(void (****)(_QWORD, uint64_t))(result + 208);
  if (v2)
  {
    v3 = *(void (****)(_QWORD, uint64_t))(result + 216);
    v4 = *(_QWORD *)(result + 208);
    if (v3 != v2)
    {
      v5 = v3 - 34;
      do
      {
        (**v5)(v5, v4);
        v6 = v5 == v2;
        v5 -= 34;
      }
      while (!v6);
      v4 = *(_QWORD *)(v1 + 208);
    }
    *(_QWORD *)(v1 + 216) = v2;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 232) + 40))(*(_QWORD *)(v1 + 232), v4, *(_QWORD *)(v1 + 224) - v4);
  }
  v7 = *(_QWORD *)(v1 + 160);
  if (v7)
  {
    *(_QWORD *)(v1 + 168) = v7;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 184) + 40))(*(_QWORD *)(v1 + 184), v7, *(_QWORD *)(v1 + 176) - v7);
  }
  v8 = *(_QWORD *)(v1 + 128);
  if (v8)
  {
    *(_QWORD *)(v1 + 136) = v8;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 152) + 40))(*(_QWORD *)(v1 + 152), v8, *(_QWORD *)(v1 + 144) - v8);
  }
  v9 = *(_QWORD *)(v1 + 96);
  if (v9)
  {
    *(_QWORD *)(v1 + 104) = v9;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 120) + 40))(*(_QWORD *)(v1 + 120), v9, *(_QWORD *)(v1 + 112) - v9);
  }
  v10 = *(_QWORD *)(v1 + 64);
  if (v10)
  {
    *(_QWORD *)(v1 + 72) = v10;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 88) + 40))(*(_QWORD *)(v1 + 88), v10, *(_QWORD *)(v1 + 80) - v10);
  }
  return result;
}

void md::LabelMapTile::enumerateLineFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  int v27;

  v3 = 0;
  v27 = 117440770;
  v4 = a1 + 168;
  do
  {
    v5 = *(_QWORD *)(v4 + 16 * *((unsigned __int8 *)&v27 + v3));
    if (v5)
    {
      v6 = *(_QWORD **)(v5 + 40);
      v7 = (_QWORD *)(v5 + 48);
      if (v6 != (_QWORD *)(v5 + 48))
      {
        do
        {
          v8 = (std::__shared_weak_count *)v6[5];
          if (v8)
          {
            v9 = std::__shared_weak_count::lock(v8);
            v26 = v9;
            if (v9)
            {
              v10 = v9;
              v11 = v6[4];
              v25 = v11;
              if (!v11)
                goto LABEL_18;
              v23 = v11;
              v24 = v9;
              p_shared_owners = (unint64_t *)&v9->__shared_owners_;
              do
                v13 = __ldxr(p_shared_owners);
              while (__stxr(v13 + 1, p_shared_owners));
              v14 = *(_QWORD *)(a2 + 24);
              if (!v14)
              {
                std::__throw_bad_function_call[abi:nn180100]();
                __break(1u);
                return;
              }
              (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 48))(v14, &v23);
              v15 = v24;
              if (!v24)
                goto LABEL_17;
              v16 = (unint64_t *)&v24->__shared_owners_;
              do
                v17 = __ldaxr(v16);
              while (__stlxr(v17 - 1, v16));
              if (!v17)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
                v10 = v26;
                if (v26)
                {
LABEL_18:
                  v18 = (unint64_t *)&v10->__shared_owners_;
                  do
                    v19 = __ldaxr(v18);
                  while (__stlxr(v19 - 1, v18));
                  if (!v19)
                  {
                    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                    std::__shared_weak_count::__release_weak(v10);
                  }
                }
              }
              else
              {
LABEL_17:
                v10 = v26;
                if (v26)
                  goto LABEL_18;
              }
            }
          }
          v20 = (_QWORD *)v6[1];
          if (v20)
          {
            do
            {
              v21 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v21 = (_QWORD *)v6[2];
              v22 = *v21 == (_QWORD)v6;
              v6 = v21;
            }
            while (!v22);
          }
          v6 = v21;
        }
        while (v21 != v7);
      }
    }
    ++v3;
  }
  while (v3 != 4);
}

void sub_19FDCA1AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void md::LabelMapTile::enumeratePhysicalLineFeatures(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (a1)
  {
    v2 = *(_QWORD **)(a1 + 104);
    v3 = (_QWORD *)(a1 + 112);
    if (v2 != (_QWORD *)(a1 + 112))
    {
      do
      {
        v5 = (std::__shared_weak_count *)v2[5];
        if (v5)
        {
          v6 = std::__shared_weak_count::lock(v5);
          v23 = v6;
          if (v6)
          {
            v7 = v6;
            v8 = v2[4];
            v22 = v8;
            if (!v8)
              goto LABEL_16;
            v20 = v8;
            v21 = v6;
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v10 = __ldxr(p_shared_owners);
            while (__stxr(v10 + 1, p_shared_owners));
            v11 = *(_QWORD *)(a2 + 24);
            if (!v11)
            {
              std::__throw_bad_function_call[abi:nn180100]();
              __break(1u);
              return;
            }
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v20);
            v12 = v21;
            if (!v21)
              goto LABEL_15;
            v13 = (unint64_t *)&v21->__shared_owners_;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
              v7 = v23;
              if (v23)
              {
LABEL_16:
                v15 = (unint64_t *)&v7->__shared_owners_;
                do
                  v16 = __ldaxr(v15);
                while (__stlxr(v16 - 1, v15));
                if (!v16)
                {
                  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
                  std::__shared_weak_count::__release_weak(v7);
                }
              }
            }
            else
            {
LABEL_15:
              v7 = v23;
              if (v23)
                goto LABEL_16;
            }
          }
        }
        v17 = (_QWORD *)v2[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (_QWORD *)v2[2];
            v19 = *v18 == (_QWORD)v2;
            v2 = v18;
          }
          while (!v19);
        }
        v2 = v18;
      }
      while (v18 != v3);
    }
  }
}

void sub_19FDCA324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::LabelMapTileCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC1C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelMapTileCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC1C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0,std::allocator<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0>,void ()(md::LabelManager *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42CA7F0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0,std::allocator<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0>,void ()(md::LabelManager *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42CA7F0;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0,std::allocator<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E42CA7F0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0,std::allocator<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E42CA7F0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0,std::allocator<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0>,void ()(md::LabelManager *)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0,std::allocator<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0>,void ()(md::LabelManager *)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0,std::allocator<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0>,void ()(md::LabelManager *)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 != *(_QWORD *)(v2 + 152))
  {
    v3 = a1[3];
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    v6 = *(std::__shared_weak_count **)(v2 + 160);
    *(_QWORD *)(v2 + 152) = v1;
    *(_QWORD *)(v2 + 160) = v3;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    *(_BYTE *)(v2 + 123) = 1;
  }
}

_QWORD *std::__function::__func<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,std::allocator<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0>,void ()(md::LabelManager *)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E42CA760;
  md::LabelTileSet::~LabelTileSet((md::LabelTileSet *)(a1 + 2));
  return a1;
}

void std::__function::__func<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,std::allocator<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0>,void ()(md::LabelManager *)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E42CA760;
  md::LabelTileSet::~LabelTileSet((md::LabelTileSet *)(a1 + 2));
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,std::allocator<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xB0uLL);
  *v2 = &off_1E42CA760;
  std::__compressed_pair_elem<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,std::allocator<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CA760;
  return std::__compressed_pair_elem<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,std::allocator<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0>,void ()(md::LabelManager *)>::destroy(uint64_t a1)
{
  md::LabelTileSet::~LabelTileSet((md::LabelTileSet *)(a1 + 16));
}

void std::__function::__func<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,std::allocator<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0>,void ()(md::LabelManager *)>::destroy_deallocate(uint64_t a1)
{
  md::LabelTileSet::~LabelTileSet((md::LabelTileSet *)(a1 + 16));
  operator delete((void *)a1);
}

void std::__function::__func<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,std::allocator<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0>,void ()(md::LabelManager *)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _BYTE *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v1 = 0;
  v2 = *(_BYTE **)(a1 + 8);
  v3 = v2 + 168;
  v4 = a1 + 16;
  do
  {
    v5 = &v3[16 * v1];
    v6 = *(_QWORD *)(v4 + 16 * v1);
    if (*v5 != v6)
    {
      v7 = *(_QWORD *)(v4 + 16 * v1 + 8);
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      *v5 = v6;
      v10 = &v3[16 * v1];
      v11 = (std::__shared_weak_count *)*((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = v7;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v2[122] = 1;
      if (v1 == 7)
      {
        v2[127] = 1;
      }
      else if (v1 == 3)
      {
        v2[126] = 1;
      }
    }
    ++v1;
  }
  while (v1 != 10);
}

uint64_t std::__compressed_pair_elem<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0 const&,0ul>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;

  *(_OWORD *)result = *(_OWORD *)a2;
  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 16) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 32) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 80) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 96) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(result + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(result + 112) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(result + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(result + 128) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(result + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(result + 144) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(result + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(result + 160) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  return result;
}

_QWORD *std::__function::__func<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0,std::allocator<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0>,void ()(md::LabelManager *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42CA7A8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0,std::allocator<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0>,void ()(md::LabelManager *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42CA7A8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0,std::allocator<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E42CA7A8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0,std::allocator<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E42CA7A8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0,std::allocator<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0>,void ()(md::LabelManager *)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0,std::allocator<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0>,void ()(md::LabelManager *)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0,std::allocator<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0>,void ()(md::LabelManager *)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = a1[1];
  v1 = a1[2];
  if (*(_QWORD *)(v2 + 328) != v1)
  {
    v3 = a1[3];
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    v6 = *(std::__shared_weak_count **)(v2 + 336);
    *(_QWORD *)(v2 + 328) = v1;
    *(_QWORD *)(v2 + 336) = v3;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    *(_BYTE *)(v2 + 124) = 1;
  }
}

uint64_t md::LabelMapTile::setCustomFeatures(std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(_QWORD *)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), v4, *(_QWORD *)(a1 + 24) - v4);
  }
  return a1;
}

uint64_t std::__function::__func<md::LabelMapTile::setCustomFeatures(std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&)::$_0,std::allocator<std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&>,void ()(md::LabelManager *)>::~__func(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)a1 = &off_1E42CA838;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), v4, *(_QWORD *)(a1 + 32) - v4);
  }
  return a1;
}

void std::__function::__func<md::LabelMapTile::setCustomFeatures(std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&)::$_0,std::allocator<std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&>,void ()(md::LabelManager *)>::~__func(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)a1 = &off_1E42CA838;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), v4, *(_QWORD *)(a1 + 32) - v4);
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelMapTile::setCustomFeatures(std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&)::$_0,std::allocator<std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&>,void ()(md::LabelManager *)>::__clone(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = operator new(0x30uLL);
  v3 = a1[1];
  v4 = (char *)a1[2];
  *v2 = &off_1E42CA838;
  v2[1] = v3;
  v2[2] = 0;
  v2[3] = 0;
  v5 = a1[5];
  v2[4] = 0;
  v2[5] = v5;
  v6 = (char *)a1[3];
  v7 = v6 - v4;
  if (v6 != v4)
  {
    if (v7 < 0)
      abort();
    v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v6 - v4, 8);
    v2[2] = v8;
    v2[3] = v8;
    v2[4] = &v8[2 * (v7 >> 4)];
    do
    {
      if (v8)
      {
        v9 = *((_QWORD *)v4 + 1);
        *v8 = *(_QWORD *)v4;
        v8[1] = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
      }
      v4 += 16;
      v8 += 2;
    }
    while (v4 != v6);
    v2[3] = v8;
  }
  return v2;
}

void sub_19FDCAEE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<md::LabelMapTile::setCustomFeatures(std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&)::$_0,std::allocator<std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&>,void ()(md::LabelManager *)>::__clone(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *result;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = a1[1];
  *a2 = &off_1E42CA838;
  a2[1] = v4;
  a2[2] = 0;
  a2[3] = 0;
  result = (_QWORD *)a1[5];
  a2[4] = 0;
  a2[5] = result;
  v6 = (char *)a1[2];
  v7 = (char *)a1[3];
  v8 = v7 - v6;
  if (v7 != v6)
  {
    if (v8 < 0)
      abort();
    v9 = v8 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
    a2[2] = result;
    a2[3] = result;
    a2[4] = &result[2 * v9];
    do
    {
      if (result)
      {
        v10 = *((_QWORD *)v6 + 1);
        *result = *(_QWORD *)v6;
        result[1] = v10;
        if (v10)
        {
          v11 = (unint64_t *)(v10 + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
      }
      v6 += 16;
      result += 2;
    }
    while (v6 != v7);
    a2[3] = result;
  }
  return result;
}

uint64_t std::__function::__func<md::LabelMapTile::setCustomFeatures(std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&)::$_0,std::allocator<std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&>,void ()(md::LabelManager *)>::destroy(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 24);
    v4 = *(_QWORD *)(result + 16);
    if (v3 != v1)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v1);
      v4 = *(_QWORD *)(v2 + 16);
    }
    *(_QWORD *)(v2 + 24) = v1;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 40) + 40))(*(_QWORD *)(v2 + 40), v4, *(_QWORD *)(v2 + 32) - v4);
  }
  return result;
}

void std::__function::__func<md::LabelMapTile::setCustomFeatures(std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&)::$_0,std::allocator<std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&>,void ()(md::LabelManager *)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = __p[2];
  if (v2)
  {
    v3 = __p[3];
    v4 = __p[2];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = __p[2];
    }
    __p[3] = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)__p[5] + 40))(__p[5], v4, __p[4] - v4);
  }
  operator delete(__p);
}

void std::__function::__func<md::LabelMapTile::setCustomFeatures(std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&)::$_0,std::allocator<std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&>,void ()(md::LabelManager *)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  char *v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;

  v1 = a1[1];
  if ((_QWORD *)(v1 + 344) != a1 + 2)
  {
    v3 = (char *)a1[2];
    v2 = (char *)a1[3];
    v4 = (v2 - v3) >> 4;
    v5 = *(_QWORD *)(v1 + 360);
    v6 = *(char **)(v1 + 344);
    if (v4 <= (v5 - (uint64_t)v6) >> 4)
    {
      v12 = *(char **)(v1 + 352);
      v13 = (v12 - v6) >> 4;
      if (v13 >= v4)
      {
        if (v3 != v2)
        {
          do
          {
            v23 = *(_QWORD *)v3;
            v22 = *((_QWORD *)v3 + 1);
            if (v22)
            {
              v24 = (unint64_t *)(v22 + 8);
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 1, v24));
            }
            v26 = (std::__shared_weak_count *)*((_QWORD *)v6 + 1);
            *(_QWORD *)v6 = v23;
            *((_QWORD *)v6 + 1) = v22;
            if (v26)
            {
              p_shared_owners = (unint64_t *)&v26->__shared_owners_;
              do
                v28 = __ldaxr(p_shared_owners);
              while (__stlxr(v28 - 1, p_shared_owners));
              if (!v28)
              {
                ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                std::__shared_weak_count::__release_weak(v26);
              }
            }
            v3 += 16;
            v6 += 16;
          }
          while (v3 != v2);
          v12 = *(char **)(v1 + 352);
        }
        while (v12 != v6)
        {
          v41 = (std::__shared_weak_count *)*((_QWORD *)v12 - 1);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v12 -= 16;
        }
        *(_QWORD *)(v1 + 352) = v6;
      }
      else
      {
        v14 = &v3[16 * v13];
        if (v12 != v6)
        {
          do
          {
            v16 = *(_QWORD *)v3;
            v15 = *((_QWORD *)v3 + 1);
            if (v15)
            {
              v17 = (unint64_t *)(v15 + 8);
              do
                v18 = __ldxr(v17);
              while (__stxr(v18 + 1, v17));
            }
            v19 = (std::__shared_weak_count *)*((_QWORD *)v6 + 1);
            *(_QWORD *)v6 = v16;
            *((_QWORD *)v6 + 1) = v15;
            if (v19)
            {
              v20 = (unint64_t *)&v19->__shared_owners_;
              do
                v21 = __ldaxr(v20);
              while (__stlxr(v21 - 1, v20));
              if (!v21)
              {
                ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                std::__shared_weak_count::__release_weak(v19);
              }
            }
            v3 += 16;
            v6 += 16;
          }
          while (v3 != v14);
          v6 = *(char **)(v1 + 352);
        }
        v37 = v6;
        if (v14 != v2)
        {
          v37 = v6;
          do
          {
            if (v37)
            {
              v38 = *((_QWORD *)v14 + 1);
              *(_QWORD *)v37 = *(_QWORD *)v14;
              *((_QWORD *)v37 + 1) = v38;
              if (v38)
              {
                v39 = (unint64_t *)(v38 + 8);
                do
                  v40 = __ldxr(v39);
                while (__stxr(v40 + 1, v39));
              }
            }
            v14 += 16;
            v37 += 16;
          }
          while (v14 != v2);
        }
        *(_QWORD *)(v1 + 352) = v37;
      }
    }
    else
    {
      if (v6)
      {
        v7 = *(char **)(v1 + 352);
        if (v7 == v6)
        {
          v8 = *(_QWORD *)(v1 + 344);
        }
        else
        {
          do
          {
            v9 = (std::__shared_weak_count *)*((_QWORD *)v7 - 1);
            if (v9)
            {
              v10 = (unint64_t *)&v9->__shared_owners_;
              do
                v11 = __ldaxr(v10);
              while (__stlxr(v11 - 1, v10));
              if (!v11)
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
            }
            v7 -= 16;
          }
          while (v7 != v6);
          v8 = *(_QWORD *)(v1 + 344);
        }
        *(_QWORD *)(v1 + 352) = v6;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 368) + 40))(*(_QWORD *)(v1 + 368), v8);
        v5 = 0;
        *(_QWORD *)(v1 + 344) = 0;
        *(_QWORD *)(v1 + 352) = 0;
        *(_QWORD *)(v1 + 360) = 0;
      }
      if (v2 - v3 < 0)
        goto LABEL_72;
      v29 = v5 >> 3;
      if (v5 >> 3 <= v4)
        v29 = (v2 - v3) >> 4;
      v30 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
      v31 = 0xFFFFFFFFFFFFFFFLL;
      if (!v30)
        v31 = v29;
      if (v31 >> 60)
LABEL_72:
        abort();
      v32 = 2 * v31;
      v33 = (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v1 + 368) + 16))(*(_QWORD *)(v1 + 368), 16 * v31, 8);
      *(_QWORD *)(v1 + 344) = v33;
      *(_QWORD *)(v1 + 352) = v33;
      *(_QWORD *)(v1 + 360) = &v33[v32];
      while (v3 != v2)
      {
        if (v33)
        {
          v34 = *((_QWORD *)v3 + 1);
          *v33 = *(_QWORD *)v3;
          v33[1] = v34;
          if (v34)
          {
            v35 = (unint64_t *)(v34 + 8);
            do
              v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
          }
        }
        v3 += 16;
        v33 += 2;
      }
      *(_QWORD *)(v1 + 352) = v33;
    }
  }
  *(_BYTE *)(v1 + 128) = 1;
}

void ggl::TexturedSolidRibbon::PipelineSetup::~PipelineSetup(ggl::TexturedSolidRibbon::PipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::TexturedSolidRibbon::PipelineSetup::constantDataIsEnabled(ggl::TexturedSolidRibbon::PipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

BOOL ggl::TexturedSolidRibbon::PipelineSetup::textureIsEnabled(ggl::TexturedSolidRibbon::PipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void md::GridLogic::~GridLogic(md::GridLogic *this)
{
  md::GridLogic::~GridLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  md::GridLogic *v2;
  uint64_t v3;
  md::GridLogic *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42AF798;
  if (*((_BYTE *)this + 216))
  {
    v2 = (md::GridLogic *)*((_QWORD *)this + 26);
    if (v2 == (md::GridLogic *)((char *)this + 184))
    {
      v3 = 4;
      v2 = (md::GridLogic *)((char *)this + 184);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
  }
LABEL_7:
  if (*((_BYTE *)this + 176))
  {
    v4 = (md::GridLogic *)*((_QWORD *)this + 21);
    if (v4 == (md::GridLogic *)((char *)this + 144))
    {
      v5 = 4;
      v4 = (md::GridLogic *)((char *)this + 144);
      goto LABEL_12;
    }
    if (v4)
    {
      v5 = 5;
LABEL_12:
      (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

double md::Logic<md::GridLogic,md::GridContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>>::_allocateContext@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _OWORD *v5;
  __int128 v6;
  double result;
  __int128 v8;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;

  v4 = (_QWORD *)operator new();
  (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(v9, a1);
  v5 = (_OWORD *)operator new();
  v6 = v9[1];
  *v5 = v9[0];
  v5[1] = v6;
  result = *(double *)&v10;
  v8 = v11;
  v5[2] = v10;
  v5[3] = v8;
  v4[2] = "md::GridContext]";
  v4[3] = 15;
  v4[4] = v5;
  *v4 = &off_1E42B0A78;
  v4[1] = 0x336A901A15BB7353;
  *a2 = v4;
  return result;
}

void sub_19FDCB65C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::GridLogic,md::GridContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x336A901A15BB7353)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::GridLogic,md::GridContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x336A901A15BB7353)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::GridLogic,md::GridContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x336A901A15BB7353)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::GridLogic,md::GridContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x336A901A15BB7353)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::GridLogic,md::GridContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  if (*(_QWORD *)(a3 + 8) == 0x336A901A15BB7353 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

__n128 md::Logic<md::GridLogic,md::GridContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>>::allocateContext@<Q0>(uint64_t a1@<X8>)
{
  unsigned __int8 v1;
  __guard *v2;
  unsigned __int8 v3;
  __n128 *v4;
  __n128 result;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(a1 + 32) = 1;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  if ((v1 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v6)
    {
      md::GridLogic::_defaultDrivingBackgroundColor(void)::_defaultDrivingBackgroundLinearColor = xmmword_19FFB5E70;
      a1 = v8;
    }
  }
  *(_OWORD *)a1 = *((_OWORD *)v2 + 156);
  if ((v3 & 1) == 0)
  {
    v9 = a1;
    a1 = v9;
    if (v7)
    {
      md::GridLogic::_defaultDrivingStrokeColor(void)::_defaultDrivingStrokeLinearColor = xmmword_19FFB5E80;
      a1 = v9;
    }
  }
  result = v4[159];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t md::Logic<md::GridLogic,md::GridContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

_QWORD *md::GridLogic::runBeforeLayout(uint64_t a1, uint64_t a2, _QWORD *a3, float32x4_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  __int8 v21;
  uint64_t v22;
  __int32 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  float32x4_t v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned __int8 v35;
  uint64_t v36;
  _QWORD *result;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  _QWORD v48[2];
  unsigned __int8 v49;
  _QWORD v50[3];
  _QWORD *v51;
  _QWORD v52[3];
  _QWORD *v53;
  _QWORD v54[3];
  _QWORD *v55;
  _QWORD v56[3];
  _QWORD *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v54[0] = &off_1E427CA50;
  v54[1] = a2;
  v55 = v54;
  v52[0] = &off_1E427CA98;
  v52[1] = a2;
  v53 = v52;
  v57 = v56;
  v56[0] = &off_1E427CA98;
  v56[1] = a2;
  std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0>,void ()(void)>::operator()((uint64_t)v54);
  v7 = v53;
  if (v53 == v52)
  {
    v8 = 4;
    v7 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = v55;
  if (v55 == v54)
  {
    v10 = 4;
    v9 = v54;
  }
  else
  {
    if (!v55)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  v12 = *a3;
  v11 = a3[1];
  if (*(_BYTE *)(*a3 + 82))
  {
    v50[0] = &off_1E427CAE0;
    v50[1] = a1;
    v13 = v50;
    v50[2] = v12;
    v51 = v50;
    v14 = *(_BYTE **)(v12 + 48);
    v15 = *(_BYTE **)(v12 + 56);
    if (v14 == v15)
    {
      v16 = 4;
    }
    else
    {
      do
      {
        LOBYTE(v46) = *v14;
        if (!v51)
          goto LABEL_82;
        (*(void (**)(_QWORD *, uint64_t *))(*v51 + 48))(v51, &v46);
        ++v14;
      }
      while (v14 != v15);
      v13 = v51;
      if (v51 == v50)
      {
        v16 = 4;
        v13 = v50;
      }
      else
      {
        if (!v51)
          goto LABEL_26;
        v16 = 5;
      }
    }
    (*(void (**)(void))(*v13 + 8 * v16))();
  }
  else
  {
    v17 = *(std::__shared_weak_count **)(a1 + 128);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
LABEL_26:
  a4[2].i8[0] = *(_BYTE *)(a1 + 136);
  if (*(_BYTE *)(a1 + 176))
  {
    v20 = *(_QWORD *)(a1 + 168);
    if (!v20)
      goto LABEL_82;
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
  }
  else
  {
    v21 = 0;
  }
  a4[3].i8[8] = v21;
  if (*(_BYTE *)(a1 + 216))
  {
    v22 = *(_QWORD *)(a1 + 208);
    if (v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
      goto LABEL_34;
    }
LABEL_82:
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_85;
  }
  v23 = 0;
LABEL_34:
  a4[3].i32[3] = v23;
  v24 = *(_QWORD *)(a1 + 120);
  v25 = *(std::__shared_weak_count **)(a1 + 128);
  v45.i64[0] = v24;
  v45.i64[1] = (uint64_t)v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    v47 = v25;
    do
      v28 = __ldxr(v26);
    while (__stxr(v28 + 1, v26));
  }
  else
  {
    v47 = 0;
  }
  v48[0] = 0;
  v48[1] = 0;
  v46 = v24;
  v49 = 0;
  if (v24)
    LODWORD(v24) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v24 + 48))(v24, v48);
  v49 = v24;
  if (v25)
  {
    v29 = (unint64_t *)&v25->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    LODWORD(v24) = v49;
  }
  if ((_DWORD)v24)
  {
    gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)&v45, 0x5Cu, 2, *(_QWORD *)(v46 + 24));
    v44 = (float32x4_t)vdupq_n_s32(0x37800080u);
    *a4 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v45.f32)), v44);
    gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)&v45, 0xEFu, 2, *(_QWORD *)(v46 + 24));
    v31 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v45.f32)), v44);
    goto LABEL_55;
  }
  v32 = *(_DWORD *)(v12 + 88);
  v33 = *(unsigned __int8 *)(v12 + 72);
  v34 = *(unsigned __int8 *)(v12 + 92);
  md::GridLogic::defaultBackgroundColor((__int128 *)&v45, v32, v33, v34);
  v31 = v45;
  *a4 = v45;
  if (v32 <= 0xB)
  {
    if (((1 << v32) & 0xC9E) != 0)
    {
      if ((v35 & 1) == 0
      {
        geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::GridLogic::_defaultSatelliteStrokeColor(void)::_defaultSatelliteStrokeLinearColor, (uint64_t)&kDefaultSatelliteStrokeColor);
      }
      v31 = (float32x4_t)md::GridLogic::_defaultSatelliteStrokeColor(void)::_defaultSatelliteStrokeLinearColor;
      goto LABEL_55;
    }
    if (((1 << v32) & 0x261) == 0)
    {
      if ((v41 & 1) != 0
      {
        goto LABEL_76;
      }
      geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::GridLogic::_defaultMutedStrokeColor(void)::_defaultMutedStrokeLinearColor, (uint64_t)&kDefaultMutedStrokeColor);
LABEL_92:
LABEL_76:
      v31 = (float32x4_t)md::GridLogic::_defaultMutedStrokeColor(void)::_defaultMutedStrokeLinearColor;
      goto LABEL_55;
    }
    if (v33 == 1)
    {
      if ((v40 & 1) == 0
      {
        md::GridLogic::_defaultStandardDarkStrokeColor(void)::_defaultStandardDarkStrokeLinearColor = xmmword_19FFB5E90;
      }
      v31 = (float32x4_t)md::GridLogic::_defaultStandardDarkStrokeColor(void)::_defaultStandardDarkStrokeLinearColor;
    }
    else
    {
      if (v33)
        goto LABEL_55;
      if (v34 == 2)
      {
        if ((v43 & 1) == 0
        {
          md::GridLogic::_defaultExploreStrokeColor(void)::_defaultExploreStrokeLinearColor = xmmword_19FFB5E80;
        }
        v31 = (float32x4_t)md::GridLogic::_defaultExploreStrokeColor(void)::_defaultExploreStrokeLinearColor;
      }
      else
      {
        if (v34 != 1)
        {
          if (v34)
            goto LABEL_55;
          if ((v39 & 1) != 0
          {
            goto LABEL_76;
          }
          md::GridLogic::_defaultMutedStrokeColor(void)::_defaultMutedStrokeLinearColor = xmmword_19FFB5E80;
          goto LABEL_92;
        }
        if ((v42 & 1) == 0
        {
          md::GridLogic::_defaultDrivingStrokeColor(void)::_defaultDrivingStrokeLinearColor = xmmword_19FFB5E80;
        }
        v31 = (float32x4_t)md::GridLogic::_defaultDrivingStrokeColor(void)::_defaultDrivingStrokeLinearColor;
      }
    }
  }
LABEL_55:
  a4[1] = v31;
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v46);
  if (v11)
  {
    v36 = *(_QWORD *)(v11 + 136);
    a4[3].i8[0] = *(_BYTE *)(v11 + 144);
    a4[2].i64[1] = v36;
  }
  if (!v57)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_85:
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v57 + 48))(v57);
  result = v57;
  if (v57 == v56)
  {
    v38 = 4;
    result = v56;
  }
  else
  {
    if (!v57)
      return result;
    v38 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v38))();
}

void sub_19FDCBFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v5 - 104));
  _Unwind_Resume(a1);
}

void md::Logic<md::GridLogic,md::GridContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "GridLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_2,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_2>,void ()(md::StyleManagerEvent)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_2,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_2>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427CAE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_2,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_2>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427CAE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_2,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_2>,void ()(md::StyleManagerEvent)>::operator()(gss::Allocator *a1, unsigned __int8 *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  gss::Allocator *v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  _BYTE v23[15];
  char v24;

  if ((*a2 | 4) == 4)
  {
    v2 = (uint64_t *)*((_QWORD *)a1 + 2);
    if (*v2)
    {
      v3 = *((_QWORD *)a1 + 1);
      v4 = gss::Allocator::instance(a1);
      v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 8, 4);
      v6 = v5;
      if (v5)
        *v5 = 0x800000005;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = v4;
      v7 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 8, 4);
      v19 = v7;
      v21 = (char *)(v7 + 1);
      if (v7)
        *v7 = *v6;
      v20 = v7 + 1;
      gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v19);
      if (v6)
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v4 + 40))(v4, v6, 8);
      v8 = *v2;
      memset(v23, 0, sizeof(v23));
      v24 = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v18, v8, (gss::FeatureAttributeSet *)&v19, (gss::QueryOverrides *)v23);
      if (!v23[14] && *(_QWORD *)v23)
      {
        v10 = gss::Allocator::instance(v9);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)v23, *(unsigned __int16 *)&v23[12]);
      }
      v11 = v18;
      v18 = 0uLL;
      v12 = *(std::__shared_weak_count **)(v3 + 128);
      *(_OWORD *)(v3 + 120) = v11;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
      if (*((_QWORD *)&v18 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (v19)
      {
        v20 = v19;
        (*(void (**)(uint64_t, _QWORD *, int64_t))(*(_QWORD *)v22 + 40))(v22, v19, v21 - (char *)v19);
      }
    }
  }
}

void sub_19FDCC524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, unsigned __int16 a17, char a18)
{
  uint64_t v19;

  if (!a18 && a15)
  {
    v19 = gss::Allocator::instance((gss::Allocator *)exception_object);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v19 + 40))(v19, a15, a17);
  }
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 40))(a14);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_1,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_1,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CA98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_1,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CA98;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_1,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "GridLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CA50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CA50;
  a2[1] = v2;
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  unint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0xE42D19AFCA302E68;
    if (a2 <= 0xE42D19AFCA302E68)
      v3 = 0xE42D19AFCA302E68 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0xE42D19AFCA302E68;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0xE42D19AFCA302E68)
      {
        if (v6[2] == 0xE42D19AFCA302E68)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0xE42D19AFCA302E68)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0xE42D19AFCA302E68)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0xE42D19AFCA302E68)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0x64780CBD71DF7CF5;
    if (a2 <= 0x64780CBD71DF7CF5)
      v11 = 0x64780CBD71DF7CF5 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0x64780CBD71DF7CF5;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x64780CBD71DF7CF5)
      {
        if (v13[2] == 0x64780CBD71DF7CF5)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0x64780CBD71DF7CF5)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0x64780CBD71DF7CF5)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0x64780CBD71DF7CF5)
    return v10;
  return v10;
}

_QWORD *gdc::ManagedObjectHolder<md::GridContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B0A78;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C4017623181);
  return a1;
}

void gdc::ManagedObjectHolder<md::GridContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B0A78;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x1000C4017623181);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::GridContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void altitude::TrafficTileDataCache::~TrafficTileDataCache(altitude::TrafficTileDataCache *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C5A80;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficTileData>::~GenericCacheNode(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C5A80;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficTileData>::~GenericCacheNode(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *altitude::TrafficTileDataCache::createRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  pthread_mutex_t *v10;
  std::string *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *result;
  void *v16;
  __int128 v17;
  void *__p;
  char v19;
  uint64_t v20[4];
  __int128 v21;
  uint64_t v22;
  pthread_mutexattr_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 32);
  v17 = *(_OWORD *)(a1 + 152);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(_QWORD *)(a1 + 176);
  HIBYTE(v20[2]) = 16;
  strcpy((char *)v20, "/road/cache/job/");
  v19 = 0;
  LOBYTE(__p) = 0;
  altitude::Tile::createTileName(&v21, (unsigned int *)(a2 + 16), v20, (uint64_t *)&__p);
  karo::Job::Job(v6, v7);
  *(_BYTE *)(v6 + 176) = 0;
  *(_QWORD *)(v6 + 180) = 0xFFFFFFFF00000000;
  *(_QWORD *)v6 = off_1E42C5768;
  *(_QWORD *)(v6 + 192) = 0;
  pthread_mutexattr_init(&v23);
  pthread_mutexattr_settype(&v23, 2);
  v10 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v10, &v23);
  pthread_mutexattr_destroy(&v23);
  *(_QWORD *)(v6 + 192) = v10;
  v11 = (std::string *)(v6 + 200);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v21;
    *(_QWORD *)(v6 + 216) = v22;
    *(_BYTE *)(v6 + 224) = 0;
    if ((v19 & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v16 = (void *)v21;
  std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v21, *((std::string::size_type *)&v21 + 1));
  *(_BYTE *)(v6 + 224) = 0;
  operator delete(v16);
  if (v19 < 0)
LABEL_3:
    operator delete(__p);
LABEL_4:
  if (SHIBYTE(v20[2]) < 0)
    operator delete((void *)v20[0]);
  *(_QWORD *)v6 = &off_1E42C62A8;
  *(_BYTE *)(v6 + 225) = 0;
  *(_OWORD *)(v6 + 228) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 244) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(v6 + 260) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(v6 + 264) = v9;
  *(_OWORD *)(v6 + 272) = v17;
  *(_QWORD *)(v6 + 288) = v8;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  v12 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(v6 + 360) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(v6 + 368) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *a3 = v6;
  result = (_QWORD *)operator new();
  *result = &off_1E42E8C58;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = (uint64_t)result;
  return result;
}

void altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficTileData>::requestCached(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  __int128 v10;
  int v11;
  int8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  std::__shared_weak_count **v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t shared_owners;
  std::__shared_weak_count *shared_weak_owners;
  uint64_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  int *i;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  _QWORD *j;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  void *v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void *v80;
  int *v81;
  uint64_t v82;
  void (**v83)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v84;
  std::__shared_weak_count *v85;
  void *__p[2];
  __int128 v87;
  int v88;
  _OWORD v89[2];
  int v90;
  __int128 v91;
  __int128 v92;
  int v93;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) & 1) == 0)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[3] = 0;
    a5[4] = 0;
    a5[2] = (uint64_t)&off_1E42C2D08;
    return;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(__p, a1, a2);
  v10 = *(_OWORD *)(a2 + 16);
  v89[0] = *(_OWORD *)a2;
  v89[1] = v10;
  v11 = *(_DWORD *)(a2 + 32);
  v91 = *(_OWORD *)__p;
  v92 = v87;
  v90 = v11;
  v93 = v88;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 136));
  v12 = *(int8x8_t *)(a1 + 104);
  if (!*(_QWORD *)&v12)
    goto LABEL_45;
  v13 = ((unint64_t)v92 << 58) | ((unint64_t)(DWORD1(v92) & 0x1FFFFFFF) << 29) | DWORD2(v92) & 0x1FFFFFFF;
  v14 = (uint8x8_t)vcnt_s8(v12);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = ((unint64_t)v92 << 58) | ((unint64_t)(DWORD1(v92) & 0x1FFFFFFF) << 29) | DWORD2(v92) & 0x1FFFFFFF;
    if (v13 >= *(_QWORD *)&v12)
      v15 = v13 % *(_QWORD *)&v12;
  }
  else
  {
    v15 = v13 & (*(_QWORD *)&v12 - 1);
  }
  v16 = *(std::__shared_weak_count ***)(*(_QWORD *)(a1 + 96) + 8 * v15);
  if (!v16)
    goto LABEL_45;
  v17 = *v16;
  if (!*v16)
  {
LABEL_46:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
    goto LABEL_47;
  }
  if (v14.u32[0] < 2uLL)
  {
    v18 = *(_QWORD *)&v12 - 1;
    while (1)
    {
      shared_owners = v17->__shared_owners_;
      if (shared_owners == v13)
      {
        if (LODWORD(v17[1].__shared_owners_) == (_DWORD)v92
          && *(uint64_t *)((char *)&v17[1].__shared_owners_ + 4) == *(_QWORD *)((char *)&v92 + 4)
          && HIDWORD(v92) == HIDWORD(v17[1].__shared_weak_owners_)
          && LODWORD(v17->__shared_weak_owners_) == (_DWORD)v91
          && *(uint64_t *)((char *)&v17->__shared_weak_owners_ + 4) == *(_QWORD *)((char *)&v91 + 4))
        {
          goto LABEL_31;
        }
      }
      else if ((shared_owners & v18) != v15)
      {
        goto LABEL_45;
      }
      v17 = (std::__shared_weak_count *)v17->__vftable;
      if (!v17)
        goto LABEL_46;
    }
  }
  while (1)
  {
    v19 = v17->__shared_owners_;
    if (v19 == v13)
      break;
    if (v19 >= *(_QWORD *)&v12)
      v19 %= *(_QWORD *)&v12;
    if (v19 != v15)
      goto LABEL_45;
LABEL_13:
    v17 = (std::__shared_weak_count *)v17->__vftable;
    if (!v17)
      goto LABEL_46;
  }
  if (LODWORD(v17[1].__shared_owners_) != (_DWORD)v92
    || *(uint64_t *)((char *)&v17[1].__shared_owners_ + 4) != *(_QWORD *)((char *)&v92 + 4)
    || HIDWORD(v92) != HIDWORD(v17[1].__shared_weak_owners_)
    || LODWORD(v17->__shared_weak_owners_) != (_DWORD)v91
    || *(uint64_t *)((char *)&v17->__shared_weak_owners_ + 4) != *(_QWORD *)((char *)&v91 + 4))
  {
    goto LABEL_13;
  }
LABEL_31:
  if (((*(uint64_t (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v91, &v17->__shared_weak_owners_) & 1) == 0)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)(a1 + 96), v17);
    v27 = __p[0];
    if (__p[0])
    {
      if ((_BYTE)v87)
      {
        v28 = (std::__shared_weak_count *)*((_QWORD *)__p[0] + 8);
        if (v28)
          std::__shared_weak_count::__release_weak(v28);
      }
      operator delete(v27);
    }
    goto LABEL_45;
  }
  shared_weak_owners = (std::__shared_weak_count *)v17[2].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
LABEL_45:
    v17 = 0;
    goto LABEL_46;
  }
  v22 = v17[2].__shared_owners_;
  p_shared_weak_owners = (unint64_t *)&shared_weak_owners->__shared_weak_owners_;
  do
    v24 = __ldxr(p_shared_weak_owners);
  while (__stxr(v24 + 1, p_shared_weak_owners));
  v17 = std::__shared_weak_count::lock(shared_weak_owners);
  std::__shared_weak_count::__release_weak(shared_weak_owners);
  if (!v17)
    goto LABEL_46;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
  if (v22)
  {
    *a5 = v22;
    a5[1] = (uint64_t)v17;
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    a5[3] = 0;
    a5[4] = 0;
    a5[2] = (uint64_t)&off_1E42C2D08;
    goto LABEL_95;
  }
LABEL_47:
  (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(&v83, a1, v89, a3, a4, 300, 1, 0);
  if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v83) != 4)
  {
    *a5 = 0;
    a5[1] = 0;
    v42 = v84;
    v43 = v85;
    a5[2] = (uint64_t)&off_1E42C2D08;
    a5[3] = v42;
    a5[4] = (uint64_t)v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    if (v42)
    {
      v46 = (unsigned int *)(v42 + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 + 1, v46));
    }
    goto LABEL_86;
  }
  v80 = 0;
  v81 = 0;
  v82 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, _OWORD *, void **))(*(_QWORD *)a1 + 136))(&v78, a1, &v84, v89, &v80);
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 136));
  v29 = std::__hash_table<std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::__unordered_map_hasher<altitude::StampedTileKey,std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::hash<altitude::StampedTileKey>,std::equal_to<altitude::StampedTileKey>,true>,std::__unordered_map_equal<altitude::StampedTileKey,std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::equal_to<altitude::StampedTileKey>,std::hash<altitude::StampedTileKey>,true>,std::allocator<std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>>>::__emplace_unique_key_args<altitude::StampedTileKey,std::piecewise_construct_t const&,std::tuple<altitude::StampedTileKey const&>,std::tuple<>>((float *)(a1 + 96), (int *)&v91, (uint64_t)&v91);
  v31 = v78;
  v30 = v79;
  if (v79)
  {
    v32 = (unint64_t *)&v79->__shared_weak_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = (std::__shared_weak_count *)v29[8];
  v29[7] = v31;
  v29[8] = v30;
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  for (i = (int *)v80; i != v81; i += 9)
  {
    v36 = std::__hash_table<std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::__unordered_map_hasher<altitude::StampedTileKey,std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::hash<altitude::StampedTileKey>,std::equal_to<altitude::StampedTileKey>,true>,std::__unordered_map_equal<altitude::StampedTileKey,std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::equal_to<altitude::StampedTileKey>,std::hash<altitude::StampedTileKey>,true>,std::allocator<std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>>>::__emplace_unique_key_args<altitude::StampedTileKey,std::piecewise_construct_t const&,std::tuple<altitude::StampedTileKey const&>,std::tuple<>>((float *)(a1 + 96), i, (uint64_t)i);
    v38 = v78;
    v37 = v79;
    if (v79)
    {
      v39 = (unint64_t *)&v79->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = (std::__shared_weak_count *)v36[8];
    v36[7] = v38;
    v36[8] = v37;
    if (v41)
      std::__shared_weak_count::__release_weak(v41);
  }
  v48 = *(_DWORD *)(a1 + 144) + 1;
  *(_DWORD *)(a1 + 144) = v48;
  if (v48 > 0x14)
  {
    *(_DWORD *)(a1 + 144) = 0;
    for (j = *(_QWORD **)(a1 + 112); j; j = (_QWORD *)*j)
    {
      while (1)
      {
        v69 = (std::__shared_weak_count *)j[8];
        if (!v69)
          goto LABEL_111;
        v70 = std::__shared_weak_count::lock(v69);
        if (!v70)
          goto LABEL_111;
        v71 = v70;
        v72 = j[7];
        v73 = (unint64_t *)&v70->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (v74)
          break;
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v71);
        if (v72)
          goto LABEL_108;
LABEL_111:
        v75 = (_QWORD *)*j;
        std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)(a1 + 96), j);
        v76 = __p[0];
        if (__p[0])
        {
          if ((_BYTE)v87)
          {
            v77 = (std::__shared_weak_count *)*((_QWORD *)__p[0] + 8);
            if (v77)
              std::__shared_weak_count::__release_weak(v77);
          }
          operator delete(v76);
        }
        j = v75;
        if (!v75)
          goto LABEL_70;
      }
      if (!v72)
        goto LABEL_111;
LABEL_108:
      ;
    }
  }
LABEL_70:
  v50 = v79;
  *a5 = v78;
  a5[1] = (uint64_t)v50;
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = v84;
  v54 = v85;
  a5[2] = (uint64_t)&off_1E42C2D08;
  a5[3] = v53;
  a5[4] = (uint64_t)v54;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  if (v53)
  {
    v57 = (unsigned int *)(v53 + 128);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 + 1, v57));
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
  v59 = v79;
  if (v79)
  {
    v60 = (unint64_t *)&v79->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v80)
  {
    v81 = (int *)v80;
    operator delete(v80);
  }
LABEL_86:
  v83 = &off_1E42C2D08;
  if (v84)
  {
    v62 = (unsigned int *)(v84 + 128);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
  }
  v64 = v85;
  if (v85)
  {
    v65 = (unint64_t *)&v85->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (v17)
  {
LABEL_95:
    v67 = (unint64_t *)&v17->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

BOOL altitude::TrafficTileDataCache::hasDataAvailable(uint64_t a1, uint64_t a2)
{
  return altitude::GeoResourceManager::getTileIdWithDataForTileId(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 32), (__int128 *)(a2 + 16), 22) != 0;
}

uint64_t altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficTileData>::clear(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v6;
  std::__shared_weak_count *v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 136));
  if (*(_QWORD *)(a1 + 120))
  {
    v2 = *(_QWORD **)(a1 + 112);
    if (v2)
    {
      do
      {
        v6 = (_QWORD *)*v2;
        v7 = (std::__shared_weak_count *)v2[8];
        if (v7)
          std::__shared_weak_count::__release_weak(v7);
        operator delete(v2);
        v2 = v6;
      }
      while (v6);
    }
    *(_QWORD *)(a1 + 112) = 0;
    v3 = *(_QWORD *)(a1 + 104);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
}

BOOL altitude::TrafficTileDataCache::hasValidKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_DWORD *)(a3 + 32) >= *(_DWORD *)(a1 + 200);
}

void altitude::TrafficTileDataCache::fetchData(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  _QWORD *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = *(_QWORD **)a1;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (((*(uint64_t (**)(_QWORD *))(*v4 + 40))(v4) & 1) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    if (!v3)
      return;
    goto LABEL_11;
  }
  v7 = v4[44];
  *a2 = v4[43];
  a2[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (v3)
  {
LABEL_11:
    v10 = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t altitude::TrafficTileDataCache::getCacheKeyForKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a2 + 32);
  result = altitude::GeoResourceManager::getTileIdWithDataForTileId(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 32), (__int128 *)(a2 + 16), 22);
  *(_QWORD *)(a3 + 16) = result;
  *(_QWORD *)(a3 + 24) = v5;
  return result;
}

void std::__shared_ptr_pointer<altitude::TrafficTileDataCacheJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::TrafficTileDataCacheJob>,std::allocator<altitude::TrafficTileDataCacheJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::TrafficTileDataCacheJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::TrafficTileDataCacheJob>,std::allocator<altitude::TrafficTileDataCacheJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void altitude::TrafficTileDataCacheJob::~TrafficTileDataCacheJob(altitude::TrafficTileDataCacheJob *this)
{
  altitude::TrafficTileDataCacheJob::~TrafficTileDataCacheJob(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = &off_1E42C62A8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 46);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 42);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)this = off_1E42C5768;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 24));
  v17 = *((_QWORD *)this + 24);
  if (v17)
    MEMORY[0x1A1AF4E00](v17, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 24) = 0;
  karo::Job::~Job(this);
}

void altitude::TrafficTileDataCacheJob::jobStep(altitude::TrafficTileDataCacheJob *this)
{
  char *v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  pthread_mutex_t *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  float *v74;
  int v75;
  float v76;
  float v77;
  double v78;
  int v79;
  uint64_t v80;
  int8x8_t *v81;
  int8x8_t v82;
  unint64_t v83;
  uint8x8_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  float *v96;
  int64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  _BYTE *v104;
  char *v105;
  char *v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  _OWORD *v113;
  char *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t *v117;
  pthread_mutexattr_t v118;
  unsigned int v119;
  unsigned int v120;
  void *v121;
  unsigned int v122;
  unsigned int v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  float *v129;
  float v130;
  float v131;
  BOOL v132;
  float v133;
  float v134;
  float v135;
  float v136;
  uint64_t v137;
  float v138;
  float v139;
  pthread_mutexattr_t *v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  _QWORD *v147;
  int8x16_t v148;
  float v149;
  float v150;
  signed int v151;
  int v152;
  uint64_t v153;
  float32x2_t v154;
  uint64_t v155;
  unint64_t v156;
  float v157;
  uint64_t v158;
  float32x2_t v159;
  int8x16_t v160;
  unint64_t v161;
  _OWORD *v162;
  float32x4_t v163;
  unint64_t v164;
  float32x4_t v165;
  const float *v166;
  int8x16_t v167;
  int32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  uint64_t v175;
  float32x2_t *v176;
  float32x2_t v177;
  float32x2_t v178;
  float32x2_t v179;
  float32x2_t v180;
  float v181;
  float v182;
  _QWORD *v183;
  uint64_t v184;
  float v185;
  float v186;
  float v187;
  float v188;
  int v189;
  int v190;
  float v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  float v195;
  float v196;
  float v197;
  _QWORD *v198;
  uint64_t v199;
  float v200;
  int v201;
  float v202;
  float32x2_t v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  _QWORD *v212;
  uint64_t v213;
  int v214;
  _QWORD *v215;
  _QWORD *v216;
  float v217;
  float v218;
  float32x2_t v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  uint64_t v227;
  uint64_t v228;
  float *v229;
  float *v230;
  char v231;
  unsigned int v232;
  float *v233;
  int *v234;
  float v235;
  float v236;
  float v237;
  float *v238;
  _DWORD *v239;
  pthread_mutexattr_t *v240;
  float v241;
  float v242;
  pthread_mutexattr_t *v243;
  pthread_mutexattr_t *v244;
  pthread_mutexattr_t *v245;
  pthread_mutexattr_t *v246;
  int v247;
  pthread_mutexattr_t *v248;
  _BOOL4 v249;
  pthread_mutexattr_t v250;
  pthread_mutexattr_t v251;
  __int128 v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  char *v256;
  char *v257;
  pthread_mutexattr_t v258;
  void (**v259)(karo::AsyncRequestManager::RequestHandle *__hidden);
  float *v260;
  char *v261;
  __int128 v262;
  __int128 v263;
  float *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  pthread_mutex_t **v268;
  int v269;
  const unsigned __int8 *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t sig;
  uint64_t v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  unsigned int *v281;
  unsigned int v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t v289;
  int v290;
  unsigned int v291;
  float *v292;
  float *v293;
  float *v294;
  __int128 v295;
  __int128 v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t v308;
  float *v309;
  uint64_t v310;
  zilch::TrafficSkeletonTile *v311;
  _QWORD *v312;
  std::__shared_weak_count *v313;
  unint64_t *p_shared_owners;
  unint64_t v315;
  unint64_t v316;
  float *v317;
  char *v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  unsigned int *v322;
  unsigned int v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  char *v327;
  float *v328;
  __int128 v329;
  __int128 v330;
  char *v331;
  unint64_t v332;
  _BYTE *v333;
  char *v334;
  char *v335;
  char *v336;
  uint64_t v337;
  char *v338;
  char *v339;
  char *v340;
  void *v341;
  void *v342;
  float32x2_t *v343;
  float *v344;
  float *v345;
  float v346;
  float v347;
  float32x2_t *v348;
  float *v349;
  unsigned int *v350;
  unsigned int v351;
  unsigned int v352;
  float v353;
  float v354;
  float v355;
  float v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  _QWORD *v361;
  unint64_t v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  __int128 v366;
  uint64_t v367;
  float32x2_t *v368;
  float *v369;
  float *v370;
  unint64_t v371;
  _OWORD *v372;
  float *v373;
  _OWORD *v374;
  uint64_t v375;
  float v376;
  float v377;
  float v378;
  float *v379;
  uint64_t v380;
  _QWORD *v381;
  float *v382;
  float32x2_t *v383;
  float32x2_t v384;
  float32x2_t v385;
  float32x2_t v386;
  float32x2_t v387;
  uint64_t v388;
  unint64_t v389;
  unint64_t v390;
  _BYTE *v391;
  float32x2_t *v392;
  unint64_t v393;
  float32x2_t *v394;
  float32x2_t v395;
  float v396;
  float32x2_t v397;
  float v398;
  uint64_t v399;
  unint64_t v400;
  float *v401;
  unint64_t v402;
  _BYTE *v403;
  char *v404;
  uint64_t v405;
  unint64_t v406;
  float *v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  void *v411;
  char *v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  void *v418;
  float32x2_t *v419;
  unint64_t v420;
  float32x2_t *v421;
  float32x2_t v422;
  uint64_t v423;
  _OWORD *v424;
  float32x2_t *v425;
  uint64_t v426;
  __int128 v427;
  float *v428;
  float *v429;
  unint64_t v430;
  float *v431;
  float *v432;
  float *v433;
  unint64_t v434;
  float *v435;
  uint64_t v436;
  _OWORD *v437;
  float32x2_t *v438;
  uint64_t v439;
  __int128 v440;
  uint64_t v441;
  _OWORD *v442;
  float *v443;
  uint64_t v444;
  __int128 v445;
  int v446;
  float *v447;
  uint64_t v448;
  unint64_t v449;
  float *v450;
  unint64_t v451;
  _BYTE *v452;
  float32x2_t *v453;
  unint64_t v454;
  float32x2_t *v455;
  float32x2_t v456;
  char *v457;
  uint64_t v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  unint64_t v462;
  void *v463;
  float *v464;
  unint64_t v465;
  float *v466;
  uint64_t v467;
  _OWORD *v468;
  float32x2_t *v469;
  uint64_t v470;
  __int128 v471;
  int v472;
  uint64_t v473;
  _OWORD *v474;
  float *v475;
  uint64_t v476;
  __int128 v477;
  int v478;
  uint64_t v479;
  _OWORD *v480;
  float *v481;
  uint64_t v482;
  __int128 v483;
  _OWORD *v484;
  unint64_t v485;
  unint64_t v486;
  unint64_t v487;
  unint64_t v488;
  char *v489;
  char *v490;
  char *v491;
  uint64_t v492;
  char *v493;
  _OWORD *v494;
  uint64_t v495;
  _OWORD *v496;
  void *v497;
  void *v498;
  char *v499;
  int64_t v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  BOOL v504;
  unint64_t v505;
  uint64_t v506;
  char *v507;
  char *v508;
  _QWORD *v509;
  char *v510;
  char *v511;
  char *v512;
  uint64_t v513;
  unint64_t v514;
  float32x2_t *v515;
  float32x2_t *v516;
  unint64_t v517;
  char *v518;
  float32x2_t *v519;
  unint64_t v520;
  char *v521;
  BOOL v522;
  uint64_t v523;
  uint64_t v524;
  float32x2_t *v525;
  _OWORD *v526;
  uint64_t v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  float *v532;
  unint64_t v533;
  uint64_t v534;
  float32x2_t *v535;
  _OWORD *v536;
  uint64_t v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  char *v542;
  unint64_t v543;
  unint64_t v544;
  char *v545;
  uint64_t v546;
  uint64_t v547;
  _OWORD *v548;
  float32x2_t *v549;
  uint64_t v550;
  __int128 v551;
  uint64_t v552;
  uint64_t v553;
  char *v554;
  size_t v555;
  unint64_t v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t v559;
  uint64_t v560;
  char *v561;
  char **v562;
  char *v563;
  char *v564;
  size_t v565;
  unint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  float *v570;
  float *v571;
  float *v572;
  unint64_t v573;
  unint64_t v574;
  unint64_t v575;
  char *v576;
  char *v577;
  char *v578;
  __int128 v579;
  unsigned int v580;
  _QWORD *v581;
  _QWORD *v582;
  unsigned int v583;
  uint64_t v584;
  unint64_t v585;
  char *v586;
  char *v587;
  uint64_t v588;
  unint64_t v589;
  uint64_t v590;
  unint64_t v591;
  _BYTE *v592;
  _QWORD *v593;
  unint64_t v594;
  uint64_t v595;
  _OWORD *v596;
  char *v597;
  uint64_t v598;
  __int128 v599;
  uint64_t v600;
  char *v601;
  unint64_t *v602;
  unint64_t v603;
  _QWORD *v604;
  std::__shared_weak_count *v605;
  unint64_t *v606;
  unint64_t v607;
  BOOL v608;
  float *v609;
  std::__shared_weak_count *v610;
  altitude::TrafficTileDataCacheJob *v611;
  int v612;
  _QWORD *v613;
  int v614;
  uint64_t v615;
  int v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  _QWORD *v621;
  double __p;
  float *__pa;
  float *__pb;
  float *__pc;
  float32x2_t *__pd;
  float32x2_t *__pe;
  float *__pf;
  float v629;
  float *v630;
  pthread_mutexattr_t *v631;
  uint64_t v632;
  unsigned int v633;
  uint64_t v634;
  int v635;
  int v636;
  __int128 v637;
  float *v638;
  __int128 v639;
  float *v640;
  char *v641;
  float *v642;
  pthread_mutexattr_t *v643;
  float *v644;
  unsigned int *v645;
  float32x2_t *v646;
  char *v647;
  _QWORD *v648;
  _QWORD v649[2];
  _QWORD v650[2];
  _QWORD v651[2];
  _OWORD v652[3];
  __int128 v653;
  __int128 v654;
  uint64_t v655;
  pthread_mutexattr_t v656;
  void (**v657)(karo::AsyncRequestManager::RequestHandle *__hidden);
  pthread_mutex_t **v658;
  std::__shared_weak_count *v659;
  uint64_t v660;
  float32x4x2_t v661;

  v660 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 228;
  v3 = *(_OWORD *)((char *)this + 244);
  v653 = *(_OWORD *)((char *)this + 228);
  v654 = v3;
  *(_QWORD *)&v654 = altitude::GeoResourceManager::getTileIdWithDataForTileId(*(_QWORD *)(*((_QWORD *)this + 33) + 32), &v654, 22);
  *((_QWORD *)&v654 + 1) = v4;
  if (!(_DWORD)v654)
  {
    (*(void (**)(altitude::TrafficTileDataCacheJob *))(*(_QWORD *)this + 16))(this);
    return;
  }
  if (!*((_QWORD *)this + 39))
  {
    v265 = *((_QWORD *)this + 34);
    v266 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
    v267 = atomic_load((unsigned int *)this + 4);
    (*(void (**)(pthread_mutexattr_t *__return_ptr, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v265 + 104))(&v656, v265, &v653, v266, v267, 2, 0);
    if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v656) == 4)
    {
      v268 = v658;
      pthread_mutex_lock(v658[19]);
      v269 = *((_DWORD *)v268 + 40);
      pthread_mutex_unlock(v268[19]);
      if ((v269 & 1) != 0)
        v270 = (const unsigned __int8 *)(*(uint64_t (**)(pthread_mutex_t **))&(*v658)->__opaque[48])(v658);
      else
        v270 = 0;
      v310 = (*(uint64_t (**)(pthread_mutex_t **))&(*v658)->__opaque[40])(v658);
      zilch::ReadBitstream::ReadBitstream((zilch::ReadBitstream *)v652, v270);
      v311 = (zilch::TrafficSkeletonTile *)operator new();
      zilch::TrafficSkeletonTile::TrafficSkeletonTile(v311);
      if (v310)
        zilch::TrafficSkeletonTile::decode(v311, (zilch::ReadBitstream *)v652);
      v312 = (_QWORD *)operator new();
      *v312 = &off_1E42E8408;
      v312[1] = 0;
      v312[2] = 0;
      v312[3] = v311;
      v313 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
      *((_QWORD *)this + 39) = v311;
      *((_QWORD *)this + 40) = v312;
      if (v313)
      {
        p_shared_owners = (unint64_t *)&v313->__shared_owners_;
        do
          v315 = __ldaxr(p_shared_owners);
        while (__stlxr(v315 - 1, p_shared_owners));
        if (!v315)
        {
          ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
          std::__shared_weak_count::__release_weak(v313);
        }
      }
      karo::Job::removeSubJob((pthread_mutex_t **)this, 0);
    }
    else if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v656))
    {
      v297 = (std::__shared_weak_count *)v657;
      v651[0] = *(_QWORD *)v656.__opaque;
      v651[1] = v657;
      if (v657)
      {
        v298 = (unint64_t *)(v657 + 1);
        do
          v299 = __ldxr(v298);
        while (__stxr(v299 + 1, v298));
        karo::Job::addBlockingSubJob((uint64_t *)this, v651, 0, 0);
        do
          v300 = __ldaxr(v298);
        while (__stlxr(v300 - 1, v298));
        if (!v300)
        {
          ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
          std::__shared_weak_count::__release_weak(v297);
        }
      }
      else
      {
        karo::Job::addBlockingSubJob((uint64_t *)this, v651, 0, 0);
      }
    }
    else
    {
      (*(void (**)(altitude::TrafficTileDataCacheJob *))(*(_QWORD *)this + 16))(this);
    }
    v656.__sig = (uint64_t)&off_1E42C2C18;
    v319 = v659;
    if (v659)
    {
      v320 = (unint64_t *)&v659->__shared_owners_;
      do
        v321 = __ldaxr(v320);
      while (__stlxr(v321 - 1, v320));
      if (!v321)
      {
        ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
        std::__shared_weak_count::__release_weak(v319);
      }
    }
    v656.__sig = (uint64_t)&off_1E42C2D08;
    if (*(_QWORD *)v656.__opaque)
    {
      v322 = (unsigned int *)(*(_QWORD *)v656.__opaque + 128);
      do
        v323 = __ldaxr(v322);
      while (__stlxr(v323 - 1, v322));
    }
    v324 = (std::__shared_weak_count *)v657;
    if (v657)
    {
      v325 = (unint64_t *)(v657 + 1);
      do
        v326 = __ldaxr(v325);
      while (__stlxr(v326 - 1, v325));
      if (!v326)
      {
        ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
        std::__shared_weak_count::__release_weak(v324);
      }
    }
  }
  if (!*((_QWORD *)this + 37))
  {
    v271 = *((_QWORD *)this + 35);
    v272 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
    v273 = atomic_load((unsigned int *)this + 4);
    (*(void (**)(pthread_mutexattr_t *__return_ptr, uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)v271
                                                                                                 + 104))(&v656, v271, v2, v272, v273);
    sig = v656.__sig;
    if (v656.__sig)
    {
      v275 = *(_QWORD *)v656.__opaque;
      if (*(_QWORD *)v656.__opaque)
      {
        v276 = (unint64_t *)(*(_QWORD *)v656.__opaque + 8);
        do
          v277 = __ldxr(v276);
        while (__stxr(v277 + 1, v276));
      }
      v278 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
      *((_QWORD *)this + 37) = sig;
      *((_QWORD *)this + 38) = v275;
      if (v278)
      {
        v279 = (unint64_t *)&v278->__shared_owners_;
        do
          v280 = __ldaxr(v279);
        while (__stlxr(v280 - 1, v279));
        if (!v280)
        {
          ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
          std::__shared_weak_count::__release_weak(v278);
        }
      }
      karo::Job::removeSubJob((pthread_mutex_t **)this, 1);
    }
    else if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v657))
    {
      v305 = v659;
      v650[0] = v658;
      v650[1] = v659;
      if (v659)
      {
        v306 = (unint64_t *)&v659->__shared_owners_;
        do
          v307 = __ldxr(v306);
        while (__stxr(v307 + 1, v306));
        karo::Job::addBlockingSubJob((uint64_t *)this, v650, 1, 0);
        do
          v308 = __ldaxr(v306);
        while (__stlxr(v308 - 1, v306));
        if (!v308)
        {
          ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
          std::__shared_weak_count::__release_weak(v305);
        }
      }
      else
      {
        karo::Job::addBlockingSubJob((uint64_t *)this, v650, 1, 0);
      }
    }
    else
    {
      (*(void (**)(altitude::TrafficTileDataCacheJob *))(*(_QWORD *)this + 16))(this);
    }
    v657 = &off_1E42C2D08;
    if (v658)
    {
      v281 = (unsigned int *)(v658 + 16);
      do
        v282 = __ldaxr(v281);
      while (__stlxr(v282 - 1, v281));
    }
    v283 = v659;
    if (v659)
    {
      v284 = (unint64_t *)&v659->__shared_owners_;
      do
        v285 = __ldaxr(v284);
      while (__stlxr(v285 - 1, v284));
      if (!v285)
      {
        ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
        std::__shared_weak_count::__release_weak(v283);
      }
    }
    v286 = *(std::__shared_weak_count **)v656.__opaque;
    if (*(_QWORD *)v656.__opaque)
    {
      v287 = (unint64_t *)(*(_QWORD *)v656.__opaque + 8);
      do
        v288 = __ldaxr(v287);
      while (__stlxr(v288 - 1, v287));
      if (!v288)
      {
        ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
        std::__shared_weak_count::__release_weak(v286);
      }
    }
  }
  if (!*((_QWORD *)this + 41))
  {
    v5 = *((_OWORD *)v2 + 1);
    v652[0] = *(_OWORD *)((char *)this + 228);
    v652[1] = v5;
    LODWORD(v652[0]) = 20;
    v6 = *((_QWORD *)this + 36);
    v7 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
    v8 = atomic_load((unsigned int *)this + 4);
    (*(void (**)(pthread_mutexattr_t *__return_ptr, uint64_t, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)v6 + 104))(&v656, v6, v652, v7, v8);
    v9 = v656.__sig;
    if (v656.__sig)
    {
      v10 = *(_QWORD *)v656.__opaque;
      if (*(_QWORD *)v656.__opaque)
      {
        v11 = (unint64_t *)(*(_QWORD *)v656.__opaque + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)this + 42);
      *((_QWORD *)this + 41) = v9;
      *((_QWORD *)this + 42) = v10;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      karo::Job::removeSubJob((pthread_mutex_t **)this, 2);
    }
    else if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v657))
    {
      v301 = v659;
      v649[0] = v658;
      v649[1] = v659;
      if (v659)
      {
        v302 = (unint64_t *)&v659->__shared_owners_;
        do
          v303 = __ldxr(v302);
        while (__stxr(v303 + 1, v302));
        karo::Job::addBlockingSubJob((uint64_t *)this, v649, 2, 0);
        do
          v304 = __ldaxr(v302);
        while (__stlxr(v304 - 1, v302));
        if (!v304)
        {
          ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
          std::__shared_weak_count::__release_weak(v301);
        }
      }
      else
      {
        karo::Job::addBlockingSubJob((uint64_t *)this, v649, 2, 0);
      }
    }
    else
    {
      (*(void (**)(altitude::TrafficTileDataCacheJob *))(*(_QWORD *)this + 16))(this);
    }
    v657 = &off_1E42C2D08;
    if (v658)
    {
      v16 = (unsigned int *)(v658 + 16);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
    }
    v18 = v659;
    if (!v659)
      goto LABEL_22;
    v19 = (unint64_t *)&v659->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      v21 = *(std::__shared_weak_count **)v656.__opaque;
      if (!*(_QWORD *)v656.__opaque)
        goto LABEL_26;
    }
    else
    {
LABEL_22:
      v21 = *(std::__shared_weak_count **)v656.__opaque;
      if (!*(_QWORD *)v656.__opaque)
        goto LABEL_26;
    }
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (v23)
    {
LABEL_26:
      if (!*((_QWORD *)this + 41))
        return;
      goto LABEL_27;
    }
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (!*((_QWORD *)this + 41))
      return;
  }
LABEL_27:
  if (*((_QWORD *)this + 39) && *((_QWORD *)this + 37))
  {
    v24 = operator new();
    v25 = v654;
    *(_QWORD *)v24 = DWORD2(v654) | ((unint64_t)DWORD1(v654) << 32);
    *(_DWORD *)(v24 + 8) = v25;
    *(_QWORD *)(v24 + 16) = 0;
    pthread_mutexattr_init(&v656);
    pthread_mutexattr_settype(&v656, 2);
    v26 = (pthread_mutex_t *)operator new();
    pthread_mutex_init(v26, &v656);
    pthread_mutexattr_destroy(&v656);
    *(_QWORD *)(v24 + 16) = v26;
    *(_QWORD *)(v24 + 200) = 0;
    *(_DWORD *)(v24 + 208) = 0;
    *(_OWORD *)(v24 + 24) = 0u;
    *(_OWORD *)(v24 + 40) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 72) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *(_OWORD *)(v24 + 120) = 0u;
    *(_OWORD *)(v24 + 136) = 0u;
    *(_OWORD *)(v24 + 152) = 0u;
    *(_OWORD *)(v24 + 168) = 0u;
    *(_OWORD *)(v24 + 180) = 0u;
    v27 = *((_QWORD *)this + 41);
    v28 = (std::__shared_weak_count *)*((_QWORD *)this + 42);
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      v31 = (unint64_t *)&v28->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v33 = *(std::__shared_weak_count **)(v24 + 88);
    *(_QWORD *)(v24 + 80) = v27;
    *(_QWORD *)(v24 + 88) = v28;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v28)
    {
      v36 = (unint64_t *)&v28->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v38 = *((_QWORD *)this + 39);
    v39 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      v42 = (unint64_t *)&v39->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = *(std::__shared_weak_count **)(v24 + 72);
    *(_QWORD *)(v24 + 64) = v38;
    *(_QWORD *)(v24 + 72) = v39;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (v39)
    {
      v47 = (unint64_t *)&v39->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v49 = *((_QWORD *)this + 37);
    v50 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      v53 = (unint64_t *)&v50->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v55 = *(std::__shared_weak_count **)(v24 + 56);
    *(_QWORD *)(v24 + 48) = v49;
    *(_QWORD *)(v24 + 56) = v50;
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (v50)
    {
      v58 = (unint64_t *)&v50->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v61 = *((_QWORD *)this + 45);
    v60 = *((_QWORD *)this + 46);
    if (v60)
    {
      v62 = (unint64_t *)(v60 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    v64 = *(std::__shared_weak_count **)(v24 + 104);
    *(_QWORD *)(v24 + 96) = v61;
    *(_QWORD *)(v24 + 104) = v60;
    if (v64)
    {
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v68 = *(_QWORD *)(v24 + 80);
    v67 = *(std::__shared_weak_count **)(v24 + 88);
    if (v67)
    {
      v69 = (unint64_t *)&v67->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
      do
        v71 = __ldxr(v69);
      while (__stxr(v71 + 1, v69));
      do
        v72 = __ldaxr(v69);
      while (__stlxr(v72 - 1, v69));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v610 = v67;
    v611 = this;
    v73 = (char *)operator new(0x40uLL);
    v633 = 0;
    v631 = 0;
    v74 = 0;
    v75 = 0;
    v641 = v73 + 64;
    v643 = 0;
    *(_OWORD *)v73 = 0u;
    *((_OWORD *)v73 + 1) = 0u;
    *((_OWORD *)v73 + 2) = 0u;
    *((_OWORD *)v73 + 3) = 0u;
    v647 = v73;
    v76 = -1.0;
    v77 = 1.0;
    v78 = 0.01;
    v648 = (_QWORD *)v24;
    while (1)
    {
      v79 = v75;
      if (zilch::TrafficSkeletonTile::size(*(zilch::TrafficSkeletonTile **)(v24 + 64)) == v75)
        break;
      v80 = zilch::TrafficSkeletonTile::operator[]();
      v81 = *(int8x8_t **)(v24 + 48);
      v82 = v81[3];
      if (!*(_QWORD *)&v82)
        goto LABEL_93;
      v83 = *(_QWORD *)(v80 + 16);
      v84 = (uint8x8_t)vcnt_s8(v82);
      v84.i16[0] = vaddlv_u8(v84);
      if (v84.u32[0] > 1uLL)
      {
        v85 = *(_QWORD *)(v80 + 16);
        if (*(_QWORD *)&v82 <= v83)
          v85 = v83 % *(_QWORD *)&v82;
      }
      else
      {
        v85 = (*(_QWORD *)&v82 - 1) & v83;
      }
      v86 = *(_QWORD **)(*(_QWORD *)&v81[2] + 8 * v85);
      if (!v86)
        goto LABEL_93;
      v87 = (_QWORD *)*v86;
      if (!*v86)
        goto LABEL_93;
      if (v84.u32[0] < 2uLL)
      {
        v88 = *(_QWORD *)&v82 - 1;
        v89 = v647;
        while (1)
        {
          v90 = v87[1];
          if (v90 == v83)
          {
            if (v87[2] == v83)
              goto LABEL_117;
          }
          else if ((v90 & v88) != v85)
          {
            goto LABEL_93;
          }
          v87 = (_QWORD *)*v87;
          if (!v87)
            goto LABEL_93;
        }
      }
      v89 = v647;
      while (1)
      {
        v91 = v87[1];
        if (v91 == v83)
          break;
        if (v91 >= *(_QWORD *)&v82)
        {
          v91 %= *(_QWORD *)&v82;
          v89 = v647;
        }
        if (v91 != v85)
          goto LABEL_93;
LABEL_111:
        v87 = (_QWORD *)*v87;
        if (!v87)
          goto LABEL_93;
      }
      if (v87[2] != v83)
        goto LABEL_111;
LABEL_117:
      v635 = v79;
      v92 = v87;
      v93 = v641;
      do
        v92 = (_QWORD *)*v92;
      while (v92 && v92[2] == v83);
      if (v87 == v92)
        goto LABEL_92;
      v645 = (unsigned int *)v80;
      v94 = v89;
      while (2)
      {
        if (v94 < v93)
        {
          *(_QWORD *)v94 = v87[3];
          v94 += 8;
        }
        else
        {
          v95 = v68;
          v96 = v74;
          v97 = v94 - v89;
          v98 = (v94 - v89) >> 3;
          v99 = v98 + 1;
          if ((unint64_t)(v98 + 1) >> 61)
            goto LABEL_793;
          v100 = v93 - v89;
          v101 = (v93 - v89) >> 2;
          if (v101 > v99)
            v99 = v101;
          if (v100 >= 0x7FFFFFFFFFFFFFF8)
            v102 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v102 = v99;
          if (v102)
          {
            if (v102 >> 61)
              goto LABEL_794;
            v103 = v89;
            v104 = operator new(8 * v102);
            v89 = v103;
          }
          else
          {
            v104 = 0;
          }
          v105 = &v104[8 * v98];
          *(_QWORD *)v105 = v87[3];
          v106 = v105 + 8;
          if (v94 == v89)
          {
            v74 = v96;
            v68 = v95;
          }
          else
          {
            v107 = v94 - 8 - v89;
            if (v107 < 0x168)
              goto LABEL_140;
            v108 = v89;
            if (&v104[v97 - 8 - (v107 & 0xFFFFFFFFFFFFFFF8)] > &v104[v97 - 8])
            {
              v109 = v94;
              v74 = v96;
              v68 = v95;
              goto LABEL_141;
            }
            if (&v94[-(v107 & 0xFFFFFFFFFFFFFFF8) - 8] > v94 - 8 || (unint64_t)(v94 - &v104[v97]) < 0x20)
            {
LABEL_140:
              v109 = v94;
              v74 = v96;
              v68 = v95;
              goto LABEL_141;
            }
            v112 = (v107 >> 3) + 1;
            v109 = &v94[-8 * (v112 & 0x3FFFFFFFFFFFFFFCLL)];
            v113 = &v104[8 * v98 - 16];
            v114 = v94 - 16;
            v115 = v112 & 0x3FFFFFFFFFFFFFFCLL;
            v74 = v96;
            do
            {
              v116 = *(_OWORD *)v114;
              *(v113 - 1) = *((_OWORD *)v114 - 1);
              *v113 = v116;
              v113 -= 2;
              v114 -= 32;
              v115 -= 4;
            }
            while (v115);
            v105 -= 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
            v89 = v108;
            v68 = v95;
            if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_141:
                v110 = *((_QWORD *)v109 - 1);
                v109 -= 8;
                *((_QWORD *)v105 - 1) = v110;
                v105 -= 8;
              }
              while (v109 != v89);
            }
          }
          v93 = &v104[8 * v102];
          if (v89)
          {
            v111 = &v104[8 * v102];
            operator delete(v89);
            v93 = v111;
          }
          v89 = v105;
          v94 = v106;
        }
        v87 = (_QWORD *)*v87;
        if (v87 != v92)
          continue;
        break;
      }
      v647 = v89;
      v641 = v93;
      if (v89 != v94)
      {
        v117 = (uint64_t *)v89;
        while (1)
        {
          v656.__sig = *v117;
          *(_QWORD *)v656.__opaque = v645;
          v120 = *v645;
          v119 = v645[1];
          v121 = (void *)(***(uint64_t (****)(_QWORD))(v68 + 88))(*(_QWORD *)(v68 + 88));
          if (v121)
          {
            objc_msgSend(v121, "vectorTilePtr");
            v121 = *(void **)&v652[0];
          }
          else
          {
            v652[0] = 0uLL;
          }
          v122 = geo::codec::VectorTile::linesCount((geo::codec::VectorTile *)v121);
          v123 = v122;
          v124 = (std::__shared_weak_count *)*((_QWORD *)&v652[0] + 1);
          if (!*((_QWORD *)&v652[0] + 1))
            goto LABEL_797;
          v125 = (unint64_t *)(*((_QWORD *)&v652[0] + 1) + 8);
          do
            v126 = __ldaxr(v125);
          while (__stlxr(v126 - 1, v125));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
            if (v120 >= v123)
              goto LABEL_155;
          }
          else
          {
LABEL_797:
            if (v120 >= v122)
              goto LABEL_155;
          }
          altitude::RoadTileDataPrivate::operator()((uint64_t)v652, v68, v120, v119);
          v127 = *(_QWORD **)&v652[0];
          if (*(_QWORD *)&v652[0] != *(_QWORD *)(v68 + 64) || DWORD2(v652[0]) != *(_DWORD *)(v68 + 72))
          {
            if (*(_DWORD *)(*(_QWORD *)&v652[0] + 100))
            {
              v655 = 0;
              v128 = DWORD2(v652[0]);
              geo::codec::multiSectionFeaturePoints(*(_QWORD **)&v652[0], DWORD2(v652[0]), &v655);
              if (v655)
              {
                v129 = *(float **)v656.__opaque;
                v130 = altitude::RoadTileDataPrivate::evaluate(*(altitude::RoadTileDataPrivate **)(v68 + 88), v120, v119, *(float *)(*(_QWORD *)v656.__opaque + 8));
                v131 = altitude::RoadTileDataPrivate::evaluate(*(altitude::RoadTileDataPrivate **)(v68 + 88), v120, v119, v129[3] + v129[2]);
                v132 = v130 == v76 || v131 == v76;
                if (!v132)
                {
                  v133 = v131;
                  v655 = 0;
                  geo::codec::multiSectionFeaturePoints(v127, v128, &v655);
                  v134 = fminf(fmaxf(v130, 0.0), (float)(unint64_t)(v655 - 1));
                  v135 = fminf(fmaxf(v133, 0.0), (float)(unint64_t)(v655 - 1));
                  if (v134 != v135)
                    break;
                }
              }
            }
          }
LABEL_155:
          if (++v117 == (uint64_t *)v94)
            goto LABEL_91;
        }
        v136 = v135 - v134;
        *(float *)&v657 = v135 - v134;
        *((float *)&v657 + 1) = v134;
        v137 = v656.__sig;
        v138 = *(float *)(v656.__sig + 8);
        if (v138 == 0.0 && *(float *)(v656.__sig + 12) == v77)
        {
          v139 = v134;
          v140 = v643;
          goto LABEL_229;
        }
        v141 = v129[7];
        v142 = v129[8];
        v140 = v643;
        if (v141 >= v138 && v142 <= *(float *)(v656.__sig + 12))
        {
          v139 = v134;
        }
        else
        {
          v143 = v142 - v141;
          if ((float)(v142 - v141) >= v77)
          {
            v145 = *(float *)(v656.__sig + 12);
            v144 = *(float *)(v656.__sig + 8);
          }
          else
          {
            v144 = 0.0;
            v145 = 0.0;
            if (v143 > 0.0)
            {
              if (v143 <= 0.00000011921)
                v146 = v77;
              else
                v146 = v77 / v143;
              v144 = fminf(fmaxf(v146 * (float)(v138 - v141), 0.0), v77);
              v145 = fminf(fmaxf((float)(*(float *)(v656.__sig + 12) - v141) * v146, 0.0), v77);
            }
          }
          v655 = 0;
          v147 = geo::codec::multiSectionFeaturePoints(v127, v128, &v655);
          v149 = fmaxf(v135, v134);
          v150 = fminf(v135, v134);
          v151 = vcvtms_s32_f32(v150);
          v152 = vcvtps_s32_f32(v149);
          v153 = v151;
          v629 = v145;
          if (v151 >= v152)
          {
            v154 = (float32x2_t)v147[v151];
            v155 = v152;
            v157 = 0.0;
          }
          else
          {
            v154 = (float32x2_t)v147[v151];
            v155 = v152;
            v156 = v152 - v153;
            v157 = 0.0;
            v158 = v153;
            v159 = (float32x2_t)v147[v153];
            if (v156 < 8)
            {
LABEL_193:
              v175 = v152 - v158;
              v176 = (float32x2_t *)&v147[v158 + 1];
              do
              {
                v177 = *v176++;
                v178 = vsub_f32(v159, v177);
                v157 = sqrtf(vaddv_f32(vmul_f32(v178, v178))) + v157;
                v159 = v177;
                --v175;
              }
              while (v175);
            }
            else
            {
              v148.i64[1] = v147[v153];
              v160 = (int8x16_t)vdupq_lane_s32((int32x2_t)v154, 0);
              v161 = v156 & 0xFFFFFFFFFFFFFFF8;
              v162 = &v147[v153 + 5];
              v163 = 0uLL;
              v164 = v156 & 0xFFFFFFFFFFFFFFF8;
              v165 = 0uLL;
              do
              {
                v166 = (const float *)(v162 - 2);
                v661 = vld2q_f32(v166);
                v168 = *(int32x4_t *)v162;
                v167 = *((int8x16_t *)v162 + 1);
                v162 += 4;
                v169 = (float32x4_t)vuzp1q_s32(v168, (int32x4_t)v167);
                v170 = (float32x4_t)vuzp2q_s32(v168, (int32x4_t)v167);
                v171 = vsubq_f32((float32x4_t)vextq_s8(v160, (int8x16_t)v661.val[0], 0xCuLL), v661.val[0]);
                v172 = vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v661.val[0], (int8x16_t)v169, 0xCuLL), v169);
                v173 = vsubq_f32((float32x4_t)vextq_s8(v148, (int8x16_t)v661.val[1], 0xCuLL), v661.val[1]);
                v661.val[0] = vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v661.val[1], (int8x16_t)v170, 0xCuLL), v170);
                v163 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v171, v171), v173, v173)), v163);
                v165 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v172, v172), v661.val[0], v661.val[0])), v165);
                v148 = (int8x16_t)v170;
                v160 = (int8x16_t)v169;
                v164 -= 8;
              }
              while (v164);
              v174 = vaddq_f32(v165, v163);
              v157 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v174, v174));
              if (v156 != v161)
              {
                v158 = v161 + v153;
                v159 = (float32x2_t)vextq_s8(v167, v167, 8uLL).u64[0];
                goto LABEL_193;
              }
            }
          }
          v179 = vsub_f32(v154, (float32x2_t)v147[(int)v153 + 1]);
          v180 = vsub_f32((float32x2_t)v147[v152 - 1], (float32x2_t)v147[v155]);
          v181 = (float)(v157 + (float)(sqrtf(vaddv_f32(vmul_f32(v179, v179))) * (float)((float)(int)v153 - v150)))
               + (float)(sqrtf(vaddv_f32(vmul_f32(v180, v180))) * (float)(v149 - (float)v152));
          if (v181 <= 0.0)
            goto LABEL_155;
          v620 = v137;
          __p = v78;
          v182 = v181 * v144;
          v655 = 0;
          v183 = geo::codec::multiSectionFeaturePoints(v127, v128, &v655);
          v184 = 0;
          v185 = floorf(v134);
          v186 = ceilf(v135);
          v187 = ceilf(v134);
          v188 = floorf(v135);
          if (v135 > v134)
          {
            v189 = 1;
          }
          else
          {
            v185 = v187;
            v186 = v188;
            v189 = -1;
          }
          v190 = (int)v185;
          v191 = (float)v189;
          v192 = (int)v185;
          if (v135 > v134)
            v193 = 1;
          else
            v193 = -1;
          v194 = (int)v186;
          v195 = truncf(v185);
          v196 = (float)(v134 - v195) * v191;
          v197 = (float)((float)(v195 - v135) * v191) + 1.0;
          v612 = v190 - v193;
          v198 = &v183[v190];
          v199 = v194 - v190;
          v200 = 0.0;
          v201 = v189 + v190;
          v616 = (int)v186;
          v618 = v192;
          v614 = v201;
          while (v199 != v184)
          {
            v202 = v200;
            v203 = vsub_f32((float32x2_t)v198[v184], (float32x2_t)v183[v193 + v192 + v184]);
            v204 = sqrtf(vaddv_f32(vmul_f32(v203, v203)));
            v205 = 0.0;
            v206 = v204;
            if (!v184)
            {
              if ((_DWORD)v194 == v201)
                v207 = v197;
              else
                v207 = 0.0;
              v206 = v204 - (float)((float)(v196 + v207) * v204);
              v205 = v196;
            }
            v200 = v206 + v202;
            v184 += v193;
            v201 += v193;
            if (v200 > v182)
            {
              v208 = (float)(v612 + v184) + (float)((float)(v205 + (float)((float)(v182 - v202) / v204)) * v191);
              v209 = fminf(v208, v135);
              v210 = fmaxf(v208, v135);
              if (v135 <= v134)
                v139 = v210;
              else
                v139 = v209;
              goto LABEL_217;
            }
          }
          v139 = v135;
LABEL_217:
          v211 = v181 * v629;
          v655 = 0;
          v212 = geo::codec::multiSectionFeaturePoints(v127, v128, &v655);
          v213 = 0;
          v214 = v616 - v614;
          v215 = &v212[v193 + v618];
          v216 = &v212[v618];
          v217 = 0.0;
          v140 = v643;
          do
          {
            if (v199 == v213)
              goto LABEL_228;
            v218 = v217;
            v219 = vsub_f32((float32x2_t)v216[v213], (float32x2_t)v215[v213]);
            v220 = sqrtf(vaddv_f32(vmul_f32(v219, v219)));
            v221 = 0.0;
            v222 = v220;
            if (!v213)
            {
              if (v214)
                v223 = 0.0;
              else
                v223 = v197;
              v222 = v220 - (float)((float)(v196 + v223) * v220);
              v221 = v196;
            }
            v217 = v222 + v218;
            v213 += v193;
            v214 -= v193;
          }
          while (v217 <= v211);
          v224 = (float)(v612 + v213) + (float)((float)(v221 + (float)((float)(v211 - v218) / v220)) * v191);
          v225 = fminf(v224, v135);
          v226 = fmaxf(v224, v135);
          if (v135 <= v134)
            v135 = v226;
          else
            v135 = v225;
LABEL_228:
          v136 = v135 - v139;
          *(float *)&v657 = v135 - v139;
          *((float *)&v657 + 1) = v139;
          v76 = -1.0;
          v77 = 1.0;
          v78 = __p;
          v137 = v620;
        }
LABEL_229:
        v227 = (char *)v140 - (char *)v74;
        if (v140 == (pthread_mutexattr_t *)v74)
          goto LABEL_275;
        v228 = 0;
        v229 = 0;
        v230 = 0;
        v231 = 0;
        v232 = 1;
        while (2)
        {
          v233 = &v74[12 * v228];
          if (*(_QWORD *)v233)
          {
            v234 = (int *)*((_QWORD *)v233 + 1);
            v235 = *(float *)v234;
            if (*v234 != *(_DWORD *)v129)
            {
              v235 = *v129;
              goto LABEL_242;
            }
            if (v234[1] != *((_DWORD *)v129 + 1))
              goto LABEL_242;
            v140 = v643;
            if (*(_DWORD *)(*(_QWORD *)v233 + 16) == *(_DWORD *)(v137 + 16))
            {
              v236 = v233[4];
              if (v236 < 0.0 != v136 >= 0.0)
              {
                v237 = v233[5];
                if (v236 >= 0.0)
                {
                  if (v237 > v139)
                    goto LABEL_269;
LABEL_242:
                  v140 = v643;
                }
                else
                {
                  if (v237 >= v139)
                    goto LABEL_242;
LABEL_269:
                  v140 = v643;
                  if (vabdd_f64((float)(*(float *)&v657 + *((float *)&v657 + 1)), v233[5]) < v78)
                  {
                    v251 = v656;
                    *((_QWORD *)v233 + 2) = v657;
                    *(pthread_mutexattr_t *)v233 = v251;
                    v230 = &v74[12 * v228];
                    v235 = *v129;
                    v231 = 1;
                  }
                }
              }
            }
            v238 = &v74[12 * v228];
            v239 = (_DWORD *)*((_QWORD *)v238 + 4);
            if (*v239 == LODWORD(v235) && v239[1] == *((_DWORD *)v129 + 1))
            {
              v240 = (pthread_mutexattr_t *)(v238 + 6);
              if (*(_DWORD *)(*((_QWORD *)v238 + 3) + 16) == *(_DWORD *)(v137 + 16))
              {
                v241 = v74[12 * v228 + 10];
                if (v241 < 0.0 != v136 >= 0.0)
                {
                  v242 = v74[12 * v228 + 11];
                  v243 = &v656;
                  if (v242 > v139)
                    v244 = &v656;
                  else
                    v244 = (pthread_mutexattr_t *)(v238 + 6);
                  if (v242 > v139)
                    v245 = v240;
                  else
                    v245 = &v656;
                  if (v242 < v139)
                    v246 = &v656;
                  else
                    v246 = v240;
                  if (v242 >= v139)
                  {
                    v247 = 1;
                  }
                  else
                  {
                    v243 = v240;
                    v247 = 0;
                  }
                  if (v241 < 0.0)
                  {
                    v248 = v243;
                  }
                  else
                  {
                    v246 = v244;
                    v248 = v245;
                  }
                  if (v241 < 0.0)
                    v249 = v247;
                  else
                    v249 = v242 <= v139;
                  if (v249)
                  {
                    v140 = v643;
                    if (vabdd_f64((float)(*(float *)&v246[1].__sig + *((float *)&v246[1].__sig + 1)), *((float *)&v248[1].__sig + 1)) < v78)
                    {
                      v250 = v656;
                      v240[1].__sig = (uint64_t)v657;
                      *v240 = v250;
                      v229 = &v74[12 * v228];
                      v231 = 1;
                    }
                  }
                  else
                  {
                    v140 = v643;
                  }
                }
              }
            }
          }
          v228 = v232++;
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v140 - (char *)v74) >> 4) == v228)
          {
            if (v230 && v229)
            {
              v252 = *(_OWORD *)(v229 + 6);
              *((_QWORD *)v230 + 5) = *((_QWORD *)v229 + 5);
              *(_OWORD *)(v230 + 6) = v252;
              *(_QWORD *)v229 = 0;
              ++v633;
            }
            if ((v231 & 1) != 0)
              goto LABEL_155;
LABEL_275:
            if (v140 < v631)
            {
              v118 = v656;
              v140[1].__sig = (uint64_t)v657;
              *v140 = v118;
              *(pthread_mutexattr_t *)((char *)v140 + 24) = v656;
              *(_QWORD *)v140[2].__opaque = v657;
              v643 = v140 + 3;
              goto LABEL_155;
            }
            v253 = 0xAAAAAAAAAAAAAAABLL * (v227 >> 4);
            v254 = v253 + 1;
            if (v253 + 1 <= 0x555555555555555)
            {
              if (0x5555555555555556 * (((char *)v631 - (char *)v74) >> 4) > v254)
                v254 = 0x5555555555555556 * (((char *)v631 - (char *)v74) >> 4);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v631 - (char *)v74) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                v255 = 0x555555555555555;
              else
                v255 = v254;
              if (v255)
              {
                if (v255 <= 0x555555555555555)
                {
                  v256 = (char *)operator new(48 * v255);
                  goto LABEL_286;
                }
LABEL_794:
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              v256 = 0;
LABEL_286:
              v257 = &v256[48 * v253];
              v258 = v656;
              *(pthread_mutexattr_t *)v257 = v656;
              v259 = v657;
              *((_QWORD *)v257 + 2) = v657;
              *(pthread_mutexattr_t *)(v257 + 24) = v258;
              *((_QWORD *)v257 + 5) = v259;
              v260 = (float *)v643;
              if (v643 == (pthread_mutexattr_t *)v74)
              {
                v264 = (float *)v643;
                v74 = (float *)&v256[48 * v253];
              }
              else
              {
                v261 = &v256[48 * v253];
                do
                {
                  v262 = *((_OWORD *)v260 - 3);
                  v263 = *((_OWORD *)v260 - 1);
                  *((_OWORD *)v261 - 2) = *((_OWORD *)v260 - 2);
                  *((_OWORD *)v261 - 1) = v263;
                  *((_OWORD *)v261 - 3) = v262;
                  v261 -= 48;
                  v260 -= 12;
                }
                while (v260 != v74);
                v264 = v74;
                v74 = (float *)v261;
              }
              v631 = (pthread_mutexattr_t *)&v256[48 * v255];
              v643 = (pthread_mutexattr_t *)(v257 + 48);
              if (v264)
                operator delete(v264);
              goto LABEL_155;
            }
LABEL_793:
            abort();
          }
          continue;
        }
      }
LABEL_91:
      v24 = (uint64_t)v648;
LABEL_92:
      v79 = v635;
LABEL_93:
      v75 = v79 + 1;
    }
    if (v633)
    {
      if (v643 == (pthread_mutexattr_t *)v74)
      {
        v292 = (float *)v643;
        v289 = 0xAAAAAAAAAAAAAAABLL * (((char *)v643 - (char *)v74) >> 4);
      }
      else
      {
        v289 = 0;
        v290 = 0;
        v291 = 1;
        v292 = v74;
        do
        {
          v293 = &v292[12 * v289];
          if (*(_QWORD *)v293)
          {
            if (v290)
            {
              v294 = &v292[12 * ~v290 + 12 * v291];
              v295 = *(_OWORD *)v293;
              v296 = *((_OWORD *)v293 + 2);
              *((_OWORD *)v294 + 1) = *((_OWORD *)v293 + 1);
              *((_OWORD *)v294 + 2) = v296;
              *(_OWORD *)v294 = v295;
              v292 = v74;
            }
          }
          else
          {
            ++v290;
          }
          v289 = v291++;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)v643 - (char *)v292) >> 4) != v289);
      }
      if (v289 >= v633)
      {
        v309 = &v292[12 * (v289 - v633)];
      }
      else if (0xAAAAAAAAAAAAAAABLL * (v631 - v643) >= -(uint64_t)v633)
      {
        bzero(v643, 48 * ((-48 * (unint64_t)v633 - 48) / 0x30) + 48);
        v309 = (float *)&v643[3 * ((-48 * (unint64_t)v633 - 48) / 0x30) + 3];
      }
      else
      {
        v316 = 0xAAAAAAAAAAAAAAABLL * (((char *)v643 - (char *)v74) >> 4) - v633;
        if (v316 > 0x555555555555555)
          goto LABEL_793;
        if (0x5555555555555556 * (((char *)v631 - (char *)v74) >> 4) > v316)
          v316 = 0x5555555555555556 * (((char *)v631 - (char *)v74) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v631 - (char *)v74) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v316 = 0x555555555555555;
        if (v316)
        {
          if (v316 > 0x555555555555555)
            goto LABEL_794;
          v317 = (float *)v643;
          v318 = (char *)operator new(48 * v316);
        }
        else
        {
          v317 = (float *)v643;
          v318 = 0;
        }
        v327 = &v318[16 * (((char *)v643 - (char *)v74) >> 4)];
        bzero(v327, 48 * ((-48 * (unint64_t)v633 - 48) / 0x30) + 48);
        v309 = (float *)&v327[48 * ((-48 * (unint64_t)v633 - 48) / 0x30) + 48];
        v328 = v317;
        if (v317 != v74)
        {
          do
          {
            v329 = *((_OWORD *)v328 - 3);
            v330 = *((_OWORD *)v328 - 1);
            *((_OWORD *)v327 - 2) = *((_OWORD *)v328 - 2);
            *((_OWORD *)v327 - 1) = v330;
            *((_OWORD *)v327 - 3) = v329;
            v327 -= 48;
            v328 -= 12;
          }
          while (v328 != v74);
          v328 = v74;
        }
        v74 = (float *)v327;
        if (v328)
          operator delete(v328);
      }
    }
    else
    {
      v309 = (float *)v643;
    }
    v331 = *(char **)(v24 + 112);
    v332 = 0xAAAAAAAAAAAAAAABLL * (((char *)v309 - (char *)v74) >> 4);
    v613 = (_QWORD *)(v24 + 112);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v24 + 128) - (_QWORD)v331) >> 4) < v332)
    {
      if (v332 > 0x333333333333333)
        goto LABEL_793;
      v333 = *(_BYTE **)(v24 + 120);
      v334 = (char *)operator new(0x5555555555555570 * (((char *)v309 - (char *)v74) >> 4));
      v335 = &v334[0x5555555555555570 * (((char *)v309 - (char *)v74) >> 4)];
      v336 = &v334[v333 - v331];
      if (v333 == v331)
      {
        *(_QWORD *)(v24 + 112) = v336;
        *(_QWORD *)(v24 + 120) = v336;
        *(_QWORD *)(v24 + 128) = v335;
      }
      else
      {
        v337 = 0;
        do
        {
          v338 = &v336[v337];
          v339 = &v333[v337];
          *((_QWORD *)v338 - 10) = *(_QWORD *)&v333[v337 - 80];
          *((_QWORD *)v338 - 9) = *(_QWORD *)&v333[v337 - 72];
          *((_OWORD *)v338 - 4) = *(_OWORD *)&v333[v337 - 64];
          *((_QWORD *)v338 - 6) = *(_QWORD *)&v333[v337 - 48];
          *((_QWORD *)v339 - 8) = 0;
          *((_QWORD *)v339 - 7) = 0;
          *((_QWORD *)v339 - 6) = 0;
          *(_OWORD *)(v338 - 40) = *(_OWORD *)&v333[v337 - 40];
          *((_QWORD *)v338 - 3) = *(_QWORD *)&v333[v337 - 24];
          *((_QWORD *)v339 - 5) = 0;
          *((_QWORD *)v339 - 4) = 0;
          *((_QWORD *)v339 - 3) = 0;
          *((_OWORD *)v338 - 1) = *(_OWORD *)&v333[v337 - 16];
          v337 -= 80;
        }
        while (&v333[v337] != v331);
        v331 = *(char **)(v24 + 112);
        v340 = *(char **)(v24 + 120);
        *(_QWORD *)(v24 + 112) = &v336[v337];
        *(_QWORD *)(v24 + 120) = v336;
        *(_QWORD *)(v24 + 128) = v335;
        while (v340 != v331)
        {
          v341 = (void *)*((_QWORD *)v340 - 5);
          if (v341)
          {
            *((_QWORD *)v340 - 4) = v341;
            operator delete(v341);
          }
          v342 = (void *)*((_QWORD *)v340 - 8);
          if (v342)
          {
            *((_QWORD *)v340 - 7) = v342;
            operator delete(v342);
          }
          v340 -= 80;
        }
      }
      if (v331)
        operator delete(v331);
    }
    v644 = v74;
    v343 = 0;
    if (v74 != v309)
    {
      v646 = 0;
      v344 = 0;
      v630 = 0;
      v345 = v74;
      v609 = v309;
      while (1)
      {
        v346 = v345[5];
        v347 = v345[10] + v345[11];
        if (v346 != v347)
        {
          v348 = v343;
          v349 = v344;
          v642 = v345;
          v350 = (unsigned int *)*((_QWORD *)v345 + 1);
          v351 = *v350;
          v352 = v350[1];
          v353 = floorf(v346);
          v354 = ceilf(v347);
          v355 = ceilf(v346);
          v356 = floorf(v347);
          if (v346 < v347)
          {
            v357 = 1;
          }
          else
          {
            v353 = v355;
            v354 = v356;
            v357 = -1;
          }
          v636 = v357;
          v358 = (int)v354;
          v359 = (int)v353;
          altitude::RoadTileDataPrivate::operator()((uint64_t)&v656, *(_QWORD *)(v24 + 80), v351, v352);
          if ((int)v359 - (int)v358 >= 0)
            v360 = (v359 - v358);
          else
            v360 = (v358 - v359);
          *(_QWORD *)&v652[0] = 0;
          v361 = (_QWORD *)v656.__sig;
          v362 = *(unsigned int *)v656.__opaque;
          geo::codec::multiSectionFeaturePoints(v656.__sig, *(unsigned int *)v656.__opaque, v652);
          if (*(_QWORD *)&v652[0] <= v360
            || ((v632 = v358, (int)v359 <= (int)v358) ? (v363 = v358) : (v363 = v359),
                *(_QWORD *)&v652[0] = 0,
                geo::codec::multiSectionFeaturePoints(v361, v362, v652),
                *(_QWORD *)&v652[0] <= (unint64_t)v363))
          {
            v344 = v349;
          }
          else
          {
            v344 = v349;
            if ((v359 & 0x80000000) == 0)
            {
              v364 = v632;
              if ((v632 & 0x80000000) == 0)
              {
                *(_QWORD *)&v652[0] = 0;
                v617 = v359;
                v621 = geo::codec::multiSectionFeaturePoints(v361, v362, v652);
                *(_QWORD *)&v652[0] = 0;
                v365 = geo::codec::multiSectionFeatureElevations((uint64_t)v361, v362, v652);
                v367 = v359;
                if (v636 + (_DWORD)v632 == (_DWORD)v359)
                {
                  v368 = v348;
                  v369 = v349;
                  v343 = v348;
                  v370 = v369;
                  v345 = v642;
LABEL_439:
                  __pa = v369;
                  v372 = *(_OWORD **)(v24 + 120);
                  v371 = *(_QWORD *)(v24 + 128);
                  v373 = v370;
                  if ((unint64_t)v372 >= v371)
                  {
                    v484 = (_OWORD *)*v613;
                    v485 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v372 - *v613) >> 4);
                    v486 = v485 + 1;
                    v74 = v644;
                    if (v485 + 1 > 0x333333333333333)
                      goto LABEL_793;
                    v487 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v371 - (_QWORD)v484) >> 4);
                    if (2 * v487 > v486)
                      v486 = 2 * v487;
                    if (v487 >= 0x199999999999999)
                      v488 = 0x333333333333333;
                    else
                      v488 = v486;
                    if (v488)
                    {
                      if (v488 > 0x333333333333333)
                        goto LABEL_794;
                      v489 = (char *)operator new(80 * v488);
                    }
                    else
                    {
                      v489 = 0;
                    }
                    v490 = &v489[80 * v485];
                    *((_OWORD *)v490 + 3) = 0u;
                    *((_OWORD *)v490 + 4) = 0u;
                    *((_OWORD *)v490 + 1) = 0u;
                    *((_OWORD *)v490 + 2) = 0u;
                    v491 = &v489[80 * v488];
                    v374 = v490 + 80;
                    *(_OWORD *)v490 = 0u;
                    if (v372 == v484)
                    {
                      v648[14] = v490;
                      v648[15] = v374;
                      v648[16] = v491;
                    }
                    else
                    {
                      v492 = 0;
                      do
                      {
                        v493 = &v490[v492 * 16];
                        v494 = &v372[v492];
                        *((_QWORD *)v493 - 10) = *(_QWORD *)&v372[v492 - 5];
                        v495 = *((_QWORD *)&v372[v492 - 4] - 1);
                        *((_QWORD *)v493 - 7) = 0;
                        *((_QWORD *)v493 - 6) = 0;
                        *((_QWORD *)v493 - 9) = v495;
                        *((_QWORD *)v493 - 8) = 0;
                        *((_OWORD *)v493 - 4) = v372[v492 - 4];
                        *((_QWORD *)v493 - 6) = *(_QWORD *)&v372[v492 - 3];
                        *((_QWORD *)v494 - 8) = 0;
                        *((_QWORD *)v494 - 7) = 0;
                        *((_QWORD *)v494 - 6) = 0;
                        *((_QWORD *)v493 - 5) = 0;
                        *((_QWORD *)v493 - 4) = 0;
                        *((_QWORD *)v493 - 3) = 0;
                        *(_OWORD *)(v493 - 40) = *(_OWORD *)((char *)&v372[v492 - 2] - 8);
                        *((_QWORD *)v493 - 3) = *((_QWORD *)&v372[v492 - 1] - 1);
                        *((_QWORD *)v494 - 5) = 0;
                        *((_QWORD *)v494 - 4) = 0;
                        *((_QWORD *)v494 - 3) = 0;
                        *((_OWORD *)v493 - 1) = v372[v492 - 1];
                        v492 -= 5;
                      }
                      while (&v372[v492] != v484);
                      v372 = (_OWORD *)v648[14];
                      v496 = (_OWORD *)v648[15];
                      v648[14] = &v490[v492 * 16];
                      v648[15] = v374;
                      v648[16] = v491;
                      while (v496 != v372)
                      {
                        v497 = (void *)*((_QWORD *)v496 - 5);
                        if (v497)
                        {
                          *((_QWORD *)v496 - 4) = v497;
                          operator delete(v497);
                        }
                        v498 = (void *)*((_QWORD *)v496 - 8);
                        if (v498)
                        {
                          *((_QWORD *)v496 - 7) = v498;
                          operator delete(v498);
                        }
                        v496 -= 5;
                      }
                    }
                    if (v372)
                      operator delete(v372);
                    v370 = v373;
                  }
                  else
                  {
                    v374 = v372 + 5;
                    v372[3] = 0u;
                    v372[4] = 0u;
                    v372[1] = 0u;
                    v372[2] = 0u;
                    *v372 = 0u;
                    v74 = v644;
                  }
                  v648[15] = v374;
                  v499 = (char *)*((_QWORD *)v374 - 8);
                  v500 = (char *)v368 - (char *)v343;
                  v501 = v368 - v343;
                  v502 = *((_QWORD *)v374 - 6);
                  if (v501 > (v502 - (uint64_t)v499) >> 3)
                  {
                    if (v499)
                    {
                      *((_QWORD *)v374 - 7) = v499;
                      operator delete(v499);
                      v502 = 0;
                      *((_QWORD *)v374 - 8) = 0;
                      *((_QWORD *)v374 - 7) = 0;
                      *((_QWORD *)v374 - 6) = 0;
                    }
                    if (v500 < 0)
                      goto LABEL_793;
                    v503 = v502 >> 2;
                    if (v502 >> 2 <= v501)
                      v503 = v368 - v343;
                    v504 = (unint64_t)v502 >= 0x7FFFFFFFFFFFFFF8;
                    v505 = 0x1FFFFFFFFFFFFFFFLL;
                    if (!v504)
                      v505 = v503;
                    if (v505 >> 61)
                      goto LABEL_793;
                    v506 = 8 * v505;
                    v507 = (char *)operator new(8 * v505);
                    v508 = v507;
                    *((_QWORD *)v374 - 7) = v507;
                    v509 = (_QWORD *)v374 - 7;
                    *(v509 - 1) = v507;
                    v509[1] = &v507[v506];
                    v510 = v507;
                    if (v343 != v368)
                    {
                      memcpy(v507, v343, ((v500 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
                      v510 = &v508[((v500 - 8) & 0xFFFFFFFFFFFFFFF8) + 8];
                    }
                    v511 = (char *)(v510 - v508);
LABEL_700:
                    v532 = __pa;
                    v370 = v373;
LABEL_705:
                    *v509 = &v511[(_QWORD)v508];
                    v553 = v648[15];
                    v554 = *(char **)(v553 - 40);
                    v555 = (char *)v370 - (char *)v532;
                    v556 = v370 - v532;
                    v557 = *(_QWORD *)(v553 - 24);
                    if (v556 > (v557 - (uint64_t)v554) >> 2)
                    {
                      if (v554)
                      {
                        *(_QWORD *)(v553 - 32) = v554;
                        operator delete(v554);
                        v557 = 0;
                        *(_QWORD *)(v553 - 40) = 0;
                        *(_QWORD *)(v553 - 32) = 0;
                        *(_QWORD *)(v553 - 24) = 0;
                      }
                      if ((v555 & 0x8000000000000000) != 0)
                        goto LABEL_793;
                      v558 = v557 >> 1;
                      if (v557 >> 1 <= v556)
                        v558 = v556;
                      v504 = (unint64_t)v557 >= 0x7FFFFFFFFFFFFFFCLL;
                      v559 = 0x3FFFFFFFFFFFFFFFLL;
                      if (!v504)
                        v559 = v558;
                      if (v559 >> 62)
                        goto LABEL_793;
                      v560 = 4 * v559;
                      v561 = (char *)operator new(4 * v559);
                      v554 = v561;
                      *(_QWORD *)(v553 - 32) = v561;
                      v562 = (char **)(v553 - 32);
                      *(v562 - 1) = v561;
                      v562[1] = &v561[v560];
                      if (v373 != __pa)
                        memcpy(v561, __pa, v555);
                      goto LABEL_721;
                    }
                    v564 = *(char **)(v553 - 32);
                    v562 = (char **)(v553 - 32);
                    v563 = v564;
                    v565 = v564 - v554;
                    v566 = (v564 - v554) >> 2;
                    if (v566 >= v556)
                    {
                      if (v370 != v532)
                        goto LABEL_720;
                    }
                    else
                    {
                      if (v563 != v554)
                      {
                        memmove(v554, v532, v565);
                        v370 = v373;
                        v532 = __pa;
                        v554 = *v562;
                      }
                      v532 += v566;
                      v555 = (char *)v370 - (char *)v532;
                      if (v370 != v532)
LABEL_720:
                        memmove(v554, v532, v555);
                    }
LABEL_721:
                    v24 = (uint64_t)v648;
                    *v562 = &v554[v555];
                    v567 = v648[15];
                    *(_OWORD *)(v567 - 16) = *(_OWORD *)v345;
                    v568 = v656.__sig;
                    *(pthread_mutexattr_t *)(v567 - 80) = v656;
                    v570 = (float *)v648[18];
                    v569 = v648[19];
                    if ((unint64_t)v570 >= v569)
                    {
                      v572 = (float *)v648[17];
                      v573 = 0xAAAAAAAAAAAAAAABLL * (((char *)v570 - (char *)v572) >> 3) + 1;
                      v309 = v609;
                      if (v573 > 0xAAAAAAAAAAAAAAALL)
                        goto LABEL_793;
                      v574 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v569 - (_QWORD)v572) >> 3);
                      if (2 * v574 > v573)
                        v573 = 2 * v574;
                      if (v574 >= 0x555555555555555)
                        v575 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v575 = v573;
                      if (v575)
                      {
                        if (v575 > 0xAAAAAAAAAAAAAAALL)
                          goto LABEL_794;
                        v576 = (char *)operator new(24 * v575);
                      }
                      else
                      {
                        v576 = 0;
                      }
                      v577 = &v576[8 * (((char *)v570 - (char *)v572) >> 3)];
                      *(_QWORD *)v577 = 0;
                      *((_QWORD *)v577 + 1) = 0;
                      *((_QWORD *)v577 + 2) = 0;
                      v578 = v577;
                      if (v570 == v572)
                      {
                        v24 = (uint64_t)v648;
                      }
                      else
                      {
                        v24 = (uint64_t)v648;
                        do
                        {
                          v579 = *(_OWORD *)(v570 - 6);
                          *((_QWORD *)v578 - 1) = *((_QWORD *)v570 - 1);
                          *(_OWORD *)(v578 - 24) = v579;
                          v578 -= 24;
                          v570 -= 6;
                        }
                        while (v570 != v572);
                        v570 = (float *)v648[17];
                      }
                      v571 = (float *)(v577 + 24);
                      *(_QWORD *)(v24 + 136) = v578;
                      *(_QWORD *)(v24 + 144) = v577 + 24;
                      *(_QWORD *)(v24 + 152) = &v576[24 * v575];
                      if (v570)
                        operator delete(v570);
                    }
                    else
                    {
                      *(_QWORD *)v570 = 0;
                      *((_QWORD *)v570 + 1) = 0;
                      v571 = v570 + 6;
                      *((_QWORD *)v570 + 2) = 0;
                      v309 = v609;
                    }
                    v344 = __pa;
                    *(_QWORD *)(v24 + 144) = v571;
                    *((_QWORD *)v571 - 3) = v568;
                    *((_QWORD *)v571 - 2) = *(unsigned int *)(*((_QWORD *)v345 + 1) + 4);
                    *(v571 - 2) = v345[5];
                    *(v571 - 1) = v345[10] + v345[11];
                    goto LABEL_422;
                  }
                  v512 = (char *)*((_QWORD *)v374 - 7);
                  v509 = (_QWORD *)v374 - 7;
                  v508 = v512;
                  v513 = v512 - v499;
                  v514 = (v512 - v499) >> 3;
                  if (v514 < v501)
                  {
                    v515 = &v343[v514];
                    if (v508 != v499)
                    {
                      if ((unint64_t)(v513 - 8) < 0x58)
                      {
                        v516 = v343;
                        goto LABEL_688;
                      }
                      if (v499 < (char *)v343 + (v513 & 0xFFFFFFFFFFFFFFF8)
                        && (v516 = v343, &v499[v513 & 0xFFFFFFFFFFFFFFF8] > (char *)v343))
                      {
                        do
                        {
LABEL_688:
                          *(_DWORD *)v499 = v516->i32[0];
                          *((_DWORD *)v499 + 1) = v516->i32[1];
                          ++v516;
                          v499 += 8;
                        }
                        while (v516 != v515);
                      }
                      else
                      {
                        v533 = ((unint64_t)(v513 - 8) >> 3) + 1;
                        v534 = v533 & 0x3FFFFFFFFFFFFFF8;
                        v535 = v343 + 4;
                        v536 = v499 + 32;
                        v537 = v533 & 0x3FFFFFFFFFFFFFF8;
                        do
                        {
                          v539 = *(_OWORD *)v535[-4].f32;
                          v538 = *(_OWORD *)v535[-2].f32;
                          v541 = *(_OWORD *)v535->f32;
                          v540 = *(_OWORD *)v535[2].f32;
                          v535 += 8;
                          *(v536 - 2) = v539;
                          *(v536 - 1) = v538;
                          *v536 = v541;
                          v536[1] = v540;
                          v536 += 4;
                          v537 -= 8;
                        }
                        while (v537);
                        if (v533 != (v533 & 0x3FFFFFFFFFFFFFF8))
                        {
                          v516 = &v343[v534];
                          v499 += v534 * 8;
                          goto LABEL_688;
                        }
                      }
                    }
                    if (v515 == v368)
                    {
                      v511 = 0;
                      goto LABEL_700;
                    }
                    v542 = (char *)v343 + v513;
                    v543 = (char *)v368 - v542 - 8;
                    if (v543 < 0x38)
                    {
                      v545 = v508;
                    }
                    else
                    {
                      v544 = v508 - v542;
                      v545 = v508;
                      if (v544 >= 0x20)
                      {
                        v546 = (v543 >> 3) + 1;
                        v547 = 8 * (v546 & 0x3FFFFFFFFFFFFFFCLL);
                        v515 = (float32x2_t *)((char *)v515 + v547);
                        v548 = v508 + 16;
                        v549 = &v343[v514 + 2];
                        v550 = v546 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v551 = *(_OWORD *)v549->f32;
                          *(v548 - 1) = *(_OWORD *)v549[-2].f32;
                          *v548 = v551;
                          v548 += 2;
                          v549 += 4;
                          v550 -= 4;
                        }
                        while (v550);
                        v545 = &v508[v547];
                        if (v546 == (v546 & 0x3FFFFFFFFFFFFFFCLL))
                          goto LABEL_699;
                      }
                    }
                    do
                    {
                      v552 = (uint64_t)*v515++;
                      *(_QWORD *)v545 = v552;
                      v545 += 8;
                    }
                    while (v515 != v368);
LABEL_699:
                    v511 = (char *)(v545 - v508);
                    goto LABEL_700;
                  }
                  if (v343 == v368)
                  {
                    v518 = v499;
                  }
                  else
                  {
                    v517 = v500 - 8;
                    v518 = v499;
                    v519 = v343;
                    if ((unint64_t)(v500 - 8) >= 0x58)
                    {
                      v520 = (v517 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if (v499 >= (char *)v343 + v520
                        || (v521 = &v499[v520], v518 = v499, v519 = v343, v522 = v521 > (char *)v343, v370 = v373, !v522))
                      {
                        v523 = (v517 >> 3) + 1;
                        v524 = v523 & 0x3FFFFFFFFFFFFFF8;
                        v518 = &v499[v524 * 8];
                        v525 = v343 + 4;
                        v526 = v499 + 32;
                        v527 = v523 & 0x3FFFFFFFFFFFFFF8;
                        do
                        {
                          v529 = *(_OWORD *)v525[-4].f32;
                          v528 = *(_OWORD *)v525[-2].f32;
                          v531 = *(_OWORD *)v525->f32;
                          v530 = *(_OWORD *)v525[2].f32;
                          v525 += 8;
                          *(v526 - 2) = v529;
                          *(v526 - 1) = v528;
                          *v526 = v531;
                          v526[1] = v530;
                          v526 += 4;
                          v527 -= 8;
                        }
                        while (v527);
                        if (v523 == (v523 & 0x3FFFFFFFFFFFFFF8))
                        {
                          v532 = __pa;
                          v370 = v373;
LABEL_704:
                          v511 = (char *)(v518 - v499);
                          v508 = v499;
                          goto LABEL_705;
                        }
                        v519 = &v343[v524];
                        v370 = v373;
                      }
                    }
                    do
                    {
                      *(_DWORD *)v518 = v519->i32[0];
                      *((_DWORD *)v518 + 1) = v519->i32[1];
                      v518 += 8;
                      ++v519;
                    }
                    while (v519 != v368);
                  }
                  v532 = __pa;
                  goto LABEL_704;
                }
                v375 = v636;
                v634 = v636 + (int)v359;
                v376 = (float)((float)(v636 + v359) - v346) * (float)v636;
                v377 = (float)((float)(int)v632 - v347) * (float)v636;
                v378 = 0.0;
                v368 = v348;
                v369 = v349;
                v343 = v348;
                v379 = v369;
                v380 = v359;
                v345 = v642;
                v381 = v621;
                v619 = v365;
                v615 = v636;
                while (2)
                {
                  if (v380 == v367)
                  {
                    v382 = v369;
                    goto LABEL_617;
                  }
                  if (v380 != v634 && v380 != v364)
                  {
LABEL_448:
                    v383 = v368;
                    v370 = v379;
                    v382 = v369;
                    if (v380 == v364)
                      goto LABEL_617;
LABEL_560:
                    v640 = v370;
                    if (v383 < v646)
                    {
                      *v383 = (float32x2_t)v381[v380];
                      v368 = v383 + 1;
                      v24 = (uint64_t)v648;
                      if (!v365)
                        goto LABEL_442;
LABEL_585:
                      if (v370 < v630)
                      {
                        *v370 = *(float *)(v365 + 4 * v380);
                        v78 = *(double *)&v381[v380];
                        v379 = v370 + 1;
                        goto LABEL_618;
                      }
                      v457 = (char *)((char *)v370 - (char *)v369);
                      v458 = v370 - v369;
                      v459 = v458 + 1;
                      if ((unint64_t)(v458 + 1) >> 62)
                        goto LABEL_793;
                      __pf = v369;
                      v460 = (char *)v630 - (char *)v369;
                      v461 = ((char *)v630 - (char *)v369) >> 1;
                      if (v461 > v459)
                        v459 = v461;
                      if (v460 >= 0x7FFFFFFFFFFFFFFCLL)
                        v462 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v462 = v459;
                      if (v462)
                      {
                        if (v462 >> 62)
                          goto LABEL_794;
                        v463 = operator new(4 * v462);
                        v381 = v621;
                        v370 = v640;
                      }
                      else
                      {
                        v463 = 0;
                      }
                      v382 = (float *)((char *)v463 + 4 * v458);
                      *v382 = *(float *)(v619 + 4 * v380);
                      v379 = v382 + 1;
                      v464 = __pf;
                      if (v370 == __pf)
                      {
                        v364 = v632;
                        v375 = v615;
                      }
                      else
                      {
                        v465 = (char *)(v370 - 1) - (char *)__pf;
                        if (v465 < 0xBC)
                        {
                          v466 = v370;
                          goto LABEL_612;
                        }
                        if (&v457[(_QWORD)v463 - 4 - (v465 & 0xFFFFFFFFFFFFFFFCLL)] > &v457[(_QWORD)v463 - 4])
                        {
                          v466 = v640;
                          goto LABEL_611;
                        }
                        if ((float *)((char *)v370 - (v465 & 0xFFFFFFFFFFFFFFFCLL) - 4) <= v370 - 1
                          && (unint64_t)((char *)v370 - &v457[(_QWORD)v463]) >= 0x20)
                        {
                          v473 = (v465 >> 2) + 1;
                          v466 = &v640[-(v473 & 0x7FFFFFFFFFFFFFF8)];
                          v474 = (char *)v463 + 4 * v458 - 16;
                          v475 = v640 - 4;
                          v476 = v473 & 0x7FFFFFFFFFFFFFF8;
                          v375 = v615;
                          do
                          {
                            v477 = *(_OWORD *)v475;
                            *(v474 - 1) = *((_OWORD *)v475 - 1);
                            *v474 = v477;
                            v474 -= 2;
                            v475 -= 8;
                            v476 -= 8;
                          }
                          while (v476);
                          v382 -= v473 & 0x7FFFFFFFFFFFFFF8;
                          v464 = __pf;
                          v364 = v632;
                          if (v473 != (v473 & 0x7FFFFFFFFFFFFFF8))
                            goto LABEL_613;
                        }
                        else
                        {
                          v466 = v640;
LABEL_611:
                          v464 = __pf;
LABEL_612:
                          v364 = v632;
                          v375 = v615;
                          do
                          {
LABEL_613:
                            v472 = *((_DWORD *)v466-- - 1);
                            *((_DWORD *)v382-- - 1) = v472;
                          }
                          while (v466 != v464);
                        }
                      }
                      v630 = (float *)((char *)v463 + 4 * v462);
                      if (v464)
                      {
                        operator delete(v464);
                        v381 = v621;
                      }
                      v367 = v617;
                      v365 = v619;
LABEL_617:
                      v78 = *(double *)&v381[v380];
                      v369 = v382;
                      v370 = v379;
                      v24 = (uint64_t)v648;
                      if (v365)
                      {
LABEL_618:
                        v378 = *(float *)(v365 + 4 * v380);
                        v370 = v379;
                      }
LABEL_443:
                      v379 = v370;
                      v132 = v380 == v364;
                      v380 += v375;
                      if (v132)
                        goto LABEL_439;
                      continue;
                    }
                    v448 = v383 - v343;
                    v449 = v448 + 1;
                    if ((unint64_t)(v448 + 1) >> 61)
                      goto LABEL_793;
                    v450 = v369;
                    if (((char *)v646 - (char *)v343) >> 2 > v449)
                      v449 = ((char *)v646 - (char *)v343) >> 2;
                    if ((unint64_t)((char *)v646 - (char *)v343) >= 0x7FFFFFFFFFFFFFF8)
                      v451 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v451 = v449;
                    if (v451)
                    {
                      if (v451 >> 61)
                        goto LABEL_794;
                      v452 = operator new(8 * v451);
                      v381 = v621;
                      v370 = v640;
                    }
                    else
                    {
                      v452 = 0;
                    }
                    v453 = (float32x2_t *)&v452[8 * v448];
                    *v453 = (float32x2_t)v381[v380];
                    __pe = v453 + 1;
                    if (v383 == v343)
                    {
                      v364 = v632;
                    }
                    else
                    {
                      v454 = (char *)&v383[-1] - (char *)v343;
                      if (v454 < 0x168)
                        goto LABEL_578;
                      if (&v452[(char *)v383 - (char *)v343 - 8 - (v454 & 0xFFFFFFFFFFFFFFF8)] > &v452[(char *)v383 - (char *)v343 - 8])
                      {
                        v455 = v383;
                        v364 = v632;
                        v370 = v640;
                        goto LABEL_579;
                      }
                      v370 = v640;
                      if ((float32x2_t *)((char *)&v383[-1] - (v454 & 0xFFFFFFFFFFFFFFF8)) > &v383[-1]
                        || (unint64_t)((char *)v343 - v452) < 0x20)
                      {
LABEL_578:
                        v455 = v383;
                        v364 = v632;
                        goto LABEL_579;
                      }
                      v467 = (v454 >> 3) + 1;
                      v455 = &v383[-(v467 & 0x3FFFFFFFFFFFFFFCLL)];
                      v468 = &v452[8 * v448 - 16];
                      v469 = v383 - 2;
                      v470 = v467 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v471 = *(_OWORD *)v469->f32;
                        *(v468 - 1) = *(_OWORD *)v469[-2].f32;
                        *v468 = v471;
                        v468 -= 2;
                        v469 -= 4;
                        v470 -= 4;
                      }
                      while (v470);
                      v453 -= v467 & 0x3FFFFFFFFFFFFFFCLL;
                      v364 = v632;
                      v370 = v640;
                      if (v467 != (v467 & 0x3FFFFFFFFFFFFFFCLL))
                      {
                        do
                        {
LABEL_579:
                          v456 = v455[-1];
                          --v455;
                          v453[-1] = v456;
                          --v453;
                        }
                        while (v455 != v343);
                      }
                    }
                    v646 = (float32x2_t *)&v452[8 * v451];
                    if (v343)
                    {
                      operator delete(v343);
                      v370 = v640;
                      v381 = v621;
                    }
                    v343 = v453;
                    v24 = (uint64_t)v648;
                    v369 = v450;
                    v368 = __pe;
                    v367 = v617;
                    v365 = v619;
                    v375 = v615;
                    if (v619)
                      goto LABEL_585;
LABEL_442:
                    v78 = *(double *)&v381[v380];
                    goto LABEL_443;
                  }
                  break;
                }
                v384 = (float32x2_t)v381[v380];
                v385 = vsub_f32(*(float32x2_t *)&v78, v384);
                *(float *)&v366 = sqrtf(vaddv_f32(vmul_f32(v385, v385)));
                v386 = vdiv_f32(v385, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v366, 0));
                if (v380 != v634)
                {
                  v383 = v368;
LABEL_479:
                  v370 = v379;
                  if (v380 != v364)
                    goto LABEL_560;
                  goto LABEL_480;
                }
                v387 = vmla_n_f32(v384, v386, *(float *)&v366 * v376);
                if (v368 < v646)
                {
                  *v368 = v387;
                  v383 = v368 + 1;
                  if (!v365)
                    goto LABEL_479;
LABEL_477:
                  v396 = (float)(*(float *)(v365 + 4 * v634) * v376) + (1.0 - v376) * v378;
                  if (v379 < v630)
                  {
                    *v379++ = v396;
                    goto LABEL_479;
                  }
                  v404 = (char *)((char *)v379 - (char *)v369);
                  v405 = v379 - v369;
                  v406 = v405 + 1;
                  if ((unint64_t)(v405 + 1) >> 62)
                    goto LABEL_793;
                  v407 = v369;
                  v408 = (char *)v630 - (char *)v369;
                  v409 = ((char *)v630 - (char *)v369) >> 1;
                  if (v409 > v406)
                    v406 = v409;
                  if (v408 >= 0x7FFFFFFFFFFFFFFCLL)
                    v410 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v410 = v406;
                  v639 = v366;
                  if (v410)
                  {
                    if (v410 >> 62)
                      goto LABEL_794;
                    v411 = operator new(4 * v410);
                    v381 = v621;
                    v366 = v639;
                  }
                  else
                  {
                    v411 = 0;
                  }
                  v428 = (float *)((char *)v411 + 4 * v405);
                  *v428 = v396;
                  v370 = v428 + 1;
                  v429 = v407;
                  if (v379 == v407)
                  {
                    v364 = v632;
                  }
                  else
                  {
                    v430 = (char *)(v379 - 1) - (char *)v407;
                    if (v430 < 0xBC)
                    {
                      v431 = v379;
                      v364 = v632;
                      goto LABEL_556;
                    }
                    if (&v404[(_QWORD)v411 - 4 - (v430 & 0xFFFFFFFFFFFFFFFCLL)] > &v404[(_QWORD)v411 - 4])
                    {
                      v431 = v379;
                      v429 = v407;
                      v364 = v632;
                      goto LABEL_556;
                    }
                    if ((float *)((char *)v379 - (v430 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v379 - 1
                      || (unint64_t)((char *)v379 - &v404[(_QWORD)v411]) < 0x20)
                    {
                      v431 = v379;
                      v429 = v407;
                      v364 = v632;
                      goto LABEL_556;
                    }
                    v441 = (v430 >> 2) + 1;
                    v431 = &v379[-(v441 & 0x7FFFFFFFFFFFFFF8)];
                    v442 = (char *)v411 + 4 * v405 - 16;
                    v443 = v379 - 4;
                    v444 = v441 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v445 = *(_OWORD *)v443;
                      *(v442 - 1) = *((_OWORD *)v443 - 1);
                      *v442 = v445;
                      v442 -= 2;
                      v443 -= 8;
                      v444 -= 8;
                    }
                    while (v444);
                    v428 -= v441 & 0x7FFFFFFFFFFFFFF8;
                    v429 = v407;
                    v364 = v632;
                    if (v441 != (v441 & 0x7FFFFFFFFFFFFFF8))
                    {
                      do
                      {
LABEL_556:
                        v446 = *((_DWORD *)v431-- - 1);
                        *((_DWORD *)v428-- - 1) = v446;
                      }
                      while (v431 != v429);
                    }
                  }
                  v630 = (float *)((char *)v411 + 4 * v410);
                  if (v429)
                  {
                    v447 = v370;
                    operator delete(v429);
                    v366 = v639;
                    v370 = v447;
                    v381 = v621;
                  }
                  v369 = v428;
                  v367 = v617;
                  v365 = v619;
                  v375 = v615;
                  if (v380 != v364)
                    goto LABEL_560;
LABEL_480:
                  v397 = vmla_n_f32((float32x2_t)v381[v380], v386, *(float *)&v366 * v377);
                  v638 = v370;
                  if (v383 < v646)
                  {
                    *v383 = v397;
                    v368 = v383 + 1;
                    if (v365)
                      goto LABEL_482;
LABEL_521:
                    v379 = v370;
                    goto LABEL_448;
                  }
                  v399 = v383 - v343;
                  v400 = v399 + 1;
                  if ((unint64_t)(v399 + 1) >> 61)
                    goto LABEL_793;
                  v401 = v369;
                  if (((char *)v646 - (char *)v343) >> 2 > v400)
                    v400 = ((char *)v646 - (char *)v343) >> 2;
                  if ((unint64_t)((char *)v646 - (char *)v343) >= 0x7FFFFFFFFFFFFFF8)
                    v402 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v402 = v400;
                  if (v402)
                  {
                    if (v402 >> 61)
                      goto LABEL_794;
                    v403 = operator new(8 * v402);
                    v381 = v621;
                    v370 = v638;
                  }
                  else
                  {
                    v403 = 0;
                  }
                  v419 = (float32x2_t *)&v403[8 * v399];
                  *v419 = v397;
                  __pd = v419 + 1;
                  if (v383 == v343)
                  {
                    v364 = v632;
                    goto LABEL_518;
                  }
                  v420 = (char *)&v383[-1] - (char *)v343;
                  if (v420 < 0x168)
                    goto LABEL_514;
                  if (&v403[(char *)v383 - (char *)v343 - 8 - (v420 & 0xFFFFFFFFFFFFFFF8)] > &v403[(char *)v383 - (char *)v343 - 8])
                  {
                    v421 = v383;
                    v364 = v632;
                    v370 = v638;
                  }
                  else
                  {
                    v370 = v638;
                    if ((float32x2_t *)((char *)&v383[-1] - (v420 & 0xFFFFFFFFFFFFFFF8)) > &v383[-1]
                      || (unint64_t)((char *)v343 - v403) < 0x20)
                    {
LABEL_514:
                      v421 = v383;
                      v364 = v632;
                    }
                    else
                    {
                      v423 = (v420 >> 3) + 1;
                      v421 = &v383[-(v423 & 0x3FFFFFFFFFFFFFFCLL)];
                      v424 = &v403[8 * v399 - 16];
                      v425 = v383 - 2;
                      v426 = v423 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v427 = *(_OWORD *)v425->f32;
                        *(v424 - 1) = *(_OWORD *)v425[-2].f32;
                        *v424 = v427;
                        v424 -= 2;
                        v425 -= 4;
                        v426 -= 4;
                      }
                      while (v426);
                      v419 -= v423 & 0x3FFFFFFFFFFFFFFCLL;
                      v364 = v632;
                      v370 = v638;
                      if (v423 == (v423 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_518:
                        v646 = (float32x2_t *)&v403[8 * v402];
                        if (v343)
                        {
                          operator delete(v343);
                          v370 = v638;
                          v381 = v621;
                        }
                        v343 = v419;
                        v369 = v401;
                        v368 = __pd;
                        v367 = v617;
                        v365 = v619;
                        v375 = v615;
                        if (!v619)
                          goto LABEL_521;
LABEL_482:
                        v398 = (float)(*(float *)(v365 + 4 * v364) * v377) + (1.0 - v377) * v378;
                        if (v370 < v630)
                        {
                          *v370 = v398;
                          v379 = v370 + 1;
                          goto LABEL_448;
                        }
                        v412 = (char *)((char *)v370 - (char *)v369);
                        v413 = v370 - v369;
                        v414 = v413 + 1;
                        if ((unint64_t)(v413 + 1) >> 62)
                          goto LABEL_793;
                        __pc = v369;
                        v415 = (char *)v630 - (char *)v369;
                        v416 = ((char *)v630 - (char *)v369) >> 1;
                        if (v416 > v414)
                          v414 = v416;
                        if (v415 >= 0x7FFFFFFFFFFFFFFCLL)
                          v417 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v417 = v414;
                        if (v417)
                        {
                          if (v417 >> 62)
                            goto LABEL_794;
                          v418 = operator new(4 * v417);
                          v381 = v621;
                          v370 = v638;
                        }
                        else
                        {
                          v418 = 0;
                        }
                        v432 = (float *)((char *)v418 + 4 * v413);
                        *v432 = v398;
                        v379 = v432 + 1;
                        v433 = __pc;
                        if (v370 == __pc)
                        {
                          v364 = v632;
                        }
                        else
                        {
                          v434 = (char *)(v370 - 1) - (char *)__pc;
                          if (v434 < 0xBC)
                          {
                            v435 = v370;
                            v364 = v632;
                            goto LABEL_625;
                          }
                          if (&v412[(_QWORD)v418 - 4 - (v434 & 0xFFFFFFFFFFFFFFFCLL)] > &v412[(_QWORD)v418 - 4])
                          {
                            v435 = v638;
                            goto LABEL_624;
                          }
                          if ((float *)((char *)v370 - (v434 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v370 - 1
                            || (unint64_t)((char *)v370 - &v412[(_QWORD)v418]) < 0x20)
                          {
                            v435 = v638;
LABEL_624:
                            v433 = __pc;
                            v364 = v632;
                            goto LABEL_625;
                          }
                          v479 = (v434 >> 2) + 1;
                          v435 = &v638[-(v479 & 0x7FFFFFFFFFFFFFF8)];
                          v480 = (char *)v418 + 4 * v413 - 16;
                          v481 = v638 - 4;
                          v482 = v479 & 0x7FFFFFFFFFFFFFF8;
                          do
                          {
                            v483 = *(_OWORD *)v481;
                            *(v480 - 1) = *((_OWORD *)v481 - 1);
                            *v480 = v483;
                            v480 -= 2;
                            v481 -= 8;
                            v482 -= 8;
                          }
                          while (v482);
                          v432 -= v479 & 0x7FFFFFFFFFFFFFF8;
                          v433 = __pc;
                          v364 = v632;
                          if (v479 != (v479 & 0x7FFFFFFFFFFFFFF8))
                          {
                            do
                            {
LABEL_625:
                              v478 = *((_DWORD *)v435-- - 1);
                              *((_DWORD *)v432-- - 1) = v478;
                            }
                            while (v435 != v433);
                          }
                        }
                        v630 = (float *)((char *)v418 + 4 * v417);
                        if (v433)
                        {
                          operator delete(v433);
                          v381 = v621;
                        }
                        v369 = v432;
                        v367 = v617;
                        v365 = v619;
                        v375 = v615;
                        goto LABEL_448;
                      }
                    }
                  }
                  do
                  {
                    v422 = v421[-1];
                    --v421;
                    v419[-1] = v422;
                    --v419;
                  }
                  while (v421 != v343);
                  goto LABEL_518;
                }
                __pb = v369;
                v388 = v368 - v343;
                v389 = v388 + 1;
                if ((unint64_t)(v388 + 1) >> 61)
                  goto LABEL_793;
                if (((char *)v646 - (char *)v343) >> 2 > v389)
                  v389 = ((char *)v646 - (char *)v343) >> 2;
                if ((unint64_t)((char *)v646 - (char *)v343) >= 0x7FFFFFFFFFFFFFF8)
                  v390 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v390 = v389;
                v637 = v366;
                if (v390)
                {
                  if (v390 >> 61)
                    goto LABEL_794;
                  v391 = operator new(8 * v390);
                  v381 = v621;
                  v366 = v637;
                }
                else
                {
                  v391 = 0;
                }
                v392 = (float32x2_t *)&v391[8 * v388];
                *v392 = v387;
                v383 = v392 + 1;
                if (v368 == v343)
                {
                  v364 = v632;
                }
                else
                {
                  v393 = (char *)&v368[-1] - (char *)v343;
                  if (v393 < 0x168)
                  {
                    v394 = v368;
                    v364 = v632;
                    goto LABEL_473;
                  }
                  if (&v391[(char *)v368 - (char *)v343 - 8 - (v393 & 0xFFFFFFFFFFFFFFF8)] > &v391[(char *)v368 - (char *)v343 - 8]
                    || (float32x2_t *)((char *)&v368[-1] - (v393 & 0xFFFFFFFFFFFFFFF8)) > &v368[-1]
                    || (unint64_t)((char *)v343 - v391) < 0x20)
                  {
                    v394 = v368;
                    v364 = v632;
                    goto LABEL_473;
                  }
                  v436 = (v393 >> 3) + 1;
                  v394 = &v368[-(v436 & 0x3FFFFFFFFFFFFFFCLL)];
                  v437 = &v391[8 * v388 - 16];
                  v438 = v368 - 2;
                  v439 = v436 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v440 = *(_OWORD *)v438->f32;
                    *(v437 - 1) = *(_OWORD *)v438[-2].f32;
                    *v437 = v440;
                    v437 -= 2;
                    v438 -= 4;
                    v439 -= 4;
                  }
                  while (v439);
                  v392 -= v436 & 0x3FFFFFFFFFFFFFFCLL;
                  v364 = v632;
                  if (v436 != (v436 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    do
                    {
LABEL_473:
                      v395 = v394[-1];
                      --v394;
                      v392[-1] = v395;
                      --v392;
                    }
                    while (v394 != v343);
                  }
                }
                v646 = (float32x2_t *)&v391[8 * v390];
                if (v343)
                {
                  operator delete(v343);
                  v366 = v637;
                  v381 = v621;
                }
                v343 = v392;
                v369 = __pb;
                v367 = v617;
                v365 = v619;
                v375 = v615;
                if (!v619)
                  goto LABEL_479;
                goto LABEL_477;
              }
            }
          }
          v343 = v348;
          v345 = v642;
        }
LABEL_422:
        v345 += 12;
        if (v345 == v309)
          goto LABEL_744;
      }
    }
    v344 = 0;
LABEL_744:
    v580 = 0;
    v581 = v613;
    if (*(_QWORD *)(v24 + 120) == *(_QWORD *)(v24 + 112))
      v581 = 0;
    *(_QWORD *)(v24 + 184) = v581;
    *(_DWORD *)(v24 + 192) = 0;
    *(_QWORD *)(v24 + 168) = *(_QWORD *)(v24 + 160);
    while (1)
    {
      v583 = v580;
      if (zilch::TrafficDynamicTile::incidentCount(**(zilch::TrafficDynamicTile ***)(v24 + 48)) <= (unint64_t)v580)
        break;
      v584 = zilch::TrafficDynamicTile::incident(**(zilch::TrafficDynamicTile ***)(v24 + 48));
      v586 = *(char **)(v24 + 168);
      v585 = *(_QWORD *)(v24 + 176);
      if ((unint64_t)v586 < v585)
      {
        *(_QWORD *)v586 = 0;
        v582 = v586 + 8;
      }
      else
      {
        v587 = *(char **)(v24 + 160);
        v588 = (v586 - v587) >> 3;
        v589 = v588 + 1;
        if ((unint64_t)(v588 + 1) >> 61)
          goto LABEL_793;
        v590 = v585 - (_QWORD)v587;
        if (v590 >> 2 > v589)
          v589 = v590 >> 2;
        if ((unint64_t)v590 >= 0x7FFFFFFFFFFFFFF8)
          v591 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v591 = v589;
        if (v591)
        {
          if (v591 >> 61)
            goto LABEL_794;
          v592 = operator new(8 * v591);
        }
        else
        {
          v592 = 0;
        }
        v593 = &v592[8 * v588];
        *v593 = 0;
        v582 = v593 + 1;
        if (v586 == v587)
        {
          v587 = v586;
        }
        else
        {
          v594 = v586 - 8 - v587;
          if (v594 < 0x58)
            goto LABEL_798;
          if ((unint64_t)(v587 - v592) < 0x20)
            goto LABEL_798;
          v595 = (v594 >> 3) + 1;
          v596 = &v592[8 * v588 - 16];
          v597 = v586 - 16;
          v598 = v595 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v599 = *(_OWORD *)v597;
            *(v596 - 1) = *((_OWORD *)v597 - 1);
            *v596 = v599;
            v596 -= 2;
            v597 -= 32;
            v598 -= 4;
          }
          while (v598);
          v593 -= v595 & 0x3FFFFFFFFFFFFFFCLL;
          v586 -= 8 * (v595 & 0x3FFFFFFFFFFFFFFCLL);
          if (v595 != (v595 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_798:
            do
            {
              v600 = *((_QWORD *)v586 - 1);
              v586 -= 8;
              *--v593 = v600;
            }
            while (v586 != v587);
            v587 = (char *)v648[20];
          }
        }
        v601 = &v592[8 * v591];
        v24 = (uint64_t)v648;
        v648[20] = v593;
        v648[21] = v582;
        v648[22] = v601;
        if (v587)
          operator delete(v587);
        v74 = v644;
      }
      *(_QWORD *)(v24 + 168) = v582;
      *(v582 - 1) = v584;
      v580 = v583 + 1;
    }
    if (v344)
      operator delete(v344);
    if (v343)
      operator delete(v343);
    if (v647)
      operator delete(v647);
    if (v74)
      operator delete(v74);
    if (v610)
    {
      v602 = (unint64_t *)&v610->__shared_owners_;
      do
        v603 = __ldaxr(v602);
      while (__stlxr(v603 - 1, v602));
      if (!v603)
      {
        ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
        std::__shared_weak_count::__release_weak(v610);
      }
    }
    v604 = (_QWORD *)operator new();
    *v604 = &off_1E42E8868;
    v604[1] = 0;
    v604[2] = 0;
    v604[3] = v24;
    v605 = (std::__shared_weak_count *)*((_QWORD *)v611 + 44);
    *((_QWORD *)v611 + 43) = v24;
    *((_QWORD *)v611 + 44) = v604;
    if (v605)
    {
      v606 = (unint64_t *)&v605->__shared_owners_;
      do
        v607 = __ldaxr(v606);
      while (__stlxr(v607 - 1, v606));
      if (!v607)
      {
        ((void (*)(std::__shared_weak_count *))v605->__on_zero_shared)(v605);
        std::__shared_weak_count::__release_weak(v605);
      }
    }
    pthread_mutex_lock(*((pthread_mutex_t **)v611 + 19));
    v608 = (*((_DWORD *)v611 + 40) & 2) == 0;
    pthread_mutex_unlock(*((pthread_mutex_t **)v611 + 19));
    *((_BYTE *)v611 + 225) = v608;
    pthread_mutex_lock(*((pthread_mutex_t **)v611 + 19));
    *((_DWORD *)v611 + 40) |= 1u;
    pthread_mutex_unlock(*((pthread_mutex_t **)v611 + 19));
  }
}

void sub_19FDD07A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t altitude::TrafficTileDataCacheJob::succeeded(altitude::TrafficTileDataCacheJob *this)
{
  return *((unsigned __int8 *)this + 225);
}

void std::__shared_ptr_pointer<altitude::TrafficTileData *,std::shared_ptr<altitude::TrafficTileData>::__shared_ptr_default_delete<altitude::TrafficTileData,altitude::TrafficTileData>,std::allocator<altitude::TrafficTileData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::TrafficTileData *,std::shared_ptr<altitude::TrafficTileData>::__shared_ptr_default_delete<altitude::TrafficTileData,altitude::TrafficTileData>,std::allocator<altitude::TrafficTileData>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 160);
    if (v2)
    {
      *(_QWORD *)(v1 + 168) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(v1 + 136);
    if (v3)
    {
      *(_QWORD *)(v1 + 144) = v3;
      operator delete(v3);
    }
    v4 = *(_QWORD *)(v1 + 112);
    if (v4)
    {
      v5 = *(_QWORD *)(v1 + 120);
      v6 = *(void **)(v1 + 112);
      if (v5 != v4)
      {
        do
        {
          v7 = *(void **)(v5 - 40);
          if (v7)
          {
            *(_QWORD *)(v5 - 32) = v7;
            operator delete(v7);
          }
          v8 = *(void **)(v5 - 64);
          if (v8)
          {
            *(_QWORD *)(v5 - 56) = v8;
            operator delete(v8);
          }
          v5 -= 80;
        }
        while (v5 != v4);
        v6 = *(void **)(v1 + 112);
      }
      *(_QWORD *)(v1 + 120) = v4;
      operator delete(v6);
    }
    v9 = *(std::__shared_weak_count **)(v1 + 104);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = *(std::__shared_weak_count **)(v1 + 88);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = *(std::__shared_weak_count **)(v1 + 72);
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = *(std::__shared_weak_count **)(v1 + 56);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = *(_QWORD *)(v1 + 24);
    if (v21)
    {
      v22 = *(_QWORD *)(v1 + 32);
      v23 = *(void **)(v1 + 24);
      if (v22 != v21)
      {
        do
        {
          v24 = *(std::__shared_weak_count **)(v22 - 8);
          if (v24)
            std::__shared_weak_count::__release_weak(v24);
          v22 -= 24;
        }
        while (v22 != v21);
        v23 = *(void **)(v1 + 24);
      }
      *(_QWORD *)(v1 + 32) = v21;
      operator delete(v23);
    }
    pthread_mutex_destroy(*(pthread_mutex_t **)(v1 + 16));
    v25 = *(_QWORD *)(v1 + 16);
    if (v25)
      MEMORY[0x1A1AF4E00](v25, 0x1000C40FA0F61DDLL);
    *(_QWORD *)(v1 + 16) = 0;
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficTileData>::~GenericCacheNode(karo::AsyncRequestManager *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;

  *(_QWORD *)a1 = off_1E42C46C8;
  pthread_mutex_destroy(*((pthread_mutex_t **)a1 + 17));
  v2 = *((_QWORD *)a1 + 17);
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40FA0F61DDLL);
  *((_QWORD *)a1 + 17) = 0;
  v3 = (_QWORD *)*((_QWORD *)a1 + 14);
  if (v3)
  {
    do
    {
      v5 = (_QWORD *)*v3;
      v6 = (std::__shared_weak_count *)v3[8];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      operator delete(v3);
      v3 = v5;
    }
    while (v5);
  }
  v4 = (void *)*((_QWORD *)a1 + 12);
  *((_QWORD *)a1 + 12) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)a1 = off_1E42C3060;
  while (*((_QWORD *)a1 + 10))
    (*(void (**)(karo::AsyncRequestManager *, uint64_t))(*(_QWORD *)a1 + 48))(a1, *((_QWORD *)a1 + 8) + 32);
  std::__tree<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::StampedTileKey>,std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::StampedTileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)a1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(a1);
}

uint64_t altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficTileData>::hasValidKey()
{
  return 1;
}

__n128 altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficTileData>::getCacheKeyForKey@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

void md::PolygonTileData::~PolygonTileData(md::PolygonTileData *this)
{
  md::PolygonTileData::~PolygonTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  md::CoastlineGroup *v8;
  md::CoastlineGroup *v9;
  void (***v10)(_QWORD);
  void (***v11)(_QWORD);
  void *v12;
  void (***v13)(_QWORD);
  void (***v14)(_QWORD);
  void (**v15)(_QWORD);
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  *(_QWORD *)this = &off_1E42909D0;
  *((_QWORD *)this + 79) = &unk_1E4290A18;
  v2 = (void *)*((_QWORD *)this + 102);
  if (v2)
  {
    do
    {
      v3 = *(void **)v2;
      *((_QWORD *)v2 + 3) = &off_1E42B4B50;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 97);
  if (v5)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 98);
    v7 = (void *)*((_QWORD *)this + 97);
    if (v6 != v5)
    {
      do
      {
        v9 = (md::CoastlineGroup *)*--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
        {
          md::CoastlineGroup::~CoastlineGroup(v8);
          MEMORY[0x1A1AF4E00]();
        }
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 97);
    }
    *((_QWORD *)this + 98) = v5;
    operator delete(v7);
  }
  v10 = (void (***)(_QWORD))*((_QWORD *)this + 94);
  if (v10)
  {
    v11 = (void (***)(_QWORD))*((_QWORD *)this + 95);
    v12 = (void *)*((_QWORD *)this + 94);
    if (v11 != v10)
    {
      v13 = v11 - 3;
      v14 = v11 - 3;
      do
      {
        v15 = *v14;
        v14 -= 3;
        (*v15)(v13);
        v16 = v13 == v10;
        v13 = v14;
      }
      while (!v16);
      v12 = (void *)*((_QWORD *)this + 94);
    }
    *((_QWORD *)this + 95) = v10;
    operator delete(v12);
  }
  *(_QWORD *)this = off_1E42968B0;
  *((_QWORD *)this + 79) = &unk_1E42968F8;
  v17 = *((_QWORD *)this + 90);
  if (v17)
  {
    v18 = *((_QWORD *)this + 91);
    v19 = (void *)*((_QWORD *)this + 90);
    if (v18 != v17)
    {
      do
      {
        v20 = *(std::__shared_weak_count **)(v18 - 8);
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v18 -= 16;
      }
      while (v18 != v17);
      v19 = (void *)*((_QWORD *)this + 90);
    }
    *((_QWORD *)this + 91) = v17;
    operator delete(v19);
  }
  md::MapTileData::~MapTileData(this);
}

uint64_t md::PolygonTileData::polygonGroups(md::PolygonTileData *this)
{
  return (uint64_t)this + 752;
}

_BYTE *`anonymous namespace'::intersectView(_BYTE *result, uint64_t a2, double *a3)
{
  uint64_t v3;
  uint64_t v4;
  float v6;
  float v7;
  float v8;
  float v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  unsigned __int16 *v55;
  float *v56;
  float v57;
  float v58;
  float v59;
  float *v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  float v92;
  float v93;
  _BYTE *v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  double v115;
  double v116;
  float v117;
  double v118;
  double v119;
  float v120;
  double v121;
  double v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  char v130;
  _QWORD *v131;
  _QWORD v132[2];

  v3 = *(_QWORD *)(a2 + 176);
  v4 = *(_QWORD *)(a2 + 184);
  if (v3 == v4)
    goto LABEL_34;
  v94 = result;
  v98 = 0.0;
  v99 = 0.0;
  v101 = 1.79769313e308;
  v95 = 0.0;
  v96 = 0.0;
  v100 = 0.0;
  v97 = 0.0;
  do
  {
    v6 = *(float *)(v3 + 72);
    v7 = *(float *)(v3 + 76);
    v9 = *(float *)(v3 + 80);
    v8 = *(float *)(v3 + 84);
    v10 = *(double *)(v3 + 56);
    v11 = *(double *)(v3 + 64);
    v12 = *(double *)(v3 + 48);
    v14 = *a3;
    v13 = a3[1];
    v15 = a3[2];
    v16 = a3[3];
    v17 = a3[4];
    v18 = a3[5];
    v19 = **(_QWORD **)(*(_QWORD *)v3 + 64);
    v21 = *(_QWORD *)(v19 + 40);
    v20 = *(_QWORD *)(v19 + 48);
    v22 = *(_QWORD *)(v19 + 8);
    if ((*(_BYTE *)(v19 + 16) & 2) == 0)
    {
      v23 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v23 != -1)
      {
        v132[0] = &v130;
        v131 = v132;
        v118 = v11;
        v121 = v13;
        v124 = v6;
        v127 = v9;
        v24 = v7;
        v115 = v14;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v131, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
        v14 = v115;
        v11 = v118;
        v13 = v121;
        v6 = v124;
        v9 = v127;
        v7 = v24;
      }
    }
    if (v20 - v21 == (v20 - v21) % v22)
      v25 = 0;
    else
      v25 = *(_QWORD *)(v19 + 72);
    v26 = *(_QWORD *)(*(_QWORD *)v3 + 96);
    v27 = *(_QWORD *)(v26 + 40);
    v28 = *(_QWORD *)(v26 + 48);
    v29 = *(_QWORD *)(v26 + 8);
    if ((*(_BYTE *)(v26 + 16) & 2) == 0)
    {
      v30 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v30 != -1)
      {
        v132[0] = &v130;
        v131 = v132;
        v119 = v11;
        v122 = v13;
        v125 = v6;
        v128 = v9;
        v31 = v7;
        v116 = v14;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v131, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
        v14 = v116;
        v11 = v119;
        v13 = v122;
        v6 = v125;
        v9 = v128;
        v7 = v31;
      }
    }
    if (v28 - v27 == (v28 - v27) % v29)
      v32 = 0;
    else
      v32 = *(_QWORD *)(v26 + 72);
    v33 = *(_QWORD *)(v3 + 32);
    v34 = *(_QWORD *)(v3 + 40);
    if (v33 < v34)
    {
      v35 = (float)-v6;
      v36 = (float)-v7;
      v37 = (float)-v9;
      v38 = -(v10 * v37 - v11 * v36) - (v10 * v37 - v11 * v36);
      v39 = -(v11 * v35 - v12 * v37) - (v11 * v35 - v12 * v37);
      v40 = -(v12 * v36 - v10 * v35) - (v12 * v36 - v10 * v35);
      v41 = -(v13 * v37 - v15 * v36) - (v13 * v37 - v15 * v36);
      v42 = -(v15 * v35 - v14 * v37) - (v15 * v35 - v14 * v37);
      v43 = -(v14 * v36 - v13 * v35) - (v14 * v36 - v13 * v35);
      v44 = v14 - v12 + v39 * v37 + v41 * v8 + v43 * v36 - (v38 * v8 + v40 * v36 + v42 * v37);
      v45 = v13 - v10 + v40 * v35 + v41 * v37 + v42 * v8 - (v38 * v37 + v39 * v8 + v43 * v35);
      v46 = v15 - v11 + v38 * v36 + v42 * v35 + v43 * v8 - (v39 * v35 + v40 * v8 + v41 * v36);
      *(float *)&v36 = v16;
      v47 = v17;
      *(float *)&v38 = v18;
      *(float *)&v39 = (float)-(float)((float)(v7 * *(float *)&v38) - (float)(v9 * v47))
                     - (float)((float)(v7 * *(float *)&v38) - (float)(v9 * v47));
      *(float *)&v40 = (float)-(float)((float)(v9 * *(float *)&v36) - (float)(v6 * *(float *)&v38))
                     - (float)((float)(v9 * *(float *)&v36) - (float)(v6 * *(float *)&v38));
      *(float *)&v41 = (float)-(float)((float)(v6 * v47) - (float)(v7 * *(float *)&v36))
                     - (float)((float)(v6 * v47) - (float)(v7 * *(float *)&v36));
      v48 = (float)((float)(*(float *)&v36 - (float)(*(float *)&v41 * v7)) + (float)(*(float *)&v39 * v8))
          + (float)(*(float *)&v40 * v9);
      v49 = (float)((float)(v47 + (float)(*(float *)&v41 * v6)) + (float)(*(float *)&v40 * v8))
          - (float)(*(float *)&v39 * v9);
      v50 = (float)((float)(*(float *)&v38 + (float)(*(float *)&v41 * v8)) + (float)(*(float *)&v39 * v7))
          - (float)(*(float *)&v40 * v6);
      v51 = v44;
      v52 = v45;
      v53 = v46;
      v111 = (float)((float)(v48 * v48) + (float)(v49 * v49)) + (float)(v50 * v50);
      v112 = v53;
      v103 = 0.0;
      v104 = 0.0;
      v54 = 3.4028e38;
      v102 = 0.0;
      v106 = 0.0;
      v107 = 0.0;
      v105 = 0.0;
      v114 = v51;
      v117 = v48;
      v113 = v52;
      do
      {
        v55 = (unsigned __int16 *)(v32 + 2 * v33);
        v56 = (float *)(v25 + 32 * v55[1]);
        v57 = *v56;
        v58 = v56[1];
        v59 = v56[2];
        v60 = (float *)(v25 + 32 * v55[2]);
        v61 = *v60;
        v62 = v60[1];
        v63 = v60[2];
        v64 = *v60 - v51;
        v65 = (float)((float)((float)-(float)((float)(v64 * v49) - (float)((float)(v62 - v52) * v48))
                            * (float)(v59 - v53))
                    + (float)((float)-(float)((float)((float)(v62 - v52) * v50) - (float)((float)(v63 - v53) * v49))
                            * (float)(v57 - v51)))
            + (float)((float)-(float)((float)((float)(v63 - v53) * v48) - (float)(v64 * v50)) * (float)(v58 - v52));
        if (v65 >= 0.0)
        {
          v66 = (float *)(v25 + 32 * *v55);
          v67 = v66[1];
          v68 = v66[2];
          v69 = *v66 - v51;
          v70 = (float)((float)(v64
                              * (float)-(float)((float)((float)(v67 - v52) * v50) - (float)((float)(v68 - v53) * v49)))
                      + (float)((float)(v62 - v52)
                              * (float)-(float)((float)((float)(v68 - v53) * v48) - (float)(v69 * v50))))
              + (float)((float)(v63 - v53) * (float)-(float)((float)(v69 * v49) - (float)((float)(v67 - v52) * v48)));
          if (v70 >= 0.0)
          {
            v71 = (float)((float)((float)-(float)((float)((float)(v57 - v51) * v49) - (float)((float)(v58 - v52) * v48))
                                * (float)(v68 - v53))
                        + (float)((float)-(float)((float)((float)(v58 - v52) * v50) - (float)((float)(v59 - v53) * v49))
                                * v69))
                + (float)((float)-(float)((float)((float)(v59 - v53) * v48) - (float)((float)(v57 - v51) * v50))
                        * (float)(v67 - v52));
            if (v71 >= 0.0)
            {
              v72 = (float)(v71 + v70) + v65;
              if (v72 > 0.0)
              {
                v73 = 1.0 / v72;
                v74 = v73 * v65;
                v75 = v73 * v71;
                v126 = (float)((float)(v74 * *v66) + (float)((float)(v73 * v70) * v57)) + (float)(v75 * v61);
                v123 = (float)((float)(v74 * v67) + (float)((float)(v73 * v70) * v58)) + (float)(v75 * v62);
                v120 = (float)((float)(v74 * v68) + (float)((float)(v73 * v70) * v59)) + (float)(v75 * v63);
                v129 = v54;
                v108 = *v66;
                v109 = v66[1];
                v110 = v66[2];
                v76 = acosf(fmaxf(fminf((float)((float)((float)((float)(v126 - v51) * v48) + (float)((float)(v123 - v52) * v49))+ (float)((float)(v120 - v53) * v50))/ sqrtf((float)((float)((float)((float)(v126 - v51) * (float)(v126 - v51))+ (float)((float)(v123 - v52) * (float)(v123 - v52)))+ (float)((float)(v120 - v53) * (float)(v120 - v53)))* v111), 1.0), -1.0));
                v54 = v129;
                v53 = v112;
                v52 = v113;
                v51 = v114;
                v48 = v117;
                if (v76 < 1.57079633
                  && (float)((float)((float)((float)(v114 - v126) * (float)(v114 - v126))
                                   + (float)((float)(v113 - v123) * (float)(v113 - v123)))
                           + (float)((float)(v112 - v120) * (float)(v112 - v120))) < v129)
                {
                  v78 = -(float)((float)((float)(v62 - v109) * (float)(v59 - v110))
                               - (float)((float)(v63 - v110) * (float)(v58 - v109)));
                  v79 = -(float)((float)((float)(v63 - v110) * (float)(v57 - v108))
                               - (float)((float)(v61 - v108) * (float)(v59 - v110)));
                  v80 = -(float)((float)((float)(v61 - v108) * (float)(v58 - v109))
                               - (float)((float)(v62 - v109) * (float)(v57 - v108)));
                  v81 = 1.0 / sqrtf((float)((float)(v80 * v80) + (float)(v78 * v78)) + (float)(v79 * v79));
                  v102 = v81 * v79;
                  v103 = v81 * v80;
                  v104 = v81 * v78;
                  v106 = v123;
                  v107 = v126;
                  v105 = v120;
                  v54 = (float)((float)((float)(v114 - v126) * (float)(v114 - v126))
                              + (float)((float)(v113 - v123) * (float)(v113 - v123)))
                      + (float)((float)(v112 - v120) * (float)(v112 - v120));
                }
              }
            }
          }
        }
        v33 += 3;
      }
      while (v33 < v34);
      if (v54 < 3.4028e38
        && v101 > (float)((float)((float)((float)(v51 - v107) * (float)(v51 - v107))
                                + (float)((float)(v52 - v106) * (float)(v52 - v106)))
                        + (float)((float)(v53 - v105) * (float)(v53 - v105))))
      {
        v82 = *(float *)(v3 + 72);
        v83 = *(float *)(v3 + 76);
        v84 = *(float *)(v3 + 80);
        v85 = *(float *)(v3 + 84);
        v86 = -(v84 * v106 - v83 * v105);
        v87 = -(v82 * v105 - v84 * v107);
        v88 = -(v83 * v107 - v82 * v106);
        v89 = v86 + v86;
        v90 = v87 + v87;
        v91 = v88 + v88;
        v99 = *(double *)(v3 + 56) + v106 - v91 * v82 + v89 * v84 + v90 * v85;
        v100 = *(double *)(v3 + 48) + v107 + v91 * v83 + v89 * v85 - v90 * v84;
        v97 = *(double *)(v3 + 64) + v105 + v91 * v85 + v90 * v82 - v89 * v83;
        *(float *)&v91 = (float)-(float)((float)(v84 * v102) - (float)(v83 * v103))
                       - (float)((float)(v84 * v102) - (float)(v83 * v103));
        v92 = (float)-(float)((float)(v82 * v103) - (float)(v84 * v104))
            - (float)((float)(v82 * v103) - (float)(v84 * v104));
        v93 = (float)-(float)((float)(v83 * v104) - (float)(v82 * v102))
            - (float)((float)(v83 * v104) - (float)(v82 * v102));
        v98 = (float)((float)((float)(v104 + (float)(v93 * v83)) + (float)(*(float *)&v91 * v85)) - (float)(v92 * v84));
        v95 = (float)((float)((float)(v103 + (float)(v93 * v85)) + (float)(v92 * v82)) - (float)(*(float *)&v91 * v83));
        v96 = (float)((float)((float)(v102 - (float)(v93 * v82)) + (float)(*(float *)&v91 * v84)) + (float)(v92 * v85));
        v101 = (float)((float)((float)((float)(v51 - v107) * (float)(v51 - v107))
                             + (float)((float)(v52 - v106) * (float)(v52 - v106)))
                     + (float)((float)(v53 - v105) * (float)(v53 - v105)));
      }
    }
    v3 += 88;
  }
  while (v3 != v4);
  result = v94;
  if (v101 >= 1.79769313e308)
  {
LABEL_34:
    *result = 0;
  }
  else
  {
    *v94 = 1;
    *((double *)v94 + 1) = v100;
    *((double *)v94 + 2) = v99;
    *((double *)v94 + 3) = v97;
    *((double *)v94 + 4) = v98;
    *((double *)v94 + 5) = v96;
    *((double *)v94 + 6) = v95;
  }
  return result;
}

void karo::RequestPruner::~RequestPruner(karo::RequestPruner *this)
{
  void *v2;

  *(_QWORD *)this = off_1E42C2BE8;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;

  *(_QWORD *)this = off_1E42C2BE8;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *karo::RequestPruner::update(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;

  v1 = this[5];
  if (this[6] != v1)
  {
    v2 = this;
    v3 = 0;
    do
    {
      this = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 8 * v3) + 24))(*(_QWORD *)(v1 + 8 * v3), *(unsigned int *)(v2[4] + 88));
      ++v3;
      v1 = v2[5];
    }
    while (v3 < (v2[6] - v1) >> 3);
  }
  return this;
}

void karo::RequestPruner::addRequestManager(karo::RequestPruner *this, karo::AsyncRequestManager *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v5 = (char *)*((_QWORD *)this + 6);
  v4 = *((_QWORD *)this + 7);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*((_QWORD *)this + 5);
    v9 = (v5 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = v14 + 1;
    if (v5 == v8)
    {
      v8 = v5;
    }
    else
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v8 - v13) < 0x20)
        goto LABEL_29;
      v17 = (v16 >> 3) + 1;
      v6 = &v5[-8 * (v17 & 0x3FFFFFFFFFFFFFFCLL)];
      v18 = &v13[8 * v9 - 16];
      v19 = v5 - 16;
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *(_OWORD *)v19;
        *(v18 - 1) = *((_OWORD *)v19 - 1);
        *v18 = v21;
        v18 -= 2;
        v19 -= 32;
        v20 -= 4;
      }
      while (v20);
      v14 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v22 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v14 = v22;
        }
        while (v6 != v8);
        v8 = (char *)*((_QWORD *)this + 5);
      }
    }
    *((_QWORD *)this + 5) = v14;
    *((_QWORD *)this + 6) = v7;
    *((_QWORD *)this + 7) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_QWORD *)v5 = a2;
    v7 = v5 + 8;
  }
  *((_QWORD *)this + 6) = v7;
  *((_QWORD *)a2 + 7) = this;
}

void md::mun::MuninLogic::~MuninLogic(md::mun::MuninLogic *this)
{
  md::mun::MuninLogic::~MuninLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  md::mun::MuninLogic *v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E42ABA00;
  v2 = *((_QWORD *)this + 20);
  if (v2)
  {
    v3 = *((_QWORD *)this + 21);
    v4 = (void *)*((_QWORD *)this + 20);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 20);
    }
    *((_QWORD *)this + 21) = v2;
    operator delete(v4);
  }
  v8 = (md::mun::MuninLogic *)*((_QWORD *)this + 18);
  if (v8 == (md::mun::MuninLogic *)((char *)this + 120))
  {
    v9 = 4;
    v8 = (md::mun::MuninLogic *)((char *)this + 120);
    goto LABEL_16;
  }
  if (v8)
  {
    v9 = 5;
LABEL_16:
    (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

uint64_t md::Logic<md::mun::MuninLogic,md::mun::MuninContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::mun::MuninContext]";
  v4[3] = 21;
  v4[4] = result;
  *v4 = &off_1E42B16A8;
  v4[1] = 0x8EA84A1BD3791AFALL;
  *a2 = v4;
  return result;
}

void sub_19FDD18AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::mun::MuninLogic,md::mun::MuninContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x8EA84A1BD3791AFALL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext,md::ElevationContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::mun::MuninLogic,md::mun::MuninContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x8EA84A1BD3791AFALL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext,md::ElevationContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::mun::MuninLogic,md::mun::MuninContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x8EA84A1BD3791AFALL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext,md::ElevationContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::mun::MuninLogic,md::mun::MuninContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x8EA84A1BD3791AFALL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext,md::ElevationContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::mun::MuninLogic,md::mun::MuninContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[4];

  if (*(_QWORD *)(a3 + 8) == 0x8EA84A1BD3791AFALL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext,md::ElevationContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::mun::MuninLogic,md::mun::MuninContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::mun::MuninLogic::runBeforeLayout(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t i;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __n128 *v29;
  unint64_t *v30;
  unint64_t v31;
  __n128 *v32;
  __n128 *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __n128 *v44;
  unint64_t *v45;
  unint64_t v46;
  __n128 *v47;
  __n128 *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  float64x2_t *v60;
  uint64_t v61;
  int32x2_t v62;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float32_t v73;
  float32x2_t v74;
  long double v75;
  long double v76;
  float64x2_t v77;
  float64x2_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  int v82;
  double v83;
  float v84;
  float v85;
  char v86;
  int v87;
  double v88;
  double v89;
  double v90;
  float64x2_t v91;
  unint64_t v92;
  unint64_t v93;
  float64x2_t v94;
  float64x2_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __n128 v100;
  _BYTE v101[24];
  _QWORD v102[3];
  _QWORD *v103;
  _QWORD v104[3];
  _QWORD *v105;
  _QWORD v106[3];
  _QWORD *v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v104[0] = &off_1E42D3EF8;
  v104[1] = a2;
  v105 = v104;
  v102[0] = &off_1E42D3F40;
  v102[1] = a2;
  v103 = v102;
  v107 = v106;
  v106[0] = &off_1E42D3F40;
  v106[1] = a2;
  _ZNSt3__110__function6__funcIZN2md3mun10MuninLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextENS2_16ElevationContextEEEENSA_IJEEEEE20ResolvedDependenciesERNS3_12MuninContextEE3__0NS_9allocatorISM_EEFvvEEclEv((uint64_t)v104);
  v6 = v103;
  if (v103 == v102)
  {
    v7 = 4;
    v6 = v102;
  }
  else
  {
    if (!v103)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v105;
  if (v105 == v104)
  {
    v9 = 4;
    v8 = v104;
  }
  else
  {
    if (!v105)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = **a3;
  v11 = *(unsigned __int16 **)(v10 + 112);
  v12 = *(unsigned __int16 **)(v10 + 120);
  if (v11 != v12)
  {
    v13 = *(unsigned __int16 *)(v10 + 282);
    while (*v11 != v13)
    {
      v11 += 56;
      if (v11 == v12)
      {
        v11 = v12;
        break;
      }
    }
  }
  v14 = a3[1];
  v15 = *((_QWORD *)v11 + 13);
  if (v15)
  {
    v16 = a3[2];
    v17 = *(_QWORD *)(a1 + 160);
    for (i = *(_QWORD *)(a1 + 168); i != v17; i -= 16)
    {
      v19 = *(std::__shared_weak_count **)(i - 8);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    *(_QWORD *)(a1 + 168) = v17;
    if (*(_BYTE *)v16)
    {
      gdc::LayerDataCollector::data((gdc::LayerDataCollector *)v101, *(unsigned __int16 **)(v15 + 24), *(unsigned __int16 **)(v15 + 32), 63);
      v22 = *(_OWORD *)v101;
      v23 = *(_QWORD *)&v101[16];
      while (1)
      {
        v24 = v22;
        if ((_QWORD)v22 == v23)
          goto LABEL_70;
        v25 = *(_QWORD *)(v22 + 112);
        v26 = *(std::__shared_weak_count **)(v22 + 120);
        v100.n128_u64[0] = v25;
        v100.n128_u64[1] = (unint64_t)v26;
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          v29 = *(__n128 **)(a1 + 168);
          if ((unint64_t)v29 >= *(_QWORD *)(a1 + 176))
          {
LABEL_38:
            v96 = *((_QWORD *)&v22 + 1);
            v92 = v100.n128_u64[0];
            v32 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(a1 + 160, v100);
            v26 = (std::__shared_weak_count *)v100.n128_u64[1];
            *((_QWORD *)&v22 + 1) = v96;
            goto LABEL_39;
          }
          v29->n128_u64[0] = v25;
          v29->n128_u64[1] = (unint64_t)v26;
          v30 = (unint64_t *)&v26->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
          v32 = v29 + 1;
        }
        else
        {
          v33 = *(__n128 **)(a1 + 168);
          if ((unint64_t)v33 >= *(_QWORD *)(a1 + 176))
            goto LABEL_38;
          v33->n128_u64[0] = v25;
          v33->n128_u64[1] = 0;
          v32 = v33 + 1;
        }
LABEL_39:
        *(_QWORD *)(a1 + 168) = v32;
        if (v26)
        {
          v34 = (unint64_t *)&v26->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            v97 = *((_QWORD *)&v22 + 1);
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
            *((_QWORD *)&v22 + 1) = v97;
          }
        }
        v36 = v24 + 144;
        if (v24 + 144 != *((_QWORD *)&v22 + 1))
        {
          while (!*(_QWORD *)(v36 + 112))
          {
            v36 += 144;
            if (v36 == *((_QWORD *)&v22 + 1))
            {
              v36 = *((_QWORD *)&v22 + 1);
              break;
            }
          }
        }
        *(_QWORD *)&v22 = v36;
      }
    }
    gdc::LayerDataCollector::data((gdc::LayerDataCollector *)v101, *(unsigned __int16 **)(v15 + 24), *(unsigned __int16 **)(v15 + 32), 40);
    v37 = *(_OWORD *)v101;
    v38 = *(_QWORD *)&v101[16];
    while (1)
    {
      v39 = v37;
      if ((_QWORD)v37 == v38)
        break;
      v40 = *(_QWORD *)(v37 + 112);
      v41 = *(std::__shared_weak_count **)(v37 + 120);
      v100.n128_u64[0] = v40;
      v100.n128_u64[1] = (unint64_t)v41;
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
        v44 = *(__n128 **)(a1 + 168);
        if ((unint64_t)v44 >= *(_QWORD *)(a1 + 176))
        {
LABEL_60:
          v98 = *((_QWORD *)&v37 + 1);
          v92 = v100.n128_u64[0];
          v47 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(a1 + 160, v100);
          v41 = (std::__shared_weak_count *)v100.n128_u64[1];
          *((_QWORD *)&v37 + 1) = v98;
          goto LABEL_61;
        }
        v44->n128_u64[0] = v40;
        v44->n128_u64[1] = (unint64_t)v41;
        v45 = (unint64_t *)&v41->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
        v47 = v44 + 1;
      }
      else
      {
        v48 = *(__n128 **)(a1 + 168);
        if ((unint64_t)v48 >= *(_QWORD *)(a1 + 176))
          goto LABEL_60;
        v48->n128_u64[0] = v40;
        v48->n128_u64[1] = 0;
        v47 = v48 + 1;
      }
LABEL_61:
      *(_QWORD *)(a1 + 168) = v47;
      if (v41)
      {
        v49 = (unint64_t *)&v41->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          v99 = *((_QWORD *)&v37 + 1);
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
          *((_QWORD *)&v37 + 1) = v99;
        }
      }
      v51 = v39 + 144;
      if (v39 + 144 != *((_QWORD *)&v37 + 1))
      {
        while (!*(_QWORD *)(v51 + 112))
        {
          v51 += 144;
          if (v51 == *((_QWORD *)&v37 + 1))
          {
            v51 = *((_QWORD *)&v37 + 1);
            break;
          }
        }
      }
      *(_QWORD *)&v37 = v51;
    }
  }
LABEL_70:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v92);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v53 = v52;
  if (!*(_BYTE *)(a1 + 184) || objc_msgSend(v52, "muninAvailabilityOverride") || (v59 = a2[11]) == 0)
  {
    v54 = objc_msgSend(v53, "muninAvailabilityOverride") == 2;
    goto LABEL_73;
  }
  v60 = *(float64x2_t **)(v59 + 16);
  md::LayoutContext::frameState((md::LayoutContext *)a2);
  v62 = (int32x2_t)0x3F0000003F000000;
  __asm { FMOV            V3.2D, #0.5 }
  if (!(_NF ^ _VF | _ZF) && *(double *)(v61 + 496) > 0.0)
  {
    v68.f64[1] = *(float64_t *)(v61 + 496);
    v68.f64[0] = *(float64_t *)(v61 + 504);
    v69 = vaddq_f64(v68, v68);
    *(float32x2_t *)&v68.f64[0] = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)(v61 + 560)), v69));
    v70 = vcvtq_f64_f32(vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)(v61 + 568)), v69)));
    v71 = vcvtq_f64_f32(*(float32x2_t *)&v68.f64[0]);
    *(_QWORD *)&v72.f64[0] = *(_OWORD *)&vaddq_f64(vsubq_f64(_Q3, v71), v70);
    v72.f64[1] = vsubq_f64(vaddq_f64(v71, _Q3), v70).f64[1];
    v62 = (int32x2_t)vcvt_f32_f64(v72);
  }
  v94 = _Q3;
  v73 = 1.0 - *(float *)v62.i32;
  v74.i32[0] = vdup_lane_s32(v62, 1).u32[0];
  v74.f32[1] = v73;
  md::MapDataAccess::groundCoordinateForScreenPoint((uint64_t)&v100, a2[11], (uint64_t)(v14 + 1), 0, vmulq_f64(v60[23], vcvtq_f64_f32(v74)));
  v93 = v100.n128_u64[1];
  v75 = tan(v100.n128_f64[0] * 0.5 + 0.785398163);
  v76 = log(v75);
  *(_QWORD *)&v77.f64[0] = v93;
  v77.f64[1] = v76;
  v78 = vmlaq_f64(v94, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v77);
  v79 = *(uint64_t **)(a1 + 160);
  v80 = *(uint64_t **)(a1 + 168);
  if (roundf(fmaxf(*((float *)v14 + 770) + *((float *)v14 + 768), 1.0)) >= 14.0)
  {
    if (v79 == v80)
      goto LABEL_110;
    v86 = 0;
    v87 = 0;
    v88 = v78.f64[1];
    v89 = 1.79769313e308;
    v95 = v78;
    do
    {
      md::MuninAvailabilityData::nearestAvailableRoadPoint((uint64_t)v101, *v79, v78.f64[0], v88);
      if (v101[0])
      {
        v91 = vsubq_f64(v95, *(float64x2_t *)&v101[8]);
        if (vaddvq_f64(vmulq_f64(v91, v91)) >= v89)
          v90 = 0.0;
        else
          v90 = 1.0;
        v78.f64[0] = v95.f64[0];
        if (v89 <= v90)
        {
          v90 = v89;
        }
        else
        {
          if (!v87)
            v86 = 1;
          v87 = 1;
        }
      }
      else
      {
        v90 = v89;
        v78.f64[0] = v95.f64[0];
      }
      v79 += 2;
      v89 = v90;
    }
    while (v79 != v80);
    v54 = v86 != 0;
LABEL_73:
    v55 = 2 * v54;
    goto LABEL_74;
  }
  if (v79 == v80)
  {
LABEL_110:
    v55 = 0;
    goto LABEL_74;
  }
  v55 = 1;
  while (1)
  {
    v81 = *v79;
    v82 = 1 << *(_BYTE *)(*v79 + 169);
    v83 = -1.0 / (double)v82;
    v84 = (v78.f64[0] + v83 * (double)*(int *)(*v79 + 176)) * (double)v82;
    if (*(float *)(*v79 + 744) <= v84 && *(float *)(v81 + 752) > v84)
    {
      v85 = (v78.f64[1] + v83 * (double)(v82 + ~*(_DWORD *)(v81 + 172))) * (double)v82;
      if (*(float *)(v81 + 748) <= v85 && *(float *)(v81 + 756) > v85)
        break;
    }
    v79 += 2;
    if (v79 == v80)
      goto LABEL_110;
  }
LABEL_74:
  if (v55 != *(_QWORD *)(a1 + 152))
  {
    *(_QWORD *)(a1 + 152) = v55;
    *(_QWORD *)v101 = v55;
    v56 = *(_QWORD *)(a1 + 144);
    if (!v56)
    {
LABEL_112:
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v56 + 48))(v56, v101);
  }

  if (!v107)
    goto LABEL_112;
  (*(void (**)(_QWORD *))(*v107 + 48))(v107);
  v57 = v107;
  if (v107 == v106)
  {
    v58 = 4;
    v57 = v106;
  }
  else
  {
    if (!v107)
      return;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
}

void sub_19FDD22A0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v2 - 152));
  _Unwind_Resume(a1);
}

void md::Logic<md::mun::MuninLogic,md::mun::MuninContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void _ZNSt3__110__function6__funcIZN2md3mun10MuninLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextENS2_16ElevationContextEEEENSA_IJEEEEE20ResolvedDependenciesERNS3_12MuninContextEE3__0NS_9allocatorISM_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "MuninLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md3mun10MuninLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextENS2_16ElevationContextEEEENSA_IJEEEEE20ResolvedDependenciesERNS3_12MuninContextEE3__1NS_9allocatorISM_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md3mun10MuninLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextENS2_16ElevationContextEEEENSA_IJEEEEE20ResolvedDependenciesERNS3_12MuninContextEE3__1NS_9allocatorISM_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3F40;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md3mun10MuninLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextENS2_16ElevationContextEEEENSA_IJEEEEE20ResolvedDependenciesERNS3_12MuninContextEE3__1NS_9allocatorISM_EEFvvEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3F40;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md3mun10MuninLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextENS2_16ElevationContextEEEENSA_IJEEEEE20ResolvedDependenciesERNS3_12MuninContextEE3__1NS_9allocatorISM_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "MuninLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md3mun10MuninLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextENS2_16ElevationContextEEEENSA_IJEEEEE20ResolvedDependenciesERNS3_12MuninContextEE3__0NS_9allocatorISM_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md3mun10MuninLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextENS2_16ElevationContextEEEENSA_IJEEEEE20ResolvedDependenciesERNS3_12MuninContextEE3__0NS_9allocatorISM_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3EF8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md3mun10MuninLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextENS2_16ElevationContextEEEENSA_IJEEEEE20ResolvedDependenciesERNS3_12MuninContextEE3__0NS_9allocatorISM_EEFvvEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3EF8;
  a2[1] = v2;
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext,md::ElevationContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_71;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x99BED48DEFBBD82BLL;
    if (a3 <= 0x99BED48DEFBBD82BLL)
      v4 = 0x99BED48DEFBBD82BLL % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(a2 + 8 * v4);
  if (!v7)
    goto LABEL_25;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_23;
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v9 = v8[1];
    if (v9 == 0x99BED48DEFBBD82BLL)
      break;
    if (v9 >= a3)
      v9 %= a3;
    if (v9 != v4)
      goto LABEL_25;
LABEL_12:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_25;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_12;
LABEL_23:
  v11 = v8[5];
  if (*(_QWORD *)(v11 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v6 = *(_QWORD *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v12 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v12 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v12 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v13 = *(_QWORD **)(a2 + 8 * v12);
  if (!v13)
    goto LABEL_48;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x1AF456233693CD46)
      {
        if (v14[2] == 0x1AF456233693CD46)
          goto LABEL_46;
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v15 = v14[1];
    if (v15 != 0x1AF456233693CD46)
    {
      if (v15 >= a3)
        v15 %= a3;
      if (v15 != v12)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v14[2] != 0x1AF456233693CD46)
    {
LABEL_35:
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v17 = v14[5];
  if (*(_QWORD *)(v17 + 8) == 0x1AF456233693CD46)
  {
    v5 = *(_QWORD *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v18 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL)
      v18 = 0x8BD499FBD96FBB9ELL % a3;
  }
  else
  {
    v18 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v19 = *(_QWORD **)(a2 + 8 * v18);
  if (!v19)
    goto LABEL_71;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v20[1];
      if (v22 == 0x8BD499FBD96FBB9ELL)
      {
        if (v20[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_69;
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_71;
    }
  }
  while (1)
  {
    v21 = v20[1];
    if (v21 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v21 >= a3)
      v21 %= a3;
    if (v21 != v18)
      goto LABEL_71;
LABEL_58:
    v20 = (_QWORD *)*v20;
    if (!v20)
      goto LABEL_71;
  }
  if (v20[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_58;
LABEL_69:
  v23 = v20[5];
  if (*(_QWORD *)(v23 + 8) != 0x8BD499FBD96FBB9ELL)
  {
LABEL_71:
    v24 = 0;
    goto LABEL_72;
  }
  v24 = *(_QWORD *)(v23 + 32);
LABEL_72:
  *result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::mun::MuninContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B16A8;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::mun::MuninContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B16A8;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::mun::MuninContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void ggl::BuildingShadow::MeshPipelineSetup::~MeshPipelineSetup(ggl::BuildingShadow::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::BuildingShadow::MeshPipelineSetup::constantDataIsEnabled(ggl::BuildingShadow::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::BuildingShadow::MeshPipelineSetup::textureIsEnabled(ggl::BuildingShadow::MeshPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void md::ARLabelLayer::~ARLabelLayer(md::ARLabelLayer *this)
{
  md::ARLabelLayer::~ARLabelLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  md::ARLabelLayer *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  md::ARLabelLayer *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;

  *(_QWORD *)this = &off_1E428C9F8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)*((_QWORD *)this + 18);
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)*((_QWORD *)this + 18);
    if (!v5)
      goto LABEL_7;
  }
  do
  {
    v6 = (_QWORD *)*v5;
    operator delete(v5);
    v5 = v6;
  }
  while (v6);
LABEL_7:
  v7 = (void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v7)
    operator delete(v7);
  if (*((_QWORD *)this + 15))
  {
    v8 = *((_QWORD *)this + 13);
    v9 = (md::ARLabelLayer *)*((_QWORD *)this + 14);
    v10 = *(_QWORD *)v9;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v10;
    *((_QWORD *)this + 15) = 0;
    if (v9 != (md::ARLabelLayer *)((char *)this + 104))
    {
      do
      {
        v18 = (md::ARLabelLayer *)*((_QWORD *)v9 + 1);
        v19 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        operator delete(v9);
        v9 = v18;
      }
      while (v18 != (md::ARLabelLayer *)((char *)this + 104));
    }
  }
  v11 = (_QWORD *)*((_QWORD *)this + 9);
  while (v11)
  {
    v14 = v11;
    v11 = (_QWORD *)*v11;
    v15 = (std::__shared_weak_count *)v14[3];
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 10) + 40))(*((_QWORD *)this + 10), v14, 32);
  }
  v12 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v12)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v12, 8 * *((_QWORD *)this + 7));
  *(_QWORD *)this = off_1E428C468;
  v13 = (void *)*((_QWORD *)this + 1);
  if (v13)
  {
    *((_QWORD *)this + 2) = v13;
    operator delete(v13);
  }
}

void md::ARLabelLayer::layout(md::ARLabelLayer *this, const md::LayoutContext *a2)
{
  std::__shared_weak_count *v2;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  uint64_t *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  char *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint8x8_t v71;
  unint64_t v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t **v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  float v85;
  float v86;
  _BOOL8 v87;
  unint64_t v88;
  unint64_t v89;
  size_t prime;
  unint64_t v91;
  uint8x8_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  md::LayoutContext *v110;
  _QWORD *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t *v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;

  v5 = (char *)this + 48;
  v113 = (char *)this + 48;
  if (*((_QWORD *)this + 11))
  {
    v6 = (_QWORD *)*((_QWORD *)this + 9);
    while (v6)
    {
      v12 = v6;
      v6 = (_QWORD *)*v6;
      v13 = (std::__shared_weak_count *)v12[3];
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 10) + 40))(*((_QWORD *)this + 10), v12, 32);
    }
    *((_QWORD *)this + 9) = 0;
    v7 = *((_QWORD *)this + 7);
    v5 = v113;
    if (v7)
    {
      for (i = 0; i != v7; ++i)
        *(_QWORD *)(*(_QWORD *)v113 + 8 * i) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  v9 = (_QWORD *)*((_QWORD *)a2 + 1);
  v10 = v9[1];
  if ((v10 & (v10 - 1)) != 0)
  {
    v16 = 0x29BDA47DB65B52C8;
    if (v10 <= 0x29BDA47DB65B52C8)
      v16 = 0x29BDA47DB65B52C8 % v10;
    v11 = *(_QWORD **)(*v9 + 8 * v16);
    do
    {
      do
        v11 = (_QWORD *)*v11;
      while (v11[1] != 0x29BDA47DB65B52C8);
    }
    while (v11[2] != 0x29BDA47DB65B52C8);
  }
  else
  {
    v11 = *(_QWORD **)(*v9 + 8 * ((v10 - 1) & 0x29BDA47DB65B52C8));
    do
    {
      do
        v11 = (_QWORD *)*v11;
      while (v11[1] != 0x29BDA47DB65B52C8);
    }
    while (v11[2] != 0x29BDA47DB65B52C8);
  }
  v17 = **(_QWORD **)(v11[5] + 32);
  v18 = *(_QWORD *)(v17 + 112);
  v19 = *(_QWORD *)(v17 + 120);
  v110 = a2;
  if (v18 != v19)
  {
    while (*(_WORD *)v18)
    {
      v18 += 112;
      if (v18 == v19)
      {
        v18 = v19;
        break;
      }
    }
  }
  v20 = *(uint64_t **)(v18 + 80);
  if (v20)
  {
    v21 = (char *)this + 104;
    v114 = (char *)this + 104;
    v115 = (uint64_t *)((char *)this + 128);
    v111 = (_QWORD *)((char *)this + 144);
    while (1)
    {
      v22 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v115, (unsigned __int8 *)v20 + 16);
      if (!v22)
      {
LABEL_49:
        std::allocate_shared[abi:nn180100]<md::StandardLabelMapTile,std::allocator<md::StandardLabelMapTile>,geo::QuadTile const&,void>((md::LabelMapTile **)&v117, (const QuadTile *)(v20 + 2));
        v41 = v117;
        v117 = 0uLL;
        v116 = v41;
        v42 = *((unsigned __int8 *)v20 + 17);
        v43 = *((_DWORD *)v20 + 5);
        v44 = *((_DWORD *)v20 + 6);
        v45 = *((unsigned __int8 *)v20 + 16);
        v46 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
        if (*((_QWORD *)&v41 + 1))
        {
          v47 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
          DWORD2(v117) = v44;
          v118 = v41;
          do
            v49 = __ldxr(v47);
          while (__stxr(v49 + 1, v47));
        }
        else
        {
          DWORD2(v117) = *((_DWORD *)v20 + 6);
          v118 = (unint64_t)v41;
        }
        LOBYTE(v117) = v45;
        BYTE1(v117) = v42;
        DWORD1(v117) = v43;
        v119 = 0;
        v50 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v115, (unsigned __int8 *)&v117);
        if (!v50)
        {
          v61 = (char *)operator new(0x40uLL);
          v62 = v61;
          v61[16] = v45;
          v61[17] = v42;
          v63 = *(_QWORD *)((char *)&v117 + 4);
          v112 = *(_QWORD *)((char *)&v117 + 4);
          *(_QWORD *)(v61 + 20) = *(_QWORD *)((char *)&v117 + 4);
          *(_OWORD *)(v61 + 40) = v116;
          if (*((_QWORD *)&v116 + 1))
          {
            v64 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
            do
              v65 = __ldxr(v64);
            while (__stxr(v65 + 1, v64));
          }
          *((_QWORD *)v61 + 7) = 0;
          v66 = *((_QWORD *)this + 13);
          *(_QWORD *)(v66 + 8) = v61;
          *((_QWORD *)this + 13) = v61;
          *(_QWORD *)v61 = v66;
          *((_QWORD *)v61 + 1) = v114;
          ++*((_QWORD *)this + 15);
          if (*((char **)this + 21) == v114)
            *((_QWORD *)this + 21) = v61;
          v67 = (v42
               - 0x61C8864680B583EBLL
               + ((v45 - 0x61C8864680B583EBLL) << 6)
               + ((unint64_t)(v45 - 0x61C8864680B583EBLL) >> 2)) ^ (v45 - 0x61C8864680B583EBLL);
          v68 = ((int)v63 - 0x61C8864680B583EBLL + (v67 << 6) + (v67 >> 2)) ^ v67;
          v69 = (SHIDWORD(v63) - 0x61C8864680B583EBLL + (v68 << 6) + (v68 >> 2)) ^ v68;
          v70 = *((_QWORD *)this + 17);
          if (v70)
          {
            v71 = (uint8x8_t)vcnt_s8((int8x8_t)v70);
            v71.i16[0] = vaddlv_u8(v71);
            if (v71.u32[0] > 1uLL)
            {
              v2 = (std::__shared_weak_count *)v69;
              if (v69 >= v70)
                v2 = (std::__shared_weak_count *)(v69 % v70);
            }
            else
            {
              v2 = (std::__shared_weak_count *)(v69 & (v70 - 1));
            }
            v80 = *(uint64_t ***)(*v115 + 8 * (_QWORD)v2);
            if (v80)
            {
              v81 = *v80;
              if (v81)
              {
                if (v71.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v83 = v81[1];
                    if (v83 == v69)
                    {
                      if (*((unsigned __int8 *)v81 + 16) == (_DWORD)v45
                        && *((unsigned __int8 *)v81 + 17) == (_DWORD)v42
                        && *(uint64_t *)((char *)v81 + 20) == v112)
                      {
                        goto LABEL_102;
                      }
                    }
                    else if ((std::__shared_weak_count *)(v83 & (v70 - 1)) != v2)
                    {
                      goto LABEL_103;
                    }
                    v81 = (uint64_t *)*v81;
                    if (!v81)
                      goto LABEL_103;
                  }
                }
                do
                {
                  v82 = v81[1];
                  if (v82 == v69)
                  {
                    if (*((unsigned __int8 *)v81 + 16) == (_DWORD)v45
                      && *((unsigned __int8 *)v81 + 17) == (_DWORD)v42
                      && *(uint64_t *)((char *)v81 + 20) == v112)
                    {
LABEL_102:
                      v5 = v113;
                      v21 = (char *)this + 104;
                      goto LABEL_142;
                    }
                  }
                  else
                  {
                    if (v82 >= v70)
                      v82 %= v70;
                    if ((std::__shared_weak_count *)v82 != v2)
                      break;
                  }
                  v81 = (uint64_t *)*v81;
                }
                while (v81);
              }
            }
          }
LABEL_103:
          v84 = operator new(0x30uLL);
          *v84 = 0;
          v84[1] = v69;
          *((_BYTE *)v84 + 16) = v45;
          *((_BYTE *)v84 + 17) = v42;
          *(_QWORD *)((char *)v84 + 20) = v112;
          v84[5] = v62;
          v85 = (float)(unint64_t)(*((_QWORD *)this + 19) + 1);
          v86 = *((float *)this + 40);
          if (v70 && (float)(v86 * (float)v70) >= v85)
          {
            v21 = (char *)this + 104;
          }
          else
          {
            v87 = (v70 & (v70 - 1)) != 0;
            if (v70 < 3)
              v87 = 1;
            v88 = v87 | (2 * v70);
            v89 = vcvtps_u32_f32(v85 / v86);
            if (v88 <= v89)
              prime = v89;
            else
              prime = v88;
            v21 = (char *)this + 104;
            if (prime == 1)
            {
              prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
              v70 = *((_QWORD *)this + 17);
            }
            if (prime > v70)
              goto LABEL_116;
            if (prime < v70)
            {
              v91 = vcvtps_u32_f32((float)*((unint64_t *)this + 19) / *((float *)this + 40));
              if (v70 < 3 || (v92 = (uint8x8_t)vcnt_s8((int8x8_t)v70), v92.i16[0] = vaddlv_u8(v92), v92.u32[0] > 1uLL))
              {
                v91 = std::__next_prime(v91);
              }
              else
              {
                v93 = 1 << -(char)__clz(v91 - 1);
                if (v91 >= 2)
                  v91 = v93;
              }
              if (prime <= v91)
                prime = v91;
              if (prime < v70)
LABEL_116:
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v115, prime);
            }
            v70 = *((_QWORD *)this + 17);
            if ((v70 & (v70 - 1)) != 0)
            {
              if (v69 >= v70)
                v2 = (std::__shared_weak_count *)(v69 % v70);
              else
                v2 = (std::__shared_weak_count *)v69;
            }
            else
            {
              v2 = (std::__shared_weak_count *)((v70 - 1) & v69);
            }
          }
          v94 = *v115;
          v95 = *(_QWORD **)(*v115 + 8 * (_QWORD)v2);
          v5 = v113;
          if (v95)
          {
            *v84 = *v95;
            goto LABEL_140;
          }
          *v84 = *v111;
          *v111 = v84;
          *(_QWORD *)(v94 + 8 * (_QWORD)v2) = v111;
          if (*v84)
          {
            v96 = *(_QWORD *)(*v84 + 8);
            if ((v70 & (v70 - 1)) != 0)
            {
              if (v96 >= v70)
                v96 %= v70;
            }
            else
            {
              v96 &= v70 - 1;
            }
            v95 = (_QWORD *)(*v115 + 8 * v96);
LABEL_140:
            *v95 = v84;
          }
          ++*((_QWORD *)this + 19);
          goto LABEL_142;
        }
        v51 = v50;
        v52 = (char *)v50[5];
        v53 = (char *)operator new(0x40uLL);
        v54 = v53;
        v53[16] = v45;
        v53[17] = v42;
        *(_QWORD *)(v53 + 20) = *(_QWORD *)((char *)&v117 + 4);
        *(_OWORD *)(v53 + 40) = v116;
        if (*((_QWORD *)&v116 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        *((_QWORD *)v53 + 7) = 0;
        v57 = *((_QWORD *)this + 13);
        *(_QWORD *)(v57 + 8) = v53;
        *((_QWORD *)this + 13) = v53;
        v5 = v113;
        v21 = (char *)this + 104;
        *(_QWORD *)v53 = v57;
        *((_QWORD *)v53 + 1) = v114;
        v58 = *((_QWORD *)this + 15);
        *((_QWORD *)this + 15) = v58 + 1;
        v59 = (char *)*((_QWORD *)this + 21);
        if (v59 == v52)
        {
          v60 = (char *)*((_QWORD *)v52 + 1);
          goto LABEL_72;
        }
        v60 = v53;
        if (v59 == v114)
LABEL_72:
          *((_QWORD *)this + 21) = v60;
        v72 = *((_QWORD *)v52 + 7);
        v73 = *((_QWORD *)this + 22);
        v74 = v73 >= v72;
        v75 = v73 - v72;
        if (!v74)
          v75 = 0;
        *((_QWORD *)this + 22) = v75;
        v76 = *(_QWORD *)v52;
        *(_QWORD *)(v76 + 8) = *((_QWORD *)v52 + 1);
        **((_QWORD **)v52 + 1) = v76;
        *((_QWORD *)this + 15) = v58;
        v77 = (std::__shared_weak_count *)*((_QWORD *)v52 + 6);
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        operator delete(v52);
        v51[5] = (uint64_t)v54;
        v46 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
        if (!v46)
          goto LABEL_146;
LABEL_142:
        v97 = (unint64_t *)&v46->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
          v99 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
          if (*((_QWORD *)&v116 + 1))
          {
LABEL_147:
            v100 = (unint64_t *)&v99->__shared_owners_;
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
              std::__shared_weak_count::__release_weak(v99);
            }
          }
        }
        else
        {
LABEL_146:
          v99 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
          if (*((_QWORD *)&v116 + 1))
            goto LABEL_147;
        }
        v38 = *((_QWORD *)&v116 + 1);
        v37 = v116;
        goto LABEL_152;
      }
      v23 = v22;
      v24 = (char *)v22[5];
      v25 = (char *)operator new(0x40uLL);
      v26 = v25;
      *((_WORD *)v25 + 8) = *((_WORD *)v24 + 8);
      *(_QWORD *)(v25 + 20) = *(_QWORD *)(v24 + 20);
      *((_QWORD *)v25 + 5) = *((_QWORD *)v24 + 5);
      v27 = *((_QWORD *)v24 + 6);
      *((_QWORD *)v25 + 6) = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      *((_QWORD *)v25 + 7) = *((_QWORD *)v24 + 7);
      v30 = *((_QWORD *)this + 13);
      *(_QWORD *)(v30 + 8) = v25;
      *((_QWORD *)this + 13) = v25;
      *(_QWORD *)v25 = v30;
      *((_QWORD *)v25 + 1) = v21;
      v31 = *((_QWORD *)this + 15);
      v32 = (char *)*((_QWORD *)this + 21);
      if (v32 == v24)
        break;
      v33 = v25;
      if (v32 == v21)
        goto LABEL_38;
LABEL_39:
      v34 = *(_QWORD *)v24;
      *(_QWORD *)(v34 + 8) = *((_QWORD *)v24 + 1);
      **((_QWORD **)v24 + 1) = v34;
      *((_QWORD *)this + 15) = v31;
      v2 = (std::__shared_weak_count *)*((_QWORD *)v24 + 6);
      if (v2)
      {
        v35 = (unint64_t *)&v2->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
          std::__shared_weak_count::__release_weak(v2);
        }
      }
      operator delete(v24);
      v23[5] = (uint64_t)v26;
      if (v21 == v26)
        goto LABEL_49;
      v37 = *((_QWORD *)v26 + 5);
      v38 = *((_QWORD *)v26 + 6);
      if (v38)
      {
        v39 = (unint64_t *)(v38 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      *((_QWORD *)&v116 + 1) = v38;
LABEL_152:
      *(_QWORD *)&v117 = v37;
      *((_QWORD *)&v117 + 1) = v38;
      if (v38)
      {
        v102 = (unint64_t *)(v38 + 8);
        do
          v103 = __ldxr(v102);
        while (__stxr(v103 + 1, v102));
      }
      std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<md::LabelMapTile>,std::shared_ptr<md::LabelMapTile>>((unint64_t)v5, v37, (uint64_t)&v117);
      v104 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
      if (!*((_QWORD *)&v117 + 1))
        goto LABEL_159;
      v105 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
        v107 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
        if (*((_QWORD *)&v116 + 1))
        {
LABEL_160:
          v108 = (unint64_t *)&v107->__shared_owners_;
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
      }
      else
      {
LABEL_159:
        v107 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
        if (*((_QWORD *)&v116 + 1))
          goto LABEL_160;
      }
      v20 = (uint64_t *)*v20;
      if (!v20)
        goto LABEL_168;
    }
    v33 = (char *)*((_QWORD *)v24 + 1);
LABEL_38:
    *((_QWORD *)this + 21) = v33;
    goto LABEL_39;
  }
LABEL_168:
  md::LabelManager::layout(*((_QWORD *)this + 23), v110, (uint64_t)v5);
}

