BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 == *a1)
        return result;
      v8 = *(_QWORD *)(v6 + 24);
      if (v8 && v8 == *(_QWORD *)(v7 + 24))
      {
        if (*(_DWORD *)(v6 + 32) >= *(_DWORD *)(v7 + 32))
          return result;
      }
      else
      {
        v9 = *(_BYTE *)(v6 + 538) & 0xFD;
        if ((v9 == 1) != ((*(_BYTE *)(v7 + 538) & 0xFD) == 1))
        {
          if (v9 != 1)
            return result;
        }
        else if (*(float *)(v6 + 488) > *(float *)(v7 + 488))
        {
          return result;
        }
      }
      *a1 = v6;
      *(a2 - 1) = v7;
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(a1, a1 + 1, a1 + 2);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (2)
  {
    v15 = *v11;
    v16 = *v10;
    if (*v11 == *v10)
      goto LABEL_12;
    v17 = *(_QWORD *)(v15 + 24);
    if (v17 && v17 == *(_QWORD *)(v16 + 24))
    {
      if (*(_DWORD *)(v15 + 32) >= *(_DWORD *)(v16 + 32))
        goto LABEL_12;
    }
    else
    {
      v18 = *(_BYTE *)(v15 + 538) & 0xFD;
      if ((v18 == 1) != ((*(_BYTE *)(v16 + 538) & 0xFD) == 1))
      {
        if (v18 != 1)
          goto LABEL_12;
      }
      else if (*(float *)(v15 + 488) > *(float *)(v16 + 488))
      {
        goto LABEL_12;
      }
    }
    *v11 = v16;
    v14 = a1;
    if (v10 == a1)
      goto LABEL_11;
    v19 = v12;
    while (1)
    {
      v20 = *(uint64_t *)((char *)a1 + v19 + 8);
      if (v15 == v20)
      {
LABEL_10:
        v14 = v10;
        goto LABEL_11;
      }
      v21 = *(_QWORD *)(v15 + 24);
      if (v21 && v21 == *(_QWORD *)(v20 + 24))
      {
        if (*(_DWORD *)(v15 + 32) >= *(_DWORD *)(v20 + 32))
          goto LABEL_10;
        goto LABEL_25;
      }
      v22 = *(_BYTE *)(v15 + 538) & 0xFD;
      if ((v22 == 1) == ((*(_BYTE *)(v20 + 538) & 0xFD) == 1))
      {
        if (*(float *)(v15 + 488) > *(float *)(v20 + 488))
          goto LABEL_10;
        goto LABEL_25;
      }
      if (v22 != 1)
        break;
LABEL_25:
      --v10;
      *(uint64_t *)((char *)a1 + v19 + 16) = v20;
      v19 -= 8;
      if (v19 == -16)
      {
        v14 = a1;
        goto LABEL_11;
      }
    }
    v14 = (uint64_t *)((char *)a1 + v19 + 16);
LABEL_11:
    *v14 = v15;
    if (++v13 == 8)
      return v11 + 1 == a2;
LABEL_12:
    v10 = v11;
    v12 += 8;
    if (++v11 != a2)
      continue;
    return 1;
  }
}

uint64_t geo::optional<md::RoadSearchResult>::~optional(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)a1)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void md::mun::MuninMetadata::nearestPointInMetadatas<std::vector<std::shared_ptr<md::mun::MuninMetadata>>>(_BYTE *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, double a5)
{
  uint64_t *v8;
  double v9;
  uint64_t v15;
  long double v16;
  long double v17;
  long double v18;
  double v19;
  double v20;
  __double2 v21;
  long double v22;
  long double v23;
  long double v24;
  float64x2_t v25;
  float64x2_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  double v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  double **v45;
  double *v46;
  double *v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  double **v53;
  unint64_t v54;
  double *v55;
  double *v56;
  double v57;
  unsigned __int16 *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  double **v64;
  unint64_t v65;
  double *v66;
  double *v67;
  double v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  float64x2_t v76;
  float64x2_t v77;
  _QWORD *v78;
  _QWORD *v79;
  void *v80;
  float64x2_t v82;
  float64x2_t v83;
  long double v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  _BYTE *v93;
  _BYTE *v94;
  _BYTE *v95;
  uint64_t v96;
  _BYTE v97[1513];
  _QWORD v98[2];
  _BYTE v99[16];
  double v100;
  float64x2_t v101;
  void *v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  if (a2 != a3)
  {
    v8 = a2;
    v9 = 1.79769313e308;
    __asm { FMOV            V0.2D, #0.5 }
    v82 = _Q0;
    v83 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
    do
    {
      v15 = *v8;
      v16 = *(double *)a4;
      v17 = *(double *)(a4 + 8);
      v18 = *(double *)(a4 + 16);
      v19 = sqrt(v16 * v16 + v17 * v17);
      v20 = atan2(v18, v19 * 0.996647189);
      v84 = atan2(v17, v16);
      v21 = __sincos_stret(v20);
      v22 = atan2(v18 + v21.__sinval * v21.__sinval * 42841.3115 * v21.__sinval, v19 + v21.__cosval * v21.__cosval * -42697.6727 * v21.__cosval);
      v23 = tan(v22 * 0.5 + 0.785398163);
      v24 = log(v23);
      v25.f64[0] = v84;
      v25.f64[1] = v24;
      v26 = vmlaq_f64(v82, v83, v25);
      v27 = md::mun::MuninMetadata::_searchBounds(v15, v26.f64[0], v26.f64[1], a5);
      v29 = HIDWORD(v27);
      v30 = HIDWORD(v28);
      v31 = SHIDWORD(v27) <= SHIDWORD(v28) && (int)v27 <= (int)v28;
      if (v31)
      {
        v33 = 0;
        v34 = v15 + 344;
        v35 = (int)v27;
        v36 = v28 + 1;
        v37 = 1.79769313e308;
        do
        {
          v38 = 10 * (int)v29;
          v39 = v35;
          v40 = v35;
          if ((_DWORD)v29 == 9)
          {
            do
            {
              v41 = *(unsigned __int16 *)(v34 + 2 * (v38 + v40));
              if (v40 == 9)
              {
                v42 = *(_QWORD *)(v15 + 320);
                v43 = (*(_QWORD *)(v15 + 328) - v42) >> 3;
                v31 = v43 > v41;
                v44 = v43 - v41;
                if (v31)
                {
                  v45 = (double **)(v42 + 8 * v41);
                  do
                  {
                    v47 = *v45++;
                    v46 = v47;
                    v48 = (v47[1] - v16) * (v47[1] - v16)
                        + (v47[2] - v17) * (v47[2] - v17)
                        + (v47[3] - v18) * (v47[3] - v18);
                    if (v48 <= a5 && v48 < v37)
                    {
                      v37 = v48;
                      v33 = v46;
                    }
                    --v44;
                  }
                  while (v44);
                }
              }
              else
              {
                v49 = *(unsigned __int16 *)(v34 + 2 * (v38 + v40) + 2);
                if (v41 < v49)
                {
                  v50 = *(_QWORD *)(v15 + 320);
                  v51 = (*(_QWORD *)(v15 + 328) - v50) >> 3;
                  v52 = v49 - v41;
                  v53 = (double **)(v50 + 8 * v41);
                  _CF = v51 >= v41;
                  v54 = v51 - v41;
                  if (!_CF)
                    v54 = 0;
                  do
                  {
                    if (!v54)
                      break;
                    v56 = *v53++;
                    v55 = v56;
                    v57 = (v56[1] - v16) * (v56[1] - v16)
                        + (v56[2] - v17) * (v56[2] - v17)
                        + (v56[3] - v18) * (v56[3] - v18);
                    if (v57 <= a5 && v57 < v37)
                    {
                      v37 = v57;
                      v33 = v55;
                    }
                    --v54;
                    --v52;
                  }
                  while (v52);
                }
              }
              ++v40;
            }
            while (v36 != (_DWORD)v40);
          }
          else
          {
            do
            {
              v58 = (unsigned __int16 *)(v34 + 2 * (v38 + v39));
              v59 = *v58;
              v60 = v58[1];
              if (v59 < v60)
              {
                v61 = *(_QWORD *)(v15 + 320);
                v62 = (*(_QWORD *)(v15 + 328) - v61) >> 3;
                v63 = v60 - v59;
                v64 = (double **)(v61 + 8 * v59);
                _CF = v62 >= v59;
                v65 = v62 - v59;
                if (!_CF)
                  v65 = 0;
                do
                {
                  if (!v65)
                    break;
                  v67 = *v64++;
                  v66 = v67;
                  v68 = (v67[1] - v16) * (v67[1] - v16)
                      + (v67[2] - v17) * (v67[2] - v17)
                      + (v67[3] - v18) * (v67[3] - v18);
                  if (v68 <= a5 && v68 < v37)
                  {
                    v37 = v68;
                    v33 = v66;
                  }
                  --v65;
                  --v63;
                }
                while (v63);
              }
              ++v39;
            }
            while (v36 != (_DWORD)v39);
          }
          LODWORD(v29) = v29 + 1;
        }
        while ((int)v29 <= (int)v30);
        if (v33)
        {
          v85 = *(_QWORD *)v33;
          v69 = *(_OWORD *)(v33 + 1);
          v70 = *((_QWORD *)v33 + 4);
          v87 = *((_QWORD *)v33 + 3);
          v86 = v69;
          v89 = *((_DWORD *)v33 + 10);
          v88 = v70;
          v90 = *(_QWORD *)((char *)v33 + 44);
          v71 = *(_OWORD *)(v33 + 9);
          v91 = *(_OWORD *)(v33 + 7);
          v92 = v71;
          v93 = v97;
          v94 = v97;
          v95 = v97;
          v96 = 6;
          geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)&v93, *((__int128 **)v33 + 11), *((__int128 **)v33 + 12));
          v72 = *((_QWORD *)v33 + 231);
          *(double *)((char *)v98 + 5) = *(double *)((char *)v33 + 1853);
          v98[0] = v72;
          geo::optional<md::mun::CollectionPoint>::optional((uint64_t)v99, (uint64_t)&v85);
          v73 = v93;
          v74 = v94;
          if (v93 != v94)
          {
            do
            {
              v75 = (void *)v73[31];
              if (v75 != (void *)v73[33])
                free(v75);
              v73 += 36;
            }
            while (v73 != v74);
            v73 = v93;
          }
          if (v73 != (_QWORD *)v95)
            free(v73);
          if (v99[0])
          {
            v76 = vsubq_f64(v101, *(float64x2_t *)(a4 + 8));
            v77 = vmulq_f64(v76, v76);
            v32 = v77.f64[0] + (v100 - *(double *)a4) * (v100 - *(double *)a4) + v77.f64[1];
            if (v32 < v9)
            {
              geo::optional<md::mun::CollectionPoint>::operator=((uint64_t)a1, (uint64_t)v99);
              v9 = v32;
              if (!v99[0])
                goto LABEL_8;
            }
            v78 = v102;
            v79 = v103;
            if (v102 != v103)
            {
              do
              {
                v80 = (void *)v78[31];
                if (v80 != (void *)v78[33])
                  free(v80);
                v78 += 36;
              }
              while (v78 != v79);
              v78 = v102;
            }
            if (v78 != v104)
              free(v78);
          }
        }
      }
      v32 = v9;
LABEL_8:
      v8 += 2;
      v9 = v32;
    }
    while (v8 != a3);
  }
}

void sub_19F88E284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  geo::optional<md::mun::CollectionPoint>::~optional((uint64_t)&STACK[0x7C0]);
  geo::optional<md::mun::CollectionPoint>::~optional(a10);
  _Unwind_Resume(a1);
}

char *std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<std::shared_ptr<md::MuninJunctionFeature>,std::__tree_node<std::shared_ptr<md::MuninJunctionFeature>,void *> *,long> &,std::__tree_const_iterator<std::shared_ptr<md::MuninJunctionFeature>,std::__tree_node<std::shared_ptr<md::MuninJunctionFeature>,void *> *,long> &,std::__tree_const_iterator<std::shared_ptr<md::MuninJunctionFeature>,std::__tree_node<std::shared_ptr<md::MuninJunctionFeature>,void *> *,long> &,std::__tree_const_iterator<std::shared_ptr<md::MuninJunctionFeature>,std::__tree_node<std::shared_ptr<md::MuninJunctionFeature>,void *> *,long> &,std::insert_iterator<std::vector<std::shared_ptr<md::MuninJunctionFeature>>> &>(char *result, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  char **v28;
  _QWORD *v29;
  _QWORD *v30;

  v7 = result;
  v8 = *(_QWORD **)a2;
  v9 = (_QWORD *)*a3;
  if (*(_QWORD *)a2 == *a3)
  {
LABEL_39:
    v28 = *(char ***)a6;
    v27 = *(_QWORD *)(a6 + 8);
    v9 = v8;
    goto LABEL_40;
  }
  for (i = *(_QWORD **)a4; *(_QWORD *)a4 != *a5; i = *(_QWORD **)a4)
  {
    v15 = v8[4];
    v16 = i[4];
    if (v15 >= v16)
    {
      if (v16 >= v15)
      {
        v23 = (_QWORD *)v8[1];
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (_QWORD *)v8[2];
            v20 = *v24 == (_QWORD)v8;
            v8 = v24;
          }
          while (!v20);
        }
        *(_QWORD *)a2 = v24;
        v25 = *(_QWORD **)a4;
        v26 = *(_QWORD **)(*(_QWORD *)a4 + 8);
        if (v26)
        {
          do
          {
            v22 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v22 = (_QWORD *)v25[2];
            v20 = *v22 == (_QWORD)v25;
            v25 = v22;
          }
          while (!v20);
        }
      }
      else
      {
        v21 = (_QWORD *)i[1];
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = (_QWORD *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (_QWORD *)i[2];
            v20 = *v22 == (_QWORD)i;
            i = v22;
          }
          while (!v20);
        }
      }
      *(_QWORD *)a4 = v22;
    }
    else
    {
      result = std::vector<std::shared_ptr<md::MuninJunctionFeature>>::insert(*(char ***)a6, *(_QWORD *)(a6 + 8), (char *)v8 + 32);
      *(_QWORD *)(a6 + 8) = result + 16;
      v17 = *(_QWORD **)a2;
      v18 = *(_QWORD **)(*(_QWORD *)a2 + 8);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v17[2];
          v20 = *v19 == (_QWORD)v17;
          v17 = v19;
        }
        while (!v20);
      }
      *(_QWORD *)a2 = v19;
    }
    v8 = *(_QWORD **)a2;
    v9 = (_QWORD *)*a3;
    if (*(_QWORD *)a2 == *a3)
      goto LABEL_39;
  }
  v28 = *(char ***)a6;
  v27 = *(_QWORD *)(a6 + 8);
  if (v8 != v9)
  {
    do
    {
      result = std::vector<std::shared_ptr<md::MuninJunctionFeature>>::insert(v28, v27, (char *)v8 + 32);
      v29 = (_QWORD *)v8[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v8[2];
          v20 = *v30 == (_QWORD)v8;
          v8 = v30;
        }
        while (!v20);
      }
      v27 = (uint64_t)(result + 16);
      v8 = v30;
    }
    while (v30 != v9);
  }
LABEL_40:
  *(_QWORD *)v7 = v9;
  *((_QWORD *)v7 + 1) = v28;
  *((_QWORD *)v7 + 2) = v27;
  return result;
}

char *std::vector<std::shared_ptr<md::MuninJunctionFeature>>::insert(char **a1, uint64_t a2, char *a3)
{
  char *v3;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  char *v45;
  char *v46;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;

  v3 = a3;
  v5 = *a1;
  v6 = (unint64_t)a1[1];
  v7 = a2 - (_QWORD)*a1;
  v8 = v7 >> 4;
  v9 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v6 >= v10)
  {
    v26 = ((uint64_t)(v6 - (_QWORD)v5) >> 4) + 1;
    if (v26 >> 60)
      abort();
    v27 = v10 - (_QWORD)v5;
    if (v27 >> 3 > v26)
      v26 = v27 >> 3;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
      v28 = 0xFFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      if (v28 >> 60)
        goto LABEL_71;
      v29 = (char *)operator new(16 * v28);
    }
    else
    {
      v29 = 0;
    }
    v33 = &v29[16 * v8];
    v51 = v33;
    v53 = &v29[16 * v28];
    if (v8 != v28)
      goto LABEL_48;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFF0) >= 1)
    {
      v34 = v8 + 2;
      if (v8 >= -1)
        v34 = v8 + 1;
      v33 -= 16 * (v34 >> 1);
      v51 = v33;
      goto LABEL_48;
    }
    if ((unint64_t)v7 < 0x10)
      v35 = 1;
    else
      v35 = (v7 >> 3) & 0xFFFFFFFFFFFFFFFELL;
    if (!(v35 >> 60))
    {
      v36 = (char *)operator new(16 * v35);
      v33 = &v36[16 * (v35 >> 2)];
      v51 = v33;
      v53 = &v36[16 * v35];
      if (v29)
        operator delete(v29);
LABEL_48:
      v37 = *((_QWORD *)v3 + 1);
      *(_QWORD *)v33 = *(_QWORD *)v3;
      *((_QWORD *)v33 + 1) = v37;
      if (v37)
      {
        v38 = (unint64_t *)(v37 + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v40 = v33 + 16;
      v41 = *a1;
      v42 = v51;
      if (*a1 != v9)
      {
        v43 = v9;
        v42 = v51;
        do
        {
          v44 = *((_OWORD *)v43 - 1);
          v43 -= 16;
          *((_OWORD *)v42 - 1) = v44;
          v42 -= 16;
          *(_QWORD *)v43 = 0;
          *((_QWORD *)v43 + 1) = 0;
        }
        while (v43 != v41);
      }
      v45 = a1[1];
      if (v45 != v9)
      {
        do
        {
          *(_OWORD *)v40 = *(_OWORD *)v9;
          v40 += 16;
          *(_QWORD *)v9 = 0;
          *((_QWORD *)v9 + 1) = 0;
          v9 += 16;
        }
        while (v9 != v45);
        v9 = a1[1];
      }
      v46 = *a1;
      *a1 = v42;
      a1[1] = v40;
      a1[2] = v53;
      if (v9 == v46)
      {
        if (!v9)
          return v51;
      }
      else
      {
        do
        {
          v52 = v9 - 16;
          v48 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
          if (v48)
          {
            p_shared_owners = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(p_shared_owners);
            while (__stlxr(v50 - 1, p_shared_owners));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v9 = v52;
        }
        while (v52 != v46);
        v9 = v46;
        if (!v46)
          return v51;
      }
      operator delete(v9);
      return v51;
    }
LABEL_71:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  if (v9 == (char *)v6)
  {
    v30 = *(_OWORD *)a3;
    *(_OWORD *)v9 = *(_OWORD *)a3;
    if (*((_QWORD *)&v30 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    a1[1] = v9 + 16;
  }
  else
  {
    v11 = (char *)(v6 - 16);
    v12 = a1[1];
    if (v6 >= 0x10)
    {
      v13 = v6 - 16;
      v12 = a1[1];
      do
      {
        *(_OWORD *)v12 = *(_OWORD *)v13;
        v12 += 16;
        *(_QWORD *)v13 = 0;
        *(_QWORD *)(v13 + 8) = 0;
        v13 += 16;
      }
      while (v13 < v6);
    }
    a1[1] = v12;
    if ((char *)v6 != v9 + 16)
    {
      do
      {
        v22 = *((_OWORD *)v11 - 1);
        v11 -= 16;
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        v23 = *(std::__shared_weak_count **)(v6 - 8);
        *(_OWORD *)(v6 - 16) = v22;
        v6 -= 16;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }
      while (v11 != v9);
    }
    if (v9 <= v3)
      v3 += 16 * (a1[1] > v3);
    v15 = *(_QWORD *)v3;
    v14 = *((_QWORD *)v3 + 1);
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    *(_QWORD *)v9 = v15;
    v18 = &v5[16 * v8];
    v19 = (std::__shared_weak_count *)*((_QWORD *)v18 + 1);
    *((_QWORD *)v18 + 1) = v14;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  return v9;
}

void sub_19F88EBE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<md::MuninJunctionFeature>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::shared_ptr<md::MuninJunctionFeature>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_emplace<md::MuninJunctionFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC3F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MuninJunctionFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC3F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::MuninJunctionFeature>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 88);
    v4 = *(void **)(a1 + 80);
    if (v3 != v1)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 80);
    }
    *(_QWORD *)(a1 + 88) = v1;
    operator delete(v4);
  }
}

double std::__introsort<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_0 &,md::MuninJunctionInfo*,false>(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *v10;
  __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  double v17;
  double v18;
  __n128 v19;
  double v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 *v26;
  unint64_t v27;
  __n128 *v28;
  double v29;
  double v30;
  __n128 v31;
  uint64_t v32;
  unsigned __int32 v33;
  __n128 v34;
  __n128 v35;
  uint64_t v36;
  __int32 v37;
  __n128 v38;
  __n128 v39;
  uint64_t v40;
  __int32 v41;
  __n128 v42;
  __n128 *v43;
  unint64_t v44;
  __n128 *v45;
  double v46;
  double v47;
  __n128 v48;
  uint64_t v49;
  unsigned __int32 v50;
  __n128 v51;
  __n128 v52;
  uint64_t v53;
  __int32 v54;
  __n128 v55;
  uint64_t v56;
  __int32 v57;
  __n128 v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  __n128 *v65;
  __n128 *v66;
  double v67;
  __n128 *v68;
  double v69;
  unint64_t v70;
  __n128 v71;
  uint64_t v72;
  int v73;
  double v74;
  double v75;
  __int128 v76;
  BOOL v77;
  __n128 v78;
  unint64_t v79;
  double v80;
  unint64_t v81;
  double v82;
  __n128 *v83;
  __n128 *v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  double v89;
  double v90;
  __int128 v91;
  __n128 *v92;
  double v93;
  __n128 v94;
  __n128 *v95;
  __n128 *v96;
  __n128 *v97;
  uint64_t v98;
  unsigned __int32 v99;
  uint64_t v100;
  uint64_t v101;
  __n128 *v102;
  BOOL v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  __n128 *v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  int64_t v114;
  BOOL v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  double v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  int64_t v126;
  uint64_t v127;
  __n128 *v128;
  __n128 v129;
  __n128 *v130;
  uint64_t v131;
  int64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unsigned __int32 v137;
  __n128 *v138;
  __n128 v139;
  uint64_t v140;
  unsigned __int32 v141;
  __n128 *v142;
  unint64_t v143;
  uint64_t v144;
  __n128 *v145;
  double v146;
  uint64_t v147;
  unsigned __int32 v148;
  __n128 v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_0 &,md::MuninJunctionInfo*>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  double v5;
  double v6;
  unint64_t v7;
  unsigned __int32 v8;
  unint64_t v9;
  unsigned __int32 v10;
  unint64_t v11;
  unsigned __int32 v12;
  unint64_t v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  unint64_t v16;
  unsigned __int32 v17;
  unint64_t v18;
  unsigned __int32 v19;
  unint64_t v20;
  unsigned __int32 v21;

  v5 = a2->n128_f64[1];
  v6 = a3->n128_f64[1];
  if (v5 >= a1->n128_f64[1])
  {
    if (v6 < v5)
    {
      result = *a2;
      v9 = a2[1].n128_u64[0];
      v10 = a3[1].n128_u32[0];
      *a2 = *a3;
      a2[1].n128_u32[0] = v10;
      a3[1].n128_u32[0] = v9;
      *a3 = result;
      if (a2->n128_f64[1] < a1->n128_f64[1])
      {
        result = *a1;
        v11 = a1[1].n128_u64[0];
        v12 = a2[1].n128_u32[0];
        *a1 = *a2;
        a1[1].n128_u32[0] = v12;
        a2[1].n128_u32[0] = v11;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      result = *a1;
      v7 = a1[1].n128_u64[0];
      v8 = a3[1].n128_u32[0];
      *a1 = *a3;
      a1[1].n128_u32[0] = v8;
LABEL_9:
      a3[1].n128_u32[0] = v7;
      *a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    v13 = a1[1].n128_u64[0];
    v14 = a2[1].n128_u32[0];
    *a1 = *a2;
    a1[1].n128_u32[0] = v14;
    a2[1].n128_u32[0] = v13;
    *a2 = result;
    if (a3->n128_f64[1] < a2->n128_f64[1])
    {
      result = *a2;
      v7 = a2[1].n128_u64[0];
      v15 = a3[1].n128_u32[0];
      *a2 = *a3;
      a2[1].n128_u32[0] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_u64[0] = a4->n128_u64[1];
  if (result.n128_f64[0] < a3->n128_f64[1])
  {
    result = *a3;
    v16 = a3[1].n128_u64[0];
    v17 = a4[1].n128_u32[0];
    *a3 = *a4;
    a3[1].n128_u32[0] = v17;
    a4[1].n128_u32[0] = v16;
    *a4 = result;
    result.n128_u64[0] = a3->n128_u64[1];
    if (result.n128_f64[0] < a2->n128_f64[1])
    {
      result = *a2;
      v18 = a2[1].n128_u64[0];
      v19 = a3[1].n128_u32[0];
      *a2 = *a3;
      a2[1].n128_u32[0] = v19;
      a3[1].n128_u32[0] = v18;
      *a3 = result;
      result.n128_u64[0] = a2->n128_u64[1];
      if (result.n128_f64[0] < a1->n128_f64[1])
      {
        result = *a1;
        v20 = a1[1].n128_u64[0];
        v21 = a2[1].n128_u32[0];
        *a1 = *a2;
        a1[1].n128_u32[0] = v21;
        a2[1].n128_u32[0] = v20;
        *a2 = result;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_0 &,md::MuninJunctionInfo*>(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  __n128 v7;
  uint64_t v8;
  int v9;
  __n128 *v10;
  __n128 *v11;
  double v12;
  double v13;
  __n128 v14;
  uint64_t v15;
  int v16;
  __n128 *v17;
  __n128 *v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  __n128 v23;
  __n128 *v24;
  __n128 *v25;
  __n128 *v26;
  __n128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __n128 v35;
  __n128 v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __n128 v46;
  __n128 v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 16) < *(double *)(a1 + 8))
      {
        v7 = *(__n128 *)a1;
        v8 = *(_QWORD *)(a1 + 16);
        v9 = *(_DWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(a1 + 16) = v9;
        *(_DWORD *)(a2 - 8) = v8;
        *(__n128 *)(a2 - 24) = v7;
      }
      return result;
    case 3uLL:
      v10 = (__n128 *)(a1 + 24);
      v11 = (__n128 *)(a2 - 24);
      v12 = *(double *)(a1 + 32);
      v13 = *(double *)(a2 - 16);
      if (v12 >= *(double *)(a1 + 8))
      {
        if (v13 < v12)
        {
          v36 = *v10;
          v37 = *(_QWORD *)(a1 + 40);
          v38 = *(_DWORD *)(a2 - 8);
          *v10 = *v11;
          *(_DWORD *)(a1 + 40) = v38;
          *(_DWORD *)(a2 - 8) = v37;
          *v11 = v36;
          if (*(double *)(a1 + 32) < *(double *)(a1 + 8))
          {
            v39 = *(_QWORD *)(a1 + 16);
            v40 = *(__n128 *)a1;
            *(__n128 *)a1 = *v10;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
            *v10 = v40;
            *(_DWORD *)(a1 + 40) = v39;
          }
        }
      }
      else if (v13 >= v12)
      {
        v45 = *(_QWORD *)(a1 + 16);
        v46 = *(__n128 *)a1;
        *(__n128 *)a1 = *v10;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
        *v10 = v46;
        *(_DWORD *)(a1 + 40) = v45;
        if (*(double *)(a2 - 16) < *(double *)(a1 + 32))
        {
          v47 = *v10;
          v48 = *(_QWORD *)(a1 + 40);
          v49 = *(_DWORD *)(a2 - 8);
          *v10 = *v11;
          *(_DWORD *)(a1 + 40) = v49;
          *(_DWORD *)(a2 - 8) = v48;
          *v11 = v47;
        }
      }
      else
      {
        v14 = *(__n128 *)a1;
        v15 = *(_QWORD *)(a1 + 16);
        v16 = *(_DWORD *)(a2 - 8);
        *(__n128 *)a1 = *v11;
        *(_DWORD *)(a1 + 16) = v16;
        *(_DWORD *)(a2 - 8) = v15;
        *v11 = v14;
      }
      return result;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_0 &,md::MuninJunctionInfo*>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      v24 = (__n128 *)(a1 + 24);
      v25 = (__n128 *)(a1 + 48);
      v26 = (__n128 *)(a1 + 72);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_0 &,md::MuninJunctionInfo*>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), a3);
      if (*(double *)(a2 - 16) < *(double *)(a1 + 80))
      {
        v27 = *v26;
        v28 = *(_QWORD *)(a1 + 88);
        v29 = *(_DWORD *)(a2 - 8);
        *v26 = *(__n128 *)(a2 - 24);
        *(_DWORD *)(a1 + 88) = v29;
        *(_DWORD *)(a2 - 8) = v28;
        *(__n128 *)(a2 - 24) = v27;
        if (*(double *)(a1 + 80) < *(double *)(a1 + 56))
        {
          v30 = *(_QWORD *)(a1 + 64);
          v31 = *v25;
          *v25 = *v26;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 88);
          *v26 = v31;
          *(_DWORD *)(a1 + 88) = v30;
          if (*(double *)(a1 + 56) < *(double *)(a1 + 32))
          {
            v32 = *(_QWORD *)(a1 + 40);
            v33 = *v24;
            *v24 = *v25;
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
            *v25 = v33;
            *(_DWORD *)(a1 + 64) = v32;
            if (*(double *)(a1 + 32) < *(double *)(a1 + 8))
            {
              v34 = *(_QWORD *)(a1 + 16);
              v35 = *(__n128 *)a1;
              *(__n128 *)a1 = *v24;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
              *v24 = v35;
              *(_DWORD *)(a1 + 40) = v34;
            }
          }
        }
      }
      return 1;
    default:
      v17 = (__n128 *)(a1 + 48);
      v18 = (__n128 *)(a1 + 24);
      v19 = *(double *)(a1 + 32);
      v20 = *(double *)(a1 + 8);
      v21 = *(double *)(a1 + 56);
      if (v19 >= v20)
      {
        if (v21 < v19)
        {
          v41 = *(_QWORD *)(a1 + 40);
          v42 = *v18;
          *v18 = *v17;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
          *v17 = v42;
          *(_DWORD *)(a1 + 64) = v41;
          if (*(double *)(a1 + 32) < v20)
          {
            v43 = *(_QWORD *)(a1 + 16);
            v44 = *(__n128 *)a1;
            *(__n128 *)a1 = *v18;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
            *v18 = v44;
            *(_DWORD *)(a1 + 40) = v43;
          }
        }
      }
      else if (v21 >= v19)
      {
        v50 = *(_QWORD *)(a1 + 16);
        v51 = *(__n128 *)a1;
        *(__n128 *)a1 = *v18;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
        *v18 = v51;
        *(_DWORD *)(a1 + 40) = v50;
        if (v21 < *(double *)(a1 + 32))
        {
          v52 = *(_QWORD *)(a1 + 40);
          v53 = *v18;
          *v18 = *v17;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
          *v17 = v53;
          *(_DWORD *)(a1 + 64) = v52;
        }
      }
      else
      {
        v22 = *(_QWORD *)(a1 + 16);
        v23 = *(__n128 *)a1;
        *(__n128 *)a1 = *v17;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 64);
        *v17 = v23;
        *(_DWORD *)(a1 + 64) = v22;
      }
      v54 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v55 = 0;
      v56 = 0;
      break;
  }
  while (1)
  {
    v58 = *(double *)(v54 + 8);
    if (v58 < v17->n128_f64[1])
    {
      v59 = *(_QWORD *)v54;
      v60 = *(_DWORD *)(v54 + 16);
      v61 = v55;
      do
      {
        v62 = a1 + v61;
        *(_OWORD *)(v62 + 72) = *(_OWORD *)(a1 + v61 + 48);
        *(_DWORD *)(v62 + 88) = *(_DWORD *)(a1 + v61 + 64);
        if (v61 == -48)
        {
          v57 = a1;
          goto LABEL_29;
        }
        v61 -= 24;
      }
      while (v58 < *(double *)(v62 + 32));
      v57 = a1 + v61 + 72;
LABEL_29:
      *(_QWORD *)v57 = v59;
      *(double *)(v57 + 8) = v58;
      *(_DWORD *)(v57 + 16) = v60;
      if (++v56 == 8)
        return v54 + 24 == a2;
    }
    v17 = (__n128 *)v54;
    v55 += 24;
    v54 += 24;
    if (v54 == a2)
      return 1;
  }
}

void std::__function::__func<md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_2,std::allocator<md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_2>,BOOL ()(md::MuninJunction const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_2,std::allocator<md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_2>,BOOL ()(md::MuninJunction const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D8F78;
  return result;
}

void std::__function::__func<md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_2,std::allocator<md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_2>,BOOL ()(md::MuninJunction const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D8F78;
}

BOOL std::__function::__func<md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_2,std::allocator<md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_2>,BOOL ()(md::MuninJunction const*)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)a2 + 69);
  if (v2 > 2)
    return 1;
  if (v2 - 1 > 1)
    return 0;
  return *(unsigned __int8 *)(*(_QWORD *)a2 + 68) > 2u;
}

void std::__function::__func<md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_1,std::allocator<md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_1>,void ()(md::JunctionSearchResult const&&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_1,std::allocator<md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_1>,void ()(md::JunctionSearchResult const&&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D8F30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_1,std::allocator<md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_1>,void ()(md::JunctionSearchResult const&&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D8F30;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_1,std::allocator<md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_1>,void ()(md::JunctionSearchResult const&&)>::operator()(uint64_t a1, uint64_t a2)
{
  void **v3;
  double v4;
  unint64_t v5;
  double *v6;
  uint64_t v7;
  float v8;
  char *v9;
  char *v10;
  unint64_t v11;
  double *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  float *v17;
  float *v18;
  uint64_t v19;
  float v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  __int128 v37;

  v3 = *(void ***)(a1 + 8);
  v4 = sqrt(*(double *)(a2 + 24));
  v6 = (double *)v3[1];
  v5 = (unint64_t)v3[2];
  if ((unint64_t)v6 < v5)
  {
    v7 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)v6 = v7;
    v6[1] = v4;
    v8 = 10.0;
    if (!*(_DWORD *)(v7 + 64))
    {
      v9 = *(char **)(v7 + 40);
      v10 = *(char **)(v7 + 48);
      if (v9 == v10)
      {
        v8 = 0.0;
      }
      else
      {
        v11 = v10 - v9 - 8;
        if (v11 >= 8)
        {
          v24 = (v11 >> 3) + 1;
          v25 = v9 + 8;
          v26 = 0.0;
          v27 = v24 & 0x3FFFFFFFFFFFFFFELL;
          v28 = 0.0;
          do
          {
            v26 = fmaxf(v26, *(float *)(*(v25 - 1) + 8));
            v28 = fmaxf(v28, *(float *)(*v25 + 8));
            v25 += 2;
            v27 -= 2;
          }
          while (v27);
          v8 = fmaxf(v26, v28);
          if (v24 == (v24 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_27;
          v9 += 8 * (v24 & 0x3FFFFFFFFFFFFFFELL);
        }
        else
        {
          v8 = 0.0;
        }
        do
        {
          v29 = *(_QWORD *)v9;
          v9 += 8;
          v8 = fmaxf(v8, *(float *)(v29 + 8));
        }
        while (v9 != v10);
      }
    }
LABEL_27:
    *((float *)v6 + 4) = v8;
    v30 = (char *)(v6 + 3);
    goto LABEL_38;
  }
  v12 = (double *)*v3;
  v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (_BYTE *)*v3) >> 3);
  v14 = v13 + 1;
  if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v12) >> 3);
  if (2 * v15 > v14)
    v14 = 2 * v15;
  if (v15 >= 0x555555555555555)
    v16 = 0xAAAAAAAAAAAAAAALL;
  else
    v16 = v14;
  if (v16)
  {
    if (v16 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v17 = (float *)operator new(24 * v16);
  }
  else
  {
    v17 = 0;
  }
  v18 = &v17[6 * v13];
  v19 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)v18 = v19;
  *((double *)v18 + 1) = v4;
  v20 = 10.0;
  if (!*(_DWORD *)(v19 + 64))
  {
    v21 = *(char **)(v19 + 40);
    v22 = *(char **)(v19 + 48);
    if (v21 == v22)
    {
      v20 = 0.0;
    }
    else
    {
      v23 = v22 - v21 - 8;
      if (v23 >= 8)
      {
        v31 = (v23 >> 3) + 1;
        v32 = v21 + 8;
        v33 = 0.0;
        v34 = v31 & 0x3FFFFFFFFFFFFFFELL;
        v35 = 0.0;
        do
        {
          v33 = fmaxf(v33, *(float *)(*(v32 - 1) + 8));
          v35 = fmaxf(v35, *(float *)(*v32 + 8));
          v32 += 2;
          v34 -= 2;
        }
        while (v34);
        v20 = fmaxf(v33, v35);
        if (v31 == (v31 & 0x3FFFFFFFFFFFFFFELL))
          goto LABEL_33;
        v21 += 8 * (v31 & 0x3FFFFFFFFFFFFFFELL);
      }
      else
      {
        v20 = 0.0;
      }
      do
      {
        v36 = *(_QWORD *)v21;
        v21 += 8;
        v20 = fmaxf(v20, *(float *)(v36 + 8));
      }
      while (v21 != v22);
    }
  }
LABEL_33:
  v17[6 * v13 + 4] = v20;
  v30 = (char *)(v18 + 6);
  if (v6 != v12)
  {
    do
    {
      v37 = *(_OWORD *)(v6 - 3);
      *(v18 - 2) = *((float *)v6 - 2);
      *(_OWORD *)(v18 - 6) = v37;
      v18 -= 6;
      v6 -= 3;
    }
    while (v6 != v12);
    v6 = (double *)*v3;
  }
  *v3 = v18;
  v3[1] = v30;
  v3[2] = &v17[6 * v16];
  if (v6)
    operator delete(v6);
LABEL_38:
  v3[1] = v30;
}

double std::__introsort<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findConnectedJunctions(md::MuninRoadEdge const*,std::vector<std::vector<md::MuninJunctionInfo>> &,unsigned int)::$_0 &,md::MuninJunctionInfo*,false>(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *v10;
  __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  double v17;
  double v18;
  __n128 v19;
  double v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 *v26;
  unint64_t v27;
  __n128 *v28;
  double v29;
  double v30;
  __n128 v31;
  uint64_t v32;
  unsigned __int32 v33;
  __n128 v34;
  __n128 v35;
  uint64_t v36;
  __int32 v37;
  __n128 v38;
  __n128 v39;
  uint64_t v40;
  __int32 v41;
  __n128 v42;
  __n128 *v43;
  unint64_t v44;
  __n128 *v45;
  double v46;
  double v47;
  __n128 v48;
  uint64_t v49;
  unsigned __int32 v50;
  __n128 v51;
  __n128 v52;
  uint64_t v53;
  __int32 v54;
  __n128 v55;
  uint64_t v56;
  __int32 v57;
  __n128 v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  __n128 *v65;
  __n128 *v66;
  double v67;
  __n128 *v68;
  double v69;
  unint64_t v70;
  __n128 v71;
  uint64_t v72;
  int v73;
  double v74;
  double v75;
  __int128 v76;
  BOOL v77;
  __n128 v78;
  unint64_t v79;
  double v80;
  unint64_t v81;
  double v82;
  __n128 *v83;
  __n128 *v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  double v89;
  double v90;
  __int128 v91;
  __n128 *v92;
  double v93;
  __n128 v94;
  __n128 *v95;
  __n128 *v96;
  __n128 *v97;
  uint64_t v98;
  unsigned __int32 v99;
  uint64_t v100;
  uint64_t v101;
  __n128 *v102;
  BOOL v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  __n128 *v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  int64_t v114;
  BOOL v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  double v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  int64_t v126;
  uint64_t v127;
  __n128 *v128;
  __n128 v129;
  __n128 *v130;
  uint64_t v131;
  int64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unsigned __int32 v137;
  __n128 *v138;
  __n128 v139;
  uint64_t v140;
  unsigned __int32 v141;
  __n128 *v142;
  unint64_t v143;
  uint64_t v144;
  __n128 *v145;
  double v146;
  uint64_t v147;
  unsigned __int32 v148;
  __n128 v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findConnectedJunctions(md::MuninRoadEdge const*,std::vector<std::vector<md::MuninJunctionInfo>> &,unsigned int)::$_0 &,md::MuninJunctionInfo*>(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  __n128 v7;
  uint64_t v8;
  int v9;
  __n128 *v10;
  __n128 *v11;
  double v12;
  double v13;
  __n128 v14;
  uint64_t v15;
  int v16;
  __n128 *v17;
  __n128 *v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  __n128 v23;
  __n128 *v24;
  __n128 *v25;
  __n128 *v26;
  __n128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __n128 v35;
  __n128 v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __n128 v46;
  __n128 v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 16) < *(double *)(a1 + 8))
      {
        v7 = *(__n128 *)a1;
        v8 = *(_QWORD *)(a1 + 16);
        v9 = *(_DWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(a1 + 16) = v9;
        *(_DWORD *)(a2 - 8) = v8;
        *(__n128 *)(a2 - 24) = v7;
      }
      return result;
    case 3uLL:
      v10 = (__n128 *)(a1 + 24);
      v11 = (__n128 *)(a2 - 24);
      v12 = *(double *)(a1 + 32);
      v13 = *(double *)(a2 - 16);
      if (v12 >= *(double *)(a1 + 8))
      {
        if (v13 < v12)
        {
          v36 = *v10;
          v37 = *(_QWORD *)(a1 + 40);
          v38 = *(_DWORD *)(a2 - 8);
          *v10 = *v11;
          *(_DWORD *)(a1 + 40) = v38;
          *(_DWORD *)(a2 - 8) = v37;
          *v11 = v36;
          if (*(double *)(a1 + 32) < *(double *)(a1 + 8))
          {
            v39 = *(_QWORD *)(a1 + 16);
            v40 = *(__n128 *)a1;
            *(__n128 *)a1 = *v10;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
            *v10 = v40;
            *(_DWORD *)(a1 + 40) = v39;
          }
        }
      }
      else if (v13 >= v12)
      {
        v45 = *(_QWORD *)(a1 + 16);
        v46 = *(__n128 *)a1;
        *(__n128 *)a1 = *v10;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
        *v10 = v46;
        *(_DWORD *)(a1 + 40) = v45;
        if (*(double *)(a2 - 16) < *(double *)(a1 + 32))
        {
          v47 = *v10;
          v48 = *(_QWORD *)(a1 + 40);
          v49 = *(_DWORD *)(a2 - 8);
          *v10 = *v11;
          *(_DWORD *)(a1 + 40) = v49;
          *(_DWORD *)(a2 - 8) = v48;
          *v11 = v47;
        }
      }
      else
      {
        v14 = *(__n128 *)a1;
        v15 = *(_QWORD *)(a1 + 16);
        v16 = *(_DWORD *)(a2 - 8);
        *(__n128 *)a1 = *v11;
        *(_DWORD *)(a1 + 16) = v16;
        *(_DWORD *)(a2 - 8) = v15;
        *v11 = v14;
      }
      return result;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_0 &,md::MuninJunctionInfo*>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      v24 = (__n128 *)(a1 + 24);
      v25 = (__n128 *)(a1 + 48);
      v26 = (__n128 *)(a1 + 72);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_0 &,md::MuninJunctionInfo*>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), a3);
      if (*(double *)(a2 - 16) < *(double *)(a1 + 80))
      {
        v27 = *v26;
        v28 = *(_QWORD *)(a1 + 88);
        v29 = *(_DWORD *)(a2 - 8);
        *v26 = *(__n128 *)(a2 - 24);
        *(_DWORD *)(a1 + 88) = v29;
        *(_DWORD *)(a2 - 8) = v28;
        *(__n128 *)(a2 - 24) = v27;
        if (*(double *)(a1 + 80) < *(double *)(a1 + 56))
        {
          v30 = *(_QWORD *)(a1 + 64);
          v31 = *v25;
          *v25 = *v26;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 88);
          *v26 = v31;
          *(_DWORD *)(a1 + 88) = v30;
          if (*(double *)(a1 + 56) < *(double *)(a1 + 32))
          {
            v32 = *(_QWORD *)(a1 + 40);
            v33 = *v24;
            *v24 = *v25;
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
            *v25 = v33;
            *(_DWORD *)(a1 + 64) = v32;
            if (*(double *)(a1 + 32) < *(double *)(a1 + 8))
            {
              v34 = *(_QWORD *)(a1 + 16);
              v35 = *(__n128 *)a1;
              *(__n128 *)a1 = *v24;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
              *v24 = v35;
              *(_DWORD *)(a1 + 40) = v34;
            }
          }
        }
      }
      return 1;
    default:
      v17 = (__n128 *)(a1 + 48);
      v18 = (__n128 *)(a1 + 24);
      v19 = *(double *)(a1 + 32);
      v20 = *(double *)(a1 + 8);
      v21 = *(double *)(a1 + 56);
      if (v19 >= v20)
      {
        if (v21 < v19)
        {
          v41 = *(_QWORD *)(a1 + 40);
          v42 = *v18;
          *v18 = *v17;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
          *v17 = v42;
          *(_DWORD *)(a1 + 64) = v41;
          if (*(double *)(a1 + 32) < v20)
          {
            v43 = *(_QWORD *)(a1 + 16);
            v44 = *(__n128 *)a1;
            *(__n128 *)a1 = *v18;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
            *v18 = v44;
            *(_DWORD *)(a1 + 40) = v43;
          }
        }
      }
      else if (v21 >= v19)
      {
        v50 = *(_QWORD *)(a1 + 16);
        v51 = *(__n128 *)a1;
        *(__n128 *)a1 = *v18;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
        *v18 = v51;
        *(_DWORD *)(a1 + 40) = v50;
        if (v21 < *(double *)(a1 + 32))
        {
          v52 = *(_QWORD *)(a1 + 40);
          v53 = *v18;
          *v18 = *v17;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
          *v17 = v53;
          *(_DWORD *)(a1 + 64) = v52;
        }
      }
      else
      {
        v22 = *(_QWORD *)(a1 + 16);
        v23 = *(__n128 *)a1;
        *(__n128 *)a1 = *v17;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 64);
        *v17 = v23;
        *(_DWORD *)(a1 + 64) = v22;
      }
      v54 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v55 = 0;
      v56 = 0;
      break;
  }
  while (1)
  {
    v58 = *(double *)(v54 + 8);
    if (v58 < v17->n128_f64[1])
    {
      v59 = *(_QWORD *)v54;
      v60 = *(_DWORD *)(v54 + 16);
      v61 = v55;
      do
      {
        v62 = a1 + v61;
        *(_OWORD *)(v62 + 72) = *(_OWORD *)(a1 + v61 + 48);
        *(_DWORD *)(v62 + 88) = *(_DWORD *)(a1 + v61 + 64);
        if (v61 == -48)
        {
          v57 = a1;
          goto LABEL_29;
        }
        v61 -= 24;
      }
      while (v58 < *(double *)(v62 + 32));
      v57 = a1 + v61 + 72;
LABEL_29:
      *(_QWORD *)v57 = v59;
      *(double *)(v57 + 8) = v58;
      *(_DWORD *)(v57 + 16) = v60;
      if (++v56 == 8)
        return v54 + 24 == a2;
    }
    v17 = (__n128 *)v54;
    v55 += 24;
    v54 += 24;
    if (v54 == a2)
      return 1;
  }
}

void std::__function::__func<md::MuninRoadLabeler::findConnectedJunctions(md::MuninRoadEdge const*,std::vector<std::vector<md::MuninJunctionInfo>> &,unsigned int)::$_1,std::allocator<md::MuninRoadLabeler::findConnectedJunctions(md::MuninRoadEdge const*,std::vector<std::vector<md::MuninJunctionInfo>> &,unsigned int)::$_1>,BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MuninRoadLabeler::findConnectedJunctions(md::MuninRoadEdge const*,std::vector<std::vector<md::MuninJunctionInfo>> &,unsigned int)::$_1,std::allocator<md::MuninRoadLabeler::findConnectedJunctions(md::MuninRoadEdge const*,std::vector<std::vector<md::MuninJunctionInfo>> &,unsigned int)::$_1>,BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42D8FC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::MuninRoadLabeler::findConnectedJunctions(md::MuninRoadEdge const*,std::vector<std::vector<md::MuninJunctionInfo>> &,unsigned int)::$_1,std::allocator<md::MuninRoadLabeler::findConnectedJunctions(md::MuninRoadEdge const*,std::vector<std::vector<md::MuninJunctionInfo>> &,unsigned int)::$_1>,BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D8FC0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::MuninRoadLabeler::findConnectedJunctions(md::MuninRoadEdge const*,std::vector<std::vector<md::MuninJunctionInfo>> &,unsigned int)::$_1,std::allocator<md::MuninRoadLabeler::findConnectedJunctions(md::MuninRoadEdge const*,std::vector<std::vector<md::MuninJunctionInfo>> &,unsigned int)::$_1>,BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  char **v8;
  char *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;

  if (**(_DWORD **)(a1 + 24) >= *a4)
  {
    v4 = *a2;
    v5 = *(double **)(a1 + 8);
    v6 = *(double *)(*a2 + 16) - *v5;
    v7 = sqrt(v6 * v6 + (*(double *)(*a2 + 24) - v5[1]) * (*(double *)(*a2 + 24) - v5[1])) / **(double **)(a1 + 16);
    v8 = (char **)(**(_QWORD **)(a1 + 32) + 24 * *a4);
    v10 = v8 + 1;
    v9 = v8[1];
    v11 = (unint64_t)v8[2];
    if ((unint64_t)v9 >= v11)
    {
      v13 = *v8;
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *v8) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v13) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v18 = (char *)operator new(24 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[24 * v14];
      *(_QWORD *)v19 = v4;
      *((double *)v19 + 1) = v7;
      *((_QWORD *)v19 + 2) = 0;
      v12 = v19 + 24;
      if (v9 != v13)
      {
        do
        {
          v20 = *(_OWORD *)(v9 - 24);
          *((_DWORD *)v19 - 2) = *((_DWORD *)v9 - 2);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          v9 -= 24;
        }
        while (v9 != v13);
        v9 = *v8;
      }
      *v8 = v19;
      *v10 = v12;
      v8[2] = &v18[24 * v17];
      if (v9)
        operator delete(v9);
    }
    else
    {
      *(_QWORD *)v9 = v4;
      *((double *)v9 + 1) = v7;
      v12 = v9 + 24;
      *((_QWORD *)v9 + 2) = 0;
    }
    *v10 = v12;
  }
  return 1;
}

double std::__introsort<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *,false>(uint64_t a1, _QWORD *a2, uint64_t a3, char a4, double a5, __n128 a6)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __n128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  float *v28;
  float *v29;
  float v30;
  float *v31;
  float v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  float v43;
  float v44;
  __int128 *v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  BOOL v53;
  double result;
  uint64_t v55;
  float v56;
  unint64_t v57;
  float v58;
  float *v59;
  float *v60;
  float v61;
  uint64_t v62;
  int v63;
  __int128 v64;
  __n128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  float v72;
  float v73;
  __int128 *v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  BOOL v93;
  unint64_t v94;
  _QWORD *v95;
  __int128 v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  __int128 v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  int64_t v108;
  int64_t v109;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  float v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  _OWORD *v141;
  __int128 v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  float v152;
  uint64_t v153;
  int v154;
  unint64_t v155;
  __int128 v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __int128 v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  __int128 *v178;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __n128 v186;
  __int128 v187;
  __n128 v188;
  __int128 v189;
  __n128 v190;
  uint64_t v191;
  __n128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;

void **std::vector<md::RoadSearchResult>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

__n128 std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *>(__int128 *a1, __int128 *a2, __int128 *a3)
{
  __n128 result;
  float v7;
  __n128 *v8;
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __n128 *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __n128 v18;
  __int128 v19;
  __n128 *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __n128 v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __n128 *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;

  result.n128_u32[0] = *((_DWORD *)a2 + 6);
  v7 = *((float *)a3 + 6);
  if (result.n128_f32[0] >= *((float *)a1 + 6))
  {
    if (v7 < result.n128_f32[0])
    {
      v19 = *a2;
      v18 = (__n128)a2[1];
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      v20 = (__n128 *)(a2 + 1);
      v58 = v18;
      v21 = *a3;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v22 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
      *a2 = v21;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          v53 = v19;
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
          v19 = v53;
        }
      }
      *v20 = (__n128)a3[1];
      v25 = (std::__shared_weak_count *)*((_QWORD *)a3 + 1);
      *a3 = v19;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      result = v58;
      a3[1] = (__int128)v58;
      result.n128_u32[0] = *((_DWORD *)a2 + 6);
      if (result.n128_f32[0] < *((float *)a1 + 6))
      {
        v29 = *a1;
        v28 = (__n128)a1[1];
        *(_QWORD *)a1 = 0;
        *((_QWORD *)a1 + 1) = 0;
        v59 = v28;
        v30 = *a2;
        *(_QWORD *)a2 = 0;
        *((_QWORD *)a2 + 1) = 0;
        v31 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
        *a1 = v30;
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            v54 = v29;
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
            v29 = v54;
          }
        }
        a1[1] = (__int128)*v20;
        v34 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
        *a2 = v29;
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        result = v59;
        *v20 = v59;
      }
    }
  }
  else
  {
    v8 = (__n128 *)(a1 + 1);
    if (v7 < result.n128_f32[0])
    {
      v9 = *a1;
      *(_QWORD *)a1 = 0;
      *((_QWORD *)a1 + 1) = 0;
      v57 = *v8;
      v10 = *a3;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v11 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
      *a1 = v10;
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          v52 = v9;
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
          v9 = v52;
        }
      }
      v14 = (__n128 *)(a3 + 1);
      *v8 = (__n128)a3[1];
      v15 = (std::__shared_weak_count *)*((_QWORD *)a3 + 1);
      *a3 = v9;
      if (!v15)
        goto LABEL_56;
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
LABEL_54:
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
LABEL_56:
      result = v57;
      *v14 = v57;
      return result;
    }
    v37 = *a1;
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v60 = *v8;
    v38 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v39 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    *a1 = v38;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        v55 = v37;
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
        v37 = v55;
      }
    }
    v42 = (__n128 *)(a2 + 1);
    *v8 = (__n128)a2[1];
    v43 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    *a2 = v37;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    result = v60;
    *v42 = v60;
    result.n128_u32[0] = *((_DWORD *)a3 + 6);
    if (result.n128_f32[0] < *((float *)a2 + 6))
    {
      v46 = *a2;
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      v57 = *v42;
      v47 = *a3;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v48 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
      *a2 = v47;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          v56 = v46;
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
          v46 = v56;
        }
      }
      v14 = (__n128 *)(a3 + 1);
      *v42 = (__n128)a3[1];
      v15 = (std::__shared_weak_count *)*((_QWORD *)a3 + 1);
      *a3 = v46;
      if (!v15)
        goto LABEL_56;
      v51 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v51);
      while (__stlxr(v17 - 1, v51));
      goto LABEL_54;
    }
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __n128 result;
  __n128 v9;
  __int128 v10;
  __n128 *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __n128 v19;
  __int128 v20;
  __n128 *v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  result.n128_u32[0] = *((_DWORD *)a4 + 6);
  if (result.n128_f32[0] < *(float *)(a3 + 24))
  {
    v10 = *(_OWORD *)a3;
    v9 = *(__n128 *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v11 = (__n128 *)(a3 + 16);
    v41 = v9;
    v12 = *a4;
    *(_QWORD *)a4 = 0;
    *((_QWORD *)a4 + 1) = 0;
    v13 = *(std::__shared_weak_count **)(a3 + 8);
    *(_OWORD *)a3 = v12;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        v38 = v10;
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        v10 = v38;
      }
    }
    *v11 = (__n128)a4[1];
    v16 = (std::__shared_weak_count *)*((_QWORD *)a4 + 1);
    *a4 = v10;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    result = v41;
    a4[1] = (__int128)v41;
    result.n128_u32[0] = *(_DWORD *)(a3 + 24);
    if (result.n128_f32[0] < *(float *)(a2 + 24))
    {
      v20 = *(_OWORD *)a2;
      v19 = *(__n128 *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v21 = (__n128 *)(a2 + 16);
      v42 = v19;
      v22 = *(_OWORD *)a3;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v23 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v22;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          v39 = v20;
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
          v20 = v39;
        }
      }
      *v21 = *v11;
      v26 = *(std::__shared_weak_count **)(a3 + 8);
      *(_OWORD *)a3 = v20;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      result = v42;
      *v11 = v42;
      result.n128_u32[0] = *(_DWORD *)(a2 + 24);
      if (result.n128_f32[0] < *(float *)(a1 + 24))
      {
        v30 = *(_OWORD *)a1;
        v29 = *(__n128 *)(a1 + 16);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        v43 = v29;
        v31 = *(_OWORD *)a2;
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        v32 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v31;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            v40 = v30;
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
            v30 = v40;
          }
        }
        *(__n128 *)(a1 + 16) = *v21;
        v35 = *(std::__shared_weak_count **)(a2 + 8);
        *(_OWORD *)a2 = v30;
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        result = v43;
        *v21 = v43;
      }
    }
  }
  return result;
}

__n128 std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  __n128 result;
  __n128 v11;
  __int128 v12;
  __n128 *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __n128 v21;
  __int128 v22;
  __n128 *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __n128 v31;
  __int128 v32;
  __n128 *v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __n128 v41;
  __int128 v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *>(a1, a2, a3, (__int128 *)a4);
  result.n128_u32[0] = *((_DWORD *)a5 + 6);
  if (result.n128_f32[0] < *(float *)(a4 + 24))
  {
    v12 = *(_OWORD *)a4;
    v11 = *(__n128 *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    v13 = (__n128 *)(a4 + 16);
    v54 = v11;
    v14 = *a5;
    *(_QWORD *)a5 = 0;
    *((_QWORD *)a5 + 1) = 0;
    v15 = *(std::__shared_weak_count **)(a4 + 8);
    *(_OWORD *)a4 = v14;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        v50 = v12;
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        v12 = v50;
      }
    }
    *v13 = (__n128)a5[1];
    v18 = (std::__shared_weak_count *)*((_QWORD *)a5 + 1);
    *a5 = v12;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    result = v54;
    a5[1] = (__int128)v54;
    result.n128_u32[0] = *(_DWORD *)(a4 + 24);
    if (result.n128_f32[0] < *(float *)(a3 + 24))
    {
      v22 = *(_OWORD *)a3;
      v21 = *(__n128 *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v23 = (__n128 *)(a3 + 16);
      v55 = v21;
      v24 = *(_OWORD *)a4;
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      v25 = *(std::__shared_weak_count **)(a3 + 8);
      *(_OWORD *)a3 = v24;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          v51 = v22;
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
          v22 = v51;
        }
      }
      *v23 = *v13;
      v28 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v22;
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      result = v55;
      *v13 = v55;
      result.n128_u32[0] = *(_DWORD *)(a3 + 24);
      if (result.n128_f32[0] < *(float *)(a2 + 24))
      {
        v32 = *(_OWORD *)a2;
        v31 = *(__n128 *)(a2 + 16);
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        v33 = (__n128 *)(a2 + 16);
        v56 = v31;
        v34 = *(_OWORD *)a3;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        v35 = *(std::__shared_weak_count **)(a2 + 8);
        *(_OWORD *)a2 = v34;
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            v52 = v32;
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
            v32 = v52;
          }
        }
        *v33 = *v23;
        v38 = *(std::__shared_weak_count **)(a3 + 8);
        *(_OWORD *)a3 = v32;
        if (v38)
        {
          v39 = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        result = v56;
        *v23 = v56;
        result.n128_u32[0] = *(_DWORD *)(a2 + 24);
        if (result.n128_f32[0] < *(float *)(a1 + 24))
        {
          v42 = *(_OWORD *)a1;
          v41 = *(__n128 *)(a1 + 16);
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v57 = v41;
          v43 = *(_OWORD *)a2;
          *(_QWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = 0;
          v44 = *(std::__shared_weak_count **)(a1 + 8);
          *(_OWORD *)a1 = v43;
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              v53 = v42;
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
              v42 = v53;
            }
          }
          *(__n128 *)(a1 + 16) = *v33;
          v47 = *(std::__shared_weak_count **)(a2 + 8);
          *(_OWORD *)a2 = v42;
          if (v47)
          {
            v48 = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          result = v57;
          *v33 = v57;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)(a1 + 24))
      {
        v6 = (_QWORD *)(a2 - 32);
        v8 = *(_OWORD *)a1;
        v7 = *(_OWORD *)(a1 + 16);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        v34 = v7;
        v9 = *(_OWORD *)(a2 - 32);
        *v6 = 0;
        v6[1] = 0;
        v10 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v9;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            v32 = v8;
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
            v8 = v32;
          }
        }
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 - 16);
        v13 = *(std::__shared_weak_count **)(a2 - 24);
        *(_OWORD *)(a2 - 32) = v8;
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        *(_OWORD *)(a2 - 16) = v34;
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *>((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *>(a1, a1 + 32, a1 + 64, (__int128 *)(a2 - 32));
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *,0>(a1, a1 + 32, a1 + 64, a1 + 96, (__int128 *)(a2 - 32));
      return 1;
    default:
      v16 = a1 + 64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *>((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64));
      v17 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v18 = 0;
      break;
  }
  while (1)
  {
    v19 = *(float *)(v17 + 24);
    if (v19 < *(float *)(v16 + 24))
    {
      v33 = *(_OWORD *)v17;
      *(_QWORD *)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0;
      v20 = *(_QWORD *)(v17 + 16);
      v21 = v17;
      v22 = *(_DWORD *)(v17 + 28);
      while (1)
      {
        v23 = v16;
        v24 = *(_OWORD *)v16;
        *(_QWORD *)v16 = 0;
        *(_QWORD *)(v16 + 8) = 0;
        v25 = *(std::__shared_weak_count **)(v21 + 8);
        *(_OWORD *)v21 = v24;
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        *(_OWORD *)(v21 + 16) = *(_OWORD *)(v23 + 16);
        if (v23 == a1)
          break;
        v16 = v23 - 32;
        v21 = v23;
        if (v19 >= *(float *)(v23 - 8))
        {
          v28 = v23;
          goto LABEL_29;
        }
      }
      v28 = a1;
LABEL_29:
      v29 = *(std::__shared_weak_count **)(v28 + 8);
      *(_OWORD *)v28 = v33;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      *(_QWORD *)(v23 + 16) = v20;
      *(float *)(v28 + 24) = v19;
      *(_DWORD *)(v28 + 28) = v22;
      if (++v18 == 8)
        return v17 + 32 == a2;
    }
    v16 = v17;
    v17 += 32;
    if (v17 == a2)
      return 1;
  }
}

void std::__function::__func<findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_1,std::allocator<findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_1>,BOOL ()(md::MuninRoadEdge const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_1,std::allocator<findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_1>,BOOL ()(md::MuninRoadEdge const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42C7478;
  return result;
}

void std::__function::__func<findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_1,std::allocator<findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_1>,BOOL ()(md::MuninRoadEdge const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42C7478;
}

uint64_t std::__function::__func<findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_1,std::allocator<findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_1>,BOOL ()(md::MuninRoadEdge const*)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)a2 + 112);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::mun::MuninMetadata> *,false>(unint64_t *a1, char *a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  __int128 v76;
  unint64_t *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t *v89;
  __int128 v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  BOOL v97;
  __int128 v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t *v108;
  __int128 v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  BOOL v134;
  _QWORD *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *p_shared_owners;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  int64_t v149;
  int64_t v150;
  int64_t v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  __int128 v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  char *v221;
  unint64_t v222;

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::MuninRoadNetworkData> *,false>(unint64_t *a1, char *a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  __int128 v76;
  unint64_t *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t *v89;
  __int128 v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  BOOL v97;
  __int128 v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t *v108;
  __int128 v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  BOOL v134;
  _QWORD *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *p_shared_owners;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  int64_t v149;
  int64_t v150;
  int64_t v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  __int128 v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  char *v221;
  unint64_t v222;

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::MuninRoadNetworkData> *>(uint64_t *result, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *a2;
  v5 = *result;
  v6 = *a3;
  if (*a2 >= *result)
  {
    if (v6 < v4)
    {
      *a2 = v6;
      *a3 = v4;
      v9 = (uint64_t *)(a2 + 1);
      v8 = a2[1];
      a2[1] = a3[1];
      a3[1] = v8;
      v10 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        v7 = result + 1;
        *a2 = v10;
LABEL_10:
        v12 = *v7;
        *v7 = *v9;
        *v9 = v12;
      }
    }
  }
  else
  {
    if (v6 < v4)
    {
      v7 = result + 1;
      *result = v6;
LABEL_9:
      *a3 = v5;
      v9 = (uint64_t *)(a3 + 1);
      goto LABEL_10;
    }
    *result = v4;
    *a2 = v5;
    v7 = (uint64_t *)(a2 + 1);
    v11 = result[1];
    result[1] = a2[1];
    a2[1] = v11;
    v5 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      goto LABEL_9;
    }
  }
  v13 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v13;
    v14 = a3[1];
    a3[1] = a4[1];
    a4[1] = v14;
    v15 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v15;
      v16 = a2[1];
      a2[1] = a3[1];
      a3[1] = v16;
      v17 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v17;
        v18 = result[1];
        result[1] = a2[1];
        a2[1] = v18;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::MuninRoadNetworkData> *>(unint64_t *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;

  v4 = (a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((_QWORD *)a2 - 2);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *((_QWORD *)a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      v9 = a1[2];
      v10 = *a1;
      v11 = *((_QWORD *)a2 - 2);
      if (v9 < *a1)
      {
        if (v11 >= v9)
        {
          v12 = (uint64_t *)(a1 + 3);
          v36 = a1[3];
          v37 = a1[1];
          *a1 = v9;
          a1[1] = v36;
          a1[2] = v10;
          a1[3] = v37;
          v38 = *((_QWORD *)a2 - 2);
          if (v38 >= v10)
            return result;
          a1[2] = v38;
        }
        else
        {
          v12 = (uint64_t *)(a1 + 1);
          *a1 = v11;
        }
        *((_QWORD *)a2 - 2) = v10;
        v30 = a2 - 8;
        goto LABEL_25;
      }
      if (v11 < v9)
      {
        a1[2] = v11;
        *((_QWORD *)a2 - 2) = v9;
        v30 = (char *)(a1 + 3);
        v29 = a1[3];
        a1[3] = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v29;
        v31 = a1[2];
        v32 = *a1;
        if (v31 < *a1)
        {
          *a1 = v31;
          a1[2] = v32;
          v12 = (uint64_t *)(a1 + 1);
LABEL_25:
          v39 = *v12;
          *v12 = *(_QWORD *)v30;
          *(_QWORD *)v30 = v39;
          return result;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::MuninRoadNetworkData> *>((uint64_t *)a1, a1 + 2, a1 + 4, (unint64_t *)a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::MuninRoadNetworkData> *>((uint64_t *)a1, a1 + 2, a1 + 4, a1 + 6);
      v18 = *((_QWORD *)a2 - 2);
      v19 = a1[6];
      if (v18 < v19)
      {
        a1[6] = v18;
        *((_QWORD *)a2 - 2) = v19;
        v20 = a1[7];
        a1[7] = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v20;
        v21 = a1[6];
        v22 = a1[4];
        if (v21 < v22)
        {
          v23 = a1[5];
          v24 = a1[7];
          a1[4] = v21;
          a1[5] = v24;
          a1[6] = v22;
          a1[7] = v23;
          v25 = a1[2];
          if (v21 < v25)
          {
            v26 = a1[3];
            a1[2] = v21;
            a1[3] = v24;
            a1[4] = v25;
            a1[5] = v26;
            v27 = *a1;
            if (v21 < *a1)
            {
              v28 = a1[1];
              *a1 = v21;
              a1[1] = v24;
              a1[2] = v27;
              a1[3] = v28;
            }
          }
        }
      }
      return 1;
    default:
      v13 = a1 + 4;
      v14 = a1[4];
      v15 = a1[2];
      v16 = *a1;
      if (v15 < *a1)
      {
        if (v14 >= v15)
        {
          v17 = (uint64_t *)(a1 + 3);
          v40 = a1[3];
          v41 = a1[1];
          *a1 = v15;
          a1[1] = v40;
          a1[2] = v16;
          a1[3] = v41;
          if (v14 >= v16)
            goto LABEL_30;
          a1[2] = v14;
        }
        else
        {
          v17 = (uint64_t *)(a1 + 1);
          *a1 = v14;
        }
        a1[4] = v16;
        v34 = (uint64_t *)(a1 + 5);
        goto LABEL_29;
      }
      if (v14 < v15)
      {
        v34 = (uint64_t *)(a1 + 3);
        v33 = a1[3];
        v35 = a1[5];
        a1[4] = v15;
        a1[5] = v33;
        a1[2] = v14;
        a1[3] = v35;
        if (v14 < v16)
        {
          *a1 = v14;
          a1[2] = v16;
          v17 = (uint64_t *)(a1 + 1);
LABEL_29:
          v42 = *v17;
          *v17 = *v34;
          *v34 = v42;
        }
      }
LABEL_30:
      v43 = (char *)(a1 + 6);
      if (a1 + 6 == (unint64_t *)a2)
        return 1;
      v44 = 0;
      while (1)
      {
        v45 = *(_QWORD *)v43;
        v46 = *v13;
        if (*(_QWORD *)v43 < *v13)
        {
          v47 = *((_QWORD *)v43 + 1);
          v48 = (unint64_t *)v43;
          *(_QWORD *)v43 = 0;
          *((_QWORD *)v43 + 1) = 0;
          while (1)
          {
            v49 = v48;
            v48 = v13;
            v50 = v13[1];
            *v48 = 0;
            v48[1] = 0;
            v51 = (std::__shared_weak_count *)v49[1];
            *v49 = v46;
            v49[1] = v50;
            if (v51)
            {
              p_shared_owners = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(p_shared_owners);
              while (__stlxr(v53 - 1, p_shared_owners));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            if (v48 == a1)
              break;
            v13 = v48 - 2;
            v46 = *(v48 - 2);
            if (v45 >= v46)
              goto LABEL_45;
          }
          v48 = a1;
LABEL_45:
          v54 = (std::__shared_weak_count *)v48[1];
          *v48 = v45;
          v48[1] = v47;
          if (v54)
          {
            v55 = (unint64_t *)&v54->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
          if (++v44 == 8)
            return v43 + 16 == a2;
        }
        v13 = (unint64_t *)v43;
        v43 += 16;
        if (v43 == a2)
          return 1;
      }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::mun::MuninMetadata> *>(unint64_t *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;

  v4 = (a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((_QWORD *)a2 - 2);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *((_QWORD *)a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      v9 = a1[2];
      v10 = *a1;
      v11 = *((_QWORD *)a2 - 2);
      if (v9 < *a1)
      {
        if (v11 >= v9)
        {
          v12 = (uint64_t *)(a1 + 3);
          v36 = a1[3];
          v37 = a1[1];
          *a1 = v9;
          a1[1] = v36;
          a1[2] = v10;
          a1[3] = v37;
          v38 = *((_QWORD *)a2 - 2);
          if (v38 >= v10)
            return result;
          a1[2] = v38;
        }
        else
        {
          v12 = (uint64_t *)(a1 + 1);
          *a1 = v11;
        }
        *((_QWORD *)a2 - 2) = v10;
        v30 = a2 - 8;
        goto LABEL_25;
      }
      if (v11 < v9)
      {
        a1[2] = v11;
        *((_QWORD *)a2 - 2) = v9;
        v30 = (char *)(a1 + 3);
        v29 = a1[3];
        a1[3] = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v29;
        v31 = a1[2];
        v32 = *a1;
        if (v31 < *a1)
        {
          *a1 = v31;
          a1[2] = v32;
          v12 = (uint64_t *)(a1 + 1);
LABEL_25:
          v39 = *v12;
          *v12 = *(_QWORD *)v30;
          *(_QWORD *)v30 = v39;
          return result;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::MuninRoadNetworkData> *>((uint64_t *)a1, a1 + 2, a1 + 4, (unint64_t *)a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::MuninRoadNetworkData> *>((uint64_t *)a1, a1 + 2, a1 + 4, a1 + 6);
      v18 = *((_QWORD *)a2 - 2);
      v19 = a1[6];
      if (v18 < v19)
      {
        a1[6] = v18;
        *((_QWORD *)a2 - 2) = v19;
        v20 = a1[7];
        a1[7] = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v20;
        v21 = a1[6];
        v22 = a1[4];
        if (v21 < v22)
        {
          v23 = a1[5];
          v24 = a1[7];
          a1[4] = v21;
          a1[5] = v24;
          a1[6] = v22;
          a1[7] = v23;
          v25 = a1[2];
          if (v21 < v25)
          {
            v26 = a1[3];
            a1[2] = v21;
            a1[3] = v24;
            a1[4] = v25;
            a1[5] = v26;
            v27 = *a1;
            if (v21 < *a1)
            {
              v28 = a1[1];
              *a1 = v21;
              a1[1] = v24;
              a1[2] = v27;
              a1[3] = v28;
            }
          }
        }
      }
      return 1;
    default:
      v13 = a1 + 4;
      v14 = a1[4];
      v15 = a1[2];
      v16 = *a1;
      if (v15 < *a1)
      {
        if (v14 >= v15)
        {
          v17 = (uint64_t *)(a1 + 3);
          v40 = a1[3];
          v41 = a1[1];
          *a1 = v15;
          a1[1] = v40;
          a1[2] = v16;
          a1[3] = v41;
          if (v14 >= v16)
            goto LABEL_30;
          a1[2] = v14;
        }
        else
        {
          v17 = (uint64_t *)(a1 + 1);
          *a1 = v14;
        }
        a1[4] = v16;
        v34 = (uint64_t *)(a1 + 5);
        goto LABEL_29;
      }
      if (v14 < v15)
      {
        v34 = (uint64_t *)(a1 + 3);
        v33 = a1[3];
        v35 = a1[5];
        a1[4] = v15;
        a1[5] = v33;
        a1[2] = v14;
        a1[3] = v35;
        if (v14 < v16)
        {
          *a1 = v14;
          a1[2] = v16;
          v17 = (uint64_t *)(a1 + 1);
LABEL_29:
          v42 = *v17;
          *v17 = *v34;
          *v34 = v42;
        }
      }
LABEL_30:
      v43 = (char *)(a1 + 6);
      if (a1 + 6 == (unint64_t *)a2)
        return 1;
      v44 = 0;
      while (1)
      {
        v45 = *(_QWORD *)v43;
        v46 = *v13;
        if (*(_QWORD *)v43 < *v13)
        {
          v47 = *((_QWORD *)v43 + 1);
          v48 = (unint64_t *)v43;
          *(_QWORD *)v43 = 0;
          *((_QWORD *)v43 + 1) = 0;
          while (1)
          {
            v49 = v48;
            v48 = v13;
            v50 = v13[1];
            *v48 = 0;
            v48[1] = 0;
            v51 = (std::__shared_weak_count *)v49[1];
            *v49 = v46;
            v49[1] = v50;
            if (v51)
            {
              p_shared_owners = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(p_shared_owners);
              while (__stlxr(v53 - 1, p_shared_owners));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            if (v48 == a1)
              break;
            v13 = v48 - 2;
            v46 = *(v48 - 2);
            if (v45 >= v46)
              goto LABEL_45;
          }
          v48 = a1;
LABEL_45:
          v54 = (std::__shared_weak_count *)v48[1];
          *v48 = v45;
          v48[1] = v47;
          if (v54)
          {
            v55 = (unint64_t *)&v54->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
          if (++v44 == 8)
            return v43 + 16 == a2;
        }
        v13 = (unint64_t *)v43;
        v43 += 16;
        if (v43 == a2)
          return 1;
      }
  }
}

void sub_19F895EDC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1[35];
  v1[35] = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C407D563059);
  md::MuninRoadLabeler::{unnamed type#1}::~MuninRoadLabeler(v1 + 16);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v1 + 13));
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v1 + 10));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 7));
  v4 = v1[4];
  v1[4] = 0;
  if (v4)
    std::default_delete<md::MuninRoadLabelPool>::operator()[abi:nn180100](v4);
  v5 = v1[3];
  v1[3] = 0;
  if (v5)
    MEMORY[0x1A1AF4E00](v5, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t *md::MuninRoadLabeler::{unnamed type#1}::~MuninRoadLabeler(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  md::MuninRoadGraphZData *v17;
  md::MuninRoadGraph *v18;
  uint64_t v19;

  v2 = (_QWORD *)a1[16];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[14];
  a1[14] = 0;
  if (v4)
    operator delete(v4);
  v5 = a1[11];
  if (v5)
  {
    v6 = a1[12];
    v7 = (void *)a1[11];
    if (v6 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = (void *)a1[11];
    }
    a1[12] = v5;
    operator delete(v7);
  }
  v11 = a1[8];
  if (v11)
  {
    v12 = a1[9];
    v13 = (void *)a1[8];
    if (v12 != v11)
    {
      do
      {
        v14 = *(std::__shared_weak_count **)(v12 - 8);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 16;
      }
      while (v12 != v11);
      v13 = (void *)a1[8];
    }
    a1[9] = v11;
    operator delete(v13);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy((_QWORD *)a1[6]);
  v17 = (md::MuninRoadGraphZData *)a1[2];
  a1[2] = 0;
  if (v17)
  {
    md::MuninRoadGraphZData::~MuninRoadGraphZData(v17);
    MEMORY[0x1A1AF4E00]();
  }
  v18 = (md::MuninRoadGraph *)a1[1];
  a1[1] = 0;
  if (v18)
  {
    md::MuninRoadGraph::~MuninRoadGraph(v18);
    MEMORY[0x1A1AF4E00]();
  }
  v19 = *a1;
  *a1 = 0;
  if (v19)
    MEMORY[0x1A1AF4E00](v19, 0x1000C407D563059);
  return a1;
}

void std::default_delete<md::MuninRoadLabelPool>::operator()[abi:nn180100](uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(uint64_t **)(a1 + 64);
  if (v2)
  {
    do
    {
      v4 = (uint64_t *)*v2;
      v5 = (std::__shared_weak_count *)v2[7];
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      if (*((char *)v2 + 39) < 0)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[5] + 40))(v2[5], v2[2], v2[4] & 0x7FFFFFFFFFFFFFFFLL);
      (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), v2, 64);
      v2 = v4;
    }
    while (v4);
  }
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56), v3, 8 * *(_QWORD *)(a1 + 48));
  std::__tree<std::shared_ptr<md::MuninRoadLabel>,std::less<std::shared_ptr<md::MuninRoadLabel>>,geo::StdAllocator<std::shared_ptr<md::MuninRoadLabel>,mdm::Allocator>>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x1A1AF4E00);
}

void md::ARWalkingAppSimulatedMapEngineMode::~ARWalkingAppSimulatedMapEngineMode(md::ARWalkingAppSimulatedMapEngineMode *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = off_1E429C660;
  *((_QWORD *)this + 73) = &off_1E42B54D0;

  v2 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 70);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  md::MapEngineMode::~MapEngineMode(this);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = off_1E429C660;
  *((_QWORD *)this + 73) = &off_1E42B54D0;

  v2 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 70);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

double md::ARWalkingAppSimulatedMapEngineMode::buildLocationProvider@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v4;
  double result;

  v4 = operator new();
  result = 0.0;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)v4 = &off_1E429A798;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *a1 = v4;
  return result;
}

uint64_t md::ARWalkingMapEngineMode::buildScene()
{
  return 0;
}

uint64_t md::ARWalkingMapEngineMode::getSession(md::ARWalkingMapEngineMode *this)
{
  return 0;
}

_QWORD *std::vector<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,geo::StdAllocator<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  BOOL v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  md::LabelLineStore::WorkUnit *v30;
  md::LabelLineStore::WorkUnit *v31;
  unsigned __int8 v32;
  uint64_t v33;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v5 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  if (v5 >> 2 > v3)
    v3 = v5 >> 2;
  v19 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8;
  v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v19)
    v6 = v3;
  if (v6)
  {
    v8 = 8 * v6;
    v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * v6, 8);
    v10 = (_QWORD *)(v9 + 8 * v2);
    v6 = v9 + v8;
    if (v9)
    {
      v11 = *a2;
      *a2 = 0;
      *v10 = v11;
    }
  }
  else
  {
    v10 = (_QWORD *)(8 * v2);
  }
  v12 = v10 + 1;
  v13 = *(char **)a1;
  v14 = *(char **)(a1 + 8);
  if (v14 == *(char **)a1)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_32;
  }
  v15 = (unint64_t)&v14[-*(_QWORD *)a1 - 8];
  if (v15 <= 0x57
    || ((v16 = (v13 - v14 + 7) & 0xFFFFFFFFFFFFFFF8,
         v17 = (unint64_t)&v14[v16],
         v18 = (char *)v10 + v16,
         v17 < (unint64_t)v10)
      ? (v19 = v18 >= v14)
      : (v19 = 1),
        !v19))
  {
    v21 = *(char **)(a1 + 8);
    do
    {
LABEL_22:
      v27 = *((_QWORD *)v21 - 1);
      v21 -= 8;
      *(_QWORD *)v21 = 0;
      *--v10 = v27;
    }
    while (v21 != v13);
    goto LABEL_23;
  }
  v20 = (v15 >> 3) + 1;
  v21 = &v14[-8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
  v22 = v10 - 2;
  v23 = v14 - 32;
  v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v26 = *(_OWORD *)v23;
    v25 = *((_OWORD *)v23 + 1);
    *(_OWORD *)v23 = 0uLL;
    *((_OWORD *)v23 + 1) = 0uLL;
    v23 -= 32;
    *(v22 - 1) = v26;
    *v22 = v25;
    v22 -= 2;
    v24 -= 4;
  }
  while (v24);
  v10 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_22;
LABEL_23:
  v14 = *(char **)a1;
  v28 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  v29 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  while (v28 != v14)
  {
    v31 = (md::LabelLineStore::WorkUnit *)*((_QWORD *)v28 - 1);
    v28 -= 8;
    v30 = v31;
    *(_QWORD *)v28 = 0;
    if (v31)
    {
      md::LabelLineStore::WorkUnit::~WorkUnit(v30);
      {
        v33 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v33, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      (*(void (**)(uint64_t, md::LabelLineStore::WorkUnit *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v30, 248);
    }
  }
LABEL_32:
  if (v14)
    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v14, v29 - (_QWORD)v14);
  return v12;
}

void md::LabelLineStore::addRoadFeature(uint64_t a1, uint64_t *a2, char **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned __int8 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  md::LabelLineStore::WorkUnit *v29;
  unsigned __int8 v30;
  unint64_t *v31;
  unint64_t v32;
  md::LabelLineStore::WorkUnit **v33;
  md::LabelLineStore::WorkUnit *v34;
  _QWORD *v35;
  md::LabelLineStore::WorkUnit *v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  md::LabelLineStore::WorkUnit *v45;

  v45 = 0;
  if (a4)
  {
    v11 = (std::__shared_weak_count *)a2[1];
    if (v11)
    {
      v12 = std::__shared_weak_count::lock(v11);
      if (v12)
      {
        v13 = *a2;
        if ((v14 & 1) == 0)
        {
LABEL_34:
          {
            v38 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v38, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
        }
LABEL_10:
        v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                   + 16))(mdm::Allocator::instance(void)::alloc, 248, 8);
        *(_DWORD *)v19 = 5;
        *(_QWORD *)(v19 + 8) = v13;
        *(_QWORD *)(v19 + 16) = v12;
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        *(_QWORD *)(v19 + 88) = 0;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        if ((v22 & 1) == 0)
        {
          v39 = v19;
          v19 = v39;
          if (v40)
          {
            v41 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v41, "VectorKitLabels", 0x5ED09DD50000000FLL);
            v19 = v39;
          }
        }
        *(_QWORD *)(v19 + 96) = mdm::Allocator::instance(void)::alloc;
        *(_QWORD *)(v19 + 104) = a4;
        *(_QWORD *)(v19 + 112) = 0;
        *(_QWORD *)(v19 + 120) = 0;
        *(_QWORD *)(v19 + 128) = a6;
        *(_QWORD *)(v19 + 136) = *(_QWORD *)a5;
        *(_WORD *)(v19 + 144) = *(_WORD *)(a5 + 8);
        *(_QWORD *)(v19 + 148) = *(_QWORD *)(a5 + 12);
        v23 = *(_OWORD *)(a5 + 32);
        v24 = *(_OWORD *)(a5 + 48);
        v25 = *(_OWORD *)(a5 + 64);
        *(_OWORD *)(v19 + 211) = *(_OWORD *)(a5 + 75);
        *(_OWORD *)(v19 + 200) = v25;
        *(_OWORD *)(v19 + 184) = v24;
        *(_OWORD *)(v19 + 168) = v23;
        *(_QWORD *)(v19 + 232) = *(_QWORD *)(a5 + 96);
        v26 = *(_QWORD *)(a5 + 104);
        *(_QWORD *)(v19 + 240) = v26;
        if (v26)
        {
          v27 = (unint64_t *)(v26 + 8);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = v45;
        v45 = (md::LabelLineStore::WorkUnit *)v19;
        if (v29)
        {
          md::LabelLineStore::WorkUnit::~WorkUnit(v29);
          {
            v43 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v43, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          (*(void (**)(uint64_t, md::LabelLineStore::WorkUnit *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                   + 40))(mdm::Allocator::instance(void)::alloc, v29, 248);
        }
        if (v12)
        {
          v31 = (unint64_t *)&v12->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        goto LABEL_25;
      }
    }
    else
    {
      v12 = 0;
    }
    v13 = 0;
    if ((v18 & 1) == 0)
      goto LABEL_34;
    goto LABEL_10;
  }
  {
    v44 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v44, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 248, 8);
  v45 = (md::LabelLineStore::WorkUnit *)md::LabelLineStore::WorkUnit::WorkUnit(v17, 0, a2, a3, a5, a6);
LABEL_25:
  std::mutex::lock((std::mutex *)(a1 + 16));
  v33 = *(md::LabelLineStore::WorkUnit ***)(a1 + 96);
  if ((unint64_t)v33 >= *(_QWORD *)(a1 + 104))
  {
    v35 = std::vector<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,geo::StdAllocator<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>>(a1 + 88, (uint64_t *)&v45);
  }
  else
  {
    if (v33)
    {
      v34 = v45;
      v45 = 0;
      *v33 = v34;
    }
    v35 = v33 + 1;
  }
  *(_QWORD *)(a1 + 96) = v35;
  atomic_store(1u, (unsigned __int8 *)(a1 + 80));
  std::mutex::unlock((std::mutex *)(a1 + 16));
  v36 = v45;
  v45 = 0;
  if (v36)
  {
    md::LabelLineStore::WorkUnit::~WorkUnit(v36);
    if ((v37 & 1) == 0)
    {
      {
        v42 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v42, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
    }
    (*(void (**)(uint64_t, md::LabelLineStore::WorkUnit *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v36, 248);
  }
}

void sub_19F896B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, md::LabelLineStore::WorkUnit *a12)
{
  std::mutex *v12;

  std::mutex::unlock(v12);
  std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>::~unique_ptr[abi:nn180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t md::LabelLineStore::WorkUnit::WorkUnit(uint64_t a1, int a2, uint64_t *a3, char **a4, uint64_t a5, uint64_t a6)
{
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char *v16;
  char *v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29;

  *(_DWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  if (a3)
  {
    v11 = (std::__shared_weak_count *)a3[1];
    if (v11 && (v11 = std::__shared_weak_count::lock(v11)) != 0)
      v12 = *a3;
    else
      v12 = 0;
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v13 = *(std::__shared_weak_count **)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v11;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *a4;
  v17 = a4[1];
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  {
    v29 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v29, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v19 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 96) = mdm::Allocator::instance(void)::alloc;
  v20 = v17 - v16;
  if (v17 != v16)
  {
    if (v20 < 0)
      abort();
    v21 = (_DWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17 - v16, 4);
    *(_QWORD *)(a1 + 72) = v21;
    *(_QWORD *)(a1 + 88) = &v21[v20 >> 2];
    do
    {
      if (v21)
        *v21 = *(_DWORD *)v16;
      v16 += 4;
      ++v21;
    }
    while (v16 != v17);
    *(_QWORD *)(a1 + 80) = v21;
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a6;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)a5;
  *(_WORD *)(a1 + 144) = *(_WORD *)(a5 + 8);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a5 + 12);
  v22 = *(_OWORD *)(a5 + 32);
  v23 = *(_OWORD *)(a5 + 48);
  v24 = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(a1 + 211) = *(_OWORD *)(a5 + 75);
  *(_OWORD *)(a1 + 200) = v24;
  *(_OWORD *)(a1 + 184) = v23;
  *(_OWORD *)(a1 + 168) = v22;
  v25 = *(_QWORD *)(a5 + 104);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a5 + 96);
  *(_QWORD *)(a1 + 240) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  return a1;
}

void sub_19F896D80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  md::components::Material *v3;

  md::components::Material::~Material(v3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 24);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

md::LabelLineStore::WorkUnit **std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>::~unique_ptr[abi:nn180100](md::LabelLineStore::WorkUnit **a1)
{
  md::LabelLineStore::WorkUnit *v2;
  unsigned __int8 v3;
  uint64_t v5;
  geo::read_write_lock *v6;
  const char *v7;
  malloc_zone_t *zone;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::LabelLineStore::WorkUnit::~WorkUnit(v2);
    {
      v5 = operator new();
      *(_QWORD *)(v5 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v5 + 24) = "VectorKitLabels";
      *(_OWORD *)(v5 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v5 = &off_1E42B5668;
      *(_QWORD *)(v5 + 8) = "VectorKitLabels";
      *(_OWORD *)(v5 + 72) = 0u;
      *(_OWORD *)(v5 + 88) = 0u;
      *(_OWORD *)(v5 + 104) = 0u;
      *(_OWORD *)(v5 + 120) = 0u;
      *(_OWORD *)(v5 + 136) = 0u;
      *(_OWORD *)(v5 + 152) = 0u;
      *(_OWORD *)(v5 + 168) = 0u;
      *(_OWORD *)(v5 + 184) = 0u;
      *(_OWORD *)(v5 + 200) = 0u;
      *(_OWORD *)(v5 + 216) = 0u;
      *(_OWORD *)(v5 + 232) = 0u;
      *(_QWORD *)(v5 + 248) = 0;
      *(_OWORD *)(v5 + 56) = 0u;
      v6 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v5 + 56), 0);
      if ((_DWORD)v6)
        geo::read_write_lock::logFailure(v6, (uint64_t)"initialization", v7);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v5 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v5 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v5;
    }
    (*(void (**)(uint64_t, md::LabelLineStore::WorkUnit *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v2, 248);
  }
  return a1;
}

void md::LabelLineStore::removeRoadFeaturesInTile<geo::codec::VectorTile>(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  unsigned __int8 v11;
  uint64_t *v12;
  _QWORD *v13;
  unsigned __int8 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  {
    v15 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v15, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 248, 8);
  v6 = v5;
  *(_DWORD *)v5 = 9;
  v7 = a2[1];
  *(_QWORD *)(v5 + 8) = *a2;
  *(_QWORD *)(v5 + 16) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(v5 + 88) = 0;
  v10 = 0uLL;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  if ((v11 & 1) == 0)
  {
    v10 = 0uLL;
    if (v16)
    {
      v17 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v17, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v10 = 0uLL;
    }
  }
  *(_QWORD *)(v6 + 96) = mdm::Allocator::instance(void)::alloc;
  *(_OWORD *)(v6 + 104) = v10;
  *(_OWORD *)(v6 + 120) = v10;
  *(_QWORD *)(v6 + 136) = 0;
  *(_WORD *)(v6 + 144) = 255;
  *(_DWORD *)(v6 + 148) = 0;
  *(_DWORD *)(v6 + 152) = 0;
  *(_QWORD *)(v6 + 168) = 0;
  *(_QWORD *)(v6 + 176) = 0;
  *(int64x2_t *)(v6 + 184) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(v6 + 200) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_BYTE *)(v6 + 216) = 0;
  *(_DWORD *)(v6 + 220) = 0;
  *(_WORD *)(v6 + 224) = 256;
  *(_BYTE *)(v6 + 226) = 0;
  *(_QWORD *)(v6 + 232) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  v19 = v6;
  std::mutex::lock((std::mutex *)(a1 + 16));
  v12 = *(uint64_t **)(a1 + 96);
  if ((unint64_t)v12 >= *(_QWORD *)(a1 + 104))
  {
    v13 = std::vector<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,geo::StdAllocator<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>>(a1 + 88, &v19);
    v6 = v19;
  }
  else
  {
    if (v12)
    {
      v19 = 0;
      *v12 = v6;
      v6 = 0;
    }
    v13 = v12 + 1;
  }
  *(_QWORD *)(a1 + 96) = v13;
  atomic_store(1u, (unsigned __int8 *)(a1 + 80));
  std::mutex::unlock((std::mutex *)(a1 + 16));
  v19 = 0;
  if (v6)
  {
    md::LabelLineStore::WorkUnit::~WorkUnit((md::LabelLineStore::WorkUnit *)v6);
    if ((v14 & 1) == 0)
    {
      {
        v18 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v18, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v6, 248);
  }
}

void sub_19F8971B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, md::LabelLineStore::WorkUnit *a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);
  std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>::~unique_ptr[abi:nn180100](&a10);
  _Unwind_Resume(a1);
}

void md::LabelLineStore::addContourLine(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v8;
  md::LabelLineStore::WorkUnit *v9;
  md::LabelLineStore::WorkUnit **v10;
  _QWORD *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  md::LabelLineStore::WorkUnit *v15;

  {
    v13 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v13, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v9 = (md::LabelLineStore::WorkUnit *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                            + 16))(mdm::Allocator::instance(void)::alloc, 248, 8);
  v15 = (md::LabelLineStore::WorkUnit *)md::LabelLineStore::WorkUnit::WorkUnit((uint64_t)v9, 1, a2, a3);
  *((_QWORD *)v15 + 16) = a4;
  std::mutex::lock((std::mutex *)(a1 + 16));
  v10 = *(md::LabelLineStore::WorkUnit ***)(a1 + 96);
  if ((unint64_t)v10 >= *(_QWORD *)(a1 + 104))
  {
    v11 = std::vector<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,geo::StdAllocator<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>>(a1 + 88, (uint64_t *)&v15);
    v9 = v15;
  }
  else
  {
    if (v10)
    {
      v15 = 0;
      *v10 = v9;
      v9 = 0;
    }
    v11 = v10 + 1;
  }
  *(_QWORD *)(a1 + 96) = v11;
  atomic_store(1u, (unsigned __int8 *)(a1 + 80));
  std::mutex::unlock((std::mutex *)(a1 + 16));
  v15 = 0;
  if (v9)
  {
    md::LabelLineStore::WorkUnit::~WorkUnit(v9);
    if ((v12 & 1) == 0)
    {
      {
        v14 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v14, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
    }
    (*(void (**)(uint64_t, md::LabelLineStore::WorkUnit *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v9, 248);
  }
}

void sub_19F8973B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, md::LabelLineStore::WorkUnit *a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);
  std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>::~unique_ptr[abi:nn180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t md::LabelLineStore::WorkUnit::WorkUnit(uint64_t a1, int a2, uint64_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  unsigned __int8 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int v21;
  uint64_t v22;
  geo::read_write_lock *v23;
  const char *v24;
  malloc_zone_t *zone;

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = a3;
  if (a3)
  {
    v7 = (std::__shared_weak_count *)a3[1];
    if (v7 && (v7 = std::__shared_weak_count::lock(v7)) != 0)
      v8 = *a3;
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v9 = *(std::__shared_weak_count **)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v7;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = 0uLL;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  if ((v13 & 1) == 0)
  {
    v12 = 0uLL;
    if (v21)
    {
      v22 = operator new();
      *(_QWORD *)(v22 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v22 + 24) = "VectorKitLabels";
      *(_OWORD *)(v22 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v22 = &off_1E42B5668;
      *(_QWORD *)(v22 + 8) = "VectorKitLabels";
      *(_OWORD *)(v22 + 72) = 0u;
      *(_OWORD *)(v22 + 88) = 0u;
      *(_OWORD *)(v22 + 104) = 0u;
      *(_OWORD *)(v22 + 120) = 0u;
      *(_OWORD *)(v22 + 136) = 0u;
      *(_OWORD *)(v22 + 152) = 0u;
      *(_OWORD *)(v22 + 168) = 0u;
      *(_OWORD *)(v22 + 184) = 0u;
      *(_OWORD *)(v22 + 200) = 0u;
      *(_OWORD *)(v22 + 216) = 0u;
      *(_OWORD *)(v22 + 232) = 0u;
      *(_QWORD *)(v22 + 248) = 0;
      *(_OWORD *)(v22 + 56) = 0u;
      v23 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v22 + 56), 0);
      if ((_DWORD)v23)
        geo::read_write_lock::logFailure(v23, (uint64_t)"initialization", v24);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v22 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v22 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v22;
      v12 = 0uLL;
    }
  }
  *(_QWORD *)(a1 + 96) = mdm::Allocator::instance(void)::alloc;
  *(_OWORD *)(a1 + 104) = v12;
  *(_OWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)a4;
  *(_WORD *)(a1 + 144) = *(_WORD *)(a4 + 8);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a4 + 12);
  v14 = *(_OWORD *)(a4 + 32);
  v15 = *(_OWORD *)(a4 + 48);
  v16 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a1 + 211) = *(_OWORD *)(a4 + 75);
  *(_OWORD *)(a1 + 200) = v16;
  *(_OWORD *)(a1 + 184) = v15;
  *(_OWORD *)(a1 + 168) = v14;
  v17 = *(_QWORD *)(a4 + 104);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a4 + 96);
  *(_QWORD *)(a1 + 240) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  return a1;
}

void md::LabelLineStore::addOverlayLine(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unsigned __int8 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  {
    v20 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v20, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 248, 8);
  *(_DWORD *)v7 = 2;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    *(_QWORD *)(v7 + 32) = v9;
    if (v9)
      *(_QWORD *)(v7 + 24) = *a2;
  }
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 64) = a2;
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  *(_QWORD *)(v7 + 72) = 0;
  {
    v21 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v21, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *(_QWORD *)(v7 + 96) = mdm::Allocator::instance(void)::alloc;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 120) = 0u;
  *(_QWORD *)(v7 + 136) = *(_QWORD *)a3;
  *(_WORD *)(v7 + 144) = *(_WORD *)(a3 + 8);
  *(_QWORD *)(v7 + 148) = *(_QWORD *)(a3 + 12);
  v11 = *(_OWORD *)(a3 + 32);
  v12 = *(_OWORD *)(a3 + 48);
  v13 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v7 + 211) = *(_OWORD *)(a3 + 75);
  *(_OWORD *)(v7 + 200) = v13;
  *(_OWORD *)(v7 + 184) = v12;
  *(_OWORD *)(v7 + 168) = v11;
  v14 = *(_QWORD *)(a3 + 104);
  *(_QWORD *)(v7 + 232) = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(v7 + 240) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v23 = v7;
  std::mutex::lock((std::mutex *)(a1 + 16));
  v17 = *(uint64_t **)(a1 + 96);
  if ((unint64_t)v17 >= *(_QWORD *)(a1 + 104))
  {
    v18 = std::vector<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,geo::StdAllocator<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>>(a1 + 88, &v23);
    v7 = v23;
  }
  else
  {
    if (v17)
    {
      v23 = 0;
      *v17 = v7;
      v7 = 0;
    }
    v18 = v17 + 1;
  }
  *(_QWORD *)(a1 + 96) = v18;
  atomic_store(1u, (unsigned __int8 *)(a1 + 80));
  std::mutex::unlock((std::mutex *)(a1 + 16));
  v23 = 0;
  if (v7)
  {
    md::LabelLineStore::WorkUnit::~WorkUnit((md::LabelLineStore::WorkUnit *)v7);
    if ((v19 & 1) == 0)
    {
      {
        v22 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v7, 248);
  }
}

void sub_19F8978C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, md::LabelLineStore::WorkUnit *a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);
  std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>::~unique_ptr[abi:nn180100](&a10);
  _Unwind_Resume(a1);
}

void md::LabelLineStore::addPhysicalFeature(uint64_t a1, uint64_t *a2, char **a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v10;
  md::LabelLineStore::WorkUnit *v11;
  md::LabelLineStore::WorkUnit **v12;
  _QWORD *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  md::LabelLineStore::WorkUnit *v17;

  {
    v15 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v15, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v11 = (md::LabelLineStore::WorkUnit *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                             + 16))(mdm::Allocator::instance(void)::alloc, 248, 8);
  v17 = (md::LabelLineStore::WorkUnit *)md::LabelLineStore::WorkUnit::WorkUnit((uint64_t)v11, 3, a2, a3, a4, a5);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v12 = *(md::LabelLineStore::WorkUnit ***)(a1 + 96);
  if ((unint64_t)v12 >= *(_QWORD *)(a1 + 104))
  {
    v13 = std::vector<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,geo::StdAllocator<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>>(a1 + 88, (uint64_t *)&v17);
    v11 = v17;
  }
  else
  {
    if (v12)
    {
      v17 = 0;
      *v12 = v11;
      v11 = 0;
    }
    v13 = v12 + 1;
  }
  *(_QWORD *)(a1 + 96) = v13;
  atomic_store(1u, (unsigned __int8 *)(a1 + 80));
  std::mutex::unlock((std::mutex *)(a1 + 16));
  v17 = 0;
  if (v11)
  {
    md::LabelLineStore::WorkUnit::~WorkUnit(v11);
    if ((v14 & 1) == 0)
    {
      {
        v16 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v16, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
    }
    (*(void (**)(uint64_t, md::LabelLineStore::WorkUnit *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v11, 248);
  }
}

void sub_19F897AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, md::LabelLineStore::WorkUnit *a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);
  std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>::~unique_ptr[abi:nn180100](&a10);
  _Unwind_Resume(a1);
}

void md::LabelLineStore::addExternalRoadFeature(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unsigned __int8 v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  md::LabelLineStore::WorkUnit **v15;
  md::LabelLineStore::WorkUnit *v16;
  _QWORD *v17;
  md::LabelLineStore::WorkUnit *v18;
  unsigned __int8 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  md::LabelLineStore::WorkUnit *v26;

  {
    v20 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v20, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 248, 8);
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_DWORD *)v5 = 6;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_QWORD *)(v5 + 88) = 0;
  if ((v10 & 1) == 0)
  {
    v24 = v6;
    v25 = v5;
    v6 = v24;
    v5 = v25;
    if (v21)
    {
      v22 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v6 = v24;
      v5 = v25;
    }
  }
  *(_QWORD *)(v5 + 96) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = v6;
  *(_QWORD *)(v5 + 120) = v7;
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(v5 + 128) = 0;
  *(_QWORD *)(v5 + 136) = 0;
  *(_WORD *)(v5 + 144) = 255;
  *(_DWORD *)(v5 + 148) = 0;
  *(_DWORD *)(v5 + 152) = 0;
  *(_QWORD *)(v5 + 168) = 0;
  *(_QWORD *)(v5 + 176) = 0;
  *(int64x2_t *)(v5 + 184) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(v5 + 200) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_BYTE *)(v5 + 216) = 0;
  *(_DWORD *)(v5 + 220) = 0;
  *(_WORD *)(v5 + 224) = 256;
  *(_BYTE *)(v5 + 226) = 0;
  *(_QWORD *)(v5 + 232) = 0;
  *(_QWORD *)(v5 + 240) = 0;
  v26 = (md::LabelLineStore::WorkUnit *)v5;
  if (v7)
  {
    v13 = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  std::mutex::lock((std::mutex *)(a1 + 16));
  v15 = *(md::LabelLineStore::WorkUnit ***)(a1 + 96);
  if ((unint64_t)v15 >= *(_QWORD *)(a1 + 104))
  {
    v17 = std::vector<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,geo::StdAllocator<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>>(a1 + 88, (uint64_t *)&v26);
  }
  else
  {
    if (v15)
    {
      v16 = v26;
      v26 = 0;
      *v15 = v16;
    }
    v17 = v15 + 1;
  }
  *(_QWORD *)(a1 + 96) = v17;
  atomic_store(1u, (unsigned __int8 *)(a1 + 80));
  std::mutex::unlock((std::mutex *)(a1 + 16));
  v18 = v26;
  v26 = 0;
  if (v18)
  {
    md::LabelLineStore::WorkUnit::~WorkUnit(v18);
    if ((v19 & 1) == 0)
    {
      {
        v23 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v23, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
    }
    (*(void (**)(uint64_t, md::LabelLineStore::WorkUnit *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v18, 248);
  }
}

void sub_19F897DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, md::LabelLineStore::WorkUnit *a12)
{
  std::mutex *v12;

  std::mutex::unlock(v12);
  std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>::~unique_ptr[abi:nn180100](&a12);
  _Unwind_Resume(a1);
}

void md::LabelLineStore::addTransitLineSegment(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int8 v6;
  md::LabelLineStore::WorkUnit *v7;
  md::LabelLineStore::WorkUnit **v8;
  _QWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  md::LabelLineStore::WorkUnit *v13;

  {
    v11 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v11, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v7 = (md::LabelLineStore::WorkUnit *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                            + 16))(mdm::Allocator::instance(void)::alloc, 248, 8);
  v13 = (md::LabelLineStore::WorkUnit *)md::LabelLineStore::WorkUnit::WorkUnit((uint64_t)v7, 8, a2, a3);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v8 = *(md::LabelLineStore::WorkUnit ***)(a1 + 96);
  if ((unint64_t)v8 >= *(_QWORD *)(a1 + 104))
  {
    v9 = std::vector<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,geo::StdAllocator<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>>(a1 + 88, (uint64_t *)&v13);
    v7 = v13;
  }
  else
  {
    if (v8)
    {
      v13 = 0;
      *v8 = v7;
      v7 = 0;
    }
    v9 = v8 + 1;
  }
  *(_QWORD *)(a1 + 96) = v9;
  atomic_store(1u, (unsigned __int8 *)(a1 + 80));
  std::mutex::unlock((std::mutex *)(a1 + 16));
  v13 = 0;
  if (v7)
  {
    md::LabelLineStore::WorkUnit::~WorkUnit(v7);
    if ((v10 & 1) == 0)
    {
      {
        v12 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v12, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
    }
    (*(void (**)(uint64_t, md::LabelLineStore::WorkUnit *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v7, 248);
  }
}

void sub_19F897FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, md::LabelLineStore::WorkUnit *a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);
  std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>::~unique_ptr[abi:nn180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t md::LabelLineZSet::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  geo::read_write_lock *v21;
  const char *v22;
  malloc_zone_t *zone;
  _QWORD *v24;
  _QWORD *v26;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = (uint64_t *)(a1 + 16);
  v5 = *(_QWORD **)(a1 + 16);
  v6 = (_QWORD *)(a2 + 16);
  if (v5)
  {
    v7 = *(_QWORD **)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 16);
    if (v7 != v5)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, v8);
      }
      while (v7 != v5);
      v8 = *v4;
    }
    *(_QWORD *)(a1 + 24) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), v8, *(_QWORD *)(a1 + 32) - v8);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  v11 = (_QWORD *)(a1 + 48);
  v12 = *(_QWORD **)(a1 + 48);
  if (v12)
  {
    v13 = *(_QWORD **)(a1 + 56);
    v14 = *(_QWORD *)(a1 + 48);
    if (v13 != v12)
    {
      do
      {
        v17 = *--v13;
        v16 = v17;
        *v13 = 0;
        if (v17)
        {
          v18 = *(_QWORD *)(v16 + 24);
          if (v18)
          {
            *(_QWORD *)(v16 + 32) = v18;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v16 + 48) + 40))(*(_QWORD *)(v16 + 48), v18, *(_QWORD *)(v16 + 40) - v18);
          }
          v19 = *(std::__shared_weak_count **)(v16 + 8);
          if (v19)
            std::__shared_weak_count::__release_weak(v19);
          {
            v26 = v11;
            v20 = operator new();
            *(_QWORD *)(v20 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v20 + 24) = "VectorKitLabels";
            *(_OWORD *)(v20 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v20 = &off_1E42B5668;
            *(_QWORD *)(v20 + 8) = "VectorKitLabels";
            *(_OWORD *)(v20 + 72) = 0u;
            *(_OWORD *)(v20 + 88) = 0u;
            *(_OWORD *)(v20 + 104) = 0u;
            *(_OWORD *)(v20 + 120) = 0u;
            *(_OWORD *)(v20 + 136) = 0u;
            *(_OWORD *)(v20 + 152) = 0u;
            *(_OWORD *)(v20 + 168) = 0u;
            *(_OWORD *)(v20 + 184) = 0u;
            *(_OWORD *)(v20 + 200) = 0u;
            *(_OWORD *)(v20 + 216) = 0u;
            *(_OWORD *)(v20 + 232) = 0u;
            *(_QWORD *)(v20 + 248) = 0;
            *(_OWORD *)(v20 + 56) = 0u;
            v21 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v20 + 56), 0);
            if ((_DWORD)v21)
              geo::read_write_lock::logFailure(v21, (uint64_t)"initialization", v22);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v20 + 48) = zone;
            malloc_set_zone_name(zone, "VectorKitLabels");
            *(_QWORD *)(v20 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v20;
            v11 = v26;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v16, 64);
        }
      }
      while (v13 != v12);
      v14 = *v11;
    }
    *(_QWORD *)(a1 + 56) = v12;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), v14, *(_QWORD *)(a1 + 64) - v14);
    *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v24 = *(_QWORD **)(a1 + 80);
  if (v24)
  {
    std::vector<std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>>,geo::StdAllocator<std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>>,mdm::Allocator>>::__base_destruct_at_end[abi:nn180100](a1 + 80, v24);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 104) + 40))(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 80));
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  return a1;
}

void std::__function::__func<md::LabelLineStore::updateLineSets(void)::$_1,std::allocator<md::LabelLineStore::updateLineSets(void)::$_1>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelLineStore::updateLineSets(void)::$_1,std::allocator<md::LabelLineStore::updateLineSets(void)::$_1>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CBCC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelLineStore::updateLineSets(void)::$_1,std::allocator<md::LabelLineStore::updateLineSets(void)::$_1>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CBCC0;
  a2[1] = v2;
  return result;
}

uint64_t std::vector<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,geo::StdAllocator<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,mdm::Allocator>>::~vector[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  malloc_zone_t *zone;
  md::LabelLineStore::WorkUnit *v6;
  md::LabelLineStore::WorkUnit *v7;
  unsigned __int8 v8;
  uint64_t v9;
  geo::read_write_lock *v10;
  const char *v11;
  _QWORD *v13;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(_QWORD **)(a1 + 8);
    v4 = *(_QWORD **)a1;
    if (v3 != v2)
    {
      do
      {
        v7 = (md::LabelLineStore::WorkUnit *)*--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          md::LabelLineStore::WorkUnit::~WorkUnit(v6);
          {
            v13 = v2;
            v9 = operator new();
            *(_QWORD *)(v9 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v9 + 24) = "VectorKitLabels";
            *(_OWORD *)(v9 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v9 = &off_1E42B5668;
            *(_QWORD *)(v9 + 8) = "VectorKitLabels";
            *(_OWORD *)(v9 + 72) = 0u;
            *(_OWORD *)(v9 + 88) = 0u;
            *(_OWORD *)(v9 + 104) = 0u;
            *(_OWORD *)(v9 + 120) = 0u;
            *(_OWORD *)(v9 + 136) = 0u;
            *(_OWORD *)(v9 + 152) = 0u;
            *(_OWORD *)(v9 + 168) = 0u;
            *(_OWORD *)(v9 + 184) = 0u;
            *(_OWORD *)(v9 + 200) = 0u;
            *(_OWORD *)(v9 + 216) = 0u;
            *(_OWORD *)(v9 + 232) = 0u;
            *(_QWORD *)(v9 + 248) = 0;
            *(_OWORD *)(v9 + 56) = 0u;
            v10 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v9 + 56), 0);
            if ((_DWORD)v10)
              geo::read_write_lock::logFailure(v10, (uint64_t)"initialization", v11);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v9 + 48) = zone;
            malloc_set_zone_name(zone, "VectorKitLabels");
            *(_QWORD *)(v9 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v9;
            v2 = v13;
          }
          (*(void (**)(uint64_t, md::LabelLineStore::WorkUnit *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                   + 40))(mdm::Allocator::instance(void)::alloc, v6, 248);
        }
      }
      while (v3 != v2);
      v4 = *(_QWORD **)a1;
    }
    *(_QWORD *)(a1 + 8) = v2;
    (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v4, *(_QWORD *)(a1 + 16) - (_QWORD)v4);
  }
  return a1;
}

uint64_t std::vector<md::LabelLineZSet,geo::StdAllocator<md::LabelLineZSet,mdm::Allocator>>::__emplace_back_slow_path<md::LabelLineStore *,unsigned char const&,unsigned char const&,md::LabelLineSource const&>(uint64_t *a1, uint64_t *a2, char *a3, char *a4, char *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v35;

  v5 = 0x249249249249249;
  v6 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x249249249249249)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4) > v7)
    v7 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) < 0x124924924924924)
    v5 = v7;
  if (v5)
  {
    v13 = 112 * v5;
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 112 * v5, 8);
    v15 = v14 + 112 * v6;
    v16 = v14 + v13;
    if (v14)
      v15 = md::LabelLineZSet::LabelLineZSet(v15, *a2, *a3, *a4, *a5);
  }
  else
  {
    v15 = 16 * ((a1[1] - *a1) >> 4);
    v16 = 0;
  }
  v17 = v15 + 112;
  v19 = *a1;
  v18 = a1[1];
  if (v18 == *a1)
  {
    v24 = vdupq_n_s64(v18);
  }
  else
  {
    v20 = 0;
    do
    {
      v21 = v15 + v20;
      v22 = v18 + v20;
      v23 = *(_OWORD *)(v18 + v20 - 112);
      *(_QWORD *)(v21 - 88) = 0;
      *(_QWORD *)(v21 - 80) = 0;
      *(_QWORD *)(v21 - 96) = 0;
      *(_OWORD *)(v21 - 112) = v23;
      *(_QWORD *)(v21 - 72) = *(_QWORD *)(v18 + v20 - 72);
      *(_OWORD *)(v21 - 96) = *(_OWORD *)(v18 + v20 - 96);
      *(_QWORD *)(v21 - 80) = *(_QWORD *)(v18 + v20 - 80);
      *(_QWORD *)(v22 - 96) = 0;
      *(_QWORD *)(v22 - 88) = 0;
      *(_QWORD *)(v22 - 80) = 0;
      *(_QWORD *)(v21 - 64) = 0;
      *(_QWORD *)(v21 - 56) = 0;
      *(_QWORD *)(v21 - 48) = 0;
      *(_QWORD *)(v21 - 40) = *(_QWORD *)(v18 + v20 - 40);
      *(_OWORD *)(v21 - 64) = *(_OWORD *)(v18 + v20 - 64);
      *(_QWORD *)(v21 - 48) = *(_QWORD *)(v18 + v20 - 48);
      *(_QWORD *)(v22 - 64) = 0;
      *(_QWORD *)(v22 - 56) = 0;
      *(_QWORD *)(v22 - 48) = 0;
      *(_QWORD *)(v21 - 32) = 0;
      *(_QWORD *)(v21 - 24) = 0;
      *(_QWORD *)(v21 - 16) = 0;
      *(_QWORD *)(v21 - 8) = *(_QWORD *)(v18 + v20 - 8);
      *(_OWORD *)(v21 - 32) = *(_OWORD *)(v18 + v20 - 32);
      *(_QWORD *)(v21 - 16) = *(_QWORD *)(v18 + v20 - 16);
      *(_QWORD *)(v22 - 32) = 0;
      *(_QWORD *)(v22 - 24) = 0;
      *(_QWORD *)(v22 - 16) = 0;
      v20 -= 112;
    }
    while (v18 + v20 != v19);
    v15 += v20;
    v24 = *(int64x2_t *)a1;
  }
  *a1 = v15;
  a1[1] = v17;
  v25 = a1[2];
  a1[2] = v16;
  v27 = v24.i64[1];
  v26 = v24.i64[0];
  while (v27 != v26)
  {
    v29 = *(_QWORD **)(v27 - 32);
    if (v29)
    {
      std::vector<std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>>,geo::StdAllocator<std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>>,mdm::Allocator>>::__base_destruct_at_end[abi:nn180100](v27 - 32, v29);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v27 - 8) + 40))(*(_QWORD *)(v27 - 8), *(_QWORD *)(v27 - 32), *(_QWORD *)(v27 - 16) - *(_QWORD *)(v27 - 32));
    }
    v35 = (uint64_t *)(v27 - 64);
    std::vector<std::unique_ptr<md::TileLabelLine,mdm::TypeDeleter<md::TileLabelLine>>,geo::StdAllocator<std::unique_ptr<md::TileLabelLine,mdm::TypeDeleter<md::TileLabelLine>>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100](&v35);
    v30 = *(_QWORD **)(v27 - 96);
    if (v30)
    {
      v31 = *(_QWORD **)(v27 - 88);
      v28 = *(_QWORD *)(v27 - 96);
      if (v31 != v30)
      {
        do
        {
          v33 = *--v31;
          v32 = v33;
          *v31 = 0;
          if (v33)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 8))(v32, v28);
        }
        while (v31 != v30);
        v28 = *(_QWORD *)(v27 - 96);
      }
      *(_QWORD *)(v27 - 88) = v30;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v27 - 72) + 40))(*(_QWORD *)(v27 - 72), v28, *(_QWORD *)(v27 - 80) - v28);
    }
    v27 -= 112;
  }
  if (v26)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v26, v25 - v26);
  return v17;
}

_QWORD *std::vector<std::unique_ptr<md::LabelLineSegment>,geo::StdAllocator<std::unique_ptr<md::LabelLineSegment>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineSegment>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  BOOL v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v5 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  if (v5 >> 2 > v3)
    v3 = v5 >> 2;
  v19 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8;
  v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v19)
    v6 = v3;
  if (v6)
  {
    v8 = 8 * v6;
    v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * v6, 8);
    v10 = (_QWORD *)(v9 + 8 * v2);
    v6 = v9 + v8;
    if (v9)
    {
      v11 = *a2;
      *a2 = 0;
      *v10 = v11;
    }
  }
  else
  {
    v10 = (_QWORD *)(8 * v2);
  }
  v12 = v10 + 1;
  v13 = *(char **)a1;
  v14 = *(char **)(a1 + 8);
  if (v14 == *(char **)a1)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_28;
  }
  v15 = (unint64_t)&v14[-*(_QWORD *)a1 - 8];
  if (v15 > 0x57
    && ((v16 = (v13 - v14 + 7) & 0xFFFFFFFFFFFFFFF8,
         v17 = (unint64_t)&v14[v16],
         v18 = (char *)v10 + v16,
         v17 < (unint64_t)v10)
      ? (v19 = v18 >= v14)
      : (v19 = 1),
        v19))
  {
    v20 = (v15 >> 3) + 1;
    v21 = &v14[-8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
    v22 = v10 - 2;
    v23 = v14 - 32;
    v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v23;
      v25 = *((_OWORD *)v23 + 1);
      *(_OWORD *)v23 = 0uLL;
      *((_OWORD *)v23 + 1) = 0uLL;
      v23 -= 32;
      *(v22 - 1) = v26;
      *v22 = v25;
      v22 -= 2;
      v24 -= 4;
    }
    while (v24);
    v10 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
    if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_23;
  }
  else
  {
    v21 = *(char **)(a1 + 8);
  }
  do
  {
    v27 = *((_QWORD *)v21 - 1);
    v21 -= 8;
    *(_QWORD *)v21 = 0;
    *--v10 = v27;
  }
  while (v21 != v13);
LABEL_23:
  v14 = *(char **)a1;
  v28 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  v29 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  while (v28 != v14)
  {
    v31 = *((_QWORD *)v28 - 1);
    v28 -= 8;
    v30 = v31;
    *(_QWORD *)v28 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
LABEL_28:
  if (v14)
    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v14, v29 - (_QWORD)v14);
  return v12;
}

void md::LabelLineSegment::~LabelLineSegment(md::LabelLineSegment *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E4291B50;
  v1 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    MEMORY[0x1A1AF4E00](v1, 0x1020C40457A241BLL);
  }
}

_QWORD *md::FixedLabelLineSegment<5ul>::~FixedLabelLineSegment(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = off_1E4291B50;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C40457A241BLL);
  }
  return a1;
}

uint64_t md::FixedLabelLineSegment<5ul>::~FixedLabelLineSegment(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t v8;

  *a1 = off_1E4291B50;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C40457A241BLL);
  }
  {
    v8 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v8, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, a1, 312);
}

_QWORD *md::FixedLabelLineSegment<4ul>::~FixedLabelLineSegment(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = off_1E4291B50;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C40457A241BLL);
  }
  return a1;
}

uint64_t md::FixedLabelLineSegment<4ul>::~FixedLabelLineSegment(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t v8;

  *a1 = off_1E4291B50;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C40457A241BLL);
  }
  {
    v8 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v8, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, a1, 256);
}

_QWORD *md::FixedLabelLineSegment<3ul>::~FixedLabelLineSegment(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = off_1E4291B50;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C40457A241BLL);
  }
  return a1;
}

uint64_t md::FixedLabelLineSegment<3ul>::~FixedLabelLineSegment(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t v8;

  *a1 = off_1E4291B50;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C40457A241BLL);
  }
  {
    v8 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v8, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, a1, 208);
}

_QWORD *md::FixedLabelLineSegment<2ul>::~FixedLabelLineSegment(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = off_1E4291B50;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C40457A241BLL);
  }
  return a1;
}

uint64_t md::FixedLabelLineSegment<2ul>::~FixedLabelLineSegment(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t v8;

  *a1 = off_1E4291B50;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C40457A241BLL);
  }
  {
    v8 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v8, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, a1, 152);
}

void md::LabelLineSegmentImpl::~LabelLineSegmentImpl(md::LabelLineSegmentImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = off_1E4299158;
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), v2, *((_QWORD *)this + 12) - v2);
  }
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), v3, *((_QWORD *)this + 8) - v3);
  }
  *(_QWORD *)this = off_1E4291B50;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(v4 + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    MEMORY[0x1A1AF4E00](v4, 0x1020C40457A241BLL);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E4299158;
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), v2, *((_QWORD *)this + 12) - v2);
  }
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), v3, *((_QWORD *)this + 8) - v3);
  }
  *(_QWORD *)this = off_1E4291B50;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(v4 + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    MEMORY[0x1A1AF4E00](v4, 0x1020C40457A241BLL);
  }
  {
    v9 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v9, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  (*(void (**)(uint64_t, md::LabelLineSegmentImpl *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                       + 40))(mdm::Allocator::instance(void)::alloc, this, 112);
}

_QWORD *md::LabelLineStore::addSegment<GeoCodecsContourLinesFeature>(uint64_t a1, uint64_t a2, int a3, int a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  uint64_t v21;
  unsigned __int8 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _WORD v35[2];
  int v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;

  v50 = 0;
  v35[0] = *(_WORD *)(a1 + 121);
  v36 = a3;
  LOBYTE(v37) = a5;
  HIBYTE(v37) = a4;
  v38 = a6;
  v39 = a7;
  v40 = a8;
  v41 = a9;
  v42 = 0;
  v43 = 0;
  v44 = a10;
  v45 = 0;
  v46 = 0;
  v47 = a11;
  v48 = 0;
  v49 = *(_BYTE *)(a1 + 290);
  switch(a10)
  {
    case 2:
      {
        v28 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v28, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 152, 8);
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = a2;
      *(_QWORD *)(v16 + 24) = 0;
      *(_BYTE *)(v16 + 32) = 3;
      *(_BYTE *)(v16 + 33) = v49;
      *(_WORD *)(v16 + 34) = v37;
      *(_WORD *)(v16 + 36) = 0;
      *(_DWORD *)(v16 + 40) = v47;
      *(_WORD *)(v16 + 44) = v36;
      *(_WORD *)(v16 + 46) = v44;
      *(_QWORD *)v16 = off_1E429B0A0;
      *(_QWORD *)(v16 + 80) = 0;
      *(_OWORD *)(v16 + 48) = 0u;
      *(_OWORD *)(v16 + 64) = 0u;
      *(_DWORD *)(v16 + 88) = 2139095039;
      *(_WORD *)(v16 + 92) = 0;
      *(_BYTE *)(v16 + 94) = 0;
      *(_QWORD *)(v16 + 128) = 0;
      *(_OWORD *)(v16 + 96) = 0u;
      *(_OWORD *)(v16 + 112) = 0u;
      *(_DWORD *)(v16 + 136) = 2139095039;
      *(_WORD *)(v16 + 140) = 0;
      *(_BYTE *)(v16 + 142) = 0;
      *(_QWORD *)(v16 + 144) = 0x7F7F00007F7FLL;
      md::LabelLineSegment::createLists((unsigned __int16 *)v16, (uint64_t)v35);
      break;
    case 3:
      {
        v32 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v32, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 208, 8);
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = a2;
      *(_QWORD *)(v16 + 24) = 0;
      *(_BYTE *)(v16 + 32) = 3;
      *(_BYTE *)(v16 + 33) = v49;
      *(_WORD *)(v16 + 34) = v37;
      *(_WORD *)(v16 + 36) = 0;
      *(_DWORD *)(v16 + 40) = v47;
      *(_WORD *)(v16 + 44) = v36;
      *(_WORD *)(v16 + 46) = v44;
      *(_QWORD *)v16 = off_1E429B0F8;
      *(_QWORD *)(v16 + 80) = 0;
      *(_OWORD *)(v16 + 48) = 0u;
      *(_OWORD *)(v16 + 64) = 0u;
      *(_DWORD *)(v16 + 88) = 2139095039;
      *(_WORD *)(v16 + 92) = 0;
      *(_BYTE *)(v16 + 94) = 0;
      *(_QWORD *)(v16 + 128) = 0;
      *(_OWORD *)(v16 + 96) = 0u;
      *(_OWORD *)(v16 + 112) = 0u;
      *(_DWORD *)(v16 + 136) = 2139095039;
      *(_WORD *)(v16 + 140) = 0;
      *(_BYTE *)(v16 + 142) = 0;
      *(_QWORD *)(v16 + 176) = 0;
      *(_OWORD *)(v16 + 144) = 0u;
      *(_OWORD *)(v16 + 160) = 0u;
      *(_DWORD *)(v16 + 184) = 2139095039;
      *(_WORD *)(v16 + 188) = 0;
      *(_BYTE *)(v16 + 190) = 0;
      *(_QWORD *)(v16 + 192) = 0x7F7F00007F7FLL;
      *(_DWORD *)(v16 + 200) = 32639;
      md::LabelLineSegment::createLists((unsigned __int16 *)v16, (uint64_t)v35);
      break;
    case 4:
      {
        v29 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v29, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 256, 8);
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = a2;
      *(_QWORD *)(v16 + 24) = 0;
      *(_BYTE *)(v16 + 32) = 3;
      *(_BYTE *)(v16 + 33) = v49;
      *(_WORD *)(v16 + 34) = v37;
      *(_WORD *)(v16 + 36) = 0;
      *(_DWORD *)(v16 + 40) = v47;
      *(_WORD *)(v16 + 44) = v36;
      *(_WORD *)(v16 + 46) = v44;
      *(_QWORD *)v16 = off_1E429B150;
      *(_QWORD *)(v16 + 80) = 0;
      *(_OWORD *)(v16 + 48) = 0u;
      *(_OWORD *)(v16 + 64) = 0u;
      *(_DWORD *)(v16 + 88) = 2139095039;
      *(_WORD *)(v16 + 92) = 0;
      *(_BYTE *)(v16 + 94) = 0;
      *(_QWORD *)(v16 + 128) = 0;
      *(_OWORD *)(v16 + 96) = 0u;
      *(_OWORD *)(v16 + 112) = 0u;
      *(_DWORD *)(v16 + 136) = 2139095039;
      *(_WORD *)(v16 + 140) = 0;
      *(_BYTE *)(v16 + 142) = 0;
      *(_QWORD *)(v16 + 176) = 0;
      *(_OWORD *)(v16 + 144) = 0u;
      *(_OWORD *)(v16 + 160) = 0u;
      *(_DWORD *)(v16 + 184) = 2139095039;
      *(_WORD *)(v16 + 188) = 0;
      *(_BYTE *)(v16 + 190) = 0;
      *(_QWORD *)(v16 + 224) = 0;
      *(_OWORD *)(v16 + 192) = 0u;
      *(_OWORD *)(v16 + 208) = 0u;
      *(_DWORD *)(v16 + 232) = 2139095039;
      *(_WORD *)(v16 + 236) = 0;
      *(_BYTE *)(v16 + 238) = 0;
      *(_OWORD *)(v16 + 240) = xmmword_19FFB4C40;
      md::LabelLineSegment::createLists((unsigned __int16 *)v16, (uint64_t)v35);
      break;
    case 5:
      {
        v30 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v30, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 312, 8);
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = a2;
      *(_QWORD *)(v16 + 24) = 0;
      *(_BYTE *)(v16 + 32) = 3;
      *(_BYTE *)(v16 + 33) = v49;
      *(_WORD *)(v16 + 34) = v37;
      *(_WORD *)(v16 + 36) = 0;
      *(_DWORD *)(v16 + 40) = v47;
      *(_WORD *)(v16 + 44) = v36;
      *(_WORD *)(v16 + 46) = v44;
      *(_QWORD *)v16 = off_1E429B1A8;
      *(_QWORD *)(v16 + 80) = 0;
      *(_OWORD *)(v16 + 48) = 0u;
      *(_OWORD *)(v16 + 64) = 0u;
      *(_DWORD *)(v16 + 88) = 2139095039;
      *(_WORD *)(v16 + 92) = 0;
      *(_BYTE *)(v16 + 94) = 0;
      *(_QWORD *)(v16 + 128) = 0;
      *(_OWORD *)(v16 + 96) = 0u;
      *(_OWORD *)(v16 + 112) = 0u;
      *(_DWORD *)(v16 + 136) = 2139095039;
      *(_WORD *)(v16 + 140) = 0;
      *(_BYTE *)(v16 + 142) = 0;
      *(_QWORD *)(v16 + 176) = 0;
      *(_OWORD *)(v16 + 144) = 0u;
      *(_OWORD *)(v16 + 160) = 0u;
      *(_DWORD *)(v16 + 184) = 2139095039;
      *(_WORD *)(v16 + 188) = 0;
      *(_BYTE *)(v16 + 190) = 0;
      *(_QWORD *)(v16 + 224) = 0;
      *(_OWORD *)(v16 + 192) = 0u;
      *(_OWORD *)(v16 + 208) = 0u;
      *(_DWORD *)(v16 + 232) = 2139095039;
      *(_WORD *)(v16 + 236) = 0;
      *(_BYTE *)(v16 + 238) = 0;
      *(_QWORD *)(v16 + 272) = 0;
      *(_OWORD *)(v16 + 240) = 0u;
      *(_OWORD *)(v16 + 256) = 0u;
      *(_DWORD *)(v16 + 280) = 2139095039;
      *(_WORD *)(v16 + 284) = 0;
      *(_BYTE *)(v16 + 286) = 0;
      *(_OWORD *)(v16 + 288) = xmmword_19FFB4C40;
      *(_DWORD *)(v16 + 304) = 32639;
      md::LabelLineSegment::createLists((unsigned __int16 *)v16, (uint64_t)v35);
      break;
    default:
      {
        v31 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v31, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 112, 8);
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = a2;
      *(_QWORD *)(v16 + 24) = 0;
      *(_BYTE *)(v16 + 32) = 3;
      *(_BYTE *)(v16 + 33) = v49;
      *(_WORD *)(v16 + 34) = v37;
      *(_WORD *)(v16 + 36) = 0;
      *(_DWORD *)(v16 + 40) = v47;
      *(_WORD *)(v16 + 44) = v36;
      *(_WORD *)(v16 + 46) = v44;
      *(_QWORD *)v16 = off_1E4299158;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_QWORD *)(v16 + 64) = 0;
      {
        v33 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v33, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v21 = mdm::Allocator::instance(void)::alloc;
      *(_QWORD *)(v16 + 80) = 0;
      *(_QWORD *)(v16 + 72) = v21;
      *(_QWORD *)(v16 + 88) = 0;
      *(_QWORD *)(v16 + 96) = 0;
      {
        v34 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v34, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      *(_QWORD *)(v16 + 104) = mdm::Allocator::instance(void)::alloc;
      md::LabelLineSegment::createLists((unsigned __int16 *)v16, (uint64_t)v35);
      break;
  }
  v50 = v16;
  v53 = a4;
  v52 = a5;
  v24 = *(_QWORD *)(a1 + 128);
  v23 = *(_QWORD *)(a1 + 136);
  if (v24 == v23)
  {
LABEL_17:
    v51 = a1;
    if (v23 >= *(_QWORD *)(a1 + 144))
    {
      v25 = std::vector<md::LabelLineZSet,geo::StdAllocator<md::LabelLineZSet,mdm::Allocator>>::__emplace_back_slow_path<md::LabelLineStore *,unsigned char const&,unsigned char const&,md::LabelLineSource const&>((uint64_t *)(a1 + 128), &v51, &v53, &v52, (char *)(a1 + 120));
    }
    else
    {
      if (v23)
        v23 = md::LabelLineZSet::LabelLineZSet(v23, a1, a4, a5, *(_BYTE *)(a1 + 120));
      v25 = v23 + 112;
      *(_QWORD *)(a1 + 136) = v25;
    }
    *(_QWORD *)(a1 + 136) = v25;
    v24 = v25 - 112;
  }
  else
  {
    while (*(unsigned __int8 *)(v24 + 1) != a4)
    {
      v24 += 112;
      if (v24 == v23)
        goto LABEL_17;
    }
  }
  v26 = *(uint64_t **)(v24 + 24);
  if ((unint64_t)v26 >= *(_QWORD *)(v24 + 32))
  {
    result = std::vector<std::unique_ptr<md::LabelLineSegment>,geo::StdAllocator<std::unique_ptr<md::LabelLineSegment>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineSegment>>(v24 + 16, &v50);
    v16 = v50;
  }
  else
  {
    if (v26)
    {
      v50 = 0;
      *v26 = v16;
      v16 = 0;
    }
    result = v26 + 1;
  }
  *(_QWORD *)(v24 + 24) = result;
  atomic_store(0, (unsigned __int8 *)(a1 + 248));
  if (v16)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return result;
}

void sub_19F899B54(mdm::Allocator *a1)
{
  _QWORD *v1;
  _Unwind_Exception *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;

  v2 = (_Unwind_Exception *)a1;
  *v1 = off_1E4291B50;
  v3 = v1[3];
  v1[3] = 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v3 + 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    a1 = (mdm::Allocator *)MEMORY[0x1A1AF4E00](v3, 0x1020C40457A241BLL);
  }
  v7 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v7 + 40))(v7, v1, 208);
  _Unwind_Resume(v2);
}

void sub_19F899D24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 88);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelLineStore::addSegment<GeoCodecsRoadFeature>(uint64_t a1, uint64_t a2, int a3, int a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, int a11, int a12, uint64_t a13)
{
  uint64_t v13;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  uint64_t v23;
  unsigned __int8 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _WORD v39[2];
  int v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;

  if (a10 < 2)
    return 0;
  v54 = 0;
  v39[0] = *(_WORD *)(a1 + 121);
  v40 = a3;
  LOBYTE(v41) = a5;
  HIBYTE(v41) = a4;
  v42 = a6;
  v43 = a7;
  v44 = a8;
  v45 = a9;
  v46 = 0;
  v47 = 0;
  v48 = a10;
  v49 = 0;
  v50 = a11;
  v51 = a12;
  v52 = a13;
  v53 = *(_BYTE *)(a1 + 290);
  switch(a10)
  {
    case 2uLL:
      {
        v32 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v32, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 152, 8);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = a2;
      *(_QWORD *)(v13 + 24) = 0;
      *(_BYTE *)(v13 + 32) = 0;
      *(_BYTE *)(v13 + 33) = v53;
      *(_WORD *)(v13 + 34) = v41;
      *(_BYTE *)(v13 + 36) = *(_BYTE *)(a2 + 151);
      *(_BYTE *)(v13 + 37) = v52 != 0;
      *(_BYTE *)(v13 + 38) = v50;
      *(_DWORD *)(v13 + 40) = v51;
      *(_WORD *)(v13 + 44) = v40;
      *(_WORD *)(v13 + 46) = v48;
      *(_QWORD *)v13 = off_1E429B0A0;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      *(_QWORD *)(v13 + 80) = 0;
      *(_DWORD *)(v13 + 88) = 2139095039;
      *(_WORD *)(v13 + 92) = 0;
      *(_BYTE *)(v13 + 94) = 0;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      *(_QWORD *)(v13 + 128) = 0;
      *(_DWORD *)(v13 + 136) = 2139095039;
      *(_WORD *)(v13 + 140) = 0;
      *(_BYTE *)(v13 + 142) = 0;
      *(_QWORD *)(v13 + 144) = 0x7F7F00007F7FLL;
      md::LabelLineSegment::createLists((unsigned __int16 *)v13, a2, (uint64_t)v39);
      break;
    case 3uLL:
      {
        v36 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v36, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 208, 8);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = a2;
      *(_QWORD *)(v13 + 24) = 0;
      *(_BYTE *)(v13 + 32) = 0;
      *(_BYTE *)(v13 + 33) = v53;
      *(_WORD *)(v13 + 34) = v41;
      *(_BYTE *)(v13 + 36) = *(_BYTE *)(a2 + 151);
      *(_BYTE *)(v13 + 37) = v52 != 0;
      *(_BYTE *)(v13 + 38) = v50;
      *(_DWORD *)(v13 + 40) = v51;
      *(_WORD *)(v13 + 44) = v40;
      *(_WORD *)(v13 + 46) = v48;
      *(_QWORD *)v13 = off_1E429B0F8;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      *(_QWORD *)(v13 + 80) = 0;
      *(_DWORD *)(v13 + 88) = 2139095039;
      *(_WORD *)(v13 + 92) = 0;
      *(_BYTE *)(v13 + 94) = 0;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      *(_QWORD *)(v13 + 128) = 0;
      *(_DWORD *)(v13 + 136) = 2139095039;
      *(_WORD *)(v13 + 140) = 0;
      *(_BYTE *)(v13 + 142) = 0;
      *(_QWORD *)(v13 + 176) = 0;
      *(_OWORD *)(v13 + 144) = 0u;
      *(_OWORD *)(v13 + 160) = 0u;
      *(_DWORD *)(v13 + 184) = 2139095039;
      *(_WORD *)(v13 + 188) = 0;
      *(_BYTE *)(v13 + 190) = 0;
      *(_QWORD *)(v13 + 192) = 0x7F7F00007F7FLL;
      *(_DWORD *)(v13 + 200) = 32639;
      md::LabelLineSegment::createLists((unsigned __int16 *)v13, a2, (uint64_t)v39);
      break;
    case 4uLL:
      {
        v33 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v33, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 256, 8);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = a2;
      *(_QWORD *)(v13 + 24) = 0;
      *(_BYTE *)(v13 + 32) = 0;
      *(_BYTE *)(v13 + 33) = v53;
      *(_WORD *)(v13 + 34) = v41;
      *(_BYTE *)(v13 + 36) = *(_BYTE *)(a2 + 151);
      *(_BYTE *)(v13 + 37) = v52 != 0;
      *(_BYTE *)(v13 + 38) = v50;
      *(_DWORD *)(v13 + 40) = v51;
      *(_WORD *)(v13 + 44) = v40;
      *(_WORD *)(v13 + 46) = v48;
      *(_QWORD *)v13 = off_1E429B150;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      *(_QWORD *)(v13 + 80) = 0;
      *(_DWORD *)(v13 + 88) = 2139095039;
      *(_WORD *)(v13 + 92) = 0;
      *(_BYTE *)(v13 + 94) = 0;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      *(_QWORD *)(v13 + 128) = 0;
      *(_DWORD *)(v13 + 136) = 2139095039;
      *(_WORD *)(v13 + 140) = 0;
      *(_BYTE *)(v13 + 142) = 0;
      *(_QWORD *)(v13 + 176) = 0;
      *(_OWORD *)(v13 + 144) = 0u;
      *(_OWORD *)(v13 + 160) = 0u;
      *(_DWORD *)(v13 + 184) = 2139095039;
      *(_WORD *)(v13 + 188) = 0;
      *(_BYTE *)(v13 + 190) = 0;
      *(_QWORD *)(v13 + 224) = 0;
      *(_OWORD *)(v13 + 192) = 0u;
      *(_OWORD *)(v13 + 208) = 0u;
      *(_DWORD *)(v13 + 232) = 2139095039;
      *(_WORD *)(v13 + 236) = 0;
      *(_BYTE *)(v13 + 238) = 0;
      *(_OWORD *)(v13 + 240) = xmmword_19FFB4C40;
      md::LabelLineSegment::createLists((unsigned __int16 *)v13, a2, (uint64_t)v39);
      break;
    case 5uLL:
      {
        v34 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v34, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 312, 8);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = a2;
      *(_QWORD *)(v13 + 24) = 0;
      *(_BYTE *)(v13 + 32) = 0;
      *(_BYTE *)(v13 + 33) = v53;
      *(_WORD *)(v13 + 34) = v41;
      *(_BYTE *)(v13 + 36) = *(_BYTE *)(a2 + 151);
      *(_BYTE *)(v13 + 37) = v52 != 0;
      *(_BYTE *)(v13 + 38) = v50;
      *(_DWORD *)(v13 + 40) = v51;
      *(_WORD *)(v13 + 44) = v40;
      *(_WORD *)(v13 + 46) = v48;
      *(_QWORD *)v13 = off_1E429B1A8;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      *(_QWORD *)(v13 + 80) = 0;
      *(_DWORD *)(v13 + 88) = 2139095039;
      *(_WORD *)(v13 + 92) = 0;
      *(_BYTE *)(v13 + 94) = 0;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      *(_QWORD *)(v13 + 128) = 0;
      *(_DWORD *)(v13 + 136) = 2139095039;
      *(_WORD *)(v13 + 140) = 0;
      *(_BYTE *)(v13 + 142) = 0;
      *(_QWORD *)(v13 + 176) = 0;
      *(_OWORD *)(v13 + 144) = 0u;
      *(_OWORD *)(v13 + 160) = 0u;
      *(_DWORD *)(v13 + 184) = 2139095039;
      *(_WORD *)(v13 + 188) = 0;
      *(_BYTE *)(v13 + 190) = 0;
      *(_QWORD *)(v13 + 224) = 0;
      *(_OWORD *)(v13 + 192) = 0u;
      *(_OWORD *)(v13 + 208) = 0u;
      *(_DWORD *)(v13 + 232) = 2139095039;
      *(_WORD *)(v13 + 236) = 0;
      *(_BYTE *)(v13 + 238) = 0;
      *(_QWORD *)(v13 + 272) = 0;
      *(_OWORD *)(v13 + 240) = 0u;
      *(_OWORD *)(v13 + 256) = 0u;
      *(_DWORD *)(v13 + 280) = 2139095039;
      *(_WORD *)(v13 + 284) = 0;
      *(_BYTE *)(v13 + 286) = 0;
      *(_OWORD *)(v13 + 288) = xmmword_19FFB4C40;
      *(_DWORD *)(v13 + 304) = 32639;
      md::LabelLineSegment::createLists((unsigned __int16 *)v13, a2, (uint64_t)v39);
      break;
    default:
      {
        v35 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v35, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 112, 8);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = a2;
      *(_QWORD *)(v13 + 24) = 0;
      *(_BYTE *)(v13 + 32) = 0;
      *(_BYTE *)(v13 + 33) = v53;
      *(_WORD *)(v13 + 34) = v41;
      *(_BYTE *)(v13 + 36) = *(_BYTE *)(a2 + 151);
      *(_BYTE *)(v13 + 37) = v52 != 0;
      *(_BYTE *)(v13 + 38) = v50;
      *(_DWORD *)(v13 + 40) = v51;
      *(_WORD *)(v13 + 44) = v40;
      *(_WORD *)(v13 + 46) = v48;
      *(_QWORD *)v13 = off_1E4299158;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_QWORD *)(v13 + 64) = 0;
      {
        v37 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v37, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v23 = mdm::Allocator::instance(void)::alloc;
      *(_QWORD *)(v13 + 80) = 0;
      *(_QWORD *)(v13 + 72) = v23;
      *(_QWORD *)(v13 + 88) = 0;
      *(_QWORD *)(v13 + 96) = 0;
      {
        v38 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v38, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      *(_QWORD *)(v13 + 104) = mdm::Allocator::instance(void)::alloc;
      md::LabelLineSegment::createLists((unsigned __int16 *)v13, a2, (uint64_t)v39);
      break;
  }
  v54 = v13;
  v57 = a4;
  v56 = a5;
  v26 = *(_QWORD *)(a1 + 128);
  v25 = *(_QWORD *)(a1 + 136);
  if (v26 == v25)
  {
LABEL_19:
    v55 = a1;
    if (v25 >= *(_QWORD *)(a1 + 144))
    {
      v27 = std::vector<md::LabelLineZSet,geo::StdAllocator<md::LabelLineZSet,mdm::Allocator>>::__emplace_back_slow_path<md::LabelLineStore *,unsigned char const&,unsigned char const&,md::LabelLineSource const&>((uint64_t *)(a1 + 128), &v55, &v57, &v56, (char *)(a1 + 120));
    }
    else
    {
      if (v25)
        v25 = md::LabelLineZSet::LabelLineZSet(v25, a1, a4, a5, *(_BYTE *)(a1 + 120));
      v27 = v25 + 112;
      *(_QWORD *)(a1 + 136) = v27;
    }
    *(_QWORD *)(a1 + 136) = v27;
    v26 = v27 - 112;
  }
  else
  {
    while (*(unsigned __int8 *)(v26 + 1) != a4)
    {
      v26 += 112;
      if (v26 == v25)
        goto LABEL_19;
    }
  }
  v28 = *(uint64_t **)(v26 + 24);
  if ((unint64_t)v28 >= *(_QWORD *)(v26 + 32))
  {
    v30 = std::vector<std::unique_ptr<md::LabelLineSegment>,geo::StdAllocator<std::unique_ptr<md::LabelLineSegment>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineSegment>>(v26 + 16, &v54);
    v29 = v54;
  }
  else
  {
    v29 = v13;
    if (v28)
    {
      v29 = 0;
      v54 = 0;
      *v28 = v13;
    }
    v30 = v28 + 1;
  }
  *(_QWORD *)(v26 + 24) = v30;
  atomic_store(0, (unsigned __int8 *)(a1 + 248));
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  return v13;
}

void sub_19F89A628(mdm::Allocator *a1)
{
  _QWORD *v1;
  _Unwind_Exception *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;

  v2 = (_Unwind_Exception *)a1;
  *v1 = off_1E4291B50;
  v3 = v1[3];
  v1[3] = 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v3 + 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    a1 = (mdm::Allocator *)MEMORY[0x1A1AF4E00](v3, 0x1020C40457A241BLL);
  }
  v7 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v7 + 40))(v7, v1, 208);
  _Unwind_Resume(v2);
}

void sub_19F89A7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22)
    (*(void (**)(uint64_t))(*(_QWORD *)a22 + 8))(a22);
  _Unwind_Resume(exception_object);
}

void md::DaVinciMaterialLayerDataSource::~DaVinciMaterialLayerDataSource(md::DaVinciMaterialLayerDataSource *this)
{
  gdc::LayerDataSource::~LayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::DaVinciMaterialLayerDataSource::descriptionForKey@<X0>(const gdc::LayerDataRequestKey *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  size_t v16;
  unint64_t v17;
  const void **v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  unint64_t v28;
  void *__p[2];
  __int128 v30;
  int v31;
  uint64_t v32[19];

  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v32[0] = MEMORY[0x1E0DE4FE0] + 64;
  v24 = v8;
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v8 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v24 + *(_QWORD *)(v24 - 24));
  std::ios_base::init(v10, &v25);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v24 = v5 + 24;
  v32[0] = v6;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  v25 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v30 = 0u;
  v31 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v24, (uint64_t)"gdc::LayerDataRequestKey<Type:", 30);
  v12 = *((unsigned __int16 *)a1 + 4);
  if (v12 > 0x51)
    v13 = "<Invalid>";
  else
    v13 = off_1E42F61C0[v12];
  v14 = strlen(v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v24, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v24, (uint64_t)", Material ID: ", 15);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)">", 1);
  if ((v31 & 0x10) != 0)
  {
    v17 = *((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1) < v28)
    {
      *((_QWORD *)&v30 + 1) = v28;
      v17 = v28;
    }
    v18 = (const void **)&v27;
  }
  else
  {
    if ((v31 & 8) == 0)
    {
      v16 = 0;
      a2[23] = 0;
      goto LABEL_19;
    }
    v18 = (const void **)v26;
    v17 = v26[2];
  }
  v19 = *v18;
  v16 = v17 - (_QWORD)*v18;
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    v22 = operator new(v20 + 1);
    *((_QWORD *)a2 + 1) = v16;
    *((_QWORD *)a2 + 2) = v21 | 0x8000000000000000;
    *(_QWORD *)a2 = v22;
    a2 = v22;
    goto LABEL_18;
  }
  a2[23] = v16;
  if (v16)
LABEL_18:
    memmove(a2, v19, v16);
LABEL_19:
  a2[v16] = 0;
  v24 = *v7;
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v24 - 24)) = v7[3];
  v25 = v11 + 16;
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v32);
}

void std::__shared_ptr_emplace<md::MaterialData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAE50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MaterialData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAE50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::MaterialData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19F89AB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, objc_super a11)
{
  a11.super_class = (Class)VKPuckAnimator;
  -[_Unwind_Exception dealloc](&a11, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19F89B000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  v20 = a12;
  if (a12 == &a9)
  {
    v21 = 4;
    v20 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
  _Unwind_Resume(exception_object);
}

void sub_19F89B314(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F89B398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F89B5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_19F89B6EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F89BB28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F89BCF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9547(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9548(uint64_t a1)
{

}

void altitude::RouteLineData::~RouteLineData(altitude::RouteLineData *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)

  if (*(_QWORD *)this)
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
}

void sub_19F89C2C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F89C428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F89C4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (SHIBYTE(a11) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

void sub_19F89C590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (SHIBYTE(a11) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

void sub_19F89C648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (SHIBYTE(a11) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

void sub_19F89C7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::vector<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19F89CB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  std::vector<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19F89CBB8()
{
  void *v0;

  JUMPOUT(0x19F89CBCCLL);
}

void sub_19F89CD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19F89D02C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F89D780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::vector<md::MarkerFeatureHandle,geo::StdAllocator<md::MarkerFeatureHandle,mdm::Allocator>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19F89D87C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F89D968(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F89DAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::vector<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19F89DC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::vector<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19F89E1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::vector<VKLabelNavRoadLabel * {__strong},geo::StdAllocator<VKLabelNavRoadLabel * {__strong},mdm::Allocator>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19F89E360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::vector<VKLabelNavRoadLabel * {__strong},geo::StdAllocator<VKLabelNavRoadLabel * {__strong},mdm::Allocator>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19F89E4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::vector<VKLabelNavRoadLabel * {__strong},geo::StdAllocator<VKLabelNavRoadLabel * {__strong},mdm::Allocator>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19F89E598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  id v9;
  void *v10;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v7 = 3 * a4;
    v8 = (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 24 * a4, 8);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    for (*(_QWORD *)(a1 + 16) = &v8[v7]; a2 != a3; v8 += 3)
    {
      if (v8)
      {
        *v8 = &off_1E42B4C50;
        v8[1] = 0;
        v9 = *(id *)(a2 + 8);
        v10 = (void *)v8[1];
        v8[1] = v9;

      }
      a2 += 24;
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
}

uint64_t geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4C50;

  return a1;
}

void geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4C50;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t *std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v3 - 8) + 40))(*(_QWORD *)(v3 - 8), *(_QWORD *)(v3 - 32), *(_QWORD *)(v3 - 16) & 0x7FFFFFFFFFFFFFFFLL);
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

uint64_t *std::vector<md::LabelImageInfo,geo::StdAllocator<md::LabelImageInfo,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 16);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

void ggl::ARCameraImagePipelineState::~ARCameraImagePipelineState(ggl::ARCameraImagePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ARCameraImagePipelineSetup::~ARCameraImagePipelineSetup(ggl::ARCameraImagePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::ARCameraImagePipelineSetup::constantDataIsEnabled(ggl::ARCameraImagePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::ARCameraImagePipelineSetup::textureIsEnabled(ggl::ARCameraImagePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void md::RoadStyle::~RoadStyle(md::RoadStyle *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  md::RoadStyleConstants::~RoadStyleConstants((md::RoadStyle *)((char *)this + 80));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v11)
      return;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v11)
      return;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void std::__shared_ptr_pointer<md::RoadStyle *,std::shared_ptr<md::RoadStyle>::__shared_ptr_default_delete<md::RoadStyle,md::RoadStyle>,std::allocator<md::RoadStyle>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

md::RoadStyle *std::__shared_ptr_pointer<md::RoadStyle *,std::shared_ptr<md::RoadStyle>::__shared_ptr_default_delete<md::RoadStyle,md::RoadStyle>,std::allocator<md::RoadStyle>>::__on_zero_shared(uint64_t a1)
{
  md::RoadStyle *result;

  result = *(md::RoadStyle **)(a1 + 24);
  if (result)
  {
    md::RoadStyle::~RoadStyle(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void md::RoadStyleConstants::~RoadStyleConstants(md::RoadStyleConstants *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v20)
    goto LABEL_35;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v23)
      return;
  }
  else
  {
LABEL_35:
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v23)
      return;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
}

void md::RoadStyling::unsubscribeLayer(uint64_t *a1, uint64_t a2)
{
  unsigned __int16 *v2;
  int v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  char *v11;
  unint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD v52[2];

  v3 = *(_DWORD *)(a2 + 208) - 1;
  *(_DWORD *)(a2 + 208) = v3;
  if (!v3)
  {
    v4 = *(_QWORD *)(a2 + 8);
    for (i = *(_QWORD *)(a2 + 16); v4 != i; v4 += 8)
    {
      v7 = *(_QWORD **)v4;
      v8 = *(_QWORD *)(*(_QWORD *)v4 + 1048);
      v9 = *(unsigned int **)(v8 + 240);
      v10 = *(unsigned int **)(v8 + 248);
      v11 = (char *)((char *)v10 - (char *)v9);
      v12 = ((char *)v10 - (char *)v9) >> 3;
      if (v10 != v9)
      {
        v13 = *(unsigned int **)(v8 + 240);
        do
        {
          v14 = ((v12 << 6) - 0x61C8864680B583EBLL + (v12 >> 2) + *v13) ^ v12;
          v12 = (*((unsigned __int16 *)v13 + 2) - 0x61C8864680B583EBLL + (v14 << 6) + (v14 >> 2)) ^ v14;
          v13 += 2;
        }
        while (v13 != v10);
      }
      v15 = *(unsigned __int16 *)(v8 + 282);
      if (*(_WORD *)(v8 + 282))
      {
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v19 = *(_QWORD *)(v8 + 272);
        v20 = v19 + *(unsigned __int16 *)(v8 + 280);
        do
        {
          if (v18 < v15)
          {
            v17 = (unsigned int *)(v19 + 4 * v18);
            v2 = (unsigned __int16 *)(v20 + 2 * v18);
          }
          v16 ^= (*v2
                - 0x61C8864680B583EBLL
                + ((((v16 << 6) - 0x61C8864680B583EBLL + (v16 >> 2) + *v17) ^ v16) << 6)
                + ((((v16 << 6) - 0x61C8864680B583EBLL + (v16 >> 2) + *v17) ^ v16) >> 2)) ^ ((v16 << 6)
                                                                                           - 0x61C8864680B583EBLL
                                                                                           + (v16 >> 2)
                                                                                           + *v17);
          v21 = v18 + 1;
          if (v18 + 1 < v15)
            ++v18;
          else
            v18 = v15;
        }
        while (v21 < v15);
      }
      else
      {
        v16 = 0;
      }
      v23 = *a1;
      v22 = a1[1];
      if (*a1 != v22)
      {
        v24 = v16 ^ v12;
        do
        {
          if (*(_QWORD *)v23 == v24)
          {
            v26 = *(_QWORD *)(*(_QWORD *)(v23 + 8) + 240);
            v25 = *(_QWORD *)(*(_QWORD *)(v23 + 8) + 248);
            if ((char *)(v25 - v26) == v11)
            {
              if (v26 == v25)
              {
LABEL_33:
                v29 = *(_DWORD *)(v23 + 24) - 1;
                *(_DWORD *)(v23 + 24) = v29;
                v52[0] = 0;
                v52[1] = 0;
                md::RoadBatch::setStyle(v7, v52);
                if (!v29)
                {
                  v30 = a1[1];
                  *(_QWORD *)v23 = *(_QWORD *)(v30 - 48);
                  v32 = *(_QWORD *)(v30 - 40);
                  v31 = *(_QWORD *)(v30 - 32);
                  if (v31)
                  {
                    v33 = (unint64_t *)(v31 + 8);
                    do
                      v34 = __ldxr(v33);
                    while (__stxr(v34 + 1, v33));
                  }
                  v35 = *(std::__shared_weak_count **)(v23 + 16);
                  *(_QWORD *)(v23 + 8) = v32;
                  *(_QWORD *)(v23 + 16) = v31;
                  if (v35)
                  {
                    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
                    do
                      v37 = __ldaxr(p_shared_owners);
                    while (__stlxr(v37 - 1, p_shared_owners));
                    if (!v37)
                    {
                      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                      std::__shared_weak_count::__release_weak(v35);
                    }
                  }
                  *(_DWORD *)(v23 + 24) = *(_DWORD *)(v30 - 24);
                  v39 = *(_QWORD *)(v30 - 16);
                  v38 = *(_QWORD *)(v30 - 8);
                  if (v38)
                  {
                    v40 = (unint64_t *)(v38 + 8);
                    do
                      v41 = __ldxr(v40);
                    while (__stxr(v41 + 1, v40));
                  }
                  v42 = *(std::__shared_weak_count **)(v23 + 40);
                  *(_QWORD *)(v23 + 32) = v39;
                  *(_QWORD *)(v23 + 40) = v38;
                  if (v42)
                  {
                    v43 = (unint64_t *)&v42->__shared_owners_;
                    do
                      v44 = __ldaxr(v43);
                    while (__stlxr(v44 - 1, v43));
                    if (!v44)
                    {
                      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                      std::__shared_weak_count::__release_weak(v42);
                    }
                  }
                  v45 = a1[1];
                  v46 = *(std::__shared_weak_count **)(v45 - 8);
                  if (v46)
                  {
                    v47 = (unint64_t *)&v46->__shared_owners_;
                    do
                      v48 = __ldaxr(v47);
                    while (__stlxr(v48 - 1, v47));
                    if (!v48)
                    {
                      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                      std::__shared_weak_count::__release_weak(v46);
                    }
                  }
                  v49 = *(std::__shared_weak_count **)(v45 - 32);
                  if (v49)
                  {
                    v50 = (unint64_t *)&v49->__shared_owners_;
                    do
                      v51 = __ldaxr(v50);
                    while (__stlxr(v51 - 1, v50));
                    if (!v51)
                    {
                      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                      std::__shared_weak_count::__release_weak(v49);
                    }
                  }
                  a1[1] = v45 - 48;
                }
                break;
              }
              v27 = v9;
              while (1)
              {
                v2 = (unsigned __int16 *)*(unsigned __int16 *)(v26 + 4);
                if (*(_DWORD *)v26 != *v27 || (_DWORD)v2 != *((unsigned __int16 *)v27 + 2))
                  break;
                v26 += 8;
                v27 += 2;
                if (v26 == v25)
                  goto LABEL_33;
              }
            }
          }
          v23 += 48;
        }
        while (v23 != v22);
      }
    }
  }
}

void sub_19F89F18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::DsmDecoder::~DsmDecoder(md::DsmDecoder *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &off_1E428BA80;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &off_1E428BA80;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::DsmDecoder::decode(md::DsmDecoder *this@<X0>, const gdc::ResourceKey *a2@<X1>, const gdc::RawResourceSourceData *a3@<X2>, _QWORD *a4@<X8>)
{
  char v4;
  float v5;
  float v6;
  int v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  geo::codec::VectorTile *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _DWORD *v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  NSObject *v32;
  const char *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  geo::codec::VectorTile *v42;
  _DWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  size_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int32x2_t *v51;
  __int32 v52;
  int32x2_t v53;
  char *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unsigned __int8 *v57;
  char *v58;
  size_t v59;
  size_t v60;
  __int16 *v61;
  size_t v62;
  int v63;
  size_t v64;
  int v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  __int128 v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  BOOL v77;
  size_t v78;
  size_t v79;
  void *__p[2];
  uint64_t v81;
  uint8_t buf[8];
  std::__shared_weak_count *v83;
  geo::codec::VectorTile *v84;
  std::__shared_weak_count *v85;

  if (!*((_BYTE *)a3 + 16))
  {
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  v10 = *((unsigned __int16 *)a2 + 1);
  v84 = 0;
  v85 = 0;
  if (v10 == 50)
    v11 = 1;
  else
    v11 = 2;
  if (v10 != 50)
  {
    v25 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a3 + 32))(*(_QWORD *)a3);
    v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a3 + 24))(*(_QWORD *)a3);
    v27 = v26;
    if (v26)
    {
      __p[0] = 0;
      __p[1] = 0;
      v81 = 0;
      v78 = 0;
      v79 = 0;
      if (md::ElevationRaster::decodePngElevationRaster(v25, v26, (char **)__p, &v79, &v78))
      {
        v28 = v27 - 2;
        if (v27 < v27 - 2)
          v28 = v27;
        v29 = v28 + 2;
        if (v29 > v27)
          goto LABEL_71;
        v30 = *(unsigned __int16 *)((char *)v25 + v29 - 2);
        if (v30 < 0xC || v27 < v30)
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v32 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            goto LABEL_70;
          *(_WORD *)buf = 0;
          v33 = "DTM header verification failed.";
LABEL_69:
          _os_log_impl(&dword_19F029000, v32, OS_LOG_TYPE_ERROR, v33, buf, 2u);
LABEL_70:

LABEL_71:
          *a4 = 0;
          a4[1] = 0;
LABEL_72:
          if (__p[0])
            operator delete(__p[0]);
LABEL_74:
          v36 = v85;
          if (!v85)
            return;
          goto LABEL_75;
        }
        v37 = v27 - v30;
        if (v27 < v37)
          v37 = v27;
        v38 = v37 + 4;
        if (v37 + 4 > v27)
        {
          v39 = v37 + 4;
        }
        else
        {
          v5 = *(float *)((char *)v25 + v37);
          v39 = v37 + 8;
          v37 += 4;
        }
        if (v39 <= v27)
        {
          v6 = *(float *)((char *)v25 + v37);
          v37 = v39;
        }
        v73 = v37 + 1;
        if (v37 + 1 > v27)
        {
          v74 = v37 + 1;
        }
        else
        {
          v4 = *((_BYTE *)v25 + v37);
          v74 = v37 + 2;
          ++v37;
        }
        v77 = v38 <= v27 && v39 <= v27 && v73 <= v27;
        if (v74 > v27 || !v77)
          goto LABEL_71;
        if (*((_BYTE *)v25 + v37) == 1)
          v5 = v5 + (float)(v6 * 0.5);
LABEL_85:
        v51 = (int32x2_t *)*((_QWORD *)a2 + 1);
        v52 = v51[1].i32[0];
        v53 = *v51;
        v54 = (char *)operator new(0x88uLL);
        v55 = (std::__shared_weak_count *)v54;
        *((_QWORD *)v54 + 1) = 0;
        v56 = (unint64_t *)(v54 + 8);
        *((_QWORD *)v54 + 2) = 0;
        *(_QWORD *)v54 = &off_1E42DB358;
        v57 = (unsigned __int8 *)__p[0];
        *(_OWORD *)(v54 + 24) = *(_OWORD *)__p;
        v58 = v54 + 24;
        v60 = v78;
        v59 = v79;
        *((_QWORD *)v54 + 5) = v81;
        __p[0] = 0;
        __p[1] = 0;
        v81 = 0;
        v54[48] = v4;
        *((_QWORD *)v54 + 7) = v59;
        *((_QWORD *)v54 + 8) = v60;
        *((float *)v54 + 18) = v6;
        *((_WORD *)v54 + 38) = (int)v5;
        v54[80] = -1;
        v54[81] = v52;
        *(int32x2_t *)(v54 + 84) = vrev64_s32(v53);
        *((_WORD *)v54 + 52) = 1;
        *((_QWORD *)v54 + 14) = 0;
        *((_QWORD *)v54 + 15) = 0;
        v61 = (__int16 *)v57;
        v54[128] = v11;
        if (v4 == 8)
        {
          if (*v57 != 255)
          {
            v62 = v60 * v59;
            if (v57[v60 * v59 - 1] != 255 && v57[v59 - 1] != 255 && v57[(v60 - 1) * v59 + 1] != 255)
            {
              if (!v62)
                goto LABEL_103;
              while (1)
              {
                v63 = *(unsigned __int8 *)v61;
                v61 = (__int16 *)((char *)v61 + 1);
                if (v63 == 255)
                  break;
                if (!--v62)
                  goto LABEL_103;
              }
            }
          }
        }
        else if (*(__int16 *)v57 != -1)
        {
          v64 = v60 * v59;
          if (*(__int16 *)&v57[2 * v60 * v59 - 2] != -1
            && *(__int16 *)&v57[2 * v59 - 2] != -1
            && *(__int16 *)&v57[2 * (v60 - 1) * v59 + 2] != -1)
          {
            if (!v64)
              goto LABEL_103;
            while (1)
            {
              v65 = *v61++;
              if (v65 == -1)
                break;
              if (!--v64)
                goto LABEL_103;
            }
          }
        }
        v54[105] = 1;
LABEL_103:
        *(_QWORD *)buf = v54 + 24;
        v83 = (std::__shared_weak_count *)v54;
        v66 = operator new(0xB8uLL);
        v66[1] = 0;
        v66[2] = 0;
        *v66 = &off_1E42DBC18;
        *(_QWORD *)buf = 0;
        v83 = 0;
        gdc::Resource::Resource((uint64_t)(v66 + 3), (uint64_t)a2);
        v66[21] = v58;
        v66[22] = v55;
        do
          v67 = __ldxr(v56);
        while (__stxr(v67 + 1, v56));
        do
          v68 = __ldaxr(v56);
        while (__stlxr(v68 - 1, v56));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
        *(_QWORD *)&v69 = v66 + 3;
        *((_QWORD *)&v69 + 1) = v66;
        *(_OWORD *)a4 = v69;
        v70 = v83;
        if (v83)
        {
          p_shared_owners = (unint64_t *)&v83->__shared_owners_;
          do
            v72 = __ldaxr(p_shared_owners);
          while (__stlxr(v72 - 1, p_shared_owners));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        goto LABEL_72;
      }
      goto LABEL_65;
    }
    goto LABEL_79;
  }
  (*(void (**)(uint8_t *__return_ptr, _QWORD, const gdc::ResourceKey *, const gdc::RawResourceSourceData *))(**((_QWORD **)this + 1) + 16))(buf, *((_QWORD *)this + 1), a2, a3);
  __p[0] = *(void **)buf;
  __p[1] = v83;
  if (v83)
  {
    v12 = (unint64_t *)&v83->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v14 = v83;
    if (v83)
    {
      v15 = (unint64_t *)&v83->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if (__p[0])
  {
    v18 = (geo::codec::VectorTile *)*((_QWORD *)__p[0] + 18);
    v17 = (std::__shared_weak_count *)*((_QWORD *)__p[0] + 19);
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = v85;
    v84 = v18;
    v85 = v17;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      v18 = v84;
    }
    if (v18)
    {
      if (geo::codec::VectorTile::dtmRasterInfo(v18))
      {
        v24 = (_QWORD *)geo::codec::VectorTile::dtmRasterBlob(v18);
        if (v24[1] != *v24)
        {
          if (*(_DWORD *)(geo::codec::VectorTile::dtmRasterInfo(v18) + 8) >= 0x100u)
          {
            if (*(_DWORD *)(geo::codec::VectorTile::dtmRasterInfo(v18) + 8) >= 0x10000u)
              v4 = 32;
            else
              v4 = 16;
          }
          else
          {
            v4 = 8;
          }
          v5 = *(float *)geo::codec::VectorTile::dtmRasterInfo(v18);
          v6 = *(float *)(geo::codec::VectorTile::dtmRasterInfo(v18) + 4);
          if (__p[1])
          {
            v40 = (unint64_t *)((char *)__p[1] + 8);
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              (*(void (**)(void *))(*(_QWORD *)__p[1] + 16))(__p[1]);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
            }
          }
          v42 = v84;
          v43 = *(_DWORD **)geo::codec::VectorTile::dtmRasterBlob(v84);
          v44 = (_QWORD *)geo::codec::VectorTile::dtmRasterBlob(v42);
          v45 = v44[1];
          v46 = v45 - *v44;
          if (v45 != *v44)
          {
            __p[0] = 0;
            __p[1] = 0;
            v81 = 0;
            v78 = 0;
            v79 = 0;
            if (*(_BYTE *)(geo::codec::VectorTile::dtmRasterInfo(v42) + 21) != 1)
            {
              if (*(_BYTE *)(geo::codec::VectorTile::dtmRasterInfo(v42) + 21) == 6
                || *(_BYTE *)(geo::codec::VectorTile::dtmRasterInfo(v42) + 21) == 2
                || !*(_BYTE *)(geo::codec::VectorTile::dtmRasterInfo(v42) + 21))
              {
                v79 = *(unsigned int *)(geo::codec::VectorTile::dtmRasterInfo(v42) + 12);
                v78 = *(unsigned int *)(geo::codec::VectorTile::dtmRasterInfo(v42) + 16);
                v49 = geo::codec::VectorTile::dtmRasterBlob(v42);
                v50 = *(_QWORD *)(v49 + 16);
                *(_OWORD *)__p = *(_OWORD *)v49;
                v81 = v50;
                *(_QWORD *)(v49 + 8) = 0;
                *(_QWORD *)(v49 + 16) = 0;
                *(_QWORD *)v49 = 0;
              }
              goto LABEL_85;
            }
            if (md::ElevationRaster::decodePngElevationRaster(v43, v46, (char **)__p, &v79, &v78))
              goto LABEL_85;
LABEL_65:
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
            v32 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
              goto LABEL_70;
            *(_WORD *)buf = 0;
            v33 = "failed to decode PNG DTM file";
            goto LABEL_69;
          }
LABEL_79:
          *a4 = 0;
          a4[1] = 0;
          v36 = v85;
          if (!v85)
            return;
          goto LABEL_75;
        }
      }
    }
  }
  *a4 = 0;
  a4[1] = 0;
  if (!__p[1])
    goto LABEL_74;
  v34 = (unint64_t *)((char *)__p[1] + 8);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (v35)
    goto LABEL_74;
  (*(void (**)(void *))(*(_QWORD *)__p[1] + 16))(__p[1]);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
  v36 = v85;
  if (!v85)
    return;
LABEL_75:
  v47 = (unint64_t *)&v36->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
}

void sub_19F89F9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::FlyoverDsmResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBC18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::FlyoverDsmResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBC18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::FlyoverDsmResource>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = (std::__shared_weak_count *)a1[22];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (void *)a1[4];
  if (v5 != (void *)a1[6])
    free(v5);
}

void std::__shared_ptr_emplace<md::ElevationRaster>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ElevationRaster>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB358;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::ElevationRaster>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = (std::__shared_weak_count *)a1[15];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[3];
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[3];
  if (v5)
  {
LABEL_6:
    a1[4] = v5;
    operator delete(v5);
  }
}

void md::ARRotateTowardsUserLogic::~ARRotateTowardsUserLogic(md::ARRotateTowardsUserLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::ARRotateTowardsUserLogic,md::ARRotateTowardsUserContext,md::LogicDependencies<gdc::TypeList<md::CameraContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::ARRotateTowardsUserContext]";
  v4[3] = 30;
  v4[4] = result;
  *v4 = &off_1E42B1310;
  v4[1] = 0x9C174DEE01931CA6;
  *a2 = v4;
  return result;
}

void sub_19F89FCE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARRotateTowardsUserLogic,md::ARRotateTowardsUserContext,md::LogicDependencies<gdc::TypeList<md::CameraContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x9C174DEE01931CA6 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::ARRotateTowardsUserLogic,md::ARRotateTowardsUserContext,md::LogicDependencies<gdc::TypeList<md::CameraContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x9C174DEE01931CA6 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::ARRotateTowardsUserLogic,md::ARRotateTowardsUserContext,md::LogicDependencies<gdc::TypeList<md::CameraContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x9C174DEE01931CA6 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::ARRotateTowardsUserLogic,md::ARRotateTowardsUserContext,md::LogicDependencies<gdc::TypeList<md::CameraContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x9C174DEE01931CA6 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::ARRotateTowardsUserLogic,md::ARRotateTowardsUserContext,md::LogicDependencies<gdc::TypeList<md::CameraContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0x9C174DEE01931CA6 || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v5 <= 0x1AF456233693CD46uLL)
      v7 = 0x1AF456233693CD46uLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x1AF456233693CD46;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x1AF456233693CD46)
      {
        if (v9[2] == 0x1AF456233693CD46)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x1AF456233693CD46)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x1AF456233693CD46)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x1AF456233693CD46)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::ARRotateTowardsUserLogic,md::ARRotateTowardsUserContext,md::LogicDependencies<gdc::TypeList<md::CameraContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::ARRotateTowardsUserLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t j;
  double *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  BOOL v59;
  double *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  BOOL v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __int128 *v89;
  __int128 *v90;
  uint64_t i;

  v87 = *(_OWORD *)(*(_QWORD *)a3 + 4288);
  v88 = 0;
  v85 = xmmword_19FFB33A0;
  v86 = 0;
  v4 = *(_QWORD *)(a1 + 120);
  v5 = (_QWORD *)gdc::Registry::storage<arComponents::RotateTowardsUser>(v4);
  v6 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v4);
  v7 = gdc::Registry::storage<arComponents::IsVisible>(v4);
  v8 = (_QWORD *)v7;
  v9 = v7 + 32;
  v11 = v5[7];
  v10 = v5[8];
  if (v6[8] - v6[7] >= (unint64_t)(v10 - v11))
    v12 = v5 + 4;
  else
    v12 = v6 + 4;
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) >= v12[4] - v12[3])
    v13 = v12;
  else
    v13 = (_QWORD *)(v7 + 32);
  if (v5 + 4 == v13)
  {
    v89 = &v87;
    v90 = &v85;
    for (i = a1; v11 != v10; v11 += 8)
    {
      v36 = *(unsigned int *)(v11 + 4);
      v37 = v36 >> 7;
      v38 = v6[4];
      v39 = (v6[5] - v38) >> 3;
      if (v36 >> 7 < v39)
      {
        v40 = *(_QWORD *)(v38 + 8 * v37);
        if (v40)
        {
          v41 = *(unsigned __int16 *)(v40 + 2 * (v36 & 0x7F));
          v43 = v6[7];
          v42 = v6[8];
          v44 = (v42 - v43) >> 3;
          if (v44 > v41)
          {
            v45 = v43 + 8 * v41;
            if (v45 != v42 && *(_DWORD *)(v45 + 4) == (_DWORD)v36)
            {
              v47 = v8[4];
              if (v37 < (v8[5] - v47) >> 3)
              {
                v48 = *(_QWORD *)(v47 + 8 * v37);
                if (v48)
                {
                  v49 = *(unsigned __int16 *)(v48 + 2 * (v36 & 0x7F));
                  v51 = v8[7];
                  v50 = v8[8];
                  if (v49 < (v50 - v51) >> 3)
                  {
                    v52 = v51 + 8 * v49;
                    if (v52 != v50 && *(_DWORD *)(v52 + 4) == (_DWORD)v36)
                    {
                      v54 = *(_QWORD *)v11;
                      v55 = *(_QWORD *)v11 >> 39;
                      if (v55 < v39
                        && (v56 = *(_QWORD *)(v38 + 8 * v55)) != 0
                        && (v57 = *(unsigned __int16 *)(v56 + 2 * (HIDWORD(v54) & 0x7F)), v44 > v57)
                        && ((v58 = v43 + 8 * v57, v58 != v42) ? (v59 = *(_DWORD *)(v58 + 4) == HIDWORD(v54)) : (v59 = 0),
                            v59))
                      {
                        v35 = (double *)(v6[10] + 80 * v57);
                      }
                      else
                      {
                        v35 = (double *)v6[11];
                      }
                      _ZZN2md24ARRotateTowardsUserLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_13CameraContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_26ARRotateTowardsUserContextEENK3__0clENS5_6EntityERN12arComponents14WorldTransformE(&v89, v54, *v35, v35[1]);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v6 + 4 == v13)
  {
    v89 = &v87;
    v90 = &v85;
    i = a1;
    v14 = v6[7];
    v15 = v6[8];
    if (v14 != v15)
    {
      v16 = (double *)(v6[10] + 8);
      do
      {
        v17 = *(unsigned int *)(v14 + 4);
        v18 = v17 >> 7;
        v19 = v5[4];
        if (v17 >> 7 < (v5[5] - v19) >> 3)
        {
          v20 = *(_QWORD *)(v19 + 8 * v18);
          if (v20)
          {
            v21 = *(unsigned __int16 *)(v20 + 2 * (v17 & 0x7F));
            v23 = v5[7];
            v22 = v5[8];
            if (v21 < (v22 - v23) >> 3)
            {
              v24 = v23 + 8 * v21;
              if (v24 != v22 && *(_DWORD *)(v24 + 4) == (_DWORD)v17)
              {
                v26 = v8[4];
                if (v18 < (v8[5] - v26) >> 3)
                {
                  v27 = *(_QWORD *)(v26 + 8 * v18);
                  if (v27)
                  {
                    v28 = *(unsigned __int16 *)(v27 + 2 * (v17 & 0x7F));
                    v30 = v8[7];
                    v29 = v8[8];
                    if (v28 < (v29 - v30) >> 3)
                    {
                      v31 = v30 + 8 * v28;
                      if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v17)
                        _ZZN2md24ARRotateTowardsUserLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_13CameraContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_26ARRotateTowardsUserContextEENK3__0clENS5_6EntityERN12arComponents14WorldTransformE(&v89, *(_QWORD *)v14, *(v16 - 1), *v16);
                    }
                  }
                }
              }
            }
          }
        }
        v14 += 8;
        v16 += 10;
      }
      while (v14 != v15);
    }
  }
  if ((_QWORD *)v9 == v13)
  {
    v89 = &v87;
    v90 = &v85;
    i = a1;
    v33 = v8[7];
    for (j = v8[8]; v33 != j; v33 += 8)
    {
      v61 = *(unsigned int *)(v33 + 4);
      v62 = v61 >> 7;
      v63 = v5[4];
      if (v61 >> 7 < (v5[5] - v63) >> 3)
      {
        v64 = *(_QWORD *)(v63 + 8 * v62);
        if (v64)
        {
          v65 = *(unsigned __int16 *)(v64 + 2 * (v61 & 0x7F));
          v67 = v5[7];
          v66 = v5[8];
          if (v65 < (v66 - v67) >> 3)
          {
            v68 = v67 + 8 * v65;
            if (v68 != v66 && *(_DWORD *)(v68 + 4) == (_DWORD)v61)
            {
              v70 = v6[4];
              v71 = (v6[5] - v70) >> 3;
              if (v62 < v71)
              {
                v72 = *(_QWORD *)(v70 + 8 * v62);
                if (v72)
                {
                  v73 = *(unsigned __int16 *)(v72 + 2 * (v61 & 0x7F));
                  v75 = v6[7];
                  v74 = v6[8];
                  v76 = (v74 - v75) >> 3;
                  if (v76 > v73)
                  {
                    v77 = v75 + 8 * v73;
                    if (v77 != v74 && *(_DWORD *)(v77 + 4) == (_DWORD)v61)
                    {
                      v79 = *(_QWORD *)v33;
                      v80 = *(_QWORD *)v33 >> 39;
                      if (v80 < v71
                        && (v81 = *(_QWORD *)(v70 + 8 * v80)) != 0
                        && (v82 = *(unsigned __int16 *)(v81 + 2 * (HIDWORD(v79) & 0x7F)), v76 > v82)
                        && ((v83 = v75 + 8 * v82, v83 != v74) ? (v84 = *(_DWORD *)(v83 + 4) == HIDWORD(v79)) : (v84 = 0),
                            v84))
                      {
                        v60 = (double *)(v6[10] + 80 * v82);
                      }
                      else
                      {
                        v60 = (double *)v6[11];
                      }
                      _ZZN2md24ARRotateTowardsUserLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_13CameraContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_26ARRotateTowardsUserContextEENK3__0clENS5_6EntityERN12arComponents14WorldTransformE(&v89, v79, *v60, v60[1]);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void md::Logic<md::ARRotateTowardsUserLogic,md::ARRotateTowardsUserContext,md::LogicDependencies<gdc::TypeList<md::CameraContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<arComponents::RotateTowardsUser>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xBEA3F5CF520EA208;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xBEA3F5CF520EA208;
      if (*(_QWORD *)&v3 <= 0xBEA3F5CF520EA208)
        v5 = 0xBEA3F5CF520EA208 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xBEA3F5CF520EA208;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xBEA3F5CF520EA208)
            {
              if (v7[2] == 0xBEA3F5CF520EA208)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xBEA3F5CF520EA208)
          {
            if (v7[2] == 0xBEA3F5CF520EA208)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::RotateTowardsUser]";
  *(_QWORD *)(v11 + 24) = 31;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1CC8;
  *(_QWORD *)(v11 + 8) = 0xBEA3F5CF520EA208;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xBEA3F5CF520EA208, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xBEA3F5CF520EA208;
  v15[1] = "arComponents::RotateTowardsUser]";
  v15[2] = 31;
  gdc::Registry::_registerStorageDataSignals(a1, 0xBEA3F5CF520EA208, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F8A0ABC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void _ZZN2md24ARRotateTowardsUserLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_13CameraContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_26ARRotateTowardsUserContextEENK3__0clENS5_6EntityERN12arComponents14WorldTransformE(_QWORD *a1, unint64_t a2, double a3, double a4)
{
  uint64_t v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  __int128 v50;
  __int128 v51;
  _QWORD v52[3];
  _QWORD *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v6 = (double *)a1[1];
  v5 = a1[2];
  v7 = *(double *)*a1 - a3;
  v8 = *(double *)(*a1 + 8) - a4;
  v9 = *(double *)(*a1 + 16);
  v10 = 1.0 / sqrt(v7 * v7 + v8 * v8 + v9 * v9);
  v11 = v10 * v7;
  v12 = v10 * v8;
  v13 = v10 * v9;
  v14 = *v6;
  v15 = v6[1];
  v16 = v11 * *v6;
  v17 = v12 * v15;
  v18 = v6[2];
  v19 = v13 * v18;
  v20 = v12 * v15 + v16 + v13 * v18;
  v46 = 0.0;
  v47 = 0.0;
  v48 = 0.0;
  if (fabs(fabs(v20) + -1.0) <= 0.0001)
  {
    if (v20 >= 0.0)
      return;
    v46 = 0.0;
    v47 = 0.0;
    v48 = 1.0;
    v31 = 6.123234e-17;
  }
  else
  {
    v21 = -(v18 * v12 - v15 * v13);
    v22 = -(v14 * v13 - v18 * v11);
    v23 = -(v15 * v11 - v14 * v12);
    v24 = v19 + v17 + v16;
    v25 = v21 * v21 + v22 * v22 + v23 * v23;
    v26 = sqrt(v25 + v24 * v24) + v24;
    v27 = 1.0 / sqrt(v25 + v26 * v26);
    v28 = v27 * v21;
    v29 = v27 * v22;
    v30 = v27 * v23;
    v31 = v27 * v26;
    v46 = v28;
    v47 = v29;
    v48 = v30;
  }
  v49 = v31;
  v32 = *(_QWORD *)(v5 + 120);
  v52[0] = &off_1E42DA130;
  v52[1] = &v46;
  v53 = v52;
  v33 = (_QWORD *)gdc::Registry::storage<arComponents::RotationToApply>(v32);
  v34 = v33[4];
  if (a2 >> 39 < (v33[5] - v34) >> 3)
  {
    v35 = *(_QWORD *)(v34 + 8 * (a2 >> 39));
    if (v35)
    {
      v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(a2) & 0x7F));
      v38 = v33[7];
      v37 = v33[8];
      if (v36 < (v37 - v38) >> 3)
      {
        v39 = v38 + 8 * v36;
        if (v39 != v37 && *(_DWORD *)(v39 + 4) == HIDWORD(a2))
        {
          v40 = v33[10];
          if (v40)
          {
            if (v40 + 16 * v36 != v33[11])
            {
              LOBYTE(v51) = 0;
              if (v53)
              {
                (*(void (**)(_QWORD *))(*v53 + 48))(v53);
                goto LABEL_16;
              }
LABEL_22:
              std::__throw_bad_function_call[abi:nn180100]();
              __break(1u);
              return;
            }
          }
        }
      }
    }
  }
  v51 = xmmword_19FFB34C0;
  LOBYTE(v50) = 1;
  if (!v53)
    goto LABEL_22;
  (*(void (**)(_QWORD *, __int128 *, __int128 *))(*v53 + 48))(v53, &v51, &v50);
  v50 = v51;
  v43 = (uint64_t *)gdc::Registry::storage<arComponents::RotationToApply>(v32);
  gdc::ComponentStorageWrapper<arComponents::RotationToApply>::emplace(v43, a2, (uint64_t *)&v50);
LABEL_16:
  v44 = v53;
  if (v53 == v52)
  {
    v45 = 4;
    v44 = v52;
  }
  else
  {
    if (!v53)
      return;
    v45 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v44 + 8 * v45))(v44, v41, v42);
}

void sub_19F8A0D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZZN2md24ARRotateTowardsUserLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_26ARRotateTowardsUserContextEENK3__0clENS8_6EntityERN12arComponents14WorldTransformEEUlRNSL_15RotationToApplyEbE_NS_9allocatorISQ_EEFvSP_bEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN2md24ARRotateTowardsUserLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_26ARRotateTowardsUserContextEENK3__0clENS8_6EntityERN12arComponents14WorldTransformEEUlRNSL_15RotationToApplyEbE_NS_9allocatorISQ_EEFvSP_bEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42DA130;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md24ARRotateTowardsUserLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_26ARRotateTowardsUserContextEENK3__0clENS8_6EntityERN12arComponents14WorldTransformEEUlRNSL_15RotationToApplyEbE_NS_9allocatorISQ_EEFvSP_bEE7__cloneEPNS0_6__baseIST_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42DA130;
  a2[1] = v2;
  return result;
}

float _ZNSt3__110__function6__funcIZZN2md24ARRotateTowardsUserLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_26ARRotateTowardsUserContextEENK3__0clENS8_6EntityERN12arComponents14WorldTransformEEUlRNSL_15RotationToApplyEbE_NS_9allocatorISQ_EEFvSP_bEEclESP_Ob(uint64_t a1, float *a2)
{
  double *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float result;

  v2 = *(double **)(a1 + 8);
  v3 = *v2;
  v4 = v2[1];
  v5 = v2[2];
  v6 = v2[3];
  v8 = a2[2];
  v7 = a2[3];
  v9 = a2[1];
  v10 = (float)((float)((float)(v7 * v3) + (float)(*a2 * v6)) + (float)(v9 * v5)) - (float)(v8 * v4);
  v11 = (float)((float)(v9 * v6) - (float)((float)(*a2 * v5) - (float)(v7 * v4))) + (float)(v8 * v3);
  v12 = (float)((float)((float)(v7 * v5) + (float)(*a2 * v4)) - (float)(v9 * v3)) + (float)(v8 * v6);
  v13 = (float)((float)(*a2 * v3) + (float)(v9 * v4)) + (float)(v8 * v5);
  *a2 = v10;
  a2[1] = v11;
  result = -(float)(v13 - (float)(v7 * v6));
  a2[2] = v12;
  a2[3] = result;
  return result;
}

void gdc::ComponentStorageWrapper<arComponents::RotateTowardsUser>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RotateTowardsUser>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::RotateTowardsUser>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RotateTowardsUser>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ManagedObjectHolder<md::ARRotateTowardsUserContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1310;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::ARRotateTowardsUserContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1310;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARRotateTowardsUserContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::RealisticARMapEngineMode::~RealisticARMapEngineMode(md::RealisticARMapEngineMode *this)
{
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

md::RealisticARMapEngineMode *md::RealisticARMapEngineMode::RealisticARMapEngineMode(md::RealisticARMapEngineMode *this)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v2 = md::MapEngineMode::MapEngineMode((uint64_t)this, 10);
  *(_QWORD *)v2 = &off_1E429DA38;
  *(_WORD *)(v2 + 224) = 257;
  if (!*(_BYTE *)(v2 + 64))
    *((_BYTE *)this + 64) = 1;
  *((_QWORD *)this + 9) = 0x3FE0C152382D7365;
  *(_QWORD *)this = &off_1E42A0EF8;
  *((_BYTE *)this + 49) = 0;
  *((_DWORD *)this + 13) = 21;
  LOBYTE(v13) = 0;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0, &v13)+ 17) = 0;
  LOBYTE(v13) = 1;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 1u, &v13)+ 17) = 0;
  LOBYTE(v13) = 7;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 7u, &v13)+ 17) = 0;
  LOBYTE(v13) = 5;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 5u, &v13)+ 17) = 1;
  v10 = 0x4AC7AB7561675F6;
  v11 = "md::GridLogic]";
  v12 = 13;
  *(_QWORD *)&v7 = 0x336A901A15BB7353;
  *((_QWORD *)&v7 + 1) = "md::GridContext]";
  v8 = 15;
  v9 = 1;
  *(_QWORD *)&v13 = &v14;
  *((_QWORD *)&v13 + 1) = 1;
  v14 = xmmword_1E42F8C28;
  *(_QWORD *)&v15 = 21;
  *(_QWORD *)&v4 = &v5;
  *((_QWORD *)&v4 + 1) = 1;
  v5 = xmmword_1E42F8B38;
  v6 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v10, &v7, 0, (uint64_t)&v13, (uint64_t)&v4);
  v10 = 0x79FE0BD9535D5C4DLL;
  v11 = "md::AnchorLogic]";
  v12 = 15;
  *(_QWORD *)&v13 = &v14;
  *(_QWORD *)&v7 = 0x63B6FE00C0848868;
  *((_QWORD *)&v7 + 1) = "md::AnchorContext]";
  v8 = 17;
  v9 = 1;
  *((_QWORD *)&v13 + 1) = 2;
  v14 = xmmword_1E42F87F0;
  v15 = unk_1E42F8800;
  v16 = xmmword_1E42F8810;
  *(_QWORD *)&v4 = &v5;
  *((_QWORD *)&v4 + 1) = 1;
  v5 = xmmword_1E42F8E88;
  v6 = 21;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v10, &v7, 0, (uint64_t)&v13, (uint64_t)&v4);
  *(_QWORD *)&v7 = 0x8E629317B3523E63;
  *((_QWORD *)&v7 + 1) = "md::CameraLogic]";
  v8 = 15;
  *(_QWORD *)&v4 = 0x1AF456233693CD46;
  *((_QWORD *)&v4 + 1) = "md::CameraContext]";
  *(_QWORD *)&v5 = 17;
  BYTE8(v5) = 1;
  *(_QWORD *)&v13 = &v14;
  *((_QWORD *)&v13 + 1) = 1;
  v14 = xmmword_1E42F8820;
  *(_QWORD *)&v15 = 20;
  v10 = (unint64_t)&v12;
  v11 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v7, &v4, 0, (uint64_t)&v13, (uint64_t)&v10);
  v10 = 0x17767EADC5B287BLL;
  v11 = "md::ElevationLogic]";
  v12 = 18;
  *(_QWORD *)&v13 = &v14;
  *(_QWORD *)&v7 = 0x8BD499FBD96FBB9ELL;
  *((_QWORD *)&v7 + 1) = "md::ElevationContext]";
  v8 = 20;
  v9 = 1;
  *((_QWORD *)&v13 + 1) = 2;
  v14 = xmmword_1E42F88C8;
  v15 = unk_1E42F88D8;
  v16 = xmmword_1E42F88E8;
  *(_QWORD *)&v4 = &v5;
  *((_QWORD *)&v4 + 1) = 1;
  v5 = xmmword_1E42F88F8;
  v6 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v10, &v7, 0, (uint64_t)&v13, (uint64_t)&v4);
  *(_QWORD *)&v4 = 0xD2443A61CED86C69;
  *((_QWORD *)&v4 + 1) = "md::SettingsLogic]";
  *(_QWORD *)&v5 = 17;
  *(_QWORD *)&v13 = 0xC97B9E962ADF4AD4;
  *((_QWORD *)&v13 + 1) = "md::SettingsContext]";
  *(_QWORD *)&v14 = 19;
  BYTE8(v14) = 1;
  *(_QWORD *)&v7 = &v8;
  *((_QWORD *)&v7 + 1) = 0;
  v10 = (unint64_t)&v12;
  v11 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v4, &v13, 0, (uint64_t)&v7, (uint64_t)&v10);
  *(_QWORD *)&v4 = 0x2FED70A4459DFCA1;
  *((_QWORD *)&v4 + 1) = "md::StyleLogic]";
  *(_QWORD *)&v5 = 14;
  *(_QWORD *)&v13 = 0xE42D19AFCA302E68;
  *((_QWORD *)&v13 + 1) = "md::StyleLogicContext]";
  *(_QWORD *)&v14 = 21;
  BYTE8(v14) = 1;
  *(_QWORD *)&v7 = &v8;
  *((_QWORD *)&v7 + 1) = 0;
  v10 = (unint64_t)&v12;
  v11 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v4, &v13, 0, (uint64_t)&v7, (uint64_t)&v10);
  *(_QWORD *)&v4 = 0x5CBBA028798243FLL;
  *((_QWORD *)&v4 + 1) = "md::RouteOverlayLogic]";
  *(_QWORD *)&v5 = 21;
  *(_QWORD *)&v13 = 0x13043386C0978CC2;
  *((_QWORD *)&v13 + 1) = "md::RouteOverlayContext]";
  *(_QWORD *)&v14 = 23;
  BYTE8(v14) = 1;
  *(_QWORD *)&v7 = &v8;
  *((_QWORD *)&v7 + 1) = 0;
  v10 = (unint64_t)&v12;
  v11 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v4, &v13, 0, (uint64_t)&v7, (uint64_t)&v10);
  v10 = 0x20A1ED17D78F322BLL;
  v11 = "md::LabelsLogic]";
  v12 = 15;
  *(_QWORD *)&v7 = 0xA588623CD4116DAELL;
  *((_QWORD *)&v7 + 1) = "md::LabelsContext]";
  v8 = 17;
  v9 = 1;
  *(_QWORD *)&v13 = &v14;
  *((_QWORD *)&v13 + 1) = 1;
  v14 = xmmword_1E42F8C28;
  *(_QWORD *)&v15 = 21;
  *(_QWORD *)&v4 = &v5;
  *((_QWORD *)&v4 + 1) = 1;
  v5 = xmmword_1E42F8C40;
  v6 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v10, &v7, 0, (uint64_t)&v13, (uint64_t)&v4);
  *(_QWORD *)&v7 = 0xBDB8C71631E0AA6CLL;
  *((_QWORD *)&v7 + 1) = "md::MapZoomLevelStyleLogic]";
  v8 = 26;
  *(_QWORD *)&v4 = 0xF0AA2DB42EB710AFLL;
  *((_QWORD *)&v4 + 1) = "md::MapZoomLevelStyleLogicContext]";
  *(_QWORD *)&v5 = 33;
  BYTE8(v5) = 1;
  *(_QWORD *)&v13 = &v14;
  *((_QWORD *)&v13 + 1) = 2;
  v14 = xmmword_1E42F8898;
  v15 = unk_1E42F88A8;
  v16 = xmmword_1E42F88B8;
  v10 = (unint64_t)&v12;
  v11 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v7, &v4, 0, (uint64_t)&v13, (uint64_t)&v10);
  return this;
}

void sub_19F8A16EC(_Unwind_Exception *a1)
{
  md::MapEngineMode *v1;

  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

uint64_t *VertexData_Reader<TempFoundationTriangleAccessor,unsigned short>::VertexData_Reader(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __int16 v40;
  uint64_t v41;
  char v42;
  char **v43;

  v10 = **(_QWORD **)(a2 + 64);
  v11 = (*(_QWORD *)(v10 + 48) - *(_QWORD *)(v10 + 40)) / *(_QWORD *)(v10 + 8);
  a1[5] = 0;
  *a1 = 0;
  a1[1] = 0;
  v12 = *(_QWORD *)(v10 + 8) * v11;
  if ((*(_BYTE *)(v10 + 16) & 2) == 0)
  {
    v13 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v13 != -1)
    {
      v36 = &v42;
      v43 = &v36;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v43, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  v36 = a5;
  v37 = v10;
  v38 = 0;
  v39 = v12;
  v40 = 256;
  if (v12)
  {
    if (a5 && *(_BYTE *)(v10 + 17) != 2)
      v14 = (*(uint64_t (**)(char *, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a5 + 56))(a5, v10, 0, v12, 0, 1);
    else
      v14 = *(_QWORD *)(v10 + 72);
  }
  else
  {
    v14 = 0;
  }
  v41 = v14;
  ggl::BufferMemory::operator=(a1, (uint64_t)&v36);
  if (v41)
  {
    v16 = v38;
    v15 = v39;
    if (v39 != v38)
    {
      v17 = (_QWORD *)v37;
      v18 = v40;
      v19 = HIBYTE(v40);
      if (v36 && *(_BYTE *)(v37 + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v36 + 64))();
      if (v18 && !v19)
      {
        v21 = v17[7];
        v20 = v17[8];
        if (v20 == v21)
          v21 = v17[10] - v17[9];
        if (v16 < v21)
          v21 = v16;
        if (v20 <= v15)
          v20 = v15;
        if (v20 == v21)
          v20 = v21 + v17[10] - v17[9];
        v17[7] = v21;
        v17[8] = v20;
      }
    }
  }
  v22 = *(_QWORD *)(a2 + 96);
  a1[7] = 0;
  a1[6] = a1[5];
  a1[12] = 0;
  a1[8] = 0;
  v23 = *(_QWORD *)(v22 + 8);
  v24 = v23 * a3;
  v25 = v23 * a4;
  if ((*(_BYTE *)(v22 + 16) & 2) == 0)
  {
    v26 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v26 != -1)
    {
      v36 = &v42;
      v43 = &v36;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v43, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  v36 = a5;
  v37 = v22;
  v38 = v24;
  v39 = v25;
  v40 = 256;
  if (v25 == v24)
  {
    v27 = 0;
  }
  else if (a5 && *(_BYTE *)(v22 + 17) != 2)
  {
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a5 + 56))(a5, v22, v24, v25, 0, 1);
  }
  else
  {
    v27 = *(_QWORD *)(v22 + 72) + v24;
  }
  v41 = v27;
  ggl::BufferMemory::operator=(a1 + 7, (uint64_t)&v36);
  if (v41)
  {
    v29 = v38;
    v28 = v39;
    if (v39 != v38)
    {
      v30 = (_QWORD *)v37;
      v31 = v40;
      v32 = HIBYTE(v40);
      if (v36 && *(_BYTE *)(v37 + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v36 + 64))();
      if (v31 && !v32)
      {
        v34 = v30[7];
        v33 = v30[8];
        if (v33 == v34)
          v34 = v30[10] - v30[9];
        if (v29 < v34)
          v34 = v29;
        if (v33 <= v28)
          v33 = v28;
        if (v33 == v34)
          v33 = v34 + v30[10] - v30[9];
        v30[7] = v34;
        v30[8] = v33;
      }
    }
  }
  a1[13] = a1[12];
  a1[14] = (a4 - a3) / 3uLL;
  return a1;
}

uint64_t gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<OverlayTriangleAccessor>>::compute(uint64_t *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  BOOL v4;
  float *v5;
  float v6;
  float v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  double v14;
  float v15;
  float v16;
  double v17;
  double v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  char v37;
  char v39;
  unsigned __int8 v40;
  BOOL v41;
  char v42;
  char v44;
  BOOL v45;
  BOOL v46;
  float v47;
  float v48;
  float v49;
  float v50;
  double v51;
  double v52;
  float v53;
  float v54;
  double v55;
  double v56;
  float v57;
  float v58;
  double v59;
  double v60;
  double v61;
  double v62;
  float v63;
  float v64;
  double v65;
  double v66;
  double v67;
  double v68;
  BOOL v69;
  char v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;
  float *v74;
  double v75;
  float *v76;
  double v77;
  double v78;
  float *v79;
  double v80;
  double v81;
  float *v82;
  double v83;
  double v84;
  double v85;
  double v86;
  float *v87;
  double v88;
  double v89;
  uint64_t v90;
  char **v91;
  char **v92;
  char **v93;
  char **p_buf;
  char **v95;
  char **v96;
  char **v97;
  char **v98;
  uint64_t v99;
  char **v100;
  char **v101;
  char **v102;
  char **v103;
  char **v104;
  char *v105;
  char *v106;
  unint64_t v107;
  double *v108;
  double *v109;
  double v110;
  double v111;
  unint64_t v112;
  char **v113;
  unint64_t v114;
  unint64_t v115;
  double *v116;
  double *v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  _OWORD *v133;
  char *v134;
  char *v135;
  _OWORD *v136;
  __int128 v137;
  double v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  unint64_t v143;
  unint64_t v144;
  _OWORD *v145;
  char *v146;
  char *v147;
  _OWORD *v148;
  __int128 v149;
  double *v150;
  uint64_t v151;
  NSObject *v152;
  unint64_t v153;
  float **v154;
  float *v155;
  float v156;
  float v157;
  float *v158;
  float *v159;
  float v160;
  float v161;
  float v162;
  float v163;
  double *v164;
  unint64_t v165;
  double v166;
  double v167;
  float v168;
  float v169;
  float v170;
  double *v171;
  float v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double *v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  char **v188;
  char **v189;
  uint64_t v190;
  char **v191;
  char **v192;
  double v193;
  double v194;
  char **v195;
  char **v196;
  void **v197;
  char *v198;
  char *v199;
  double *v200;
  uint64_t v201;
  _BYTE v202[96];
  double v203[2];
  double v204;
  double v205;
  double v206;
  double v207;
  double v208[2];
  double v209;
  double v210;
  double v211;
  double v212;
  __int128 buf;
  char *v214;
  uint64_t v215;
  char v216[96];
  uint64_t v217;

  v217 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v2 = *(double *)(*a1 + 24);
  if (v2 == 0.0)
    return 0;
  v3 = a1[1];
  if (*(double *)(v3 + 24) == 0.0)
  {
    return 0;
  }
  else
  {
    v4 = 0;
    *((_BYTE *)a1 + 170) = 0;
    v5 = *(float **)(v1 + 16);
    v7 = *v5;
    v6 = v5[1];
    v8 = *(float **)(v1 + 8);
    v10 = *v8;
    v9 = v8[1];
    v11 = **(float **)v3;
    v12 = *(float *)(*(_QWORD *)v3 + 4);
    v13 = *v8 - v7;
    v14 = (float)-(float)((float)((float)(v12 - v6) * v13) - (float)((float)(v11 - v7) * (float)(v9 - v6))) / v2;
    v16 = **(float **)v1;
    v15 = *(float *)(*(_QWORD *)v1 + 4);
    v17 = (float)-(float)((float)((float)(v7 - v16) * (float)(v12 - v6)) - (float)((float)(v6 - v15) * (float)(v11 - v7)))
        / v2;
    v18 = 1.0 - (v14 + v17);
    *((double *)a1 + 2) = v14;
    *((double *)a1 + 3) = v17;
    *((double *)a1 + 4) = v18;
    v19 = *(float **)(v3 + 8);
    v20 = *v19;
    v21 = v19[1];
    v22 = *v19 - v7;
    v23 = *(double *)(v1 + 24);
    v24 = (float)-(float)((float)((float)(v21 - v6) * v13) - (float)(v22 * (float)(v9 - v6))) / v23;
    v25 = (float)-(float)((float)((float)(v21 - v6) * (float)(v7 - v16)) - (float)(v22 * (float)(v6 - v15))) / v23;
    v26 = 1.0 - (v24 + v25);
    *((double *)a1 + 5) = v24;
    *((double *)a1 + 6) = v25;
    *((double *)a1 + 7) = v26;
    v27 = *(float **)(v3 + 16);
    v28 = *v27;
    v29 = v27[1];
    v30 = *v27 - v7;
    v31 = (float)-(float)((float)((float)(v29 - v6) * v13) - (float)(v30 * (float)(v9 - v6)));
    v32 = *(double *)(v1 + 24);
    v33 = v31 / v32;
    v34 = (float)-(float)((float)((float)(v29 - v6) * (float)(v7 - v16)) - (float)(v30 * (float)(v6 - v15))) / v32;
    v35 = 1.0 - (v33 + v34);
    *((double *)a1 + 8) = v33;
    *((double *)a1 + 9) = v34;
    *((double *)a1 + 10) = v35;
    if (v14 >= 0.0 && v14 <= 1.0)
    {
      v4 = v17 >= 0.0;
      if (v17 > 1.0)
        v4 = 0;
      if (v18 < 0.0)
        v4 = 0;
      if (v18 > 1.0)
        v4 = 0;
    }
    v37 = *((_BYTE *)a1 + 169) | v4;
    if (v24 >= 0.0 && v24 <= 1.0)
    {
      v39 = 0;
      v41 = v25 >= 0.0 && v25 <= 1.0;
      if (v41 && v26 >= 0.0)
        v39 = 2 * (v26 <= 1.0);
    }
    else
    {
      v39 = 0;
    }
    v42 = v39 | v37;
    if (v33 >= 0.0 && v33 <= 1.0)
    {
      v44 = 0;
      v45 = v34 >= 0.0 && v34 <= 1.0;
      if (v45 && v35 >= 0.0)
        v44 = 4 * (v35 <= 1.0);
    }
    else
    {
      v44 = 0;
    }
    v46 = 0;
    *((_BYTE *)a1 + 169) = v44 | v42;
    v47 = v21 - v29;
    v48 = v16 - v28;
    v49 = v20 - v28;
    v50 = v15 - v29;
    v51 = *(double *)(v3 + 24);
    v52 = (float)-(float)((float)(v50 * (float)(v20 - v28)) - (float)(v47 * v48)) / v51;
    v53 = v29 - v12;
    v54 = v28 - v11;
    v55 = (float)-(float)((float)(v50 * (float)(v28 - v11)) - (float)((float)(v29 - v12) * v48)) / v51;
    v56 = 1.0 - (v55 + v52);
    *((double *)a1 + 12) = v52;
    *((double *)a1 + 13) = v55;
    *((double *)a1 + 14) = v56;
    v57 = v10 - v28;
    v58 = v9 - v29;
    v59 = *(double *)(v3 + 24);
    v60 = (float)-(float)((float)(v58 * v49) - (float)(v47 * v57)) / v59;
    v61 = (float)-(float)((float)(v58 * (float)(v28 - v11)) - (float)(v53 * v57)) / v59;
    v62 = 1.0 - (v60 + v61);
    *((double *)a1 + 15) = v60;
    *((double *)a1 + 16) = v61;
    *((double *)a1 + 17) = v62;
    v63 = v7 - v28;
    v64 = v6 - v29;
    v65 = *(double *)(v3 + 24);
    v66 = (float)-(float)((float)(v64 * v49) - (float)(v47 * v63)) / v65;
    v67 = (float)-(float)((float)(v64 * v54) - (float)(v53 * v63)) / v65;
    v68 = 1.0 - (v66 + v67);
    *((double *)a1 + 18) = v66;
    *((double *)a1 + 19) = v67;
    *((double *)a1 + 20) = v68;
    if (v52 >= 0.0 && v52 <= 1.0)
    {
      v69 = v55 >= 0.0;
      if (v55 > 1.0)
        v69 = 0;
      if (v56 < 0.0)
        v69 = 0;
      v46 = v56 <= 1.0 && v69;
    }
    v70 = 0;
    if (v60 >= 0.0 && v60 <= 1.0)
    {
      v70 = 0;
      if (v61 >= 0.0 && v61 <= 1.0 && v62 >= 0.0)
        v70 = 2 * (v62 <= 1.0);
    }
    v71 = 0;
    if (v66 >= 0.0 && v66 <= 1.0)
    {
      v71 = 0;
      if (v67 >= 0.0 && v67 <= 1.0 && v68 >= 0.0)
        v71 = 4 * (v68 <= 1.0);
    }
    *((_BYTE *)a1 + 168) |= v71 | v70 | v46;
    v72 = *a1;
    v73 = (_QWORD *)a1[1];
    v74 = *(float **)*a1;
    v75 = v74[1];
    v208[0] = *v74;
    v208[1] = v75;
    v76 = *(float **)(v72 + 8);
    v77 = *v76;
    v78 = v76[1];
    v209 = v77;
    v210 = v78;
    v79 = *(float **)(v72 + 16);
    v80 = *v79;
    v81 = v79[1];
    v211 = v80;
    v212 = v81;
    v82 = (float *)v73[1];
    v83 = *(float *)*v73;
    v84 = *(float *)(*v73 + 4);
    v203[0] = v83;
    v203[1] = v84;
    v85 = *v82;
    v86 = v82[1];
    v204 = v85;
    v205 = v86;
    v87 = (float *)v73[2];
    v88 = *v87;
    v89 = v87[1];
    v206 = v88;
    v207 = v89;
    if ((v208[0] - v80) * (v78 - v75) + (v81 - v75) * (v77 - v208[0]) < 0.0)
    {
      v209 = v80;
      v210 = v81;
      v211 = v77;
      v212 = v78;
    }
    if ((v84 - v86) * (v88 - v83) + (v89 - v84) * (v85 - v83) < 0.0)
    {
      v204 = v88;
      v205 = v89;
      v206 = v85;
      v207 = v86;
    }
    v200 = (double *)v202;
    v201 = 6;
    v198 = v202;
    v199 = v202;
    v214 = v216;
    v215 = 6;
    *(_QWORD *)&buf = v216;
    *((_QWORD *)&buf + 1) = v216;
    geo::small_vector_base<gm::Matrix<double,2,1>>::insert<gm::Matrix<double,2,1>*>((char **)&buf, v216, (char *)v208, (char *)&buf);
    v90 = 0;
    v91 = (char **)&buf + 1;
    v92 = &v199;
    v93 = &v198;
    p_buf = (char **)&buf;
    v95 = (char **)&buf + 1;
    v96 = &v199;
    do
    {
      v97 = v93;
      v98 = p_buf;
      v190 = v90 + 1;
      if (v90 == 2)
        v99 = 0;
      else
        v99 = v90 + 1;
      if (v90)
      {
        v93 = p_buf;
        v100 = v91;
      }
      else
      {
        v100 = v92;
      }
      if (v90)
        v101 = v92;
      else
        v101 = v91;
      if (v90)
        v102 = v95;
      else
        v102 = v96;
      if (!v90)
        v96 = v95;
      v191 = v96;
      v192 = v102;
      if (v90)
        v103 = p_buf + 1;
      else
        v103 = v97 + 1;
      if (v90)
      {
        p_buf = v97;
        v104 = v97 + 1;
      }
      else
      {
        v104 = p_buf + 1;
      }
      v188 = v103;
      v189 = v104;
      v105 = *v93;
      *v100 = *v93;
      v106 = *p_buf;
      if (*v101 != *p_buf)
      {
        v107 = 0;
        v108 = &v203[2 * v90];
        v109 = &v203[2 * v99];
        v193 = v108[1];
        v194 = *v108;
        v110 = *v109 - *v108;
        v111 = v109[1] - v193;
        v112 = (*v101 - *p_buf) >> 4;
        if (v90)
          v113 = v98;
        else
          v113 = v97;
        v196 = p_buf;
        v197 = (void **)v93;
        v195 = v101;
        do
        {
          v114 = v107 + 1;
          if (v107 + 1 == v112)
            v115 = 0;
          else
            v115 = v107 + 1;
          v116 = (double *)&v106[16 * v107];
          v117 = (double *)&v106[16 * v115];
          v118 = *v117;
          v119 = v117[1];
          v121 = *v116;
          v120 = v116[1];
          v122 = v108[1];
          v123 = (*v108 - *v117) * v111 + (v119 - v122) * v110;
          if ((*v108 - *v116) * v111 + (v120 - v122) * v110 <= 0.0 == v123 > 0.0)
          {
            v124 = v118 - v121;
            v125 = v119 - v120;
            v126 = -((v119 - v120) * v110 - (v118 - v121) * v111);
            if (v126 != 0.0)
            {
              v127 = *v93;
              v128 = (v105 - *v93) >> 4;
              v129 = (unint64_t)v113[3];
              if (v129 < v128 + 1)
              {
                v130 = v113[2];
                v131 = (1 << -(char)__clz(v129 + 1));
                if (v129 >= 0xFFFFFFFFFFFFFFFELL)
                  v131 = 1;
                if (v131 <= v128 + 1)
                  v132 = v128 + 1;
                else
                  v132 = v131;
                v133 = malloc_type_malloc(16 * v132, 0x1000040451B5BE8uLL);
                v93 = (char **)v197;
                v134 = (char *)*v197;
                v135 = *v100;
                if (*v197 != *v100)
                {
                  v136 = v133;
                  do
                  {
                    v137 = *(_OWORD *)v134;
                    v134 += 16;
                    *v136++ = v137;
                  }
                  while (v134 != v135);
                }
                if (v127 != v130)
                {
                  free(*v197);
                  v93 = (char **)v197;
                }
                *v93 = (char *)v133;
                v105 = (char *)&v133[v128];
                *v100 = v105;
                v113[3] = (char *)v132;
                v101 = v195;
                p_buf = v196;
              }
              v138 = ((v119 - v193) * v110 + (v194 - v118) * v111) / v126;
              *(double *)v105 = v118 + v138 * v124;
              *((double *)v105 + 1) = v119 + v138 * v125;
              v105 = *v100 + 16;
              *v100 = v105;
            }
          }
          if (v123 > 0.0)
          {
            v139 = *v93;
            v140 = (v105 - *v93) >> 4;
            v141 = (unint64_t)v113[3];
            if (v141 < v140 + 1)
            {
              v142 = v113[2];
              v143 = (1 << -(char)__clz(v141 + 1));
              if (v141 >= 0xFFFFFFFFFFFFFFFELL)
                v143 = 1;
              if (v143 <= v140 + 1)
                v144 = v140 + 1;
              else
                v144 = v143;
              v145 = malloc_type_malloc(16 * v144, 0x1000040451B5BE8uLL);
              v93 = (char **)v197;
              v146 = (char *)*v197;
              v147 = *v100;
              if (*v197 != *v100)
              {
                v148 = v145;
                do
                {
                  v149 = *(_OWORD *)v146;
                  v146 += 16;
                  *v148++ = v149;
                }
                while (v146 != v147);
              }
              if (v139 != v142)
              {
                free(*v197);
                v93 = (char **)v197;
              }
              *v93 = (char *)v145;
              v105 = (char *)&v145[v140];
              *v100 = v105;
              v113[3] = (char *)v144;
              v101 = v195;
              p_buf = v196;
            }
            *(_OWORD *)v105 = *(_OWORD *)v117;
            v105 = *v100 + 16;
            *v100 = v105;
          }
          v106 = *p_buf;
          v112 = (*v101 - *p_buf) >> 4;
          v107 = v114;
        }
        while (v114 < v112);
      }
      v91 = v191;
      v90 = v190;
      v92 = v192;
      v96 = v188;
      v95 = v189;
    }
    while (v190 != 3);
    if (v93 != &v198)
    {
      v199 = v198;
      geo::small_vector_base<gm::Matrix<double,2,1>>::insert<gm::Matrix<double,2,1>*>(&v198, v198, *v93, *v192);
    }
    if ((char *)buf != v214)
      free((void *)buf);
    v150 = (double *)v198;
    v151 = v199 - v198;
    if ((unint64_t)(v199 - v198) <= 0x20)
    {
      v40 = *((_BYTE *)a1 + 170);
    }
    else
    {
      if ((unint64_t)v151 >= 0x61)
      {
        if (GEOGetGeoDisplayCoreDefaultLog::onceToken != -1)
          dispatch_once(&GEOGetGeoDisplayCoreDefaultLog::onceToken, &__block_literal_global_42051);
        v152 = (id)GEOGetGeoDisplayCoreDefaultLog::log;
        if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 134217984;
          *(_QWORD *)((char *)&buf + 4) = (v199 - v198) >> 4;
          _os_log_impl(&dword_19F029000, v152, OS_LOG_TYPE_ERROR, "Exceeded triangle storage for polygon intersection (%zu verts)", (uint8_t *)&buf, 0xCu);
        }

        v150 = (double *)v198;
        v151 = v199 - v198;
      }
      v153 = v151 >> 4;
      if (v153 >= 6)
        v153 = 6;
      v40 = *((_BYTE *)a1 + 170);
      if (v153 - 1 >= 2)
      {
        v154 = (float **)*a1;
        v155 = *(float **)(*a1 + 16);
        v157 = *v155;
        v156 = v155[1];
        v159 = *(float **)*a1;
        v158 = *(float **)(*a1 + 8);
        v160 = v158[1] - v156;
        v161 = *v158 - v157;
        v162 = v156 - v159[1];
        v163 = v157 - *v159;
        v164 = v150 + 3;
        v165 = 2;
        do
        {
          v166 = *(v164 - 1);
          v167 = *v164;
          v168 = *v150;
          v169 = v150[1];
          v170 = v168 - v157;
          v171 = &v150[2 * (v165 % v153)];
          v172 = v169 - v156;
          v173 = *((double *)v154 + 3);
          v174 = (float)-(float)((float)(v161 * v172) - (float)(v170 * v160)) / v173;
          v175 = (float)-(float)((float)(v163 * v172) - (float)(v162 * v170)) / v173;
          v176 = *v171;
          v177 = v171[1];
          v178 = (double *)&a1[9 * v40];
          v178[22] = v174;
          v178[23] = v175;
          *(float *)&v166 = v166;
          *(float *)&v167 = v167;
          *(float *)&v166 = *(float *)&v166 - v157;
          *(float *)&v167 = *(float *)&v167 - v156;
          v178[24] = 1.0 - (v174 + v175);
          v179 = *((double *)v154 + 3);
          v180 = (float)-(float)((float)(v161 * *(float *)&v167) - (float)(*(float *)&v166 * v160)) / v179;
          v181 = (float)-(float)((float)(v163 * *(float *)&v167) - (float)(v162 * *(float *)&v166)) / v179;
          v178[25] = v180;
          v178[26] = v181;
          v182 = 1.0 - (v181 + v180);
          *(float *)&v176 = v176;
          *(float *)&v181 = v177;
          *(float *)&v176 = *(float *)&v176 - v157;
          *(float *)&v181 = *(float *)&v181 - v156;
          v178[27] = v182;
          v183 = *((double *)v154 + 3);
          v184 = (float)-(float)((float)(v161 * *(float *)&v181) - (float)(*(float *)&v176 * v160)) / v183;
          v185 = (float)-(float)((float)(v163 * *(float *)&v181) - (float)(v162 * *(float *)&v176)) / v183;
          v178[28] = v184;
          v178[29] = v185;
          v178[30] = 1.0 - (v185 + v184);
          *((_BYTE *)a1 + 170) = ++v40;
          ++v165;
          v164 += 2;
        }
        while (v153 != v165);
      }
    }
    if (v150 != v200)
      free(v150);
  }
  return v40;
}

void sub_19F8A24D8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F8A24E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,void *a51)
{
  if (a49 != a51)
    free(a49);
  if (a21 == a23)
    _Unwind_Resume(exception_object);
  free(a21);
  _Unwind_Resume(exception_object);
}

uint64_t *VertexData_Writer<FillTriangle>::allocateTriangles(uint64_t *a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;

  if (a2 >= 4)
    v3 = 4;
  else
    v3 = a2;
  v4 = a1[27];
  v5 = v4 + (3 * v3);
  if (v5 > a1[26])
  {
    v6 = __clz(v5 - 1);
    v7 = v5 > 1;
    v8 = (1 << -v6);
    if (!v7)
      v8 = 1;
    a1[26] = v8;
    v9 = a1[24];
    if (v7)
      v10 = 64 - v6;
    else
      v10 = 0;
    v11 = *(_QWORD *)(v9 + 8) << v10;
    v12 = *(_QWORD *)(v9 + 72);
    v13 = *(_QWORD *)(v9 + 80) - v12;
    if (v11 != v13)
    {
      if (v11 <= v13)
      {
        if (v11 < v13)
          *(_QWORD *)(v9 + 80) = v12 + v11;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v9 + 72, v11 - v13);
      }
      v14 = *(std::__shared_weak_count **)(v9 + 32);
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      *(_QWORD *)(v9 + 120) = 0;
      *(_DWORD *)(v9 + 112) = 0;
      v17 = *(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72);
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = v17;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 64) = v17;
      v4 = a1[27];
    }
  }
  v18 = 0;
  v19 = a1[24];
  v20 = v4 + 3;
  v75 = 0uLL;
  v21 = *(_QWORD *)(v19 + 8);
  v22 = v21 * v4;
  v23 = v21 * v20;
  *(_QWORD *)&v24 = 0;
  *((_QWORD *)&v24 + 1) = v19;
  if (v23 != v22)
    v18 = *(_QWORD *)(v19 + 72) + v22;
  v75 = v24;
  v76 = v22;
  v77 = v23;
  v79 = v18;
  v78 = 1;
  ggl::BufferMemory::operator=(a1, (uint64_t)&v75);
  if (v79)
  {
    v26 = v76;
    v25 = v77;
    if (v77 != v76)
    {
      v27 = (_QWORD *)*((_QWORD *)&v75 + 1);
      v28 = v78;
      v29 = HIBYTE(v78);
      if ((_QWORD)v75 && *(_BYTE *)(*((_QWORD *)&v75 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v75 + 64))();
      if (v28 && !v29)
      {
        v31 = v27[7];
        v30 = v27[8];
        if (v30 == v31)
          v31 = v27[10] - v27[9];
        if (v26 < v31)
          v31 = v26;
        if (v30 <= v25)
          v30 = v25;
        if (v30 == v31)
          v30 = v31 + v27[10] - v27[9];
        v27[7] = v31;
        v27[8] = v30;
      }
    }
  }
  v32 = a1[27];
  a1[27] = v32 + 3;
  if (v3 != 1)
  {
    v33 = 0;
    v34 = a1[24];
    v75 = 0uLL;
    v35 = *(_QWORD *)(v34 + 8);
    v36 = v35 * (v32 + 3);
    v37 = v35 * (v32 + 6);
    *(_QWORD *)&v38 = 0;
    *((_QWORD *)&v38 + 1) = v34;
    if (v37 != v36)
      v33 = *(_QWORD *)(v34 + 72) + v36;
    v75 = v38;
    v76 = v36;
    v77 = v37;
    v79 = v33;
    v78 = 1;
    ggl::BufferMemory::operator=(a1 + 6, (uint64_t)&v75);
    if (v79)
    {
      v40 = v76;
      v39 = v77;
      if (v77 != v76)
      {
        v41 = (_QWORD *)*((_QWORD *)&v75 + 1);
        v42 = v78;
        v43 = HIBYTE(v78);
        if ((_QWORD)v75 && *(_BYTE *)(*((_QWORD *)&v75 + 1) + 17) != 2)
          (*(void (**)(void))(*(_QWORD *)v75 + 64))();
        if (v42 && !v43)
        {
          v45 = v41[7];
          v44 = v41[8];
          if (v44 == v45)
            v45 = v41[10] - v41[9];
          if (v40 < v45)
            v45 = v40;
          if (v44 <= v39)
            v44 = v39;
          if (v44 == v45)
            v44 = v45 + v41[10] - v41[9];
          v41[7] = v45;
          v41[8] = v44;
        }
      }
    }
    v46 = a1[27];
    a1[27] = v46 + 3;
    if (v3 != 2)
    {
      v47 = 0;
      v48 = a1[24];
      v75 = 0uLL;
      v49 = *(_QWORD *)(v48 + 8);
      v50 = v49 * (v46 + 3);
      v51 = v49 * (v46 + 6);
      *(_QWORD *)&v52 = 0;
      *((_QWORD *)&v52 + 1) = v48;
      if (v51 != v50)
        v47 = *(_QWORD *)(v48 + 72) + v50;
      v75 = v52;
      v76 = v50;
      v77 = v51;
      v79 = v47;
      v78 = 1;
      ggl::BufferMemory::operator=(a1 + 12, (uint64_t)&v75);
      if (v79)
      {
        v54 = v76;
        v53 = v77;
        if (v77 != v76)
        {
          v55 = (_QWORD *)*((_QWORD *)&v75 + 1);
          v56 = v78;
          v57 = HIBYTE(v78);
          if ((_QWORD)v75 && *(_BYTE *)(*((_QWORD *)&v75 + 1) + 17) != 2)
            (*(void (**)(void))(*(_QWORD *)v75 + 64))();
          if (v56 && !v57)
          {
            v59 = v55[7];
            v58 = v55[8];
            if (v58 == v59)
              v59 = v55[10] - v55[9];
            if (v54 < v59)
              v59 = v54;
            if (v58 <= v53)
              v58 = v53;
            if (v58 == v59)
              v58 = v59 + v55[10] - v55[9];
            v55[7] = v59;
            v55[8] = v58;
          }
        }
      }
      v60 = a1[27];
      a1[27] = v60 + 3;
      if (v3 != 3)
      {
        v61 = 0;
        v62 = a1[24];
        v75 = 0uLL;
        v63 = *(_QWORD *)(v62 + 8);
        v64 = v63 * (v60 + 3);
        v65 = v63 * (v60 + 6);
        *(_QWORD *)&v66 = 0;
        *((_QWORD *)&v66 + 1) = v62;
        if (v65 != v64)
          v61 = *(_QWORD *)(v62 + 72) + v64;
        v75 = v66;
        v76 = v64;
        v77 = v65;
        v79 = v61;
        v78 = 1;
        ggl::BufferMemory::operator=(a1 + 18, (uint64_t)&v75);
        if (v79)
        {
          v68 = v76;
          v67 = v77;
          if (v77 != v76)
          {
            v69 = (_QWORD *)*((_QWORD *)&v75 + 1);
            v70 = v78;
            v71 = HIBYTE(v78);
            if ((_QWORD)v75 && *(_BYTE *)(*((_QWORD *)&v75 + 1) + 17) != 2)
              (*(void (**)(void))(*(_QWORD *)v75 + 64))();
            if (v70 && !v71)
            {
              v73 = v69[7];
              v72 = v69[8];
              if (v72 == v73)
                v73 = v69[10] - v69[9];
              if (v68 < v73)
                v73 = v68;
              if (v72 <= v67)
                v72 = v67;
              if (v72 == v73)
                v72 = v73 + v69[10] - v69[9];
              v69[7] = v73;
              v69[8] = v72;
            }
          }
        }
        a1[27] += 3;
      }
    }
  }
  return a1;
}

float **gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<OverlayTriangleAccessor>>::fillTriangle<FillTriangle>(float **result, uint64_t a2, double *a3, double *a4, double *a5)
{
  float *v5;
  float *v6;
  float *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int v17;
  int v18;
  double v19;
  double v20;
  double v21;
  int v22;
  int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int v28;
  int v29;
  int v30;

  v6 = *result;
  v5 = result[1];
  v7 = result[2];
  v8 = **result;
  v9 = *a3;
  v10 = a3[1];
  v11 = *v5;
  v12 = a3[2];
  v13 = *v7;
  v14 = (*result)[1];
  v15 = v5[1];
  v16 = v7[1];
  v17 = (int)fmin(fmax(*a3 * v8 + v10 * v11 + v12 * v13, 0.0), 65535.0);
  v18 = (int)fmin(fmax(*a3 * v14 + v10 * v15 + v12 * v16, 0.0), 65535.0);
  *(_WORD *)a2 = v17;
  *(_WORD *)(a2 + 2) = v18;
  v19 = *a4;
  v20 = a4[1];
  v21 = a4[2];
  v22 = (int)fmin(fmax(*a4 * v8 + v20 * v11 + v21 * v13, 0.0), 65535.0);
  v23 = (int)fmin(fmax(*a4 * v14 + v20 * v15 + v21 * v16, 0.0), 65535.0);
  *(_WORD *)(a2 + 8) = v22;
  *(_WORD *)(a2 + 10) = v23;
  v24 = *a5;
  v25 = a5[1];
  v26 = *a5 * v8 + v25 * v11;
  v27 = a5[2];
  v28 = (int)fmin(fmax(v26 + v27 * v13, 0.0), 65535.0);
  v29 = (int)fmin(fmax(*a5 * v14 + v25 * v15 + v27 * v16, 0.0), 65535.0);
  *(_WORD *)(a2 + 16) = v28;
  *(_WORD *)(a2 + 18) = v29;
  *(float *)&v26 = v9 * v6[2] + v10 * v5[2] + v12 * v7[2];
  *(_DWORD *)(a2 + 4) = LODWORD(v26);
  *(float *)&v26 = v19 * v6[2] + v20 * v5[2] + v21 * v7[2];
  *(_DWORD *)(a2 + 12) = LODWORD(v26);
  *(float *)&v26 = v24 * v6[2] + v25 * v5[2] + v27 * v7[2];
  *(_DWORD *)(a2 + 20) = LODWORD(v26);
  if (-((double)(v28 - v17) * (double)(v23 - v18) - (double)(v29 - v18) * (double)(v22 - v17)) < 0.0)
  {
    v30 = *(_DWORD *)(a2 + 8);
    *(_WORD *)(a2 + 8) = v28;
    *(_WORD *)(a2 + 10) = v29;
    *(_DWORD *)(a2 + 16) = v30;
  }
  return result;
}

double geo::small_vector_base<gm::Matrix<double,2,1>>::insert<gm::Matrix<double,2,1>*>(char **a1, char *a2, char *a3, char *a4)
{
  char *v5;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  BOOL v46;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  BOOL v60;
  BOOL v61;
  uint64_t v62;
  const double *v63;
  uint64_t v64;
  const double *v65;
  double *v66;
  double *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  __int128 *v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char *v81;
  float64x2x2_t v82;

  v5 = a3;
  v8 = *a1;
  v7 = a1[1];
  v9 = a2 - *a1;
  v10 = v9 >> 4;
  v11 = a4 - a3;
  v12 = (a4 - a3) >> 4;
  if (v7 == a2)
  {
    v24 = (unint64_t)a1[3];
    if (v12 > v24 - v10)
    {
      v25 = v9 >> 4;
      v26 = a1[2];
      v27 = (1 << -(char)__clz(v24 + 1));
      if (v24 >= 0xFFFFFFFFFFFFFFFELL)
        v28 = 1;
      else
        v28 = v27;
      if (v28 <= v10 + v12)
        v29 = v10 + v12;
      else
        v29 = v28;
      v30 = (char *)malloc_type_malloc(16 * v29, 0x1000040451B5BE8uLL);
      v31 = v30;
      v32 = *a1;
      v33 = a1[1];
      if (*a1 != v33)
      {
        v34 = v30;
        do
        {
          v35 = *(_OWORD *)v32;
          v32 += 16;
          *(_QWORD *)&v18 = v35;
          *(_OWORD *)v34 = v35;
          v34 += 16;
        }
        while (v32 != v33);
      }
      if (v8 != v26)
        free(*a1);
      a2 = &v31[16 * v25];
      *a1 = v31;
      a1[1] = a2;
      a1[3] = (char *)v29;
    }
    if (v5 != a4)
    {
      do
      {
        v36 = *(_OWORD *)v5;
        v5 += 16;
        *(_QWORD *)&v18 = v36;
        *(_OWORD *)a2 = v36;
        a2 += 16;
      }
      while (v5 != a4);
      a2 = a1[1];
    }
    a1[1] = &a2[16 * v12];
    return *(double *)&v18;
  }
  v13 = (v7 - v8) >> 4;
  v14 = (unint64_t)a1[3];
  if (v14 >= v13 + v12)
  {
    v19 = *a1;
  }
  else
  {
    v81 = a1[2];
    v15 = (1 << -(char)__clz(v14 + 1));
    if (v14 >= 0xFFFFFFFFFFFFFFFELL)
      v15 = 1;
    if (v15 <= v13 + v12)
      v16 = v13 + v12;
    else
      v16 = v15;
    v17 = (char *)malloc_type_malloc(16 * v16, 0x1000040451B5BE8uLL);
    v19 = v17;
    v20 = *a1;
    v21 = a1[1];
    if (*a1 != v21)
    {
      v22 = v17;
      do
      {
        v23 = *(_OWORD *)v20;
        v20 += 16;
        *(_QWORD *)&v18 = v23;
        *(_OWORD *)v22 = v23;
        v22 += 16;
      }
      while (v20 != v21);
    }
    if (v8 != v81)
      free(*a1);
    *a1 = v19;
    v7 = &v19[16 * v13];
    a1[3] = (char *)v16;
    v10 = v9 >> 4;
  }
  v37 = &v19[16 * v10];
  v38 = &v7[16 * v12];
  a1[1] = v38;
  if (v7 != v37)
  {
    v39 = v7 - &v19[v9 & 0xFFFFFFFFFFFFFFF0] - 16;
    if (v39 >= 0x4B0)
    {
      v40 = v39 & 0xFFFFFFFFFFFFFFF0;
      v41 = (v11 & 0xFFFFFFFFFFFFFFF0) - 16;
      v42 = (v11 & 0xFFFFFFFFFFFFFFF0) - 8;
      v43 = (unint64_t)&v7[v42];
      v44 = (unint64_t)(v7 - 8);
      v45 = &v7[v41 - (v39 & 0xFFFFFFFFFFFFFFF0)] > &v7[v41]
         || (unint64_t)&v7[v42 - (v39 & 0xFFFFFFFFFFFFFFF0)] > v43;
      v46 = v45 || &v7[-(v39 & 0xFFFFFFFFFFFFFFF0) - 16] > v7 - 16;
      if (!v46 && (unint64_t)&v7[-(v39 & 0xFFFFFFFFFFFFFFF0) - 8] <= v44)
      {
        v48 = (unint64_t)&v7[v41 - v40];
        v49 = (unint64_t)&v7[v42 - v40];
        v50 = &v7[-v40];
        v51 = (unint64_t)(v50 - 16);
        v52 = (unint64_t)(v50 - 8);
        v53 = v48 >= v44 || v51 >= v43;
        v54 = !v53;
        v55 = v48 >= (unint64_t)v7 || v52 >= v43;
        v56 = !v55;
        v57 = v49 >= v44 || v51 >= (unint64_t)v38;
        v58 = !v57;
        v59 = v49 >= (unint64_t)v7 || v52 >= (unint64_t)v38;
        v60 = !v59;
        v61 = v49 >= v43 || v48 >= (unint64_t)v38;
        if (v61 && !v54 && !v56 && !v58 && !v60)
        {
          v62 = (v39 >> 4) + 1;
          v38 -= 16 * (v62 & 0x1FFFFFFFFFFFFFFCLL);
          v63 = (const double *)v7;
          v64 = v62 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v65 = v63 - 4;
            *(float64x2x2_t *)&v18 = vld2q_f64(v65);
            v66 = (double *)&v63[2 * v12];
            v63 -= 8;
            v82 = vld2q_f64(v63);
            v67 = v66 - 4;
            v66 -= 8;
            vst2q_f64(v67, *(float64x2x2_t *)&v18);
            vst2q_f64(v66, v82);
            v64 -= 4;
          }
          while (v64);
          if (v62 == (v62 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_83;
          v7 -= 16 * (v62 & 0x1FFFFFFFFFFFFFFCLL);
        }
      }
    }
    v68 = v38 - 8;
    do
    {
      v69 = *((_QWORD *)v7 - 2);
      v7 -= 16;
      *((_QWORD *)v68 - 1) = v69;
      *(_QWORD *)&v18 = *((_QWORD *)v7 + 1);
      *(_QWORD *)v68 = v18;
      v68 -= 16;
    }
    while (v7 != v37);
  }
LABEL_83:
  if (v5 == a4)
    return *(double *)&v18;
  v70 = v11 - 16;
  if ((unint64_t)(v11 - 16) < 0xD0)
  {
    v71 = v5;
    goto LABEL_93;
  }
  if (v37 < &v5[(v70 & 0xFFFFFFFFFFFFFFF0) + 16]
    && &v19[(v9 & 0xFFFFFFFFFFFFFFF0) + 16 + (v70 & 0xFFFFFFFFFFFFFFF0)] > v5)
  {
    v71 = v5;
    goto LABEL_93;
  }
  v72 = (v70 >> 4) + 1;
  v73 = 16 * (v72 & 0x1FFFFFFFFFFFFFFCLL);
  v71 = &v5[v73];
  v74 = &v19[16 * v10 + 32];
  v75 = (__int128 *)(v5 + 32);
  v76 = v72 & 0x1FFFFFFFFFFFFFFCLL;
  do
  {
    v77 = *(v75 - 2);
    v18 = *(v75 - 1);
    v79 = *v75;
    v78 = v75[1];
    v75 += 4;
    *((_OWORD *)v74 - 2) = v77;
    *((_OWORD *)v74 - 1) = v18;
    *(_OWORD *)v74 = v79;
    *((_OWORD *)v74 + 1) = v78;
    v74 += 64;
    v76 -= 4;
  }
  while (v76);
  if (v72 != (v72 & 0x1FFFFFFFFFFFFFFCLL))
  {
    v37 += v73;
    do
    {
LABEL_93:
      *(_QWORD *)v37 = *(_QWORD *)v71;
      *(_QWORD *)&v18 = *((_QWORD *)v71 + 1);
      *((_QWORD *)v37 + 1) = v18;
      v71 += 16;
      v37 += 16;
    }
    while (v71 != a4);
  }
  return *(double *)&v18;
}

void std::__shared_ptr_pointer<ggl::VertexDataTyped<ggl::DaVinci::ElevatedFillVbo> *,std::shared_ptr<ggl::VertexDataTyped<ggl::DaVinci::ElevatedFillVbo>>::__shared_ptr_default_delete<ggl::VertexDataTyped<ggl::DaVinci::ElevatedFillVbo>,ggl::VertexDataTyped<ggl::DaVinci::ElevatedFillVbo>>,std::allocator<ggl::VertexDataTyped<ggl::DaVinci::ElevatedFillVbo>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::VertexDataTyped<ggl::DaVinci::ElevatedFillVbo> *,std::shared_ptr<ggl::VertexDataTyped<ggl::DaVinci::ElevatedFillVbo>>::__shared_ptr_default_delete<ggl::VertexDataTyped<ggl::DaVinci::ElevatedFillVbo>,ggl::VertexDataTyped<ggl::DaVinci::ElevatedFillVbo>>,std::allocator<ggl::VertexDataTyped<ggl::DaVinci::ElevatedFillVbo>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__function::__func<std::shared_ptr<ggl::PolylineOverlayRibbon::ElevatedMesh> `anonymous namespace'::intersectMeshWithoutPolygon<ggl::PolylineOverlayRibbon::BakedWidthMesh,ggl::PolylineOverlayRibbon::ElevatedMesh,RibbonOverlayTriangleAccessor,StrokeTriangle>(md::FoundationMesh const&,ggl::PolylineOverlayRibbon::BakedWidthMesh const&,ggl::Loader *,gdc::PolygonIntersectionDebugStats &)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<std::shared_ptr<ggl::PolylineOverlayRibbon::ElevatedMesh> `anonymous namespace'::intersectMeshWithoutPolygon<ggl::PolylineOverlayRibbon::BakedWidthMesh,ggl::PolylineOverlayRibbon::ElevatedMesh,RibbonOverlayTriangleAccessor,StrokeTriangle>(md::FoundationMesh const&,ggl::PolylineOverlayRibbon::BakedWidthMesh const&,ggl::Loader *,gdc::PolygonIntersectionDebugStats &)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<std::shared_ptr<ggl::PolylineOverlayRibbon::ElevatedMesh> `anonymous namespace'::intersectMeshWithoutPolygon<ggl::PolylineOverlayRibbon::BakedWidthMesh,ggl::PolylineOverlayRibbon::ElevatedMesh,RibbonOverlayTriangleAccessor,StrokeTriangle>(md::FoundationMesh const&,ggl::PolylineOverlayRibbon::BakedWidthMesh const&,ggl::Loader *,gdc::PolygonIntersectionDebugStats &)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<std::shared_ptr<ggl::PolylineOverlayRibbon::ElevatedMesh> `anonymous namespace'::intersectMeshWithoutPolygon<ggl::PolylineOverlayRibbon::BakedWidthMesh,ggl::PolylineOverlayRibbon::ElevatedMesh,RibbonOverlayTriangleAccessor,StrokeTriangle>(md::FoundationMesh const&,ggl::PolylineOverlayRibbon::BakedWidthMesh const&,ggl::Loader *,gdc::PolygonIntersectionDebugStats &)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E42C83A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::shared_ptr<ggl::PolylineOverlayRibbon::ElevatedMesh> `anonymous namespace'::intersectMeshWithoutPolygon<ggl::PolylineOverlayRibbon::BakedWidthMesh,ggl::PolylineOverlayRibbon::ElevatedMesh,RibbonOverlayTriangleAccessor,StrokeTriangle>(md::FoundationMesh const&,ggl::PolylineOverlayRibbon::BakedWidthMesh const&,ggl::Loader *,gdc::PolygonIntersectionDebugStats &)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<std::shared_ptr<ggl::PolylineOverlayRibbon::ElevatedMesh> `anonymous namespace'::intersectMeshWithoutPolygon<ggl::PolylineOverlayRibbon::BakedWidthMesh,ggl::PolylineOverlayRibbon::ElevatedMesh,RibbonOverlayTriangleAccessor,StrokeTriangle>(md::FoundationMesh const&,ggl::PolylineOverlayRibbon::BakedWidthMesh const&,ggl::Loader *,gdc::PolygonIntersectionDebugStats &)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E42C83A8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::shared_ptr<ggl::PolylineOverlayRibbon::ElevatedMesh> `anonymous namespace'::intersectMeshWithoutPolygon<ggl::PolylineOverlayRibbon::BakedWidthMesh,ggl::PolylineOverlayRibbon::ElevatedMesh,RibbonOverlayTriangleAccessor,StrokeTriangle>(md::FoundationMesh const&,ggl::PolylineOverlayRibbon::BakedWidthMesh const&,ggl::Loader *,gdc::PolygonIntersectionDebugStats &)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<std::shared_ptr<ggl::PolylineOverlayRibbon::ElevatedMesh> `anonymous namespace'::intersectMeshWithoutPolygon<ggl::PolylineOverlayRibbon::BakedWidthMesh,ggl::PolylineOverlayRibbon::ElevatedMesh,RibbonOverlayTriangleAccessor,StrokeTriangle>(md::FoundationMesh const&,ggl::PolylineOverlayRibbon::BakedWidthMesh const&,ggl::Loader *,gdc::PolygonIntersectionDebugStats &)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, char **a2)
{
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  int v41;
  _QWORD *v42;
  _DWORD *v43;
  float *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  float32x2_t *v55;
  float32x2_t *v56;
  float32x2_t *v57;
  float32x2_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  BOOL v64;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  float *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void **v73;
  void **v74;
  unint64_t *v75;
  uint64_t v76;
  void **v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void **v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  float *v91;
  float *v92;
  unsigned __int16 *v93;
  float *v94;
  float *v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  float **v99;
  double *v100;
  uint64_t v101;
  unsigned __int16 **v102;
  unsigned __int16 *v103;
  unsigned int *i;
  uint64_t v105;
  unsigned __int16 *v106;
  float *v107;
  float *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  unsigned int *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  BOOL v119;
  unint64_t v121;
  uint8x8_t v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  void *v132;
  void **v133;
  void **v134;
  unint64_t v135;
  void *v136;
  void *v137;
  void **v138;
  unint64_t v139;
  void *v140;
  _QWORD *v141;
  _DWORD *v142;
  float *v143;
  unint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unsigned __int16 *v152;
  float32x2_t *v153;
  float32x2_t *v154;
  float32x2_t *v155;
  float32x2_t v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  BOOL v162;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  float *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  void **v171;
  void **v172;
  unint64_t *v173;
  uint64_t v174;
  void **v175;
  uint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  void **v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  void *v188;
  float *v189;
  float *v190;
  unsigned int *v191;
  float *v192;
  float *v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  float **v197;
  double *v198;
  uint64_t v199;
  unsigned __int16 **v200;
  unsigned __int16 *v201;
  unint64_t v202;
  unsigned int *v203;
  uint64_t v204;
  unsigned __int16 *v205;
  float *v206;
  float *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  _QWORD *v212;
  unsigned int *v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int v218;
  unint64_t v221;
  uint8x8_t v222;
  unint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  unint64_t v232;
  void *v233;
  void **v234;
  void **v235;
  unint64_t v236;
  void *v237;
  void *v238;
  void **v239;
  unint64_t v240;
  void *v241;
  unint64_t v242;
  unint64_t v243;
  _QWORD *v244;
  int v245;
  int v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  _QWORD *v251;
  int v252;
  int v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  _QWORD *v258;
  int v259;
  int v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  _QWORD *v265;
  int v266;
  int v267;
  unint64_t v268;
  unint64_t v269;
  float *v270;
  float *v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  _QWORD *v276;
  _QWORD *v277;
  _QWORD *v278;
  _QWORD *v279;
  unint64_t v280;
  unint64_t v281;
  _QWORD *v282;
  _QWORD *v283;
  uint64_t *v284;
  uint64_t *v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  _DWORD *v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  _DWORD *v296;
  uint64_t v297;
  unint64_t v298;
  __int128 v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  __int128 v307;
  uint64_t v308;
  uint64_t v309;
  void (***v310)(void);
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unsigned __int8 v314;
  unsigned __int8 v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unsigned __int8 v322;
  unsigned __int8 v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  __int128 v327;
  unint64_t v328;
  unint64_t v329;
  __int16 v330;
  uint64_t v331;
  uint64_t v332;
  __int128 v333;
  unint64_t v334;
  unint64_t v335;
  __int16 v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  float *v340;
  float *v341;
  float *v342;
  double v343;
  float *v344;
  float *v345;
  float *v346;
  double v347;
  float *v348;
  float *v349;
  float *v350;
  double v351;
  void *v352;
  unsigned int *v353;
  void *v354;
  __int128 v355;
  __int128 __p;
  int v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  float32x2_t *v364;
  float32x2_t *v365;
  float32x2_t *v366;
  double v367;
  void *v368;
  unint64_t v369;
  unint64_t v370;
  float **v371;
  float **v372;
  __int16 v373;
  unsigned __int8 v374;
  _BYTE v375[448];

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD **)(v4 + 96);
  v7 = v5[5];
  v6 = v5[6];
  v8 = v5[1];
  v9 = **(_QWORD **)(v4 + 64);
  v10 = (*(_QWORD *)(v9 + 48) - *(_QWORD *)(v9 + 40)) / *(_QWORD *)(v9 + 8);
  v331 = 0;
  v327 = 0uLL;
  v11 = *(_QWORD *)(v9 + 8) * v10;
  if ((*(_BYTE *)(v9 + 16) & 2) == 0)
  {
    v12 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v12 != -1)
    {
      v371 = (float **)&v361;
      v310 = (void (***)(void))&v371;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v310, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  v13 = v6 - v7;
  *(_QWORD *)&v14 = v3;
  if (v11)
  {
    if (v3 && *(_BYTE *)(v9 + 17) != 2)
    {
      v16 = (*(uint64_t (**)(char *, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 56))(v3, v9, 0, v11, 0, 1);
      *(_QWORD *)&v14 = v3;
      v15 = v16;
    }
    else
    {
      v15 = *(_QWORD *)(v9 + 72);
    }
  }
  else
  {
    v15 = 0;
  }
  *(_QWORD *)&v17 = v14;
  *((_QWORD *)&v17 + 1) = v9;
  v18 = v13 / v8;
  if (v331)
  {
    v20 = v328;
    v19 = v329;
    if (v329 != v328)
    {
      v21 = (_QWORD *)*((_QWORD *)&v327 + 1);
      v22 = v330;
      v23 = HIBYTE(v330);
      if ((_QWORD)v327 && *(_BYTE *)(*((_QWORD *)&v327 + 1) + 17) != 2)
      {
        v304 = v14;
        v302 = v18;
        v299 = v17;
        (*(void (**)(void))(*(_QWORD *)v327 + 64))();
        v17 = v299;
        v18 = v302;
        *(_QWORD *)&v14 = v304;
      }
      if (v22 && !v23)
      {
        v25 = v21[7];
        v24 = v21[8];
        if (v24 == v25)
          v25 = v21[10] - v21[9];
        if (v20 < v25)
          v25 = v20;
        if (v24 <= v19)
          v24 = v19;
        if (v24 == v25)
          v24 = v25 + v21[10] - v21[9];
        v21[7] = v25;
        v21[8] = v24;
      }
    }
  }
  v327 = v17;
  v328 = 0;
  v329 = v11;
  v330 = 256;
  v331 = v15;
  v332 = v15;
  v26 = *(_QWORD *)(v4 + 96);
  v337 = 0;
  v333 = 0uLL;
  v27 = *(_QWORD *)(v26 + 8) * v18;
  if ((*(_BYTE *)(v26 + 16) & 2) == 0)
  {
    v28 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v28 != -1)
    {
      v371 = (float **)&v361;
      v310 = (void (***)(void))&v371;
      v305 = v14;
      v29 = v18;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v310, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      v18 = v29;
      *(_QWORD *)&v14 = v305;
    }
  }
  if (v27)
  {
    if (v3 && *(_BYTE *)(v26 + 17) != 2)
    {
      v306 = v14;
      v31 = v18;
      v32 = (*(uint64_t (**)(char *, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 56))(v3, v26, 0, v27, 0, 1);
      v18 = v31;
      *(_QWORD *)&v14 = v306;
      v30 = v32;
    }
    else
    {
      v30 = *(_QWORD *)(v26 + 72);
    }
  }
  else
  {
    v30 = 0;
  }
  *((_QWORD *)&v14 + 1) = v26;
  if (v337)
  {
    v34 = v334;
    v33 = v335;
    if (v335 != v334)
    {
      v35 = (_QWORD *)*((_QWORD *)&v333 + 1);
      v36 = v336;
      v37 = HIBYTE(v336);
      if ((_QWORD)v333 && *(_BYTE *)(*((_QWORD *)&v333 + 1) + 17) != 2)
      {
        v307 = v14;
        v303 = v18;
        (*(void (**)(void))(*(_QWORD *)v333 + 64))();
        v18 = v303;
        v14 = v307;
      }
      if (v36 && !v37)
      {
        v39 = v35[7];
        v38 = v35[8];
        if (v38 == v39)
          v39 = v35[10] - v35[9];
        if (v34 < v39)
          v39 = v34;
        if (v38 <= v33)
          v38 = v33;
        if (v38 == v39)
          v38 = v39 + v35[10] - v35[9];
        v35[7] = v39;
        v35[8] = v38;
      }
    }
  }
  v333 = v14;
  v334 = 0;
  v335 = v27;
  v336 = 256;
  v337 = v30;
  v338 = v30;
  v339 = v18 / 3;
  v40 = *(_QWORD **)(a1 + 8);
  v41 = *(_DWORD *)(v40[12] + 216);
  if (v41 == 1)
  {
    VertexData_Reader<TempFoundationTriangleAccessor,unsigned short>::VertexData_Reader((uint64_t *)&v310, (uint64_t)v40, v40[18], v40[19], v3);
    v141 = **(_QWORD ***)(a1 + 32);
    v309 = **(_QWORD **)(a1 + 40);
    v142 = *(_DWORD **)(a1 + 56);
    v279 = **(_QWORD ***)(a1 + 48);
    v143 = *(float **)(a1 + 8);
    v285 = *(uint64_t **)(a1 + 16);
    v142[2] = 0;
    v296 = v142;
    *(_QWORD *)v142 = 0;
    if (!v326)
      goto LABEL_290;
    v144 = v339;
    if (!v339)
      goto LABEL_290;
    if ((v339 & 0x8000000000000000) != 0)
      abort();
    v145 = (v339 - 1) >> 6;
    v146 = operator new(8 * (v145 + 1));
    v48 = v146;
    v370 = v145 + 1;
    v368 = v146;
    v369 = v144;
    if (v144 >= 0x41)
      v147 = (v144 - 1) >> 6;
    else
      v147 = 0;
    v146[v147] = 0;
    v148 = v144;
    v273 = v144;
    if (v144 >= 0x40)
    {
      bzero(v146, 8 * (v144 >> 6));
      v148 = v144;
    }
    if ((v148 & 0x3F) != 0)
      v48[v144 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v148 & 0x3F));
    v149 = 0;
    v271 = v143;
    while (1)
    {
      v150 = v149 >> 6;
      v151 = 1 << v149;
      if ((v48[v149 >> 6] & (1 << v149)) == 0)
      {
        v152 = (unsigned __int16 *)(v338 + 6 * v149);
        v153 = (float32x2_t *)(v332 + 16 * *v152);
        v154 = (float32x2_t *)(v332 + 16 * v152[1]);
        v155 = (float32x2_t *)(v332 + 16 * v152[2]);
        v364 = v153;
        v365 = v154;
        v366 = v155;
        v156 = vmul_f32(vsub_f32(*v153, *v155), (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*v154, *v155)));
        v156.f32[0] = vsub_f32(v156, (float32x2_t)vdup_lane_s32((int32x2_t)v156, 1)).f32[0];
        v367 = v156.f32[0];
        if (v156.f32[0] != 0.0)
        {
          if (v143[48] > fminf(v155->f32[0], fminf(v154->f32[0], v153->f32[0])))
          {
            v157 = v153->f32[1];
            v158 = v154->f32[1];
            v159 = v155->f32[1];
            v160 = fmaxf(fmaxf(v157, v158), v159);
            v161 = fminf(v159, fminf(v158, v157));
            v162 = v143[46] >= fmaxf(fmaxf(v153->f32[0], v154->f32[0]), v155->f32[0]) || v143[49] <= v161;
            if (!v162 && v143[47] < v160)
            {
              v275 = v149;
              v164 = v326;
              if (v326)
              {
                v165 = 0;
                v166 = 0;
                while (1)
                {
                  v167 = (float *)(v317 + 16 * *(unsigned int *)(v325 + v165 + 4));
                  v168 = *(unsigned int *)(v325 + v165 + 8);
                  *(_QWORD *)&v361 = v317 + 16 * *(unsigned int *)(v325 + v165);
                  *((_QWORD *)&v361 + 1) = v167;
                  *(_QWORD *)&v362 = v317 + 16 * v168;
                  *((double *)&v362 + 1) = (float)((float)((float)(*(float *)(v362 + 4) - *(float *)(v361 + 4))
                                                         * (float)(*v167 - *(float *)v362))
                                                 + (float)((float)(*(float *)v361 - *(float *)v362)
                                                         * (float)(v167[1] - *(float *)(v362 + 4))));
                  v371 = (float **)&v361;
                  v372 = (float **)&v364;
                  v373 = 0;
                  v374 = 0;
                  if (gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<RibbonOverlayTriangleAccessor>>::compute((uint64_t *)&v371))
                    break;
                  ++v166;
                  v165 += 12;
                  if (v164 == v166)
                    goto LABEL_200;
                }
                ++v296[1];
                v362 = 0u;
                v363 = 0u;
                v361 = 0u;
                std::deque<gdc::TrianglePair>::__add_back_capacity((uint64_t)&v361);
                v169 = *((_QWORD *)&v363 + 1);
                v170 = v363;
                v171 = (void **)v362;
                v172 = (void **)*((_QWORD *)&v361 + 1);
                v173 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)&v361 + 1)
                                                      + (((*((_QWORD *)&v363 + 1) + (_QWORD)v363) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * (BYTE8(v363) + v363));
                v149 = v275;
                *v173 = v275;
                v173[1] = v166;
                v119 = __CFADD__(v169, 1);
                v174 = v169 + 1;
                if (v119)
                {
                  v175 = v171;
                }
                else
                {
                  v277 = v48;
                  v283 = v141;
                  do
                  {
                    v176 = *((_QWORD *)&v361 + 1);
                    v177 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)&v361 + 1) + ((v170 >> 5) & 0x7FFFFFFFFFFFFF8))
                                              + 16 * v170);
                    v178 = *v177;
                    v179 = v177[1];
                    v180 = v174 - 1;
                    *((_QWORD *)&v363 + 1) = v174 - 1;
                    *(_QWORD *)&v363 = v170 + 1;
                    v298 = v170 + 1;
                    if (v170 + 1 >= 0x200)
                    {
                      v181 = v170;
                      operator delete(**((void ***)&v361 + 1));
                      *((_QWORD *)&v361 + 1) = v176 + 8;
                      v298 = v181 - 255;
                      *(_QWORD *)&v363 = v181 - 255;
                    }
                    v359 = 0u;
                    v360 = 0u;
                    v358 = 0u;
                    v355 = 0u;
                    __p = 0u;
                    v357 = 1065353216;
                    std::deque<unsigned long>::__add_back_capacity((uint64_t)&v358);
                    v182 = *((_QWORD *)&v360 + 1);
                    v183 = v360;
                    v184 = (void **)*((_QWORD *)&v358 + 1);
                    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v358 + 1)
                                          + (((*((_QWORD *)&v360 + 1) + (_QWORD)v360) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * ((*((_QWORD *)&v360 + 1) + v360) & 0x1FF)) = v179;
                    v185 = v182 + 1;
                    *((_QWORD *)&v360 + 1) = v182 + 1;
                    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v355, v179, v179);
                    gdc::_overlayNeighborsNoDegenerates<VertexData_Reader<RibbonOverlayTriangleAccessor,unsigned short>>(&v352, (uint64_t)&v327, v279, v178, &v368);
                    v281 = v178;
                    if (v185)
                    {
                      v291 = 3 * v178 + 1;
                      v293 = 3 * v178;
                      v289 = 3 * v178 + 2;
                      v186 = v298;
                      do
                      {
                        while (1)
                        {
                          v301 = (*(_QWORD **)((char *)v184 + ((v183 >> 6) & 0x3FFFFFFFFFFFFF8)))[v183 & 0x1FF];
                          --v185;
                          v187 = v183 + 1;
                          *((_QWORD *)&v360 + 1) = v185;
                          *(_QWORD *)&v360 = v183 + 1;
                          if (v183 + 1 >= 0x400)
                          {
                            v188 = *v184++;
                            operator delete(v188);
                            v187 = v183 - 511;
                            *((_QWORD *)&v358 + 1) = v184;
                            *(_QWORD *)&v360 = v183 - 511;
                          }
                          v189 = (float *)(v332 + 16 * *(unsigned __int16 *)(v338 + 2 * v291));
                          v190 = (float *)(v332 + 16 * *(unsigned __int16 *)(v338 + 2 * v289));
                          v348 = (float *)(v332 + 16 * *(unsigned __int16 *)(v338 + 2 * v293));
                          v349 = v189;
                          v350 = v190;
                          v351 = (float)((float)((float)(v190[1] - v348[1]) * (float)(*v189 - *v190))
                                       + (float)((float)(*v348 - *v190) * (float)(v189[1] - v190[1])));
                          v191 = (unsigned int *)(v325 + 12 * v301);
                          v192 = (float *)(v317 + 16 * *v191);
                          v193 = (float *)(v317 + 16 * v191[1]);
                          v194 = v191[2];
                          v344 = v192;
                          v345 = v193;
                          v346 = (float *)(v317 + 16 * v194);
                          v347 = (float)((float)((float)(v346[1] - v192[1]) * (float)(*v193 - *v346))
                                       + (float)((float)(*v192 - *v346) * (float)(v193[1] - v346[1])));
                          v371 = &v344;
                          v372 = &v348;
                          v373 = 0;
                          v374 = 0;
                          v195 = gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<RibbonOverlayTriangleAccessor>>::compute((uint64_t *)&v371);
                          if (v195)
                            break;
                          ++*v296;
                          v183 = v187;
                          if (!v185)
                            goto LABEL_265;
                        }
                        VertexData_Writer<FillTriangle>::allocateTriangles(v285, v195);
                        if (v374)
                        {
                          v287 = v186;
                          v196 = 0;
                          v197 = v371;
                          v198 = (double *)v372;
                          v199 = 72 * v374;
                          v200 = (unsigned __int16 **)(v285 + 5);
                          do
                          {
                            v201 = *v200;
                            v200 += 6;
                            gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<RibbonOverlayTriangleAccessor>>::fillTriangle<StrokeTriangle>(v197, v198, v201, (double *)&v375[v196], (double *)&v375[v196 + 24], (double *)&v375[v196 + 48]);
                            v196 += 72;
                          }
                          while (v199 != v196);
                          v141 = v283;
                          v186 = v287;
                        }
                        v202 = v298;
                        ++*v296;
                        v203 = (unsigned int *)v352;
                        if (v352 != v353)
                        {
                          do
                          {
                            while (1)
                            {
                              v204 = *v203;
                              v205 = (unsigned __int16 *)(v338 + 6 * v204);
                              v206 = (float *)(v332 + 16 * *v205);
                              v207 = (float *)(v332 + 16 * v205[1]);
                              v208 = v205[2];
                              v340 = v206;
                              v341 = v207;
                              v342 = (float *)(v332 + 16 * v208);
                              v343 = (float)((float)((float)(v342[1] - v206[1]) * (float)(*v207 - *v342))
                                           + (float)((float)(*v206 - *v342) * (float)(v207[1] - v342[1])));
                              v371 = &v344;
                              v372 = &v340;
                              v373 = 0;
                              v374 = 0;
                              if (gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<RibbonOverlayTriangleAccessor>>::compute((uint64_t *)&v371))
                                break;
                              if (++v203 == v353)
                                goto LABEL_228;
                            }
                            v209 = *((_QWORD *)&v361 + 1);
                            v210 = 32 * (v362 - *((_QWORD *)&v361 + 1)) - 1;
                            if ((_QWORD)v362 == *((_QWORD *)&v361 + 1))
                              v210 = 0;
                            v211 = v180 + v202;
                            if (v210 == v180 + v202)
                            {
                              std::deque<gdc::TrianglePair>::__add_back_capacity((uint64_t)&v361);
                              v209 = *((_QWORD *)&v361 + 1);
                              v180 = *((_QWORD *)&v363 + 1);
                              v202 = v363;
                              v211 = *((_QWORD *)&v363 + 1) + v363;
                            }
                            v212 = (_QWORD *)(*(_QWORD *)(v209 + ((v211 >> 5) & 0x7FFFFFFFFFFFFF8))
                                            + 16 * v211);
                            *v212 = v204;
                            v212[1] = v301;
                            *((_QWORD *)&v363 + 1) = ++v180;
                            v213 = v353;
                            if (v203 + 1 != v353)
                              memmove(v203, v203 + 1, (((char *)v353 - (char *)v203) & 0xFFFFFFFFFFFFFFFCLL) - 4);
                            v353 = v213 - 1;
                            v186 = v202;
                          }
                          while (v203 != v353);
                        }
LABEL_228:
                        v298 = v202;
                        v214 = v186;
                        v215 = *(unsigned int *)(v141[3] + 4 * (v301 + v309));
                        v216 = *v141;
                        v217 = v215;
                        do
                        {
                          v218 = *(_DWORD *)(v216 + 16 * (v217 ^ 1) + 12);
                          if (v218 != -1 && v218 >= v309 && v218 < HIDWORD(v309))
                          {
                            v221 = v218 - v309;
                            if (*((_QWORD *)&v355 + 1))
                            {
                              v222 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v355 + 8));
                              v222.i16[0] = vaddlv_u8(v222);
                              if (v222.u32[0] > 1uLL)
                              {
                                v223 = v218 - v309;
                                if (*((_QWORD *)&v355 + 1) <= v221)
                                  v223 = v221 % *((_QWORD *)&v355 + 1);
                              }
                              else
                              {
                                v223 = (DWORD2(v355) - 1) & v221;
                              }
                              v224 = *(_QWORD **)(v355 + 8 * v223);
                              if (v224)
                              {
                                v225 = (_QWORD *)*v224;
                                if (v225)
                                {
                                  if (v222.u32[0] < 2uLL)
                                  {
                                    while (1)
                                    {
                                      v226 = v225[1];
                                      if (v226 == v221)
                                      {
                                        if (v225[2] == v221)
                                          goto LABEL_230;
                                      }
                                      else if ((v226 & (*((_QWORD *)&v355 + 1) - 1)) != v223)
                                      {
                                        goto LABEL_258;
                                      }
                                      v225 = (_QWORD *)*v225;
                                      if (!v225)
                                        goto LABEL_258;
                                    }
                                  }
                                  do
                                  {
                                    v227 = v225[1];
                                    if (v227 == v221)
                                    {
                                      if (v225[2] == v221)
                                        goto LABEL_230;
                                    }
                                    else
                                    {
                                      if (v227 >= *((_QWORD *)&v355 + 1))
                                        v227 %= *((_QWORD *)&v355 + 1);
                                      if (v227 != v223)
                                        break;
                                    }
                                    v225 = (_QWORD *)*v225;
                                  }
                                  while (v225);
                                }
                              }
                            }
LABEL_258:
                            v184 = (void **)*((_QWORD *)&v358 + 1);
                            v228 = (((_QWORD)v359 - *((_QWORD *)&v358 + 1)) << 6) - 1;
                            if ((_QWORD)v359 == *((_QWORD *)&v358 + 1))
                              v228 = 0;
                            v229 = v185 + v187;
                            if (v228 == v185 + v187)
                            {
                              std::deque<unsigned long>::__add_back_capacity((uint64_t)&v358);
                              v184 = (void **)*((_QWORD *)&v358 + 1);
                              v185 = *((_QWORD *)&v360 + 1);
                              v187 = v360;
                              v229 = *((_QWORD *)&v360 + 1) + v360;
                            }
                            (*(_QWORD **)((char *)v184 + ((v229 >> 6) & 0x3FFFFFFFFFFFFF8)))[v229 & 0x1FF] = v221;
                            *((_QWORD *)&v360 + 1) = ++v185;
                            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v355, v221, v221);
                            v216 = *v141;
                          }
LABEL_230:
                          v217 = *(unsigned int *)(v216 + 16 * v217 + 4);
                        }
                        while (v217 != v215);
                        v186 = v214;
                        v183 = v187;
                      }
                      while (v185);
                    }
                    else
                    {
                      v186 = v298;
                    }
LABEL_265:
                    v48 = v277;
                    *(_QWORD *)((char *)v277 + ((v281 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v281;
                    if (v352 != v354)
                      free(v352);
                    v230 = (_QWORD *)__p;
                    if ((_QWORD)__p)
                    {
                      do
                      {
                        v231 = (_QWORD *)*v230;
                        operator delete(v230);
                        v230 = v231;
                      }
                      while (v231);
                    }
                    v232 = v186;
                    v233 = (void *)v355;
                    *(_QWORD *)&v355 = 0;
                    if (v233)
                      operator delete(v233);
                    v234 = (void **)*((_QWORD *)&v358 + 1);
                    v235 = (void **)v359;
                    v236 = v359 - *((_QWORD *)&v358 + 1);
                    if ((_QWORD)v359 - *((_QWORD *)&v358 + 1) >= 0x11uLL)
                    {
                      do
                      {
                        v237 = *v234++;
                        operator delete(v237);
                        v236 -= 8;
                      }
                      while (v236 > 0x10);
                      *((_QWORD *)&v358 + 1) = v234;
                    }
                    while (v234 != v235)
                    {
                      v238 = *v234++;
                      operator delete(v238);
                    }
                    if ((_QWORD)v358)
                      operator delete((void *)v358);
                    v174 = *((_QWORD *)&v363 + 1);
                    v170 = v232;
                  }
                  while (*((_QWORD *)&v363 + 1));
                  v172 = (void **)*((_QWORD *)&v361 + 1);
                  v175 = (void **)v362;
                  v149 = v275;
                }
                if ((unint64_t)((char *)v175 - (char *)v172) < 0x11)
                {
                  v239 = v172;
                }
                else
                {
                  v239 = (void **)*((_QWORD *)&v361 + 1);
                  v240 = (unint64_t)v175 - *((_QWORD *)&v361 + 1);
                  do
                  {
                    operator delete(*v172);
                    *((_QWORD *)&v361 + 1) = ++v239;
                    v240 -= 8;
                    v172 = v239;
                  }
                  while (v240 > 0x10);
                }
                while (v239 != v175)
                {
                  v241 = *v239++;
                  operator delete(v241);
                }
                v143 = v271;
                if ((_QWORD)v361)
                  operator delete((void *)v361);
                v148 = v273;
              }
              else
              {
LABEL_200:
                ++v296[1];
                v48[v150] |= v151;
                v143 = v271;
                v148 = v273;
                v149 = v275;
              }
              goto LABEL_184;
            }
          }
          ++v296[2];
        }
        v48[v150] |= v151;
      }
LABEL_184:
      if (++v149 == v148)
      {
LABEL_289:
        operator delete(v48);
        goto LABEL_290;
      }
    }
  }
  if (v41)
    goto LABEL_322;
  VertexData_Reader<TempFoundationTriangleAccessor,unsigned short>::VertexData_Reader((uint64_t *)&v310, (uint64_t)v40, v40[18], v40[19], v3);
  v42 = **(_QWORD ***)(a1 + 32);
  v308 = **(_QWORD **)(a1 + 40);
  v43 = *(_DWORD **)(a1 + 56);
  v278 = **(_QWORD ***)(a1 + 48);
  v44 = *(float **)(a1 + 8);
  v284 = *(uint64_t **)(a1 + 16);
  v43[2] = 0;
  v292 = v43;
  *(_QWORD *)v43 = 0;
  if (v326)
  {
    v45 = v339;
    if (v339)
    {
      if ((v339 & 0x8000000000000000) != 0)
        abort();
      v46 = (v339 - 1) >> 6;
      v47 = operator new(8 * (v46 + 1));
      v48 = v47;
      v370 = v46 + 1;
      v368 = v47;
      v369 = v45;
      if (v45 >= 0x41)
        v49 = (v45 - 1) >> 6;
      else
        v49 = 0;
      v47[v49] = 0;
      v50 = v45;
      v272 = v45;
      if (v45 >= 0x40)
      {
        bzero(v47, 8 * (v45 >> 6));
        v50 = v45;
      }
      if ((v50 & 0x3F) != 0)
        v48[v45 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v50 & 0x3F));
      v51 = 0;
      v270 = v44;
      while (1)
      {
        v52 = v51 >> 6;
        v53 = 1 << v51;
        if ((v48[v51 >> 6] & (1 << v51)) == 0)
        {
          v54 = (unsigned __int16 *)(v338 + 6 * v51);
          v55 = (float32x2_t *)(v332 + 16 * *v54);
          v56 = (float32x2_t *)(v332 + 16 * v54[1]);
          v57 = (float32x2_t *)(v332 + 16 * v54[2]);
          v364 = v55;
          v365 = v56;
          v366 = v57;
          v58 = vmul_f32(vsub_f32(*v55, *v57), (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*v56, *v57)));
          v58.f32[0] = vsub_f32(v58, (float32x2_t)vdup_lane_s32((int32x2_t)v58, 1)).f32[0];
          v367 = v58.f32[0];
          if (v58.f32[0] != 0.0)
          {
            if (v44[48] > fminf(v57->f32[0], fminf(v56->f32[0], v55->f32[0])))
            {
              v59 = v55->f32[1];
              v60 = v56->f32[1];
              v61 = v57->f32[1];
              v62 = fmaxf(fmaxf(v59, v60), v61);
              v63 = fminf(v61, fminf(v60, v59));
              v64 = v44[46] >= fmaxf(fmaxf(v55->f32[0], v56->f32[0]), v57->f32[0]) || v44[49] <= v63;
              if (!v64 && v44[47] < v62)
              {
                v274 = v51;
                v66 = v326;
                if (v326)
                {
                  v67 = 0;
                  v68 = 0;
                  while (1)
                  {
                    v69 = (float *)(v317 + 16 * *(unsigned __int16 *)(v325 + v67 + 2));
                    v70 = *(unsigned __int16 *)(v325 + v67 + 4);
                    *(_QWORD *)&v361 = v317 + 16 * *(unsigned __int16 *)(v325 + v67);
                    *((_QWORD *)&v361 + 1) = v69;
                    *(_QWORD *)&v362 = v317 + 16 * v70;
                    *((double *)&v362 + 1) = (float)((float)((float)(*(float *)(v362 + 4) - *(float *)(v361 + 4))
                                                           * (float)(*v69 - *(float *)v362))
                                                   + (float)((float)(*(float *)v361 - *(float *)v362)
                                                           * (float)(v69[1] - *(float *)(v362 + 4))));
                    v371 = (float **)&v361;
                    v372 = (float **)&v364;
                    v373 = 0;
                    v374 = 0;
                    if (gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<RibbonOverlayTriangleAccessor>>::compute((uint64_t *)&v371))
                      break;
                    ++v68;
                    v67 += 6;
                    if (v66 == v68)
                      goto LABEL_82;
                  }
                  ++v292[1];
                  v362 = 0u;
                  v363 = 0u;
                  v361 = 0u;
                  std::deque<gdc::TrianglePair>::__add_back_capacity((uint64_t)&v361);
                  v71 = *((_QWORD *)&v363 + 1);
                  v72 = v363;
                  v73 = (void **)v362;
                  v74 = (void **)*((_QWORD *)&v361 + 1);
                  v75 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)&v361 + 1)
                                                       + (((*((_QWORD *)&v363 + 1) + (_QWORD)v363) >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * (BYTE8(v363) + v363));
                  v51 = v274;
                  *v75 = v274;
                  v75[1] = v68;
                  v119 = __CFADD__(v71, 1);
                  v76 = v71 + 1;
                  if (v119)
                  {
                    v77 = v73;
                  }
                  else
                  {
                    v78 = v72;
                    v276 = v48;
                    v282 = v42;
                    do
                    {
                      v79 = *((_QWORD *)&v361 + 1);
                      v80 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)&v361 + 1) + ((v78 >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * v78);
                      v81 = v78;
                      v82 = *v80;
                      v83 = v80[1];
                      v84 = v76 - 1;
                      *((_QWORD *)&v363 + 1) = v76 - 1;
                      *(_QWORD *)&v363 = v81 + 1;
                      v300 = v81 + 1;
                      if (v81 + 1 >= 0x200)
                      {
                        operator delete(**((void ***)&v361 + 1));
                        *((_QWORD *)&v361 + 1) = v79 + 8;
                        v300 = v81 - 255;
                        *(_QWORD *)&v363 = v81 - 255;
                      }
                      v359 = 0u;
                      v360 = 0u;
                      v358 = 0u;
                      v355 = 0u;
                      __p = 0u;
                      v357 = 1065353216;
                      std::deque<unsigned long>::__add_back_capacity((uint64_t)&v358);
                      v85 = *((_QWORD *)&v360 + 1);
                      v86 = v360;
                      v87 = (void **)*((_QWORD *)&v358 + 1);
                      *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v358 + 1)
                                            + (((*((_QWORD *)&v360 + 1) + (_QWORD)v360) >> 6) & 0x3FFFFFFFFFFFFF8))
                                + 8 * ((*((_QWORD *)&v360 + 1) + v360) & 0x1FF)) = v83;
                      v88 = v85 + 1;
                      *((_QWORD *)&v360 + 1) = v85 + 1;
                      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v355, v83, v83);
                      gdc::_overlayNeighborsNoDegenerates<VertexData_Reader<RibbonOverlayTriangleAccessor,unsigned short>>(&v352, (uint64_t)&v327, v278, v82, &v368);
                      v280 = v82;
                      if (v88)
                      {
                        v288 = 3 * v82 + 1;
                        v290 = 3 * v82;
                        v286 = 3 * v82 + 2;
                        v78 = v300;
                        do
                        {
                          while (1)
                          {
                            v297 = (*(_QWORD **)((char *)v87 + ((v86 >> 6) & 0x3FFFFFFFFFFFFF8)))[v86 & 0x1FF];
                            --v88;
                            v89 = v86 + 1;
                            *((_QWORD *)&v360 + 1) = v88;
                            *(_QWORD *)&v360 = v86 + 1;
                            if (v86 + 1 >= 0x400)
                            {
                              v90 = *v87++;
                              operator delete(v90);
                              v89 = v86 - 511;
                              *((_QWORD *)&v358 + 1) = v87;
                              *(_QWORD *)&v360 = v86 - 511;
                            }
                            v91 = (float *)(v332 + 16 * *(unsigned __int16 *)(v338 + 2 * v288));
                            v92 = (float *)(v332 + 16 * *(unsigned __int16 *)(v338 + 2 * v286));
                            v348 = (float *)(v332 + 16 * *(unsigned __int16 *)(v338 + 2 * v290));
                            v349 = v91;
                            v350 = v92;
                            v351 = (float)((float)((float)(v92[1] - v348[1]) * (float)(*v91 - *v92))
                                         + (float)((float)(*v348 - *v92) * (float)(v91[1] - v92[1])));
                            v93 = (unsigned __int16 *)(v325 + 6 * v297);
                            v94 = (float *)(v317 + 16 * *v93);
                            v95 = (float *)(v317 + 16 * v93[1]);
                            v96 = v93[2];
                            v344 = v94;
                            v345 = v95;
                            v346 = (float *)(v317 + 16 * v96);
                            v347 = (float)((float)((float)(v346[1] - v94[1]) * (float)(*v95 - *v346))
                                         + (float)((float)(*v94 - *v346) * (float)(v95[1] - v346[1])));
                            v371 = &v344;
                            v372 = &v348;
                            v373 = 0;
                            v374 = 0;
                            v97 = gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<RibbonOverlayTriangleAccessor>>::compute((uint64_t *)&v371);
                            if (v97)
                              break;
                            ++*v292;
                            v86 = v89;
                            if (!v88)
                              goto LABEL_147;
                          }
                          VertexData_Writer<FillTriangle>::allocateTriangles(v284, v97);
                          if (v374)
                          {
                            v294 = v78;
                            v98 = 0;
                            v99 = v371;
                            v100 = (double *)v372;
                            v101 = 72 * v374;
                            v102 = (unsigned __int16 **)(v284 + 5);
                            do
                            {
                              v103 = *v102;
                              v102 += 6;
                              gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<RibbonOverlayTriangleAccessor>>::fillTriangle<StrokeTriangle>(v99, v100, v103, (double *)&v375[v98], (double *)&v375[v98 + 24], (double *)&v375[v98 + 48]);
                              v98 += 72;
                            }
                            while (v101 != v98);
                            v42 = v282;
                            v78 = v294;
                          }
                          ++*v292;
                          for (i = (unsigned int *)v352; i != v353; ++i)
                          {
                            while (1)
                            {
                              v105 = *i;
                              v106 = (unsigned __int16 *)(v338 + 6 * v105);
                              v107 = (float *)(v332 + 16 * *v106);
                              v108 = (float *)(v332 + 16 * v106[1]);
                              v109 = v106[2];
                              v340 = v107;
                              v341 = v108;
                              v342 = (float *)(v332 + 16 * v109);
                              v343 = (float)((float)((float)(v342[1] - v107[1]) * (float)(*v108 - *v342))
                                           + (float)((float)(*v107 - *v342) * (float)(v108[1] - v342[1])));
                              v371 = &v344;
                              v372 = &v340;
                              v373 = 0;
                              v374 = 0;
                              if (!gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<RibbonOverlayTriangleAccessor>>::compute((uint64_t *)&v371))
                                break;
                              v110 = *((_QWORD *)&v361 + 1);
                              v111 = 32 * (v362 - *((_QWORD *)&v361 + 1)) - 1;
                              if ((_QWORD)v362 == *((_QWORD *)&v361 + 1))
                                v111 = 0;
                              v112 = v84 + v300;
                              if (v111 == v84 + v300)
                              {
                                std::deque<gdc::TrianglePair>::__add_back_capacity((uint64_t)&v361);
                                v110 = *((_QWORD *)&v361 + 1);
                                v84 = *((_QWORD *)&v363 + 1);
                                v300 = v363;
                                v112 = *((_QWORD *)&v363 + 1) + v363;
                              }
                              v113 = (_QWORD *)(*(_QWORD *)(v110 + ((v112 >> 5) & 0x7FFFFFFFFFFFFF8))
                                              + 16 * v112);
                              *v113 = v105;
                              v113[1] = v297;
                              *((_QWORD *)&v363 + 1) = ++v84;
                              v114 = v353;
                              if (i + 1 != v353)
                                memmove(i, i + 1, (((char *)v353 - (char *)i) & 0xFFFFFFFFFFFFFFFCLL) - 4);
                              v353 = v114 - 1;
                              v78 = v300;
                              if (i == v353)
                                goto LABEL_110;
                            }
                          }
LABEL_110:
                          v295 = v78;
                          v115 = *(unsigned int *)(v42[3] + 4 * (v297 + v308));
                          v116 = *v42;
                          v117 = v115;
                          do
                          {
                            v118 = *(_DWORD *)(v116 + 16 * (v117 ^ 1) + 12);
                            v119 = v118 != -1 && v118 >= v308;
                            if (v119 && v118 < HIDWORD(v308))
                            {
                              v121 = v118 - v308;
                              if (*((_QWORD *)&v355 + 1))
                              {
                                v122 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v355 + 8));
                                v122.i16[0] = vaddlv_u8(v122);
                                if (v122.u32[0] > 1uLL)
                                {
                                  v123 = v118 - v308;
                                  if (*((_QWORD *)&v355 + 1) <= v121)
                                    v123 = v121 % *((_QWORD *)&v355 + 1);
                                }
                                else
                                {
                                  v123 = (DWORD2(v355) - 1) & v121;
                                }
                                v124 = *(_QWORD **)(v355 + 8 * v123);
                                if (v124)
                                {
                                  v125 = (_QWORD *)*v124;
                                  if (v125)
                                  {
                                    if (v122.u32[0] < 2uLL)
                                    {
                                      while (1)
                                      {
                                        v126 = v125[1];
                                        if (v126 == v121)
                                        {
                                          if (v125[2] == v121)
                                            goto LABEL_112;
                                        }
                                        else if ((v126 & (*((_QWORD *)&v355 + 1) - 1)) != v123)
                                        {
                                          goto LABEL_140;
                                        }
                                        v125 = (_QWORD *)*v125;
                                        if (!v125)
                                          goto LABEL_140;
                                      }
                                    }
                                    do
                                    {
                                      v127 = v125[1];
                                      if (v127 == v121)
                                      {
                                        if (v125[2] == v121)
                                          goto LABEL_112;
                                      }
                                      else
                                      {
                                        if (v127 >= *((_QWORD *)&v355 + 1))
                                          v127 %= *((_QWORD *)&v355 + 1);
                                        if (v127 != v123)
                                          break;
                                      }
                                      v125 = (_QWORD *)*v125;
                                    }
                                    while (v125);
                                  }
                                }
                              }
LABEL_140:
                              v87 = (void **)*((_QWORD *)&v358 + 1);
                              v128 = (((_QWORD)v359 - *((_QWORD *)&v358 + 1)) << 6) - 1;
                              if ((_QWORD)v359 == *((_QWORD *)&v358 + 1))
                                v128 = 0;
                              v129 = v88 + v89;
                              if (v128 == v88 + v89)
                              {
                                std::deque<unsigned long>::__add_back_capacity((uint64_t)&v358);
                                v87 = (void **)*((_QWORD *)&v358 + 1);
                                v88 = *((_QWORD *)&v360 + 1);
                                v89 = v360;
                                v129 = *((_QWORD *)&v360 + 1) + v360;
                              }
                              (*(_QWORD **)((char *)v87 + ((v129 >> 6) & 0x3FFFFFFFFFFFFF8)))[v129 & 0x1FF] = v121;
                              *((_QWORD *)&v360 + 1) = ++v88;
                              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v355, v121, v121);
                              v116 = *v42;
                            }
LABEL_112:
                            v117 = *(unsigned int *)(v116 + 16 * v117 + 4);
                          }
                          while (v117 != v115);
                          v78 = v295;
                          v86 = v89;
                        }
                        while (v88);
                      }
                      else
                      {
                        v78 = v300;
                      }
LABEL_147:
                      v48 = v276;
                      *(_QWORD *)((char *)v276 + ((v280 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v280;
                      if (v352 != v354)
                        free(v352);
                      v130 = (_QWORD *)__p;
                      if ((_QWORD)__p)
                      {
                        do
                        {
                          v131 = (_QWORD *)*v130;
                          operator delete(v130);
                          v130 = v131;
                        }
                        while (v131);
                      }
                      v132 = (void *)v355;
                      *(_QWORD *)&v355 = 0;
                      if (v132)
                        operator delete(v132);
                      v133 = (void **)*((_QWORD *)&v358 + 1);
                      v134 = (void **)v359;
                      v135 = v359 - *((_QWORD *)&v358 + 1);
                      if ((_QWORD)v359 - *((_QWORD *)&v358 + 1) >= 0x11uLL)
                      {
                        do
                        {
                          v136 = *v133++;
                          operator delete(v136);
                          v135 -= 8;
                        }
                        while (v135 > 0x10);
                        *((_QWORD *)&v358 + 1) = v133;
                      }
                      while (v133 != v134)
                      {
                        v137 = *v133++;
                        operator delete(v137);
                      }
                      if ((_QWORD)v358)
                        operator delete((void *)v358);
                      v76 = *((_QWORD *)&v363 + 1);
                    }
                    while (*((_QWORD *)&v363 + 1));
                    v74 = (void **)*((_QWORD *)&v361 + 1);
                    v77 = (void **)v362;
                    v51 = v274;
                  }
                  if ((unint64_t)((char *)v77 - (char *)v74) < 0x11)
                  {
                    v138 = v74;
                  }
                  else
                  {
                    v138 = (void **)*((_QWORD *)&v361 + 1);
                    v139 = (unint64_t)v77 - *((_QWORD *)&v361 + 1);
                    do
                    {
                      operator delete(*v74);
                      *((_QWORD *)&v361 + 1) = ++v138;
                      v139 -= 8;
                      v74 = v138;
                    }
                    while (v139 > 0x10);
                  }
                  while (v138 != v77)
                  {
                    v140 = *v138++;
                    operator delete(v140);
                  }
                  v44 = v270;
                  if ((_QWORD)v361)
                    operator delete((void *)v361);
                  v50 = v272;
                }
                else
                {
LABEL_82:
                  ++v292[1];
                  v48[v52] |= v53;
                  v44 = v270;
                  v50 = v272;
                  v51 = v274;
                }
                goto LABEL_66;
              }
            }
            ++v292[2];
          }
          v48[v52] |= v53;
        }
LABEL_66:
        if (++v51 == v50)
          goto LABEL_289;
      }
    }
  }
LABEL_290:
  if (v324)
  {
    v243 = v320;
    v242 = v321;
    if (v321 != v320)
    {
      v244 = (_QWORD *)v319;
      v245 = v322;
      v246 = v323;
      if (v318 && *(_BYTE *)(v319 + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v318 + 64))();
      if (v245 && !v246)
      {
        v248 = v244[7];
        v247 = v244[8];
        if (v247 == v248)
          v248 = v244[10] - v244[9];
        if (v243 < v248)
          v248 = v243;
        if (v247 <= v242)
          v247 = v242;
        if (v247 == v248)
          v247 = v248 + v244[10] - v244[9];
        v244[7] = v248;
        v244[8] = v247;
      }
    }
  }
  if (v316)
  {
    v250 = v312;
    v249 = v313;
    if (v313 != v312)
    {
      v251 = (_QWORD *)v311;
      v252 = v314;
      v253 = v315;
      if (v310 && *(_BYTE *)(v311 + 17) != 2)
        (*v310)[8]();
      if (v252 && !v253)
      {
        v255 = v251[7];
        v254 = v251[8];
        if (v254 == v255)
          v255 = v251[10] - v251[9];
        if (v250 < v255)
          v255 = v250;
        if (v254 <= v249)
          v254 = v249;
        if (v254 == v255)
          v254 = v255 + v251[10] - v251[9];
        v251[7] = v255;
        v251[8] = v254;
      }
    }
  }
LABEL_322:
  if (v337)
  {
    v257 = v334;
    v256 = v335;
    if (v335 != v334)
    {
      v258 = (_QWORD *)*((_QWORD *)&v333 + 1);
      v259 = v336;
      v260 = HIBYTE(v336);
      if ((_QWORD)v333 && *(_BYTE *)(*((_QWORD *)&v333 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v333 + 64))();
      if (v259 && !v260)
      {
        v262 = v258[7];
        v261 = v258[8];
        if (v261 == v262)
          v262 = v258[10] - v258[9];
        if (v257 < v262)
          v262 = v257;
        if (v261 <= v256)
          v261 = v256;
        if (v261 == v262)
          v261 = v262 + v258[10] - v258[9];
        v258[7] = v262;
        v258[8] = v261;
      }
    }
  }
  if (v331)
  {
    v264 = v328;
    v263 = v329;
    if (v329 != v328)
    {
      v265 = (_QWORD *)*((_QWORD *)&v327 + 1);
      v266 = v330;
      v267 = HIBYTE(v330);
      if ((_QWORD)v327 && *(_BYTE *)(*((_QWORD *)&v327 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v327 + 64))();
      if (v266 && !v267)
      {
        v269 = v265[7];
        v268 = v265[8];
        if (v268 == v269)
          v269 = v265[10] - v265[9];
        if (v264 < v269)
          v269 = v264;
        if (v268 <= v263)
          v268 = v263;
        if (v268 == v269)
          v268 = v269 + v265[10] - v265[9];
        v265[7] = v269;
        v265[8] = v268;
      }
    }
  }
}

void sub_19F8A4AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  void *v54;
  void **v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  void *v60;

  v56 = (void **)STACK[0x2A8];
  v57 = STACK[0x2B0];
  v58 = STACK[0x2B0] - STACK[0x2A8];
  if (v58 >= 0x11)
  {
    do
    {
      v59 = *v56++;
      operator delete(v59);
      v58 -= 8;
    }
    while (v58 > 0x10);
    STACK[0x2A8] = (unint64_t)v56;
  }
  while (v56 != (void **)v57)
  {
    v60 = *v56++;
    operator delete(v60);
  }
  if (STACK[0x2A0])
    operator delete((void *)STACK[0x2A0]);
  operator delete(v54);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a39);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a32);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a54);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a47);
  _Unwind_Resume(a1);
}

uint64_t gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<RibbonOverlayTriangleAccessor>>::compute(uint64_t *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  BOOL v4;
  float *v5;
  float v6;
  float v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  double v14;
  float v15;
  float v16;
  double v17;
  double v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  char v37;
  char v39;
  unsigned __int8 v40;
  BOOL v41;
  char v42;
  char v44;
  BOOL v45;
  BOOL v46;
  float v47;
  float v48;
  float v49;
  float v50;
  double v51;
  double v52;
  float v53;
  float v54;
  double v55;
  double v56;
  float v57;
  float v58;
  double v59;
  double v60;
  double v61;
  double v62;
  float v63;
  float v64;
  double v65;
  double v66;
  double v67;
  double v68;
  BOOL v69;
  char v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;
  float *v74;
  double v75;
  float *v76;
  double v77;
  double v78;
  float *v79;
  double v80;
  double v81;
  float *v82;
  double v83;
  double v84;
  double v85;
  double v86;
  float *v87;
  double v88;
  double v89;
  uint64_t v90;
  char **v91;
  char **v92;
  char **v93;
  char **p_buf;
  char **v95;
  char **v96;
  char **v97;
  char **v98;
  uint64_t v99;
  char **v100;
  char **v101;
  char **v102;
  char **v103;
  char **v104;
  char *v105;
  char *v106;
  unint64_t v107;
  double *v108;
  double *v109;
  double v110;
  double v111;
  unint64_t v112;
  char **v113;
  unint64_t v114;
  unint64_t v115;
  double *v116;
  double *v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  _OWORD *v133;
  char *v134;
  char *v135;
  _OWORD *v136;
  __int128 v137;
  double v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  unint64_t v143;
  unint64_t v144;
  _OWORD *v145;
  char *v146;
  char *v147;
  _OWORD *v148;
  __int128 v149;
  double *v150;
  uint64_t v151;
  NSObject *v152;
  unint64_t v153;
  float **v154;
  float *v155;
  float v156;
  float v157;
  float *v158;
  float *v159;
  float v160;
  float v161;
  float v162;
  float v163;
  double *v164;
  unint64_t v165;
  double v166;
  double v167;
  float v168;
  float v169;
  float v170;
  double *v171;
  float v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double *v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  char **v188;
  char **v189;
  uint64_t v190;
  char **v191;
  char **v192;
  double v193;
  double v194;
  char **v195;
  char **v196;
  void **v197;
  char *v198;
  char *v199;
  double *v200;
  uint64_t v201;
  _BYTE v202[96];
  double v203[2];
  double v204;
  double v205;
  double v206;
  double v207;
  double v208[2];
  double v209;
  double v210;
  double v211;
  double v212;
  __int128 buf;
  char *v214;
  uint64_t v215;
  char v216[96];
  uint64_t v217;

  v217 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v2 = *(double *)(*a1 + 24);
  if (v2 == 0.0)
    return 0;
  v3 = a1[1];
  if (*(double *)(v3 + 24) == 0.0)
  {
    return 0;
  }
  else
  {
    v4 = 0;
    *((_BYTE *)a1 + 178) = 0;
    v5 = *(float **)(v1 + 16);
    v7 = *v5;
    v6 = v5[1];
    v8 = *(float **)(v1 + 8);
    v10 = *v8;
    v9 = v8[1];
    v11 = **(float **)v3;
    v12 = *(float *)(*(_QWORD *)v3 + 4);
    v13 = *v8 - v7;
    v14 = (float)-(float)((float)((float)(v12 - v6) * v13) - (float)((float)(v11 - v7) * (float)(v9 - v6))) / v2;
    v16 = **(float **)v1;
    v15 = *(float *)(*(_QWORD *)v1 + 4);
    v17 = (float)-(float)((float)((float)(v7 - v16) * (float)(v12 - v6)) - (float)((float)(v6 - v15) * (float)(v11 - v7)))
        / v2;
    v18 = 1.0 - (v14 + v17);
    *((double *)a1 + 2) = v14;
    *((double *)a1 + 3) = v17;
    *((double *)a1 + 4) = v18;
    v19 = *(float **)(v3 + 8);
    v20 = *v19;
    v21 = v19[1];
    v22 = *v19 - v7;
    v23 = *(double *)(v1 + 24);
    v24 = (float)-(float)((float)((float)(v21 - v6) * v13) - (float)(v22 * (float)(v9 - v6))) / v23;
    v25 = (float)-(float)((float)((float)(v21 - v6) * (float)(v7 - v16)) - (float)(v22 * (float)(v6 - v15))) / v23;
    v26 = 1.0 - (v24 + v25);
    *((double *)a1 + 5) = v24;
    *((double *)a1 + 6) = v25;
    *((double *)a1 + 7) = v26;
    v27 = *(float **)(v3 + 16);
    v28 = *v27;
    v29 = v27[1];
    v30 = *v27 - v7;
    v31 = (float)-(float)((float)((float)(v29 - v6) * v13) - (float)(v30 * (float)(v9 - v6)));
    v32 = *(double *)(v1 + 24);
    v33 = v31 / v32;
    v34 = (float)-(float)((float)((float)(v29 - v6) * (float)(v7 - v16)) - (float)(v30 * (float)(v6 - v15))) / v32;
    v35 = 1.0 - (v33 + v34);
    *((double *)a1 + 8) = v33;
    *((double *)a1 + 9) = v34;
    *((double *)a1 + 10) = v35;
    if (v14 >= 0.0 && v14 <= 1.0)
    {
      v4 = v17 >= 0.0;
      if (v17 > 1.0)
        v4 = 0;
      if (v18 < 0.0)
        v4 = 0;
      if (v18 > 1.0)
        v4 = 0;
    }
    v37 = *((_BYTE *)a1 + 177) | v4;
    if (v24 >= 0.0 && v24 <= 1.0)
    {
      v39 = 0;
      v41 = v25 >= 0.0 && v25 <= 1.0;
      if (v41 && v26 >= 0.0)
        v39 = 2 * (v26 <= 1.0);
    }
    else
    {
      v39 = 0;
    }
    v42 = v39 | v37;
    if (v33 >= 0.0 && v33 <= 1.0)
    {
      v44 = 0;
      v45 = v34 >= 0.0 && v34 <= 1.0;
      if (v45 && v35 >= 0.0)
        v44 = 4 * (v35 <= 1.0);
    }
    else
    {
      v44 = 0;
    }
    v46 = 0;
    *((_BYTE *)a1 + 177) = v44 | v42;
    v47 = v21 - v29;
    v48 = v16 - v28;
    v49 = v20 - v28;
    v50 = v15 - v29;
    v51 = *(double *)(v3 + 24);
    v52 = (float)-(float)((float)(v50 * (float)(v20 - v28)) - (float)(v47 * v48)) / v51;
    v53 = v29 - v12;
    v54 = v28 - v11;
    v55 = (float)-(float)((float)(v50 * (float)(v28 - v11)) - (float)((float)(v29 - v12) * v48)) / v51;
    v56 = 1.0 - (v55 + v52);
    *((double *)a1 + 13) = v52;
    *((double *)a1 + 14) = v55;
    *((double *)a1 + 15) = v56;
    v57 = v10 - v28;
    v58 = v9 - v29;
    v59 = *(double *)(v3 + 24);
    v60 = (float)-(float)((float)(v58 * v49) - (float)(v47 * v57)) / v59;
    v61 = (float)-(float)((float)(v58 * (float)(v28 - v11)) - (float)(v53 * v57)) / v59;
    v62 = 1.0 - (v60 + v61);
    *((double *)a1 + 16) = v60;
    *((double *)a1 + 17) = v61;
    *((double *)a1 + 18) = v62;
    v63 = v7 - v28;
    v64 = v6 - v29;
    v65 = *(double *)(v3 + 24);
    v66 = (float)-(float)((float)(v64 * v49) - (float)(v47 * v63)) / v65;
    v67 = (float)-(float)((float)(v64 * v54) - (float)(v53 * v63)) / v65;
    v68 = 1.0 - (v66 + v67);
    *((double *)a1 + 19) = v66;
    *((double *)a1 + 20) = v67;
    *((double *)a1 + 21) = v68;
    if (v52 >= 0.0 && v52 <= 1.0)
    {
      v69 = v55 >= 0.0;
      if (v55 > 1.0)
        v69 = 0;
      if (v56 < 0.0)
        v69 = 0;
      v46 = v56 <= 1.0 && v69;
    }
    v70 = 0;
    if (v60 >= 0.0 && v60 <= 1.0)
    {
      v70 = 0;
      if (v61 >= 0.0 && v61 <= 1.0 && v62 >= 0.0)
        v70 = 2 * (v62 <= 1.0);
    }
    v71 = 0;
    if (v66 >= 0.0 && v66 <= 1.0)
    {
      v71 = 0;
      if (v67 >= 0.0 && v67 <= 1.0 && v68 >= 0.0)
        v71 = 4 * (v68 <= 1.0);
    }
    *((_BYTE *)a1 + 176) |= v71 | v70 | v46;
    v72 = *a1;
    v73 = (_QWORD *)a1[1];
    v74 = *(float **)*a1;
    v75 = v74[1];
    v208[0] = *v74;
    v208[1] = v75;
    v76 = *(float **)(v72 + 8);
    v77 = *v76;
    v78 = v76[1];
    v209 = v77;
    v210 = v78;
    v79 = *(float **)(v72 + 16);
    v80 = *v79;
    v81 = v79[1];
    v211 = v80;
    v212 = v81;
    v82 = (float *)v73[1];
    v83 = *(float *)*v73;
    v84 = *(float *)(*v73 + 4);
    v203[0] = v83;
    v203[1] = v84;
    v85 = *v82;
    v86 = v82[1];
    v204 = v85;
    v205 = v86;
    v87 = (float *)v73[2];
    v88 = *v87;
    v89 = v87[1];
    v206 = v88;
    v207 = v89;
    if ((v208[0] - v80) * (v78 - v75) + (v81 - v75) * (v77 - v208[0]) < 0.0)
    {
      v209 = v80;
      v210 = v81;
      v211 = v77;
      v212 = v78;
    }
    if ((v84 - v86) * (v88 - v83) + (v89 - v84) * (v85 - v83) < 0.0)
    {
      v204 = v88;
      v205 = v89;
      v206 = v85;
      v207 = v86;
    }
    v200 = (double *)v202;
    v201 = 6;
    v198 = v202;
    v199 = v202;
    v214 = v216;
    v215 = 6;
    *(_QWORD *)&buf = v216;
    *((_QWORD *)&buf + 1) = v216;
    geo::small_vector_base<gm::Matrix<double,2,1>>::insert<gm::Matrix<double,2,1>*>((char **)&buf, v216, (char *)v208, (char *)&buf);
    v90 = 0;
    v91 = (char **)&buf + 1;
    v92 = &v199;
    v93 = &v198;
    p_buf = (char **)&buf;
    v95 = (char **)&buf + 1;
    v96 = &v199;
    do
    {
      v97 = v93;
      v98 = p_buf;
      v190 = v90 + 1;
      if (v90 == 2)
        v99 = 0;
      else
        v99 = v90 + 1;
      if (v90)
      {
        v93 = p_buf;
        v100 = v91;
      }
      else
      {
        v100 = v92;
      }
      if (v90)
        v101 = v92;
      else
        v101 = v91;
      if (v90)
        v102 = v95;
      else
        v102 = v96;
      if (!v90)
        v96 = v95;
      v191 = v96;
      v192 = v102;
      if (v90)
        v103 = p_buf + 1;
      else
        v103 = v97 + 1;
      if (v90)
      {
        p_buf = v97;
        v104 = v97 + 1;
      }
      else
      {
        v104 = p_buf + 1;
      }
      v188 = v103;
      v189 = v104;
      v105 = *v93;
      *v100 = *v93;
      v106 = *p_buf;
      if (*v101 != *p_buf)
      {
        v107 = 0;
        v108 = &v203[2 * v90];
        v109 = &v203[2 * v99];
        v193 = v108[1];
        v194 = *v108;
        v110 = *v109 - *v108;
        v111 = v109[1] - v193;
        v112 = (*v101 - *p_buf) >> 4;
        if (v90)
          v113 = v98;
        else
          v113 = v97;
        v196 = p_buf;
        v197 = (void **)v93;
        v195 = v101;
        do
        {
          v114 = v107 + 1;
          if (v107 + 1 == v112)
            v115 = 0;
          else
            v115 = v107 + 1;
          v116 = (double *)&v106[16 * v107];
          v117 = (double *)&v106[16 * v115];
          v118 = *v117;
          v119 = v117[1];
          v121 = *v116;
          v120 = v116[1];
          v122 = v108[1];
          v123 = (*v108 - *v117) * v111 + (v119 - v122) * v110;
          if ((*v108 - *v116) * v111 + (v120 - v122) * v110 <= 0.0 == v123 > 0.0)
          {
            v124 = v118 - v121;
            v125 = v119 - v120;
            v126 = -((v119 - v120) * v110 - (v118 - v121) * v111);
            if (v126 != 0.0)
            {
              v127 = *v93;
              v128 = (v105 - *v93) >> 4;
              v129 = (unint64_t)v113[3];
              if (v129 < v128 + 1)
              {
                v130 = v113[2];
                v131 = (1 << -(char)__clz(v129 + 1));
                if (v129 >= 0xFFFFFFFFFFFFFFFELL)
                  v131 = 1;
                if (v131 <= v128 + 1)
                  v132 = v128 + 1;
                else
                  v132 = v131;
                v133 = malloc_type_malloc(16 * v132, 0x1000040451B5BE8uLL);
                v93 = (char **)v197;
                v134 = (char *)*v197;
                v135 = *v100;
                if (*v197 != *v100)
                {
                  v136 = v133;
                  do
                  {
                    v137 = *(_OWORD *)v134;
                    v134 += 16;
                    *v136++ = v137;
                  }
                  while (v134 != v135);
                }
                if (v127 != v130)
                {
                  free(*v197);
                  v93 = (char **)v197;
                }
                *v93 = (char *)v133;
                v105 = (char *)&v133[v128];
                *v100 = v105;
                v113[3] = (char *)v132;
                v101 = v195;
                p_buf = v196;
              }
              v138 = ((v119 - v193) * v110 + (v194 - v118) * v111) / v126;
              *(double *)v105 = v118 + v138 * v124;
              *((double *)v105 + 1) = v119 + v138 * v125;
              v105 = *v100 + 16;
              *v100 = v105;
            }
          }
          if (v123 > 0.0)
          {
            v139 = *v93;
            v140 = (v105 - *v93) >> 4;
            v141 = (unint64_t)v113[3];
            if (v141 < v140 + 1)
            {
              v142 = v113[2];
              v143 = (1 << -(char)__clz(v141 + 1));
              if (v141 >= 0xFFFFFFFFFFFFFFFELL)
                v143 = 1;
              if (v143 <= v140 + 1)
                v144 = v140 + 1;
              else
                v144 = v143;
              v145 = malloc_type_malloc(16 * v144, 0x1000040451B5BE8uLL);
              v93 = (char **)v197;
              v146 = (char *)*v197;
              v147 = *v100;
              if (*v197 != *v100)
              {
                v148 = v145;
                do
                {
                  v149 = *(_OWORD *)v146;
                  v146 += 16;
                  *v148++ = v149;
                }
                while (v146 != v147);
              }
              if (v139 != v142)
              {
                free(*v197);
                v93 = (char **)v197;
              }
              *v93 = (char *)v145;
              v105 = (char *)&v145[v140];
              *v100 = v105;
              v113[3] = (char *)v144;
              v101 = v195;
              p_buf = v196;
            }
            *(_OWORD *)v105 = *(_OWORD *)v117;
            v105 = *v100 + 16;
            *v100 = v105;
          }
          v106 = *p_buf;
          v112 = (*v101 - *p_buf) >> 4;
          v107 = v114;
        }
        while (v114 < v112);
      }
      v91 = v191;
      v90 = v190;
      v92 = v192;
      v96 = v188;
      v95 = v189;
    }
    while (v190 != 3);
    if (v93 != &v198)
    {
      v199 = v198;
      geo::small_vector_base<gm::Matrix<double,2,1>>::insert<gm::Matrix<double,2,1>*>(&v198, v198, *v93, *v192);
    }
    if ((char *)buf != v214)
      free((void *)buf);
    v150 = (double *)v198;
    v151 = v199 - v198;
    if ((unint64_t)(v199 - v198) <= 0x20)
    {
      v40 = *((_BYTE *)a1 + 178);
    }
    else
    {
      if ((unint64_t)v151 >= 0x61)
      {
        if (GEOGetGeoDisplayCoreDefaultLog::onceToken != -1)
          dispatch_once(&GEOGetGeoDisplayCoreDefaultLog::onceToken, &__block_literal_global_42051);
        v152 = (id)GEOGetGeoDisplayCoreDefaultLog::log;
        if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 134217984;
          *(_QWORD *)((char *)&buf + 4) = (v199 - v198) >> 4;
          _os_log_impl(&dword_19F029000, v152, OS_LOG_TYPE_ERROR, "Exceeded triangle storage for polygon intersection (%zu verts)", (uint8_t *)&buf, 0xCu);
        }

        v150 = (double *)v198;
        v151 = v199 - v198;
      }
      v153 = v151 >> 4;
      if (v153 >= 6)
        v153 = 6;
      v40 = *((_BYTE *)a1 + 178);
      if (v153 - 1 >= 2)
      {
        v154 = (float **)*a1;
        v155 = *(float **)(*a1 + 16);
        v157 = *v155;
        v156 = v155[1];
        v159 = *(float **)*a1;
        v158 = *(float **)(*a1 + 8);
        v160 = v158[1] - v156;
        v161 = *v158 - v157;
        v162 = v156 - v159[1];
        v163 = v157 - *v159;
        v164 = v150 + 3;
        v165 = 2;
        do
        {
          v166 = *(v164 - 1);
          v167 = *v164;
          v168 = *v150;
          v169 = v150[1];
          v170 = v168 - v157;
          v171 = &v150[2 * (v165 % v153)];
          v172 = v169 - v156;
          v173 = *((double *)v154 + 3);
          v174 = (float)-(float)((float)(v161 * v172) - (float)(v170 * v160)) / v173;
          v175 = (float)-(float)((float)(v163 * v172) - (float)(v162 * v170)) / v173;
          v176 = *v171;
          v177 = v171[1];
          v178 = (double *)&a1[9 * v40];
          v178[23] = v174;
          v178[24] = v175;
          *(float *)&v166 = v166;
          *(float *)&v167 = v167;
          *(float *)&v166 = *(float *)&v166 - v157;
          *(float *)&v167 = *(float *)&v167 - v156;
          v178[25] = 1.0 - (v174 + v175);
          v179 = *((double *)v154 + 3);
          v180 = (float)-(float)((float)(v161 * *(float *)&v167) - (float)(*(float *)&v166 * v160)) / v179;
          v181 = (float)-(float)((float)(v163 * *(float *)&v167) - (float)(v162 * *(float *)&v166)) / v179;
          v178[26] = v180;
          v178[27] = v181;
          v182 = 1.0 - (v181 + v180);
          *(float *)&v176 = v176;
          *(float *)&v181 = v177;
          *(float *)&v176 = *(float *)&v176 - v157;
          *(float *)&v181 = *(float *)&v181 - v156;
          v178[28] = v182;
          v183 = *((double *)v154 + 3);
          v184 = (float)-(float)((float)(v161 * *(float *)&v181) - (float)(*(float *)&v176 * v160)) / v183;
          v185 = (float)-(float)((float)(v163 * *(float *)&v181) - (float)(v162 * *(float *)&v176)) / v183;
          v178[29] = v184;
          v178[30] = v185;
          v178[31] = 1.0 - (v185 + v184);
          *((_BYTE *)a1 + 178) = ++v40;
          ++v165;
          v164 += 2;
        }
        while (v153 != v165);
      }
    }
    if (v150 != v200)
      free(v150);
  }
  return v40;
}

void sub_19F8A57DC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F8A57E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,void *a51)
{
  if (a49 != a51)
    free(a49);
  if (a21 == a23)
    _Unwind_Resume(exception_object);
  free(a21);
  _Unwind_Resume(exception_object);
}

void std::deque<gdc::TrianglePair>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  BOOL v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 *v86;
  _OWORD *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  _OWORD *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_86:
      *(_QWORD *)v5 = v8;
      goto LABEL_87;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v33 = (v5 - v9) >> 2;
      if (v5 == v9)
        v33 = 1;
      if (!(v33 >> 61))
      {
        v34 = v33 >> 2;
        v35 = 8 * v33;
        v36 = (char *)operator new(8 * v33);
        v37 = &v36[8 * v34];
        v38 = &v36[v35];
        v40 = v5 - v7;
        v39 = v5 == v7;
        v5 = v37;
        if (!v39)
        {
          v5 = &v37[v40 & 0xFFFFFFFFFFFFFFF8];
          v41 = v40 - 8;
          if ((unint64_t)(v40 - 8) >= 0x38)
          {
            v83 = &v36[8 * v34];
            v42 = v83;
            if ((unint64_t)(v83 - v7) >= 0x20)
            {
              v84 = (v41 >> 3) + 1;
              v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
              v42 = &v37[v85];
              v86 = (__int128 *)(v6 + 3);
              v87 = v83 + 16;
              v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v89 = *v86;
                *(v87 - 1) = *(v86 - 1);
                *v87 = v89;
                v86 += 2;
                v87 += 2;
                v88 -= 4;
              }
              while (v88);
              if (v84 == (v84 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_79;
              v7 += v85;
            }
          }
          else
          {
            v42 = &v36[8 * v34];
          }
          do
          {
            v90 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v42 = v90;
            v42 += 8;
          }
          while (v42 != v5);
        }
        goto LABEL_79;
      }
LABEL_103:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_86;
  }
  v18 = *(char **)(a1 + 16);
  v17 = *(char **)(a1 + 24);
  v20 = *(char **)a1;
  v19 = *(char **)(a1 + 8);
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*(_QWORD *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_87:
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      v43 = v19;
      goto LABEL_85;
    }
    v68 = (v17 - v19) >> 2;
    if (v18 == v19)
      v68 = 1;
    if (v68 >> 61)
      goto LABEL_103;
    v69 = (v68 + 3) >> 2;
    v70 = 8 * v68;
    v71 = (char *)operator new(8 * v68);
    v43 = &v71[8 * v69];
    v72 = &v71[v70];
    v73 = v43;
    if (v18 != v19)
    {
      v73 = &v43[8 * v22];
      v74 = &v71[8 * v69];
      v75 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        v76 = &v71[8 * v69];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) >= 0x20)
        {
          v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
          v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
          v74 = &v43[v78];
          v79 = (__int128 *)(v19 + 16);
          v80 = v76 + 16;
          v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v82 = *v79;
            *(v80 - 1) = *(v79 - 1);
            *v80 = v82;
            v79 += 2;
            v80 += 2;
            v81 -= 4;
          }
          while (v81);
          if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(_QWORD *)a1 = v71;
            *(_QWORD *)(a1 + 8) = v43;
            *(_QWORD *)(a1 + 16) = v73;
            *(_QWORD *)(a1 + 24) = v72;
LABEL_84:
            operator delete(v19);
            v43 = *(char **)(a1 + 8);
LABEL_85:
            *((_QWORD *)v43 - 1) = v25;
            v7 = *(char **)(a1 + 8);
            v5 = *(char **)(a1 + 16);
            *(_QWORD *)(a1 + 8) = v7 - 8;
            v8 = *((_QWORD *)v7 - 1);
            *(_QWORD *)(a1 + 8) = v7;
            if (v5 != *(char **)(a1 + 24))
              goto LABEL_86;
            v9 = *(char **)a1;
            v10 = (uint64_t)&v7[-*(_QWORD *)a1];
            if ((unint64_t)v7 <= *(_QWORD *)a1)
            {
              v92 = (v5 - v9) >> 2;
              if (v5 == v9)
                v92 = 1;
              if (!(v92 >> 61))
              {
                v93 = v92 >> 2;
                v94 = 8 * v92;
                v36 = (char *)operator new(8 * v92);
                v37 = &v36[8 * v93];
                v38 = &v36[v94];
                v95 = v5 - v7;
                v39 = v5 == v7;
                v5 = v37;
                if (!v39)
                {
                  v5 = &v37[v95 & 0xFFFFFFFFFFFFFFF8];
                  v96 = v95 - 8;
                  if ((unint64_t)(v95 - 8) >= 0x38)
                  {
                    v98 = &v36[8 * v93];
                    v97 = v98;
                    if ((unint64_t)(v98 - v7) >= 0x20)
                    {
                      v99 = (v96 >> 3) + 1;
                      v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
                      v97 = &v37[v100];
                      v101 = (__int128 *)(v7 + 16);
                      v102 = v98 + 16;
                      v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v104 = *v101;
                        *(v102 - 1) = *(v101 - 1);
                        *v102 = v104;
                        v101 += 2;
                        v102 += 2;
                        v103 -= 4;
                      }
                      while (v103);
                      if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_79;
                      v7 += v100;
                    }
                  }
                  else
                  {
                    v97 = &v36[8 * v93];
                  }
                  do
                  {
                    v105 = *(_QWORD *)v7;
                    v7 += 8;
                    *(_QWORD *)v97 = v105;
                    v97 += 8;
                  }
                  while (v97 != v5);
                }
LABEL_79:
                *(_QWORD *)a1 = v36;
                *(_QWORD *)(a1 + 8) = v37;
                *(_QWORD *)(a1 + 16) = v5;
                *(_QWORD *)(a1 + 24) = v38;
                if (v9)
                {
                  operator delete(v9);
                  v5 = *(char **)(a1 + 16);
                }
                goto LABEL_86;
              }
              goto LABEL_103;
            }
            goto LABEL_5;
          }
          v75 = &v19[v78];
        }
      }
      do
      {
        v91 = *(_QWORD *)v75;
        v75 += 8;
        *(_QWORD *)v74 = v91;
        v74 += 8;
      }
      while (v74 != v73);
    }
    *(_QWORD *)a1 = v71;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = v73;
    *(_QWORD *)(a1 + 24) = v72;
    if (!v19)
      goto LABEL_85;
    goto LABEL_84;
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_103;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = &v28[8 * v22];
  v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v44 = 1;
      else
        v44 = v21 >> 2;
      if (v44 >> 61)
        goto LABEL_103;
      v30 = (char *)operator new(8 * v44);
      v31 = &v30[8 * v44];
      operator delete(v28);
      v19 = *(char **)(a1 + 8);
      v18 = *(char **)(a1 + 16);
      v28 = v30;
    }
    else
    {
      v32 = v22 + 2;
      if (v22 >= -1)
        v32 = v22 + 1;
      v30 -= 8 * (v32 >> 1);
    }
  }
  *(_QWORD *)v30 = v29;
  v45 = v30 + 8;
  if (v18 != v19)
  {
    while (v30 != v28)
    {
      v49 = v30;
      v47 = v45;
LABEL_41:
      v50 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v49 - 1) = v50;
      v46 = v49 - 8;
      v45 = v47;
      v30 = v46;
      if (v18 == *(char **)(a1 + 8))
        goto LABEL_38;
    }
    if (v45 < v31)
    {
      v51 = (v31 - v45) >> 3;
      if (v51 >= -1)
        v52 = v51 + 1;
      else
        v52 = v51 + 2;
      v47 = &v45[8 * (v52 >> 1)];
      v49 = &v30[8 * (v52 >> 1)];
      if (v45 == v30)
      {
        v28 = v45;
      }
      else
      {
        memmove(&v30[8 * (v52 >> 1)], v30, v45 - v30);
        v28 = v30;
      }
      goto LABEL_41;
    }
    if (v31 == v30)
      v53 = 1;
    else
      v53 = (v31 - v30) >> 2;
    if (v53 >> 61)
      goto LABEL_103;
    v54 = (char *)operator new(8 * v53);
    v28 = v54;
    v55 = (v53 + 3) >> 2;
    v49 = &v54[8 * v55];
    v47 = v49;
    v56 = v45 - v30;
    if (v45 != v30)
    {
      v47 = &v49[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      v58 = &v54[8 * v55];
      v59 = v30;
      if (v57 >= 0x38)
      {
        v60 = 8 * v55;
        v58 = &v54[8 * v55];
        v59 = v30;
        if ((unint64_t)(v58 - v30) >= 0x20)
        {
          v61 = (v57 >> 3) + 1;
          v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          v58 = &v49[v62];
          v63 = (__int128 *)(v30 + 16);
          v64 = &v54[v60 + 16];
          v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v66 = *v63;
            *((_OWORD *)v64 - 1) = *(v63 - 1);
            *(_OWORD *)v64 = v66;
            v63 += 2;
            v64 += 32;
            v65 -= 4;
          }
          while (v65);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_61;
          v59 = &v30[v62];
        }
      }
      do
      {
        v67 = *(_QWORD *)v59;
        v59 += 8;
        *(_QWORD *)v58 = v67;
        v58 += 8;
      }
      while (v58 != v47);
    }
LABEL_61:
    v31 = &v54[8 * v53];
    operator delete(v30);
    goto LABEL_41;
  }
  v46 = v30;
  v47 = v30 + 8;
LABEL_38:
  v48 = *(char **)a1;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v46;
  *(_QWORD *)(a1 + 16) = v47;
  *(_QWORD *)(a1 + 24) = v31;
  if (v48)
    operator delete(v48);
}

void sub_19F8A5E30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::deque<unsigned long>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  BOOL v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 *v86;
  _OWORD *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  _OWORD *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_86:
      *(_QWORD *)v5 = v8;
      goto LABEL_87;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v33 = (v5 - v9) >> 2;
      if (v5 == v9)
        v33 = 1;
      if (!(v33 >> 61))
      {
        v34 = v33 >> 2;
        v35 = 8 * v33;
        v36 = (char *)operator new(8 * v33);
        v37 = &v36[8 * v34];
        v38 = &v36[v35];
        v40 = v5 - v7;
        v39 = v5 == v7;
        v5 = v37;
        if (!v39)
        {
          v5 = &v37[v40 & 0xFFFFFFFFFFFFFFF8];
          v41 = v40 - 8;
          if ((unint64_t)(v40 - 8) >= 0x38)
          {
            v83 = &v36[8 * v34];
            v42 = v83;
            if ((unint64_t)(v83 - v7) >= 0x20)
            {
              v84 = (v41 >> 3) + 1;
              v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
              v42 = &v37[v85];
              v86 = (__int128 *)(v6 + 3);
              v87 = v83 + 16;
              v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v89 = *v86;
                *(v87 - 1) = *(v86 - 1);
                *v87 = v89;
                v86 += 2;
                v87 += 2;
                v88 -= 4;
              }
              while (v88);
              if (v84 == (v84 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_79;
              v7 += v85;
            }
          }
          else
          {
            v42 = &v36[8 * v34];
          }
          do
          {
            v90 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v42 = v90;
            v42 += 8;
          }
          while (v42 != v5);
        }
        goto LABEL_79;
      }
LABEL_103:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_86;
  }
  v18 = *(char **)(a1 + 16);
  v17 = *(char **)(a1 + 24);
  v20 = *(char **)a1;
  v19 = *(char **)(a1 + 8);
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*(_QWORD *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_87:
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      v43 = v19;
      goto LABEL_85;
    }
    v68 = (v17 - v19) >> 2;
    if (v18 == v19)
      v68 = 1;
    if (v68 >> 61)
      goto LABEL_103;
    v69 = (v68 + 3) >> 2;
    v70 = 8 * v68;
    v71 = (char *)operator new(8 * v68);
    v43 = &v71[8 * v69];
    v72 = &v71[v70];
    v73 = v43;
    if (v18 != v19)
    {
      v73 = &v43[8 * v22];
      v74 = &v71[8 * v69];
      v75 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        v76 = &v71[8 * v69];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) >= 0x20)
        {
          v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
          v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
          v74 = &v43[v78];
          v79 = (__int128 *)(v19 + 16);
          v80 = v76 + 16;
          v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v82 = *v79;
            *(v80 - 1) = *(v79 - 1);
            *v80 = v82;
            v79 += 2;
            v80 += 2;
            v81 -= 4;
          }
          while (v81);
          if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(_QWORD *)a1 = v71;
            *(_QWORD *)(a1 + 8) = v43;
            *(_QWORD *)(a1 + 16) = v73;
            *(_QWORD *)(a1 + 24) = v72;
LABEL_84:
            operator delete(v19);
            v43 = *(char **)(a1 + 8);
LABEL_85:
            *((_QWORD *)v43 - 1) = v25;
            v7 = *(char **)(a1 + 8);
            v5 = *(char **)(a1 + 16);
            *(_QWORD *)(a1 + 8) = v7 - 8;
            v8 = *((_QWORD *)v7 - 1);
            *(_QWORD *)(a1 + 8) = v7;
            if (v5 != *(char **)(a1 + 24))
              goto LABEL_86;
            v9 = *(char **)a1;
            v10 = (uint64_t)&v7[-*(_QWORD *)a1];
            if ((unint64_t)v7 <= *(_QWORD *)a1)
            {
              v92 = (v5 - v9) >> 2;
              if (v5 == v9)
                v92 = 1;
              if (!(v92 >> 61))
              {
                v93 = v92 >> 2;
                v94 = 8 * v92;
                v36 = (char *)operator new(8 * v92);
                v37 = &v36[8 * v93];
                v38 = &v36[v94];
                v95 = v5 - v7;
                v39 = v5 == v7;
                v5 = v37;
                if (!v39)
                {
                  v5 = &v37[v95 & 0xFFFFFFFFFFFFFFF8];
                  v96 = v95 - 8;
                  if ((unint64_t)(v95 - 8) >= 0x38)
                  {
                    v98 = &v36[8 * v93];
                    v97 = v98;
                    if ((unint64_t)(v98 - v7) >= 0x20)
                    {
                      v99 = (v96 >> 3) + 1;
                      v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
                      v97 = &v37[v100];
                      v101 = (__int128 *)(v7 + 16);
                      v102 = v98 + 16;
                      v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v104 = *v101;
                        *(v102 - 1) = *(v101 - 1);
                        *v102 = v104;
                        v101 += 2;
                        v102 += 2;
                        v103 -= 4;
                      }
                      while (v103);
                      if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_79;
                      v7 += v100;
                    }
                  }
                  else
                  {
                    v97 = &v36[8 * v93];
                  }
                  do
                  {
                    v105 = *(_QWORD *)v7;
                    v7 += 8;
                    *(_QWORD *)v97 = v105;
                    v97 += 8;
                  }
                  while (v97 != v5);
                }
LABEL_79:
                *(_QWORD *)a1 = v36;
                *(_QWORD *)(a1 + 8) = v37;
                *(_QWORD *)(a1 + 16) = v5;
                *(_QWORD *)(a1 + 24) = v38;
                if (v9)
                {
                  operator delete(v9);
                  v5 = *(char **)(a1 + 16);
                }
                goto LABEL_86;
              }
              goto LABEL_103;
            }
            goto LABEL_5;
          }
          v75 = &v19[v78];
        }
      }
      do
      {
        v91 = *(_QWORD *)v75;
        v75 += 8;
        *(_QWORD *)v74 = v91;
        v74 += 8;
      }
      while (v74 != v73);
    }
    *(_QWORD *)a1 = v71;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = v73;
    *(_QWORD *)(a1 + 24) = v72;
    if (!v19)
      goto LABEL_85;
    goto LABEL_84;
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_103;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = &v28[8 * v22];
  v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v44 = 1;
      else
        v44 = v21 >> 2;
      if (v44 >> 61)
        goto LABEL_103;
      v30 = (char *)operator new(8 * v44);
      v31 = &v30[8 * v44];
      operator delete(v28);
      v19 = *(char **)(a1 + 8);
      v18 = *(char **)(a1 + 16);
      v28 = v30;
    }
    else
    {
      v32 = v22 + 2;
      if (v22 >= -1)
        v32 = v22 + 1;
      v30 -= 8 * (v32 >> 1);
    }
  }
  *(_QWORD *)v30 = v29;
  v45 = v30 + 8;
  if (v18 != v19)
  {
    while (v30 != v28)
    {
      v49 = v30;
      v47 = v45;
LABEL_41:
      v50 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v49 - 1) = v50;
      v46 = v49 - 8;
      v45 = v47;
      v30 = v46;
      if (v18 == *(char **)(a1 + 8))
        goto LABEL_38;
    }
    if (v45 < v31)
    {
      v51 = (v31 - v45) >> 3;
      if (v51 >= -1)
        v52 = v51 + 1;
      else
        v52 = v51 + 2;
      v47 = &v45[8 * (v52 >> 1)];
      v49 = &v30[8 * (v52 >> 1)];
      if (v45 == v30)
      {
        v28 = v45;
      }
      else
      {
        memmove(&v30[8 * (v52 >> 1)], v30, v45 - v30);
        v28 = v30;
      }
      goto LABEL_41;
    }
    if (v31 == v30)
      v53 = 1;
    else
      v53 = (v31 - v30) >> 2;
    if (v53 >> 61)
      goto LABEL_103;
    v54 = (char *)operator new(8 * v53);
    v28 = v54;
    v55 = (v53 + 3) >> 2;
    v49 = &v54[8 * v55];
    v47 = v49;
    v56 = v45 - v30;
    if (v45 != v30)
    {
      v47 = &v49[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      v58 = &v54[8 * v55];
      v59 = v30;
      if (v57 >= 0x38)
      {
        v60 = 8 * v55;
        v58 = &v54[8 * v55];
        v59 = v30;
        if ((unint64_t)(v58 - v30) >= 0x20)
        {
          v61 = (v57 >> 3) + 1;
          v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          v58 = &v49[v62];
          v63 = (__int128 *)(v30 + 16);
          v64 = &v54[v60 + 16];
          v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v66 = *v63;
            *((_OWORD *)v64 - 1) = *(v63 - 1);
            *(_OWORD *)v64 = v66;
            v63 += 2;
            v64 += 32;
            v65 -= 4;
          }
          while (v65);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_61;
          v59 = &v30[v62];
        }
      }
      do
      {
        v67 = *(_QWORD *)v59;
        v59 += 8;
        *(_QWORD *)v58 = v67;
        v58 += 8;
      }
      while (v58 != v47);
    }
LABEL_61:
    v31 = &v54[8 * v53];
    operator delete(v30);
    goto LABEL_41;
  }
  v46 = v30;
  v47 = v30 + 8;
LABEL_38:
  v48 = *(char **)a1;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v46;
  *(_QWORD *)(a1 + 16) = v47;
  *(_QWORD *)(a1 + 24) = v31;
  if (v48)
    operator delete(v48);
}

void sub_19F8A6460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void gdc::_overlayNeighborsNoDegenerates<VertexData_Reader<RibbonOverlayTriangleAccessor,unsigned short>>(_QWORD *a1, uint64_t a2, _QWORD *a3, unsigned int a4, _QWORD *a5)
{
  _QWORD *v5;
  char **v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  float32x2_t v21;
  float32x2_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  unint64_t v28;
  char **v29;
  char *v30;
  char *v31;
  BOOL v32;
  unint64_t v33;
  _DWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  char **v43;
  _OWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int16 *v47;
  float32x2_t v48;
  float32x2_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  char **v53;
  char *v54;
  char *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  _OWORD *v62;
  uint64_t v63;
  __int128 v64;
  int v65;
  char *v66;
  char *v67;
  uint64_t v68;

  v5 = a5;
  v8 = (char **)a1;
  v9 = (char *)(a1 + 4);
  *a1 = a1 + 4;
  a1[1] = a1 + 4;
  v10 = 3;
  a1[2] = a1 + 4;
  a1[3] = 3;
  v11 = *(unsigned int *)(a3[3] + 4 * a4);
  v12 = *a3;
  v13 = a1 + 4;
  v14 = (char *)(a1 + 4);
  v15 = v11;
  do
  {
    v16 = v15 ^ 1;
    v17 = *(unsigned int *)(v12 + 16 * (v15 ^ 1) + 12);
    if ((_DWORD)v17 != -1 && ((*(_QWORD *)(*v5 + ((v17 >> 3) & 0x1FFFFFF8)) >> v17) & 1) == 0)
    {
      v18 = *(_QWORD *)(a2 + 48);
      v19 = *(_QWORD *)(a2 + 104);
      v20 = (unsigned __int16 *)(v19 + 6 * v17);
      v21 = *(float32x2_t *)(v18 + 16 * v20[2]);
      v22 = vmul_f32(vsub_f32(*(float32x2_t *)(v18 + 16 * *v20), v21), (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*(float32x2_t *)(v18 + 16 * v20[1]), v21)));
      if (vsub_f32(v22, (float32x2_t)vdup_lane_s32((int32x2_t)v22, 1)).f32[0] != 0.0)
      {
        v23 = (v14 - v9) >> 2;
        if (v10 >= v23 + 1)
        {
          v13 = v9;
LABEL_3:
          *(_DWORD *)v14 = v17;
          v9 = (char *)v13;
LABEL_4:
          v14 += 4;
          v8[1] = v14;
          v12 = *a3;
          goto LABEL_5;
        }
        v24 = v9;
        v25 = a2;
        v26 = a3;
        v27 = v8[2];
        v28 = (1 << -(char)__clz(v10 + 1));
        if (v10 >= 0xFFFFFFFFFFFFFFFELL)
          v28 = 1;
        if (v28 <= v23 + 1)
          v28 = v23 + 1;
        v10 = v28;
        v29 = v8;
        v13 = malloc_type_malloc(4 * v28, 0x100004052888210uLL);
        v30 = *v29;
        v31 = v29[1];
        v32 = *v29 == v31;
        v8 = v29;
        a2 = v25;
        if (!v32)
        {
          v33 = v31 - v30 - 4;
          v34 = v13;
          v35 = v30;
          if (v33 < 0x1C)
            goto LABEL_21;
          v34 = v13;
          v35 = v30;
          if ((unint64_t)((char *)v13 - v30) < 0x20)
            goto LABEL_21;
          v36 = (v33 >> 2) + 1;
          v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
          v34 = (_DWORD *)((char *)v13 + v37);
          v38 = (__int128 *)(v30 + 16);
          v39 = v13 + 1;
          v40 = v36 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v41 = *v38;
            *(v39 - 1) = *(v38 - 1);
            *v39 = v41;
            v38 += 2;
            v39 += 2;
            v40 -= 8;
          }
          while (v40);
          if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8))
          {
            v35 = &v30[v37];
            do
            {
LABEL_21:
              v42 = *(_DWORD *)v35;
              v35 += 4;
              *v34++ = v42;
            }
            while (v35 != v31);
          }
        }
        if (v24 != v27)
        {
          v43 = v8;
          v44 = v13;
          free(v30);
          v13 = v44;
          v8 = v43;
        }
        *v8 = (char *)v13;
        v14 = (char *)v13 + 4 * v23;
        v8[3] = (char *)v10;
        a3 = v26;
        v5 = a5;
        goto LABEL_3;
      }
      v45 = *(unsigned int *)(v12 + 16 * v16 + 4);
      while (1)
      {
        v46 = *(unsigned int *)(v12 + 16 * (v45 ^ 1) + 12);
        if ((_DWORD)v46 != -1 && ((*(_QWORD *)(*v5 + ((v46 >> 3) & 0x1FFFFFF8)) >> v46) & 1) == 0)
        {
          v47 = (unsigned __int16 *)(v19 + 6 * v46);
          v48 = *(float32x2_t *)(v18 + 16 * v47[2]);
          v49 = vmul_f32(vsub_f32(*(float32x2_t *)(v18 + 16 * *v47), v48), (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*(float32x2_t *)(v18 + 16 * v47[1]), v48)));
          if (vsub_f32(v49, (float32x2_t)vdup_lane_s32((int32x2_t)v49, 1)).f32[0] != 0.0)
            break;
        }
        v45 = *(unsigned int *)(v12 + 16 * v45 + 4);
        if (v45 == v16)
          goto LABEL_5;
      }
      v50 = ((v14 - (char *)v13) >> 2) + 1;
      if (v10 >= v50)
      {
LABEL_46:
        *(_DWORD *)v14 = v46;
        goto LABEL_4;
      }
      v51 = (char *)v13;
      v67 = v8[2];
      v68 = (v14 - (char *)v13) >> 2;
      v52 = (1 << -(char)__clz(v10 + 1));
      if (v10 >= 0xFFFFFFFFFFFFFFFELL)
        v52 = 1;
      if (v52 <= v50)
        v52 = v50;
      v10 = v52;
      v53 = v8;
      v9 = (char *)malloc_type_malloc(4 * v52, 0x100004052888210uLL);
      v54 = *v53;
      v55 = v53[1];
      v8 = v53;
      if (*v53 != v55)
      {
        v56 = v55 - v54 - 4;
        v57 = v9;
        v58 = *v53;
        if (v56 >= 0x1C)
        {
          v57 = v9;
          v58 = *v53;
          if ((unint64_t)(v9 - v54) >= 0x20)
          {
            v59 = (v56 >> 2) + 1;
            v60 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
            v57 = &v9[v60];
            v61 = (__int128 *)(v54 + 16);
            v62 = v9 + 16;
            v63 = v59 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v64 = *v61;
              *(v62 - 1) = *(v61 - 1);
              *v62 = v64;
              v61 += 2;
              v62 += 2;
              v63 -= 8;
            }
            while (v63);
            if (v59 == (v59 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_43;
            v58 = &v54[v60];
          }
        }
        do
        {
          v65 = *(_DWORD *)v58;
          v58 += 4;
          *(_DWORD *)v57 = v65;
          v57 += 4;
        }
        while (v58 != v55);
      }
LABEL_43:
      if (v51 != v67)
      {
        v66 = v9;
        free(v54);
        v9 = v66;
        v8 = v53;
      }
      *v8 = v9;
      v14 = &v9[4 * v68];
      v8[3] = (char *)v10;
      v13 = v9;
      goto LABEL_46;
    }
LABEL_5:
    v15 = *(unsigned int *)(v12 + 16 * v15 + 4);
  }
  while (v15 != v11);
}

void sub_19F8A68B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1 != *(_QWORD *)(v1 + 16))
    free(*(void **)v1);
  _Unwind_Resume(exception_object);
}

float **gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<RibbonOverlayTriangleAccessor>>::fillTriangle<StrokeTriangle>(float **result, double *a2, unsigned __int16 *a3, double *a4, double *a5, double *a6)
{
  float *v6;
  float *v7;
  double v8;
  double v9;
  double v10;
  float *v11;
  double v12;
  double v13;
  float *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int16x4_t v33;
  float *v34;
  double v35;
  int16x4_t v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  float v43;
  double v44;
  double v45;
  float v46;
  float v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  int16x4_t v61;
  int16x4_t v62;
  double v63;
  int16x4_t v64;
  double v65;
  int16x4_t v66;
  int16x4_t v67;
  int16x4_t v68;
  double v69;
  int16x4_t v70;
  double v71;
  int16x4_t v72;
  int16x4_t v73;
  double v74;
  double v75;
  int16x4_t v76;
  int16x4_t v77;
  int16x4_t v78;
  double v79;
  int16x4_t v80;
  double v81;
  int16x4_t v82;
  int16x4_t v83;
  double v84;
  double v85;
  double v86;
  int v87;
  int v88;
  int v89;

  v6 = *result;
  v7 = result[1];
  v8 = **result;
  v10 = *a4;
  v9 = a4[1];
  v11 = *result;
  v12 = *v7;
  v13 = a4[2];
  v14 = result[2];
  v15 = *v14;
  v16 = (*result)[1];
  v17 = v7[1];
  v18 = v14[1];
  v19 = fmin(fmax(*a4 * v16 + v9 * v17 + v13 * v18, 0.0), 65535.0);
  *a3 = (int)fmin(fmax(*a4 * v8 + v9 * v12 + v13 * v15, 0.0), 65535.0);
  a3[1] = (int)v19;
  v20 = *a5;
  v21 = a5[1];
  v22 = a5[2];
  v23 = fmin(fmax(*a5 * v16 + v21 * v17 + v22 * v18, 0.0), 65535.0);
  a3[8] = (int)fmin(fmax(*a5 * v8 + v21 * v12 + v22 * v15, 0.0), 65535.0);
  a3[9] = (int)v23;
  v24 = *a6;
  v25 = a6[1];
  v26 = *a6 * v8 + v25 * v12;
  v27 = a6[2];
  v28 = (int)fmin(fmax(v26 + v27 * v15, 0.0), 65535.0);
  v29 = fmin(fmax(*a6 * v16 + v25 * v17 + v27 * v18, 0.0), 65535.0);
  a3[16] = v28;
  a3[17] = (int)v29;
  *(float *)&v9 = v10 * v6[2] + v9 * v7[2] + v13 * v14[2];
  *((_DWORD *)a3 + 3) = LODWORD(v9);
  *(float *)&v9 = v20 * v6[2] + v21 * v7[2] + v22 * v14[2];
  *((_DWORD *)a3 + 7) = LODWORD(v9);
  *(float *)&v9 = v24 * v6[2] + v25 * v7[2] + v27 * v14[2];
  *((_DWORD *)a3 + 11) = LODWORD(v9);
  v30 = a4[1];
  v31 = a4[2];
  v32 = *v11;
  *(double *)&v33 = *v7;
  v34 = result[2];
  v35 = *v34;
  *(float *)&v27 = *a4 * v32 + v30 * *(double *)&v33 + v31 * v35;
  *(double *)&v36 = v11[1];
  v37 = v7[1];
  v38 = *a4 * *(double *)&v36 + v30 * v37;
  v39 = v34[1];
  *(float *)&v38 = v38 + v31 * v39;
  v41 = *((_QWORD *)a2 + 1);
  v40 = *((_QWORD *)a2 + 2);
  LODWORD(v31) = *(_DWORD *)(v40 + 4);
  v42 = *a2;
  v43 = *(float *)(v41 + 4) - *(float *)&v31;
  *(float *)&v27 = *(float *)&v27 - *(float *)v40;
  *(float *)&v24 = *(float *)v41 - *(float *)v40;
  *(float *)&v38 = *(float *)&v38 - *(float *)&v31;
  v44 = 1.0 / a2[3];
  v45 = (float)-(float)((float)(*(float *)&v24 * *(float *)&v38) - (float)(*(float *)&v27 * v43)) * v44;
  v46 = *(float *)&v31 - *(float *)(*(_QWORD *)a2 + 4);
  v47 = *(float *)v40 - **(float **)a2;
  v48 = (float)-(float)((float)(v47 * *(float *)&v38) - (float)(v46 * *(float *)&v27)) * v44;
  v49 = 1.0 - (v45 + v48);
  v50 = a5[1];
  v51 = a5[2];
  *(float *)&v13 = *a5 * v32 + v50 * *(double *)&v33 + v51 * v35;
  *(float *)&v38 = *a5 * *(double *)&v36 + v50 * v37 + v51 * v39;
  *(float *)&v50 = *(float *)&v13 - *(float *)v40;
  *(float *)&v38 = *(float *)&v38 - *(float *)&v31;
  v52 = (float)-(float)((float)(*(float *)&v38 * *(float *)&v24) - (float)(*(float *)&v50 * v43)) * v44;
  v53 = (float)-(float)((float)(*(float *)&v38 * v47) - (float)(*(float *)&v50 * v46)) * v44;
  v54 = 1.0 - (v53 + v52);
  v55 = a6[1];
  v56 = a6[2];
  v57 = *a6 * v32 + v55 * *(double *)&v33 + v56 * v35;
  *(float *)&v57 = v57;
  *(float *)&v38 = *a6 * *(double *)&v36 + v55 * v37 + v56 * v39;
  *(float *)&v39 = *(float *)&v57 - *(float *)v40;
  *(float *)&v38 = *(float *)&v38 - *(float *)&v31;
  v58 = (float)-(float)((float)(*(float *)&v38 * *(float *)&v24) - (float)(*(float *)&v39 * v43)) * v44;
  v59 = (float)-(float)((float)(*(float *)&v38 * v47) - (float)(*(float *)&v39 * v46)) * v44;
  v60 = 1.0 - (v59 + v58);
  LOWORD(v57) = *(_WORD *)(*(_QWORD *)a2 + 8);
  v36.i16[0] = *(_WORD *)(v41 + 8);
  *(double *)&v61 = (double)vmovl_s16(v36).i32[0];
  *(double *)&v62 = v45 * (double)vmovl_s16(*(int16x4_t *)&v57).i32[0] + v48 * *(double *)&v61;
  v61.i16[0] = *(_WORD *)(v40 + 8);
  v63 = *(double *)&v62 + v49 * (double)vmovl_s16(v61).i32[0];
  v62.i16[0] = *(_WORD *)(*(_QWORD *)a2 + 10);
  v33.i16[0] = *(_WORD *)(v41 + 10);
  *(double *)&v64 = (double)vmovl_s16(v33).i32[0];
  v65 = v45 * (double)vmovl_s16(v62).i32[0] + v48 * *(double *)&v64;
  v64.i16[0] = *(_WORD *)(v40 + 10);
  *(double *)&v66 = fmin(fmax(v63, -32768.0), 32767.0);
  *(double *)&v67 = fmin(fmax(v65 + v49 * (double)vmovl_s16(v64).i32[0], -32768.0), 32767.0);
  a3[2] = *(_QWORD *)&v66;
  a3[3] = *(_QWORD *)&v67;
  v67.i16[0] = *(_WORD *)(*(_QWORD *)&v42 + 8);
  v66.i16[0] = *(_WORD *)(v41 + 8);
  *(double *)&v68 = (double)vmovl_s16(v66).i32[0];
  v69 = v52 * (double)vmovl_s16(v67).i32[0] + v53 * *(double *)&v68;
  v68.i16[0] = *(_WORD *)(v40 + 8);
  *(double *)&v70 = (double)vmovl_s16(v68).i32[0];
  v71 = v69 + v54 * *(double *)&v70;
  v70.i16[0] = *(_WORD *)(*(_QWORD *)&v42 + 10);
  *(double *)&v72 = (double)vmovl_s16(v70).i32[0];
  *(double *)&v73 = v52 * *(double *)&v72;
  v72.i16[0] = *(_WORD *)(v41 + 10);
  v74 = *(double *)&v73 + v53 * (double)vmovl_s16(v72).i32[0];
  v73.i16[0] = *(_WORD *)(v40 + 10);
  v75 = v74 + v54 * (double)vmovl_s16(v73).i32[0];
  *(double *)&v76 = fmin(fmax(v71, -32768.0), 32767.0);
  *(double *)&v77 = fmin(fmax(v75, -32768.0), 32767.0);
  a3[10] = *(_QWORD *)&v76;
  a3[11] = *(_QWORD *)&v77;
  v77.i16[0] = *(_WORD *)(*(_QWORD *)&v42 + 8);
  v76.i16[0] = *(_WORD *)(v41 + 8);
  *(double *)&v78 = (double)vmovl_s16(v76).i32[0];
  v79 = v58 * (double)vmovl_s16(v77).i32[0] + v59 * *(double *)&v78;
  v78.i16[0] = *(_WORD *)(v40 + 8);
  *(double *)&v80 = (double)vmovl_s16(v78).i32[0];
  v81 = v79 + v60 * *(double *)&v80;
  v80.i16[0] = *(_WORD *)(*(_QWORD *)&v42 + 10);
  *(double *)&v82 = (double)vmovl_s16(v80).i32[0];
  *(double *)&v83 = v58 * *(double *)&v82;
  v82.i16[0] = *(_WORD *)(v41 + 10);
  v84 = *(double *)&v83 + v59 * (double)vmovl_s16(v82).i32[0];
  v83.i16[0] = *(_WORD *)(v40 + 10);
  LODWORD(v41) = (int)fmin(fmax(v84 + v60 * (double)vmovl_s16(v83).i32[0], -32768.0), 32767.0);
  LODWORD(v14) = *a3;
  v85 = (double)(a3[8] - (int)v14);
  a3[18] = (int)fmin(fmax(v81, -32768.0), 32767.0);
  LODWORD(v42) = a3[1];
  v86 = (double)(a3[9] - LODWORD(v42));
  a3[19] = v41;
  v87 = a3[16];
  v88 = a3[17];
  if (-((double)(v87 - (int)v14) * v86 - (double)(v88 - LODWORD(v42)) * v85) < 0.0)
  {
    v89 = *((_DWORD *)a3 + 4);
    a3[8] = v87;
    a3[9] = v88;
    *((_DWORD *)a3 + 8) = v89;
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::ElevatedVbo> *,std::shared_ptr<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>>::__shared_ptr_default_delete<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>,ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>>,std::allocator<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::ElevatedVbo> *,std::shared_ptr<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>>::__shared_ptr_default_delete<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>,ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>>,std::allocator<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::ElevatedVbo>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__function::__func<std::shared_ptr<gdc::DCEL> md::buildDCELForMesh<ggl::PolylineOverlayRibbon::BakedWidthMesh const>(ggl::PolylineOverlayRibbon::BakedWidthMesh const &,gm::Range<unsigned long>,ggl::Loader *)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<std::shared_ptr<gdc::DCEL> md::buildDCELForMesh<ggl::PolylineOverlayRibbon::BakedWidthMesh const>(ggl::PolylineOverlayRibbon::BakedWidthMesh const &,gm::Range<unsigned long>,ggl::Loader *)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<std::shared_ptr<gdc::DCEL> md::buildDCELForMesh<ggl::PolylineOverlayRibbon::BakedWidthMesh const>(ggl::PolylineOverlayRibbon::BakedWidthMesh const &,gm::Range<unsigned long>,ggl::Loader *)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<std::shared_ptr<gdc::DCEL> md::buildDCELForMesh<ggl::PolylineOverlayRibbon::BakedWidthMesh const>(ggl::PolylineOverlayRibbon::BakedWidthMesh const &,gm::Range<unsigned long>,ggl::Loader *)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E42CE390;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<std::shared_ptr<gdc::DCEL> md::buildDCELForMesh<ggl::PolylineOverlayRibbon::BakedWidthMesh const>(ggl::PolylineOverlayRibbon::BakedWidthMesh const &,gm::Range<unsigned long>,ggl::Loader *)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<std::shared_ptr<gdc::DCEL> md::buildDCELForMesh<ggl::PolylineOverlayRibbon::BakedWidthMesh const>(ggl::PolylineOverlayRibbon::BakedWidthMesh const &,gm::Range<unsigned long>,ggl::Loader *)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42CE390;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<gdc::DCEL> md::buildDCELForMesh<ggl::PolylineOverlayRibbon::BakedWidthMesh const>(ggl::PolylineOverlayRibbon::BakedWidthMesh const &,gm::Range<unsigned long>,ggl::Loader *)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<std::shared_ptr<gdc::DCEL> md::buildDCELForMesh<ggl::PolylineOverlayRibbon::BakedWidthMesh const>(ggl::PolylineOverlayRibbon::BakedWidthMesh const &,gm::Range<unsigned long>,ggl::Loader *)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  char v31;
  unsigned int **v32;

  v3 = *a2;
  v4 = **(_QWORD **)(a1 + 16);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = v5 * *(_QWORD *)(a1 + 24);
  v7 = v5 * *(_QWORD *)(a1 + 32);
  v26 = *a2;
  v27 = v7;
  if (*(_DWORD *)(v4 + 216))
  {
    if ((*(_BYTE *)(v4 + 16) & 2) == 0)
    {
      v8 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v8 != -1)
      {
        v28 = (unsigned int *)&v31;
        v32 = &v28;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v32, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    if (v7 == v6)
    {
      v9 = 0;
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_29;
    }
    else if (v3 && *(_BYTE *)(v4 + 17) != 2)
    {
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 56))(v3, v4, v6, v7, 0, 1);
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_29;
    }
    else
    {
      v9 = *(_QWORD *)(v4 + 72) + v6;
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_29;
    }
    v11 = 0;
    v12 = 3;
    do
    {
      v13 = **(_QWORD ***)(a1 + 8);
      v14 = *(_DWORD *)(v9 + 4 * v11);
      v15 = *(_DWORD *)(v9 + 4 * (v12 - 2));
      v16 = *(_DWORD *)(v9 + 4 * (v12 - 1));
      v17 = (unsigned int *)operator new(0xCuLL);
      v29 = v17 + 3;
      v30 = v17 + 3;
      *v17 = v14;
      v17[1] = v15;
      v17[2] = v16;
      v28 = v17;
      gdc::DCEL::addFace(v13, &v28);
      operator delete(v17);
      v11 = v12;
      v12 += 3;
    }
    while (*(_QWORD *)(a1 + 40) > v11);
  }
  else
  {
    if ((*(_BYTE *)(v4 + 16) & 2) == 0)
    {
      v10 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v10 != -1)
      {
        v28 = (unsigned int *)&v31;
        v32 = &v28;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v32, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    if (v7 == v6)
    {
      v9 = 0;
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_29;
    }
    else if (v3 && *(_BYTE *)(v4 + 17) != 2)
    {
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 56))(v3, v4, v6, v7, 0, 1);
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_29;
    }
    else
    {
      v9 = *(_QWORD *)(v4 + 72) + v6;
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_29;
    }
    v18 = 0;
    v19 = 3;
    do
    {
      v20 = **(_QWORD ***)(a1 + 8);
      v21 = *(unsigned __int16 *)(v9 + 2 * v18);
      v22 = *(unsigned __int16 *)(v9 + 2 * (v19 - 2));
      v23 = *(unsigned __int16 *)(v9 + 2 * (v19 - 1));
      v24 = (unsigned int *)operator new(0xCuLL);
      v29 = v24 + 3;
      v30 = v24 + 3;
      *v24 = v21;
      v24[1] = v22;
      v24[2] = v23;
      v28 = v24;
      gdc::DCEL::addFace(v20, &v28);
      operator delete(v24);
      v18 = v19;
      v19 += 3;
    }
    while (*(_QWORD *)(a1 + 40) > v18);
  }
LABEL_29:
  result = v26;
  if (v9 && v27 != v6 && v26 && *(_BYTE *)(v4 + 17) != 2)
    return (*(uint64_t (**)(void))(*(_QWORD *)v26 + 64))();
  return result;
}

void sub_19F8A71B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (v13 && a11 != v12 && a10 && *(_BYTE *)(v11 + 17) != 2)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a10 + 64))(a10, v13, v11, v12, a11, 0, 1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void (*)(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int),std::allocator<void (*)(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>,void ()(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<void (*)(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int),std::allocator<void (*)(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>,void ()(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C70D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int),std::allocator<void (*)(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>,void ()(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C70D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int),std::allocator<void (*)(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>,void ()(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>::operator()(uint64_t a1, _QWORD *a2, unsigned int *a3, unsigned int *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

void std::__shared_ptr_emplace<gdc::DCEL>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gdc::DCEL>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE260;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<gdc::DCEL>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = a1[16];
  if (v2)
  {
    v3 = a1[17];
    v4 = (void *)a1[16];
    if (v3 != v2)
    {
      v5 = a1[17];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[16];
    }
    a1[17] = v2;
    operator delete(v4);
  }
  v8 = (_QWORD *)a1[15];
  if (v8 == a1 + 12)
  {
    v9 = 4;
    v8 = a1 + 12;
  }
  else
  {
    if (!v8)
      goto LABEL_14;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_14:
  v10 = (void *)a1[9];
  if (v10)
  {
    a1[10] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[6];
  if (v11)
  {
    a1[7] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[3];
  if (v12)
  {
    a1[4] = v12;
    operator delete(v12);
  }
}

void std::__shared_ptr_emplace<ggl::DaVinci::ElevatedFillMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::ElevatedFillMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4968;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::ElevatedFillMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<std::shared_ptr<ggl::DaVinci::ElevatedFillMesh> `anonymous namespace'::intersectMeshWithoutPolygon<ggl::DaVinci::TexturedCompressedMesh,ggl::DaVinci::ElevatedFillMesh,OverlayTriangleAccessor,FillTriangle>(md::FoundationMesh const&,ggl::DaVinci::TexturedCompressedMesh const&,ggl::Loader *,gdc::PolygonIntersectionDebugStats &)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<std::shared_ptr<ggl::DaVinci::ElevatedFillMesh> `anonymous namespace'::intersectMeshWithoutPolygon<ggl::DaVinci::TexturedCompressedMesh,ggl::DaVinci::ElevatedFillMesh,OverlayTriangleAccessor,FillTriangle>(md::FoundationMesh const&,ggl::DaVinci::TexturedCompressedMesh const&,ggl::Loader *,gdc::PolygonIntersectionDebugStats &)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<std::shared_ptr<ggl::DaVinci::ElevatedFillMesh> `anonymous namespace'::intersectMeshWithoutPolygon<ggl::DaVinci::TexturedCompressedMesh,ggl::DaVinci::ElevatedFillMesh,OverlayTriangleAccessor,FillTriangle>(md::FoundationMesh const&,ggl::DaVinci::TexturedCompressedMesh const&,ggl::Loader *,gdc::PolygonIntersectionDebugStats &)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<std::shared_ptr<ggl::DaVinci::ElevatedFillMesh> `anonymous namespace'::intersectMeshWithoutPolygon<ggl::DaVinci::TexturedCompressedMesh,ggl::DaVinci::ElevatedFillMesh,OverlayTriangleAccessor,FillTriangle>(md::FoundationMesh const&,ggl::DaVinci::TexturedCompressedMesh const&,ggl::Loader *,gdc::PolygonIntersectionDebugStats &)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E42C83F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::shared_ptr<ggl::DaVinci::ElevatedFillMesh> `anonymous namespace'::intersectMeshWithoutPolygon<ggl::DaVinci::TexturedCompressedMesh,ggl::DaVinci::ElevatedFillMesh,OverlayTriangleAccessor,FillTriangle>(md::FoundationMesh const&,ggl::DaVinci::TexturedCompressedMesh const&,ggl::Loader *,gdc::PolygonIntersectionDebugStats &)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<std::shared_ptr<ggl::DaVinci::ElevatedFillMesh> `anonymous namespace'::intersectMeshWithoutPolygon<ggl::DaVinci::TexturedCompressedMesh,ggl::DaVinci::ElevatedFillMesh,OverlayTriangleAccessor,FillTriangle>(md::FoundationMesh const&,ggl::DaVinci::TexturedCompressedMesh const&,ggl::Loader *,gdc::PolygonIntersectionDebugStats &)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E42C83F0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::shared_ptr<ggl::DaVinci::ElevatedFillMesh> `anonymous namespace'::intersectMeshWithoutPolygon<ggl::DaVinci::TexturedCompressedMesh,ggl::DaVinci::ElevatedFillMesh,OverlayTriangleAccessor,FillTriangle>(md::FoundationMesh const&,ggl::DaVinci::TexturedCompressedMesh const&,ggl::Loader *,gdc::PolygonIntersectionDebugStats &)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<std::shared_ptr<ggl::DaVinci::ElevatedFillMesh> `anonymous namespace'::intersectMeshWithoutPolygon<ggl::DaVinci::TexturedCompressedMesh,ggl::DaVinci::ElevatedFillMesh,OverlayTriangleAccessor,FillTriangle>(md::FoundationMesh const&,ggl::DaVinci::TexturedCompressedMesh const&,ggl::Loader *,gdc::PolygonIntersectionDebugStats &)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, char **a2)
{
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  _DWORD *v43;
  float *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  float *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  float32x2_t *v56;
  float32x2_t *v57;
  float32x2_t *v58;
  float32x2_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  BOOL v65;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  float *v70;
  float *v71;
  uint64_t v72;
  unint64_t v73;
  void **v74;
  void **v75;
  unint64_t *v76;
  uint64_t v77;
  void **v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void **v86;
  uint64_t v87;
  unsigned int v88;
  unint64_t v89;
  void *v90;
  float *v91;
  float *v92;
  unsigned __int16 *v93;
  float *v94;
  float *v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  float **v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  unsigned int *i;
  uint64_t v104;
  unsigned __int16 *v105;
  float *v106;
  float *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  unsigned int *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  BOOL v118;
  unint64_t v120;
  uint8x8_t v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  void *v131;
  void **v132;
  void **v133;
  unint64_t v134;
  void *v135;
  void *v136;
  void **v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  _DWORD *v141;
  float *v142;
  unint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  float *v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unsigned __int16 *v153;
  float32x2_t *v154;
  float32x2_t *v155;
  float32x2_t *v156;
  float32x2_t v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  BOOL v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  float *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void **v172;
  void **v173;
  unint64_t *v174;
  uint64_t v175;
  void **v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  void **v185;
  uint64_t v186;
  unsigned int v187;
  unint64_t v188;
  void *v189;
  float *v190;
  float *v191;
  unsigned int *v192;
  float *v193;
  float *v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  float **v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  unsigned int *j;
  uint64_t v203;
  unsigned __int16 *v204;
  float *v205;
  float *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  _QWORD *v211;
  unsigned int *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int v216;
  unint64_t v219;
  uint8x8_t v220;
  unint64_t v221;
  _QWORD *v222;
  _QWORD *v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  void *v230;
  void **v231;
  void **v232;
  unint64_t v233;
  void *v234;
  void *v235;
  void **v236;
  unint64_t v237;
  void *v238;
  void *v239;
  unint64_t v240;
  unint64_t v241;
  _QWORD *v242;
  int v243;
  int v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  _QWORD *v249;
  int v250;
  int v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  _QWORD *v256;
  int v257;
  int v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  _QWORD *v263;
  int v264;
  int v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  float *v272;
  float *v273;
  _QWORD *v274;
  _QWORD *v275;
  _QWORD *v276;
  _QWORD *v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t *v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _DWORD *v285;
  _DWORD *v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  __int128 v291;
  uint64_t *v292;
  uint64_t *v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  __int128 v301;
  void (***v302)(void);
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unsigned __int8 v306;
  unsigned __int8 v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unsigned __int8 v314;
  unsigned __int8 v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  __int128 v319;
  unint64_t v320;
  unint64_t v321;
  __int16 v322;
  uint64_t v323;
  uint64_t v324;
  __int128 v325;
  unint64_t v326;
  unint64_t v327;
  __int16 v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  float *v332;
  float *v333;
  float *v334;
  double v335;
  float *v336;
  float *v337;
  float *v338;
  double v339;
  float *v340;
  float *v341;
  float *v342;
  double v343;
  void *v344;
  unsigned int *v345;
  void *v346;
  __int128 v347;
  __int128 __p;
  int v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  float32x2_t *v356;
  float32x2_t *v357;
  float32x2_t *v358;
  double v359;
  _QWORD *v360;
  unint64_t v361;
  unint64_t v362;
  float **v363;
  float **v364;
  __int16 v365;
  unsigned __int8 v366;
  _BYTE v367[448];

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD **)(v4 + 96);
  v7 = v5[5];
  v6 = v5[6];
  v8 = v5[1];
  v9 = **(_QWORD **)(v4 + 64);
  v10 = (*(_QWORD *)(v9 + 48) - *(_QWORD *)(v9 + 40)) / *(_QWORD *)(v9 + 8);
  v323 = 0;
  v319 = 0uLL;
  v11 = *(_QWORD *)(v9 + 8) * v10;
  if ((*(_BYTE *)(v9 + 16) & 2) == 0)
  {
    v12 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v12 != -1)
    {
      v363 = (float **)&v353;
      v302 = (void (***)(void))&v363;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v302, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  v13 = v6 - v7;
  *(_QWORD *)&v14 = v3;
  if (v11)
  {
    if (v3 && *(_BYTE *)(v9 + 17) != 2)
    {
      v16 = (*(uint64_t (**)(char *, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 56))(v3, v9, 0, v11, 0, 1);
      *(_QWORD *)&v14 = v3;
      v15 = v16;
    }
    else
    {
      v15 = *(_QWORD *)(v9 + 72);
    }
  }
  else
  {
    v15 = 0;
  }
  *(_QWORD *)&v17 = v14;
  *((_QWORD *)&v17 + 1) = v9;
  v18 = v13 / v8;
  if (v323)
  {
    v20 = v320;
    v19 = v321;
    if (v321 != v320)
    {
      v21 = (_QWORD *)*((_QWORD *)&v319 + 1);
      v22 = v322;
      v23 = HIBYTE(v322);
      if ((_QWORD)v319 && *(_BYTE *)(*((_QWORD *)&v319 + 1) + 17) != 2)
      {
        v298 = v14;
        v294 = v18;
        v291 = v17;
        (*(void (**)(void))(*(_QWORD *)v319 + 64))();
        v17 = v291;
        v18 = v294;
        *(_QWORD *)&v14 = v298;
      }
      if (v22 && !v23)
      {
        v25 = v21[7];
        v24 = v21[8];
        if (v24 == v25)
          v25 = v21[10] - v21[9];
        if (v20 < v25)
          v25 = v20;
        if (v24 <= v19)
          v24 = v19;
        if (v24 == v25)
          v24 = v25 + v21[10] - v21[9];
        v21[7] = v25;
        v21[8] = v24;
      }
    }
  }
  v319 = v17;
  v320 = 0;
  v321 = v11;
  v322 = 256;
  v323 = v15;
  v324 = v15;
  v26 = *(_QWORD *)(v4 + 96);
  v329 = 0;
  v325 = 0uLL;
  v27 = *(_QWORD *)(v26 + 8) * v18;
  if ((*(_BYTE *)(v26 + 16) & 2) == 0)
  {
    v28 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v28 != -1)
    {
      v363 = (float **)&v353;
      v302 = (void (***)(void))&v363;
      v299 = v14;
      v29 = v18;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v302, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      v18 = v29;
      *(_QWORD *)&v14 = v299;
    }
  }
  if (v27)
  {
    if (v3 && *(_BYTE *)(v26 + 17) != 2)
    {
      v300 = v14;
      v31 = v18;
      v32 = (*(uint64_t (**)(char *, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 56))(v3, v26, 0, v27, 0, 1);
      v18 = v31;
      *(_QWORD *)&v14 = v300;
      v30 = v32;
    }
    else
    {
      v30 = *(_QWORD *)(v26 + 72);
    }
  }
  else
  {
    v30 = 0;
  }
  *((_QWORD *)&v14 + 1) = v26;
  if (v329)
  {
    v34 = v326;
    v33 = v327;
    if (v327 != v326)
    {
      v35 = (_QWORD *)*((_QWORD *)&v325 + 1);
      v36 = v328;
      v37 = HIBYTE(v328);
      if ((_QWORD)v325 && *(_BYTE *)(*((_QWORD *)&v325 + 1) + 17) != 2)
      {
        v301 = v14;
        v295 = v18;
        (*(void (**)(void))(*(_QWORD *)v325 + 64))();
        v18 = v295;
        v14 = v301;
      }
      if (v36 && !v37)
      {
        v39 = v35[7];
        v38 = v35[8];
        if (v38 == v39)
          v39 = v35[10] - v35[9];
        if (v34 < v39)
          v39 = v34;
        if (v38 <= v33)
          v38 = v33;
        if (v38 == v39)
          v38 = v39 + v35[10] - v35[9];
        v35[7] = v39;
        v35[8] = v38;
      }
    }
  }
  v325 = v14;
  v326 = 0;
  v327 = v27;
  v328 = 256;
  v329 = v30;
  v330 = v30;
  v331 = v18 / 3;
  v40 = *(_QWORD **)(a1 + 8);
  v41 = *(_DWORD *)(v40[12] + 216);
  if (v41 != 1)
  {
    if (v41)
      goto LABEL_324;
    VertexData_Reader<TempFoundationTriangleAccessor,unsigned short>::VertexData_Reader((uint64_t *)&v302, (uint64_t)v40, v40[18], v40[19], v3);
    v292 = **(uint64_t ***)(a1 + 32);
    v42 = **(_QWORD **)(a1 + 40);
    v43 = *(_DWORD **)(a1 + 56);
    v274 = **(_QWORD ***)(a1 + 48);
    v44 = *(float **)(a1 + 8);
    v280 = *(uint64_t **)(a1 + 16);
    v43[2] = 0;
    v285 = v43;
    *(_QWORD *)v43 = 0;
    if (!v318)
      goto LABEL_292;
    v45 = v331;
    if (!v331)
      goto LABEL_292;
    v272 = v44;
    v289 = v42;
    if ((v331 & 0x8000000000000000) != 0)
      abort();
    v46 = (v331 - 1) >> 6;
    v47 = operator new(8 * (v46 + 1));
    v48 = v47;
    v362 = v46 + 1;
    v360 = v47;
    v361 = v45;
    if (v45 >= 0x41)
      v49 = (v45 - 1) >> 6;
    else
      v49 = 0;
    v47[v49] = 0;
    v50 = v45;
    v270 = v45;
    if (v45 >= 0x40)
    {
      bzero(v47, 8 * (v45 >> 6));
      v50 = v45;
    }
    v51 = v272;
    if ((v50 & 0x3F) != 0)
      v48[v45 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v50 & 0x3F));
    v52 = 0;
    v276 = v48;
    while (1)
    {
      v53 = v52 >> 6;
      v54 = 1 << v52;
      if ((v48[v52 >> 6] & (1 << v52)) == 0)
      {
        v55 = (unsigned __int16 *)(v330 + 6 * v52);
        v56 = (float32x2_t *)(v324 + 16 * *v55);
        v57 = (float32x2_t *)(v324 + 16 * v55[1]);
        v58 = (float32x2_t *)(v324 + 16 * v55[2]);
        v356 = v56;
        v357 = v57;
        v358 = v58;
        v59 = vmul_f32(vsub_f32(*v56, *v58), (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*v57, *v58)));
        v59.f32[0] = vsub_f32(v59, (float32x2_t)vdup_lane_s32((int32x2_t)v59, 1)).f32[0];
        v359 = v59.f32[0];
        if (v59.f32[0] != 0.0)
        {
          if (v51[48] > fminf(v58->f32[0], fminf(v57->f32[0], v56->f32[0])))
          {
            v60 = v56->f32[1];
            v61 = v57->f32[1];
            v62 = v58->f32[1];
            v63 = fmaxf(fmaxf(v60, v61), v62);
            v64 = fminf(v62, fminf(v61, v60));
            v65 = v51[46] >= fmaxf(fmaxf(v56->f32[0], v57->f32[0]), v58->f32[0]) || v51[49] <= v64;
            if (!v65 && v51[47] < v63)
            {
              v67 = v318;
              if (v318)
              {
                v68 = 0;
                v69 = 0;
                while (1)
                {
                  v70 = (float *)(v309 + 16 * *(unsigned __int16 *)(v317 + v68 + 2));
                  v71 = (float *)(v309 + 16 * *(unsigned __int16 *)(v317 + v68 + 4));
                  *(_QWORD *)&v353 = v309 + 16 * *(unsigned __int16 *)(v317 + v68);
                  *((_QWORD *)&v353 + 1) = v70;
                  *(_QWORD *)&v354 = v71;
                  *((double *)&v354 + 1) = (float)((float)((float)(v71[1] - *(float *)(v353 + 4)) * (float)(*v70 - *v71))
                                                 + (float)((float)(*(float *)v353 - *v71) * (float)(v70[1] - v71[1])));
                  v363 = (float **)&v353;
                  v364 = (float **)&v356;
                  v365 = 0;
                  v366 = 0;
                  if (gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<OverlayTriangleAccessor>>::compute((uint64_t *)&v363))
                    break;
                  ++v69;
                  v68 += 6;
                  if (v67 == v69)
                    goto LABEL_82;
                }
                ++v285[1];
                v354 = 0u;
                v355 = 0u;
                v353 = 0u;
                std::deque<gdc::TrianglePair>::__add_back_capacity((uint64_t)&v353);
                v72 = *((_QWORD *)&v355 + 1);
                v73 = v355;
                v74 = (void **)v354;
                v75 = (void **)*((_QWORD *)&v353 + 1);
                v76 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)&v353 + 1)
                                                     + (((*((_QWORD *)&v355 + 1) + (_QWORD)v355) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (BYTE8(v355) + v355));
                *v76 = v52;
                v76[1] = v69;
                v118 = __CFADD__(v72, 1);
                v77 = v72 + 1;
                v48 = v276;
                if (v118)
                {
                  v78 = v74;
                }
                else
                {
                  v268 = v52;
                  do
                  {
                    v79 = *((_QWORD *)&v353 + 1);
                    v80 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)&v353 + 1) + ((v73 >> 5) & 0x7FFFFFFFFFFFFF8))
                                             + 16 * v73);
                    v81 = v80[1];
                    v278 = *v80;
                    v82 = v77 - 1;
                    v83 = v73 + 1;
                    *((_QWORD *)&v355 + 1) = v77 - 1;
                    *(_QWORD *)&v355 = v73 + 1;
                    if (v73 + 1 >= 0x200)
                    {
                      operator delete(**((void ***)&v353 + 1));
                      v83 = v73 - 255;
                      *((_QWORD *)&v353 + 1) = v79 + 8;
                      *(_QWORD *)&v355 = v73 - 255;
                    }
                    v351 = 0u;
                    v352 = 0u;
                    v350 = 0u;
                    v347 = 0u;
                    __p = 0u;
                    v349 = 1065353216;
                    std::deque<unsigned long>::__add_back_capacity((uint64_t)&v350);
                    v84 = *((_QWORD *)&v352 + 1);
                    v85 = v352;
                    v86 = (void **)*((_QWORD *)&v350 + 1);
                    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v350 + 1)
                                          + (((*((_QWORD *)&v352 + 1) + (_QWORD)v352) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * ((*((_QWORD *)&v352 + 1) + v352) & 0x1FF)) = v81;
                    v87 = v84 + 1;
                    *((_QWORD *)&v352 + 1) = v84 + 1;
                    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v347, v81, v81);
                    gdc::_overlayNeighborsNoDegenerates<VertexData_Reader<OverlayTriangleAccessor,unsigned short>>(&v344, (uint64_t)&v319, v274, v278, &v360);
                    v88 = v289;
                    if (v87)
                    {
                      v287 = v83;
                      do
                      {
                        while (1)
                        {
                          v296 = (*(_QWORD **)((char *)v86 + ((v85 >> 6) & 0x3FFFFFFFFFFFFF8)))[v85 & 0x1FF];
                          --v87;
                          v89 = v85 + 1;
                          *((_QWORD *)&v352 + 1) = v87;
                          *(_QWORD *)&v352 = v85 + 1;
                          if (v85 + 1 >= 0x400)
                          {
                            v90 = *v86++;
                            operator delete(v90);
                            v89 = v85 - 511;
                            *((_QWORD *)&v350 + 1) = v86;
                            *(_QWORD *)&v352 = v85 - 511;
                          }
                          v91 = (float *)(v324 + 16 * *(unsigned __int16 *)(v330 + 2 * (3 * v278 + 1)));
                          v92 = (float *)(v324 + 16 * *(unsigned __int16 *)(v330 + 2 * (3 * v278 + 2)));
                          v340 = (float *)(v324 + 16 * *(unsigned __int16 *)(v330 + 6 * v278));
                          v341 = v91;
                          v342 = v92;
                          v343 = (float)((float)((float)(v92[1] - v340[1]) * (float)(*v91 - *v92))
                                       + (float)((float)(*v340 - *v92) * (float)(v91[1] - v92[1])));
                          v93 = (unsigned __int16 *)(v317 + 6 * v296);
                          v94 = (float *)(v309 + 16 * *v93);
                          v95 = (float *)(v309 + 16 * v93[1]);
                          v96 = v93[2];
                          v336 = v94;
                          v337 = v95;
                          v338 = (float *)(v309 + 16 * v96);
                          v339 = (float)((float)((float)(v338[1] - v94[1]) * (float)(*v95 - *v338))
                                       + (float)((float)(*v94 - *v338) * (float)(v95[1] - v338[1])));
                          v363 = &v336;
                          v364 = &v340;
                          v365 = 0;
                          v366 = 0;
                          v97 = gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<OverlayTriangleAccessor>>::compute((uint64_t *)&v363);
                          if (v97)
                            break;
                          ++*v285;
                          v85 = v89;
                          if (!v87)
                            goto LABEL_147;
                        }
                        VertexData_Writer<FillTriangle>::allocateTriangles(v280, v97);
                        if (v366)
                        {
                          v98 = 0;
                          v99 = v363;
                          v100 = 72 * v366;
                          v101 = v280 + 5;
                          do
                          {
                            v102 = *v101;
                            v101 += 6;
                            gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<OverlayTriangleAccessor>>::fillTriangle<FillTriangle>(v99, v102, (double *)&v367[v98], (double *)&v367[v98 + 24], (double *)&v367[v98 + 48]);
                            v98 += 72;
                          }
                          while (v100 != v98);
                          v88 = v289;
                        }
                        ++*v285;
                        for (i = (unsigned int *)v344; i != v345; ++i)
                        {
                          while (1)
                          {
                            v104 = *i;
                            v105 = (unsigned __int16 *)(v330 + 6 * v104);
                            v106 = (float *)(v324 + 16 * *v105);
                            v107 = (float *)(v324 + 16 * v105[1]);
                            v108 = v105[2];
                            v332 = v106;
                            v333 = v107;
                            v334 = (float *)(v324 + 16 * v108);
                            v335 = (float)((float)((float)(v334[1] - v106[1]) * (float)(*v107 - *v334))
                                         + (float)((float)(*v106 - *v334) * (float)(v107[1] - v334[1])));
                            v363 = &v336;
                            v364 = &v332;
                            v365 = 0;
                            v366 = 0;
                            if (!gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<OverlayTriangleAccessor>>::compute((uint64_t *)&v363))
                              break;
                            v109 = *((_QWORD *)&v353 + 1);
                            v110 = 32 * (v354 - *((_QWORD *)&v353 + 1)) - 1;
                            if ((_QWORD)v354 == *((_QWORD *)&v353 + 1))
                              v110 = 0;
                            v111 = v82 + v83;
                            if (v110 == v82 + v83)
                            {
                              std::deque<gdc::TrianglePair>::__add_back_capacity((uint64_t)&v353);
                              v109 = *((_QWORD *)&v353 + 1);
                              v82 = *((_QWORD *)&v355 + 1);
                              v83 = v355;
                              v111 = *((_QWORD *)&v355 + 1) + v355;
                            }
                            v112 = (_QWORD *)(*(_QWORD *)(v109 + ((v111 >> 5) & 0x7FFFFFFFFFFFFF8))
                                            + 16 * v111);
                            *v112 = v104;
                            v112[1] = v296;
                            *((_QWORD *)&v355 + 1) = ++v82;
                            v113 = v345;
                            if (i + 1 != v345)
                              memmove(i, i + 1, (((char *)v345 - (char *)i) & 0xFFFFFFFFFFFFFFFCLL) - 4);
                            v345 = v113 - 1;
                            v287 = v83;
                            v88 = v289;
                            if (i == v345)
                              goto LABEL_110;
                          }
                        }
LABEL_110:
                        v114 = *(unsigned int *)(v292[3] + 4 * (v296 + v88));
                        v115 = *v292;
                        v116 = v114;
                        do
                        {
                          v117 = *(_DWORD *)(v115 + 16 * (v116 ^ 1) + 12);
                          v118 = v117 != -1 && v117 >= v88;
                          if (v118 && v117 < HIDWORD(v289))
                          {
                            v120 = v117 - v88;
                            if (*((_QWORD *)&v347 + 1))
                            {
                              v121 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v347 + 8));
                              v121.i16[0] = vaddlv_u8(v121);
                              if (v121.u32[0] > 1uLL)
                              {
                                v122 = v117 - v88;
                                if (*((_QWORD *)&v347 + 1) <= v120)
                                  v122 = v120 % *((_QWORD *)&v347 + 1);
                              }
                              else
                              {
                                v122 = (DWORD2(v347) - 1) & v120;
                              }
                              v123 = *(_QWORD **)(v347 + 8 * v122);
                              if (v123)
                              {
                                v124 = (_QWORD *)*v123;
                                if (v124)
                                {
                                  if (v121.u32[0] < 2uLL)
                                  {
                                    while (1)
                                    {
                                      v125 = v124[1];
                                      if (v125 == v120)
                                      {
                                        if (v124[2] == v120)
                                          goto LABEL_112;
                                      }
                                      else if ((v125 & (*((_QWORD *)&v347 + 1) - 1)) != v122)
                                      {
                                        goto LABEL_140;
                                      }
                                      v124 = (_QWORD *)*v124;
                                      if (!v124)
                                        goto LABEL_140;
                                    }
                                  }
                                  do
                                  {
                                    v126 = v124[1];
                                    if (v126 == v120)
                                    {
                                      if (v124[2] == v120)
                                        goto LABEL_112;
                                    }
                                    else
                                    {
                                      if (v126 >= *((_QWORD *)&v347 + 1))
                                        v126 %= *((_QWORD *)&v347 + 1);
                                      if (v126 != v122)
                                        break;
                                    }
                                    v124 = (_QWORD *)*v124;
                                  }
                                  while (v124);
                                }
                              }
                            }
LABEL_140:
                            v86 = (void **)*((_QWORD *)&v350 + 1);
                            v127 = (((_QWORD)v351 - *((_QWORD *)&v350 + 1)) << 6) - 1;
                            if ((_QWORD)v351 == *((_QWORD *)&v350 + 1))
                              v127 = 0;
                            v128 = v87 + v89;
                            if (v127 == v87 + v89)
                            {
                              std::deque<unsigned long>::__add_back_capacity((uint64_t)&v350);
                              v86 = (void **)*((_QWORD *)&v350 + 1);
                              v87 = *((_QWORD *)&v352 + 1);
                              v89 = v352;
                              v128 = *((_QWORD *)&v352 + 1) + v352;
                            }
                            (*(_QWORD **)((char *)v86 + ((v128 >> 6) & 0x3FFFFFFFFFFFFF8)))[v128 & 0x1FF] = v120;
                            *((_QWORD *)&v352 + 1) = ++v87;
                            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v347, v120, v120);
                            v115 = *v292;
                          }
LABEL_112:
                          v116 = *(unsigned int *)(v115 + 16 * v116 + 4);
                        }
                        while (v116 != v114);
                        v85 = v89;
                      }
                      while (v87);
                    }
                    else
                    {
                      v287 = v83;
                    }
LABEL_147:
                    v48 = v276;
                    *(_QWORD *)((char *)v276 + ((v278 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v278;
                    if (v344 != v346)
                      free(v344);
                    v129 = (_QWORD *)__p;
                    if ((_QWORD)__p)
                    {
                      do
                      {
                        v130 = (_QWORD *)*v129;
                        operator delete(v129);
                        v129 = v130;
                      }
                      while (v130);
                    }
                    v131 = (void *)v347;
                    *(_QWORD *)&v347 = 0;
                    if (v131)
                      operator delete(v131);
                    v132 = (void **)*((_QWORD *)&v350 + 1);
                    v133 = (void **)v351;
                    v134 = v351 - *((_QWORD *)&v350 + 1);
                    if ((_QWORD)v351 - *((_QWORD *)&v350 + 1) >= 0x11uLL)
                    {
                      do
                      {
                        v135 = *v132++;
                        operator delete(v135);
                        v134 -= 8;
                      }
                      while (v134 > 0x10);
                      *((_QWORD *)&v350 + 1) = v132;
                    }
                    while (v132 != v133)
                    {
                      v136 = *v132++;
                      operator delete(v136);
                    }
                    if ((_QWORD)v350)
                      operator delete((void *)v350);
                    v77 = *((_QWORD *)&v355 + 1);
                    v73 = v287;
                  }
                  while (*((_QWORD *)&v355 + 1));
                  v75 = (void **)*((_QWORD *)&v353 + 1);
                  v78 = (void **)v354;
                  v52 = v268;
                }
                if ((unint64_t)((char *)v78 - (char *)v75) < 0x11)
                {
                  v137 = v75;
                }
                else
                {
                  v137 = (void **)*((_QWORD *)&v353 + 1);
                  v138 = (unint64_t)v78 - *((_QWORD *)&v353 + 1);
                  do
                  {
                    operator delete(*v75);
                    *((_QWORD *)&v353 + 1) = ++v137;
                    v138 -= 8;
                    v75 = v137;
                  }
                  while (v138 > 0x10);
                }
                while (v137 != v78)
                {
                  v139 = *v137++;
                  operator delete(v139);
                }
                if ((_QWORD)v353)
                  operator delete((void *)v353);
              }
              else
              {
LABEL_82:
                ++v285[1];
                v48 = v276;
                v276[v53] |= v54;
              }
              v50 = v270;
              v51 = v272;
              goto LABEL_66;
            }
          }
          ++v285[2];
        }
        v48[v53] |= v54;
      }
LABEL_66:
      if (++v52 == v50)
      {
        v239 = v48;
        goto LABEL_291;
      }
    }
  }
  VertexData_Reader<TempFoundationTriangleAccessor,unsigned short>::VertexData_Reader((uint64_t *)&v302, (uint64_t)v40, v40[18], v40[19], v3);
  v293 = **(uint64_t ***)(a1 + 32);
  v140 = **(_QWORD **)(a1 + 40);
  v141 = *(_DWORD **)(a1 + 56);
  v277 = **(_QWORD ***)(a1 + 48);
  v142 = *(float **)(a1 + 8);
  v281 = *(uint64_t **)(a1 + 16);
  v141[2] = 0;
  v286 = v141;
  *(_QWORD *)v141 = 0;
  if (!v318)
    goto LABEL_292;
  v143 = v331;
  if (!v331)
    goto LABEL_292;
  v273 = v142;
  v290 = v140;
  if ((v331 & 0x8000000000000000) != 0)
    abort();
  v144 = (v331 - 1) >> 6;
  v145 = operator new(8 * (v144 + 1));
  v146 = v145;
  v362 = v144 + 1;
  v360 = v145;
  v361 = v143;
  if (v143 >= 0x41)
    v147 = (v143 - 1) >> 6;
  else
    v147 = 0;
  v145[v147] = 0;
  v148 = v143;
  v271 = v143;
  if (v143 >= 0x40)
  {
    bzero(v145, 8 * (v143 >> 6));
    v148 = v143;
  }
  v149 = v273;
  if ((v148 & 0x3F) != 0)
    v146[v143 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v148 & 0x3F));
  v150 = 0;
  do
  {
    v151 = v150 >> 6;
    v152 = 1 << v150;
    if ((v146[v150 >> 6] & (1 << v150)) == 0)
    {
      v153 = (unsigned __int16 *)(v330 + 6 * v150);
      v154 = (float32x2_t *)(v324 + 16 * *v153);
      v155 = (float32x2_t *)(v324 + 16 * v153[1]);
      v156 = (float32x2_t *)(v324 + 16 * v153[2]);
      v356 = v154;
      v357 = v155;
      v358 = v156;
      v157 = vmul_f32(vsub_f32(*v154, *v156), (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*v155, *v156)));
      v157.f32[0] = vsub_f32(v157, (float32x2_t)vdup_lane_s32((int32x2_t)v157, 1)).f32[0];
      v359 = v157.f32[0];
      if (v157.f32[0] == 0.0)
        goto LABEL_183;
      if (v149[48] <= fminf(v156->f32[0], fminf(v155->f32[0], v154->f32[0]))
        || ((v158 = v154->f32[1],
             v159 = v155->f32[1],
             v160 = v156->f32[1],
             v161 = fmaxf(fmaxf(v158, v159), v160),
             v162 = fminf(v160, fminf(v159, v158)),
             v149[46] < fmaxf(fmaxf(v154->f32[0], v155->f32[0]), v156->f32[0]))
          ? (v163 = v149[49] <= v162)
          : (v163 = 1),
            !v163 ? (v164 = v149[47] < v161) : (v164 = 0),
            !v164))
      {
        ++v286[2];
LABEL_183:
        v146[v151] |= v152;
        goto LABEL_184;
      }
      v165 = v318;
      if (v318)
      {
        v166 = 0;
        v167 = 0;
        while (1)
        {
          v168 = (float *)(v309 + 16 * *(unsigned int *)(v317 + v166 + 4));
          v169 = *(unsigned int *)(v317 + v166 + 8);
          *(_QWORD *)&v353 = v309 + 16 * *(unsigned int *)(v317 + v166);
          *((_QWORD *)&v353 + 1) = v168;
          *(_QWORD *)&v354 = v309 + 16 * v169;
          *((double *)&v354 + 1) = (float)((float)((float)(*(float *)(v354 + 4) - *(float *)(v353 + 4))
                                                 * (float)(*v168 - *(float *)v354))
                                         + (float)((float)(*(float *)v353 - *(float *)v354)
                                                 * (float)(v168[1] - *(float *)(v354 + 4))));
          v363 = (float **)&v353;
          v364 = (float **)&v356;
          v365 = 0;
          v366 = 0;
          if (gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<OverlayTriangleAccessor>>::compute((uint64_t *)&v363))
            break;
          ++v167;
          v166 += 12;
          if (v165 == v167)
            goto LABEL_200;
        }
        ++v286[1];
        v354 = 0u;
        v355 = 0u;
        v353 = 0u;
        std::deque<gdc::TrianglePair>::__add_back_capacity((uint64_t)&v353);
        v170 = *((_QWORD *)&v355 + 1);
        v171 = v355;
        v172 = (void **)v354;
        v173 = (void **)*((_QWORD *)&v353 + 1);
        v174 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)&v353 + 1)
                                              + (((*((_QWORD *)&v355 + 1) + (_QWORD)v355) >> 5) & 0x7FFFFFFFFFFFFF8))
                                  + 16 * (BYTE8(v355) + v355));
        *v174 = v150;
        v174[1] = v167;
        v118 = __CFADD__(v170, 1);
        v175 = v170 + 1;
        if (v118)
        {
          v176 = v172;
        }
        else
        {
          v269 = v150;
          v275 = v146;
          do
          {
            v177 = *((_QWORD *)&v353 + 1);
            v178 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)&v353 + 1) + ((v171 >> 5) & 0x7FFFFFFFFFFFFF8))
                                      + 16 * v171);
            v180 = *v178;
            v179 = v178[1];
            v181 = v175 - 1;
            v182 = v171 + 1;
            *((_QWORD *)&v355 + 1) = v175 - 1;
            *(_QWORD *)&v355 = v171 + 1;
            if (v171 + 1 >= 0x200)
            {
              operator delete(**((void ***)&v353 + 1));
              v182 = v171 - 255;
              *((_QWORD *)&v353 + 1) = v177 + 8;
              *(_QWORD *)&v355 = v171 - 255;
            }
            v351 = 0u;
            v352 = 0u;
            v350 = 0u;
            v347 = 0u;
            __p = 0u;
            v349 = 1065353216;
            std::deque<unsigned long>::__add_back_capacity((uint64_t)&v350);
            v183 = *((_QWORD *)&v352 + 1);
            v184 = v352;
            v185 = (void **)*((_QWORD *)&v350 + 1);
            *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v350 + 1)
                                  + (((*((_QWORD *)&v352 + 1) + (_QWORD)v352) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((*((_QWORD *)&v352 + 1) + v352) & 0x1FF)) = v179;
            v186 = v183 + 1;
            *((_QWORD *)&v352 + 1) = v183 + 1;
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v347, v179, v179);
            gdc::_overlayNeighborsNoDegenerates<VertexData_Reader<OverlayTriangleAccessor,unsigned short>>(&v344, (uint64_t)&v319, v277, v180, &v360);
            v187 = v290;
            v279 = v180;
            if (v186)
            {
              v283 = 3 * v180 + 1;
              v284 = 3 * v180;
              v282 = 3 * v180 + 2;
              v288 = v182;
              do
              {
                while (1)
                {
                  v297 = (*(_QWORD **)((char *)v185 + ((v184 >> 6) & 0x3FFFFFFFFFFFFF8)))[v184 & 0x1FF];
                  --v186;
                  v188 = v184 + 1;
                  *((_QWORD *)&v352 + 1) = v186;
                  *(_QWORD *)&v352 = v184 + 1;
                  if (v184 + 1 >= 0x400)
                  {
                    v189 = *v185++;
                    operator delete(v189);
                    v188 = v184 - 511;
                    *((_QWORD *)&v350 + 1) = v185;
                    *(_QWORD *)&v352 = v184 - 511;
                  }
                  v190 = (float *)(v324 + 16 * *(unsigned __int16 *)(v330 + 2 * v283));
                  v191 = (float *)(v324 + 16 * *(unsigned __int16 *)(v330 + 2 * v282));
                  v340 = (float *)(v324 + 16 * *(unsigned __int16 *)(v330 + 2 * v284));
                  v341 = v190;
                  v342 = v191;
                  v343 = (float)((float)((float)(v191[1] - v340[1]) * (float)(*v190 - *v191))
                               + (float)((float)(*v340 - *v191) * (float)(v190[1] - v191[1])));
                  v192 = (unsigned int *)(v317 + 12 * v297);
                  v193 = (float *)(v309 + 16 * *v192);
                  v194 = (float *)(v309 + 16 * v192[1]);
                  v195 = v192[2];
                  v336 = v193;
                  v337 = v194;
                  v338 = (float *)(v309 + 16 * v195);
                  v339 = (float)((float)((float)(v338[1] - v193[1]) * (float)(*v194 - *v338))
                               + (float)((float)(*v193 - *v338) * (float)(v194[1] - v338[1])));
                  v363 = &v336;
                  v364 = &v340;
                  v365 = 0;
                  v366 = 0;
                  v196 = gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<OverlayTriangleAccessor>>::compute((uint64_t *)&v363);
                  if (v196)
                    break;
                  ++*v286;
                  v184 = v188;
                  if (!v186)
                    goto LABEL_265;
                }
                VertexData_Writer<FillTriangle>::allocateTriangles(v281, v196);
                if (v366)
                {
                  v197 = 0;
                  v198 = v363;
                  v199 = 72 * v366;
                  v200 = v281 + 5;
                  do
                  {
                    v201 = *v200;
                    v200 += 6;
                    gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<OverlayTriangleAccessor>>::fillTriangle<FillTriangle>(v198, v201, (double *)&v367[v197], (double *)&v367[v197 + 24], (double *)&v367[v197 + 48]);
                    v197 += 72;
                  }
                  while (v199 != v197);
                  v187 = v290;
                }
                ++*v286;
                for (j = (unsigned int *)v344; j != v345; ++j)
                {
                  while (1)
                  {
                    v203 = *j;
                    v204 = (unsigned __int16 *)(v330 + 6 * v203);
                    v205 = (float *)(v324 + 16 * *v204);
                    v206 = (float *)(v324 + 16 * v204[1]);
                    v207 = v204[2];
                    v332 = v205;
                    v333 = v206;
                    v334 = (float *)(v324 + 16 * v207);
                    v335 = (float)((float)((float)(v334[1] - v205[1]) * (float)(*v206 - *v334))
                                 + (float)((float)(*v205 - *v334) * (float)(v206[1] - v334[1])));
                    v363 = &v336;
                    v364 = &v332;
                    v365 = 0;
                    v366 = 0;
                    if (!gdc::TriangleIntersection<gdc::Triangle<TempFoundationTriangleAccessor>,gdc::Triangle<OverlayTriangleAccessor>>::compute((uint64_t *)&v363))
                      break;
                    v208 = *((_QWORD *)&v353 + 1);
                    v209 = 32 * (v354 - *((_QWORD *)&v353 + 1)) - 1;
                    if ((_QWORD)v354 == *((_QWORD *)&v353 + 1))
                      v209 = 0;
                    v210 = v181 + v182;
                    if (v209 == v181 + v182)
                    {
                      std::deque<gdc::TrianglePair>::__add_back_capacity((uint64_t)&v353);
                      v208 = *((_QWORD *)&v353 + 1);
                      v181 = *((_QWORD *)&v355 + 1);
                      v182 = v355;
                      v210 = *((_QWORD *)&v355 + 1) + v355;
                    }
                    v211 = (_QWORD *)(*(_QWORD *)(v208 + ((v210 >> 5) & 0x7FFFFFFFFFFFFF8))
                                    + 16 * v210);
                    *v211 = v203;
                    v211[1] = v297;
                    *((_QWORD *)&v355 + 1) = ++v181;
                    v212 = v345;
                    if (j + 1 != v345)
                      memmove(j, j + 1, (((char *)v345 - (char *)j) & 0xFFFFFFFFFFFFFFFCLL) - 4);
                    v345 = v212 - 1;
                    v288 = v182;
                    v187 = v290;
                    if (j == v345)
                      goto LABEL_228;
                  }
                }
LABEL_228:
                v213 = *(unsigned int *)(v293[3] + 4 * (v297 + v187));
                v214 = *v293;
                v215 = v213;
                do
                {
                  v216 = *(_DWORD *)(v214 + 16 * (v215 ^ 1) + 12);
                  if (v216 != -1 && v216 >= v187 && v216 < HIDWORD(v290))
                  {
                    v219 = v216 - v187;
                    if (*((_QWORD *)&v347 + 1))
                    {
                      v220 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v347 + 8));
                      v220.i16[0] = vaddlv_u8(v220);
                      if (v220.u32[0] > 1uLL)
                      {
                        v221 = v216 - v187;
                        if (*((_QWORD *)&v347 + 1) <= v219)
                          v221 = v219 % *((_QWORD *)&v347 + 1);
                      }
                      else
                      {
                        v221 = (DWORD2(v347) - 1) & v219;
                      }
                      v222 = *(_QWORD **)(v347 + 8 * v221);
                      if (v222)
                      {
                        v223 = (_QWORD *)*v222;
                        if (v223)
                        {
                          if (v220.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v224 = v223[1];
                              if (v224 == v219)
                              {
                                if (v223[2] == v219)
                                  goto LABEL_230;
                              }
                              else if ((v224 & (*((_QWORD *)&v347 + 1) - 1)) != v221)
                              {
                                goto LABEL_258;
                              }
                              v223 = (_QWORD *)*v223;
                              if (!v223)
                                goto LABEL_258;
                            }
                          }
                          do
                          {
                            v225 = v223[1];
                            if (v225 == v219)
                            {
                              if (v223[2] == v219)
                                goto LABEL_230;
                            }
                            else
                            {
                              if (v225 >= *((_QWORD *)&v347 + 1))
                                v225 %= *((_QWORD *)&v347 + 1);
                              if (v225 != v221)
                                break;
                            }
                            v223 = (_QWORD *)*v223;
                          }
                          while (v223);
                        }
                      }
                    }
LABEL_258:
                    v185 = (void **)*((_QWORD *)&v350 + 1);
                    v226 = (((_QWORD)v351 - *((_QWORD *)&v350 + 1)) << 6) - 1;
                    if ((_QWORD)v351 == *((_QWORD *)&v350 + 1))
                      v226 = 0;
                    v227 = v186 + v188;
                    if (v226 == v186 + v188)
                    {
                      std::deque<unsigned long>::__add_back_capacity((uint64_t)&v350);
                      v185 = (void **)*((_QWORD *)&v350 + 1);
                      v186 = *((_QWORD *)&v352 + 1);
                      v188 = v352;
                      v227 = *((_QWORD *)&v352 + 1) + v352;
                    }
                    (*(_QWORD **)((char *)v185 + ((v227 >> 6) & 0x3FFFFFFFFFFFFF8)))[v227 & 0x1FF] = v219;
                    *((_QWORD *)&v352 + 1) = ++v186;
                    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v347, v219, v219);
                    v214 = *v293;
                  }
LABEL_230:
                  v215 = *(unsigned int *)(v214 + 16 * v215 + 4);
                }
                while (v215 != v213);
                v184 = v188;
              }
              while (v186);
            }
            else
            {
              v288 = v182;
            }
LABEL_265:
            v146 = v275;
            *(_QWORD *)((char *)v275 + ((v279 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v279;
            if (v344 != v346)
              free(v344);
            v228 = (_QWORD *)__p;
            if ((_QWORD)__p)
            {
              do
              {
                v229 = (_QWORD *)*v228;
                operator delete(v228);
                v228 = v229;
              }
              while (v229);
            }
            v230 = (void *)v347;
            *(_QWORD *)&v347 = 0;
            if (v230)
              operator delete(v230);
            v231 = (void **)*((_QWORD *)&v350 + 1);
            v232 = (void **)v351;
            v233 = v351 - *((_QWORD *)&v350 + 1);
            if ((_QWORD)v351 - *((_QWORD *)&v350 + 1) >= 0x11uLL)
            {
              do
              {
                v234 = *v231++;
                operator delete(v234);
                v233 -= 8;
              }
              while (v233 > 0x10);
              *((_QWORD *)&v350 + 1) = v231;
            }
            while (v231 != v232)
            {
              v235 = *v231++;
              operator delete(v235);
            }
            if ((_QWORD)v350)
              operator delete((void *)v350);
            v175 = *((_QWORD *)&v355 + 1);
            v171 = v288;
          }
          while (*((_QWORD *)&v355 + 1));
          v173 = (void **)*((_QWORD *)&v353 + 1);
          v176 = (void **)v354;
          v150 = v269;
        }
        if ((unint64_t)((char *)v176 - (char *)v173) < 0x11)
        {
          v236 = v173;
        }
        else
        {
          v236 = (void **)*((_QWORD *)&v353 + 1);
          v237 = (unint64_t)v176 - *((_QWORD *)&v353 + 1);
          do
          {
            operator delete(*v173);
            *((_QWORD *)&v353 + 1) = ++v236;
            v237 -= 8;
            v173 = v236;
          }
          while (v237 > 0x10);
        }
        while (v236 != v176)
        {
          v238 = *v236++;
          operator delete(v238);
        }
        if ((_QWORD)v353)
          operator delete((void *)v353);
      }
      else
      {
LABEL_200:
        ++v286[1];
        v146[v151] |= v152;
      }
      v148 = v271;
      v149 = v273;
    }
LABEL_184:
    ++v150;
  }
  while (v150 != v148);
  v239 = v146;
LABEL_291:
  operator delete(v239);
LABEL_292:
  if (v316)
  {
    v241 = v312;
    v240 = v313;
    if (v313 != v312)
    {
      v242 = (_QWORD *)v311;
      v243 = v314;
      v244 = v315;
      if (v310 && *(_BYTE *)(v311 + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v310 + 64))();
      if (v243 && !v244)
      {
        v246 = v242[7];
        v245 = v242[8];
        if (v245 == v246)
          v246 = v242[10] - v242[9];
        if (v241 < v246)
          v246 = v241;
        if (v245 <= v240)
          v245 = v240;
        if (v245 == v246)
          v245 = v246 + v242[10] - v242[9];
        v242[7] = v246;
        v242[8] = v245;
      }
    }
  }
  if (v308)
  {
    v248 = v304;
    v247 = v305;
    if (v305 != v304)
    {
      v249 = (_QWORD *)v303;
      v250 = v306;
      v251 = v307;
      if (v302 && *(_BYTE *)(v303 + 17) != 2)
        (*v302)[8]();
      if (v250 && !v251)
      {
        v253 = v249[7];
        v252 = v249[8];
        if (v252 == v253)
          v253 = v249[10] - v249[9];
        if (v248 < v253)
          v253 = v248;
        if (v252 <= v247)
          v252 = v247;
        if (v252 == v253)
          v252 = v253 + v249[10] - v249[9];
        v249[7] = v253;
        v249[8] = v252;
      }
    }
  }
LABEL_324:
  if (v329)
  {
    v255 = v326;
    v254 = v327;
    if (v327 != v326)
    {
      v256 = (_QWORD *)*((_QWORD *)&v325 + 1);
      v257 = v328;
      v258 = HIBYTE(v328);
      if ((_QWORD)v325 && *(_BYTE *)(*((_QWORD *)&v325 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v325 + 64))();
      if (v257 && !v258)
      {
        v260 = v256[7];
        v259 = v256[8];
        if (v259 == v260)
          v260 = v256[10] - v256[9];
        if (v255 < v260)
          v260 = v255;
        if (v259 <= v254)
          v259 = v254;
        if (v259 == v260)
          v259 = v260 + v256[10] - v256[9];
        v256[7] = v260;
        v256[8] = v259;
      }
    }
  }
  if (v323)
  {
    v262 = v320;
    v261 = v321;
    if (v321 != v320)
    {
      v263 = (_QWORD *)*((_QWORD *)&v319 + 1);
      v264 = v322;
      v265 = HIBYTE(v322);
      if ((_QWORD)v319 && *(_BYTE *)(*((_QWORD *)&v319 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v319 + 64))();
      if (v264 && !v265)
      {
        v267 = v263[7];
        v266 = v263[8];
        if (v266 == v267)
          v267 = v263[10] - v263[9];
        if (v262 < v267)
          v267 = v262;
        if (v266 <= v261)
          v266 = v261;
        if (v266 == v267)
          v266 = v267 + v263[10] - v263[9];
        v263[7] = v267;
        v263[8] = v266;
      }
    }
  }
}

void sub_19F8A8E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  void *v52;
  void **v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  void *v58;

  v54 = (void **)STACK[0x298];
  v55 = STACK[0x2A0];
  v56 = STACK[0x2A0] - STACK[0x298];
  if (v56 >= 0x11)
  {
    do
    {
      v57 = *v54++;
      operator delete(v57);
      v56 -= 8;
    }
    while (v56 > 0x10);
    STACK[0x298] = (unint64_t)v54;
  }
  while (v54 != (void **)v55)
  {
    v58 = *v54++;
    operator delete(v58);
  }
  if (STACK[0x290])
    operator delete((void *)STACK[0x290]);
  operator delete(v52);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a37);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a30);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a52);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a45);
  _Unwind_Resume(a1);
}

void gdc::_overlayNeighborsNoDegenerates<VertexData_Reader<OverlayTriangleAccessor,unsigned short>>(_QWORD *a1, uint64_t a2, _QWORD *a3, unsigned int a4, _QWORD *a5)
{
  _QWORD *v5;
  char **v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  float32x2_t v21;
  float32x2_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  unint64_t v28;
  char **v29;
  char *v30;
  char *v31;
  BOOL v32;
  unint64_t v33;
  _DWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  char **v43;
  _OWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int16 *v47;
  float32x2_t v48;
  float32x2_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  char **v53;
  char *v54;
  char *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  _OWORD *v62;
  uint64_t v63;
  __int128 v64;
  int v65;
  char *v66;
  char *v67;
  uint64_t v68;

  v5 = a5;
  v8 = (char **)a1;
  v9 = (char *)(a1 + 4);
  *a1 = a1 + 4;
  a1[1] = a1 + 4;
  v10 = 3;
  a1[2] = a1 + 4;
  a1[3] = 3;
  v11 = *(unsigned int *)(a3[3] + 4 * a4);
  v12 = *a3;
  v13 = a1 + 4;
  v14 = (char *)(a1 + 4);
  v15 = v11;
  do
  {
    v16 = v15 ^ 1;
    v17 = *(unsigned int *)(v12 + 16 * (v15 ^ 1) + 12);
    if ((_DWORD)v17 != -1 && ((*(_QWORD *)(*v5 + ((v17 >> 3) & 0x1FFFFFF8)) >> v17) & 1) == 0)
    {
      v18 = *(_QWORD *)(a2 + 48);
      v19 = *(_QWORD *)(a2 + 104);
      v20 = (unsigned __int16 *)(v19 + 6 * v17);
      v21 = *(float32x2_t *)(v18 + 16 * v20[2]);
      v22 = vmul_f32(vsub_f32(*(float32x2_t *)(v18 + 16 * *v20), v21), (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*(float32x2_t *)(v18 + 16 * v20[1]), v21)));
      if (vsub_f32(v22, (float32x2_t)vdup_lane_s32((int32x2_t)v22, 1)).f32[0] != 0.0)
      {
        v23 = (v14 - v9) >> 2;
        if (v10 >= v23 + 1)
        {
          v13 = v9;
LABEL_3:
          *(_DWORD *)v14 = v17;
          v9 = (char *)v13;
LABEL_4:
          v14 += 4;
          v8[1] = v14;
          v12 = *a3;
          goto LABEL_5;
        }
        v24 = v9;
        v25 = a2;
        v26 = a3;
        v27 = v8[2];
        v28 = (1 << -(char)__clz(v10 + 1));
        if (v10 >= 0xFFFFFFFFFFFFFFFELL)
          v28 = 1;
        if (v28 <= v23 + 1)
          v28 = v23 + 1;
        v10 = v28;
        v29 = v8;
        v13 = malloc_type_malloc(4 * v28, 0x100004052888210uLL);
        v30 = *v29;
        v31 = v29[1];
        v32 = *v29 == v31;
        v8 = v29;
        a2 = v25;
        if (!v32)
        {
          v33 = v31 - v30 - 4;
          v34 = v13;
          v35 = v30;
          if (v33 < 0x1C)
            goto LABEL_21;
          v34 = v13;
          v35 = v30;
          if ((unint64_t)((char *)v13 - v30) < 0x20)
            goto LABEL_21;
          v36 = (v33 >> 2) + 1;
          v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
          v34 = (_DWORD *)((char *)v13 + v37);
          v38 = (__int128 *)(v30 + 16);
          v39 = v13 + 1;
          v40 = v36 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v41 = *v38;
            *(v39 - 1) = *(v38 - 1);
            *v39 = v41;
            v38 += 2;
            v39 += 2;
            v40 -= 8;
          }
          while (v40);
          if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8))
          {
            v35 = &v30[v37];
            do
            {
LABEL_21:
              v42 = *(_DWORD *)v35;
              v35 += 4;
              *v34++ = v42;
            }
            while (v35 != v31);
          }
        }
        if (v24 != v27)
        {
          v43 = v8;
          v44 = v13;
          free(v30);
          v13 = v44;
          v8 = v43;
        }
        *v8 = (char *)v13;
        v14 = (char *)v13 + 4 * v23;
        v8[3] = (char *)v10;
        a3 = v26;
        v5 = a5;
        goto LABEL_3;
      }
      v45 = *(unsigned int *)(v12 + 16 * v16 + 4);
      while (1)
      {
        v46 = *(unsigned int *)(v12 + 16 * (v45 ^ 1) + 12);
        if ((_DWORD)v46 != -1 && ((*(_QWORD *)(*v5 + ((v46 >> 3) & 0x1FFFFFF8)) >> v46) & 1) == 0)
        {
          v47 = (unsigned __int16 *)(v19 + 6 * v46);
          v48 = *(float32x2_t *)(v18 + 16 * v47[2]);
          v49 = vmul_f32(vsub_f32(*(float32x2_t *)(v18 + 16 * *v47), v48), (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*(float32x2_t *)(v18 + 16 * v47[1]), v48)));
          if (vsub_f32(v49, (float32x2_t)vdup_lane_s32((int32x2_t)v49, 1)).f32[0] != 0.0)
            break;
        }
        v45 = *(unsigned int *)(v12 + 16 * v45 + 4);
        if (v45 == v16)
          goto LABEL_5;
      }
      v50 = ((v14 - (char *)v13) >> 2) + 1;
      if (v10 >= v50)
      {
LABEL_46:
        *(_DWORD *)v14 = v46;
        goto LABEL_4;
      }
      v51 = (char *)v13;
      v67 = v8[2];
      v68 = (v14 - (char *)v13) >> 2;
      v52 = (1 << -(char)__clz(v10 + 1));
      if (v10 >= 0xFFFFFFFFFFFFFFFELL)
        v52 = 1;
      if (v52 <= v50)
        v52 = v50;
      v10 = v52;
      v53 = v8;
      v9 = (char *)malloc_type_malloc(4 * v52, 0x100004052888210uLL);
      v54 = *v53;
      v55 = v53[1];
      v8 = v53;
      if (*v53 != v55)
      {
        v56 = v55 - v54 - 4;
        v57 = v9;
        v58 = *v53;
        if (v56 >= 0x1C)
        {
          v57 = v9;
          v58 = *v53;
          if ((unint64_t)(v9 - v54) >= 0x20)
          {
            v59 = (v56 >> 2) + 1;
            v60 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
            v57 = &v9[v60];
            v61 = (__int128 *)(v54 + 16);
            v62 = v9 + 16;
            v63 = v59 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v64 = *v61;
              *(v62 - 1) = *(v61 - 1);
              *v62 = v64;
              v61 += 2;
              v62 += 2;
              v63 -= 8;
            }
            while (v63);
            if (v59 == (v59 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_43;
            v58 = &v54[v60];
          }
        }
        do
        {
          v65 = *(_DWORD *)v58;
          v58 += 4;
          *(_DWORD *)v57 = v65;
          v57 += 4;
        }
        while (v58 != v55);
      }
LABEL_43:
      if (v51 != v67)
      {
        v66 = v9;
        free(v54);
        v9 = v66;
        v8 = v53;
      }
      *v8 = v9;
      v14 = &v9[4 * v68];
      v8[3] = (char *)v10;
      v13 = v9;
      goto LABEL_46;
    }
LABEL_5:
    v15 = *(unsigned int *)(v12 + 16 * v15 + 4);
  }
  while (v15 != v11);
}

void sub_19F8A94FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1 != *(_QWORD *)(v1 + 16))
    free(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::shared_ptr<gdc::DCEL> md::buildDCELForMesh<ggl::DaVinci::TexturedCompressedMesh const>(ggl::DaVinci::TexturedCompressedMesh const &,gm::Range<unsigned long>,ggl::Loader *)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<std::shared_ptr<gdc::DCEL> md::buildDCELForMesh<ggl::DaVinci::TexturedCompressedMesh const>(ggl::DaVinci::TexturedCompressedMesh const &,gm::Range<unsigned long>,ggl::Loader *)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<std::shared_ptr<gdc::DCEL> md::buildDCELForMesh<ggl::DaVinci::TexturedCompressedMesh const>(ggl::DaVinci::TexturedCompressedMesh const &,gm::Range<unsigned long>,ggl::Loader *)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<std::shared_ptr<gdc::DCEL> md::buildDCELForMesh<ggl::DaVinci::TexturedCompressedMesh const>(ggl::DaVinci::TexturedCompressedMesh const &,gm::Range<unsigned long>,ggl::Loader *)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E42CE3D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<std::shared_ptr<gdc::DCEL> md::buildDCELForMesh<ggl::DaVinci::TexturedCompressedMesh const>(ggl::DaVinci::TexturedCompressedMesh const &,gm::Range<unsigned long>,ggl::Loader *)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<std::shared_ptr<gdc::DCEL> md::buildDCELForMesh<ggl::DaVinci::TexturedCompressedMesh const>(ggl::DaVinci::TexturedCompressedMesh const &,gm::Range<unsigned long>,ggl::Loader *)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42CE3D8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<gdc::DCEL> md::buildDCELForMesh<ggl::DaVinci::TexturedCompressedMesh const>(ggl::DaVinci::TexturedCompressedMesh const &,gm::Range<unsigned long>,ggl::Loader *)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<std::shared_ptr<gdc::DCEL> md::buildDCELForMesh<ggl::DaVinci::TexturedCompressedMesh const>(ggl::DaVinci::TexturedCompressedMesh const &,gm::Range<unsigned long>,ggl::Loader *)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  char v31;
  unsigned int **v32;

  v3 = *a2;
  v4 = **(_QWORD **)(a1 + 16);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = v5 * *(_QWORD *)(a1 + 24);
  v7 = v5 * *(_QWORD *)(a1 + 32);
  v26 = *a2;
  v27 = v7;
  if (*(_DWORD *)(v4 + 216))
  {
    if ((*(_BYTE *)(v4 + 16) & 2) == 0)
    {
      v8 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v8 != -1)
      {
        v28 = (unsigned int *)&v31;
        v32 = &v28;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v32, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    if (v7 == v6)
    {
      v9 = 0;
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_29;
    }
    else if (v3 && *(_BYTE *)(v4 + 17) != 2)
    {
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 56))(v3, v4, v6, v7, 0, 1);
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_29;
    }
    else
    {
      v9 = *(_QWORD *)(v4 + 72) + v6;
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_29;
    }
    v11 = 0;
    v12 = 3;
    do
    {
      v13 = **(_QWORD ***)(a1 + 8);
      v14 = *(_DWORD *)(v9 + 4 * v11);
      v15 = *(_DWORD *)(v9 + 4 * (v12 - 2));
      v16 = *(_DWORD *)(v9 + 4 * (v12 - 1));
      v17 = (unsigned int *)operator new(0xCuLL);
      v29 = v17 + 3;
      v30 = v17 + 3;
      *v17 = v14;
      v17[1] = v15;
      v17[2] = v16;
      v28 = v17;
      gdc::DCEL::addFace(v13, &v28);
      operator delete(v17);
      v11 = v12;
      v12 += 3;
    }
    while (*(_QWORD *)(a1 + 40) > v11);
  }
  else
  {
    if ((*(_BYTE *)(v4 + 16) & 2) == 0)
    {
      v10 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v10 != -1)
      {
        v28 = (unsigned int *)&v31;
        v32 = &v28;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v32, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    if (v7 == v6)
    {
      v9 = 0;
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_29;
    }
    else if (v3 && *(_BYTE *)(v4 + 17) != 2)
    {
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 56))(v3, v4, v6, v7, 0, 1);
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_29;
    }
    else
    {
      v9 = *(_QWORD *)(v4 + 72) + v6;
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_29;
    }
    v18 = 0;
    v19 = 3;
    do
    {
      v20 = **(_QWORD ***)(a1 + 8);
      v21 = *(unsigned __int16 *)(v9 + 2 * v18);
      v22 = *(unsigned __int16 *)(v9 + 2 * (v19 - 2));
      v23 = *(unsigned __int16 *)(v9 + 2 * (v19 - 1));
      v24 = (unsigned int *)operator new(0xCuLL);
      v29 = v24 + 3;
      v30 = v24 + 3;
      *v24 = v21;
      v24[1] = v22;
      v24[2] = v23;
      v28 = v24;
      gdc::DCEL::addFace(v20, &v28);
      operator delete(v24);
      v18 = v19;
      v19 += 3;
    }
    while (*(_QWORD *)(a1 + 40) > v18);
  }
LABEL_29:
  result = v26;
  if (v9 && v27 != v6 && v26 && *(_BYTE *)(v4 + 17) != 2)
    return (*(uint64_t (**)(void))(*(_QWORD *)v26 + 64))();
  return result;
}

void sub_19F8A9898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (v13 && a11 != v12 && a10 && *(_BYTE *)(v11 + 17) != 2)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a10 + 64))(a10, v13, v11, v12, a11, 0, 1);
  _Unwind_Resume(exception_object);
}

void md::TrafficDynamicTileDecoder::~TrafficDynamicTileDecoder(md::TrafficDynamicTileDecoder *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::TrafficDynamicTileDecoder::decode(const gdc::ResourceKey *a1@<X1>, const gdc::RawResourceSourceData *a2@<X2>, _QWORD *a3@<X8>)
{
  zilch::TrafficDynamicTile *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  const unsigned __int8 *v10;
  unint64_t v11;
  zilch::TrafficDynamicTile *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  zilch::TrafficDynamicTile *v17;
  zilch::TrafficDynamicTile **v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _UNKNOWN **v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  void *v57;
  _QWORD *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  zilch::TrafficDynamicTile **v65;
  _QWORD *v66;
  _QWORD *v67;
  zilch::TrafficDynamicTile *v68;
  std::__shared_weak_count *v69;
  _BYTE v70[40];
  zilch::TrafficDynamicTile *v71;
  std::__shared_weak_count *v72;

  v71 = 0;
  v72 = 0;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 16))(*(_QWORD *)a2) & 1) != 0)
    goto LABEL_60;
  v7 = (zilch::TrafficDynamicTile *)operator new();
  zilch::TrafficDynamicTile::TrafficDynamicTile(v7);
  v64 = a3;
  v8 = (std::__shared_weak_count *)operator new();
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E83D0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v71 = v7;
  v72 = v8;
  v10 = (const unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 32))(*(_QWORD *)a2);
  (*(void (**)(_QWORD))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2);
  zilch::ReadBitstream::ReadBitstream((zilch::ReadBitstream *)v70, v10);
  a3 = v64;
  if (zilch::TrafficDynamicTile::decode(v7, (zilch::ReadBitstream *)v70))
  {
    v71 = 0;
    v72 = 0;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v12 = v71;
      if (v71)
        goto LABEL_7;
LABEL_60:
      *a3 = 0;
      a3[1] = 0;
      v61 = v72;
      if (!v72)
        return;
      goto LABEL_61;
    }
  }
  v12 = v71;
  if (!v71)
    goto LABEL_60;
LABEL_7:
  v13 = operator new();
  v14 = (_QWORD *)v13;
  v68 = v12;
  v69 = v72;
  if (v72)
  {
    v15 = (unint64_t *)&v72->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  gdc::Resource::Resource(v13, (uint64_t)a1);
  v17 = v12;
  v14[18] = v12;
  v14[19] = v69;
  v18 = (zilch::TrafficDynamicTile **)(v14 + 18);
  if (v69)
  {
    v19 = (unint64_t *)&v69->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = 0;
  *((_OWORD *)v14 + 10) = 0u;
  *((_OWORD *)v14 + 11) = 0u;
  *((_DWORD *)v14 + 48) = 1065353216;
  v14[25] = 0;
  v66 = v14 + 25;
  v14[26] = 0;
  v14[27] = 0;
  while (1)
  {
    v22 = v21;
    if (zilch::TrafficDynamicTile::flowCount(v17) <= (unint64_t)v21)
      break;
    v23 = (uint64_t *)zilch::TrafficDynamicTile::flow(*v18);
    v24 = zilch::TrafficDynamicTile::flow(v68);
    v25 = *v23;
    v26 = operator new(0x20uLL);
    v26[2] = v25;
    v26[3] = v24;
    *v26 = 0;
    v26[1] = v25;
    std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__node_insert_multi((uint64_t)(v14 + 20), v26);
    v21 = v22 + 1;
    v17 = v68;
  }
  v27 = 0;
  v28 = &off_1E426D000;
  v65 = (zilch::TrafficDynamicTile **)(v14 + 18);
  v67 = v14;
  while (v27 < zilch::TrafficDynamicTile::incidentCount(v68))
  {
    v29 = zilch::TrafficDynamicTile::incident(*v18);
    v30 = (void *)MEMORY[0x1A1AF555C]();
    v31 = (void *)objc_msgSend(objc_alloc((Class)v28[177]), "initWithIncidentData:", v29);
    v32 = v31;
    if (!v31)
      goto LABEL_49;
    v34 = (_QWORD *)v14[26];
    v33 = v14[27];
    if ((unint64_t)v34 >= v33)
    {
      v36 = (uint64_t)v34 - *v66;
      v37 = v36 >> 3;
      v38 = (v36 >> 3) + 1;
      if (v38 >> 61)
        abort();
      v39 = v33 - *v66;
      v40 = v39 >> 2;
      if (v39 >> 2 <= v38)
        v40 = (v36 >> 3) + 1;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
        v41 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v41 = v40;
      if (v41)
      {
        if (v41 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v42 = (char *)operator new(8 * v41);
      }
      else
      {
        v42 = 0;
      }
      v43 = &v42[8 * v37];
      v44 = &v42[8 * v41];
      *(_QWORD *)v43 = v32;
      v35 = v43 + 8;
      v45 = (char *)v67[25];
      v46 = (char *)v67[26];
      if (v46 == v45)
      {
        v67[25] = v43;
        v67[26] = v35;
        v67[27] = v44;
        v18 = v65;
        v14 = v67;
        if (v46)
          goto LABEL_46;
      }
      else
      {
        v47 = v46 - v45 - 8;
        if (v47 <= 0x77)
        {
          v48 = v44;
          goto LABEL_41;
        }
        v48 = v44;
        if (&v46[-(v47 & 0xFFFFFFFFFFFFFFF8) - 8] < v43 && &v42[v36 - (v47 & 0xFFFFFFFFFFFFFFF8) - 8] < v46)
          goto LABEL_70;
        v49 = (v47 >> 3) + 1;
        v50 = &v42[8 * v37 - 16];
        v51 = v46 - 32;
        v52 = v49 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v54 = *(_OWORD *)v51;
          v53 = *((_OWORD *)v51 + 1);
          *(_OWORD *)v51 = 0uLL;
          *((_OWORD *)v51 + 1) = 0uLL;
          v51 -= 32;
          *((_OWORD *)v50 - 1) = v54;
          *(_OWORD *)v50 = v53;
          v50 -= 32;
          v52 -= 4;
        }
        while (v52);
        v43 -= 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
        v46 -= 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
        if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_70:
          do
          {
LABEL_41:
            v55 = *((_QWORD *)v46 - 1);
            v46 -= 8;
            *(_QWORD *)v46 = 0;
            *((_QWORD *)v43 - 1) = v55;
            v43 -= 8;
          }
          while (v46 != v45);
        }
        v14 = v67;
        v46 = (char *)v67[25];
        v56 = (char *)v67[26];
        v67[25] = v43;
        v67[26] = v35;
        v67[27] = v48;
        if (v56 == v46)
        {
          v18 = v65;
          if (v46)
            goto LABEL_46;
        }
        else
        {
          v18 = v65;
          do
          {
            v57 = (void *)*((_QWORD *)v56 - 1);
            v56 -= 8;

          }
          while (v56 != v46);
          if (v46)
LABEL_46:
            operator delete(v46);
        }
      }
      v28 = &off_1E426D000;
      goto LABEL_48;
    }
    *v34 = v31;
    v35 = v34 + 1;
LABEL_48:
    v14[26] = v35;

LABEL_49:
    objc_autoreleasePoolPop(v30);
    ++v27;
  }
  v58 = (_QWORD *)operator new();
  *v58 = &off_1E42E71A8;
  v58[1] = 0;
  v58[2] = 0;
  v58[3] = v14;
  if (v69)
  {
    v59 = (unint64_t *)&v69->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  *v64 = v14;
  v64[1] = v58;
  v61 = v72;
  if (v72)
  {
LABEL_61:
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
}

void sub_19F8A9E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  md::TrafficDynamicTileResource *v21;

  md::TrafficDynamicTileResource::~TrafficDynamicTileResource(v21);
  MEMORY[0x1A1AF4E00]();
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void md::TrafficDynamicTileResource::~TrafficDynamicTileResource(md::TrafficDynamicTileResource *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;

  v2 = *((_QWORD *)this + 25);
  if (v2)
  {
    v3 = *((_QWORD *)this + 26);
    v4 = (void *)*((_QWORD *)this + 25);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 8);
        v3 -= 8;

      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 25);
    }
    *((_QWORD *)this + 26) = v2;
    operator delete(v4);
  }
  v6 = (_QWORD *)*((_QWORD *)this + 22);
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = (void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v8)
    operator delete(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (void *)*((_QWORD *)this + 1);
  if (v12 != *((void **)this + 3))
    free(v12);
}

void std::__shared_ptr_pointer<md::TrafficDynamicTileResource *,std::shared_ptr<md::TrafficDynamicTileResource>::__shared_ptr_default_delete<md::TrafficDynamicTileResource,md::TrafficDynamicTileResource>,std::allocator<md::TrafficDynamicTileResource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

md::TrafficDynamicTileResource *std::__shared_ptr_pointer<md::TrafficDynamicTileResource *,std::shared_ptr<md::TrafficDynamicTileResource>::__shared_ptr_default_delete<md::TrafficDynamicTileResource,md::TrafficDynamicTileResource>,std::allocator<md::TrafficDynamicTileResource>>::__on_zero_shared(uint64_t a1)
{
  md::TrafficDynamicTileResource *result;

  result = *(md::TrafficDynamicTileResource **)(a1 + 24);
  if (result)
  {
    md::TrafficDynamicTileResource::~TrafficDynamicTileResource(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_pointer<zilch::TrafficDynamicTile *,std::shared_ptr<zilch::TrafficDynamicTile>::__shared_ptr_default_delete<zilch::TrafficDynamicTile,zilch::TrafficDynamicTile>,std::allocator<zilch::TrafficDynamicTile>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<zilch::TrafficDynamicTile *,std::shared_ptr<zilch::TrafficDynamicTile>::__shared_ptr_default_delete<zilch::TrafficDynamicTile,zilch::TrafficDynamicTile>,std::allocator<zilch::TrafficDynamicTile>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    MEMORY[0x1A1AF471C]();
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

uint64_t md::TrafficDynamicTileResource::flowForRoadId(int8x8_t *a1, unint64_t a2, _QWORD *a3)
{
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;

  v3 = a1[21];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (*(_QWORD *)&v3 <= a2)
      v5 = a2 % *(_QWORD *)&v3;
  }
  else
  {
    v5 = (*(_QWORD *)&v3 - 1) & a2;
  }
  v6 = *(_QWORD **)(*(_QWORD *)&a1[20] + 8 * v5);
  if (!v6)
    return 0;
  v7 = (_QWORD *)*v6;
  if (!v7)
    return 0;
  if (v4.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == a2)
      {
        if (v7[2] == a2)
          goto LABEL_22;
      }
      else if ((v10 & v8) != v5)
      {
        return 0;
      }
      v7 = (_QWORD *)*v7;
      if (!v7)
        return 0;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == a2)
      break;
    if (v9 >= *(_QWORD *)&v3)
      v9 %= *(_QWORD *)&v3;
    if (v9 != v5)
      return 0;
LABEL_11:
    v7 = (_QWORD *)*v7;
    if (!v7)
      return 0;
  }
  if (v7[2] != a2)
    goto LABEL_11;
LABEL_22:
  v11 = v7;
  do
    v11 = (_QWORD *)*v11;
  while (v11 && v11[2] == a2);
  if (v7 == v11)
    return 0;
  *a3 = v7[3];
  v12 = (_QWORD *)*v7;
  if (v12 == v11)
    return 1;
  a3[1] = v12[3];
  v13 = (_QWORD *)*v12;
  if (v13 == v11)
    return 2;
  a3[2] = v13[3];
  v14 = (_QWORD *)*v13;
  if (v14 == v11)
    return 3;
  a3[3] = v14[3];
  v15 = (_QWORD *)*v14;
  if (v15 == v11)
    return 4;
  a3[4] = v15[3];
  v16 = (_QWORD *)*v15;
  if (v16 == v11)
    return 5;
  a3[5] = v16[3];
  v17 = (_QWORD *)*v16;
  if (v17 == v11)
    return 6;
  a3[6] = v17[3];
  v18 = (_QWORD *)*v17;
  if (v18 == v11)
    return 7;
  a3[7] = v18[3];
  v19 = (_QWORD *)*v18;
  if (v19 == v11)
    return 8;
  a3[8] = v19[3];
  v20 = (_QWORD *)*v19;
  if (v20 == v11)
    return 9;
  a3[9] = v20[3];
  v21 = (_QWORD *)*v20;
  if (v21 == v11)
    return 10;
  a3[10] = v21[3];
  v22 = (_QWORD *)*v21;
  if (v22 == v11)
    return 11;
  a3[11] = v22[3];
  v23 = (_QWORD *)*v22;
  if (v23 == v11)
    return 12;
  a3[12] = v23[3];
  v24 = (_QWORD *)*v23;
  if (v24 == v11)
    return 13;
  a3[13] = v24[3];
  v25 = (_QWORD *)*v24;
  if (v25 == v11)
    return 14;
  a3[14] = v25[3];
  v26 = (_QWORD *)*v25;
  if (v26 == v11)
    return 15;
  a3[15] = v26[3];
  return 16;
}

void md::DynamicTrafficTileList::addDynamicTile(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v10 = *(_QWORD **)a1;
    v11 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      abort();
    v13 = v4 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v15 = v12;
    if (v15 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v16 = 16 * v15;
    v17 = (char *)operator new(16 * v15);
    v18 = &v17[16 * v11];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v10 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
    }
    v22 = &v17[v16];
    v9 = v18 + 16;
    if (v5 == v10)
    {
      *(_QWORD *)a1 = v18;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v22;
    }
    else
    {
      do
      {
        v23 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v18 - 1) = v23;
        v18 -= 16;
        *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v10);
      v10 = *(_QWORD **)a1;
      v24 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v18;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v22;
      while (v24 != v10)
      {
        v25 = (std::__shared_weak_count *)*(v24 - 1);
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v24 -= 2;
      }
    }
    if (v10)
      operator delete(v10);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *v5 = *(_QWORD *)a2;
    v5[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 2;
  }
  *(_QWORD *)(a1 + 8) = v9;
}

uint64_t ggl::FoggedDiffuseBuilding::BuildingPipelineState::BuildingPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::FoggedDiffuseBuildingShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingFacade::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43BF8 = 1;
          }
          ggl::FoggedDiffuseBuilding::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57EDB8 = &ggl::FoggedDiffuseBuilding::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
          qword_1EE57EDC0 = 0;
          if ((v95 & 1) == 0
          {
            ggl::FoggedDiffuseBuilding::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            unk_1EE57EDF0 = ggl::Tile::View::reflection(void)::reflection;
            qword_1EE57EDF8 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1EE57EE00 = ggl::Building::Style::reflection(void)::reflection;
            qword_1EE57EE08 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1EE57EE10 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1EE57EE18 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1EE57EDC8 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineDataBuildingPipelineConstantStructs(void)::ref;
          unk_1EE57EDD0 = xmmword_19FFB3710;
        }
      }
      ggl::FoggedDiffuseBuilding::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FoggedDiffuseBuilding::BuildingPipelineSetup::typedReflection(void)::ref;
      ggl::FoggedDiffuseBuildingShader::typedReflection(v90);
      qword_1ECE31920 = (uint64_t)&ggl::FoggedDiffuseBuildingShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57EF80 = 0;
        qword_1EE57EF88 = (uint64_t)"";
        dword_1EE57EF90 = 0;
        qword_1EE57EF98 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1EE57EFA0 = 2;
      }
      qword_1ECE31928 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      unk_1ECE31930 = 1;
      qword_1ECE31938 = 0;
      unk_1ECE31940 = 1;
      qword_1ECE31948 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31950 = 0;
      if ((v93 & 1) == 0
      {
        ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57EE30 = 0;
        qword_1EE57EE38 = (uint64_t)"skyfog";
        dword_1EE57EE40 = 3;
        qword_1EE57EE48 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineConstantSkyfogBinding(void)::reflection;
        *(_OWORD *)algn_1EE57EE50 = xmmword_19FFB3720;
        qword_1EE57EE60 = 1;
        unk_1EE57EE68 = "view";
        dword_1EE57EE70 = 3;
        qword_1EE57EE78 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1EE57EE80 = vdupq_n_s64(2uLL);
        qword_1EE57EE90 = 2;
        unk_1EE57EE98 = "scale";
        dword_1EE57EEA0 = 3;
        qword_1EE57EEA8 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        *(_OWORD *)algn_1EE57EEB0 = xmmword_19FFB3730;
        qword_1EE57EEC0 = 3;
        unk_1EE57EEC8 = "style";
        dword_1EE57EED0 = 3;
        qword_1EE57EED8 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineConstantStyleBinding(void)::reflection;
        unk_1EE57EEE0 = xmmword_19FFB3740;
        qword_1EE57EEF0 = 4;
        unk_1EE57EEF8 = "gradient";
        dword_1EE57EF00 = 3;
        qword_1EE57EF08 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineConstantGradientBinding(void)::reflection;
        *(_OWORD *)algn_1EE57EF10 = xmmword_19FFB3670;
        qword_1EE57EF20 = 5;
        unk_1EE57EF28 = "lightConfig";
        dword_1EE57EF30 = 3;
        qword_1EE57EF38 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1EE57EF40 = xmmword_19FFB3750;
        qword_1EE57EF50 = 6;
        unk_1EE57EF58 = "fade";
        dword_1EE57EF60 = 3;
        qword_1EE57EF68 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineConstantFadeBinding(void)::reflection;
        unk_1EE57EF70 = 2;
      }
      qword_1ECE31958 = (uint64_t)&ggl::FoggedDiffuseBuilding::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      unk_1ECE31960 = 7;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::FoggedDiffuseBuilding::BuildingPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42BAC38;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::FoggedDiffuseBuilding::BuildingPipelineSetup::~BuildingPipelineSetup(ggl::FoggedDiffuseBuilding::BuildingPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FoggedDiffuseBuilding::BuildingPipelineSetup::constantDataIsEnabled(ggl::FoggedDiffuseBuilding::BuildingPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

BOOL ggl::FoggedDiffuseBuilding::BuildingPipelineSetup::textureIsEnabled(ggl::FoggedDiffuseBuilding::BuildingPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void md::VenueFeatureMarker::~VenueFeatureMarker(void **this)
{
  std::__shared_weak_count *v2;

  *this = &off_1E4296768;
  md::Venue::~Venue(this + 4);
  v2 = (std::__shared_weak_count *)this[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  std::__shared_weak_count *v2;

  *this = &off_1E4296768;
  md::Venue::~Venue(this + 4);
  v2 = (std::__shared_weak_count *)this[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1A1AF4E00);
}

void *md::VenueFeatureMarker::name@<X0>(md::VenueFeatureMarker *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  unsigned __int8 v5;
  void *result;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 && *((_BYTE *)this + 184))
    v4 = (char *)this + 192;
  else
    v4 = (char *)this + 136;
  {
    v11 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v11, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  result = (void *)mdm::Allocator::instance(void)::alloc;
  a3[3] = mdm::Allocator::instance(void)::alloc;
  if (v4[23] < 0)
  {
    v7 = *((_QWORD *)v4 + 1);
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v4 = *(char **)v4;
    if (v7 < 0x17)
    {
LABEL_8:
      *((_BYTE *)a3 + 23) = v7;
      if (!v7)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  else
  {
    v7 = v4[23];
    if (v7 < 0x17)
      goto LABEL_8;
  }
  v8 = (v7 & 0x7FFFFFFFFFFFFFF8) + 8;
  if ((v7 | 7) != 0x17)
    v8 = v7 | 7;
  v9 = v8 + 1;
  v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v8 + 1, 1);
  a3[1] = v7;
  a3[2] = v9 | 0x8000000000000000;
  *a3 = v10;
  a3 = (_QWORD *)v10;
LABEL_15:
  result = memmove(a3, v4, v7);
LABEL_16:
  *((_BYTE *)a3 + v7) = 0;
  return result;
}

void *md::VenueFeatureMarker::shortName@<X0>(md::VenueFeatureMarker *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  unsigned __int8 v5;
  void *result;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 && *((_BYTE *)this + 216))
    v4 = (char *)this + 224;
  else
    v4 = (char *)this + 160;
  {
    v11 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v11, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  result = (void *)mdm::Allocator::instance(void)::alloc;
  a3[3] = mdm::Allocator::instance(void)::alloc;
  if (v4[23] < 0)
  {
    v7 = *((_QWORD *)v4 + 1);
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v4 = *(char **)v4;
    if (v7 < 0x17)
    {
LABEL_8:
      *((_BYTE *)a3 + 23) = v7;
      if (!v7)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  else
  {
    v7 = v4[23];
    if (v7 < 0x17)
      goto LABEL_8;
  }
  v8 = (v7 & 0x7FFFFFFFFFFFFFF8) + 8;
  if ((v7 | 7) != 0x17)
    v8 = v7 | 7;
  v9 = v8 + 1;
  v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v8 + 1, 1);
  a3[1] = v7;
  a3[2] = v9 | 0x8000000000000000;
  *a3 = v10;
  a3 = (_QWORD *)v10;
LABEL_15:
  result = memmove(a3, v4, v7);
LABEL_16:
  *((_BYTE *)a3 + v7) = 0;
  return result;
}

uint64_t md::VenueFeatureMarker::featureId(md::VenueFeatureMarker *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t md::VenueFeatureMarker::venueId(md::VenueFeatureMarker *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t md::FeatureMarker::venueBuildingId(md::FeatureMarker *this)
{
  return 0;
}

float md::VenueFeatureMarker::minZoomRank(md::VenueFeatureMarker *this)
{
  return 0.0;
}

float md::VenueFeatureMarker::maxZoomRank(md::VenueFeatureMarker *this)
{
  return 21.0;
}

void *md::VenueFeatureMarker::debugString@<X0>(md::VenueFeatureMarker *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 v4;
  void *result;
  int v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  {
    v12 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v12, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  result = (void *)mdm::Allocator::instance(void)::alloc;
  a2[3] = mdm::Allocator::instance(void)::alloc;
  v6 = *((char *)this + 159);
  if (v6 < 0)
  {
    v8 = *((_QWORD *)this + 18);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v7 = (char *)*((_QWORD *)this + 17);
    if (v8 < 0x17)
    {
LABEL_4:
      *((_BYTE *)a2 + 23) = v8;
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else
  {
    v7 = (char *)this + 136;
    v8 = v6;
    if (v6 < 0x17uLL)
      goto LABEL_4;
  }
  v9 = (v8 & 0x7FFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17)
    v9 = v8 | 7;
  v10 = v9 + 1;
  v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v9 + 1, 1);
  a2[1] = v8;
  a2[2] = v10 | 0x8000000000000000;
  *a2 = v11;
  a2 = (_QWORD *)v11;
LABEL_11:
  result = memmove(a2, v7, v8);
LABEL_12:
  *((_BYTE *)a2 + v8) = 0;
  return result;
}

void md::Venue::~Venue(void **this)
{
  void *v2;
  void *v3;
  void **v4;

  if (*((_BYTE *)this + 184))
  {
    if (*((char *)this + 215) < 0)
      operator delete(this[24]);
    *((_BYTE *)this + 184) = 0;
  }
  if (*((_BYTE *)this + 152))
  {
    if (*((char *)this + 183) < 0)
      operator delete(this[20]);
    *((_BYTE *)this + 152) = 0;
  }
  if (*((char *)this + 151) < 0)
  {
    operator delete(this[16]);
    if ((*((char *)this + 127) & 0x80000000) == 0)
    {
LABEL_11:
      v2 = this[8];
      if (!v2)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  else if ((*((char *)this + 127) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(this[13]);
  v2 = this[8];
  if (v2)
  {
LABEL_12:
    this[9] = v2;
    operator delete(v2);
  }
LABEL_13:
  v3 = this[5];
  if (v3)
  {
    this[6] = v3;
    operator delete(v3);
  }
  v4 = (void **)this[2];
  if (v4)
  {
    std::vector<md::VenueBuilding>::__base_destruct_at_end[abi:nn180100]((uint64_t)(this + 2), v4);
    operator delete(this[2]);
  }
}

void std::vector<md::VenueBuilding>::__base_destruct_at_end[abi:nn180100](uint64_t a1, void **a2)
{
  void **v4;
  void *v5;
  void *v6;
  void **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v6 = *(v4 - 5);
      if (v6)
      {
        *(v4 - 4) = v6;
        operator delete(v6);
      }
      v7 = v4 - 15;
      v8 = (char *)*(v4 - 15);
      if (v8)
      {
        v9 = (char *)*(v4 - 14);
        v5 = *(v4 - 15);
        if (v9 != v8)
        {
          do
          {
            v10 = *((_QWORD *)v9 - 5);
            if (v10)
            {
              v11 = *((_QWORD *)v9 - 4);
              v12 = (void *)*((_QWORD *)v9 - 5);
              if (v11 != v10)
              {
                do
                {
                  v13 = *(void **)(v11 - 24);
                  if (v13)
                  {
                    *(_QWORD *)(v11 - 16) = v13;
                    operator delete(v13);
                  }
                  v11 -= 40;
                }
                while (v11 != v10);
                v12 = (void *)*((_QWORD *)v9 - 5);
              }
              *((_QWORD *)v9 - 4) = v10;
              operator delete(v12);
            }
            if (*(v9 - 72))
            {
              if (*(v9 - 41) < 0)
                operator delete(*((void **)v9 - 8));
              *(v9 - 72) = 0;
            }
            if (*(v9 - 104))
            {
              if (*(v9 - 73) < 0)
                operator delete(*((void **)v9 - 12));
              *(v9 - 104) = 0;
            }
            if (*(v9 - 136))
            {
              if (*(v9 - 105) < 0)
                operator delete(*((void **)v9 - 16));
              *(v9 - 136) = 0;
            }
            if (*(v9 - 168))
            {
              if (*(v9 - 137) < 0)
                operator delete(*((void **)v9 - 20));
              *(v9 - 168) = 0;
            }
            v9 -= 184;
          }
          while (v9 != v8);
          v5 = *v7;
        }
        *(v4 - 14) = v8;
        operator delete(v5);
      }
      v4 -= 15;
    }
    while (v7 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void ***std::vector<md::VenueBuilding>::~vector[abi:nn180100](void ***a1)
{
  if (*a1)
  {
    std::vector<md::VenueBuilding>::__base_destruct_at_end[abi:nn180100]((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

void ggl::DaVinci::GroundDepthPipelineSetup::~GroundDepthPipelineSetup(ggl::DaVinci::GroundDepthPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::DaVinci::GroundDepthPipelineSetup::constantDataIsEnabled(ggl::DaVinci::GroundDepthPipelineSetup *this, unint64_t a2)
{
  int v2;

  if (a2 < 2)
    return 1;
  if (a2 == 3)
  {
    v2 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 336);
    return v2 != 0;
  }
  if (a2 == 2)
  {
    v2 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 335);
    return v2 != 0;
  }
  return 0;
}

uint64_t ggl::DaVinci::GroundDepthPipelineSetup::textureIsEnabled(ggl::DaVinci::GroundDepthPipelineSetup *this)
{
  return 0;
}

void ggl::DaVinci::GroundDepthPipelineSetup::setElevationsDeviceData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = *(std::__shared_weak_count **)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

ggl::RenderQueue **std::unique_ptr<ggl::RenderQueue>::~unique_ptr[abi:nn180100](ggl::RenderQueue **a1)
{
  ggl::RenderQueue *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    ggl::RenderQueue::~RenderQueue(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void std::__shared_ptr_emplace<ggl::ImageCopy::Pos2DUVPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E51F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ImageCopy::Pos2DUVPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E51F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ImageCopy::Pos2DUVPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::IdentifiedResourceLogic::~IdentifiedResourceLogic(id *this)
{
  md::IdentifiedResourceLogic::~IdentifiedResourceLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  _QWORD *v3;
  id v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  gdc::LayerDataCollector *v8;
  gdc::LayerDataCollector *v9;

  *this = &off_1E429EBC0;
  GEOConfigRemoveBlockListener();
  GEOConfigRemoveBlockListener();

  v2 = this[21];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = this[19];
  this[19] = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)this[18];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (gdc::LayerDataCollector *)this[16];
  this[16] = 0;
  if (v8)
  {
    gdc::LayerDataCollector::~LayerDataCollector(v8);
    MEMORY[0x1A1AF4E00]();
  }
  v9 = (gdc::LayerDataCollector *)this[15];
  this[15] = 0;
  if (v9)
  {
    gdc::LayerDataCollector::~LayerDataCollector(v9);
    MEMORY[0x1A1AF4E00]();
  }
  *this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[13]);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[10]);
}

uint64_t md::Logic<md::IdentifiedResourceLogic,md::IdentifiedResourceContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[5];

  if (*(_QWORD *)(a3 + 8) == 0x12B1E486D3040E2CLL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::resolveDependencies(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::IdentifiedResourceLogic,md::IdentifiedResourceContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t md::IdentifiedResourceLogic::debugConsoleString@<X0>(uint64_t **a1@<X2>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t *v11;
  uint64_t v12;
  _WORD *v13;
  _WORD *v14;
  uint64_t *v15;
  _WORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  _DWORD **v31;
  _DWORD *v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  void *v40;
  void *v41;
  uint64_t v42;
  _QWORD **v43;
  size_t v44;
  size_t v45;
  size_t v46;
  _QWORD *i;
  size_t v48;
  uint64_t v49;
  unint64_t v50;
  uint8x8_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  size_t v55;
  _QWORD *v56;
  unint64_t v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  BOOL v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint8x8_t v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  int v81;
  int v82;
  const std::locale::facet *v83;
  char *v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  int64_t v88;
  std::locale::__imp *p_b;
  uint64_t v90;
  uint64_t v91;
  void *locale;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  char *v97;
  uint64_t v98;
  int v99;
  int v100;
  const std::locale::facet *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  size_t v105;
  std::locale::__imp *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  int v116;
  int v117;
  const std::locale::facet *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  size_t v122;
  std::locale::__imp *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  char *v131;
  uint64_t v132;
  int v133;
  int v134;
  const std::locale::facet *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  size_t v139;
  std::locale::__imp *v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  char *v148;
  uint64_t v149;
  int v150;
  int v151;
  const std::locale::facet *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  size_t v156;
  std::locale::__imp *v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  char *v165;
  uint64_t v166;
  int v167;
  int v168;
  const std::locale::facet *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  int64_t v173;
  std::locale::__imp *v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  size_t v181;
  void *v182;
  unint64_t v183;
  const void **v184;
  const void *v185;
  uint64_t v186;
  uint64_t v187;
  const void *v188;
  void *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v194;
  uint64_t *v195;
  uint64_t v196;
  void *__p[2];
  void *v198[2];
  float v199;
  uint64_t v200;
  _QWORD v201[2];
  _QWORD v202[3];
  uint64_t v203;
  unint64_t v204;
  void *v205[2];
  __int128 v206;
  int v207;
  uint64_t v208[19];
  _BYTE v209[16];
  std::locale __b;
  size_t v211;
  int64_t v212;

  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = (unint64_t)v201;
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v208[0] = MEMORY[0x1E0DE4FE0] + 64;
  v200 = v8;
  *(_QWORD *)((char *)&v201[-1] + *(_QWORD *)(v8 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v201[-1] + *(_QWORD *)(v200 - 24));
  std::ios_base::init(v10, v201);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v200 = v5 + 24;
  v208[0] = v6;
  std::streambuf::basic_streambuf();
  v201[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v205 = 0u;
  v206 = 0u;
  v207 = 16;
  v11 = *a1;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v198 = 0u;
  v199 = 1.0;
  v12 = *v11;
  if ((v11 & 1) == 0
  {
    qword_1ECE2F300 = 0;
    qword_1ECE2F2F8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
  }
  v13 = *(_WORD **)(v12 + 48);
  v14 = *(_WORD **)(v12 + 56);
  v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v13 != v14)
  {
    v16 = v13;
    while (*v16 != 33)
    {
      v16 += 16;
      if (v16 == v14)
        goto LABEL_13;
    }
    if (v16 == v14)
    {
      v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v13 != 33)
      {
        v13 += 16;
        if (v13 == v14)
        {
          v13 = v14;
          break;
        }
      }
      v15 = (uint64_t *)(v13 + 4);
    }
  }
LABEL_13:
  v19 = (uint64_t *)*v15;
  v17 = v15 + 1;
  v18 = v19;
  if (v19 != v17)
  {
    v195 = v17;
    do
    {
      v20 = (uint64_t *)v18[4];
      v21 = (std::__shared_weak_count *)v18[5];
      __b.__locale_ = (std::locale::__imp *)v20;
      v211 = (size_t)v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }
      v24 = (_QWORD *)gdc::Registry::storage<md::components::Asset>(v20[165]);
      v25 = v24[7];
      v26 = v24[8];
      if (v25 == v26)
        goto LABEL_112;
      v27 = (unint64_t *)v24[10];
      v28 = (unint64_t)__p[1];
      do
      {
        v29 = *v27;
        if (v28)
        {
          v30 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
          v30.i16[0] = vaddlv_u8(v30);
          if (v30.u32[0] > 1uLL)
          {
            v7 = *v27;
            if (v29 >= v28)
              v7 = v29 % v28;
          }
          else
          {
            v7 = (v28 - 1) & v29;
          }
          v31 = (_DWORD **)*((_QWORD *)__p[0] + v7);
          if (v31)
          {
            v32 = *v31;
            if (*v31)
            {
              if (v30.u32[0] < 2uLL)
              {
                while (1)
                {
                  v34 = *((_QWORD *)v32 + 1);
                  if (v34 == v29)
                  {
                    if (*((_QWORD *)v32 + 2) == v29)
                      goto LABEL_101;
                  }
                  else if ((v34 & (v28 - 1)) != v7)
                  {
                    goto LABEL_41;
                  }
                  v32 = *(_DWORD **)v32;
                  if (!v32)
                    goto LABEL_41;
                }
              }
              do
              {
                v33 = *((_QWORD *)v32 + 1);
                if (v33 == v29)
                {
                  if (*((_QWORD *)v32 + 2) == v29)
                    goto LABEL_101;
                }
                else
                {
                  if (v33 >= v28)
                    v33 %= v28;
                  if (v33 != v7)
                    break;
                }
                v32 = *(_DWORD **)v32;
              }
              while (v32);
            }
          }
        }
LABEL_41:
        v32 = operator new(0x20uLL);
        *(_QWORD *)v32 = 0;
        *((_QWORD *)v32 + 1) = v29;
        *((_QWORD *)v32 + 2) = *v27;
        v32[6] = 0;
        v35 = (float)((unint64_t)v198[1] + 1);
        if (!v28 || (float)(v199 * (float)v28) < v35)
        {
          v36 = (v28 & (v28 - 1)) != 0;
          if (v28 < 3)
            v36 = 1;
          v37 = v36 | (2 * v28);
          v38 = vcvtps_u32_f32(v35 / v199);
          if (v37 <= v38)
            prime = v38;
          else
            prime = v37;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
            v28 = (unint64_t)__p[1];
          }
          if (prime <= v28)
          {
            if (prime < v28)
            {
              v50 = vcvtps_u32_f32((float)(unint64_t)v198[1] / v199);
              if (v28 < 3 || (v51 = (uint8x8_t)vcnt_s8((int8x8_t)v28), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
              {
                v50 = std::__next_prime(v50);
              }
              else
              {
                v52 = 1 << -(char)__clz(v50 - 1);
                if (v50 >= 2)
                  v50 = v52;
              }
              if (prime <= v50)
                prime = v50;
              if (prime >= v28)
              {
                v28 = (unint64_t)__p[1];
              }
              else
              {
                if (prime)
                  goto LABEL_53;
                v58 = __p[0];
                __p[0] = 0;
                if (v58)
                  operator delete(v58);
                v28 = 0;
                __p[1] = 0;
              }
            }
LABEL_78:
            if ((v28 & (v28 - 1)) != 0)
            {
              if (v29 >= v28)
                v7 = v29 % v28;
              else
                v7 = v29;
            }
            else
            {
              v7 = (v28 - 1) & v29;
            }
            goto LABEL_91;
          }
LABEL_53:
          if (prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v40 = operator new(8 * prime);
          v41 = __p[0];
          __p[0] = v40;
          if (v41)
            operator delete(v41);
          v42 = 0;
          __p[1] = (void *)prime;
          do
            *((_QWORD *)__p[0] + v42++) = 0;
          while (prime != v42);
          v43 = (_QWORD **)v198[0];
          if (!v198[0])
            goto LABEL_77;
          v44 = *((_QWORD *)v198[0] + 1);
          v45 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v46 = v44 & v45;
            *((_QWORD *)__p[0] + v46) = v198;
            for (i = *v43; *v43; i = *v43)
            {
              v48 = i[1] & v45;
              if (v48 == v46)
              {
                v43 = (_QWORD **)i;
              }
              else if (*((_QWORD *)__p[0] + v48))
              {
                *v43 = (_QWORD *)*i;
                v49 = 8 * v48;
                *i = **(_QWORD **)((char *)__p[0] + v49);
                **(_QWORD **)((char *)__p[0] + v49) = i;
              }
              else
              {
                *((_QWORD *)__p[0] + v48) = v43;
                v43 = (_QWORD **)i;
                v46 = v48;
              }
            }
            goto LABEL_77;
          }
          if (v44 >= prime)
            v44 %= prime;
          *((_QWORD *)__p[0] + v44) = v198;
          v53 = *v43;
          if (!*v43)
          {
LABEL_77:
            v28 = prime;
            goto LABEL_78;
          }
          while (2)
          {
            v55 = v53[1];
            if (v55 >= prime)
              v55 %= prime;
            if (v55 != v44)
            {
              if (!*((_QWORD *)__p[0] + v55))
              {
                *((_QWORD *)__p[0] + v55) = v43;
LABEL_82:
                v43 = (_QWORD **)v53;
                v53 = (_QWORD *)*v53;
                v44 = v55;
                if (!v53)
                  goto LABEL_77;
                continue;
              }
              *v43 = (_QWORD *)*v53;
              v54 = 8 * v55;
              *v53 = **(_QWORD **)((char *)__p[0] + v54);
              **(_QWORD **)((char *)__p[0] + v54) = v53;
              v53 = v43;
            }
            break;
          }
          v55 = v44;
          goto LABEL_82;
        }
LABEL_91:
        v56 = (_QWORD *)*((_QWORD *)__p[0] + v7);
        if (v56)
        {
          *(_QWORD *)v32 = *v56;
LABEL_99:
          *v56 = v32;
          goto LABEL_100;
        }
        *(void **)v32 = v198[0];
        v198[0] = v32;
        *((_QWORD *)__p[0] + v7) = v198;
        if (*(_QWORD *)v32)
        {
          v57 = *(_QWORD *)(*(_QWORD *)v32 + 8);
          if ((v28 & (v28 - 1)) != 0)
          {
            if (v57 >= v28)
              v57 %= v28;
          }
          else
          {
            v57 &= v28 - 1;
          }
          v56 = (char *)__p[0] + 8 * v57;
          goto LABEL_99;
        }
LABEL_100:
        ++v198[1];
LABEL_101:
        ++v32[6];
        v27 += 9;
        v25 += 8;
      }
      while (v25 != v26);
      if (!v21)
        goto LABEL_116;
LABEL_112:
      v59 = (unint64_t *)&v21->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        v61 = (uint64_t *)v18[1];
        if (!v61)
        {
          do
          {
LABEL_120:
            v62 = (uint64_t *)v18[2];
            v63 = *v62 == (_QWORD)v18;
            v18 = v62;
          }
          while (!v63);
          goto LABEL_15;
        }
      }
      else
      {
LABEL_116:
        v61 = (uint64_t *)v18[1];
        if (!v61)
          goto LABEL_120;
      }
      do
      {
        v62 = v61;
        v61 = (uint64_t *)*v61;
      }
      while (v61);
LABEL_15:
      v18 = v62;
    }
    while (v62 != v195);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v200, (uint64_t)"\n=== Assets ===\n", 16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v200, (uint64_t)"Count: ", 7);
  v64 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)" - In Scene: ", 13);
  v65 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v65, (uint64_t)"\n", 1);
  v66 = *(_QWORD **)(a2 + 56);
  if (!v66)
    goto LABEL_328;
  while (2)
  {
    v67 = v66[3];
    v68 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)" - ", 3);
    v69 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)" lods\n", 6);
    v194 = v66;
    v71 = *(_QWORD *)(v67 + 184);
    v70 = *(_QWORD *)(v67 + 192);
    v196 = v70;
    while (v71 != v70)
    {
      if (__p[1])
      {
        v72 = v194[2];
        v73 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v73.i16[0] = vaddlv_u8(v73);
        if (v73.u32[0] > 1uLL)
        {
          v74 = v194[2];
          if ((void *)v72 >= __p[1])
            v74 = v72 % (unint64_t)__p[1];
        }
        else
        {
          v74 = ((unint64_t)__p[1] - 1) & v72;
        }
        v75 = (_QWORD *)*((_QWORD *)__p[0] + v74);
        if (v75)
        {
          v76 = (_QWORD *)*v75;
          if (v76)
          {
            if (v73.u32[0] < 2uLL)
            {
              while (1)
              {
                v78 = v76[1];
                if (v78 == v72)
                {
                  if (v76[2] == v72)
                    goto LABEL_150;
                }
                else if ((v78 & ((unint64_t)__p[1] - 1)) != v74)
                {
                  goto LABEL_150;
                }
                v76 = (_QWORD *)*v76;
                if (!v76)
                  goto LABEL_150;
              }
            }
            do
            {
              v77 = v76[1];
              if (v77 == v72)
              {
                if (v76[2] == v72)
                  break;
              }
              else
              {
                if ((void *)v77 >= __p[1])
                  v77 %= (unint64_t)__p[1];
                if (v77 != v74)
                  break;
              }
              v76 = (_QWORD *)*v76;
            }
            while (v76);
          }
        }
      }
LABEL_150:
      MEMORY[0x1A1AF49E0](v209, &v200);
      if (v209[0])
      {
        v79 = (char *)&v201[-1] + *(_QWORD *)(v200 - 24);
        v80 = *((_QWORD *)v79 + 5);
        v81 = *((_DWORD *)v79 + 2);
        v82 = *((_DWORD *)v79 + 36);
        if (v82 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v201[-1] + *(_QWORD *)(v200 - 24)));
          v83 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v82 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 32);
          std::locale::~locale(&__b);
          *((_DWORD *)v79 + 36) = v82;
        }
        if ((v81 & 0xB0) == 0x20)
          v84 = "";
        else
          v84 = "\t Instances: ";
        if (!v80)
          goto LABEL_178;
        v85 = *((_QWORD *)v79 + 3);
        v86 = v85 <= 13;
        v87 = v85 - 13;
        v88 = v86 ? 0 : v87;
        if (v84 - "\t Instances: " >= 1
          && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v80 + 96))(v80, "\t Instances: ", v84 - "\t Instances: ") != v84 - "\t Instances: ")
        {
          goto LABEL_178;
        }
        if (v88 >= 1)
        {
          if ((unint64_t)v88 >= 0x17)
          {
            v90 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v88 | 7) != 0x17)
              v90 = v88 | 7;
            v91 = v90 + 1;
            p_b = (std::locale::__imp *)operator new(v90 + 1);
            v211 = v88;
            v212 = v91 | 0x8000000000000000;
            __b.__locale_ = p_b;
          }
          else
          {
            HIBYTE(v212) = v88;
            p_b = (std::locale::__imp *)&__b;
          }
          memset(p_b, v82, v88);
          *((_BYTE *)p_b + v88) = 0;
          if (v212 >= 0)
            locale = &__b;
          else
            locale = __b.__locale_;
          v93 = (*(uint64_t (**)(uint64_t, void *, int64_t))(*(_QWORD *)v80 + 96))(v80, locale, v88);
          v94 = v93;
          if (SHIBYTE(v212) < 0)
          {
            operator delete(__b.__locale_);
            if (v94 != v88)
            {
LABEL_178:
              std::ios_base::clear((std::ios_base *)((char *)&v201[-1] + *(_QWORD *)(v200 - 24)), *(_DWORD *)((char *)&v202[1] + *(_QWORD *)(v200 - 24)) | 5);
              goto LABEL_179;
            }
          }
          else if (v93 != v88)
          {
            goto LABEL_178;
          }
        }
        v95 = "\t Instances: " - v84 + 13;
        if (v95 < 1
          || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v80 + 96))(v80, v84, "\t Instances: " - v84 + 13) == v95)
        {
          *((_QWORD *)v79 + 3) = 0;
          goto LABEL_179;
        }
        goto LABEL_178;
      }
LABEL_179:
      MEMORY[0x1A1AF49EC](v209);
      v96 = (_QWORD *)std::ostream::operator<<();
      MEMORY[0x1A1AF49E0](v209, v96);
      if (!v209[0])
        goto LABEL_209;
      v97 = (char *)v96 + *(_QWORD *)(*v96 - 24);
      v98 = *((_QWORD *)v97 + 5);
      v99 = *((_DWORD *)v97 + 2);
      v100 = *((_DWORD *)v97 + 36);
      if (v100 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(_QWORD *)(*v96 - 24)));
        v101 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
        v100 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v101->__vftable[2].~facet_0)(v101, 32);
        std::locale::~locale(&__b);
        *((_DWORD *)v97 + 36) = v100;
      }
      if ((v99 & 0xB0) == 0x20)
        v102 = "";
      else
        v102 = "\n";
      if (!v98)
        goto LABEL_208;
      v103 = *((_QWORD *)v97 + 3);
      v86 = v103 <= 1;
      v104 = v103 - 1;
      v105 = v86 ? 0 : v104;
      if (v102 - "\n" >= 1
        && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v98 + 96))(v98, "\n", v102 - "\n") != v102 - "\n")
      {
        goto LABEL_208;
      }
      if ((uint64_t)v105 >= 1)
      {
        if (v105 > 0x7FFFFFFFFFFFFFF7)
          abort();
        if (v105 >= 0x17)
        {
          v107 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v105 | 7) != 0x17)
            v107 = v105 | 7;
          v108 = v107 + 1;
          v106 = (std::locale::__imp *)operator new(v107 + 1);
          v211 = v105;
          v212 = v108 | 0x8000000000000000;
          __b.__locale_ = v106;
        }
        else
        {
          HIBYTE(v212) = v105;
          v106 = (std::locale::__imp *)&__b;
        }
        memset(v106, v100, v105);
        *((_BYTE *)v106 + v105) = 0;
        if (v212 >= 0)
          v109 = &__b;
        else
          v109 = __b.__locale_;
        v110 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v98 + 96))(v98, v109, v105);
        v111 = v110;
        if (SHIBYTE(v212) < 0)
        {
          operator delete(__b.__locale_);
          if (v111 != v105)
            goto LABEL_208;
        }
        else if (v110 != v105)
        {
          goto LABEL_208;
        }
      }
      v112 = "\n" - v102 + 1;
      if (v112 < 1
        || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v98 + 96))(v98, v102, "\n" - v102 + 1) == v112)
      {
        *((_QWORD *)v97 + 3) = 0;
        goto LABEL_209;
      }
LABEL_208:
      std::ios_base::clear((std::ios_base *)((char *)v96 + *(_QWORD *)(*v96 - 24)), *(_DWORD *)((char *)v96 + *(_QWORD *)(*v96 - 24) + 32) | 5);
LABEL_209:
      v113 = MEMORY[0x1A1AF49EC](v209);
      MEMORY[0x1A1AF49E0](v113, &v200);
      if (!v209[0])
        goto LABEL_239;
      v114 = (char *)&v201[-1] + *(_QWORD *)(v200 - 24);
      v115 = *((_QWORD *)v114 + 5);
      v116 = *((_DWORD *)v114 + 2);
      v117 = *((_DWORD *)v114 + 36);
      if (v117 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)&v201[-1] + *(_QWORD *)(v200 - 24)));
        v118 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
        v117 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v118->__vftable[2].~facet_0)(v118, 32);
        std::locale::~locale(&__b);
        *((_DWORD *)v114 + 36) = v117;
      }
      if ((v116 & 0xB0) == 0x20)
        v119 = "";
      else
        v119 = "\t\t";
      if (!v115)
        goto LABEL_238;
      v120 = *((_QWORD *)v114 + 3);
      v86 = v120 <= 2;
      v121 = v120 - 2;
      v122 = v86 ? 0 : v121;
      if (v119 - "\t\t" >= 1
        && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v115 + 96))(v115, "\t\t", v119 - "\t\t") != v119 - "\t\t")
      {
        goto LABEL_238;
      }
      if ((uint64_t)v122 >= 1)
      {
        if (v122 > 0x7FFFFFFFFFFFFFF7)
          abort();
        if (v122 >= 0x17)
        {
          v124 = (v122 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v122 | 7) != 0x17)
            v124 = v122 | 7;
          v125 = v124 + 1;
          v123 = (std::locale::__imp *)operator new(v124 + 1);
          v211 = v122;
          v212 = v125 | 0x8000000000000000;
          __b.__locale_ = v123;
        }
        else
        {
          HIBYTE(v212) = v122;
          v123 = (std::locale::__imp *)&__b;
        }
        memset(v123, v117, v122);
        *((_BYTE *)v123 + v122) = 0;
        if (v212 >= 0)
          v126 = &__b;
        else
          v126 = __b.__locale_;
        v127 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v115 + 96))(v115, v126, v122);
        v128 = v127;
        if (SHIBYTE(v212) < 0)
        {
          operator delete(__b.__locale_);
          if (v128 != v122)
            goto LABEL_238;
        }
        else if (v127 != v122)
        {
          goto LABEL_238;
        }
      }
      v129 = "\t\t" - v119 + 2;
      if (v129 < 1
        || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v115 + 96))(v115, v119, "\t\t" - v119 + 2) == v129)
      {
        *((_QWORD *)v114 + 3) = 0;
        goto LABEL_239;
      }
LABEL_238:
      std::ios_base::clear((std::ios_base *)((char *)&v201[-1] + *(_QWORD *)(v200 - 24)), *(_DWORD *)((char *)&v202[1] + *(_QWORD *)(v200 - 24)) | 5);
LABEL_239:
      MEMORY[0x1A1AF49EC](v209);
      v130 = (_QWORD *)std::ostream::operator<<();
      MEMORY[0x1A1AF49E0](v209, v130);
      if (!v209[0])
        goto LABEL_269;
      v131 = (char *)v130 + *(_QWORD *)(*v130 - 24);
      v132 = *((_QWORD *)v131 + 5);
      v133 = *((_DWORD *)v131 + 2);
      v134 = *((_DWORD *)v131 + 36);
      if (v134 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v130 + *(_QWORD *)(*v130 - 24)));
        v135 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
        v134 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v135->__vftable[2].~facet_0)(v135, 32);
        std::locale::~locale(&__b);
        *((_DWORD *)v131 + 36) = v134;
      }
      if ((v133 & 0xB0) == 0x20)
        v136 = "";
      else
        v136 = ": ";
      if (!v132)
        goto LABEL_268;
      v137 = *((_QWORD *)v131 + 3);
      v86 = v137 <= 2;
      v138 = v137 - 2;
      v139 = v86 ? 0 : v138;
      if (v136 - ": " >= 1
        && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v132 + 96))(v132, ": ", v136 - ": ") != v136 - ": ")
      {
        goto LABEL_268;
      }
      if ((uint64_t)v139 >= 1)
      {
        if (v139 > 0x7FFFFFFFFFFFFFF7)
          abort();
        if (v139 >= 0x17)
        {
          v141 = (v139 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v139 | 7) != 0x17)
            v141 = v139 | 7;
          v142 = v141 + 1;
          v140 = (std::locale::__imp *)operator new(v141 + 1);
          v211 = v139;
          v212 = v142 | 0x8000000000000000;
          __b.__locale_ = v140;
        }
        else
        {
          HIBYTE(v212) = v139;
          v140 = (std::locale::__imp *)&__b;
        }
        memset(v140, v134, v139);
        *((_BYTE *)v140 + v139) = 0;
        if (v212 >= 0)
          v143 = &__b;
        else
          v143 = __b.__locale_;
        v144 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v132 + 96))(v132, v143, v139);
        v145 = v144;
        if (SHIBYTE(v212) < 0)
        {
          operator delete(__b.__locale_);
          if (v145 != v139)
            goto LABEL_268;
        }
        else if (v144 != v139)
        {
          goto LABEL_268;
        }
      }
      v146 = ": " - v136 + 2;
      if (v146 < 1
        || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v132 + 96))(v132, v136, ": " - v136 + 2) == v146)
      {
        *((_QWORD *)v131 + 3) = 0;
        goto LABEL_269;
      }
LABEL_268:
      std::ios_base::clear((std::ios_base *)((char *)v130 + *(_QWORD *)(*v130 - 24)), *(_DWORD *)((char *)v130 + *(_QWORD *)(*v130 - 24) + 32) | 5);
LABEL_269:
      MEMORY[0x1A1AF49EC](v209);
      v147 = (_QWORD *)std::ostream::operator<<();
      MEMORY[0x1A1AF49E0](v209, v147);
      if (!v209[0])
        goto LABEL_299;
      v148 = (char *)v147 + *(_QWORD *)(*v147 - 24);
      v149 = *((_QWORD *)v148 + 5);
      v150 = *((_DWORD *)v148 + 2);
      v151 = *((_DWORD *)v148 + 36);
      if (v151 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v147 + *(_QWORD *)(*v147 - 24)));
        v152 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
        v151 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v152->__vftable[2].~facet_0)(v152, 32);
        std::locale::~locale(&__b);
        *((_DWORD *)v148 + 36) = v151;
      }
      if ((v150 & 0xB0) == 0x20)
        v153 = "";
      else
        v153 = " tri's ";
      if (!v149)
        goto LABEL_298;
      v154 = *((_QWORD *)v148 + 3);
      v86 = v154 <= 7;
      v155 = v154 - 7;
      v156 = v86 ? 0 : v155;
      if (v153 - " tri's " >= 1
        && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v149 + 96))(v149, " tri's ", v153 - " tri's ") != v153 - " tri's ")
      {
        goto LABEL_298;
      }
      if ((uint64_t)v156 >= 1)
      {
        if (v156 > 0x7FFFFFFFFFFFFFF7)
          abort();
        if (v156 >= 0x17)
        {
          v158 = (v156 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v156 | 7) != 0x17)
            v158 = v156 | 7;
          v159 = v158 + 1;
          v157 = (std::locale::__imp *)operator new(v158 + 1);
          v211 = v156;
          v212 = v159 | 0x8000000000000000;
          __b.__locale_ = v157;
        }
        else
        {
          HIBYTE(v212) = v156;
          v157 = (std::locale::__imp *)&__b;
        }
        memset(v157, v151, v156);
        *((_BYTE *)v157 + v156) = 0;
        if (v212 >= 0)
          v160 = &__b;
        else
          v160 = __b.__locale_;
        v161 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v149 + 96))(v149, v160, v156);
        v162 = v161;
        if (SHIBYTE(v212) < 0)
        {
          operator delete(__b.__locale_);
          if (v162 != v156)
            goto LABEL_298;
        }
        else if (v161 != v156)
        {
          goto LABEL_298;
        }
      }
      v163 = " tri's " - v153 + 7;
      if (v163 < 1
        || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v149 + 96))(v149, v153, " tri's " - v153 + 7) == v163)
      {
        *((_QWORD *)v148 + 3) = 0;
        goto LABEL_299;
      }
LABEL_298:
      std::ios_base::clear((std::ios_base *)((char *)v147 + *(_QWORD *)(*v147 - 24)), *(_DWORD *)((char *)v147 + *(_QWORD *)(*v147 - 24) + 32) | 5);
LABEL_299:
      MEMORY[0x1A1AF49EC](v209);
      v164 = (_QWORD *)std::ostream::operator<<();
      MEMORY[0x1A1AF49E0](v209, v164);
      if (v209[0])
      {
        v165 = (char *)v164 + *(_QWORD *)(*v164 - 24);
        v166 = *((_QWORD *)v165 + 5);
        v167 = *((_DWORD *)v165 + 2);
        v168 = *((_DWORD *)v165 + 36);
        if (v168 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v164 + *(_QWORD *)(*v164 - 24)));
          v169 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v168 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v169->__vftable[2].~facet_0)(v169, 32);
          std::locale::~locale(&__b);
          *((_DWORD *)v165 + 36) = v168;
        }
        if ((v167 & 0xB0) == 0x20)
          v170 = "";
        else
          v170 = " vertices\n";
        if (!v166)
          goto LABEL_127;
        v171 = *((_QWORD *)v165 + 3);
        v86 = v171 <= 10;
        v172 = v171 - 10;
        v173 = v86 ? 0 : v172;
        if (v170 - " vertices\n" >= 1
          && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v166 + 96))(v166, " vertices\n", v170 - " vertices\n") != v170 - " vertices\n")
        {
          goto LABEL_127;
        }
        if (v173 >= 1)
        {
          if ((unint64_t)v173 >= 0x17)
          {
            v175 = (v173 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v173 | 7) != 0x17)
              v175 = v173 | 7;
            v176 = v175 + 1;
            v174 = (std::locale::__imp *)operator new(v175 + 1);
            v211 = v173;
            v212 = v176 | 0x8000000000000000;
            __b.__locale_ = v174;
          }
          else
          {
            HIBYTE(v212) = v173;
            v174 = (std::locale::__imp *)&__b;
          }
          memset(v174, v168, v173);
          *((_BYTE *)v174 + v173) = 0;
          if (v212 >= 0)
            v177 = &__b;
          else
            v177 = __b.__locale_;
          v178 = (*(uint64_t (**)(uint64_t, void *, int64_t))(*(_QWORD *)v166 + 96))(v166, v177, v173);
          v179 = v178;
          if (SHIBYTE(v212) < 0)
          {
            operator delete(__b.__locale_);
            if (v179 != v173)
              goto LABEL_127;
          }
          else if (v178 != v173)
          {
            goto LABEL_127;
          }
        }
        v180 = " vertices\n" - v170 + 10;
        if (v180 >= 1
          && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v166 + 96))(v166, v170, " vertices\n" - v170 + 10) != v180)
        {
LABEL_127:
          std::ios_base::clear((std::ios_base *)((char *)v164 + *(_QWORD *)(*v164 - 24)), *(_DWORD *)((char *)v164 + *(_QWORD *)(*v164 - 24) + 32) | 5);
          goto LABEL_128;
        }
        *((_QWORD *)v165 + 3) = 0;
      }
LABEL_128:
      MEMORY[0x1A1AF49EC](v209);
      v71 += 80;
      v70 = v196;
    }
    v66 = (_QWORD *)*v194;
    if (*v194)
      continue;
    break;
  }
LABEL_328:
  if ((v207 & 0x10) != 0)
  {
    v183 = *((_QWORD *)&v206 + 1);
    if (*((_QWORD *)&v206 + 1) < v204)
    {
      *((_QWORD *)&v206 + 1) = v204;
      v183 = v204;
    }
    v184 = (const void **)&v203;
  }
  else
  {
    if ((v207 & 8) == 0)
    {
      v181 = 0;
      v182 = a3;
      *((_BYTE *)a3 + 23) = 0;
      goto LABEL_343;
    }
    v184 = (const void **)v202;
    v183 = v202[2];
  }
  v185 = *v184;
  v181 = v183 - (_QWORD)*v184;
  if (v181 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v181 >= 0x17)
  {
    v186 = (v181 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v181 | 7) != 0x17)
      v186 = v181 | 7;
    v187 = v186 + 1;
    v182 = operator new(v186 + 1);
    a3[1] = v181;
    a3[2] = v187 | 0x8000000000000000;
    *a3 = v182;
    goto LABEL_342;
  }
  v182 = a3;
  *((_BYTE *)a3 + 23) = v181;
  if (v181)
  {
LABEL_342:
    v188 = v185;
    v189 = v182;
    memmove(v182, v188, v181);
    v182 = v189;
  }
LABEL_343:
  *((_BYTE *)v182 + v181) = 0;
  v190 = v198[0];
  if (v198[0])
  {
    do
    {
      v191 = (_QWORD *)*v190;
      operator delete(v190);
      v190 = v191;
    }
    while (v191);
  }
  if (__p[0])
    operator delete(__p[0]);
  v200 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v201[-1] + *(_QWORD *)(v200 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v201[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v206) < 0)
    operator delete(v205[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v208);
}

void sub_19F8ACDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](a12);
  _Unwind_Resume(a1);
}

void sub_19F8ACDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  std::ostringstream::~ostringstream((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_0,std::allocator<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "IdentifiedResourceLogicVariableRate", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_3::operator()(_QWORD *a1, unint64_t a2)
{
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  gdc::LayerDataCollector *v15;
  void *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char v20[32];
  unint64_t v21;
  unint64_t v22;
  char v23[8];
  void *v24;
  void *v25;
  char v26;
  QuadTile v27;

  v3 = (int8x8_t)a1[20];
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = a2;
      if (*(_QWORD *)&v3 <= a2)
        v5 = a2 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & a2;
    }
    v6 = *(_QWORD **)(a1[19] + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == a2)
            {
              if (v7[2] == a2)
                return;
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == a2)
          {
            if (v7[2] == a2)
              return;
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v16 = v20;
  v17 = v20;
  v18 = v20;
  v19 = 32;
  v21 = 0;
  v22 = a2;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v16, v20, (char *)&v22, v23);
  v22 = 0;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v16, v17, (char *)&v22, v23);
  v11 = (unsigned __int8 *)v16;
  v12 = v17 - (_BYTE *)v16;
  if (v17 == v16)
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    if (v12 <= 1)
      v12 = 1;
    do
    {
      v14 = *v11++;
      v13 ^= (v13 << 6) + (v13 >> 2) - 0x61C8864680B583EBLL + v14;
      --v12;
    }
    while (v12);
  }
  v21 = v13;
  gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v22, 0, 0x37u, (uint64_t)&v16, -1073741827);
  if (v16 != v18)
    free(v16);
  v15 = (gdc::LayerDataCollector *)a1[15];
  *(_WORD *)&v27._type = 255;
  *(_QWORD *)&v27._yIdx = 0;
  gdc::LayerDataCollector::addDataKey(v15, (const gdc::LayerDataRequestKey *)&v22, &v27);
  if (v26)
    v26 = 0;
  if (v24 != v25)
    free(v24);
}

void md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_2::operator()(uint64_t a1, _QWORD *a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  gdc::LayerDataCollector *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int8x8_t v23;
  uint8x8_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  gdc::LayerDataCollector *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char v42[32];
  unint64_t v43;
  void *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char v48[32];
  unint64_t v49;
  unint64_t v50;
  char v51[8];
  void *v52;
  void *v53;
  char v54;
  QuadTile v55;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (a2)
  {
    v8 = (_QWORD *)a2[140];
    v9 = a2 + 141;
    if (v8 != a2 + 141)
    {
      do
      {
        v10 = v8[4];
        v44 = v48;
        v45 = v48;
        v46 = v48;
        v47 = 32;
        v49 = 0;
        v50 = v10;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v44, v48, (char *)&v50, v51);
        v50 = 0;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v44, v45, (char *)&v50, v51);
        v11 = (unsigned __int8 *)v44;
        v12 = v45 - (_BYTE *)v44;
        if (v45 == v44)
        {
          v13 = 0;
        }
        else
        {
          v13 = 0;
          if (v12 <= 1)
            v12 = 1;
          do
          {
            v14 = *v11++;
            v13 ^= (v13 << 6) - 0x61C8864680B583EBLL + (v13 >> 2) + v14;
            --v12;
          }
          while (v12);
        }
        v49 = v13;
        gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v50, 0, 0x38u, (uint64_t)&v44, -1073741827);
        if (v44 != v46)
          free(v44);
        v15 = *(gdc::LayerDataCollector **)(a1 + 128);
        *(_WORD *)&v55._type = 255;
        *(_QWORD *)&v55._yIdx = 0;
        gdc::LayerDataCollector::addDataKey(v15, (const gdc::LayerDataRequestKey *)&v50, &v55);
        if (v54)
          v54 = 0;
        if (v52 != v53)
          free(v52);
        v16 = (_QWORD *)v8[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v8[2];
            v18 = *v17 == (_QWORD)v8;
            v8 = v17;
          }
          while (!v18);
        }
        v8 = v17;
      }
      while (v17 != v9);
    }
    if (!*(_BYTE *)(a1 + 192))
    {
      v21 = (_QWORD *)a2[143];
      if (v21 != a2 + 144)
      {
        do
        {
          v22 = v21[4];
          v23 = *(int8x8_t *)(a1 + 160);
          if (v23)
          {
            v24 = (uint8x8_t)vcnt_s8(v23);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              v25 = v21[4];
              if (v22 >= *(_QWORD *)&v23)
                v25 = v22 % *(_QWORD *)&v23;
            }
            else
            {
              v25 = (*(_QWORD *)&v23 - 1) & v22;
            }
            v26 = *(_QWORD **)(*(_QWORD *)(a1 + 152) + 8 * v25);
            if (v26)
            {
              v27 = (_QWORD *)*v26;
              if (v27)
              {
                if (v24.u32[0] < 2uLL)
                {
                  v28 = *(_QWORD *)&v23 - 1;
                  while (1)
                  {
                    v30 = v27[1];
                    if (v22 == v30)
                    {
                      if (v27[2] == v22)
                        goto LABEL_69;
                    }
                    else if ((v30 & v28) != v25)
                    {
                      goto LABEL_56;
                    }
                    v27 = (_QWORD *)*v27;
                    if (!v27)
                      goto LABEL_56;
                  }
                }
                do
                {
                  v29 = v27[1];
                  if (v22 == v29)
                  {
                    if (v27[2] == v22)
                      goto LABEL_69;
                  }
                  else
                  {
                    if (v29 >= *(_QWORD *)&v23)
                      v29 %= *(_QWORD *)&v23;
                    if (v29 != v25)
                      break;
                  }
                  v27 = (_QWORD *)*v27;
                }
                while (v27);
              }
            }
          }
LABEL_56:
          if ((*(_BYTE *)(a1 + 216) & (_BYTE)v21[5]) != 0)
          {
            v38 = v42;
            v39 = v42;
            v40 = v42;
            v41 = 32;
            v43 = 0;
            v50 = v22;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v38, v42, (char *)&v50, v51);
            v50 = 0;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v38, v39, (char *)&v50, v51);
            v31 = (unsigned __int8 *)v38;
            v32 = v39 - (_BYTE *)v38;
            if (v39 == v38)
            {
              v33 = 0;
            }
            else
            {
              v33 = 0;
              if (v32 <= 1)
                v32 = 1;
              do
              {
                v34 = *v31++;
                v33 ^= (v33 << 6) - 0x61C8864680B583EBLL + (v33 >> 2) + v34;
                --v32;
              }
              while (v32);
            }
            v43 = v33;
            gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v50, 0, 0x37u, (uint64_t)&v38, -1073741827);
            if (v38 != v40)
              free(v38);
            v35 = *(gdc::LayerDataCollector **)(a1 + 120);
            *(_WORD *)&v55._type = 255;
            *(_QWORD *)&v55._yIdx = 0;
            gdc::LayerDataCollector::addDataKey(v35, (const gdc::LayerDataRequestKey *)&v50, &v55);
            if (v54)
              v54 = 0;
            if (v52 != v53)
              free(v52);
          }
LABEL_69:
          v36 = (_QWORD *)v21[1];
          if (v36)
          {
            do
            {
              v37 = v36;
              v36 = (_QWORD *)*v36;
            }
            while (v36);
          }
          else
          {
            do
            {
              v37 = (_QWORD *)v21[2];
              v18 = *v37 == (_QWORD)v21;
              v21 = v37;
            }
            while (!v18);
          }
          v21 = v37;
        }
        while (v37 != a2 + 144);
      }
    }
  }
  if (a3)
  {
    v19 = (unint64_t *)&a3->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void std::__function::__func<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_1,std::allocator<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_1,std::allocator<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1A68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_1,std::allocator<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1A68;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_0,std::allocator<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_0,std::allocator<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1A20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_0,std::allocator<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1A20;
  a2[1] = v2;
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::resolveDependencies(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    goto LABEL_117;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x99BED48DEFBBD82BLL;
    if (a3 <= 0x99BED48DEFBBD82BLL)
      v4 = 0x99BED48DEFBBD82BLL % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v9 = *(_QWORD **)(a2 + 8 * v4);
  if (!v9)
    goto LABEL_25;
  v10 = (_QWORD *)*v9;
  if (!v10)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v12 = v10[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v10[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_23;
      }
      else if ((v12 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v11 = v10[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= a3)
      v11 %= a3;
    if (v11 != v4)
      goto LABEL_25;
LABEL_12:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_25;
  }
  if (v10[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_12;
LABEL_23:
  v13 = v10[5];
  if (*(_QWORD *)(v13 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v8 = *(_QWORD *)(v13 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v8 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v14 = 0x7851AF310F49C988;
    if (a3 <= 0x7851AF310F49C988)
      v14 = 0x7851AF310F49C988 % a3;
  }
  else
  {
    v14 = (a3 - 1) & 0x7851AF310F49C988;
  }
  v15 = *(_QWORD **)(a2 + 8 * v14);
  if (!v15)
    goto LABEL_48;
  v16 = (_QWORD *)*v15;
  if (!v16)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v18 = v16[1];
      if (v18 == 0x7851AF310F49C988)
      {
        if (v16[2] == 0x7851AF310F49C988)
          goto LABEL_46;
      }
      else if ((v18 & (a3 - 1)) != v14)
      {
        goto LABEL_48;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v17 = v16[1];
    if (v17 != 0x7851AF310F49C988)
    {
      if (v17 >= a3)
        v17 %= a3;
      if (v17 != v14)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v16[2] != 0x7851AF310F49C988)
    {
LABEL_35:
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v19 = v16[5];
  if (*(_QWORD *)(v19 + 8) == 0x7851AF310F49C988)
  {
    v7 = *(_QWORD *)(v19 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v7 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v20 = 0xFBD83FDA8879FF7ELL;
    if (a3 <= 0xFBD83FDA8879FF7ELL)
      v20 = 0xFBD83FDA8879FF7ELL % a3;
  }
  else
  {
    v20 = (a3 - 1) & 0xFBD83FDA8879FF7ELL;
  }
  v21 = *(_QWORD **)(a2 + 8 * v20);
  if (!v21)
    goto LABEL_71;
  v22 = (_QWORD *)*v21;
  if (!v22)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v24 = v22[1];
      if (v24 == 0xFBD83FDA8879FF7ELL)
      {
        if (v22[2] == 0xFBD83FDA8879FF7ELL)
          goto LABEL_69;
      }
      else if ((v24 & (a3 - 1)) != v20)
      {
        goto LABEL_71;
      }
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v23 = v22[1];
    if (v23 != 0xFBD83FDA8879FF7ELL)
    {
      if (v23 >= a3)
        v23 %= a3;
      if (v23 != v20)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v22[2] != 0xFBD83FDA8879FF7ELL)
    {
LABEL_58:
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v25 = v22[5];
  if (*(_QWORD *)(v25 + 8) == 0xFBD83FDA8879FF7ELL)
  {
    v6 = *(_QWORD *)(v25 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v6 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    v26 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL)
      v26 = 0x8BD499FBD96FBB9ELL % a3;
  }
  else
  {
    v26 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v27 = *(_QWORD **)(a2 + 8 * v26);
  if (!v27)
    goto LABEL_94;
  v28 = (_QWORD *)*v27;
  if (!v28)
    goto LABEL_94;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v30 = v28[1];
      if (v30 == 0x8BD499FBD96FBB9ELL)
      {
        if (v28[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_92;
      }
      else if ((v30 & (a3 - 1)) != v26)
      {
        goto LABEL_94;
      }
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_94;
    }
  }
  while (2)
  {
    v29 = v28[1];
    if (v29 != 0x8BD499FBD96FBB9ELL)
    {
      if (v29 >= a3)
        v29 %= a3;
      if (v29 != v26)
        goto LABEL_94;
      goto LABEL_81;
    }
    if (v28[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_81:
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_94;
      continue;
    }
    break;
  }
LABEL_92:
  v31 = v28[5];
  if (*(_QWORD *)(v31 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v5 = *(_QWORD *)(v31 + 32);
    goto LABEL_95;
  }
LABEL_94:
  v5 = 0;
LABEL_95:
  if (v3.u32[0] > 1uLL)
  {
    v32 = 0xD77FB76AFC10A710;
    if (a3 <= 0xD77FB76AFC10A710)
      v32 = 0xD77FB76AFC10A710 % a3;
  }
  else
  {
    v32 = (a3 - 1) & 0xD77FB76AFC10A710;
  }
  v33 = *(_QWORD **)(a2 + 8 * v32);
  if (!v33)
    goto LABEL_117;
  v34 = (_QWORD *)*v33;
  if (!v34)
    goto LABEL_117;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v36 = v34[1];
      if (v36 == 0xD77FB76AFC10A710)
      {
        if (v34[2] == 0xD77FB76AFC10A710)
          goto LABEL_115;
      }
      else if ((v36 & (a3 - 1)) != v32)
      {
        goto LABEL_117;
      }
      v34 = (_QWORD *)*v34;
      if (!v34)
        goto LABEL_117;
    }
  }
  while (1)
  {
    v35 = v34[1];
    if (v35 == 0xD77FB76AFC10A710)
      break;
    if (v35 >= a3)
      v35 %= a3;
    if (v35 != v32)
      goto LABEL_117;
LABEL_104:
    v34 = (_QWORD *)*v34;
    if (!v34)
      goto LABEL_117;
  }
  if (v34[2] != 0xD77FB76AFC10A710)
    goto LABEL_104;
LABEL_115:
  v37 = v34[5];
  if (*(_QWORD *)(v37 + 8) != 0xD77FB76AFC10A710)
  {
LABEL_117:
    v38 = 0;
    goto LABEL_118;
  }
  v38 = *(_QWORD *)(v37 + 32);
LABEL_118:
  *result = v8;
  result[1] = v7;
  result[2] = v6;
  result[3] = v5;
  result[4] = v38;
  return result;
}

void md::IdentifiedResourceContext::~IdentifiedResourceContext(md::IdentifiedResourceContext *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;

  v2 = (_QWORD *)*((_QWORD *)this + 30);
  while (v2)
  {
    v17 = v2;
    v2 = (_QWORD *)*v2;
    v18 = (std::__shared_weak_count *)v17[4];
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    operator delete(v17);
  }
  v3 = (void *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
    operator delete(v3);
  v4 = (_QWORD *)*((_QWORD *)this + 25);
  while (v4)
  {
    v21 = v4;
    v4 = (_QWORD *)*v4;
    v22 = (std::__shared_weak_count *)v21[4];
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    operator delete(v21);
  }
  v5 = (void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v5)
    operator delete(v5);
  v6 = (void *)*((_QWORD *)this + 20);
  if (v6)
  {
    *((_QWORD *)this + 21) = v6;
    operator delete(v6);
  }
  v7 = (_QWORD *)*((_QWORD *)this + 17);
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v9)
    operator delete(v9);
  v10 = (_QWORD *)*((_QWORD *)this + 12);
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v12)
    operator delete(v12);
  v13 = (_QWORD *)*((_QWORD *)this + 7);
  while (v13)
  {
    v25 = v13;
    v13 = (_QWORD *)*v13;
    v26 = (std::__shared_weak_count *)v25[4];
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    operator delete(v25);
  }
  v14 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v14)
    operator delete(v14);
  v15 = (_QWORD *)*((_QWORD *)this + 2);
  while (v15)
  {
    v29 = v15;
    v15 = (_QWORD *)*v15;
    v30 = (std::__shared_weak_count *)v29[4];
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    operator delete(v29);
  }
  v16 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v16)
    operator delete(v16);
}

_QWORD *gdc::ManagedObjectHolder<md::IdentifiedResourceContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::IdentifiedResourceContext *v2;

  *a1 = &off_1E42B12C0;
  v2 = (md::IdentifiedResourceContext *)a1[4];
  if (v2)
  {
    md::IdentifiedResourceContext::~IdentifiedResourceContext(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::IdentifiedResourceContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::IdentifiedResourceContext *v1;

  *a1 = &off_1E42B12C0;
  v1 = (md::IdentifiedResourceContext *)a1[4];
  if (v1)
  {
    md::IdentifiedResourceContext::~IdentifiedResourceContext(v1);
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::IdentifiedResourceContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void sub_19F8ADF5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 152);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 136);
  std::unique_ptr<gdc::LayerDataCollector>::~unique_ptr[abi:nn180100]((gdc::LayerDataCollector **)(v1 + 128));
  std::unique_ptr<gdc::LayerDataCollector>::~unique_ptr[abi:nn180100]((gdc::LayerDataCollector **)(v1 + 120));
  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

void ___ZN2md23IdentifiedResourceLogicC2ERKNSt3__110shared_ptrINS_15RegistryManagerEEEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke(uint64_t a1)
{
  id v1;

  md::IdentifiedResourceLogic::IdentifiedResourceLogic(std::shared_ptr<md::RegistryManager> const&,NSObject  {objcproto17OS_dispatch_queue}*)::$_0::operator()(*(_QWORD **)(a1 + 32));
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "postNotificationName:object:", CFSTR("VKShouldFlushTileCachesNotification"), 0);

}

void sub_19F8ADFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN2md23IdentifiedResourceLogicC2ERKNSt3__110shared_ptrINS_15RegistryManagerEEEPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 192) = GEOConfigGetBOOL();
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("VKShouldFlushTileCachesNotification"), 0);

}

void sub_19F8AE064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v5;
  v13[2] = a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v24)
  {
    *v13 = *v24;
LABEL_58:
    *v24 = v13;
    goto LABEL_59;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v23 + 8 * v5) = a1 + 16;
  if (*v13)
  {
    v25 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F8AE334(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::Logic<md::IdentifiedResourceLogic,md::IdentifiedResourceContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void md::BuildingRenderLayer::layout(md::BuildingRenderLayer *this, const md::LayoutContext *a2)
{
  const md::LayoutContext *v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int8x8_t v10;
  uint8x8_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int8x8_t *v26;
  int v27;
  int v28;
  int v29;
  std::__shared_weak_count *shared_owners;
  unsigned __int8 v31;
  std::__shared_weak_count_vtbl *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  float v35;
  int v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int8x8_t *v67;
  int8x8_t v68;
  uint8x8_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unsigned __int8 *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unsigned __int8 *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  float v105;
  float *v106;
  float v107;
  float v108;
  float v109;
  float v110;
  uint64_t **v111;
  _QWORD *v112;
  int8x8_t v113;
  uint8x8_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  unint64_t v119;
  unsigned int v120;
  char *v121;
  _QWORD *v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  _QWORD *v144;
  int8x8_t v145;
  uint8x8_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unsigned __int8 *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t i;
  uint8x8_t v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  float v168;
  uint8x8_t v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  uint64_t *v179;
  float v180;
  float v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  float v187;
  unsigned int v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  float v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  uint64_t (***v205)();
  uint64_t v206;
  uint64_t (***v207)();
  uint64_t v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  double v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  std::__shared_weak_count *v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  float32x2_t v244;
  float v245;
  float v246;
  uint64_t v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  unint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t *v286;
  __int128 *v287;
  uint64_t v288;
  __int128 v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t *v294;
  __int128 *v295;
  uint64_t v296;
  __int128 v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  double v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  uint64_t v308;
  _QWORD *v309;
  _QWORD *v310;
  unint64_t *v311;
  unint64_t v312;
  _QWORD *v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  float v319;
  float v320;
  _QWORD *v321;
  unint64_t v322;
  float32x2_t *v323;
  uint64_t v324;
  ggl::RenderItem *v325;
  uint64_t v326;
  unint64_t *v327;
  unint64_t v328;
  unint64_t *v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t *v332;
  unint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t *v336;
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t *v340;
  unint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  uint64_t v344;
  uint64_t **v345;
  uint64_t **v346;
  const md::LayoutContext *v347;
  const md::LayoutContext *v348;
  uint64_t v349;
  uint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  uint64_t *v353;
  std::__shared_weak_count *v354;
  uint64_t v355;
  uint64_t v356;
  std::__shared_weak_count *v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t v360;
  md::BuildingRenderLayer *v361;
  float32x2_t v362;
  int v363;
  uint64_t v364[2];
  _QWORD v365[3];
  _QWORD *v366;
  _QWORD v367[3];
  _QWORD *v368;
  _QWORD v369[3];
  _QWORD *v370;
  _BYTE v371[24];
  _BYTE *v372;
  _BYTE v373[24];
  _BYTE *v374;
  _QWORD v375[3];
  _QWORD *v376;
  _QWORD v377[3];
  _QWORD *v378;
  _QWORD v379[3];
  char *v380;
  _QWORD v381[3];
  char *v382;
  uint64_t (**v383)();
  std::__shared_weak_count *v384;
  uint64_t (***v385)();
  uint64_t v386;

  v2 = a2;
  v386 = *MEMORY[0x1E0C80C00];
  v367[0] = &off_1E42CFAA0;
  v367[1] = a2;
  v368 = v367;
  v365[0] = &off_1E42CFAE8;
  v365[1] = a2;
  v366 = v365;
  v370 = v369;
  v369[0] = &off_1E42CFAE8;
  v369[1] = a2;
  std::__function::__func<md::BuildingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::BuildingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v367);
  v4 = v366;
  if (v366 == v365)
  {
    v5 = 4;
    v4 = v365;
  }
  else
  {
    if (!v366)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v368;
  if (v368 == v367)
  {
    v7 = 4;
    v6 = v367;
    goto LABEL_10;
  }
  if (v368)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = *((_QWORD *)this + 44);
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 120) = 0;
  v9 = (uint64_t *)*((_QWORD *)v2 + 1);
  v10 = (int8x8_t)v9[1];
  if (!*(_QWORD *)&v10)
  {
    v13 = 0;
    goto LABEL_59;
  }
  v11 = (uint8x8_t)vcnt_s8(v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v10 <= 0x1AF456233693CD46uLL)
      v12 = 0x1AF456233693CD46uLL % *(_QWORD *)&v10;
  }
  else
  {
    v12 = (*(_QWORD *)&v10 - 1) & 0x1AF456233693CD46;
  }
  v14 = *v9;
  v15 = *(_QWORD **)(v14 + 8 * v12);
  if (!v15)
    goto LABEL_35;
  v16 = (_QWORD *)*v15;
  if (!v16)
    goto LABEL_35;
  if (v11.u32[0] < 2uLL)
  {
    while (1)
    {
      v18 = v16[1];
      if (v18 == 0x1AF456233693CD46)
      {
        if (v16[2] == 0x1AF456233693CD46)
          goto LABEL_33;
      }
      else if ((v18 & (*(_QWORD *)&v10 - 1)) != v12)
      {
        goto LABEL_35;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_35;
    }
  }
  while (1)
  {
    v17 = v16[1];
    if (v17 == 0x1AF456233693CD46)
      break;
    if (v17 >= *(_QWORD *)&v10)
      v17 %= *(_QWORD *)&v10;
    if (v17 != v12)
      goto LABEL_35;
LABEL_22:
    v16 = (_QWORD *)*v16;
    if (!v16)
      goto LABEL_35;
  }
  if (v16[2] != 0x1AF456233693CD46)
    goto LABEL_22;
LABEL_33:
  v19 = v16[5];
  if (*(_QWORD *)(v19 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(_QWORD *)(v19 + 32);
    goto LABEL_36;
  }
LABEL_35:
  v13 = 0;
LABEL_36:
  if (v11.u32[0] > 1uLL)
  {
    v20 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v10 <= 0xE42D19AFCA302E68)
      v20 = 0xE42D19AFCA302E68 % *(_QWORD *)&v10;
  }
  else
  {
    v20 = (*(_QWORD *)&v10 - 1) & 0xE42D19AFCA302E68;
  }
  v21 = *(_QWORD **)(v14 + 8 * v20);
  if (!v21)
    goto LABEL_58;
  v22 = (_QWORD *)*v21;
  if (!v22)
    goto LABEL_58;
  if (v11.u32[0] < 2uLL)
  {
    v23 = *(_QWORD *)&v10 - 1;
    while (1)
    {
      v25 = v22[1];
      if (v25 == 0xE42D19AFCA302E68)
      {
        if (v22[2] == 0xE42D19AFCA302E68)
          goto LABEL_56;
      }
      else if ((v25 & v23) != v20)
      {
        goto LABEL_58;
      }
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_58;
    }
  }
  while (2)
  {
    v24 = v22[1];
    if (v24 != 0xE42D19AFCA302E68)
    {
      if (v24 >= *(_QWORD *)&v10)
        v24 %= *(_QWORD *)&v10;
      if (v24 != v20)
        goto LABEL_58;
      goto LABEL_45;
    }
    if (v22[2] != 0xE42D19AFCA302E68)
    {
LABEL_45:
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_58;
      continue;
    }
    break;
  }
LABEL_56:
  v26 = (int8x8_t *)v22[5];
  if (*(_QWORD *)&v26[1] == 0xE42D19AFCA302E68)
  {
    v10 = v26[4];
    goto LABEL_59;
  }
LABEL_58:
  v10 = 0;
LABEL_59:
  v27 = *((unsigned __int8 *)this + 408);
  if (*(_BYTE *)(*((_QWORD *)this + 49) + 771))
  {
    v28 = *(unsigned __int8 *)(*((_QWORD *)this + 47) + 16);
    v29 = *(unsigned __int8 *)(*(_QWORD *)&v10 + 84);
    shared_owners = *(std::__shared_weak_count **)(**(_QWORD **)&v10 + 16);
    if (shared_owners)
    {
      v31 = atomic_load((unsigned __int8 *)&shared_owners[116]);
      if ((v31 & 1) == 0)
        std::__assoc_sub_state::wait((std::__assoc_sub_state *)shared_owners[117].__vftable);
      v32 = shared_owners[5].__vftable;
      shared_owners = (std::__shared_weak_count *)shared_owners[5].__shared_owners_;
      v383 = (uint64_t (**)())v32;
      v384 = shared_owners;
      if (shared_owners)
      {
        p_shared_owners = (unint64_t *)&shared_owners->__shared_owners_;
        do
          v34 = __ldxr(p_shared_owners);
        while (__stxr(v34 + 1, p_shared_owners));
      }
      if (v32)
        LODWORD(v32) = LOBYTE(v32[7].__on_zero_shared) != 0;
      if (v29 == 3)
      {
LABEL_83:
        if (v28 != 1)
          md::BuildingRenderLayer::setBuildingMode((uint64_t)this, 1, v27 != 0);
        goto LABEL_86;
      }
    }
    else
    {
      LODWORD(v32) = 0;
      v383 = 0;
      v384 = 0;
      if (v29 == 3)
        goto LABEL_83;
    }
    if ((_DWORD)v32)
      goto LABEL_83;
    v35 = *(double *)(v13 + 40);
    if (v35 <= 0.0 || v28 == 1)
    {
      if (v35 != 0.0 || v28 == 0)
        goto LABEL_86;
      v38 = 0;
    }
    else
    {
      v38 = 1;
    }
    md::BuildingRenderLayer::setBuildingMode((uint64_t)this, v38, v27 != 0);
LABEL_86:
    if (shared_owners)
    {
      v39 = (unint64_t *)&shared_owners->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
        std::__shared_weak_count::__release_weak(shared_owners);
      }
    }
  }
  else
  {
    md::BuildingRenderLayer::setBuildingMode((uint64_t)this, 0, v27 != 0);
  }
  md::BuildingRenderResources::resetPools(*((md::BuildingRenderResources **)this + 49));
  md::LandmarkRenderResources::resetPools(*((uint64_t ***)this + 50));
  v41 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8);
  v42 = v41[3];
  v43 = v41[4];
  v361 = this;
  if (v43 == v42)
  {
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v49 = 0;
    v349 = 0;
LABEL_108:
    v61 = 0;
LABEL_109:
    v62 = 0;
    goto LABEL_110;
  }
  v44 = 0;
  while (1)
  {
    v45 = *(unsigned __int8 **)(v42 + 8 * v44);
    if (*v45 == *((unsigned __int8 *)this + 472))
    {
      v46 = *((_QWORD *)v45 + 1);
      v47 = v41[15];
      if (v46 < (v41[16] - v47) >> 3)
        break;
    }
    if (++v44 >= (unint64_t)((v43 - v42) >> 3))
      goto LABEL_99;
  }
  v48 = *(_QWORD *)(v47 + 8 * v46);
  if (!v48)
  {
LABEL_99:
    v49 = 0;
    v50 = v43 - v42;
    if (v43 != v42)
      goto LABEL_100;
LABEL_98:
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v349 = 0;
    goto LABEL_108;
  }
  v49 = *(_QWORD *)(*(_QWORD *)(v48 + 24) + 8 * *((unsigned __int8 *)this + 473));
  v50 = v43 - v42;
  if (v43 == v42)
    goto LABEL_98;
LABEL_100:
  v54 = 0;
  v55 = v50 >> 3;
  while (1)
  {
    v56 = *(unsigned __int8 **)(v42 + 8 * v54);
    if (*v56 == *((unsigned __int8 *)this + 474))
    {
      v57 = *((_QWORD *)v56 + 1);
      v58 = v41[15];
      if (v57 < (v41[16] - v58) >> 3)
        break;
    }
    if (++v54 >= v55)
      goto LABEL_139;
  }
  v59 = *(_QWORD *)(v58 + 8 * v57);
  if (!v59)
  {
LABEL_139:
    v53 = 0;
    v60 = v43 - v42;
    if (v43 != v42)
      goto LABEL_140;
LABEL_106:
    v51 = 0;
    v52 = 0;
    v349 = 0;
    goto LABEL_108;
  }
  v53 = *(_QWORD *)(*(_QWORD *)(v59 + 24) + 8 * *((unsigned __int8 *)this + 475));
  v60 = v43 - v42;
  if (v43 == v42)
    goto LABEL_106;
LABEL_140:
  v76 = 0;
  v77 = v60 >> 3;
  while (1)
  {
    v78 = *(unsigned __int8 **)(v42 + 8 * v76);
    if (*v78 == *((unsigned __int8 *)this + 476))
    {
      v79 = *((_QWORD *)v78 + 1);
      v80 = v41[15];
      if (v79 < (v41[16] - v80) >> 3)
        break;
    }
    if (++v76 >= v77)
      goto LABEL_146;
  }
  v81 = *(_QWORD *)(v80 + 8 * v79);
  if (v81)
  {
    v82 = *(_QWORD *)(*(_QWORD *)(v81 + 24) + 8 * *((unsigned __int8 *)this + 477));
    goto LABEL_147;
  }
LABEL_146:
  v82 = 0;
LABEL_147:
  v349 = v82;
  if (v43 == v42)
  {
    v51 = 0;
    v52 = 0;
    goto LABEL_108;
  }
  v83 = 0;
  while (1)
  {
    v84 = *(unsigned __int8 **)(v42 + 8 * v83);
    if (*v84 == *((unsigned __int8 *)this + 478))
    {
      v85 = *((_QWORD *)v84 + 1);
      v86 = v41[15];
      if (v85 < (v41[16] - v86) >> 3)
        break;
    }
    if (++v83 >= (unint64_t)((v43 - v42) >> 3))
      goto LABEL_155;
  }
  v87 = *(_QWORD *)(v86 + 8 * v85);
  if (!v87)
  {
LABEL_155:
    v52 = 0;
    v88 = v43 - v42;
    if (v43 != v42)
      goto LABEL_156;
LABEL_154:
    v51 = 0;
    goto LABEL_108;
  }
  v52 = *(_QWORD **)(*(_QWORD *)(v87 + 24) + 8 * *((unsigned __int8 *)this + 479));
  v88 = v43 - v42;
  if (v43 == v42)
    goto LABEL_154;
LABEL_156:
  v89 = 0;
  v90 = v88 >> 3;
  while (1)
  {
    v91 = *(unsigned __int8 **)(v42 + 8 * v89);
    if (*v91 == *((unsigned __int8 *)this + 480))
    {
      v92 = *((_QWORD *)v91 + 1);
      v93 = v41[15];
      if (v92 < (v41[16] - v93) >> 3)
        break;
    }
    if (++v89 >= v90)
      goto LABEL_164;
  }
  v94 = *(_QWORD *)(v93 + 8 * v92);
  if (v94)
  {
    v61 = *(_QWORD **)(*(_QWORD *)(v94 + 24) + 8 * *((unsigned __int8 *)this + 481));
    v95 = v43 - v42;
    if (v43 == v42)
    {
LABEL_162:
      v51 = 0;
      goto LABEL_109;
    }
  }
  else
  {
LABEL_164:
    v61 = 0;
    v95 = v43 - v42;
    if (v43 == v42)
      goto LABEL_162;
  }
  v96 = 0;
  v97 = v95 >> 3;
  while (1)
  {
    v98 = *(unsigned __int8 **)(v42 + 8 * v96);
    if (*v98 == *((unsigned __int8 *)this + 482))
    {
      v99 = *((_QWORD *)v98 + 1);
      v100 = v41[15];
      if (v99 < (v41[16] - v100) >> 3)
        break;
    }
    if (++v96 >= v97)
      goto LABEL_247;
  }
  v101 = *(_QWORD *)(v100 + 8 * v99);
  if (v101)
  {
    v51 = *(_QWORD **)(*(_QWORD *)(v101 + 24) + 8 * *((unsigned __int8 *)this + 483));
    v102 = v43 - v42;
    if (v43 == v42)
      goto LABEL_109;
    goto LABEL_248;
  }
LABEL_247:
  v51 = 0;
  v102 = v43 - v42;
  if (v43 == v42)
    goto LABEL_109;
LABEL_248:
  v148 = 0;
  v149 = v102 >> 3;
  while (1)
  {
    v150 = *(unsigned __int8 **)(v42 + 8 * v148);
    if (*v150 == *((unsigned __int8 *)this + 484))
    {
      v151 = *((_QWORD *)v150 + 1);
      v152 = v41[15];
      if (v151 < (v41[16] - v152) >> 3)
        break;
    }
    if (++v148 >= v149)
      goto LABEL_109;
  }
  v153 = *(_QWORD *)(v152 + 8 * v151);
  if (!v153)
    goto LABEL_109;
  v62 = *(_QWORD **)(*(_QWORD *)(v153 + 24) + 8 * *((unsigned __int8 *)this + 485));
LABEL_110:
  v63 = v52[9];
  if (v52[10] != v63)
    v52[10] = v63;
  v52[4] = *(_QWORD *)(*((_QWORD *)this + 49) + 760);
  v64 = v61[9];
  if (v61[10] != v64)
    v61[10] = v64;
  v61[4] = *(_QWORD *)(*((_QWORD *)this + 49) + 760);
  v65 = v51[9];
  if (v51[10] != v65)
    v51[10] = v65;
  v51[4] = *(_QWORD *)(*((_QWORD *)this + 49) + 760);
  v66 = v62[9];
  if (v62[10] != v66)
    v62[10] = v66;
  v62[4] = *(_QWORD *)(*((_QWORD *)this + 49) + 760);
  v67 = (int8x8_t *)*((_QWORD *)v2 + 1);
  v68 = v67[1];
  v350 = (uint64_t)v61;
  v351 = v52;
  v352 = (uint64_t)v51;
  if (!*(_QWORD *)&v68)
    goto LABEL_182;
  v69 = (uint8x8_t)vcnt_s8(v68);
  v69.i16[0] = vaddlv_u8(v69);
  if (v69.u32[0] > 1uLL)
  {
    v70 = 0x4927EB92E562CC46;
    if (*(_QWORD *)&v68 <= 0x4927EB92E562CC46uLL)
      v70 = 0x4927EB92E562CC46uLL % *(_QWORD *)&v68;
  }
  else
  {
    v70 = (*(_QWORD *)&v68 - 1) & 0x4927EB92E562CC46;
  }
  v71 = *(_QWORD **)(*(_QWORD *)v67 + 8 * v70);
  if (!v71)
    goto LABEL_182;
  v72 = (_QWORD *)*v71;
  if (!v72)
    goto LABEL_182;
  if (v69.u32[0] < 2uLL)
  {
    v73 = *(_QWORD *)&v68 - 1;
    while (1)
    {
      v75 = v72[1];
      if (v75 == 0x4927EB92E562CC46)
      {
        if (v72[2] == 0x4927EB92E562CC46)
          goto LABEL_172;
      }
      else if ((v75 & v73) != v70)
      {
        goto LABEL_182;
      }
      v72 = (_QWORD *)*v72;
      if (!v72)
        goto LABEL_182;
    }
  }
  while (1)
  {
    v74 = v72[1];
    if (v74 == 0x4927EB92E562CC46)
      break;
    if (v74 >= *(_QWORD *)&v68)
      v74 %= *(_QWORD *)&v68;
    if (v74 != v70)
      goto LABEL_182;
LABEL_128:
    v72 = (_QWORD *)*v72;
    if (!v72)
      goto LABEL_182;
  }
  if (v72[2] != 0x4927EB92E562CC46)
    goto LABEL_128;
LABEL_172:
  v103 = v72[5];
  if (*(_QWORD *)(v103 + 8) != 0x4927EB92E562CC46)
  {
LABEL_182:
    md::LayoutContext::zoomAtCentrePoint(v67);
    v106 = (float *)((char *)this + 412);
    goto LABEL_183;
  }
  v104 = *(_QWORD *)(v103 + 32);
  md::LayoutContext::zoomAtCentrePoint(v67);
  v106 = (float *)((char *)this + 412);
  if (!v104)
  {
LABEL_183:
    *v106 = v105;
    goto LABEL_184;
  }
  v107 = fmaxf((float)(*v106 * 2.0) + -31.0, 0.0);
  if (v107 <= 1.0)
    v108 = 1.0 - v107;
  else
    v108 = 0.0;
  v109 = fmaxf((float)(v105 * 2.0) + -31.0, 0.0);
  if (v109 <= 1.0)
    v110 = 1.0 - v109;
  else
    v110 = 0.0;
  *v106 = v105;
  if (v108 >= 0.00000011921 == v110 < 0.00000011921)
    md::MercatorTerrainHeightCache::invalidateRect(*((_QWORD **)this + 57), (double *)(v13 + 2928));
LABEL_184:
  v111 = (uint64_t **)((char *)this + 272);
  if (*(_BYTE *)(*((_QWORD *)this + 47) + 17) == 1)
  {
    v116 = *((_QWORD *)this + 49);
    if (!*(_BYTE *)(v116 + 771))
      goto LABEL_512;
    v118 = (char *)*((_QWORD *)this + 34);
    v117 = (char *)*((_QWORD *)this + 35);
    if (v118 == v117)
    {
      v120 = 1;
      goto LABEL_225;
    }
    v119 = v117 - v118 - 8;
    if (v119 >= 8)
    {
      v126 = (v119 >> 3) + 1;
      v121 = &v118[8 * (v126 & 0x3FFFFFFFFFFFFFFELL)];
      v127 = v118 + 8;
      v128 = 1;
      v129 = v126 & 0x3FFFFFFFFFFFFFFELL;
      v130 = 1;
      do
      {
        if (v128 <= ((*(_QWORD *)(*(_QWORD *)(*(v127 - 1) + 384) + 880)
                                   - *(_QWORD *)(*(_QWORD *)(*(v127 - 1) + 384) + 872)) >> 4))
          v128 = (*(_QWORD *)(*(_QWORD *)(*(v127 - 1) + 384) + 880)
                - *(_QWORD *)(*(_QWORD *)(*(v127 - 1) + 384) + 872)) >> 4;
        if (v130 <= ((*(_QWORD *)(*(_QWORD *)(*v127 + 384) + 880)
                                   - *(_QWORD *)(*(_QWORD *)(*v127 + 384) + 872)) >> 4))
          v130 = (*(_QWORD *)(*(_QWORD *)(*v127 + 384) + 880) - *(_QWORD *)(*(_QWORD *)(*v127 + 384) + 872)) >> 4;
        v127 += 2;
        v129 -= 2;
      }
      while (v129);
      if (v128 <= v130)
        v120 = v130;
      else
        v120 = v128;
      if (v126 == (v126 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_225:
        if (*(_BYTE *)(v116 + 770))
        {
          v133 = (_QWORD *)*((_QWORD *)v2 + 1);
          v134 = v133[1];
          if ((v134 & (v134 - 1)) != 0)
          {
            v136 = 0xE42D19AFCA302E68;
            if (v134 <= 0xE42D19AFCA302E68)
              v136 = 0xE42D19AFCA302E68 % v134;
            v135 = *(_QWORD **)(*v133 + 8 * v136);
            do
            {
              do
                v135 = (_QWORD *)*v135;
              while (v135[1] != 0xE42D19AFCA302E68);
            }
            while (v135[2] != 0xE42D19AFCA302E68);
          }
          else
          {
            v135 = *(_QWORD **)(*v133 + 8 * ((v134 - 1) & 0xE42D19AFCA302E68));
            do
            {
              do
                v135 = (_QWORD *)*v135;
              while (v135[1] != 0xE42D19AFCA302E68);
            }
            while (v135[2] != 0xE42D19AFCA302E68);
          }
          v137 = **(_QWORD **)(v135[5] + 32);
          if (v137)
          {
            v138 = *(_QWORD *)(v137 + 16);
            if (v138)
            {
              v139 = atomic_load((unsigned __int8 *)(v138 + 2784));
              if ((v139 & 1) == 0)
                std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v138 + 2808));
              v140 = *(_QWORD *)(v138 + 120);
              v141 = *(std::__shared_weak_count **)(v138 + 128);
              if (v141)
              {
                v142 = (unint64_t *)&v141->__shared_owners_;
                do
                  v143 = __ldxr(v142);
                while (__stxr(v143 + 1, v142));
              }
              if (v140)
              {
                v144 = (_QWORD *)*((_QWORD *)v2 + 1);
                v145 = (int8x8_t)v144[1];
                if (v145)
                {
                  v146 = (uint8x8_t)vcnt_s8(v145);
                  v146.i16[0] = vaddlv_u8(v146);
                  if (v146.u32[0] > 1uLL)
                  {
                    v147 = 0x3070CB6B3C7F21D3;
                    if (*(_QWORD *)&v145 <= 0x3070CB6B3C7F21D3uLL)
                      v147 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v145;
                  }
                  else
                  {
                    v147 = (*(_QWORD *)&v145 - 1) & 0x3070CB6B3C7F21D3;
                  }
                  v237 = *(_QWORD **)(*v144 + 8 * v147);
                  if (v237)
                  {
                    v238 = (_QWORD *)*v237;
                    if (v238)
                    {
                      if (v146.u32[0] < 2uLL)
                      {
                        v239 = *(_QWORD *)&v145 - 1;
                        while (1)
                        {
                          v241 = v238[1];
                          if (v241 == 0x3070CB6B3C7F21D3)
                          {
                            if (v238[2] == 0x3070CB6B3C7F21D3)
                              goto LABEL_415;
                          }
                          else if ((v241 & v239) != v147)
                          {
                            goto LABEL_505;
                          }
                          v238 = (_QWORD *)*v238;
                          if (!v238)
                            goto LABEL_505;
                        }
                      }
                      while (1)
                      {
                        v240 = v238[1];
                        if (v240 == 0x3070CB6B3C7F21D3)
                          break;
                        if (v240 >= *(_QWORD *)&v145)
                          v240 %= *(_QWORD *)&v145;
                        if (v240 != v147)
                          goto LABEL_505;
LABEL_404:
                        v238 = (_QWORD *)*v238;
                        if (!v238)
                          goto LABEL_505;
                      }
                      if (v238[2] != 0x3070CB6B3C7F21D3)
                        goto LABEL_404;
LABEL_415:
                      v242 = v238[5];
                      if (*(_QWORD *)(v242 + 8) == 0x3070CB6B3C7F21D3)
                      {
                        v243 = *(_QWORD *)(v242 + 32);
                        if (v243)
                        {
                          v346 = (uint64_t **)((char *)this + 272);
                          v348 = v2;
                          v244 = *(float32x2_t *)(v140 + 300);
                          v245 = *(float *)(v140 + 308);
                          v246 = *(float *)(v140 + 312);
                          v247 = v243 + 32;
                          v248 = 16;
                          if (*(unsigned __int8 *)(v243 + 320) - 1 >= 3)
                            v247 = v243 + 16;
                          else
                            v248 = 32;
                          v360 = *(_QWORD *)(v243 + v248);
                          v249 = *(std::__shared_weak_count **)(v247 + 8);
                          if (v249)
                          {
                            v250 = (unint64_t *)&v249->__shared_owners_;
                            do
                              v251 = __ldxr(v250);
                            while (__stxr(v251 + 1, v250));
                          }
                          v354 = v249;
                          v252 = (uint64_t *)*((_QWORD *)this + 34);
                          v358 = (uint64_t *)*((_QWORD *)this + 35);
                          if (v252 != v358)
                          {
                            v356 = 5 * v120;
                            while (1)
                            {
                              v253 = *v252;
                              v254 = *(_QWORD *)(*v252 + 384);
                              v255 = *(_QWORD *)(*((_QWORD *)v361 + 49) + 592);
                              v256 = *(_QWORD *)(v255 + 8);
                              if (v256 == *(_QWORD *)v255)
                              {
                                v261 = *(_QWORD *)(v255 + 88);
                                if (!v261)
                                  goto LABEL_529;
                                v262 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v261 + 48))(v261);
                                v263 = v262;
                                v258 = *(uint64_t **)(v255 + 40);
                                v264 = *(_QWORD *)(v255 + 48);
                                if ((unint64_t)v258 < v264)
                                {
                                  v257 = v262;
                                  if (!v258)
                                    goto LABEL_429;
LABEL_428:
                                  *v258 = v257;
LABEL_429:
                                  v260 = v258 + 1;
                                  goto LABEL_479;
                                }
                                v274 = *(_QWORD *)(v255 + 32);
                                v275 = ((uint64_t)v258 - v274) >> 3;
                                v276 = v275 + 1;
                                if ((unint64_t)(v275 + 1) >> 61)
LABEL_530:
                                  abort();
                                v277 = v264 - v274;
                                if (v277 >> 2 > v276)
                                  v276 = v277 >> 2;
                                if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFF8)
                                  v278 = 0x1FFFFFFFFFFFFFFFLL;
                                else
                                  v278 = v276;
                                if (v278)
                                {
                                  v279 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v255 + 56)
                                                                                             + 16))(*(_QWORD *)(v255 + 56), 8 * v278, 8);
                                  v272 = (uint64_t *)(v279 + 8 * v275);
                                  v273 = v279 + 8 * v278;
                                  if (v279)
                                  {
                                    v257 = v263;
                                    *v272 = v263;
LABEL_463:
                                    v290 = *(_QWORD *)(v255 + 32);
                                    v280 = *(_QWORD *)(v255 + 40);
                                    v291 = v280 - v290;
                                    if (v280 == v290)
                                    {
LABEL_470:
                                      v284 = v272;
                                      goto LABEL_477;
                                    }
                                    v292 = v291 - 8;
                                    if ((unint64_t)(v291 - 8) < 0x38)
                                    {
                                      v284 = v272;
                                    }
                                    else
                                    {
                                      v284 = v272;
                                      if ((unint64_t)(v280 - (_QWORD)v272) >= 0x20)
                                      {
                                        v293 = (v292 >> 3) + 1;
                                        v294 = v272 - 2;
                                        v295 = (__int128 *)(v280 - 16);
                                        v296 = v293 & 0x3FFFFFFFFFFFFFFCLL;
                                        do
                                        {
                                          v297 = *v295;
                                          *((_OWORD *)v294 - 1) = *(v295 - 1);
                                          *(_OWORD *)v294 = v297;
                                          v294 -= 4;
                                          v295 -= 2;
                                          v296 -= 4;
                                        }
                                        while (v296);
                                        v284 = &v272[-(v293 & 0x3FFFFFFFFFFFFFFCLL)];
                                        v280 -= 8 * (v293 & 0x3FFFFFFFFFFFFFFCLL);
                                        if (v293 == (v293 & 0x3FFFFFFFFFFFFFFCLL))
                                          goto LABEL_476;
                                      }
                                    }
                                    do
                                    {
                                      v299 = *(_QWORD *)(v280 - 8);
                                      v280 -= 8;
                                      *--v284 = v299;
                                    }
                                    while (v280 != v290);
                                    goto LABEL_476;
                                  }
                                }
                                else
                                {
                                  v273 = 0;
                                  v272 = (uint64_t *)(8 * v275);
                                }
                                v257 = v263;
                                goto LABEL_463;
                              }
                              v257 = *(_QWORD *)(v256 - 8);
                              *(_QWORD *)(v255 + 8) = v256 - 8;
                              v258 = *(uint64_t **)(v255 + 40);
                              v259 = *(_QWORD *)(v255 + 48);
                              if ((unint64_t)v258 < v259)
                              {
                                if (v258)
                                  goto LABEL_428;
                                goto LABEL_429;
                              }
                              v265 = *(_QWORD *)(v255 + 32);
                              v266 = ((uint64_t)v258 - v265) >> 3;
                              v267 = v266 + 1;
                              if ((unint64_t)(v266 + 1) >> 61)
                                goto LABEL_530;
                              v268 = v257;
                              v269 = v259 - v265;
                              if (v269 >> 2 > v267)
                                v267 = v269 >> 2;
                              v270 = (unint64_t)v269 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v267;
                              if (!v270)
                                break;
                              v271 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v255 + 56)
                                                                                         + 16))(*(_QWORD *)(v255 + 56), 8 * v270, 8);
                              v272 = (uint64_t *)(v271 + 8 * v266);
                              v273 = v271 + 8 * v270;
                              if (!v271)
                                goto LABEL_453;
                              v257 = v268;
                              *v272 = v268;
LABEL_454:
                              v281 = *(_QWORD *)(v255 + 32);
                              v280 = *(_QWORD *)(v255 + 40);
                              v282 = v280 - v281;
                              if (v280 == v281)
                                goto LABEL_470;
                              v283 = v282 - 8;
                              if ((unint64_t)(v282 - 8) < 0x38)
                              {
                                v284 = v272;
                              }
                              else
                              {
                                v284 = v272;
                                if ((unint64_t)(v280 - (_QWORD)v272) >= 0x20)
                                {
                                  v285 = (v283 >> 3) + 1;
                                  v286 = v272 - 2;
                                  v287 = (__int128 *)(v280 - 16);
                                  v288 = v285 & 0x3FFFFFFFFFFFFFFCLL;
                                  do
                                  {
                                    v289 = *v287;
                                    *((_OWORD *)v286 - 1) = *(v287 - 1);
                                    *(_OWORD *)v286 = v289;
                                    v286 -= 4;
                                    v287 -= 2;
                                    v288 -= 4;
                                  }
                                  while (v288);
                                  v284 = &v272[-(v285 & 0x3FFFFFFFFFFFFFFCLL)];
                                  v280 -= 8 * (v285 & 0x3FFFFFFFFFFFFFFCLL);
                                  if (v285 == (v285 & 0x3FFFFFFFFFFFFFFCLL))
                                    goto LABEL_476;
                                }
                              }
                              do
                              {
                                v298 = *(_QWORD *)(v280 - 8);
                                v280 -= 8;
                                *--v284 = v298;
                              }
                              while (v280 != v281);
LABEL_476:
                              v280 = *(_QWORD *)(v255 + 32);
LABEL_477:
                              v260 = v272 + 1;
                              *(_QWORD *)(v255 + 32) = v284;
                              *(_QWORD *)(v255 + 40) = v272 + 1;
                              v300 = *(_QWORD *)(v255 + 48);
                              *(_QWORD *)(v255 + 48) = v273;
                              if (v280)
                                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v255 + 56) + 40))(*(_QWORD *)(v255 + 56), v280, v300 - v280);
LABEL_479:
                              *(_QWORD *)(v255 + 40) = v260;
                              v383 = (uint64_t (**)())v257;
                              v301 = *(_QWORD *)(v255 + 120);
                              if (!v301)
                              {
LABEL_529:
                                std::__throw_bad_function_call[abi:nn180100]();
LABEL_531:
                                __break(1u);
                                return;
                              }
                              v302 = v257;
                              (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v301 + 48))(v301, &v383);
                              v304 = *(_QWORD *)(v253 + 464);
                              v305 = *(std::__shared_weak_count **)(v253 + 472);
                              if (v305)
                              {
                                v306 = (unint64_t *)&v305->__shared_owners_;
                                do
                                  v307 = __ldxr(v306);
                                while (__stxr(v307 + 1, v306));
                                v309 = *(_QWORD **)(v257 + 64);
                                v308 = v257 + 64;
                                *v309 = v304;
                                v309[1] = 0;
                                v310 = *(_QWORD **)(v257 + 160);
                                v311 = (unint64_t *)&v305->__shared_owners_;
                                do
                                  v312 = __ldxr(v311);
                                while (__stxr(v312 + 1, v311));
                              }
                              else
                              {
                                v308 = v257 + 64;
                                v313 = *(_QWORD **)(v257 + 64);
                                *v313 = v304;
                                v313[1] = 0;
                                v310 = *(_QWORD **)(v257 + 160);
                              }
                              v314 = (std::__shared_weak_count *)v310[1];
                              *v310 = v304;
                              v310[1] = v305;
                              if (v314)
                              {
                                v315 = (unint64_t *)&v314->__shared_owners_;
                                do
                                  v316 = __ldaxr(v315);
                                while (__stlxr(v316 - 1, v315));
                                if (!v316)
                                {
                                  ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                                  std::__shared_weak_count::__release_weak(v314);
                                }
                              }
                              if (v305)
                              {
                                v317 = (unint64_t *)&v305->__shared_owners_;
                                do
                                  v318 = __ldaxr(v317);
                                while (__stlxr(v318 - 1, v317));
                                if (!v318)
                                {
                                  ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                                  std::__shared_weak_count::__release_weak(v305);
                                }
                              }
                              **(_QWORD **)(v302 + 96) = *(_QWORD *)(v254 + 896);
                              LODWORD(v303) = *(_DWORD *)(v253 + 404);
                              (*((void (**)(double))VKAnimationCurveEaseInOut + 2))(v303);
                              v320 = (float)(v319 * v246) * *(float *)(v253 + 412);
                              v321 = *(_QWORD **)(*(_QWORD *)v308 + 16);
                              v322 = v321[1];
                              v323 = (float32x2_t *)v321[9];
                              v324 = *((_QWORD *)v361 + 49);
                              v323->i32[0] = *(_DWORD *)v324;
                              v323[2] = vmul_n_f32(v244, v320);
                              v323[3].f32[0] = v320 * v245;
                              v323[3].f32[1] = v320;
                              if (v321[8] > v322)
                                v322 = v321[8];
                              v321[7] = 0;
                              v321[8] = v322;
                              v325 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v324 + 752));
                              v326 = *(_QWORD *)(*((_QWORD *)v361 + 49) + 720);
                              *((_QWORD *)v325 + 8) = v360;
                              *((_QWORD *)v325 + 9) = 0;
                              *((_QWORD *)v325 + 10) = 0;
                              *((_QWORD *)v325 + 11) = 0;
                              *((_QWORD *)v325 + 12) = 1;
                              *((_QWORD *)v325 + 3) = v326;
                              *((_QWORD *)v325 + 4) = v302;
                              *((_QWORD *)v325 + 6) = v356;
                              ggl::CommandBuffer::pushRenderItem((uint64_t)v62, v325);
                              if (++v252 == v358)
                                goto LABEL_500;
                            }
                            v273 = 0;
                            v272 = (uint64_t *)(8 * v266);
LABEL_453:
                            v257 = v268;
                            goto LABEL_454;
                          }
LABEL_500:
                          v111 = v346;
                          v2 = v348;
                          if (v354)
                          {
                            v327 = (unint64_t *)&v354->__shared_owners_;
                            do
                              v328 = __ldaxr(v327);
                            while (__stlxr(v328 - 1, v327));
                            if (!v328)
                            {
                              ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
                              std::__shared_weak_count::__release_weak(v354);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_505:
              if (v141)
              {
                v329 = (unint64_t *)&v141->__shared_owners_;
                do
                  v330 = __ldaxr(v329);
                while (__stlxr(v330 - 1, v329));
                if (!v330)
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                }
              }
            }
          }
        }
        md::BuildingRenderLayer::layout3DBuildings(v361, v111, v350, (int8x8_t **)v2, 0, 0);
        md::BuildingRenderLayer::layout3DBuildings(v361, v111, v352, (int8x8_t **)v2, 0, 1);
        md::BuildingRenderLayer::layout3DBuildings(v361, v111, v350, (int8x8_t **)v2, 1, 0);
        md::BuildingRenderLayer::layout3DBuildings(v361, v111, v352, (int8x8_t **)v2, 1, 1);
        md::BuildingRenderLayer::layout3DLandmarks(v361, v111, v53, (uint64_t)v2, 0);
LABEL_511:
        md::BuildingRenderLayer::layout3DLandmarks(v361, v111, v349, (uint64_t)v2, 1);
        goto LABEL_512;
      }
    }
    else
    {
      v120 = 1;
      v121 = (char *)*((_QWORD *)this + 34);
    }
    do
    {
      v131 = *(_QWORD *)v121;
      v121 += 8;
      v132 = (*(_QWORD *)(*(_QWORD *)(v131 + 384) + 880) - *(_QWORD *)(*(_QWORD *)(v131 + 384) + 872)) >> 4;
      if (v120 <= v132)
        v120 = v132;
    }
    while (v121 != v117);
    goto LABEL_225;
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 47) + 17))
  {
    md::BuildingRenderLayer::layout2DBuildings(this, (uint64_t **)this + 34, (uint64_t)v52, (uint64_t)v2, 0);
    md::BuildingRenderLayer::layout3DBuildings(this, v111, v352, (int8x8_t **)v2, 0, 1);
    md::BuildingRenderLayer::layout2DBuildings(this, v111, (uint64_t)v52, (uint64_t)v2, 1);
    md::BuildingRenderLayer::layout3DBuildings(this, v111, v352, (int8x8_t **)v2, 1, 1);
    v112 = (_QWORD *)*((_QWORD *)v2 + 1);
    v113 = (int8x8_t)v112[1];
    if (!*(_QWORD *)&v113)
      goto LABEL_256;
    v114 = (uint8x8_t)vcnt_s8(v113);
    v114.i16[0] = vaddlv_u8(v114);
    if (v114.u32[0] > 1uLL)
    {
      v115 = 0x4927EB92E562CC46;
      if (*(_QWORD *)&v113 <= 0x4927EB92E562CC46uLL)
        v115 = 0x4927EB92E562CC46uLL % *(_QWORD *)&v113;
    }
    else
    {
      v115 = (*(_QWORD *)&v113 - 1) & 0x4927EB92E562CC46;
    }
    v122 = *(_QWORD **)(*v112 + 8 * v115);
    if (!v122)
      goto LABEL_256;
    v123 = (_QWORD *)*v122;
    if (!v123)
      goto LABEL_256;
    if (v114.u32[0] < 2uLL)
    {
      while (1)
      {
        v125 = v123[1];
        if (v125 == 0x4927EB92E562CC46)
        {
          if (v123[2] == 0x4927EB92E562CC46)
            goto LABEL_254;
        }
        else if ((v125 & (*(_QWORD *)&v113 - 1)) != v115)
        {
          goto LABEL_256;
        }
        v123 = (_QWORD *)*v123;
        if (!v123)
          goto LABEL_256;
      }
    }
    while (2)
    {
      v124 = v123[1];
      if (v124 != 0x4927EB92E562CC46)
      {
        if (v124 >= *(_QWORD *)&v113)
          v124 %= *(_QWORD *)&v113;
        if (v124 != v115)
          goto LABEL_256;
        goto LABEL_200;
      }
      if (v123[2] != 0x4927EB92E562CC46)
      {
LABEL_200:
        v123 = (_QWORD *)*v123;
        if (!v123)
          goto LABEL_256;
        continue;
      }
      break;
    }
LABEL_254:
    v154 = v123[5];
    if (*(_QWORD *)(v154 + 8) == 0x4927EB92E562CC46)
    {
      v155 = *(_QWORD *)(v154 + 32);
      goto LABEL_257;
    }
LABEL_256:
    v155 = 0;
LABEL_257:
    v156 = (uint64_t *)((char *)this + 416);
    if (*((_QWORD *)this + 55))
    {
      v157 = (_QWORD *)*((_QWORD *)this + 54);
      if (v157)
      {
        do
        {
          v158 = (_QWORD *)*v157;
          operator delete(v157);
          v157 = v158;
        }
        while (v158);
      }
      *((_QWORD *)this + 54) = 0;
      v159 = *((_QWORD *)this + 53);
      if (v159)
      {
        for (i = 0; i != v159; ++i)
          *(_QWORD *)(*v156 + 8 * i) = 0;
      }
      *((_QWORD *)this + 55) = 0;
      v112 = (_QWORD *)*((_QWORD *)v2 + 1);
      v113 = (int8x8_t)v112[1];
    }
    if (!*(_QWORD *)&v113)
      goto LABEL_287;
    v161 = (uint8x8_t)vcnt_s8(v113);
    v161.i16[0] = vaddlv_u8(v161);
    if (v161.u32[0] > 1uLL)
    {
      v162 = 0x1AF456233693CD46;
      if (*(_QWORD *)&v113 <= 0x1AF456233693CD46uLL)
        v162 = 0x1AF456233693CD46uLL % *(_QWORD *)&v113;
    }
    else
    {
      v162 = (*(_QWORD *)&v113 - 1) & 0x1AF456233693CD46;
    }
    v163 = *(_QWORD **)(*v112 + 8 * v162);
    if (!v163)
      goto LABEL_287;
    v164 = (_QWORD *)*v163;
    if (!v164)
      goto LABEL_287;
    if (v161.u32[0] < 2uLL)
    {
      while (1)
      {
        v166 = v164[1];
        if (v166 == 0x1AF456233693CD46)
        {
          if (v164[2] == 0x1AF456233693CD46)
            goto LABEL_285;
        }
        else if ((v166 & (*(_QWORD *)&v113 - 1)) != v162)
        {
          goto LABEL_287;
        }
        v164 = (_QWORD *)*v164;
        if (!v164)
          goto LABEL_287;
      }
    }
    while (1)
    {
      v165 = v164[1];
      if (v165 == 0x1AF456233693CD46)
        break;
      if (v165 >= *(_QWORD *)&v113)
        v165 %= *(_QWORD *)&v113;
      if (v165 != v162)
        goto LABEL_287;
LABEL_274:
      v164 = (_QWORD *)*v164;
      if (!v164)
        goto LABEL_287;
    }
    if (v164[2] != 0x1AF456233693CD46)
      goto LABEL_274;
LABEL_285:
    v167 = v164[5];
    if (*(_QWORD *)(v167 + 8) != 0x1AF456233693CD46)
    {
LABEL_287:
      v355 = 0;
      goto LABEL_288;
    }
    v355 = *(_QWORD *)(v167 + 32);
LABEL_288:
    if (v155)
      v168 = *(float *)(v155 + 280);
    else
      v168 = 0.0;
    v345 = (uint64_t **)((char *)this + 272);
    v347 = v2;
    v359 = v155;
    if (!*(_QWORD *)&v113)
      goto LABEL_316;
    v169 = (uint8x8_t)vcnt_s8(v113);
    v169.i16[0] = vaddlv_u8(v169);
    if (v169.u32[0] > 1uLL)
    {
      v170 = 0x401D4CCE847AB1D1;
      if (*(_QWORD *)&v113 <= 0x401D4CCE847AB1D1uLL)
        v170 = 0x401D4CCE847AB1D1uLL % *(_QWORD *)&v113;
    }
    else
    {
      v170 = (*(_QWORD *)&v113 - 1) & 0x401D4CCE847AB1D1;
    }
    v171 = *(_QWORD **)(*v112 + 8 * v170);
    if (!v171)
      goto LABEL_316;
    v172 = (_QWORD *)*v171;
    if (!v172)
      goto LABEL_316;
    if (v169.u32[0] < 2uLL)
    {
      v173 = *(_QWORD *)&v113 - 1;
      while (1)
      {
        v175 = v172[1];
        if (v175 == 0x401D4CCE847AB1D1)
        {
          if (v172[2] == 0x401D4CCE847AB1D1)
            goto LABEL_312;
        }
        else if ((v175 & v173) != v170)
        {
          goto LABEL_316;
        }
        v172 = (_QWORD *)*v172;
        if (!v172)
          goto LABEL_316;
      }
    }
    while (2)
    {
      v174 = v172[1];
      if (v174 != 0x401D4CCE847AB1D1)
      {
        if (v174 >= *(_QWORD *)&v113)
          v174 %= *(_QWORD *)&v113;
        if (v174 != v170)
          goto LABEL_316;
        goto LABEL_301;
      }
      if (v172[2] != 0x401D4CCE847AB1D1)
      {
LABEL_301:
        v172 = (_QWORD *)*v172;
        if (!v172)
          goto LABEL_316;
        continue;
      }
      break;
    }
LABEL_312:
    v176 = v172[5];
    if (*(_QWORD *)(v176 + 8) == 0x401D4CCE847AB1D1)
    {
      v177 = *(_QWORD *)(v176 + 32);
      if (v177)
      {
        if (*(_BYTE *)(v177 + 16))
        {
          v178 = *(std::__shared_weak_count **)(v177 + 8);
          goto LABEL_317;
        }
      }
    }
LABEL_316:
    v178 = 0;
LABEL_317:
    v179 = (uint64_t *)*((_QWORD *)this + 34);
    v353 = (uint64_t *)*((_QWORD *)this + 35);
    if (v179 != v353)
    {
      v180 = 1.0 - v168;
      v181 = fmaxf(*(float *)(v355 + 3080) + *(float *)(v355 + 3076), 1.0);
      while (1)
      {
        v182 = *v179;
        v183 = *(_QWORD *)(*v179 + 384);
        v184 = *(_QWORD *)(*v179 + 224);
        v364[0] = *(_QWORD *)(*v179 + 216);
        v364[1] = v184;
        if (v184)
        {
          v185 = (unint64_t *)(v184 + 8);
          do
            v186 = __ldxr(v185);
          while (__stxr(v186 + 1, v185));
        }
        v357 = (std::__shared_weak_count *)v184;
        v187 = *(float *)(v182 + 404);
        v188 = *(unsigned __int8 *)(v183 + 169);
        v189 = (char *)operator new(0x20uLL);
        v190 = v189;
        *(_QWORD *)v189 = &off_1E42D2E18;
        *((_QWORD *)v189 + 1) = v359;
        v191 = v189 + 8;
        v189[16] = v188;
        *((_QWORD *)v189 + 3) = v156;
        v385 = (uint64_t (***)())v189;
        if (v178)
        {
          v192 = (char *)operator new(0x20uLL);
          *(_QWORD *)v192 = &off_1E42D2E18;
          *(_OWORD *)(v192 + 8) = *(_OWORD *)v191;
          *((_QWORD *)v192 + 3) = *((_QWORD *)v191 + 2);
          v193 = (char *)operator new(0x30uLL);
          *(_QWORD *)v193 = &off_1E42CF860;
          *((_QWORD *)v193 + 1) = v178;
          *((_QWORD *)v193 + 5) = v192;
          v382 = v193;
          std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::destroy_deallocate(v190);
        }
        else
        {
          v382 = v189;
        }
        v194 = (char *)operator new(0x20uLL);
        v195 = v194;
        *(_QWORD *)v194 = &off_1E42D2E18;
        *((_QWORD *)v194 + 1) = v359;
        v196 = v194 + 8;
        v194[16] = v188;
        *((_QWORD *)v194 + 3) = v156;
        v385 = (uint64_t (***)())v194;
        if (v178)
        {
          v197 = (char *)operator new(0x20uLL);
          *(_QWORD *)v197 = &off_1E42D2E18;
          *(_OWORD *)(v197 + 8) = *(_OWORD *)v196;
          *((_QWORD *)v197 + 3) = *((_QWORD *)v196 + 2);
          v198 = (char *)operator new(0x30uLL);
          *(_QWORD *)v198 = &off_1E42CF8A8;
          *((_QWORD *)v198 + 1) = v178;
          *((_QWORD *)v198 + 5) = v197;
          v380 = v198;
          std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::destroy_deallocate(v195);
        }
        else
        {
          v380 = v194;
        }
        v199 = *(float *)(v182 + 412);
        v200 = *(double *)(v355 + 496);
        v201 = *(double *)(v355 + 504);
        v202 = *(double *)(v355 + 512);
        v203 = 1.0
             / (*(double *)(v182 + 632)
              + *(double *)(v182 + 536) * v200
              + *(double *)(v182 + 568) * v201
              + *(double *)(v182 + 600) * v202);
        v204 = v203
             * (*(double *)(v182 + 624)
              + *(double *)(v182 + 528) * v200
              + *(double *)(v182 + 560) * v201
              + *(double *)(v182 + 592) * v202);
        v362 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v182 + 608), *(float64x2_t *)(v182 + 512), v200), *(float64x2_t *)(v182 + 544), v201), *(float64x2_t *)(v182 + 576), v202), v203));
        *(float *)&v200 = v204;
        v363 = LODWORD(v200);
        v378 = v377;
        v375[0] = &off_1E42CF9C8;
        v376 = v375;
        v377[0] = &off_1E42CF980;
        if (!v178)
          goto LABEL_340;
        v383 = &off_1E42CFA10;
        v384 = v178;
        v385 = &v383;
        std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](&v383, v377);
        v205 = v385;
        if (v385 == &v383)
          break;
        if (v385)
        {
          v206 = 5;
LABEL_334:
          (*v205)[v206]();
        }
        v383 = &off_1E42CFA58;
        v384 = v178;
        v385 = &v383;
        std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](&v383, v375);
        v207 = v385;
        if (v385 == &v383)
        {
          v207 = &v383;
          v208 = 4;
        }
        else
        {
          if (!v385)
            goto LABEL_340;
          v208 = 5;
        }
        (*v207)[v208]();
LABEL_340:
        v209 = *(uint64_t **)(v183 + 936);
        v210 = *(uint64_t **)(v183 + 944);
        if (v209 != v210)
        {
          while (1)
          {
            v211 = *((_QWORD *)v361 + 50);
            v212 = (uint64_t)v380;
            if (!v380)
              goto LABEL_344;
            if (v380 != (char *)v379)
              break;
            v374 = v373;
            (*(void (**)(_QWORD *, _BYTE *))(v379[0] + 24))(v379, v373);
LABEL_346:
            *(float *)&v204 = v180;
            layoutRenderItemsForGroup(v211, v209, v364, v49, (__int32 *)&v362, 0, (uint64_t)v373, v187, v199, v181, v204);
            v214 = v374;
            if (v374 == v373)
            {
              v214 = v373;
              v215 = 4;
              goto LABEL_350;
            }
            if (v374)
            {
              v215 = 5;
LABEL_350:
              (*(void (**)(void))(*v214 + 8 * v215))();
            }
            if (!v178)
              goto LABEL_370;
            v216 = *(_QWORD *)(*v209 + 32);
            v217 = *(_QWORD *)(*v209 + 40);
            if (v216 == v217)
              goto LABEL_370;
            while (1)
            {
              v218 = *(_QWORD *)(v216 + 16);
              v219 = *(_QWORD *)(v216 + 24);
              if (v218 != v219)
                break;
LABEL_358:
              v216 += 40;
              if (v216 == v217)
                goto LABEL_370;
            }
            while (1)
            {
              v220 = *(_QWORD *)(v218 + 8);
              v221 = *(_QWORD *)(v218 + 16);
              if (v220 != v221)
                break;
LABEL_357:
              v218 += 32;
              if (v218 == v219)
                goto LABEL_358;
            }
            while (*(std::__shared_weak_count **)(v220 + 16) != v178)
            {
              v220 += 24;
              if (v220 == v221)
                goto LABEL_357;
            }
            v222 = *((_QWORD *)v361 + 50);
            v223 = (uint64_t)v382;
            if (!v382)
              goto LABEL_363;
            if (v382 != (char *)v381)
            {
              v223 = (*(uint64_t (**)(void))(*(_QWORD *)v382 + 16))();
LABEL_363:
              v372 = (_BYTE *)v223;
              goto LABEL_365;
            }
            v372 = v371;
            (*(void (**)(_QWORD *, _BYTE *))(v381[0] + 24))(v381, v371);
LABEL_365:
            *(float *)&v213 = v180;
            layoutRenderItemsForGroup(v222, v209, v364, v49, (__int32 *)&v362, 1, (uint64_t)v371, v187, v199, v181, v213);
            v224 = v372;
            if (v372 == v371)
            {
              v224 = v371;
              v225 = 4;
              goto LABEL_369;
            }
            if (v372)
            {
              v225 = 5;
LABEL_369:
              (*(void (**)(void))(*v224 + 8 * v225))();
            }
LABEL_370:
            md::ObjectGroup::addFeatureIds(*(_QWORD *)(*v209 + 32), *(_QWORD *)(*v209 + 40), v156, v188);
            v209 += 2;
            if (v209 == v210)
              goto LABEL_371;
          }
          v212 = (*(uint64_t (**)(void))(*(_QWORD *)v380 + 16))();
LABEL_344:
          v374 = (_BYTE *)v212;
          goto LABEL_346;
        }
LABEL_371:
        v226 = v376;
        if (v376 == v375)
        {
          v226 = v375;
          v228 = 4;
          v227 = v357;
        }
        else
        {
          v227 = v357;
          if (!v376)
            goto LABEL_376;
          v228 = 5;
        }
        (*(void (**)(void))(*v226 + 8 * v228))();
LABEL_376:
        v229 = v378;
        if (v378 == v377)
        {
          v229 = v377;
          v230 = 4;
        }
        else
        {
          if (!v378)
            goto LABEL_381;
          v230 = 5;
        }
        (*(void (**)(void))(*v229 + 8 * v230))();
LABEL_381:
        v231 = v380;
        if (v380 == (char *)v379)
        {
          v231 = (char *)v379;
          v232 = 4;
        }
        else
        {
          if (!v380)
            goto LABEL_386;
          v232 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v231 + 8 * v232))();
LABEL_386:
        v233 = v382;
        if (v382 == (char *)v381)
        {
          v233 = (char *)v381;
          v234 = 4;
        }
        else
        {
          if (!v382)
            goto LABEL_391;
          v234 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v233 + 8 * v234))();
LABEL_391:
        if (v227)
        {
          v235 = (unint64_t *)&v227->__shared_owners_;
          do
            v236 = __ldaxr(v235);
          while (__stlxr(v236 - 1, v235));
          if (!v236)
          {
            ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
            std::__shared_weak_count::__release_weak(v227);
          }
        }
        if (++v179 == v353)
          goto LABEL_396;
      }
      v205 = &v383;
      v206 = 4;
      goto LABEL_334;
    }
LABEL_396:
    v111 = v345;
    v2 = v347;
    goto LABEL_511;
  }
LABEL_512:
  v331 = v351[9];
  v332 = (uint64_t *)v351[10];
  v333 = 126 - 2 * __clz((uint64_t)((uint64_t)v332 - v331) >> 3);
  if (v332 == (uint64_t *)v331)
    v334 = 0;
  else
    v334 = v333;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v331, v332, v334, 1);
  v335 = *(_QWORD *)(v350 + 72);
  v336 = *(uint64_t **)(v350 + 80);
  v337 = 126 - 2 * __clz((uint64_t)((uint64_t)v336 - v335) >> 3);
  if (v336 == (uint64_t *)v335)
    v338 = 0;
  else
    v338 = v337;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v335, v336, v338, 1);
  v339 = *(_QWORD *)(v352 + 72);
  v340 = *(uint64_t **)(v352 + 80);
  v341 = 126 - 2 * __clz((uint64_t)((uint64_t)v340 - v339) >> 3);
  if (v340 == (uint64_t *)v339)
    v342 = 0;
  else
    v342 = v341;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v339, v340, v342, 1);
  if (!v370)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_531;
  }
  (*(void (**)(_QWORD *))(*v370 + 48))(v370);
  v343 = v370;
  if (v370 == v369)
  {
    v344 = 4;
    v343 = v369;
  }
  else
  {
    if (!v370)
      return;
    v344 = 5;
  }
  (*(void (**)(void))(*v343 + 8 * v344))();
}

void sub_19F8B014C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&a33);
  _Unwind_Resume(a1);
}

uint64_t md::BuildingRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  unsigned __int8 *v7;

  if (*(unsigned __int8 *)(result + 486) == *(unsigned __int8 *)(a3 + 1))
  {
    v3 = *(unsigned __int8 **)(a2 + 24);
    v4 = *v3;
    v5 = v3[1];
    v6 = v4 >= v5;
    if (v4 >= v5)
      v7 = v3 + 4;
    else
      v7 = 0;
    *(_QWORD *)(*(_QWORD *)(result + 392) + 760) = v7;
    if (v6)
    {
      v3[1] = v3[2];
      v4 = 1;
    }
    *v3 = v4 + 1;
    *(_DWORD *)(*(_QWORD *)(result + 392) + 776) = v4;
  }
  return result;
}

uint64_t *md::BuildingRenderLayer::prune(uint64_t a1)
{
  md::BuildingRenderResources::resetPools(*(md::BuildingRenderResources **)(a1 + 392));
  return md::LandmarkRenderResources::resetPools(*(uint64_t ***)(a1 + 400));
}

void md::BuildingRenderLayer::prepare(uint64_t **this, md::LayoutContext *a2)
{
  uint64_t *v4;
  uint64_t *i;
  uint64_t v6;
  id v7;
  id v8;
  float v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  id v13;
  id v14;

  ((void (*)(uint64_t **))(*this)[13])(this);
  v4 = this[34];
  for (i = this[35]; v4 != i; ++v4)
  {
    v6 = *v4;
    v7 = *(id *)(*v4 + 424);
    if (v7)
    {

    }
    else
    {
      v8 = *(id *)(v6 + 448);

      if (!v8)
      {
        if (*((_BYTE *)this[47] + 17))
          v9 = 1.0;
        else
          v9 = 0.0;
        *(float *)(v6 + 412) = v9;
      }
    }
  }
  if (*((_BYTE *)this[47] + 17) == 1)
  {
    if (*((_BYTE *)this[49] + 771))
    {
      v11 = this[34];
      v10 = this[35];
      if (v10 != v11)
      {
        **((_BYTE **)a2 + 92) = 1;
        do
        {
          if (!*(_BYTE *)(*((_QWORD *)a2 + 92) + 1))
          {
            v12 = *v11;
            if (*(_QWORD *)(*(_QWORD *)(*v11 + 384) + 880) != *(_QWORD *)(*(_QWORD *)(*v11 + 384) + 872))
            {
              v13 = *(id *)(v12 + 424);
              if (v13)
              {
                *(_BYTE *)(*((_QWORD *)a2 + 92) + 1) = 1;
              }
              else
              {
                v14 = *(id *)(v12 + 448);
                *(_BYTE *)(*((_QWORD *)a2 + 92) + 1) = v14 != 0;

              }
            }
          }
          ++v11;
        }
        while (v11 != v10);
      }
    }
  }
}

void md::BuildingRenderLayer::renderablesWillEnterView(uint64_t a1, uint64_t a2, char **a3)
{
  _QWORD *v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *i;
  uint64_t v22;
  uint64_t v23;
  id v24;
  float v25;

  v5 = *(_QWORD **)(a2 + 8);
  v6 = (int8x8_t)v5[1];
  if (!*(_QWORD *)&v6)
    goto LABEL_24;
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v6 <= 0xE42D19AFCA302E68)
      v8 = 0xE42D19AFCA302E68 % *(_QWORD *)&v6;
  }
  else
  {
    v8 = (*(_QWORD *)&v6 - 1) & 0xE42D19AFCA302E68;
  }
  v9 = *(_QWORD **)(*v5 + 8 * v8);
  if (!v9)
    goto LABEL_24;
  v10 = (_QWORD *)*v9;
  if (!v10)
    goto LABEL_24;
  if (v7.u32[0] < 2uLL)
  {
    v11 = *(_QWORD *)&v6 - 1;
    while (1)
    {
      v13 = v10[1];
      if (v13 == 0xE42D19AFCA302E68)
      {
        if (v10[2] == 0xE42D19AFCA302E68)
          goto LABEL_22;
      }
      else if ((v13 & v11) != v8)
      {
        goto LABEL_24;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v12 = v10[1];
    if (v12 == 0xE42D19AFCA302E68)
      break;
    if (v12 >= *(_QWORD *)&v6)
      v12 %= *(_QWORD *)&v6;
    if (v12 != v8)
      goto LABEL_24;
LABEL_11:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_24;
  }
  if (v10[2] != 0xE42D19AFCA302E68)
    goto LABEL_11;
LABEL_22:
  v14 = v10[5];
  if (*(_QWORD *)(v14 + 8) == 0xE42D19AFCA302E68)
  {
    v15 = *(_QWORD *)(v14 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v15 = 0;
LABEL_25:
  v16 = *a3;
  v17 = a3[1];
  if (*a3 == v17)
  {
    v18 = *a3;
  }
  else
  {
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)v16 + 384);
      v20 = *(uint64_t **)(v19 + 720);
      for (i = *(uint64_t **)(v19 + 728); v20 != i; v20 += 3)
      {
        v22 = *v20;
        v23 = v20[1];
        if (*v20 != v23)
        {
          do
          {
            v24 = *(id *)(v22 + 8);
            objc_msgSend(v24, "updateWithStyleManager:", v15);

            v22 += 24;
          }
          while (v22 != v23);
        }
      }
      v16 += 8;
    }
    while (v16 != v17);
    v18 = *a3;
    v16 = a3[1];
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 376) + 17) == 1)
    v25 = 1.0;
  else
    v25 = 0.0;
  md::BuildingRenderLayer::animateTiles(a1, v18, v16, 0.0, 1.0, 0.0, v25);
}

void sub_19F8B0848(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::BuildingRenderLayer::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  float v30;
  _QWORD *v31;
  unint64_t v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  _QWORD *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t v41;
  float32x4_t *v42;
  unint64_t *v43;
  unint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  float32x4_t *v50;
  double *v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;

  v3 = *(uint64_t **)(a3 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
  {
    v7 = 0;
    v56 = 0;
    v57 = 0;
    goto LABEL_72;
  }
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x4927EB92E562CC46;
    if (*(_QWORD *)&v4 <= 0x4927EB92E562CC46uLL)
      v6 = 0x4927EB92E562CC46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x4927EB92E562CC46;
  }
  v8 = *v3;
  v9 = *(_QWORD **)(v8 + 8 * v6);
  if (!v9)
    goto LABEL_25;
  v10 = (_QWORD *)*v9;
  if (!v10)
    goto LABEL_25;
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v12 = v10[1];
      if (v12 == 0x4927EB92E562CC46)
      {
        if (v10[2] == 0x4927EB92E562CC46)
          goto LABEL_23;
      }
      else if ((v12 & (*(_QWORD *)&v4 - 1)) != v6)
      {
        goto LABEL_25;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v11 = v10[1];
    if (v11 == 0x4927EB92E562CC46)
      break;
    if (v11 >= *(_QWORD *)&v4)
      v11 %= *(_QWORD *)&v4;
    if (v11 != v6)
      goto LABEL_25;
LABEL_12:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_25;
  }
  if (v10[2] != 0x4927EB92E562CC46)
    goto LABEL_12;
LABEL_23:
  v13 = v10[5];
  if (*(_QWORD *)(v13 + 8) == 0x4927EB92E562CC46)
  {
    v57 = *(_QWORD *)(v13 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v57 = 0;
LABEL_26:
  if (v5.u32[0] > 1uLL)
  {
    v14 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v14 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v14 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v15 = *(_QWORD **)(v8 + 8 * v14);
  if (!v15)
    goto LABEL_48;
  v16 = (_QWORD *)*v15;
  if (!v16)
    goto LABEL_48;
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v18 = v16[1];
      if (v18 == 0x1AF456233693CD46)
      {
        if (v16[2] == 0x1AF456233693CD46)
          goto LABEL_46;
      }
      else if ((v18 & (*(_QWORD *)&v4 - 1)) != v14)
      {
        goto LABEL_48;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v17 = v16[1];
    if (v17 != 0x1AF456233693CD46)
    {
      if (v17 >= *(_QWORD *)&v4)
        v17 %= *(_QWORD *)&v4;
      if (v17 != v14)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v16[2] != 0x1AF456233693CD46)
    {
LABEL_35:
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v19 = v16[5];
  if (*(_QWORD *)(v19 + 8) == 0x1AF456233693CD46)
  {
    v7 = *(double **)(v19 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v7 = 0;
LABEL_49:
  if (v5.u32[0] > 1uLL)
  {
    v20 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v4 <= 0x8BD499FBD96FBB9ELL)
      v20 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v4;
  }
  else
  {
    v20 = (*(_QWORD *)&v4 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v21 = *(_QWORD **)(v8 + 8 * v20);
  if (!v21)
    goto LABEL_71;
  v22 = (_QWORD *)*v21;
  if (!v22)
    goto LABEL_71;
  if (v5.u32[0] < 2uLL)
  {
    v23 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v25 = v22[1];
      if (v25 == 0x8BD499FBD96FBB9ELL)
      {
        if (v22[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_69;
      }
      else if ((v25 & v23) != v20)
      {
        goto LABEL_71;
      }
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v24 = v22[1];
    if (v24 != 0x8BD499FBD96FBB9ELL)
    {
      if (v24 >= *(_QWORD *)&v4)
        v24 %= *(_QWORD *)&v4;
      if (v24 != v20)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v22[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_58:
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v26 = v22[5];
  if (*(_QWORD *)(v26 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v56 = *(_QWORD *)(v26 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v56 = 0;
LABEL_72:
  v27 = *a2;
  v28 = a2[1];
  if (*a2 != v28)
  {
    while (2)
    {
      v29 = *v27;
      v30 = v7[471] * v7[173] / (v7[171] * (*(double *)(*v27 + 72) - *(double *)(*v27 + 56)));
      *(float *)(v29 + 368) = v30;
      *(_DWORD *)(v29 + 408) = *(_DWORD *)(v56 + 20);
      v31 = *(_QWORD **)(v29 + 216);
      v32 = v31[1];
      v33 = (float32x4_t *)v31[9];
      gm::operator*<double,4,4,4>(v58.f64, v7 + 101, (double *)(v29 + 88));
      v34 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v60), v61);
      *v33 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v58), v59);
      v33[1] = v34;
      v35 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v64), v65);
      v33[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v62), v63);
      v33[3] = v35;
      v33[4].i32[0] = *(_DWORD *)(v29 + 368);
      v36 = v31[8];
      if (v36 <= v32)
        v36 = v32;
      v31[7] = 0;
      v31[8] = v36;
      v38 = *(_QWORD **)(v29 + 464);
      v37 = *(std::__shared_weak_count **)(v29 + 472);
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v40 = __ldxr(p_shared_owners);
        while (__stxr(v40 + 1, p_shared_owners));
      }
      v41 = v38[1];
      if (v41)
      {
        v42 = (float32x4_t *)v38[9];
        if (!v37)
          goto LABEL_88;
      }
      else
      {
        v42 = 0;
        if (!v37)
          goto LABEL_88;
      }
      v43 = (unint64_t *)&v37->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
LABEL_88:
      gm::operator*<double,4,4,4>(v58.f64, v7 + 101, (double *)(v29 + 640));
      v45 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v60), v61);
      *v42 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v58), v59);
      v42[1] = v45;
      v46 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v64), v65);
      v42[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v62), v63);
      v42[3] = v46;
      v42[4].i32[0] = *(_DWORD *)(v29 + 368);
      if (v41)
      {
        v47 = v38[8];
        if (v47 <= v41)
          v47 = v41;
        v38[7] = 0;
        v38[8] = v47;
      }
      v48 = *(_QWORD **)(v29 + 480);
      v49 = v48[1];
      if (v49)
      {
        v50 = (float32x4_t *)v48[9];
        if (v57)
          goto LABEL_94;
LABEL_96:
        v51 = v7 + 101;
      }
      else
      {
        v50 = 0;
        if (!v57)
          goto LABEL_96;
LABEL_94:
        v51 = (double *)(v57 + 144);
      }
      gm::operator*<double,4,4,4>(v58.f64, v51, (double *)(v29 + 88));
      v52 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v64), v65);
      v53 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v62), v63);
      v54 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v60), v61);
      *v50 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v58), v59);
      v50[1] = v54;
      v50[2] = v53;
      v50[3] = v52;
      v50[4].i32[0] = *(_DWORD *)(v29 + 368);
      if (v49)
      {
        v55 = v48[8];
        if (v55 <= v49)
          v55 = v49;
        v48[7] = 0;
        v48[8] = v55;
      }
      if (++v27 == v28)
        return;
      continue;
    }
  }
}

void md::BuildingRenderLayer::featureMarker(uint64_t a1@<X1>, double *a2@<X2>, _QWORD *a3@<X8>)
{
  geo::codec::VectorTile *v3;
  unint64_t v7;
  geo::codec::VectorTile **v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  __int128 v19;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  __int128 v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;

  v3 = *(geo::codec::VectorTile **)(a1 + 640);
  *a3 = 0;
  a3[1] = 0;
  if (v3)
  {
    v7 = geo::codec::VectorTile::totalBuildingFootprintsCount(v3);
    v8 = (geo::codec::VectorTile **)(a1 + 640);
    if (v7)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (!v10)
      {
        v12 = geo::codec::buildingFootprintFeatureAtIndex((uint64_t)v8, v11);
        v13 = *(unsigned int *)(v12 + 100);
        if ((_DWORD)v13)
        {
          v14 = 0;
          while (1)
          {
            v47 = 0;
            v15 = (float *)geo::codec::multiSectionFeaturePoints((_QWORD *)v12, v14, &v47);
            if (VKPointInPolygon(v15, v47, *a2, a2[1]))
              break;
            if (v13 == ++v14)
              goto LABEL_4;
          }
          v16 = (std::__shared_weak_count *)operator new(0x40uLL);
          v17 = v16;
          v16->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          v16->__shared_weak_owners_ = 0;
          v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC2E0;
          v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E4298458;
          v9 = &v16[1].__vftable;
          v16[1].__shared_owners_ = 0;
          v16[1].__shared_weak_owners_ = 0;
          v16[2].__vftable = 0;
          v16[2].__shared_owners_ = v12;
          *(_QWORD *)&v19 = v16 + 1;
          *((_QWORD *)&v19 + 1) = v16;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
          p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
          do
            v22 = __ldxr(p_shared_weak_owners);
          while (__stxr(v22 + 1, p_shared_weak_owners));
          v16[1].__shared_owners_ = (uint64_t)v9;
          v16[1].__shared_weak_owners_ = (uint64_t)v16;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            v45 = v19;
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v17);
            v19 = v45;
          }
          v24 = (std::__shared_weak_count *)a3[1];
          *(_OWORD *)a3 = v19;
          if (v24)
          {
            v25 = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            v9 = (_QWORD *)*a3;
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v10 = v9;
        }
        else
        {
LABEL_4:
          v10 = 0;
        }
        if (++v11 == v7)
        {
          if (v9)
            return;
          goto LABEL_27;
        }
      }
    }
    else
    {
LABEL_27:
      v27 = geo::codec::VectorTile::polygonsCount(*v8);
      if (v27)
      {
        v28 = 0;
        do
        {
          v29 = geo::codec::VectorTile::polygons(*v8) + (v28 << 7);
          v30 = *(unsigned int *)(v29 + 100);
          if ((_DWORD)v30)
          {
            v31 = 0;
            while (1)
            {
              v47 = 0;
              v32 = (float *)geo::codec::multiSectionFeaturePoints((_QWORD *)v29, v31, &v47);
              if ((VKPointInPolygon(v32, v47, *a2, a2[1]) & 1) != 0)
                break;
              if (v30 == ++v31)
                goto LABEL_33;
            }
            v34 = (std::__shared_weak_count *)operator new(0x40uLL);
            v35 = v34;
            v34->__shared_owners_ = 0;
            v36 = (unint64_t *)&v34->__shared_owners_;
            v34->__shared_weak_owners_ = 0;
            v34->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC2E0;
            v34[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E4298458;
            v34[1].__shared_owners_ = 0;
            v34[1].__shared_weak_owners_ = 0;
            v34[2].__vftable = 0;
            v34[2].__shared_owners_ = v29;
            *(_QWORD *)&v37 = v34 + 1;
            *((_QWORD *)&v37 + 1) = v34;
            do
              v38 = __ldxr(v36);
            while (__stxr(v38 + 1, v36));
            v39 = (unint64_t *)&v34->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            v34[1].__shared_owners_ = (uint64_t)&v34[1];
            v34[1].__shared_weak_owners_ = (uint64_t)v34;
            do
              v41 = __ldaxr(v36);
            while (__stlxr(v41 - 1, v36));
            if (!v41)
            {
              v46 = v37;
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v35);
              v37 = v46;
            }
            v42 = (std::__shared_weak_count *)a3[1];
            *(_OWORD *)a3 = v37;
            if (v42)
            {
              v43 = (unint64_t *)&v42->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            v33 = *a3;
          }
          else
          {
LABEL_33:
            v33 = 0;
          }
          ++v28;
        }
        while (v28 < v27 && !v33);
      }
    }
  }
}

void sub_19F8B1118(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::VenueLogicContext::~VenueLogicContext(md::VenueLogicContext *this)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v2 = (_QWORD *)*((_QWORD *)this + 40);
  if (v2)
  {
    do
    {
      v13 = (_QWORD *)*v2;
      v14 = (void *)v2[3];
      if (v14)
      {
        v2[4] = v14;
        operator delete(v14);
      }
      operator delete(v2);
      v2 = v13;
    }
    while (v13);
  }
  v3 = (void *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 15);
  if (v4)
  {
    *((_QWORD *)this + 16) = v4;
    operator delete(v4);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 12);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)*((_QWORD *)this + 7);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    operator delete(v10);
  v11 = (_QWORD *)*((_QWORD *)this + 2);
  while (v11)
  {
    v15 = v11;
    v11 = (_QWORD *)*v11;
    v16 = (std::__shared_weak_count *)v15[4];
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    operator delete(v15);
  }
  v12 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v12)
    operator delete(v12);
}

void std::__shared_ptr_emplace<md::VectorFeatureMarker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC2E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::VectorFeatureMarker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC2E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::VectorFeatureMarker>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ___ZN2md19BuildingRenderLayer12animateTilesERKN3geo5sliceINSt3__111__wrap_iterIPKPNS_26BuildingTileDataRenderableEEEEEffff_block_invoke_3(uint64_t a1, float a2)
{
  float v2;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  float v10;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  if (*(float *)(a1 + 64) > *(float *)(a1 + 68))
    a2 = 1.0 - a2;
  *(float *)(v5 + 400) = a2;
  v6 = *(float *)(a1 + 64);
  v7 = *(float *)(a1 + 68);
  *(float *)(v5 + 404) = v6
                       + (float)((*(float (**)(float))(*(_QWORD *)(a1 + 32) + 16))(v2) * (float)(v7 - v6));
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(float *)(a1 + 72);
  v10 = *(float *)(a1 + 76);
  *(float *)(v8 + 412) = v9
                       + (float)((*(float (**)(float))(*(_QWORD *)(a1 + 32) + 16))(v2) * (float)(v10 - v9));
  md::MercatorTerrainHeightCache::invalidateRect(*(_QWORD **)(v4 + 456), *(double **)(a1 + 56));
}

void ___ZN2md19BuildingRenderLayer12animateTilesERKN3geo5sliceINSt3__111__wrap_iterIPKPNS_26BuildingTileDataRenderableEEEEEffff_block_invoke_4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float v4;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = 1.0;
  if (*(float *)(a1 + 56) > *(float *)(a1 + 60))
    v4 = 0.0;
  *(float *)(v2 + 400) = v4;
  *(_DWORD *)(v2 + 404) = *(_DWORD *)(a1 + 60);
  *(_DWORD *)(v2 + 412) = *(_DWORD *)(a1 + 64);
  objc_storeStrong((id *)(v2 + 424), 0);
  md::MercatorTerrainHeightCache::invalidateRect(*(_QWORD **)(v3 + 456), *(double **)(a1 + 48));
}

float ___ZN2md19BuildingRenderLayer12animateTilesERKN3geo5sliceINSt3__111__wrap_iterIPKPNS_26BuildingTileDataRenderableEEEEEffff_block_invoke_2(float a1)
{
  return fminf(fmaxf((float)(a1 * 2.0) + -1.0, 0.0), 1.0);
}

float ___ZN2md19BuildingRenderLayer12animateTilesERKN3geo5sliceINSt3__111__wrap_iterIPKPNS_26BuildingTileDataRenderableEEEEEffff_block_invoke(float a1)
{
  return fminf(fmaxf(a1 + a1, 0.0), 1.0);
}

void std::__function::__func<md::BuildingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::BuildingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "BuildingLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void md::BuildingRenderLayer::setBuildingMode(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  char v4;
  float v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  VKTimedAnimation *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  id v16;
  VKAnimation *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[7];
  float v29;
  char v30;
  _QWORD v31[7];
  int v32;
  float v33;
  _BYTE v34[9];

  v3 = *(_QWORD *)(a1 + 376);
  if (*(unsigned __int8 *)(v3 + 17) != a2)
  {
    v4 = a2;
    if (a2)
      v6 = 1.0;
    else
      v6 = 0.0;
    if (!a3 || (v8 = *(uint64_t **)(a1 + 272), v7 = *(uint64_t **)(a1 + 280), v7 == v8))
    {
      *(_BYTE *)(v3 + 16) = a2;
      *(_BYTE *)(v3 + 17) = a2;
      v19 = **(_QWORD **)(*(_QWORD *)(a1 + 40) + 88);
      if (v19)
      {
        v34[0] = 7;
        md::MapEngine::setNeedsTick(v19, v34);
      }
      v20 = *(char **)(a1 + 272);
      v21 = *(char **)(a1 + 280);
      if (v20 != v21)
      {
        v22 = v21 - v20 - 8;
        if (v22 >= 8)
        {
          v23 = (v22 >> 3) + 1;
          v24 = (uint64_t *)(v20 + 8);
          v25 = v23 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            v26 = *v24;
            *(float *)(*(v24 - 1) + 412) = v6;
            *(float *)(v26 + 412) = v6;
            v24 += 2;
            v25 -= 2;
          }
          while (v25);
          if (v23 == (v23 & 0x3FFFFFFFFFFFFFFELL))
            return;
          v20 += 8 * (v23 & 0x3FFFFFFFFFFFFFFELL);
        }
        do
        {
          v27 = *(_QWORD *)v20;
          v20 += 8;
          *(float *)(v27 + 412) = v6;
        }
        while (v20 != v21);
      }
    }
    else
    {
      v9 = MEMORY[0x1E0C809B0];
      do
      {
        v10 = *v8;
        v11 = -[VKTimedAnimation initWithDuration:]([VKTimedAnimation alloc], "initWithDuration:", 0.300000012);
        v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 392) + 771);
        v13 = *(_QWORD *)(a1 + 376);
        if (v12 != *(unsigned __int8 *)(v13 + 17))
        {
          *(_BYTE *)(v13 + 17) = v12;
          v14 = **(_QWORD **)(*(_QWORD *)(a1 + 40) + 88);
          if (v14)
          {
            v34[0] = 7;
            md::MapEngine::setNeedsTick(v14, v34);
          }
        }
        v15 = *(_DWORD *)(v10 + 412);
        v16 = *(id *)(v10 + 448);
        objc_msgSend(v16, "stop");

        *(_BYTE *)(*(_QWORD *)(a1 + 376) + 16) = v4;
        -[VKTimedAnimation setTimingFunction:](v11, "setTimingFunction:", VKAnimationCurveEaseOut);
        v31[0] = v9;
        v31[1] = 3221225472;
        v31[2] = ___ZN2md19BuildingRenderLayer15setBuildingModeENS_18BuildingRenderModeEb_block_invoke;
        v31[3] = &__block_descriptor_64_e8_v12__0f8l;
        v31[4] = a1;
        v31[5] = v10;
        v32 = v15;
        v33 = v6;
        v31[6] = v10 + 56;
        -[VKTimedAnimation setStepHandler:](v11, "setStepHandler:", v31);
        v28[0] = v9;
        v28[1] = 3221225472;
        v28[2] = ___ZN2md19BuildingRenderLayer15setBuildingModeENS_18BuildingRenderModeEb_block_invoke_2;
        v28[3] = &__block_descriptor_61_e8_v12__0B8l;
        v28[4] = a1;
        v28[5] = v10;
        v29 = v6;
        v30 = v4;
        v28[6] = v10 + 56;
        -[VKAnimation setCompletionHandler:](v11, "setCompletionHandler:", v28);
        v17 = v11;
        v18 = *(void **)(v10 + 448);
        *(_QWORD *)(v10 + 448) = v17;

        md::AnimationRunner::runAnimation(*(md::MapEngine ***)(a1 + 464), v17);
        ++v8;
      }
      while (v8 != v7);
    }
  }
}

void sub_19F8B170C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN2md19BuildingRenderLayer15setBuildingModeENS_18BuildingRenderModeEb_block_invoke(uint64_t a1, float a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  *(float *)(*(_QWORD *)(a1 + 40) + 412) = *(float *)(a1 + 56)
                                           + (float)((float)(*(float *)(a1 + 60) - *(float *)(a1 + 56)) * a2);
  md::MercatorTerrainHeightCache::invalidateRect(*(_QWORD **)(v2 + 456), *(double **)(a1 + 48));
}

void ___ZN2md19BuildingRenderLayer15setBuildingModeENS_18BuildingRenderModeEb_block_invoke_2(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(a1 + 32);
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 448), 0);
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 412) = *(_DWORD *)(a1 + 56);
  if (a2)
  {
    v5 = *(unsigned __int8 *)(a1 + 60);
    v6 = *(_QWORD *)(v4 + 376);
    if (v5 != *(unsigned __int8 *)(v6 + 17))
    {
      *(_BYTE *)(v6 + 17) = v5;
      v7 = **(_QWORD **)(*(_QWORD *)(v4 + 40) + 88);
      if (v7)
      {
        v8 = 7;
        md::MapEngine::setNeedsTick(v7, &v8);
      }
    }
    md::MercatorTerrainHeightCache::invalidateRect(*(_QWORD **)(v4 + 456), *(double **)(a1 + 48));
  }
}

void std::__function::__func<md::BuildingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::BuildingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::BuildingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::BuildingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CFAE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::BuildingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::BuildingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CFAE8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::BuildingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::BuildingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "BuildingLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::BuildingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::BuildingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::BuildingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::BuildingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CFAA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::BuildingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::BuildingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CFAA0;
  a2[1] = v2;
  return result;
}

void md::DaVinciMaterialResourceDecoder::~DaVinciMaterialResourceDecoder(md::DaVinciMaterialResourceDecoder *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::DecodedMaterialSheetResult::~DecodedMaterialSheetResult(md::DecodedMaterialSheetResult *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *((_QWORD *)this + 3);
    v4 = (void *)*((_QWORD *)this + 2);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void std::__shared_ptr_emplace<md::DaVinciMaterialResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCC80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::DaVinciMaterialResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCC80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::DaVinciMaterialResource>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;

  v2 = a1[23];
  if (v2)
  {
    v3 = a1[24];
    v4 = (void *)a1[23];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[23];
    }
    a1[24] = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)a1[22];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (void *)a1[4];
  if (v11 != (void *)a1[6])
    free(v11);
}

uint64_t md::MuninRoadLabelingCameraState::MuninRoadLabelingCameraState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  long double v7;
  long double v8;
  long double v9;
  double v10;
  double v11;
  __double2 v12;
  double v13;
  __double2 v14;
  long double v15;
  long double v16;
  float64x2_t v17;
  uint64_t i;
  long double v24;
  long double v25;
  long double v26;
  double v27;
  double v28;
  __double2 v29;
  double v30;
  __double2 v31;
  long double v32;
  long double v33;
  float64x2_t *v34;
  float64x2_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t *v42;
  __int128 v43;
  uint64_t v44;
  double *v45;
  double *v46;
  uint64_t v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double *v73;
  long double v77;
  long double v78;
  long double v79;
  long double v80;
  long double v81;
  long double v82;
  long double v83;
  double v84;
  long double v85;
  uint64_t v86;
  __int128 v87;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  long double v92;
  long double v93;
  _OWORD v94[12];

  v6 = *(_QWORD *)(a2 + 512);
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(double *)a1;
  v8 = *(double *)(a1 + 8);
  v9 = *(double *)(a1 + 16);
  v10 = sqrt(v7 * v7 + v8 * v8);
  v11 = atan2(v9, v10 * 0.996647189);
  v92 = atan2(v8, v7);
  v12 = __sincos_stret(v11);
  v13 = atan2(v9 + v12.__sinval * v12.__sinval * 42841.3115 * v12.__sinval, v10 + v12.__cosval * v12.__cosval * -42697.6727 * v12.__cosval);
  v14 = __sincos_stret(v13);
  v15 = tan(v13 * 0.5 + 0.785398163);
  v16 = log(v15);
  v17.f64[0] = v92;
  v17.f64[1] = v16;
  __asm { FMOV            V0.2D, #0.5 }
  v90 = _Q0;
  v91 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
  v89 = vmlaq_f64(_Q0, v91, v17);
  *(float64x2_t *)(a1 + 24) = v89;
  *(double *)(a1 + 40) = v10 / v14.__cosval + -6378137.0 / sqrt(v14.__sinval * v14.__sinval * -0.00669437999 + 1.0);
  memcpy((void *)(a1 + 48), (const void *)(a2 + 984), 0x180uLL);
  for (i = 0; i != 192; i += 24)
  {
    v24 = *(double *)(a1 + i + 240);
    v25 = *(double *)(a1 + i + 248);
    v26 = *(double *)(a1 + i + 256);
    v27 = sqrt(v24 * v24 + v25 * v25);
    v28 = atan2(v26, v27 * 0.996647189);
    v93 = atan2(v25, v24);
    v29 = __sincos_stret(v28);
    v30 = atan2(v26 + v29.__sinval * v29.__sinval * 42841.3115 * v29.__sinval, v27 + v29.__cosval * v29.__cosval * -42697.6727 * v29.__cosval);
    v31 = __sincos_stret(v30);
    v32 = tan(v30 * 0.5 + 0.785398163);
    v33 = log(v32);
    v34 = (float64x2_t *)((char *)v94 + i);
    v35.f64[0] = v93;
    v35.f64[1] = v33;
    *v34 = vmlaq_f64(v90, v91, v35);
    v34[1].f64[0] = v27 / v31.__cosval + -6378137.0 / sqrt(v31.__sinval * v31.__sinval * -0.00669437999 + 1.0);
  }
  v36 = a1 + 624;
  v37 = v94[1];
  *(_OWORD *)(a1 + 624) = v94[0];
  *(_OWORD *)(a1 + 640) = v37;
  v38 = v94[3];
  *(_OWORD *)(a1 + 656) = v94[2];
  *(_OWORD *)(a1 + 672) = v38;
  v39 = v94[5];
  *(_OWORD *)(a1 + 688) = v94[4];
  *(_OWORD *)(a1 + 704) = v39;
  v40 = v94[7];
  *(_OWORD *)(a1 + 720) = v94[6];
  *(_OWORD *)(a1 + 736) = v40;
  v41 = v94[9];
  *(_OWORD *)(a1 + 752) = v94[8];
  *(_OWORD *)(a1 + 768) = v41;
  v42 = &qword_1A001A638;
  v43 = v94[11];
  v44 = 432;
  *(_OWORD *)(a1 + 784) = v94[10];
  *(_OWORD *)(a1 + 800) = v43;
  do
  {
    v45 = (double *)(v36 + 24 * *(v42 - 2));
    v46 = (double *)(v36 + 24 * *(v42 - 1));
    v47 = *v42;
    v42 += 3;
    v48 = (double *)(v36 + 24 * v47);
    v49 = v45[1];
    v50 = *v46 - *v45;
    v51 = v45[2];
    v52 = v46[1] - v49;
    v53 = v46[2] - v51;
    v54 = 1.0 / sqrt(v50 * v50 + v52 * v52 + v53 * v53);
    v55 = v54 * v50;
    v56 = *v48 - *v45;
    v57 = v48[1] - v49;
    v58 = v54 * v52;
    v59 = v48[2] - v51;
    v60 = v54 * v53;
    v61 = 1.0 / sqrt(v56 * v56 + v57 * v57 + v59 * v59);
    v62 = v61 * v57;
    v63 = v61 * v59;
    v64 = v61 * v56;
    v65 = -(v62 * v60 - v63 * v58);
    v66 = -(v63 * v55 - v64 * v60);
    v67 = -(v64 * v58 - v62 * v55);
    v68 = 1.0 / sqrt(v65 * v65 + v66 * v66 + v67 * v67);
    v69 = v68 * v65;
    v70 = v68 * v66;
    v71 = v68 * v67;
    v72 = -(v68 * v65 * *v45 + v70 * v49 + v71 * v51);
    v73 = (double *)(a1 + v44);
    *v73 = v69;
    v73[1] = v70;
    v73[2] = v71;
    v73[3] = v72;
    v44 += 32;
  }
  while (v44 != 624);
  _D1 = 0x401921FB54442D18;
  _V2.D[1] = v89.f64[1];
  __asm { FMLA            D0, D1, V2.D[1]; __x }
  v77 = exp(_D0);
  v78 = atan(v77) * 114.591559 + -90.0;
  v79 = cos(v78 * 0.034906585) * -559.82 + 111132.92;
  v80 = v79 + cos(v78 * 0.0698131701) * 1.175;
  v81 = v80 + cos(v78 * 0.104719755) * -0.0023;
  v82 = v78 * 0.00872664626;
  v83 = tan(v78 * 0.00872664626 + 0.78103484);
  v84 = log(v83);
  v85 = tan(v82 + 0.789761487);
  *(long double *)(a1 + 816) = fabs((log(v85) - v84) * 0.159154943) / v81;
  v86 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 824) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 840) = v86;
  v87 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 864) = *(_QWORD *)(a3 + 40);
  *(_OWORD *)(a1 + 848) = v87;
  *(_QWORD *)(a1 + 872) = *(_QWORD *)(a3 + 48);
  memcpy((void *)(a1 + 880), (const void *)(a3 + 56), 0x198uLL);
  *(_QWORD *)(a1 + 1288) = *(_QWORD *)(a2 + 48);
  return a1;
}

void md::PolygonLayerLayoutCharacteristics::~PolygonLayerLayoutCharacteristics(md::PolygonLayerLayoutCharacteristics *this)
{
  void *v2;

  *(_QWORD *)this = off_1E42A5CF8;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E42A5CF8;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::PolygonLayerLayoutCharacteristics::commandBuffer(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  unsigned int v4;

  if (a3)
    v4 = 1;
  else
    v4 = 2;
  if (a2 != 2)
    v4 = a2;
  return *(_QWORD *)(a4 + 8 * v4);
}

uint64_t md::PolygonLayerLayoutCharacteristics::shouldStencil(uint64_t a1, unsigned int a2, _BYTE *a3)
{
  *a3 = *(_WORD *)(*(_QWORD *)(a1 + 56) + 2 * a2 + 896);
  return *(unsigned __int8 *)(a1 + 64);
}

unint64_t md::PolygonLayerLayoutCharacteristics::renderOrderForAttributes(uint64_t a1, int a2, uint64_t a3, int a4, unint64_t a5, unsigned int a6, int a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = 0x400000000;
  if (!a4)
    v8 = 0;
  v9 = 0x1000000;
  if (a2)
    v9 = 0;
  v10 = 0x10000;
  if (!a7)
    v10 = 0;
  return v9 & 0xFFFFFFFFFFFF00FFLL | (a3 << 25) | v8 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)a6 << 17) | v10 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)(a5 >> 4) << 8) | ((unint64_t)*(unsigned __int8 *)(a5 + 1) << 19) | (*a8 >> 4);
}

uint64_t md::PolygonLayoutCharacteristics::modifiesMVCForPolygonGroup(md::PolygonLayoutCharacteristics *this, const VKPolygonGroup *a2)
{
  return 0;
}

__n128 md::PolygonLayoutCharacteristics::modifyMVCForPolygonGroup@<Q0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

BOOL md::PolygonLayerLayoutCharacteristics::shouldCullPolygonGroup(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  return (objc_msgSend(a3, "cullingMask") & a4) == 0;
}

uint64_t md::PolygonLayerLayoutCharacteristics::shouldLayoutPolygonGroup(md::PolygonLayerLayoutCharacteristics *this, const VKPolygonGroup *a2)
{
  return 1;
}

uint64_t md::PolygonLayoutCharacteristics::focusState(md::PolygonLayoutCharacteristics *this, const VKPolygonGroup *a2)
{
  return 0;
}

void md::PolygonLayoutCharacteristics::getOverridePolygonDepthType(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

float md::PolygonLayerLayoutCharacteristics::maxMiterOffset(md::PolygonLayerLayoutCharacteristics *this)
{
  return *((float *)this + 17);
}

void karo::AsyncFileLoader::FileObject::~FileObject(karo::AsyncFileLoader::FileObject *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E42C2C18;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42C2D08;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 128);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E42C2C18;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42C2D08;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 128);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::AsyncFileLoader::FileObject::getFile(karo::AsyncFileLoader::FileObject *this)
{
  uint64_t v2;
  int v3;

  v2 = *((_QWORD *)this + 3);
  pthread_mutex_lock(*(pthread_mutex_t **)(v2 + 152));
  v3 = *(_DWORD *)(v2 + 160);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v2 + 152));
  if ((v3 & 1) != 0)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  else
    return 0;
}

uint64_t karo::AsyncFileLoader::FileObject::waitForFile(karo::AsyncFileLoader::FileObject *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
}

uint64_t karo::AsyncFileLoader::FileObject::getFileSize(karo::AsyncFileLoader::FileObject *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 48))(*((_QWORD *)this + 3));
}

void karo::AsyncFileLoader::requestFile(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::string __p;
  std::string v27;
  char v28;
  void (**v29)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v30;
  std::__shared_weak_count *v31;

  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    __p = *(std::string *)a2;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      v27 = __p;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v27, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_6:
  v28 = 0;
  (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), uint64_t, std::string *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(&v29, a1, &v27, a3, a4, a5, a6, 0);
  v14 = v30;
  v13 = v31;
  *a7 = &off_1E42C2D08;
  a7[1] = v14;
  a7[2] = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  if (v14)
  {
    v17 = (unsigned int *)(v14 + 128);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v14 = a7[1];
    v13 = (std::__shared_weak_count *)a7[2];
  }
  *a7 = &off_1E42C2C18;
  a7[3] = 0;
  a7[4] = 0;
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    a7[3] = v14;
    a7[4] = v13;
  }
  else
  {
    a7[3] = v14;
  }
  v29 = &off_1E42C2D08;
  if (v30)
  {
    v21 = (unsigned int *)(v30 + 128);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
  }
  v23 = v31;
  if (!v31)
    goto LABEL_25;
  v24 = (unint64_t *)&v31->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_30:
      operator delete(__p.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
LABEL_25:
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
  }
  operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_30;
}

void karo::AsyncFileLoader::requestStore(_QWORD *a1@<X8>)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E42C2D08;
}

void karo::AsyncFileLoader::createAndQueueFileRequest(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  std::string __p;
  std::string v11;
  char v12;
  __int128 v13;
  __int128 v14;

  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    __p = *(std::string *)a2;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      v11 = __p;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_6:
  v12 = 0;
  (*(void (**)(__int128 *__return_ptr, _QWORD *, std::string *, _QWORD))(*a1 + 64))(&v13, a1, &v11, 0);
  v5 = a1[6];
  if (v5)
  {
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    v14 = v13;
    if (*((_QWORD *)&v13 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      karo::JobManager::queueJob(v5, &v14);
      do
        v9 = __ldaxr(v7);
      while (__stlxr(v9 - 1, v7));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v5, &v14);
    }
  }
  *a3 = v13;
  v13 = 0uLL;
  if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_17;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_17:
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t karo::AsyncRequestManagerTemplate<karo::AsyncFileRequestId,karo::AsyncRequestManagerNoArgs>::clearRequest(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BOOL4 v6;
  _QWORD *v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(_QWORD **)(a1 + 72);
  if (v4)
  {
    v5 = a1 + 72;
    do
    {
      v6 = std::less<karo::AsyncFileRequestId>::operator()[abi:nn180100]((uint64_t)(v4 + 4), a2);
      v7 = v4 + 1;
      if (!v6)
      {
        v7 = v4;
        v5 = (uint64_t)v4;
      }
      v4 = (_QWORD *)*v7;
    }
    while (*v7);
    if (v5 != a1 + 72 && !std::less<karo::AsyncFileRequestId>::operator()[abi:nn180100](a2, v5 + 32))
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 64) + 16))(*(_QWORD *)(v5 + 64));
      std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((_QWORD *)(a1 + 64), v5);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void karo::AsyncFileLoader::LoadJob::~LoadJob(void **this)
{
  *this = off_1E42C2C58;
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  karo::Job::~Job((karo::Job *)this);
}

void std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*(_QWORD *)(a1 + 8));
    v2 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_8;
    }
    else
    {
LABEL_6:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_8:
        operator delete((void *)a1);
        return;
      }
    }
    operator delete(*(void **)(a1 + 32));
    goto LABEL_8;
  }
}

void md::RenderBatch::~RenderBatch(md::RenderBatch *this)
{
  void *v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (**v8)(_QWORD);
  BOOL v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  char v21;

  v2 = (void *)*((_QWORD *)this + 40);
  if (v2)
  {
    *((_QWORD *)this + 41) = v2;
    operator delete(v2);
  }
  if (*((_BYTE *)this + 312))
  {
    v3 = (void (***)(_QWORD))*((_QWORD *)this + 36);
    if (v3)
    {
      v4 = (void (***)(_QWORD))*((_QWORD *)this + 37);
      v5 = (void *)*((_QWORD *)this + 36);
      if (v4 != v3)
      {
        v6 = v4 - 28;
        v7 = v4 - 28;
        do
        {
          v8 = *v7;
          v7 -= 28;
          (*v8)(v6);
          v9 = v6 == v3;
          v6 = v7;
        }
        while (!v9);
        v5 = (void *)*((_QWORD *)this + 36);
      }
      *((_QWORD *)this + 37) = v3;
      operator delete(v5);
    }
  }
  v10 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(v10 + 72);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = *(std::__shared_weak_count **)(v10 + 8);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    MEMORY[0x1A1AF4E00](v10, 0x1020C408635837CLL);
  }
  v17 = (_QWORD *)*((_QWORD *)this + 32);
  if (v17)
  {
    do
    {
      v18 = (_QWORD *)*v17;
      operator delete(v17);
      v17 = v18;
    }
    while (v18);
  }
  v19 = (void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v19)
    operator delete(v19);
  v20 = *((unsigned int *)this + 56);
  if ((_DWORD)v20 != -1)
    (*(&off_1E42F43B8 + v20))((int)&v21, this);
  *((_DWORD *)this + 56) = -1;
}

void md::RenderBatchManager::~RenderBatchManager(md::RenderBatchManager *this)
{
  md::RenderBatch **v2;
  md::RenderBatch **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  BOOL v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void **v32;
  void **v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t **v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void (***v54)(_QWORD);
  uint64_t *v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t **v58;
  unint64_t v59;
  uint64_t **v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void (***v68)(_QWORD);
  uint64_t *v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t **v72;
  unint64_t v73;
  uint64_t **v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  md::RenderBatch *v82;
  uint64_t *v83;
  uint64_t **v84;
  uint64_t *v85;
  uint64_t **v86;
  unint64_t v87;
  uint64_t **v88;
  char *v89;
  char *v90;
  void *v91;
  char *v92;
  char *v93;
  uint64_t **v94;
  uint64_t *v95;
  uint64_t v96;

  v2 = (md::RenderBatch **)*((_QWORD *)this + 1);
  v3 = (md::RenderBatch **)*((_QWORD *)this + 2);
  while (v2 != v3)
  {
    if (*v2)
    {
      if (*((_QWORD *)this + 6))
      {
        md::RenderBatch::~RenderBatch(*v2);
        *v4 = *((_QWORD *)this + 9);
        *((_QWORD *)this + 9) = v4;
      }
    }
    ++v2;
  }
  v95 = 0;
  v96 = 0;
  v94 = &v95;
  v5 = (_QWORD *)*((_QWORD *)this + 43);
  if (v5)
  {
    v6 = 0;
    do
    {
      v7 = &v95;
      v8 = &v95;
      if (v95)
      {
        v9 = v95;
        while (1)
        {
          while (1)
          {
            v8 = (uint64_t **)v9;
            v10 = v9[4];
            if ((unint64_t)v5 >= v10)
              break;
            v9 = *v8;
            v7 = v8;
            if (!*v8)
              goto LABEL_18;
          }
          if (v10 >= (unint64_t)v5)
            break;
          v9 = v8[1];
          if (!v9)
          {
            v7 = v8 + 1;
            goto LABEL_18;
          }
        }
      }
      else
      {
LABEL_18:
        v11 = (uint64_t *)operator new(0x28uLL);
        v11[4] = (uint64_t)v5;
        *v11 = 0;
        v11[1] = 0;
        v11[2] = (uint64_t)v8;
        *v7 = v11;
        if (*v94)
        {
          v94 = (uint64_t **)*v94;
          v11 = *v7;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v95, v11);
        v6 = ++v96;
        v5 = (_QWORD *)*((_QWORD *)this + 43);
      }
      v5 = (_QWORD *)*v5;
      *((_QWORD *)this + 43) = v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  v12 = *((_QWORD *)this + 41);
  v13 = (char *)*((_QWORD *)this + 38);
  v14 = (char *)this + 312;
  v15 = v6 == *((_QWORD *)this + 40) * v12 || v13 == v14;
  if (v15 || v12 == 0)
  {
    if (v13 == v14)
      goto LABEL_30;
    goto LABEL_116;
  }
  v51 = 1;
  do
  {
    if (v51)
    {
      v52 = 0;
      v53 = *((_QWORD *)v13 + 4);
      do
      {
        v54 = (void (***)(_QWORD))(v53 + 248 * v52);
        v55 = v95;
        if (!v95)
          goto LABEL_95;
        v56 = &v95;
        do
        {
          v57 = v55;
          v58 = v56;
          v59 = v55[4];
          v60 = (uint64_t **)(v55 + 1);
          if (v59 >= (unint64_t)v54)
          {
            v60 = (uint64_t **)v57;
            v56 = (uint64_t **)v57;
          }
          v55 = *v60;
        }
        while (v55);
        if (v56 == &v95)
          goto LABEL_95;
        if (v59 < (unint64_t)v54)
          v57 = (uint64_t *)v58;
        if ((unint64_t)v54 < v57[4])
        {
LABEL_95:
          (**v54)(v54);
          v12 = *((_QWORD *)this + 41);
        }
        ++v52;
        v51 = v12;
      }
      while (v52 < v12);
    }
    v61 = (char *)*((_QWORD *)v13 + 1);
    if (v61)
    {
      do
      {
        v62 = v61;
        v61 = *(char **)v61;
      }
      while (v61);
    }
    else
    {
      do
      {
        v62 = (char *)*((_QWORD *)v13 + 2);
        v15 = *(_QWORD *)v62 == (_QWORD)v13;
        v13 = v62;
      }
      while (!v15);
    }
    v13 = v62;
  }
  while (v62 != v14);
  v13 = (char *)*((_QWORD *)this + 38);
  if (v13 != v14)
  {
    do
    {
LABEL_116:
      free(*((void **)v13 + 4));
      v63 = (char *)*((_QWORD *)v13 + 1);
      if (v63)
      {
        do
        {
          v64 = v63;
          v63 = *(char **)v63;
        }
        while (v63);
      }
      else
      {
        do
        {
          v64 = (char *)*((_QWORD *)v13 + 2);
          v15 = *(_QWORD *)v64 == (_QWORD)v13;
          v13 = v64;
        }
        while (!v15);
      }
      v13 = v64;
    }
    while (v64 != v14);
  }
LABEL_30:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 39));
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 38) = v14;
  *((_QWORD *)this + 43) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v95);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 39));
  v95 = 0;
  v96 = 0;
  v94 = &v95;
  v17 = (_QWORD *)*((_QWORD *)this + 37);
  if (v17)
  {
    v18 = 0;
    do
    {
      v19 = &v95;
      v20 = &v95;
      if (v95)
      {
        v21 = v95;
        while (1)
        {
          while (1)
          {
            v20 = (uint64_t **)v21;
            v22 = v21[4];
            if ((unint64_t)v17 >= v22)
              break;
            v21 = *v20;
            v19 = v20;
            if (!*v20)
              goto LABEL_41;
          }
          if (v22 >= (unint64_t)v17)
            break;
          v21 = v20[1];
          if (!v21)
          {
            v19 = v20 + 1;
            goto LABEL_41;
          }
        }
      }
      else
      {
LABEL_41:
        v23 = (uint64_t *)operator new(0x28uLL);
        v23[4] = (uint64_t)v17;
        *v23 = 0;
        v23[1] = 0;
        v23[2] = (uint64_t)v20;
        *v19 = v23;
        if (*v94)
        {
          v94 = (uint64_t **)*v94;
          v23 = *v19;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v95, v23);
        v18 = ++v96;
        v17 = (_QWORD *)*((_QWORD *)this + 37);
      }
      v17 = (_QWORD *)*v17;
      *((_QWORD *)this + 37) = v17;
    }
    while (v17);
  }
  else
  {
    v18 = 0;
  }
  v24 = *((_QWORD *)this + 35);
  v25 = (char *)*((_QWORD *)this + 32);
  v26 = (char *)this + 264;
  if (v18 == *((_QWORD *)this + 34) * v24 || v25 == v26 || v24 == 0)
  {
    if (v25 == v26)
      goto LABEL_53;
    goto LABEL_146;
  }
  v65 = 1;
  do
  {
    if (v65)
    {
      v66 = 0;
      v67 = *((_QWORD *)v25 + 4);
      do
      {
        v68 = (void (***)(_QWORD))(v67 + 224 * v66);
        v69 = v95;
        if (!v95)
          goto LABEL_125;
        v70 = &v95;
        do
        {
          v71 = v69;
          v72 = v70;
          v73 = v69[4];
          v74 = (uint64_t **)(v69 + 1);
          if (v73 >= (unint64_t)v68)
          {
            v74 = (uint64_t **)v71;
            v70 = (uint64_t **)v71;
          }
          v69 = *v74;
        }
        while (v69);
        if (v70 == &v95)
          goto LABEL_125;
        if (v73 < (unint64_t)v68)
          v71 = (uint64_t *)v72;
        if ((unint64_t)v68 < v71[4])
        {
LABEL_125:
          (**v68)(v68);
          v24 = *((_QWORD *)this + 35);
        }
        ++v66;
        v65 = v24;
      }
      while (v66 < v24);
    }
    v75 = (char *)*((_QWORD *)v25 + 1);
    if (v75)
    {
      do
      {
        v76 = v75;
        v75 = *(char **)v75;
      }
      while (v75);
    }
    else
    {
      do
      {
        v76 = (char *)*((_QWORD *)v25 + 2);
        v15 = *(_QWORD *)v76 == (_QWORD)v25;
        v25 = v76;
      }
      while (!v15);
    }
    v25 = v76;
  }
  while (v76 != v26);
  v25 = (char *)*((_QWORD *)this + 32);
  if (v25 != v26)
  {
    do
    {
LABEL_146:
      free(*((void **)v25 + 4));
      v77 = (char *)*((_QWORD *)v25 + 1);
      if (v77)
      {
        do
        {
          v78 = v77;
          v77 = *(char **)v77;
        }
        while (v77);
      }
      else
      {
        do
        {
          v78 = (char *)*((_QWORD *)v25 + 2);
          v15 = *(_QWORD *)v78 == (_QWORD)v25;
          v25 = v78;
        }
        while (!v15);
      }
      v25 = v78;
    }
    while (v78 != v26);
  }
LABEL_53:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 33));
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 32) = v26;
  *((_QWORD *)this + 37) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v95);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 33));
  geo::Pool<md::MaterialRenderable>::disposeElements((uint64_t)this + 208);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 27));
  v29 = (_QWORD *)*((_QWORD *)this + 23);
  if (v29)
  {
    do
    {
      v30 = (_QWORD *)*v29;
      operator delete(v29);
      v29 = v30;
    }
    while (v30);
  }
  v31 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v31)
    operator delete(v31);
  v32 = (void **)*((_QWORD *)this + 18);
  if (v32)
  {
    do
    {
      v33 = (void **)*v32;
      v34 = *((unsigned int *)v32 + 60);
      if ((_DWORD)v34 != -1)
        (*(&off_1E42F43B8 + v34))((int)&v94, (md::MaterialRenderBatchKey *)(v32 + 2));
      operator delete(v32);
      v32 = v33;
    }
    while (v33);
  }
  v35 = (void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v35)
    operator delete(v35);
  v36 = (_QWORD *)*((_QWORD *)this + 13);
  if (v36)
  {
    do
    {
      v37 = (_QWORD *)*v36;
      operator delete(v36);
      v36 = v37;
    }
    while (v37);
  }
  v38 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v38)
    operator delete(v38);
  v95 = 0;
  v96 = 0;
  v94 = &v95;
  v39 = (_QWORD *)*((_QWORD *)this + 9);
  if (v39)
  {
    v40 = 0;
    do
    {
      v41 = &v95;
      v42 = &v95;
      if (v95)
      {
        v43 = v95;
        while (1)
        {
          while (1)
          {
            v42 = (uint64_t **)v43;
            v44 = v43[4];
            if ((unint64_t)v39 >= v44)
              break;
            v43 = *v42;
            v41 = v42;
            if (!*v42)
              goto LABEL_79;
          }
          if (v44 >= (unint64_t)v39)
            break;
          v43 = v42[1];
          if (!v43)
          {
            v41 = v42 + 1;
            goto LABEL_79;
          }
        }
      }
      else
      {
LABEL_79:
        v45 = (uint64_t *)operator new(0x28uLL);
        v45[4] = (uint64_t)v39;
        *v45 = 0;
        v45[1] = 0;
        v45[2] = (uint64_t)v42;
        *v41 = v45;
        if (*v94)
        {
          v94 = (uint64_t **)*v94;
          v45 = *v41;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v95, v45);
        v40 = ++v96;
        v39 = (_QWORD *)*((_QWORD *)this + 9);
      }
      v39 = (_QWORD *)*v39;
      *((_QWORD *)this + 9) = v39;
    }
    while (v39);
  }
  else
  {
    v40 = 0;
  }
  v46 = *((_QWORD *)this + 7);
  v47 = (char *)*((_QWORD *)this + 4);
  v48 = (char *)this + 40;
  if (v40 == *((_QWORD *)this + 6) * v46 || v47 == v48 || v46 == 0)
  {
    if (v47 == v48)
      goto LABEL_174;
    goto LABEL_178;
  }
  v79 = 1;
  do
  {
    if (v79)
    {
      v80 = 0;
      v81 = *((_QWORD *)v47 + 4);
      do
      {
        v82 = (md::RenderBatch *)(v81 + 384 * v80);
        v83 = v95;
        if (!v95)
          goto LABEL_155;
        v84 = &v95;
        do
        {
          v85 = v83;
          v86 = v84;
          v87 = v83[4];
          v88 = (uint64_t **)(v83 + 1);
          if (v87 >= (unint64_t)v82)
          {
            v88 = (uint64_t **)v85;
            v84 = (uint64_t **)v85;
          }
          v83 = *v88;
        }
        while (v83);
        if (v84 == &v95)
          goto LABEL_155;
        if (v87 < (unint64_t)v82)
          v85 = (uint64_t *)v86;
        if ((unint64_t)v82 < v85[4])
        {
LABEL_155:
          md::RenderBatch::~RenderBatch(v82);
          v46 = *((_QWORD *)this + 7);
        }
        ++v80;
        v79 = v46;
      }
      while (v80 < v46);
    }
    v89 = (char *)*((_QWORD *)v47 + 1);
    if (v89)
    {
      do
      {
        v90 = v89;
        v89 = *(char **)v89;
      }
      while (v89);
    }
    else
    {
      do
      {
        v90 = (char *)*((_QWORD *)v47 + 2);
        v15 = *(_QWORD *)v90 == (_QWORD)v47;
        v47 = v90;
      }
      while (!v15);
    }
    v47 = v90;
  }
  while (v90 != v48);
  v47 = (char *)*((_QWORD *)this + 4);
  if (v47 != v48)
  {
    do
    {
LABEL_178:
      free(*((void **)v47 + 4));
      v92 = (char *)*((_QWORD *)v47 + 1);
      if (v92)
      {
        do
        {
          v93 = v92;
          v92 = *(char **)v92;
        }
        while (v92);
      }
      else
      {
        do
        {
          v93 = (char *)*((_QWORD *)v47 + 2);
          v15 = *(_QWORD *)v93 == (_QWORD)v47;
          v47 = v93;
        }
        while (!v15);
      }
      v47 = v93;
    }
    while (v93 != v48);
  }
LABEL_174:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 5));
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = v48;
  *((_QWORD *)this + 9) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v95);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 5));
  v91 = (void *)*((_QWORD *)this + 1);
  if (v91)
  {
    *((_QWORD *)this + 2) = v91;
    operator delete(v91);
  }
}

void sub_19F8B31C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 216));
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,std::__unordered_map_hasher<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,std::hash<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,std::equal_to<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,true>,std::__unordered_map_equal<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,std::equal_to<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,std::hash<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,true>,std::allocator<std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>>>::find<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int8x8_t v7;
  uint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t ***v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  _BOOL4 v26;
  BOOL v28;
  char v29;
  char v31;
  char v32;
  char *v33;

  v4 = *(unsigned int *)(a2 + 224);
  if ((_DWORD)v4 == -1)
  {
    v5 = 299792458;
  }
  else
  {
    v5 = ((uint64_t (*)(char *, uint64_t))off_1E42EFB38[v4])(&v31, a2);
    v6 = *(unsigned int *)(a2 + 224);
    if ((_DWORD)v6 != -1)
    {
      v7 = (int8x8_t)a1[1];
      if (!*(_QWORD *)&v7)
        return 0;
      goto LABEL_7;
    }
  }
  v6 = -1;
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
LABEL_7:
  v8 = __ROR8__(v6 + 16, 16);
  v9 = (0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v8 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v5)))) >> 47))) ^ v6;
  v10 = (uint8x8_t)vcnt_s8(v7);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = v9;
    if (v9 >= *(_QWORD *)&v7)
      v11 = v9 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = v9 & (*(_QWORD *)&v7 - 1);
  }
  v12 = *(uint64_t ****)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    if (v10.u32[0] < 2uLL)
    {
      v14 = *(_QWORD *)&v7 - 1;
      while (1)
      {
        v15 = v13[1];
        if (v15 == (uint64_t *)v9)
        {
          v16 = *((unsigned int *)v13 + 60);
          v17 = *(_DWORD *)(a2 + 224);
          v19 = v17 == (_DWORD)v16 && v17 != -1;
          if ((_DWORD)v16 == -1 || !v19)
          {
            v20 = v17 == -1;
            if ((_DWORD)v16 == -1)
              v21 = v20;
            else
              v21 = v19;
            if (v21)
              return v13;
          }
          else
          {
            v33 = &v32;
            if ((((uint64_t (*)(char **, uint64_t **, uint64_t))off_1E42EFB50[v16])(&v33, v13 + 2, a2) & 1) != 0)
              return v13;
          }
        }
        else if (((unint64_t)v15 & v14) != v11)
        {
          return 0;
        }
        v13 = (uint64_t **)*v13;
        if (!v13)
          return v13;
      }
    }
    do
    {
      v22 = (unint64_t)v13[1];
      if (v22 == v9)
      {
        v23 = *((unsigned int *)v13 + 60);
        v24 = *(_DWORD *)(a2 + 224);
        v26 = v24 == (_DWORD)v23 && v24 != -1;
        if ((_DWORD)v23 == -1 || !v26)
        {
          v28 = v24 == -1;
          if ((_DWORD)v23 == -1)
            v29 = v28;
          else
            v29 = v26;
          if ((v29 & 1) != 0)
            return v13;
        }
        else
        {
          v33 = &v32;
          if ((((uint64_t (*)(char **, uint64_t **, uint64_t))off_1E42EFB50[v23])(&v33, v13 + 2, a2) & 1) != 0)
            return v13;
        }
      }
      else
      {
        if (v22 >= *(_QWORD *)&v7)
          v22 %= *(_QWORD *)&v7;
        if (v22 != v11)
          return 0;
      }
      v13 = (uint64_t **)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t md::RenderBatchManager::destroyRenderable(uint64_t this, md::MeshRenderable *a2)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;

  v3 = this;
  v4 = *((unsigned __int8 *)a2 + 8);
  if (v4 == 2)
  {
    if (!*(_QWORD *)(this + 320))
      return this;
    this = (**(uint64_t (***)(md::MeshRenderable *))a2)(a2);
    v5 = (_QWORD *)(v3 + 344);
    goto LABEL_7;
  }
  if (v4 == 1 && *(_QWORD *)(this + 224))
  {
    this = (**(uint64_t (***)(md::MeshRenderable *))a2)(a2);
    v5 = (_QWORD *)(v3 + 248);
LABEL_7:
    *(_QWORD *)a2 = *v5;
    *v5 = a2;
  }
  return this;
}

void std::__function::__func<std::__bind<void (md::RenderBatchManager::*)(md::MeshRenderable *),md::RenderBatchManager*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (md::RenderBatchManager::*)(md::MeshRenderable *),md::RenderBatchManager*,std::placeholders::__ph<1> const&>>,void ()(md::MeshRenderable *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<std::__bind<void (md::RenderBatchManager::*)(md::MeshRenderable *),md::RenderBatchManager*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (md::RenderBatchManager::*)(md::MeshRenderable *),md::RenderBatchManager*,std::placeholders::__ph<1> const&>>,void ()(md::MeshRenderable *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42C6BE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (md::RenderBatchManager::*)(md::MeshRenderable *),md::RenderBatchManager*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (md::RenderBatchManager::*)(md::MeshRenderable *),md::RenderBatchManager*,std::placeholders::__ph<1> const&>>,void ()(md::MeshRenderable *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C6BE8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (md::RenderBatchManager::*)(md::MeshRenderable *),md::RenderBatchManager*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (md::RenderBatchManager::*)(md::MeshRenderable *),md::RenderBatchManager*,std::placeholders::__ph<1> const&>>,void ()(md::MeshRenderable *)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::MaterialRenderBatchKey,std::__variant_detail::_Trait::DynamicTypedRenderBatchKey,std::__variant_detail::_Trait::MaterialDecalRenderBatchKey> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::MaterialRenderBatchKey,std::__variant_detail::_Trait::DynamicTypedRenderBatchKey,std::__variant_detail::_Trait::MaterialDecalRenderBatchKey> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return !md::MaterialRenderBatchKey::operator!=(a2, a3);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::MaterialRenderBatchKey,std::__variant_detail::_Trait::DynamicTypedRenderBatchKey,std::__variant_detail::_Trait::MaterialDecalRenderBatchKey> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::MaterialRenderBatchKey,std::__variant_detail::_Trait::DynamicTypedRenderBatchKey,std::__variant_detail::_Trait::MaterialDecalRenderBatchKey> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return !md::DynamicTypedRenderBatchKey::operator!=(a2, a3);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::MaterialRenderBatchKey,std::__variant_detail::_Trait::DynamicTypedRenderBatchKey,std::__variant_detail::_Trait::MaterialDecalRenderBatchKey> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::MaterialRenderBatchKey,std::__variant_detail::_Trait::DynamicTypedRenderBatchKey,std::__variant_detail::_Trait::MaterialDecalRenderBatchKey> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return !md::MaterialDecalRenderBatchKey::operator!=(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNKS_4hashINS_7variantIJN2md22MaterialRenderBatchKeyENS8_26DynamicTypedRenderBatchKeyENS8_27MaterialDecalRenderBatchKeyEEEEEclB8nn180100ERKSC_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJS9_SA_SB_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;

  v3 = std::hash<md::BaseRenderBatchKey<ggl::VertexData>>::operator()(a2);
  v4 = (((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      + *(_QWORD *)(a2 + 80)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  v5 = (*(_QWORD *)(a2 + 96) + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583EBLL) ^ v4;
  v6 = (*(unsigned __int8 *)(a2 + 120) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  v7 = (*(_QWORD *)(a2 + 104) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
  v8 = (*(unsigned __int8 *)(a2 + 121) + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583EBLL) ^ v7;
  v9 = (*(unsigned __int8 *)(a2 + 122) + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  if (*(_BYTE *)(a2 + 217))
    v10 = *(_BYTE *)(a2 + 216);
  else
    v10 = 0;
  v11 = ((v9 << 6) + v10 + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
  return ((*(unsigned __int8 *)(a2 + 218) | (v11 << 6)) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNKS_4hashINS_7variantIJN2md22MaterialRenderBatchKeyENS8_26DynamicTypedRenderBatchKeyENS8_27MaterialDecalRenderBatchKeyEEEEEclB8nn180100ERKSC_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJS9_SA_SB_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = std::hash<md::BaseRenderBatchKey<ggl::VertexData>>::operator()(a2);
  return (((v3 - 0x61C8864680B583EBLL) << 6)
        + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
        + *(unsigned int *)(a2 + 80)
        - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNKS_4hashINS_7variantIJN2md22MaterialRenderBatchKeyENS8_26DynamicTypedRenderBatchKeyENS8_27MaterialDecalRenderBatchKeyEEEEEclB8nn180100ERKSC_EUlRKT_E_JRKNS0_6__baseILNS0_6_TraitE1EJS9_SA_SB_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = std::hash<md::BaseRenderBatchKey<ggl::VertexData>>::operator()(a2);
  v4 = (((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      + *(_QWORD *)(a2 + 80)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  return (*(_QWORD *)(a2 + 96) + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583EBLL) ^ v4;
}

void md::RenderBatchManager::process(uint64_t a1, size_t prime, unint64_t a3)
{
  unint64_t v3;
  void **v6;
  uint64_t *v7;
  int8x8_t *v8;
  uint64_t v9;
  __int32 v10;
  _BOOL4 v12;
  BOOL v14;
  char v15;
  char v16;
  void **v17;
  uint64_t **v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _BYTE *v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  char **v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint8x8_t v60;
  uint64_t ***v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  BOOL v66;
  BOOL v67;
  BOOL v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  _BOOL4 v73;
  BOOL v75;
  char v76;
  char v77;
  _QWORD *v78;
  uint64_t v79;
  float v80;
  float v81;
  _BOOL8 v82;
  unint64_t v83;
  unint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  _QWORD *v88;
  size_t v89;
  size_t v90;
  size_t v91;
  _QWORD *i;
  size_t v93;
  uint64_t v94;
  unint64_t v95;
  uint8x8_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  size_t v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint8x8_t v105;
  uint64_t **v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  float v111;
  float v112;
  _BOOL8 v113;
  unint64_t v114;
  unint64_t v115;
  size_t v116;
  void *v117;
  void *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t *v121;
  size_t v122;
  size_t v123;
  size_t v124;
  _QWORD *v125;
  size_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint8x8_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  size_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  _QWORD *v138;
  unint64_t v139;
  unint64_t v140;
  uint8x8_t v141;
  void **v142;
  _QWORD *v143;
  unint64_t v144;
  uint64_t v145;
  float v146;
  float v147;
  _BOOL8 v148;
  unint64_t v149;
  unint64_t v150;
  size_t v151;
  void *v152;
  void *v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  size_t v157;
  size_t v158;
  size_t v159;
  _QWORD *j;
  size_t v161;
  uint64_t v162;
  unint64_t v163;
  uint8x8_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  size_t v168;
  _QWORD *v169;
  _QWORD *v170;
  unint64_t v171;
  void *v172;
  void *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD v177[2];
  char v178;
  char v179;
  char v180;

  v3 = a3;
  v6 = (void **)(a1 + 168);
  v7 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>((_QWORD *)(a1 + 168), a3);
  if (!v7)
    goto LABEL_22;
  v8 = (int8x8_t *)v7[3];
  if (!v8)
    goto LABEL_22;
  v9 = *(unsigned int *)(prime + 224);
  v10 = v8[28].i32[0];
  v12 = v10 == (_DWORD)v9 && v10 != -1;
  if ((_DWORD)v9 == -1 || !v12)
  {
    v14 = v10 == -1;
    if ((_DWORD)v9 == -1)
      v15 = v14;
    else
      v15 = v12;
    if ((v15 & 1) != 0)
      goto LABEL_22;
  }
  else
  {
    v177[0] = &v180;
    v16 = ((uint64_t (*)(_QWORD *, size_t, int8x8_t *))off_1E42EFB20[v9])(v177, prime, v8);
    if ((v16 & 1) == 0)
      goto LABEL_22;
  }
  if (md::RenderBatch::remove(v8, v3))
    *(_BYTE *)(a1 + 80) = 1;
LABEL_22:
  v17 = (void **)(a1 + 128);
  v18 = std::__hash_table<std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,std::__unordered_map_hasher<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,std::hash<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,std::equal_to<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,true>,std::__unordered_map_equal<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,std::equal_to<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,std::hash<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,true>,std::allocator<std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>>>::find<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>((_QWORD *)(a1 + 128), prime);
  if (v18)
    goto LABEL_183;
  v19 = *(char **)(a1 + 72);
  if (!v19)
  {
    v20 = (char *)malloc_type_malloc(*(_QWORD *)(a1 + 64), 0x160B39uLL);
    v21 = v20;
    v23 = (uint64_t **)(a1 + 40);
    v22 = *(uint64_t **)(a1 + 40);
    if (v22)
    {
      while (1)
      {
        while (1)
        {
          v24 = (uint64_t **)v22;
          v25 = v22[4];
          if ((unint64_t)v20 >= v25)
            break;
          v22 = *v24;
          v23 = v24;
          if (!*v24)
            goto LABEL_31;
        }
        if (v25 >= (unint64_t)v20)
          break;
        v22 = v24[1];
        if (!v22)
        {
          v23 = v24 + 1;
          goto LABEL_31;
        }
      }
    }
    else
    {
      v24 = (uint64_t **)(a1 + 40);
LABEL_31:
      v26 = (uint64_t *)operator new(0x28uLL);
      v26[4] = (uint64_t)v21;
      *v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v24;
      *v23 = v26;
      v27 = **(_QWORD **)(a1 + 32);
      if (v27)
      {
        *(_QWORD *)(a1 + 32) = v27;
        v28 = *v23;
      }
      else
      {
        v28 = v26;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v28);
      ++*(_QWORD *)(a1 + 48);
    }
    v19 = *(char **)(a1 + 72);
    v29 = 384 * *(_QWORD *)(a1 + 56) - 384;
    if ((v29 & 0x8000000000000000) == 0)
    {
      v30 = &v21[v29];
      do
      {
        *(_QWORD *)v30 = v19;
        v31 = v30 - 384;
        v19 = v30;
        v30 = v31;
      }
      while (v31 >= v21);
      v19 = v31 + 384;
    }
    *(_QWORD *)(a1 + 72) = v19;
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)v19;
  *v19 = 0;
  *((_DWORD *)v19 + 56) = -1;
  v32 = *(unsigned int *)(prime + 224);
  if ((_DWORD)v32 != -1)
  {
    ((void (*)(char *, char *, size_t))off_1E42F43D0[v32])(&v180, v19, prime);
    *((_DWORD *)v19 + 56) = v32;
  }
  do
  {
    v33 = __ldaxr(&md::RenderBatch::nextId(void)::next);
    v34 = v33 + 1;
  }
  while (__stlxr(v34, &md::RenderBatch::nextId(void)::next));
  *((_QWORD *)v19 + 29) = v34;
  *((_OWORD *)v19 + 15) = 0u;
  *((_OWORD *)v19 + 16) = 0u;
  *((_DWORD *)v19 + 68) = 1065353216;
  *((_QWORD *)v19 + 35) = 0;
  v19[288] = 0;
  v19[312] = 0;
  v19[360] = 0;
  v19[368] = 0;
  *((_QWORD *)v19 + 47) = 0;
  *((_OWORD *)v19 + 20) = 0u;
  *((_OWORD *)v19 + 21) = 0u;
  v19[352] = 0;
  v36 = *(_QWORD *)(a1 + 16);
  v35 = *(_QWORD *)(a1 + 24);
  if (v36 >= v35)
  {
    v38 = *(_BYTE **)(a1 + 8);
    v39 = v36 - (_QWORD)v38;
    v40 = (uint64_t)(v36 - (_QWORD)v38) >> 3;
    v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 61)
      abort();
    v42 = v35 - (_QWORD)v38;
    if (v42 >> 2 > v41)
      v41 = v42 >> 2;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
      v43 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v43 = v41;
    if (v43)
    {
      if (v43 >> 61)
        goto LABEL_381;
      v44 = operator new(8 * v43);
      v39 = v36 - (_QWORD)v38;
    }
    else
    {
      v44 = 0;
    }
    v45 = (char **)&v44[8 * v40];
    v46 = &v44[8 * v43];
    *v45 = v19;
    v37 = v45 + 1;
    if ((_BYTE *)v36 == v38)
    {
      v38 = (_BYTE *)v36;
    }
    else
    {
      v47 = v36 - (_QWORD)v38 - 8;
      if (v47 < 0x58)
        goto LABEL_385;
      if (v36 - (unint64_t)&v44[v39] < 0x20)
        goto LABEL_385;
      v48 = (v47 >> 3) + 1;
      v49 = &v44[8 * v40 - 16];
      v50 = (__int128 *)(v36 - 16);
      v51 = v48 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v52 = *v50;
        *(v49 - 1) = *(v50 - 1);
        *v49 = v52;
        v49 -= 2;
        v50 -= 2;
        v51 -= 4;
      }
      while (v51);
      v45 -= v48 & 0x3FFFFFFFFFFFFFFCLL;
      v36 -= 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
      if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_385:
        do
        {
          v53 = *(char **)(v36 - 8);
          v36 -= 8;
          *--v45 = v53;
        }
        while ((_BYTE *)v36 != v38);
        v38 = *(_BYTE **)(a1 + 8);
      }
    }
    *(_QWORD *)(a1 + 8) = v45;
    *(_QWORD *)(a1 + 16) = v37;
    *(_QWORD *)(a1 + 24) = v46;
    if (v38)
      operator delete(v38);
  }
  else
  {
    *(_QWORD *)v36 = v19;
    v36 += 8;
    v37 = (_QWORD *)v36;
  }
  *(_QWORD *)(a1 + 16) = v37;
  v54 = *(unsigned int *)(prime + 224);
  v176 = v37;
  if ((_DWORD)v54 == -1)
  {
    v55 = 299792458;
LABEL_70:
    v56 = -1;
    goto LABEL_71;
  }
  v55 = ((uint64_t (*)(_QWORD *, size_t))off_1E42EFB38[v54])(v177, prime);
  v56 = *(unsigned int *)(prime + 224);
  if ((_DWORD)v56 == -1)
    goto LABEL_70;
LABEL_71:
  v57 = __ROR8__(v56 + 16, 16);
  v58 = (0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69
         * (v57 ^ ((0x9DDFEA08EB382D69 * (v57 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v57 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v57 ^ ((0x9DDFEA08EB382D69 * (v57 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v57 ^ v55)))) >> 47))) ^ v56;
  v59 = *(_QWORD *)(a1 + 136);
  if (v59)
  {
    v60 = (uint8x8_t)vcnt_s8((int8x8_t)v59);
    v60.i16[0] = vaddlv_u8(v60);
    if (v60.u32[0] > 1uLL)
    {
      v36 = v58;
      if (v58 >= v59)
        v36 = v58 % v59;
    }
    else
    {
      v36 = v58 & (v59 - 1);
    }
    v61 = (uint64_t ***)*((_QWORD *)*v17 + v36);
    if (v61)
    {
      v18 = *v61;
      if (*v61)
      {
        if (v60.u32[0] < 2uLL)
        {
          while (1)
          {
            v62 = v18[1];
            if (v62 == (uint64_t *)v58)
            {
              v63 = *((unsigned int *)v18 + 60);
              v64 = *(_DWORD *)(prime + 224);
              v66 = v64 == (_DWORD)v63 && v64 != -1;
              if ((_DWORD)v63 == -1 || !v66)
              {
                v67 = v64 == -1;
                if ((_DWORD)v63 == -1)
                  v68 = v67;
                else
                  v68 = v66;
                if (v68)
                  goto LABEL_183;
              }
              else
              {
                v177[0] = &v180;
                if ((((uint64_t (*)(_QWORD *, uint64_t **, size_t))off_1E42EFB50[v63])(v177, v18 + 2, prime) & 1) != 0)
                  goto LABEL_183;
              }
            }
            else if (((unint64_t)v62 & (v59 - 1)) != v36)
            {
              goto LABEL_123;
            }
            v18 = (uint64_t **)*v18;
            if (!v18)
              goto LABEL_123;
          }
        }
        do
        {
          v69 = (unint64_t)v18[1];
          if (v69 == v58)
          {
            v70 = *((unsigned int *)v18 + 60);
            v71 = *(_DWORD *)(prime + 224);
            v73 = v71 == (_DWORD)v70 && v71 != -1;
            if ((_DWORD)v70 == -1 || !v73)
            {
              v75 = v71 == -1;
              if ((_DWORD)v70 == -1)
                v76 = v75;
              else
                v76 = v73;
              if ((v76 & 1) != 0)
                goto LABEL_183;
            }
            else
            {
              v177[0] = &v180;
              v77 = ((uint64_t (*)(_QWORD *, uint64_t **, size_t))off_1E42EFB50[v70])(v177, v18 + 2, prime);
              if ((v77 & 1) != 0)
                goto LABEL_183;
            }
          }
          else
          {
            if (v69 >= v59)
              v69 %= v59;
            if (v69 != v36)
              break;
          }
          v18 = (uint64_t **)*v18;
        }
        while (v18);
      }
    }
  }
LABEL_123:
  v78 = operator new(0x100uLL);
  v177[0] = v78;
  v177[1] = a1 + 144;
  v174 = (_QWORD *)v58;
  v175 = (_QWORD *)(a1 + 144);
  v178 = 0;
  *v78 = 0;
  v78[1] = v58;
  *((_BYTE *)v78 + 16) = 0;
  *((_DWORD *)v78 + 60) = -1;
  v79 = *(unsigned int *)(prime + 224);
  if ((_DWORD)v79 != -1)
  {
    ((void (*)(char *, _QWORD *, size_t))off_1E42F43D0[v79])(&v179, v78 + 2, prime);
    *((_DWORD *)v78 + 60) = v79;
  }
  v78[31] = *(v176 - 1);
  v178 = 1;
  v80 = (float)(unint64_t)(*(_QWORD *)(a1 + 152) + 1);
  v81 = *(float *)(a1 + 160);
  if (v59 && (float)(v81 * (float)v59) >= v80)
    goto LABEL_174;
  v82 = 1;
  if (v59 >= 3)
    v82 = (v59 & (v59 - 1)) != 0;
  v83 = v82 | (2 * v59);
  v84 = vcvtps_u32_f32(v80 / v81);
  if (v83 <= v84)
    prime = v84;
  else
    prime = v83;
  if (prime == 1)
  {
    prime = 2;
    v36 = (unint64_t)v174;
  }
  else
  {
    v36 = (unint64_t)v174;
    if ((prime & (prime - 1)) != 0)
      prime = std::__next_prime(prime);
  }
  v59 = *(_QWORD *)(a1 + 136);
  if (prime > v59)
  {
LABEL_137:
    if (prime >> 61)
      goto LABEL_381;
    v85 = operator new(8 * prime);
    v86 = *v17;
    *v17 = v85;
    if (v86)
      operator delete(v86);
    v87 = 0;
    *(_QWORD *)(a1 + 136) = prime;
    do
      *((_QWORD *)*v17 + v87++) = 0;
    while (prime != v87);
    v88 = (_QWORD *)*v175;
    if (!*v175)
      goto LABEL_161;
    v89 = v88[1];
    v90 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v91 = v89 & v90;
      *((_QWORD *)*v17 + v91) = v175;
      for (i = (_QWORD *)*v88; *v88; i = (_QWORD *)*v88)
      {
        v93 = i[1] & v90;
        if (v93 == v91)
        {
          v88 = i;
        }
        else if (*((_QWORD *)*v17 + v93))
        {
          *v88 = *i;
          v94 = 8 * v93;
          *i = **(_QWORD **)((char *)*v17 + v94);
          **(_QWORD **)((char *)*v17 + v94) = i;
        }
        else
        {
          *((_QWORD *)*v17 + v93) = v88;
          v88 = i;
          v91 = v93;
        }
      }
LABEL_161:
      v59 = prime;
      goto LABEL_162;
    }
    if (v89 >= prime)
      v89 %= prime;
    *((_QWORD *)*v17 + v89) = v175;
    v98 = (_QWORD *)*v88;
    if (!*v88)
      goto LABEL_161;
    while (1)
    {
      v100 = v98[1];
      if (v100 >= prime)
        v100 %= prime;
      if (v100 != v89)
      {
        if (!*((_QWORD *)*v17 + v100))
        {
          *((_QWORD *)*v17 + v100) = v88;
          goto LABEL_166;
        }
        *v88 = *v98;
        v99 = 8 * v100;
        *v98 = **(_QWORD **)((char *)*v17 + v99);
        **(_QWORD **)((char *)*v17 + v99) = v98;
        v98 = v88;
      }
      v100 = v89;
LABEL_166:
      v88 = v98;
      v98 = (_QWORD *)*v98;
      v89 = v100;
      if (!v98)
        goto LABEL_161;
    }
  }
  if (prime >= v59)
    goto LABEL_162;
  v95 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 152) / *(float *)(a1 + 160));
  if (v59 < 3 || (v96 = (uint8x8_t)vcnt_s8((int8x8_t)v59), v96.i16[0] = vaddlv_u8(v96), v96.u32[0] > 1uLL))
  {
    v95 = std::__next_prime(v95);
  }
  else
  {
    v97 = 1 << -(char)__clz(v95 - 1);
    if (v95 >= 2)
      v95 = v97;
  }
  if (prime <= v95)
    prime = v95;
  if (prime < v59)
  {
    if (!prime)
    {
      v173 = *v17;
      *v17 = 0;
      if (v173)
        operator delete(v173);
      v59 = 0;
      *(_QWORD *)(a1 + 136) = 0;
      goto LABEL_162;
    }
    goto LABEL_137;
  }
  v59 = *(_QWORD *)(a1 + 136);
LABEL_162:
  if ((v59 & (v59 - 1)) != 0)
  {
    if (v36 >= v59)
      v36 %= v59;
  }
  else
  {
    v36 &= v59 - 1;
  }
LABEL_174:
  v101 = (_QWORD *)*((_QWORD *)*v17 + v36);
  if (v101)
  {
    *(_QWORD *)v177[0] = *v101;
    *v101 = v177[0];
  }
  else
  {
    *(_QWORD *)v177[0] = *v175;
    *v175 = v177[0];
    *((_QWORD *)*v17 + v36) = v175;
    if (*(_QWORD *)v177[0])
    {
      v102 = *(_QWORD *)(*(_QWORD *)v177[0] + 8);
      if ((v59 & (v59 - 1)) != 0)
      {
        if (v102 >= v59)
          v102 %= v59;
      }
      else
      {
        v102 &= v59 - 1;
      }
      *((_QWORD *)*v17 + v102) = v177[0];
    }
  }
  v18 = (uint64_t **)v177[0];
  ++*(_QWORD *)(a1 + 152);
LABEL_183:
  v103 = v18[31];
  v104 = v103[31];
  if (v104)
  {
    v105 = (uint8x8_t)vcnt_s8((int8x8_t)v104);
    v105.i16[0] = vaddlv_u8(v105);
    if (v105.u32[0] > 1uLL)
    {
      prime = v3;
      if (v104 <= v3)
        prime = v3 % v104;
    }
    else
    {
      prime = (v104 - 1) & v3;
    }
    v106 = *(uint64_t ***)(v103[30] + 8 * prime);
    if (v106)
    {
      v107 = *v106;
      if (v107)
      {
        if (v105.u32[0] < 2uLL)
        {
          while (1)
          {
            v109 = v107[1];
            if (v109 == v3)
            {
              if (__PAIR64__(*((unsigned __int16 *)v107 + 9), *((unsigned __int16 *)v107 + 8)) == __PAIR64__(WORD1(v3), (unsigned __int16)v3)&& *((_DWORD *)v107 + 5) == HIDWORD(v3))
              {
                goto LABEL_278;
              }
            }
            else if ((v109 & (v104 - 1)) != prime)
            {
              goto LABEL_207;
            }
            v107 = (uint64_t *)*v107;
            if (!v107)
              goto LABEL_207;
          }
        }
        do
        {
          v108 = v107[1];
          if (v108 == v3)
          {
            if (__PAIR64__(*((unsigned __int16 *)v107 + 9), *((unsigned __int16 *)v107 + 8)) == __PAIR64__(WORD1(v3), (unsigned __int16)v3)&& *((_DWORD *)v107 + 5) == HIDWORD(v3))
            {
              goto LABEL_278;
            }
          }
          else
          {
            if (v108 >= v104)
              v108 %= v104;
            if (v108 != prime)
              break;
          }
          v107 = (uint64_t *)*v107;
        }
        while (v107);
      }
    }
  }
LABEL_207:
  v110 = operator new(0x18uLL);
  *v110 = 0;
  v110[1] = v3;
  v110[2] = v3;
  v111 = (float)(unint64_t)(v103[33] + 1);
  v112 = *((float *)v103 + 68);
  if (!v104 || (float)(v112 * (float)v104) < v111)
  {
    v113 = 1;
    if (v104 >= 3)
      v113 = (v104 & (v104 - 1)) != 0;
    v114 = v113 | (2 * v104);
    v115 = vcvtps_u32_f32(v111 / v112);
    if (v114 <= v115)
      v116 = v115;
    else
      v116 = v114;
    if (v116 == 1)
    {
      v116 = 2;
    }
    else if ((v116 & (v116 - 1)) != 0)
    {
      v116 = std::__next_prime(v116);
      v104 = v103[31];
    }
    if (v116 <= v104)
    {
      if (v116 >= v104)
        goto LABEL_259;
      v129 = vcvtps_u32_f32((float)(unint64_t)v103[33] / *((float *)v103 + 68));
      if (v104 < 3 || (v130 = (uint8x8_t)vcnt_s8((int8x8_t)v104), v130.i16[0] = vaddlv_u8(v130), v130.u32[0] > 1uLL))
      {
        v129 = std::__next_prime(v129);
      }
      else
      {
        v131 = 1 << -(char)__clz(v129 - 1);
        if (v129 >= 2)
          v129 = v131;
      }
      if (v116 <= v129)
        v116 = v129;
      if (v116 >= v104)
        goto LABEL_259;
      if (!v116)
      {
        v136 = (void *)v103[30];
        v103[30] = 0;
        if (v136)
          operator delete(v136);
        v103[31] = 0;
        goto LABEL_259;
      }
    }
    if (v116 >> 61)
      goto LABEL_381;
    v117 = operator new(8 * v116);
    v118 = (void *)v103[30];
    v103[30] = (uint64_t)v117;
    if (v118)
      operator delete(v118);
    v119 = 0;
    v103[31] = v116;
    do
      *(_QWORD *)(v103[30] + 8 * v119++) = 0;
    while (v116 != v119);
    v120 = (_QWORD *)v103[32];
    if (!v120)
      goto LABEL_259;
    v121 = v103 + 32;
    v122 = v120[1];
    v123 = v116 - 1;
    if ((v116 & (v116 - 1)) == 0)
    {
      v124 = v122 & v123;
      *(_QWORD *)(v103[30] + 8 * v124) = v121;
      while (1)
      {
        v125 = (_QWORD *)*v120;
        if (!*v120)
          break;
        v126 = v125[1] & v123;
        if (v126 == v124)
        {
          v120 = (_QWORD *)*v120;
        }
        else
        {
          v127 = v103[30];
          if (*(_QWORD *)(v127 + 8 * v126))
          {
            *v120 = *v125;
            v128 = 8 * v126;
            *v125 = **(_QWORD **)(v103[30] + v128);
            **(_QWORD **)(v103[30] + v128) = v125;
          }
          else
          {
            *(_QWORD *)(v127 + 8 * v126) = v120;
            v120 = v125;
            v124 = v126;
          }
        }
      }
LABEL_259:
      v104 = v103[31];
      if ((v104 & (v104 - 1)) != 0)
      {
        if (v104 <= v3)
          prime = v3 % v104;
        else
          prime = v3;
      }
      else
      {
        prime = (v104 - 1) & v3;
      }
      goto LABEL_264;
    }
    if (v122 >= v116)
      v122 %= v116;
    *(_QWORD *)(v103[30] + 8 * v122) = v121;
    v132 = (_QWORD *)*v120;
    if (!*v120)
      goto LABEL_259;
    while (1)
    {
      v134 = v132[1];
      if (v134 >= v116)
        v134 %= v116;
      if (v134 != v122)
      {
        v135 = v103[30];
        if (!*(_QWORD *)(v135 + 8 * v134))
        {
          *(_QWORD *)(v135 + 8 * v134) = v120;
          goto LABEL_245;
        }
        *v120 = *v132;
        v133 = 8 * v134;
        *v132 = **(_QWORD **)(v103[30] + v133);
        **(_QWORD **)(v103[30] + v133) = v132;
        v132 = v120;
      }
      v134 = v122;
LABEL_245:
      v120 = v132;
      v132 = (_QWORD *)*v132;
      v122 = v134;
      if (!v132)
        goto LABEL_259;
    }
  }
LABEL_264:
  v137 = v103[30];
  v138 = *(_QWORD **)(v137 + 8 * prime);
  if (v138)
  {
    *v110 = *v138;
LABEL_272:
    *v138 = v110;
    goto LABEL_273;
  }
  *v110 = v103[32];
  v103[32] = (uint64_t)v110;
  *(_QWORD *)(v137 + 8 * prime) = v103 + 32;
  if (*v110)
  {
    v139 = *(_QWORD *)(*v110 + 8);
    if ((v104 & (v104 - 1)) != 0)
    {
      if (v139 >= v104)
        v139 %= v104;
    }
    else
    {
      v139 &= v104 - 1;
    }
    v138 = (_QWORD *)(v103[30] + 8 * v139);
    goto LABEL_272;
  }
LABEL_273:
  ++v103[33];
  if (!*((_BYTE *)v103 + 352))
  {
    *((_BYTE *)v103 + 352) = 1;
    if (*((_BYTE *)v103 + 368))
      *((_BYTE *)v103 + 368) = 0;
    ++v103[47];
  }
  *(_BYTE *)(a1 + 80) = 1;
LABEL_278:
  v140 = *(_QWORD *)(a1 + 176);
  if (v140)
  {
    v141 = (uint8x8_t)vcnt_s8((int8x8_t)v140);
    v141.i16[0] = vaddlv_u8(v141);
    if (v141.u32[0] > 1uLL)
    {
      prime = v3;
      if (v140 <= v3)
        prime = v3 % v140;
    }
    else
    {
      prime = (v140 - 1) & v3;
    }
    v142 = (void **)*((_QWORD *)*v6 + prime);
    if (v142)
    {
      v143 = *v142;
      if (*v142)
      {
        if (v141.u32[0] < 2uLL)
        {
          while (1)
          {
            v145 = v143[1];
            if (v145 == v3)
            {
              if (__PAIR64__(*((unsigned __int16 *)v143 + 9), *((unsigned __int16 *)v143 + 8)) == __PAIR64__(WORD1(v3), (unsigned __int16)v3)&& *((_DWORD *)v143 + 5) == HIDWORD(v3))
              {
                goto LABEL_362;
              }
            }
            else if ((v145 & (v140 - 1)) != prime)
            {
              goto LABEL_302;
            }
            v143 = (_QWORD *)*v143;
            if (!v143)
              goto LABEL_302;
          }
        }
        do
        {
          v144 = v143[1];
          if (v144 == v3)
          {
            if (__PAIR64__(*((unsigned __int16 *)v143 + 9), *((unsigned __int16 *)v143 + 8)) == __PAIR64__(WORD1(v3), (unsigned __int16)v3)&& *((_DWORD *)v143 + 5) == HIDWORD(v3))
            {
              goto LABEL_362;
            }
          }
          else
          {
            if (v144 >= v140)
              v144 %= v140;
            if (v144 != prime)
              break;
          }
          v143 = (_QWORD *)*v143;
        }
        while (v143);
      }
    }
  }
LABEL_302:
  v143 = operator new(0x20uLL);
  *v143 = 0;
  v143[1] = v3;
  v143[2] = v3;
  v143[3] = 0;
  v146 = (float)(unint64_t)(*(_QWORD *)(a1 + 192) + 1);
  v147 = *(float *)(a1 + 200);
  if (v140 && (float)(v147 * (float)v140) >= v146)
  {
    v3 = prime;
    goto LABEL_352;
  }
  v148 = 1;
  if (v140 >= 3)
    v148 = (v140 & (v140 - 1)) != 0;
  v149 = v148 | (2 * v140);
  v150 = vcvtps_u32_f32(v146 / v147);
  if (v149 <= v150)
    v151 = v150;
  else
    v151 = v149;
  if (v151 == 1)
  {
    v151 = 2;
  }
  else if ((v151 & (v151 - 1)) != 0)
  {
    v151 = std::__next_prime(v151);
    v140 = *(_QWORD *)(a1 + 176);
  }
  if (v151 > v140)
    goto LABEL_315;
  if (v151 >= v140)
    goto LABEL_340;
  v163 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 192) / *(float *)(a1 + 200));
  if (v140 < 3 || (v164 = (uint8x8_t)vcnt_s8((int8x8_t)v140), v164.i16[0] = vaddlv_u8(v164), v164.u32[0] > 1uLL))
  {
    v163 = std::__next_prime(v163);
  }
  else
  {
    v165 = 1 << -(char)__clz(v163 - 1);
    if (v163 >= 2)
      v163 = v165;
  }
  if (v151 <= v163)
    v151 = v163;
  if (v151 < v140)
  {
    if (!v151)
    {
      v172 = *v6;
      *v6 = 0;
      if (v172)
        operator delete(v172);
      v140 = 0;
      *(_QWORD *)(a1 + 176) = 0;
      goto LABEL_340;
    }
LABEL_315:
    if (!(v151 >> 61))
    {
      v152 = operator new(8 * v151);
      v153 = *v6;
      *v6 = v152;
      if (v153)
        operator delete(v153);
      v154 = 0;
      *(_QWORD *)(a1 + 176) = v151;
      do
        *((_QWORD *)*v6 + v154++) = 0;
      while (v151 != v154);
      v156 = a1 + 184;
      v155 = *(_QWORD **)(a1 + 184);
      if (!v155)
        goto LABEL_339;
      v157 = v155[1];
      v158 = v151 - 1;
      if ((v151 & (v151 - 1)) == 0)
      {
        v159 = v157 & v158;
        *((_QWORD *)*v6 + v159) = v156;
        for (j = (_QWORD *)*v155; *v155; j = (_QWORD *)*v155)
        {
          v161 = j[1] & v158;
          if (v161 == v159)
          {
            v155 = j;
          }
          else if (*((_QWORD *)*v6 + v161))
          {
            *v155 = *j;
            v162 = 8 * v161;
            *j = **(_QWORD **)((char *)*v6 + v162);
            **(_QWORD **)((char *)*v6 + v162) = j;
          }
          else
          {
            *((_QWORD *)*v6 + v161) = v155;
            v155 = j;
            v159 = v161;
          }
        }
LABEL_339:
        v140 = v151;
        goto LABEL_340;
      }
      if (v157 >= v151)
        v157 %= v151;
      *((_QWORD *)*v6 + v157) = v156;
      v166 = (_QWORD *)*v155;
      if (!*v155)
        goto LABEL_339;
      while (1)
      {
        v168 = v166[1];
        if (v168 >= v151)
          v168 %= v151;
        if (v168 != v157)
        {
          if (!*((_QWORD *)*v6 + v168))
          {
            *((_QWORD *)*v6 + v168) = v155;
            goto LABEL_344;
          }
          *v155 = *v166;
          v167 = 8 * v168;
          *v166 = **(_QWORD **)((char *)*v6 + v167);
          **(_QWORD **)((char *)*v6 + v167) = v166;
          v166 = v155;
        }
        v168 = v157;
LABEL_344:
        v155 = v166;
        v166 = (_QWORD *)*v166;
        v157 = v168;
        if (!v166)
          goto LABEL_339;
      }
    }
LABEL_381:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v140 = *(_QWORD *)(a1 + 176);
LABEL_340:
  if ((v140 & (v140 - 1)) != 0)
  {
    if (v140 <= v3)
      v3 %= v140;
  }
  else
  {
    v3 &= v140 - 1;
  }
LABEL_352:
  v169 = *v6;
  v170 = (_QWORD *)*((_QWORD *)*v6 + v3);
  if (v170)
  {
    *v143 = *v170;
LABEL_360:
    *v170 = v143;
    goto LABEL_361;
  }
  *v143 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v143;
  v169[v3] = a1 + 184;
  if (*v143)
  {
    v171 = *(_QWORD *)(*v143 + 8);
    if ((v140 & (v140 - 1)) != 0)
    {
      if (v171 >= v140)
        v171 %= v140;
    }
    else
    {
      v171 &= v140 - 1;
    }
    v170 = (char *)*v6 + 8 * v171;
    goto LABEL_360;
  }
LABEL_361:
  ++*(_QWORD *)(a1 + 192);
LABEL_362:
  v143[3] = v103;
}

void sub_19F8B4978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F8B49C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  unsigned int *v13;
  uint64_t v15;

  v15 = v13[56];
  if ((_DWORD)v15 != -1)
    (*(&off_1E42F43B8 + v15))((int)&a13, (md::MaterialRenderBatchKey *)v13);
  v13[56] = -1;
  _Unwind_Resume(exception_object);
}

void sub_19F8B49F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  char v5;

  v2 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[60];
      if ((_DWORD)v3 != -1)
        (*(&off_1E42F43B8 + v3))((int)&v5, (md::MaterialRenderBatchKey *)(v2 + 4));
    }
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2md22MaterialRenderBatchKeyENS8_26DynamicTypedRenderBatchKeyENS8_27MaterialDecalRenderBatchKeyEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int16 v23;
  char v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  __int16 v34;

  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 24) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 40) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 56) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 70) = *(_QWORD *)(a3 + 70);
  *(_QWORD *)(a2 + 64) = v15;
  v16 = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a2 + 88) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_QWORD *)(a3 + 104);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a2 + 104) = v19;
  v20 = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a2 + 112) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(_WORD *)(a3 + 120);
  v24 = *(_BYTE *)(a3 + 122);
  *(_BYTE *)(a2 + 124) = 0;
  *(_BYTE *)(a2 + 122) = v24;
  *(_WORD *)(a2 + 120) = v23;
  *(_BYTE *)(a2 + 140) = 0;
  if (*(_BYTE *)(a3 + 140))
  {
    *(_OWORD *)(a2 + 124) = *(_OWORD *)(a3 + 124);
    *(_BYTE *)(a2 + 140) = 1;
  }
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a3 + 144);
  *(_BYTE *)(a2 + 152) = 0;
  *(_BYTE *)(a2 + 208) = 0;
  if (*(_BYTE *)(a3 + 208))
  {
    v25 = *(_QWORD *)(a3 + 160);
    *(_QWORD *)(a2 + 152) = *(_QWORD *)(a3 + 152);
    *(_QWORD *)(a2 + 160) = v25;
    if (v25)
    {
      v26 = (unint64_t *)(v25 + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    *(_BYTE *)(a2 + 168) = *(_BYTE *)(a3 + 168);
    v28 = *(_QWORD *)(a3 + 184);
    *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
    *(_QWORD *)(a2 + 184) = v28;
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = *(_QWORD *)(a3 + 200);
    *(_QWORD *)(a2 + 192) = *(_QWORD *)(a3 + 192);
    *(_QWORD *)(a2 + 200) = v31;
    if (v31)
    {
      v32 = (unint64_t *)(v31 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    *(_BYTE *)(a2 + 208) = 1;
  }
  v34 = *(_WORD *)(a3 + 216);
  *(_BYTE *)(a2 + 218) = *(_BYTE *)(a3 + 218);
  *(_WORD *)(a2 + 216) = v34;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2md22MaterialRenderBatchKeyENS8_26DynamicTypedRenderBatchKeyENS8_27MaterialDecalRenderBatchKeyEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 24) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 40) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 56) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 70) = *(_QWORD *)(a3 + 70);
  *(_QWORD *)(a2 + 64) = v15;
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2md22MaterialRenderBatchKeyENS8_26DynamicTypedRenderBatchKeyENS8_27MaterialDecalRenderBatchKeyEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a3[3];
  a2[2] = a3[2];
  a2[3] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a3[5];
  a2[4] = a3[4];
  a2[5] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = a3[7];
  a2[6] = a3[6];
  a2[7] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = a3[8];
  *(_QWORD *)((char *)a2 + 70) = *(_QWORD *)((char *)a3 + 70);
  a2[8] = v15;
  v16 = a3[11];
  a2[10] = a3[10];
  a2[11] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  a2[12] = a3[12];
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::MaterialRenderBatchKey,std::__variant_detail::_Trait::DynamicTypedRenderBatchKey,std::__variant_detail::_Trait::MaterialDecalRenderBatchKey> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::MaterialRenderBatchKey,std::__variant_detail::_Trait::DynamicTypedRenderBatchKey,std::__variant_detail::_Trait::MaterialDecalRenderBatchKey> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return md::MaterialRenderBatchKey::operator!=(a2, a3);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::MaterialRenderBatchKey,std::__variant_detail::_Trait::DynamicTypedRenderBatchKey,std::__variant_detail::_Trait::MaterialDecalRenderBatchKey> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::MaterialRenderBatchKey,std::__variant_detail::_Trait::DynamicTypedRenderBatchKey,std::__variant_detail::_Trait::MaterialDecalRenderBatchKey> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return md::DynamicTypedRenderBatchKey::operator!=(a2, a3);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::MaterialRenderBatchKey,std::__variant_detail::_Trait::DynamicTypedRenderBatchKey,std::__variant_detail::_Trait::MaterialDecalRenderBatchKey> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::MaterialRenderBatchKey,std::__variant_detail::_Trait::DynamicTypedRenderBatchKey,std::__variant_detail::_Trait::MaterialDecalRenderBatchKey> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return md::MaterialDecalRenderBatchKey::operator!=(a2, a3);
}

void std::__function::__func<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0,std::allocator<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0>,md::MeshRenderable * ()(md::MeshRenderable&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0,std::allocator<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0>,md::MeshRenderable * ()(md::MeshRenderable&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42CF350;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0,std::allocator<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0>,md::MeshRenderable * ()(md::MeshRenderable&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CF350;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0,std::allocator<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0>,md::MeshRenderable * ()(md::MeshRenderable&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;

  v14 = 0;
  v7 = *(_OWORD *)(a1 + 8);
  v8 = &v14;
  v9 = a2;
  v3 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = v7;
  v12 = &v14;
  v13 = a2;
  v4 = *(unsigned int *)(v3 + 224);
  if ((_DWORD)v4 == -1)
  {
    v6 = std::__throw_bad_variant_access[abi:nn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IONS1_9__variant15__value_visitorI10overloadedIJZZN2md18RenderBatchManager24buildRenderablesForBatchEPNS9_21MeshRenderableBuilderEPNS9_11RenderBatchEyENK3__0clERNS9_14MeshRenderableEEUlRKNS9_22MaterialRenderBatchKeyEE_ZZNSA_24buildRenderablesForBatchESC_SE_yENKSF_clESH_EUlRKNS9_27MaterialDecalRenderBatchKeyEE_ZZNSA_24buildRenderablesForBatchESC_SE_yENKSF_clESH_EUlRKNS9_26DynamicTypedRenderBatchKeyEE_ZZNSA_24buildRenderablesForBatchESC_SE_yENKSF_clESH_EUlT_E_EEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SQ_SM_EEEEEEDcSU_DpT0_(v6);
  }
  else
  {
    v15 = &v7;
    ((void (*)(__int128 **))off_1E42EFB68[v4])(&v15);
    return v14;
  }
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IONS1_9__variant15__value_visitorI10overloadedIJZZN2md18RenderBatchManager24buildRenderablesForBatchEPNS9_21MeshRenderableBuilderEPNS9_11RenderBatchEyENK3__0clERNS9_14MeshRenderableEEUlRKNS9_22MaterialRenderBatchKeyEE_ZZNSA_24buildRenderablesForBatchESC_SE_yENKSF_clESH_EUlRKNS9_27MaterialDecalRenderBatchKeyEE_ZZNSA_24buildRenderablesForBatchESC_SE_yENKSF_clESH_EUlRKNS9_26DynamicTypedRenderBatchKeyEE_ZZNSA_24buildRenderablesForBatchESC_SE_yENKSF_clESH_EUlT_E_EEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SQ_SM_EEEEEEDcSU_DpT0_(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  os_signpost_id_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (***v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  int v22;
  char v23;
  char v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *result;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v54[7];
  char v55;
  _BYTE v56[7];
  uint64_t v57;
  std::__shared_weak_count *v58;
  char v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  NSObject *v63;
  char v64;
  __int128 v65;
  char v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint8_t buf[408];
  _DWORD v70[2];
  _DWORD v71[2];
  _QWORD v72[3];
  _QWORD *v73;
  uint64_t (**v74)();
  os_signpost_id_t *v75;
  uint64_t (***v76)();
  _QWORD v77[3];
  _QWORD *v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = (uint64_t)(*a1 + 4);
  v5 = **a1;
  v74 = &off_1E42DA568;
  v75 = (os_signpost_id_t *)v4;
  v76 = &v74;
  v77[0] = &off_1E42DA520;
  v72[0] = &off_1E42DA520;
  v72[1] = v4;
  v73 = v72;
  v78 = v77;
  v77[1] = v4;
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v6 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v7 = v6;
  v8 = *v75;
  if (*v75 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v8, "BuildMaterialRenderable", (const char *)&unk_1A0189141, buf, 2u);
  }

  v9 = v73;
  if (v73 == v72)
  {
    v10 = 4;
    v9 = v72;
  }
  else
  {
    if (!v73)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  v11 = v76;
  if (v76 == &v74)
  {
    v12 = 4;
    v11 = &v74;
  }
  else
  {
    if (!v76)
      goto LABEL_16;
    v12 = 5;
  }
  (*v11)[v12]();
LABEL_16:
  v13 = v3[3];
  *(_BYTE *)(v13 + 8) = 1;
  if (*(_BYTE *)(a2 + 217))
  {
    v14 = *(_QWORD *)(a2 + 64);
    v15 = *(_BYTE *)(a2 + 216);
    v16 = 1;
  }
  else
  {
    v14 = *(_QWORD *)(v13 + 48);
    v15 = *(_BYTE *)(v13 + 56);
    v71[0] = *(_DWORD *)(v13 + 57);
    *(_DWORD *)((char *)v71 + 3) = *(_DWORD *)(v13 + 60);
    v16 = *(_BYTE *)(v13 + 64);
    v70[0] = *(_DWORD *)(v13 + 65);
    *(_DWORD *)((char *)v70 + 3) = *(_DWORD *)(v13 + 68);
  }
  v17 = v3[1];
  v18 = *(_QWORD *)(a2 + 96);
  v19 = *(std::__shared_weak_count **)(a2 + 112);
  v67 = *(_QWORD *)(a2 + 104);
  v68 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  v22 = *(unsigned __int8 *)(a2 + 72);
  v23 = *(_BYTE *)(a2 + 120);
  v24 = *(_BYTE *)(a2 + 121);
  v25 = *(unsigned __int8 *)(a2 + 75);
  v26 = *(_BYTE *)(a2 + 122);
  LOBYTE(v65) = 0;
  v66 = 0;
  if (*(_BYTE *)(a2 + 140))
  {
    v65 = *(_OWORD *)(a2 + 124);
    v66 = 1;
  }
  v27 = *(_QWORD *)(a2 + 144);
  v28 = *(unsigned __int8 *)(a2 + 76);
  LOBYTE(v57) = 0;
  v64 = 0;
  v29 = *(unsigned __int8 *)(a2 + 208);
  if (*(_BYTE *)(a2 + 208))
  {
    v30 = *(std::__shared_weak_count **)(a2 + 160);
    v57 = *(_QWORD *)(a2 + 152);
    v58 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v59 = *(_BYTE *)(a2 + 168);
    v33 = *(std::__shared_weak_count **)(a2 + 184);
    v60 = *(_QWORD *)(a2 + 176);
    v61 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v7 = *(NSObject **)(a2 + 200);
    v62 = *(_QWORD *)(a2 + 192);
    v63 = v7;
    if (v7)
    {
      v36 = (unint64_t *)&v7[1];
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v64 = 1;
  }
  v52 = v14;
  v53 = v15;
  *(_DWORD *)v54 = v71[0];
  *(_DWORD *)&v54[3] = *(_DWORD *)((char *)v71 + 3);
  v55 = v16;
  *(_DWORD *)v56 = v70[0];
  *(_DWORD *)&v56[3] = *(_DWORD *)((char *)v70 + 3);
  md::MeshRenderableBuilder::buildRenderable((uint64_t)buf, v17, v13, (_QWORD *)(a2 + 80), v18, &v67, v22 != 0, v23, v24, v25 != 0, v26, (uint64_t)&v65, v27, SBYTE4(v27), SHIWORD(v27), v28 != 0, &v57, (uint64_t)&v52, *(_BYTE *)(a2 + 218));
  if (!v29)
    goto LABEL_50;
  if (v7)
  {
    v38 = (unint64_t *)&v7[1];
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      (*((void (**))v7->isa + 2))(v7);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v7);
    }
  }
  v40 = v61;
  if (v61)
  {
    v41 = (unint64_t *)&v61->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v58;
  if (!v58)
    goto LABEL_50;
  v44 = (unint64_t *)&v58->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    v46 = v68;
    if (!v68)
      goto LABEL_54;
  }
  else
  {
LABEL_50:
    v46 = v68;
    if (!v68)
      goto LABEL_54;
  }
  v47 = (unint64_t *)&v46->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (v48)
  {
LABEL_54:
    v49 = *(_QWORD **)(v5 + 248);
    if (v49)
      goto LABEL_57;
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
  std::__shared_weak_count::__release_weak(v46);
  v49 = *(_QWORD **)(v5 + 248);
  if (!v49)
  {
LABEL_55:
    geo::Pool<md::MaterialRenderable>::allocateSlab((uint64_t **)(v5 + 208));
    v49 = *(_QWORD **)(v5 + 248);
  }
LABEL_57:
  *(_QWORD *)(v5 + 248) = *v49;
  *(_QWORD *)v3[2] = md::MaterialRenderable::MaterialRenderable((uint64_t)v49, (const md::MaterialRenderable *)buf);
  md::MaterialRenderable::~MaterialRenderable((md::MaterialRenderable *)buf);
  if (!v78)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    JUMPOUT(0x19F8B5454);
  }
  (*(void (**)(_QWORD *))(*v78 + 48))(v78);
  result = v78;
  if (v78 == v77)
  {
    v51 = 4;
    result = v77;
  }
  else
  {
    if (!v78)
      return result;
    v51 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v51))();
}

void sub_19F8B5464(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F8B5470()
{
  JUMPOUT(0x19F8B5478);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IONS1_9__variant15__value_visitorI10overloadedIJZZN2md18RenderBatchManager24buildRenderablesForBatchEPNS9_21MeshRenderableBuilderEPNS9_11RenderBatchEyENK3__0clERNS9_14MeshRenderableEEUlRKNS9_22MaterialRenderBatchKeyEE_ZZNSA_24buildRenderablesForBatchESC_SE_yENKSF_clESH_EUlRKNS9_27MaterialDecalRenderBatchKeyEE_ZZNSA_24buildRenderablesForBatchESC_SE_yENKSF_clESH_EUlRKNS9_26DynamicTypedRenderBatchKeyEE_ZZNSA_24buildRenderablesForBatchESC_SE_yENKSF_clESH_EUlT_E_EEEEJRKNS0_6__baseILNS0_6_TraitE1EJSI_SQ_SM_EEEEEEDcSU_DpT0_(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[22];
  uint64_t v46;
  std::__shared_weak_count *v47;
  char v48;
  char v49;
  uint64_t v50;
  __int16 v51;
  _BYTE v52[28];
  __int128 v53;
  uint64_t v54;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 40);
  v4 = *(_QWORD *)(*a1 + 56);
  v36 = *(_OWORD *)(v4 + 8);
  v37 = *(_QWORD *)(v4 + 24);
  v38 = *(_QWORD *)(v4 + 32);
  v5 = *(std::__shared_weak_count **)(v4 + 40);
  v39 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v42 = *(_OWORD *)(v4 + 80);
  v41 = *(_OWORD *)(v4 + 64);
  v40 = *(_OWORD *)(v4 + 48);
  *(_QWORD *)&v45[14] = *(_QWORD *)(v4 + 142);
  *(_OWORD *)v45 = *(_OWORD *)(v4 + 128);
  v44 = *(_OWORD *)(v4 + 112);
  v43 = *(_OWORD *)(v4 + 96);
  LOBYTE(v46) = 0;
  v49 = 0;
  if (*(_BYTE *)(v4 + 176))
  {
    v8 = *(std::__shared_weak_count **)(v4 + 160);
    v46 = *(_QWORD *)(v4 + 152);
    v47 = v8;
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v48 = *(_BYTE *)(v4 + 168);
    v49 = 1;
  }
  v50 = *(_QWORD *)(v4 + 184);
  v51 = 0;
  if (*(_BYTE *)(v4 + 193))
  {
    LOBYTE(v51) = *(_BYTE *)(v4 + 192);
    HIBYTE(v51) = 1;
  }
  *(_OWORD *)&v52[12] = *(_OWORD *)(v4 + 208);
  *(_OWORD *)v52 = *(_OWORD *)(v4 + 196);
  LOBYTE(v36) = 2;
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_QWORD *)&v53 = v11;
  *((_QWORD *)&v53 + 1) = v12;
  v15 = *(_QWORD **)(v3 + 344);
  v54 = *(_QWORD *)(a2 + 96);
  v45[16] = *(_BYTE *)(a2 + 72);
  v45[18] = 0;
  if (!v15)
  {
    v16 = (char *)malloc_type_malloc(*(_QWORD *)(v3 + 336), 0x160B39uLL);
    v17 = v16;
    v18 = *(uint64_t **)(v3 + 312);
    if (v18)
    {
      while (1)
      {
        while (1)
        {
          v20 = (uint64_t **)v18;
          v21 = v18[4];
          if ((unint64_t)v16 >= v21)
            break;
          v18 = *v20;
          v19 = v20;
          if (!*v20)
            goto LABEL_22;
        }
        if (v21 >= (unint64_t)v16)
          break;
        v18 = v20[1];
        if (!v18)
        {
          v19 = v20 + 1;
          goto LABEL_22;
        }
      }
    }
    else
    {
      v19 = (uint64_t **)(v3 + 312);
      v20 = (uint64_t **)(v3 + 312);
LABEL_22:
      v22 = (uint64_t *)operator new(0x28uLL);
      v22[4] = (uint64_t)v17;
      *v22 = 0;
      v22[1] = 0;
      v22[2] = (uint64_t)v20;
      *v19 = v22;
      v23 = **(_QWORD **)(v3 + 304);
      if (v23)
      {
        *(_QWORD *)(v3 + 304) = v23;
        v22 = *v19;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 312), v22);
      ++*(_QWORD *)(v3 + 320);
    }
    v15 = *(_QWORD **)(v3 + 344);
    v24 = 248 * *(_QWORD *)(v3 + 328) - 248;
    if ((v24 & 0x8000000000000000) == 0)
    {
      v25 = &v17[v24];
      v26 = &v17[v24];
      do
      {
        *(_QWORD *)v26 = v15;
        v26 -= 248;
        v15 = v25;
        v25 = v26;
      }
      while (v26 >= v17);
      v15 = v26 + 248;
    }
    *(_QWORD *)(v3 + 344) = v15;
  }
  *(_QWORD *)(v3 + 344) = *v15;
  *v15 = &off_1E428F838;
  v15[3] = v37;
  *(_OWORD *)(v15 + 1) = v36;
  v15[4] = v38;
  v15[5] = v39;
  if (v39)
  {
    v27 = (unint64_t *)&v39->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  *((_OWORD *)v15 + 4) = v41;
  *((_OWORD *)v15 + 5) = v42;
  *((_OWORD *)v15 + 3) = v40;
  *(_QWORD *)((char *)v15 + 142) = *(_QWORD *)&v45[14];
  *((_OWORD *)v15 + 7) = v44;
  *((_OWORD *)v15 + 8) = *(_OWORD *)v45;
  *((_OWORD *)v15 + 6) = v43;
  *((_BYTE *)v15 + 152) = 0;
  *((_BYTE *)v15 + 176) = 0;
  if (v49)
  {
    v15[19] = v46;
    v15[20] = v47;
    if (v47)
    {
      v29 = (unint64_t *)&v47->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    *((_BYTE *)v15 + 168) = v48;
    *((_BYTE *)v15 + 176) = 1;
  }
  v15[23] = v50;
  *((_WORD *)v15 + 96) = 0;
  if (HIBYTE(v51))
  {
    *((_BYTE *)v15 + 192) = v51;
    *((_BYTE *)v15 + 193) = 1;
  }
  *((_OWORD *)v15 + 13) = *(_OWORD *)&v52[12];
  *(_OWORD *)((char *)v15 + 196) = *(_OWORD *)v52;
  *v15 = &off_1E429ED78;
  *((_OWORD *)v15 + 14) = v53;
  v15[30] = v54;
  **(_QWORD **)(v2 + 48) = v15;
  if (!v49)
    goto LABEL_45;
  if (!v47)
    goto LABEL_45;
  v31 = (unint64_t *)&v47->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
    v33 = v39;
    if (!v39)
      return;
  }
  else
  {
LABEL_45:
    v33 = v39;
    if (!v39)
      return;
  }
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
}

void sub_19F8B58C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)(md::MaterialDecalRenderable *__hidden this))
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  a10 = &off_1E429ED78;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  md::MeshRenderable::~MeshRenderable((md::MeshRenderable *)&a10);
  _Unwind_Resume(a1);
}

void md::MaterialDecalRenderable::~MaterialDecalRenderable(md::MaterialDecalRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E429ED78;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E428F838;
  if (*((_BYTE *)this + 176))
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E429ED78;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E428F838;
  if (*((_BYTE *)this + 176))
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::MeshRenderable::hash2(md::MeshRenderable *this)
{
  return (*(uint64_t (**)(md::MeshRenderable *))(*(_QWORD *)this + 16))(this);
}

void std::__function::__func<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0::operator() const(md::MeshRenderable &)::{lambda(md::MaterialRenderBatchKey const&)#1}::operator() const(md::MaterialRenderBatchKey const&)::{lambda(void)#2},std::allocator<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0::operator() const(md::MeshRenderable &)::{lambda(md::MaterialRenderBatchKey const&)#1}::operator() const(md::MaterialRenderBatchKey const&)::{lambda(void)#2}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0::operator() const(md::MeshRenderable &)::{lambda(md::MaterialRenderBatchKey const&)#1}::operator() const(md::MaterialRenderBatchKey const&)::{lambda(void)#2},std::allocator<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0::operator() const(md::MeshRenderable &)::{lambda(md::MaterialRenderBatchKey const&)#1}::operator() const(md::MaterialRenderBatchKey const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42DA520;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0::operator() const(md::MeshRenderable &)::{lambda(md::MaterialRenderBatchKey const&)#1}::operator() const(md::MaterialRenderBatchKey const&)::{lambda(void)#2},std::allocator<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0::operator() const(md::MeshRenderable &)::{lambda(md::MaterialRenderBatchKey const&)#1}::operator() const(md::MaterialRenderBatchKey const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42DA520;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0::operator() const(md::MeshRenderable &)::{lambda(md::MaterialRenderBatchKey const&)#1}::operator() const(md::MaterialRenderBatchKey const&)::{lambda(void)#2},std::allocator<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0::operator() const(md::MeshRenderable &)::{lambda(md::MaterialRenderBatchKey const&)#1}::operator() const(md::MaterialRenderBatchKey const&)::{lambda(void)#2}>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v2 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v3 = v2;
  v4 = **(_QWORD **)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "BuildMaterialRenderable", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0::operator() const(md::MeshRenderable &)::{lambda(md::MaterialRenderBatchKey const&)#1}::operator() const(md::MaterialRenderBatchKey const&)::{lambda(void)#1},std::allocator<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0::operator() const(md::MeshRenderable &)::{lambda(md::MaterialRenderBatchKey const&)#1}::operator() const(md::MaterialRenderBatchKey const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0::operator() const(md::MeshRenderable &)::{lambda(md::MaterialRenderBatchKey const&)#1}::operator() const(md::MaterialRenderBatchKey const&)::{lambda(void)#1},std::allocator<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0::operator() const(md::MeshRenderable &)::{lambda(md::MaterialRenderBatchKey const&)#1}::operator() const(md::MaterialRenderBatchKey const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42DA568;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0::operator() const(md::MeshRenderable &)::{lambda(md::MaterialRenderBatchKey const&)#1}::operator() const(md::MaterialRenderBatchKey const&)::{lambda(void)#1},std::allocator<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0::operator() const(md::MeshRenderable &)::{lambda(md::MaterialRenderBatchKey const&)#1}::operator() const(md::MaterialRenderBatchKey const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42DA568;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0::operator() const(md::MeshRenderable &)::{lambda(md::MaterialRenderBatchKey const&)#1}::operator() const(md::MaterialRenderBatchKey const&)::{lambda(void)#1},std::allocator<md::RenderBatchManager::buildRenderablesForBatch(md::MeshRenderableBuilder *,md::RenderBatch *,unsigned long long)::$_0::operator() const(md::MeshRenderable &)::{lambda(md::MaterialRenderBatchKey const&)#1}::operator() const(md::MaterialRenderBatchKey const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v2 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v3 = v2;
  v4 = **(_QWORD **)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "BuildMaterialRenderable", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::RenderBatchManager::gatherRenderables(std::vector<md::MeshRenderable *> &,md::MeshRenderableBuilder *,unsigned long long,std::function<BOOL ()(md::MeshRenderable *)>)::$_1,std::allocator<md::RenderBatchManager::gatherRenderables(std::vector<md::MeshRenderable *> &,md::MeshRenderableBuilder *,unsigned long long,std::function<BOOL ()(md::MeshRenderable *)>)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RenderBatchManager::gatherRenderables(std::vector<md::MeshRenderable *> &,md::MeshRenderableBuilder *,unsigned long long,std::function<BOOL ()(md::MeshRenderable *)>)::$_1,std::allocator<md::RenderBatchManager::gatherRenderables(std::vector<md::MeshRenderable *> &,md::MeshRenderableBuilder *,unsigned long long,std::function<BOOL ()(md::MeshRenderable *)>)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF308;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RenderBatchManager::gatherRenderables(std::vector<md::MeshRenderable *> &,md::MeshRenderableBuilder *,unsigned long long,std::function<BOOL ()(md::MeshRenderable *)>)::$_1,std::allocator<md::RenderBatchManager::gatherRenderables(std::vector<md::MeshRenderable *> &,md::MeshRenderableBuilder *,unsigned long long,std::function<BOOL ()(md::MeshRenderable *)>)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF308;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::RenderBatchManager::gatherRenderables(std::vector<md::MeshRenderable *> &,md::MeshRenderableBuilder *,unsigned long long,std::function<BOOL ()(md::MeshRenderable *)>)::$_1,std::allocator<md::RenderBatchManager::gatherRenderables(std::vector<md::MeshRenderable *> &,md::MeshRenderableBuilder *,unsigned long long,std::function<BOOL ()(md::MeshRenderable *)>)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v2 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v3 = v2;
  v4 = **(_QWORD **)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "DestroyRenderables", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::RenderBatchManager::gatherRenderables(std::vector<md::MeshRenderable *> &,md::MeshRenderableBuilder *,unsigned long long,std::function<BOOL ()(md::MeshRenderable *)>)::$_0,std::allocator<md::RenderBatchManager::gatherRenderables(std::vector<md::MeshRenderable *> &,md::MeshRenderableBuilder *,unsigned long long,std::function<BOOL ()(md::MeshRenderable *)>)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RenderBatchManager::gatherRenderables(std::vector<md::MeshRenderable *> &,md::MeshRenderableBuilder *,unsigned long long,std::function<BOOL ()(md::MeshRenderable *)>)::$_0,std::allocator<md::RenderBatchManager::gatherRenderables(std::vector<md::MeshRenderable *> &,md::MeshRenderableBuilder *,unsigned long long,std::function<BOOL ()(md::MeshRenderable *)>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CF2C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RenderBatchManager::gatherRenderables(std::vector<md::MeshRenderable *> &,md::MeshRenderableBuilder *,unsigned long long,std::function<BOOL ()(md::MeshRenderable *)>)::$_0,std::allocator<md::RenderBatchManager::gatherRenderables(std::vector<md::MeshRenderable *> &,md::MeshRenderableBuilder *,unsigned long long,std::function<BOOL ()(md::MeshRenderable *)>)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF2C0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::RenderBatchManager::gatherRenderables(std::vector<md::MeshRenderable *> &,md::MeshRenderableBuilder *,unsigned long long,std::function<BOOL ()(md::MeshRenderable *)>)::$_0,std::allocator<md::RenderBatchManager::gatherRenderables(std::vector<md::MeshRenderable *> &,md::MeshRenderableBuilder *,unsigned long long,std::function<BOOL ()(md::MeshRenderable *)>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v2 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v3 = v2;
  v4 = **(_QWORD **)(a1 + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "DestroyRenderables", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void md::RenderBatchManager::removeEntity(int8x8_t *a1, unint64_t *a2)
{
  int8x8_t *v4;
  unint64_t v5;
  uint64_t *v6;
  int8x8_t *v7;
  uint64_t *v8;
  int8x8_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4 = a1 + 21;
  v5 = *a2;
  v6 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>(&a1[21], *a2);
  if (v6)
  {
    v7 = (int8x8_t *)v6[3];
    if (v7)
    {
      if (md::RenderBatch::remove(v7, v5))
        a1[10].i8[0] = 1;
    }
  }
  v8 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>(v4, *a2);
  if (v8)
  {
    v9 = a1[22];
    v10 = v8[1];
    v11 = (uint8x8_t)vcnt_s8(v9);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v9)
        v10 %= *(_QWORD *)&v9;
    }
    else
    {
      v10 &= *(_QWORD *)&v9 - 1;
    }
    v12 = *(uint64_t **)(*(_QWORD *)v4 + 8 * v10);
    do
    {
      v13 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12 != v8);
    if (v13 == (uint64_t *)&a1[23])
      goto LABEL_24;
    v14 = v13[1];
    if (v11.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v9)
        v14 %= *(_QWORD *)&v9;
    }
    else
    {
      v14 &= *(_QWORD *)&v9 - 1;
    }
    if (v14 != v10)
    {
LABEL_24:
      if (!*v8)
        goto LABEL_25;
      v15 = *(_QWORD *)(*v8 + 8);
      if (v11.u32[0] > 1uLL)
      {
        if (v15 >= *(_QWORD *)&v9)
          v15 %= *(_QWORD *)&v9;
      }
      else
      {
        v15 &= *(_QWORD *)&v9 - 1;
      }
      if (v15 != v10)
LABEL_25:
        *(_QWORD *)(*(_QWORD *)v4 + 8 * v10) = 0;
    }
    v16 = *v8;
    if (*v8)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v11.u32[0] > 1uLL)
      {
        if (v17 >= *(_QWORD *)&v9)
          v17 %= *(_QWORD *)&v9;
      }
      else
      {
        v17 &= *(_QWORD *)&v9 - 1;
      }
      if (v17 != v10)
      {
        *(_QWORD *)(*(_QWORD *)v4 + 8 * v17) = v13;
        v16 = *v8;
      }
    }
    *v13 = v16;
    *v8 = 0;
    --*(_QWORD *)&a1[24];
    operator delete(v8);
  }
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelExternalObjectsModerator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBFD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelExternalObjectsModerator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBFD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelExternalObjectsModerator>>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void md::LabelExternalObjectsModerator::~LabelExternalObjectsModerator(md::LabelExternalObjectsModerator *this)
{
  std::mutex *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;

  v2 = (std::mutex *)*((_QWORD *)this + 2);
  std::mutex::lock(v2);
  v2[1].__m_.__sig = 0;
  std::mutex::unlock(v2);
  std::mutex::~mutex((std::mutex *)((char *)this + 368));
  std::mutex::~mutex((std::mutex *)((char *)this + 304));
  v3 = (_QWORD *)*((_QWORD *)this + 34);
  if (v3)
  {
    do
    {
      v12 = (_QWORD *)*v3;
      v13 = (std::__shared_weak_count *)v3[4];
      if (v13)
        std::__shared_weak_count::__release_weak(v13);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 35) + 40))(*((_QWORD *)this + 35), v3, 40);
      v3 = v12;
    }
    while (v12);
  }
  v4 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 33) + 40))(*((_QWORD *)this + 33), v4, 8 * *((_QWORD *)this + 32));
  v5 = (_QWORD *)*((_QWORD *)this + 27);
  if (v5)
  {
    do
    {
      v14 = (_QWORD *)*v5;
      v15 = (std::__shared_weak_count *)v5[4];
      if (v15)
        std::__shared_weak_count::__release_weak(v15);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 28) + 40))(*((_QWORD *)this + 28), v5, 40);
      v5 = v14;
    }
    while (v14);
  }
  v6 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v6)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 26) + 40))(*((_QWORD *)this + 26), v6, 8 * *((_QWORD *)this + 25));
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)this + 160, *((_QWORD **)this + 21));
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)this + 128, *((_QWORD **)this + 17));
  v7 = (_QWORD *)*((_QWORD *)this + 12);
  while (v7)
  {
    v16 = v7;
    v7 = (_QWORD *)*v7;
    v17 = (std::__shared_weak_count *)v16[3];
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), v16, 32);
  }
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), v8, 8 * *((_QWORD *)this + 10));
  v9 = *((_QWORD *)this + 5);
  if (v9)
  {
    v10 = *((_QWORD *)this + 6);
    v11 = *((_QWORD *)this + 5);
    if (v10 != v9)
    {
      do
      {
        v20 = *(std::__shared_weak_count **)(v10 - 8);
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v20->__on_zero_shared)(v20, v11);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v10 -= 16;
      }
      while (v10 != v9);
      v11 = *((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v9;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v11, *((_QWORD *)this + 7) - v11);
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
}

void sub_19F8B63D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;

  std::mutex::~mutex((std::mutex *)(v1 + 368));
  std::mutex::~mutex((std::mutex *)(v1 + 304));
  v3 = *(_QWORD **)(v1 + 272);
  if (v3)
  {
    do
    {
      v11 = (_QWORD *)*v3;
      v12 = (std::__shared_weak_count *)v3[4];
      if (v12)
        std::__shared_weak_count::__release_weak(v12);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v1 + 280) + 40))(*(_QWORD *)(v1 + 280), v3, 40);
      v3 = v11;
    }
    while (v11);
  }
  v4 = *(_QWORD *)(v1 + 248);
  *(_QWORD *)(v1 + 248) = 0;
  if (v4)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 264) + 40))(*(_QWORD *)(v1 + 264), v4, 8 * *(_QWORD *)(v1 + 256));
  v5 = *(_QWORD **)(v1 + 216);
  if (v5)
  {
    do
    {
      v13 = (_QWORD *)*v5;
      v14 = (std::__shared_weak_count *)v5[4];
      if (v14)
        std::__shared_weak_count::__release_weak(v14);
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v1 + 224) + 40))(*(_QWORD *)(v1 + 224), v5, 40);
      v5 = v13;
    }
    while (v13);
  }
  v6 = *(_QWORD *)(v1 + 192);
  *(_QWORD *)(v1 + 192) = 0;
  if (v6)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 208) + 40))(*(_QWORD *)(v1 + 208), v6, 8 * *(_QWORD *)(v1 + 200));
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy(v1 + 160, *(_QWORD **)(v1 + 168));
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy(v1 + 128, *(_QWORD **)(v1 + 136));
  v7 = *(_QWORD **)(v1 + 96);
  while (v7)
  {
    v15 = v7;
    v7 = (_QWORD *)*v7;
    v16 = (std::__shared_weak_count *)v15[3];
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v1 + 104) + 40))(*(_QWORD *)(v1 + 104), v15, 32);
  }
  v8 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = 0;
  if (v8)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 88) + 40))(*(_QWORD *)(v1 + 88), v8, 8 * *(_QWORD *)(v1 + 80));
    v9 = *(_QWORD *)(v1 + 40);
    if (!v9)
    {
LABEL_10:
      v10 = *(std::__shared_weak_count **)(v1 + 24);
      if (!v10)
        goto LABEL_39;
      goto LABEL_35;
    }
  }
  else
  {
    v9 = *(_QWORD *)(v1 + 40);
    if (!v9)
      goto LABEL_10;
  }
  v19 = *(_QWORD *)(v1 + 48);
  v20 = v9;
  if (v19 != v9)
  {
    do
    {
      v21 = *(std::__shared_weak_count **)(v19 - 8);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v21->__on_zero_shared)(v21, v20);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v19 -= 16;
    }
    while (v19 != v9);
    v20 = *(_QWORD *)(v1 + 40);
  }
  *(_QWORD *)(v1 + 48) = v9;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 64) + 40))(*(_QWORD *)(v1 + 64), v20, *(_QWORD *)(v1 + 56) - v20);
  v10 = *(std::__shared_weak_count **)(v1 + 24);
  if (!v10)
  {
LABEL_39:
    v26 = *(std::__shared_weak_count **)(v1 + 8);
    if (v26)
      std::__shared_weak_count::__release_weak(v26);
    _Unwind_Resume(a1);
  }
LABEL_35:
  v24 = (unint64_t *)&v10->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  goto LABEL_39;
}

void std::__shared_ptr_emplace<md::LabelExternalTransitLinkData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelExternalTransitLinkData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD850;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::LabelExternalTransitLinkData>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)(result + 32) = v1;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 48) + 40))(*(_QWORD *)(result + 48), v1, *(_QWORD *)(result + 40) - v1);
  }
  return result;
}

void std::__shared_ptr_emplace<md::LabelExternalTransitLink>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCFC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelExternalTransitLink>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCFC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelExternalTransitLink>::__on_zero_shared(uint64_t a1)
{
  std::mutex *v2;
  uint64_t sig;
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;

  v2 = *(std::mutex **)(a1 + 32);
  std::mutex::lock(v2);
  sig = v2[1].__m_.__sig;
  if (sig)
  {
    v4 = *(_QWORD *)(a1 + 24);
    std::mutex::lock((std::mutex *)(sig + 304));
    v5 = *(int8x8_t *)(sig + 200);
    if (v5)
    {
      v6 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
      v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v6 >> 47) ^ v6);
      v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      v9 = (uint8x8_t)vcnt_s8(v5);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        v10 = v8;
        if (v8 >= *(_QWORD *)&v5)
          v10 = v8 % *(_QWORD *)&v5;
      }
      else
      {
        v10 = v8 & (*(_QWORD *)&v5 - 1);
      }
      v11 = *(_QWORD *)(sig + 192);
      v12 = *(_QWORD ***)(v11 + 8 * v10);
      if (v12)
      {
        v13 = *v12;
        if (*v12)
        {
          v14 = *(_QWORD *)&v5 - 1;
          if (v9.u32[0] < 2uLL)
          {
            while (1)
            {
              v15 = v13[1];
              if (v15 == v8)
              {
                if (v13[2] == v4)
                  goto LABEL_23;
              }
              else if ((v15 & v14) != v10)
              {
                goto LABEL_52;
              }
              v13 = (_QWORD *)*v13;
              if (!v13)
                goto LABEL_52;
            }
          }
          do
          {
            v16 = v13[1];
            if (v16 == v8)
            {
              if (v13[2] == v4)
              {
LABEL_23:
                if (v9.u32[0] > 1uLL)
                {
                  if (v8 >= *(_QWORD *)&v5)
                    v8 %= *(_QWORD *)&v5;
                }
                else
                {
                  v8 &= v14;
                }
                v17 = *(_QWORD **)(v11 + 8 * v8);
                do
                {
                  v18 = v17;
                  v17 = (_QWORD *)*v17;
                }
                while (v17 != v13);
                if (v18 == (_QWORD *)(sig + 216))
                  goto LABEL_40;
                v19 = v18[1];
                if (v9.u32[0] > 1uLL)
                {
                  if (v19 >= *(_QWORD *)&v5)
                    v19 %= *(_QWORD *)&v5;
                }
                else
                {
                  v19 &= v14;
                }
                if (v19 != v8)
                {
LABEL_40:
                  if (!*v13)
                    goto LABEL_41;
                  v20 = *(_QWORD *)(*v13 + 8);
                  if (v9.u32[0] > 1uLL)
                  {
                    if (v20 >= *(_QWORD *)&v5)
                      v20 %= *(_QWORD *)&v5;
                  }
                  else
                  {
                    v20 &= v14;
                  }
                  if (v20 != v8)
LABEL_41:
                    *(_QWORD *)(v11 + 8 * v8) = 0;
                }
                v21 = *v13;
                if (*v13)
                {
                  v22 = *(_QWORD *)(v21 + 8);
                  if (v9.u32[0] > 1uLL)
                  {
                    if (v22 >= *(_QWORD *)&v5)
                      v22 %= *(_QWORD *)&v5;
                  }
                  else
                  {
                    v22 &= v14;
                  }
                  if (v22 != v8)
                  {
                    *(_QWORD *)(*(_QWORD *)(sig + 192) + 8 * v22) = v18;
                    v21 = *v13;
                  }
                }
                *v18 = v21;
                *v13 = 0;
                --*(_QWORD *)(sig + 232);
                v23 = (std::__shared_weak_count *)v13[4];
                if (v23)
                  std::__shared_weak_count::__release_weak(v23);
                (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(sig + 224) + 40))(*(_QWORD *)(sig + 224), v13, 40);
                break;
              }
            }
            else
            {
              if (v16 >= *(_QWORD *)&v5)
                v16 %= *(_QWORD *)&v5;
              if (v16 != v10)
                break;
            }
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
      }
    }
LABEL_52:
    std::mutex::unlock((std::mutex *)(sig + 304));
  }
  std::mutex::unlock(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 64));
  v24 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v24)
    goto LABEL_57;
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    v27 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v27)
      return;
  }
  else
  {
LABEL_57:
    v27 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v27)
      return;
  }
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
}

void sub_19F8B69E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  std::mutex::unlock(v2);
  std::mutex::~mutex((std::mutex *)(v1 + 64));
  v4 = *(std::__shared_weak_count **)(v1 + 56);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *(std::__shared_weak_count **)(v1 + 40);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  _Unwind_Resume(a1);
}

void md::LabelExternalObjectsModerator::externalTransitLink(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;

  v6 = (std::mutex *)(a2 + 304);
  std::mutex::lock((std::mutex *)(a2 + 304));
  v7 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((_QWORD *)(a2 + 192), a3);
  if (v7)
  {
    v8 = v7;
    *a1 = 0;
    a1[1] = 0;
    v9 = (std::__shared_weak_count *)v7[4];
    if (v9)
    {
      v10 = std::__shared_weak_count::lock(v9);
      a1[1] = v10;
      if (v10)
        *a1 = v8[3];
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  std::mutex::unlock(v6);
}

void md::LabelExternalObjectsModerator::externalTransitNode(md::LabelExternalObjectsModerator *this, uint64_t a2, unint64_t a3)
{
  std::mutex *v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;

  v6 = (std::mutex *)(a2 + 368);
  std::mutex::lock((std::mutex *)(a2 + 368));
  v7 = *(int8x8_t *)(a2 + 256);
  if (!*(_QWORD *)&v7)
    goto LABEL_21;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = a3;
    if (*(_QWORD *)&v7 <= a3)
      v9 = a3 % *(_QWORD *)&v7;
  }
  else
  {
    v9 = (*(_QWORD *)&v7 - 1) & a3;
  }
  v10 = *(_QWORD **)(*(_QWORD *)(a2 + 248) + 8 * v9);
  if (!v10 || (v11 = (_QWORD *)*v10) == 0)
  {
LABEL_21:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    goto LABEL_22;
  }
  if (v8.u32[0] < 2uLL)
  {
    v12 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v14 = v11[1];
      if (v14 == a3)
      {
        if (v11[2] == a3)
          goto LABEL_23;
      }
      else if ((v14 & v12) != v9)
      {
        goto LABEL_21;
      }
      v11 = (_QWORD *)*v11;
      if (!v11)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v13 = v11[1];
    if (v13 == a3)
      break;
    if (v13 >= *(_QWORD *)&v7)
      v13 %= *(_QWORD *)&v7;
    if (v13 != v9)
      goto LABEL_21;
LABEL_11:
    v11 = (_QWORD *)*v11;
    if (!v11)
      goto LABEL_21;
  }
  if (v11[2] != a3)
    goto LABEL_11;
LABEL_23:
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v15 = (std::__shared_weak_count *)v11[4];
  if (v15)
  {
    v16 = std::__shared_weak_count::lock(v15);
    *((_QWORD *)this + 1) = v16;
    if (v16)
      *(_QWORD *)this = v11[3];
  }
LABEL_22:
  std::mutex::unlock(v6);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::weak_ptr<md::LabelExternalTransitNode>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::weak_ptr<md::LabelExternalTransitNode>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 32);
      if (v3)
        std::__shared_weak_count::__release_weak(v3);
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 40);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::LabelExternalTransitNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelExternalTransitNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD000;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelExternalTransitNode>::__on_zero_shared(_QWORD *a1)
{
  std::mutex *v2;
  uint64_t sig;
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  v2 = (std::mutex *)a1[4];
  std::mutex::lock(v2);
  sig = v2[1].__m_.__sig;
  if (sig)
  {
    v4 = a1[3];
    std::mutex::lock((std::mutex *)(sig + 368));
    v5 = *(int8x8_t *)(sig + 256);
    if (v5)
    {
      v6 = (uint8x8_t)vcnt_s8(v5);
      v6.i16[0] = vaddlv_u8(v6);
      if (v6.u32[0] > 1uLL)
      {
        v7 = v4;
        if (v4 >= *(_QWORD *)&v5)
          v7 = v4 % *(_QWORD *)&v5;
      }
      else
      {
        v7 = (*(_QWORD *)&v5 - 1) & v4;
      }
      v8 = *(_QWORD *)(sig + 248);
      v9 = *(_QWORD ***)(v8 + 8 * v7);
      if (v9)
      {
        v10 = *v9;
        if (*v9)
        {
          v11 = *(_QWORD *)&v5 - 1;
          if (v6.u32[0] < 2uLL)
          {
            while (1)
            {
              v12 = v10[1];
              if (v12 == v4)
              {
                if (v10[2] == v4)
                  goto LABEL_23;
              }
              else if ((v12 & v11) != v7)
              {
                goto LABEL_52;
              }
              v10 = (_QWORD *)*v10;
              if (!v10)
                goto LABEL_52;
            }
          }
          do
          {
            v13 = v10[1];
            if (v13 == v4)
            {
              if (v10[2] == v4)
              {
LABEL_23:
                if (v6.u32[0] > 1uLL)
                {
                  if (v4 >= *(_QWORD *)&v5)
                    v4 %= *(_QWORD *)&v5;
                }
                else
                {
                  v4 &= v11;
                }
                v14 = *(_QWORD **)(v8 + 8 * v4);
                do
                {
                  v15 = v14;
                  v14 = (_QWORD *)*v14;
                }
                while (v14 != v10);
                if (v15 == (_QWORD *)(sig + 272))
                  goto LABEL_40;
                v16 = v15[1];
                if (v6.u32[0] > 1uLL)
                {
                  if (v16 >= *(_QWORD *)&v5)
                    v16 %= *(_QWORD *)&v5;
                }
                else
                {
                  v16 &= v11;
                }
                if (v16 != v4)
                {
LABEL_40:
                  if (!*v10)
                    goto LABEL_41;
                  v17 = *(_QWORD *)(*v10 + 8);
                  if (v6.u32[0] > 1uLL)
                  {
                    if (v17 >= *(_QWORD *)&v5)
                      v17 %= *(_QWORD *)&v5;
                  }
                  else
                  {
                    v17 &= v11;
                  }
                  if (v17 != v4)
LABEL_41:
                    *(_QWORD *)(v8 + 8 * v4) = 0;
                }
                v18 = *v10;
                if (*v10)
                {
                  v19 = *(_QWORD *)(v18 + 8);
                  if (v6.u32[0] > 1uLL)
                  {
                    if (v19 >= *(_QWORD *)&v5)
                      v19 %= *(_QWORD *)&v5;
                  }
                  else
                  {
                    v19 &= v11;
                  }
                  if (v19 != v4)
                  {
                    *(_QWORD *)(*(_QWORD *)(sig + 248) + 8 * v19) = v15;
                    v18 = *v10;
                  }
                }
                *v15 = v18;
                *v10 = 0;
                --*(_QWORD *)(sig + 288);
                v20 = (std::__shared_weak_count *)v10[4];
                if (v20)
                  std::__shared_weak_count::__release_weak(v20);
                (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(sig + 280) + 40))(*(_QWORD *)(sig + 280), v10, 40);
                break;
              }
            }
            else
            {
              if (v13 >= *(_QWORD *)&v5)
                v13 %= *(_QWORD *)&v5;
              if (v13 != v7)
                break;
            }
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
      }
    }
LABEL_52:
    std::mutex::unlock((std::mutex *)(sig + 368));
  }
  std::mutex::unlock(v2);
  v21 = (std::__shared_weak_count *)a1[5];
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_19F8B6F58(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  std::mutex::unlock(v2);
  v4 = *(std::__shared_weak_count **)(v1 + 40);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t md::LabelExternalObjectsModerator::setSelectedTransitNodes(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 v4;
  float *v5;
  uint64_t i;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t **v15;
  BOOL v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v30;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *zone;
  _QWORD *v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v3 = *(_QWORD **)(a2 + 24);
  v37 = 0;
  v5 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v4 & 1) == 0)
  {
    v5 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v30)
    {
      v35 = v3;
      v31 = operator new();
      *(_QWORD *)(v31 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v31 + 24) = "VectorKitLabels";
      *(_OWORD *)(v31 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v31 = &off_1E42B5668;
      *(_QWORD *)(v31 + 8) = "VectorKitLabels";
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      *(_OWORD *)(v31 + 120) = 0u;
      *(_OWORD *)(v31 + 136) = 0u;
      *(_OWORD *)(v31 + 152) = 0u;
      *(_OWORD *)(v31 + 168) = 0u;
      *(_OWORD *)(v31 + 184) = 0u;
      *(_OWORD *)(v31 + 200) = 0u;
      *(_OWORD *)(v31 + 216) = 0u;
      *(_OWORD *)(v31 + 232) = 0u;
      *(_QWORD *)(v31 + 248) = 0;
      *(_OWORD *)(v31 + 56) = 0u;
      v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
      if ((_DWORD)v32)
        geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v31 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v31;
      v5 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
      v3 = v35;
    }
  }
  v38 = *((_QWORD *)v5 + 299);
  v39 = 0;
  v36 = &v37;
  for (i = 0; v3; v3 = (_QWORD *)*v3)
  {
    v12 = v37;
    v13 = &v37;
    if (v36 == &v37)
      goto LABEL_17;
    v14 = v37;
    v15 = &v37;
    if (v37)
    {
      do
      {
        v13 = (uint64_t **)v14;
        v14 = (uint64_t *)v14[1];
      }
      while (v14);
    }
    else
    {
      do
      {
        v13 = (uint64_t **)v15[2];
        v16 = *v13 == (uint64_t *)v15;
        v15 = v13;
      }
      while (v16);
    }
    v17 = v3[2];
    if ((unint64_t)v13[4] < v17)
    {
LABEL_17:
      if (v37)
        v18 = v13;
      else
        v18 = &v37;
      if (v37)
        v19 = v13 + 1;
      else
        v19 = &v37;
    }
    else
    {
      v18 = &v37;
      v19 = &v37;
      if (v37)
      {
        v19 = &v37;
        while (1)
        {
          while (1)
          {
            v18 = (uint64_t **)v12;
            v21 = v12[4];
            if (v17 >= v21)
              break;
            v12 = *v18;
            v19 = v18;
            if (!*v18)
              goto LABEL_24;
          }
          if (v21 >= v17)
            break;
          v19 = v18 + 1;
          v12 = v18[1];
          if (!v12)
            goto LABEL_24;
        }
      }
    }
    if (!*v19)
    {
LABEL_24:
      v20 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, 40, 8);
      v20[4] = v3[2];
      *v20 = 0;
      v20[1] = 0;
      v20[2] = (uint64_t)v18;
      *v19 = v20;
      if (*v36)
      {
        v36 = (uint64_t **)*v36;
        v20 = *v19;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v37, v20);
      i = ++v39;
    }
  }
  if (*(_BYTE *)(a1 + 433))
    v7 = (_QWORD *)(a1 + 160);
  else
    v7 = (_QWORD *)(a1 + 128);
  if (v7[3] == i)
  {
    v10 = (_QWORD *)*v7;
    v9 = v7 + 1;
    v8 = v10;
    if (v10 == v9)
      return std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v36, v37);
    v11 = v36;
    while ((uint64_t *)v8[4] == v11[4])
    {
      v22 = (_QWORD *)v8[1];
      v23 = v8;
      if (v22)
      {
        do
        {
          v8 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v23[2];
          v16 = *v8 == (_QWORD)v23;
          v23 = v8;
        }
        while (!v16);
      }
      v24 = v11[1];
      if (v24)
      {
        do
        {
          v25 = (uint64_t **)v24;
          v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (uint64_t **)v11[2];
          v16 = *v25 == (uint64_t *)v11;
          v11 = v25;
        }
        while (!v16);
      }
      v11 = v25;
      if (v8 == v9)
        return std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v36, v37);
    }
  }
  v26 = a1 + 168;
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy(a1 + 160, *(_QWORD **)(a1 + 168));
  v27 = v37;
  *(_QWORD *)(a1 + 160) = v36;
  *(_QWORD *)(a1 + 168) = v27;
  v28 = v39;
  *(_QWORD *)(a1 + 184) = v39;
  if (v28)
  {
    v27[2] = v26;
    v36 = &v37;
    v37 = 0;
    v39 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 160) = v26;
  }
  *(_BYTE *)(a1 + 433) = 1;
  return std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v36, v37);
}

void sub_19F8B7334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::LabelCreateExternalIconRequest>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDAB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelCreateExternalIconRequest>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDAB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelCreateExternalIconRequest>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

unint64_t md::LabelExternalObjectsModerator::registerIconForAsynchModeUpdates(unint64_t result, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  size_t v30;
  size_t v31;
  size_t v32;
  _QWORD *i;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;

  if (!*(_BYTE *)(result + 432))
  {
    v4 = result;
    v5 = *a2;
    v6 = HIDWORD(*a2);
    v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v6);
    v8 = (0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47);
    v9 = 0x9DDFEA08EB382D69 * v8;
    v10 = *(_QWORD *)(result + 80);
    if (v10)
    {
      v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] > 1uLL)
      {
        v2 = 0x9DDFEA08EB382D69 * v8;
        if (v9 >= v10)
          v2 = v9 % v10;
      }
      else
      {
        v2 = v9 & (v10 - 1);
      }
      v12 = *(_QWORD **)(*(_QWORD *)(result + 72) + 8 * v2);
      if (v12)
      {
        v13 = (_QWORD *)*v12;
        if (v13)
        {
          if (v11.u32[0] < 2uLL)
          {
            while (1)
            {
              v15 = v13[1];
              if (v15 == v9)
              {
                if (v13[2] == v5)
                  return result;
              }
              else if ((v15 & (v10 - 1)) != v2)
              {
                goto LABEL_23;
              }
              v13 = (_QWORD *)*v13;
              if (!v13)
                goto LABEL_23;
            }
          }
          do
          {
            v14 = v13[1];
            if (v14 == v9)
            {
              if (v13[2] == v5)
                return result;
            }
            else
            {
              if (v14 >= v10)
                v14 %= v10;
              if (v14 != v2)
                break;
            }
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
      }
    }
LABEL_23:
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 104) + 16))(*(_QWORD *)(result + 104), 32, 8);
    v16 = result;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = v9;
    v17 = a2[1];
    *(_QWORD *)(result + 16) = *a2;
    *(_QWORD *)(result + 24) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = (float)(unint64_t)(*(_QWORD *)(v4 + 112) + 1);
    v21 = *(float *)(v4 + 120);
    if (v10 && (float)(v21 * (float)v10) >= v20)
    {
LABEL_75:
      v43 = *(unint64_t **)(*(_QWORD *)(v4 + 72) + 8 * v2);
      if (v43)
      {
        *(_QWORD *)v16 = *v43;
      }
      else
      {
        *(_QWORD *)v16 = *(_QWORD *)(v4 + 96);
        *(_QWORD *)(v4 + 96) = v16;
        *(_QWORD *)(*(_QWORD *)(v4 + 72) + 8 * v2) = v4 + 96;
        if (!*(_QWORD *)v16)
        {
LABEL_84:
          ++*(_QWORD *)(v4 + 112);
          return result;
        }
        v44 = *(_QWORD *)(*(_QWORD *)v16 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v44 >= v10)
            v44 %= v10;
        }
        else
        {
          v44 &= v10 - 1;
        }
        v43 = (unint64_t *)(*(_QWORD *)(v4 + 72) + 8 * v44);
      }
      *v43 = v16;
      goto LABEL_84;
    }
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    if (v25 == 1)
    {
      v25 = 2;
    }
    else if ((v25 & (v25 - 1)) != 0)
    {
      result = std::__next_prime(v25);
      v25 = result;
    }
    v10 = *(_QWORD *)(v4 + 80);
    if (v25 <= v10)
    {
      if (v25 >= v10)
        goto LABEL_62;
      result = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 112) / *(float *)(v4 + 120));
      if (v10 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        result = std::__next_prime(result);
      }
      else
      {
        v38 = 1 << -(char)__clz(result - 1);
        if (result >= 2)
          result = v38;
      }
      if (v25 <= result)
        v25 = result;
      if (v25 >= v10)
      {
        v10 = *(_QWORD *)(v4 + 80);
LABEL_62:
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10)
            v2 = v9 % v10;
          else
            v2 = v9;
        }
        else
        {
          v2 = (v10 - 1) & v9;
        }
        goto LABEL_75;
      }
      if (!v25)
      {
        v45 = *(_QWORD *)(v4 + 72);
        *(_QWORD *)(v4 + 72) = 0;
        if (v45)
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 88) + 40))(*(_QWORD *)(v4 + 88), v45, 8 * *(_QWORD *)(v4 + 80));
        v10 = 0;
        *(_QWORD *)(v4 + 80) = 0;
        goto LABEL_62;
      }
    }
    result = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(v4 + 88) + 16))(*(_QWORD *)(v4 + 88), 8 * v25, 8);
    v26 = *(_QWORD *)(v4 + 72);
    *(_QWORD *)(v4 + 72) = result;
    if (v26)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 88) + 40))(*(_QWORD *)(v4 + 88), v26, 8 * *(_QWORD *)(v4 + 80));
    v27 = 0;
    *(_QWORD *)(v4 + 80) = v25;
    do
      *(_QWORD *)(*(_QWORD *)(v4 + 72) + 8 * v27++) = 0;
    while (v25 != v27);
    v29 = v4 + 96;
    v28 = *(_QWORD **)(v4 + 96);
    if (!v28)
    {
LABEL_61:
      v10 = v25;
      goto LABEL_62;
    }
    v30 = v28[1];
    v31 = v25 - 1;
    if ((v25 & (v25 - 1)) == 0)
    {
      v32 = v30 & v31;
      *(_QWORD *)(*(_QWORD *)(v4 + 72) + 8 * v32) = v29;
      for (i = (_QWORD *)*v28; *v28; i = (_QWORD *)*v28)
      {
        v34 = i[1] & v31;
        if (v34 == v32)
        {
          v28 = i;
        }
        else
        {
          v35 = *(_QWORD *)(v4 + 72);
          if (*(_QWORD *)(v35 + 8 * v34))
          {
            *v28 = *i;
            v36 = 8 * v34;
            *i = **(_QWORD **)(*(_QWORD *)(v4 + 72) + v36);
            **(_QWORD **)(*(_QWORD *)(v4 + 72) + v36) = i;
          }
          else
          {
            *(_QWORD *)(v35 + 8 * v34) = v28;
            v28 = i;
            v32 = v34;
          }
        }
      }
      goto LABEL_61;
    }
    if (v30 >= v25)
      v30 %= v25;
    *(_QWORD *)(*(_QWORD *)(v4 + 72) + 8 * v30) = v29;
    v39 = (_QWORD *)*v28;
    if (!*v28)
      goto LABEL_61;
    while (1)
    {
      v41 = v39[1];
      if (v41 >= v25)
        v41 %= v25;
      if (v41 != v30)
      {
        v42 = *(_QWORD *)(v4 + 72);
        if (!*(_QWORD *)(v42 + 8 * v41))
        {
          *(_QWORD *)(v42 + 8 * v41) = v28;
          goto LABEL_66;
        }
        *v28 = *v39;
        v40 = 8 * v41;
        *v39 = **(_QWORD **)(*(_QWORD *)(v4 + 72) + v40);
        **(_QWORD **)(*(_QWORD *)(v4 + 72) + v40) = v39;
        v39 = v28;
      }
      v41 = v30;
LABEL_66:
      v28 = v39;
      v39 = (_QWORD *)*v39;
      v30 = v41;
      if (!v39)
        goto LABEL_61;
    }
  }
  return result;
}

void sub_19F8B7900(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 104) + 40))(*(_QWORD *)(v1 + 104), v2, 32);
  _Unwind_Resume(a1);
}

void md::LabelExternalIcon::~LabelExternalIcon(md::LabelExternalIcon *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::LabelExternalIcon::debugString(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_19F8B7A10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F8B7AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F8B7B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F8B7BA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F8B7E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F8B7E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F8B7F84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F8B80B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F8B8314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F8B83A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void md::CartographicMapEngineMode::~CartographicMapEngineMode(md::CartographicMapEngineMode *this)
{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
}

{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::CartographicMapEngineMode::applyRenderLayerSettings(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x8_t v14;
  uint8x8_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int8x8_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x8_t v31;
  uint8x8_t v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x8_t v40;
  uint8x8_t v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int8x8_t v49;
  uint8x8_t v50;
  uint64_t v51;
  uint64_t **v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int8x8_t v57;
  uint8x8_t v58;
  uint64_t v59;
  uint64_t **v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int8x8_t v68;
  uint8x8_t v69;
  uint64_t v70;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int8x8_t v77;
  uint8x8_t v78;
  uint64_t v79;
  uint64_t **v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int8x8_t *v85;
  int8x8_t v86;
  uint8x8_t v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int8x8_t v96;
  uint8x8_t v97;
  uint64_t v98;
  uint64_t **v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v4 = *(uint64_t **)(a2 + 1128);
  v5 = *v4;
  v6 = v4[1];
  v7 = *v4;
  if (*v4 != v6)
  {
    v7 = *v4;
    while (*(_BYTE *)v7 != 1)
    {
      v7 += 16;
      if (v7 == v6)
        goto LABEL_13;
    }
  }
  if (v7 == v6 || !*(_QWORD *)(v7 + 8))
  {
LABEL_13:
    v9 = 0;
  }
  else
  {
    v8 = *v4;
    if (v5 != v6)
    {
      v8 = *v4;
      while (*(_BYTE *)v8 != 24)
      {
        v8 += 16;
        if (v8 == v6)
          goto LABEL_16;
      }
    }
    if (v8 == v6)
LABEL_16:
      v10 = 0;
    else
      v10 = *(_QWORD *)(v8 + 8);
    v9 = v10 != 0;
  }
  v11 = *v4;
  if (v5 != v6)
  {
    v11 = *v4;
    while (*(_BYTE *)v11 != 1)
    {
      v11 += 16;
      if (v11 == v6)
      {
        LODWORD(v12) = 0;
        if (!v9)
          goto LABEL_61;
        goto LABEL_38;
      }
    }
  }
  if (v11 == v6)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      v13 = *v4;
      if (v5 != v6)
      {
        v13 = *v4;
        while (*(_BYTE *)v13 != 24)
        {
          v13 += 16;
          if (v13 == v6)
            goto LABEL_36;
        }
      }
      if (v13 == v6)
LABEL_36:
        v12 = 0;
      else
        v12 = *(_QWORD *)(v13 + 8);
      LODWORD(v12) = v12 == 0;
      if (!v9)
        goto LABEL_61;
      goto LABEL_38;
    }
  }
  if (!v9)
    goto LABEL_61;
LABEL_38:
  v14 = (int8x8_t)a3[1];
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8(v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v16 = 30;
      if (*(_QWORD *)&v14 <= 0x1EuLL)
        v16 = 0x1Eu % a3[1];
    }
    else
    {
      v16 = (v14.i8[0] - 1) & 0x1E;
    }
    v17 = *(uint64_t ***)(*a3 + 8 * v16);
    if (v17)
    {
      v18 = *v17;
      if (v18)
      {
        if (v15.u32[0] < 2uLL)
        {
          v19 = *(_QWORD *)&v14 - 1;
          while (1)
          {
            v21 = v18[1];
            if (v21 == 30)
            {
              if (*((_BYTE *)v18 + 16) == 30)
                goto LABEL_59;
            }
            else if ((v21 & v19) != v16)
            {
              goto LABEL_61;
            }
            v18 = (uint64_t *)*v18;
            if (!v18)
              goto LABEL_61;
          }
        }
        do
        {
          v20 = v18[1];
          if (v20 == 30)
          {
            if (*((_BYTE *)v18 + 16) == 30)
            {
LABEL_59:
              if (*((_BYTE *)v18 + 17) == 2)
                *((_BYTE *)v18 + 17) = 1;
              break;
            }
          }
          else
          {
            if (v20 >= *(_QWORD *)&v14)
              v20 %= *(_QWORD *)&v14;
            if (v20 != v16)
              break;
          }
          v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
    }
  }
LABEL_61:
  if ((_DWORD)v12)
  {
    v22 = (int8x8_t)a3[1];
    if (v22)
    {
      v23 = (uint8x8_t)vcnt_s8(v22);
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        v24 = 26;
        if (*(_QWORD *)&v22 <= 0x1AuLL)
          v24 = 0x1Au % a3[1];
      }
      else
      {
        v24 = (v22.i32[0] - 1) & 0x1ALL;
      }
      v25 = *(uint64_t ***)(*a3 + 8 * v24);
      if (v25)
      {
        v26 = *v25;
        if (v26)
        {
          if (v23.u32[0] < 2uLL)
          {
            v27 = *(_QWORD *)&v22 - 1;
            while (1)
            {
              v29 = v26[1];
              if (v29 == 26)
              {
                if (*((_BYTE *)v26 + 16) == 26)
                  goto LABEL_83;
              }
              else if ((v29 & v27) != v24)
              {
                goto LABEL_85;
              }
              v26 = (uint64_t *)*v26;
              if (!v26)
                goto LABEL_85;
            }
          }
          do
          {
            v28 = v26[1];
            if (v28 == 26)
            {
              if (*((_BYTE *)v26 + 16) == 26)
              {
LABEL_83:
                if (*((_BYTE *)v26 + 17) == 2)
                  *((_BYTE *)v26 + 17) = 1;
                break;
              }
            }
            else
            {
              if (v28 >= *(_QWORD *)&v22)
                v28 %= *(_QWORD *)&v22;
              if (v28 != v24)
                break;
            }
            v26 = (uint64_t *)*v26;
          }
          while (v26);
        }
      }
    }
  }
LABEL_85:
  v30 = v5;
  if (v5 != v6)
  {
    v30 = v5;
    while (*(_BYTE *)v30)
    {
      v30 += 16;
      if (v30 == v6)
        goto LABEL_115;
    }
  }
  if (v30 != v6)
  {
    if (*(_QWORD *)(v30 + 8))
    {
      v31 = (int8x8_t)a3[1];
      if (v31)
      {
        v32 = (uint8x8_t)vcnt_s8(v31);
        v32.i16[0] = vaddlv_u8(v32);
        if (v32.u32[0] > 1uLL)
        {
          v33 = 27;
          if (*(_QWORD *)&v31 <= 0x1BuLL)
            v33 = 0x1Bu % a3[1];
        }
        else
        {
          v33 = (v31.i32[0] - 1) & 0x1BLL;
        }
        v34 = *(uint64_t ***)(*a3 + 8 * v33);
        if (v34)
        {
          v35 = *v34;
          if (v35)
          {
            if (v32.u32[0] < 2uLL)
            {
              v36 = *(_QWORD *)&v31 - 1;
              while (1)
              {
                v38 = v35[1];
                if (v38 == 27)
                {
                  if (*((_BYTE *)v35 + 16) == 27)
                    goto LABEL_113;
                }
                else if ((v38 & v36) != v33)
                {
                  goto LABEL_115;
                }
                v35 = (uint64_t *)*v35;
                if (!v35)
                  goto LABEL_115;
              }
            }
            do
            {
              v37 = v35[1];
              if (v37 == 27)
              {
                if (*((_BYTE *)v35 + 16) == 27)
                {
LABEL_113:
                  if (*((_BYTE *)v35 + 17) == 2)
                    *((_BYTE *)v35 + 17) = 1;
                  break;
                }
              }
              else
              {
                if (v37 >= *(_QWORD *)&v31)
                  v37 %= *(_QWORD *)&v31;
                if (v37 != v33)
                  break;
              }
              v35 = (uint64_t *)*v35;
            }
            while (v35);
          }
        }
      }
    }
  }
LABEL_115:
  v39 = v5;
  if (v5 != v6)
  {
    v39 = v5;
    while (*(_BYTE *)v39 != 2)
    {
      v39 += 16;
      if (v39 == v6)
        goto LABEL_145;
    }
  }
  if (v39 != v6)
  {
    if (*(_QWORD *)(v39 + 8))
    {
      v40 = (int8x8_t)a3[1];
      if (v40)
      {
        v41 = (uint8x8_t)vcnt_s8(v40);
        v41.i16[0] = vaddlv_u8(v41);
        if (v41.u32[0] > 1uLL)
        {
          v42 = 43;
          if (*(_QWORD *)&v40 <= 0x2BuLL)
            v42 = 0x2Bu % a3[1];
        }
        else
        {
          v42 = (v40.i32[0] - 1) & 0x2BLL;
        }
        v43 = *(uint64_t ***)(*a3 + 8 * v42);
        if (v43)
        {
          v44 = *v43;
          if (v44)
          {
            if (v41.u32[0] < 2uLL)
            {
              v45 = *(_QWORD *)&v40 - 1;
              while (1)
              {
                v47 = v44[1];
                if (v47 == 43)
                {
                  if (*((_BYTE *)v44 + 16) == 43)
                    goto LABEL_143;
                }
                else if ((v47 & v45) != v42)
                {
                  goto LABEL_145;
                }
                v44 = (uint64_t *)*v44;
                if (!v44)
                  goto LABEL_145;
              }
            }
            do
            {
              v46 = v44[1];
              if (v46 == 43)
              {
                if (*((_BYTE *)v44 + 16) == 43)
                {
LABEL_143:
                  if (*((_BYTE *)v44 + 17) == 2)
                    *((_BYTE *)v44 + 17) = 1;
                  break;
                }
              }
              else
              {
                if (v46 >= *(_QWORD *)&v40)
                  v46 %= *(_QWORD *)&v40;
                if (v46 != v42)
                  break;
              }
              v44 = (uint64_t *)*v44;
            }
            while (v44);
          }
        }
      }
    }
  }
LABEL_145:
  v48 = v5;
  if (v5 != v6)
  {
    v48 = v5;
    while (*(_BYTE *)v48 != 5)
    {
      v48 += 16;
      if (v48 == v6)
        goto LABEL_175;
    }
  }
  if (v48 != v6)
  {
    if (*(_QWORD *)(v48 + 8))
    {
      v49 = (int8x8_t)a3[1];
      if (v49)
      {
        v50 = (uint8x8_t)vcnt_s8(v49);
        v50.i16[0] = vaddlv_u8(v50);
        if (v50.u32[0] > 1uLL)
        {
          v51 = 41;
          if (*(_QWORD *)&v49 <= 0x29uLL)
            v51 = 0x29u % a3[1];
        }
        else
        {
          v51 = (v49.i32[0] - 1) & 0x29;
        }
        v52 = *(uint64_t ***)(*a3 + 8 * v51);
        if (v52)
        {
          v53 = *v52;
          if (v53)
          {
            if (v50.u32[0] < 2uLL)
            {
              v54 = *(_QWORD *)&v49 - 1;
              while (1)
              {
                v56 = v53[1];
                if (v56 == 41)
                {
                  if (*((_BYTE *)v53 + 16) == 41)
                    goto LABEL_173;
                }
                else if ((v56 & v54) != v51)
                {
                  goto LABEL_175;
                }
                v53 = (uint64_t *)*v53;
                if (!v53)
                  goto LABEL_175;
              }
            }
            do
            {
              v55 = v53[1];
              if (v55 == 41)
              {
                if (*((_BYTE *)v53 + 16) == 41)
                {
LABEL_173:
                  if (*((_BYTE *)v53 + 17) == 2)
                    *((_BYTE *)v53 + 17) = 1;
                  break;
                }
              }
              else
              {
                if (v55 >= *(_QWORD *)&v49)
                  v55 %= *(_QWORD *)&v49;
                if (v55 != v51)
                  break;
              }
              v53 = (uint64_t *)*v53;
            }
            while (v53);
          }
        }
      }
    }
  }
LABEL_175:
  if (v5 != v6)
  {
    while (*(_BYTE *)v5 != 5)
    {
      v5 += 16;
      if (v5 == v6)
        goto LABEL_204;
    }
  }
  if (v5 != v6)
  {
    if (*(_QWORD *)(v5 + 8))
    {
      v57 = (int8x8_t)a3[1];
      if (v57)
      {
        v58 = (uint8x8_t)vcnt_s8(v57);
        v58.i16[0] = vaddlv_u8(v58);
        if (v58.u32[0] > 1uLL)
        {
          v59 = 42;
          if (*(_QWORD *)&v57 <= 0x2AuLL)
            v59 = 0x2Au % a3[1];
        }
        else
        {
          v59 = (v57.i32[0] - 1) & 0x2ALL;
        }
        v60 = *(uint64_t ***)(*a3 + 8 * v59);
        if (v60)
        {
          v61 = *v60;
          if (v61)
          {
            if (v58.u32[0] < 2uLL)
            {
              v62 = *(_QWORD *)&v57 - 1;
              while (1)
              {
                v64 = v61[1];
                if (v64 == 42)
                {
                  if (*((_BYTE *)v61 + 16) == 42)
                    goto LABEL_202;
                }
                else if ((v64 & v62) != v59)
                {
                  goto LABEL_204;
                }
                v61 = (uint64_t *)*v61;
                if (!v61)
                  goto LABEL_204;
              }
            }
            do
            {
              v63 = v61[1];
              if (v63 == 42)
              {
                if (*((_BYTE *)v61 + 16) == 42)
                {
LABEL_202:
                  if (*((_BYTE *)v61 + 17) == 2)
                    *((_BYTE *)v61 + 17) = 1;
                  break;
                }
              }
              else
              {
                if (v63 >= *(_QWORD *)&v57)
                  v63 %= *(_QWORD *)&v57;
                if (v63 != v59)
                  break;
              }
              v61 = (uint64_t *)*v61;
            }
            while (v61);
          }
        }
      }
    }
  }
LABEL_204:
  v65 = *v4;
  v66 = v4[1];
  v67 = *v4;
  if (*v4 != v66)
  {
    v67 = *v4;
    while (*(_BYTE *)v67 != 32)
    {
      v67 += 16;
      if (v67 == v66)
        goto LABEL_234;
    }
  }
  if (v67 != v66)
  {
    if (*(_QWORD *)(v67 + 8))
    {
      v68 = (int8x8_t)a3[1];
      if (v68)
      {
        v69 = (uint8x8_t)vcnt_s8(v68);
        v69.i16[0] = vaddlv_u8(v69);
        if (v69.u32[0] > 1uLL)
        {
          v70 = 14;
          if (*(_QWORD *)&v68 <= 0xEuLL)
            v70 = 0xEu % a3[1];
        }
        else
        {
          v70 = (v68.i8[0] - 1) & 0xE;
        }
        v71 = *(uint64_t ***)(*a3 + 8 * v70);
        if (v71)
        {
          v72 = *v71;
          if (v72)
          {
            if (v69.u32[0] < 2uLL)
            {
              v73 = *(_QWORD *)&v68 - 1;
              while (1)
              {
                v75 = v72[1];
                if (v75 == 14)
                {
                  if (*((_BYTE *)v72 + 16) == 14)
                    goto LABEL_232;
                }
                else if ((v75 & v73) != v70)
                {
                  goto LABEL_234;
                }
                v72 = (uint64_t *)*v72;
                if (!v72)
                  goto LABEL_234;
              }
            }
            do
            {
              v74 = v72[1];
              if (v74 == 14)
              {
                if (*((_BYTE *)v72 + 16) == 14)
                {
LABEL_232:
                  if (*((_BYTE *)v72 + 17) == 2)
                    *((_BYTE *)v72 + 17) = 1;
                  break;
                }
              }
              else
              {
                if (v74 >= *(_QWORD *)&v68)
                  v74 %= *(_QWORD *)&v68;
                if (v74 != v70)
                  break;
              }
              v72 = (uint64_t *)*v72;
            }
            while (v72);
          }
        }
      }
    }
  }
LABEL_234:
  v76 = v65;
  if (v65 != v66)
  {
    v76 = v65;
    while (*(_BYTE *)v76 != 33)
    {
      v76 += 16;
      if (v76 == v66)
        goto LABEL_264;
    }
  }
  if (v76 != v66)
  {
    if (*(_QWORD *)(v76 + 8))
    {
      v77 = (int8x8_t)a3[1];
      if (v77)
      {
        v78 = (uint8x8_t)vcnt_s8(v77);
        v78.i16[0] = vaddlv_u8(v78);
        if (v78.u32[0] > 1uLL)
        {
          v79 = 25;
          if (*(_QWORD *)&v77 <= 0x19uLL)
            v79 = 0x19u % a3[1];
        }
        else
        {
          v79 = (v77.i32[0] - 1) & 0x19;
        }
        v80 = *(uint64_t ***)(*a3 + 8 * v79);
        if (v80)
        {
          v81 = *v80;
          if (v81)
          {
            if (v78.u32[0] < 2uLL)
            {
              v82 = *(_QWORD *)&v77 - 1;
              while (1)
              {
                v84 = v81[1];
                if (v84 == 25)
                {
                  if (*((_BYTE *)v81 + 16) == 25)
                    goto LABEL_262;
                }
                else if ((v84 & v82) != v79)
                {
                  goto LABEL_264;
                }
                v81 = (uint64_t *)*v81;
                if (!v81)
                  goto LABEL_264;
              }
            }
            do
            {
              v83 = v81[1];
              if (v83 == 25)
              {
                if (*((_BYTE *)v81 + 16) == 25)
                {
LABEL_262:
                  if (*((_BYTE *)v81 + 17) == 2)
                    *((_BYTE *)v81 + 17) = 1;
                  break;
                }
              }
              else
              {
                if (v83 >= *(_QWORD *)&v77)
                  v83 %= *(_QWORD *)&v77;
                if (v83 != v79)
                  break;
              }
              v81 = (uint64_t *)*v81;
            }
            while (v81);
          }
        }
      }
    }
  }
LABEL_264:
  v85 = *(int8x8_t **)(a2 + 1120);
  v86 = v85[2];
  if (!*(_QWORD *)&v86)
    goto LABEL_284;
  v87 = (uint8x8_t)vcnt_s8(v86);
  v87.i16[0] = vaddlv_u8(v87);
  if (v87.u32[0] > 1uLL)
  {
    v88 = 0xC74495586E0C32F6;
    if (*(_QWORD *)&v86 <= 0xC74495586E0C32F6)
      v88 = 0xC74495586E0C32F6 % *(_QWORD *)&v86;
  }
  else
  {
    v88 = (*(_QWORD *)&v86 - 1) & 0xC74495586E0C32F6;
  }
  v89 = *(_QWORD **)(*(_QWORD *)&v85[1] + 8 * v88);
  if (!v89 || (v90 = (_QWORD *)*v89) == 0)
  {
LABEL_284:
    v94 = 0;
    goto LABEL_285;
  }
  if (v87.u32[0] < 2uLL)
  {
    v91 = *(_QWORD *)&v86 - 1;
    while (1)
    {
      v93 = v90[1];
      if (v93 == 0xC74495586E0C32F6)
      {
        if (v90[2] == 0xC74495586E0C32F6)
          goto LABEL_317;
      }
      else if ((v93 & v91) != v88)
      {
        goto LABEL_284;
      }
      v90 = (_QWORD *)*v90;
      if (!v90)
        goto LABEL_284;
    }
  }
  while (1)
  {
    v92 = v90[1];
    if (v92 == 0xC74495586E0C32F6)
      break;
    if (v92 >= *(_QWORD *)&v86)
      v92 %= *(_QWORD *)&v86;
    if (v92 != v88)
      goto LABEL_284;
LABEL_274:
    v90 = (_QWORD *)*v90;
    if (!v90)
      goto LABEL_284;
  }
  if (v90[2] != 0xC74495586E0C32F6)
    goto LABEL_274;
LABEL_317:
  v94 = v90[5];
LABEL_285:
  v95 = v65;
  if (v65 != v66)
  {
    v95 = v65;
    while (*(_BYTE *)v95 != 34)
    {
      v95 += 16;
      if (v95 == v66)
        goto LABEL_292;
    }
  }
  if (v95 == v66 || !*(_QWORD *)(v95 + 8))
  {
LABEL_292:
    if (!v94 || !*(_BYTE *)(v94 + 56) || !*(_BYTE *)(v94 + 392) || fabsf(*(float *)(v94 + 356)) <= 0.0001)
      goto LABEL_320;
  }
  v96 = (int8x8_t)a3[1];
  if (v96)
  {
    v97 = (uint8x8_t)vcnt_s8(v96);
    v97.i16[0] = vaddlv_u8(v97);
    if (v97.u32[0] > 1uLL)
    {
      v98 = 17;
      if (*(_QWORD *)&v96 <= 0x11uLL)
        v98 = 0x11u % a3[1];
    }
    else
    {
      v98 = (v96.i32[0] - 1) & 0x11;
    }
    v99 = *(uint64_t ***)(*a3 + 8 * v98);
    if (v99)
    {
      v100 = *v99;
      if (v100)
      {
        if (v97.u32[0] < 2uLL)
        {
          v101 = *(_QWORD *)&v96 - 1;
          while (1)
          {
            v103 = v100[1];
            if (v103 == 17)
            {
              if (*((_BYTE *)v100 + 16) == 17)
                goto LABEL_318;
            }
            else if ((v103 & v101) != v98)
            {
              goto LABEL_320;
            }
            v100 = (uint64_t *)*v100;
            if (!v100)
              goto LABEL_320;
          }
        }
        do
        {
          v102 = v100[1];
          if (v102 == 17)
          {
            if (*((_BYTE *)v100 + 16) == 17)
            {
LABEL_318:
              if (*((_BYTE *)v100 + 17) == 2)
                *((_BYTE *)v100 + 17) = 1;
              break;
            }
          }
          else
          {
            if (v102 >= *(_QWORD *)&v96)
              v102 %= *(_QWORD *)&v96;
            if (v102 != v98)
              break;
          }
          v100 = (uint64_t *)*v100;
        }
        while (v100);
      }
    }
  }
LABEL_320:
  v104 = v65;
  if (v65 != v66)
  {
    v104 = v65;
    while (*(_BYTE *)v104 != 8)
    {
      v104 += 16;
      if (v104 == v66)
        goto LABEL_328;
    }
  }
  if (v104 != v66 && *(_QWORD *)(v104 + 8))
  {
    std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0x15u);
    v65 = *v4;
    v66 = v4[1];
  }
LABEL_328:
  if (v65 != v66)
  {
    v105 = v65;
    while (*(_BYTE *)v105 != 8)
    {
      v105 += 16;
      if (v105 == v66)
        goto LABEL_336;
    }
    if (v105 != v66 && *(_QWORD *)(v105 + 8))
    {
      std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0x17u);
      v65 = *v4;
      v66 = v4[1];
    }
  }
LABEL_336:
  if (v65 != v66)
  {
    v106 = v65;
    while (*(_BYTE *)v106 != 10)
    {
      v106 += 16;
      if (v106 == v66)
        goto LABEL_344;
    }
    if (v106 != v66 && *(_QWORD *)(v106 + 8))
    {
      std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0xCu);
      v65 = *v4;
      v66 = v4[1];
    }
  }
LABEL_344:
  if (v65 != v66)
  {
    v107 = v65;
    while (*(_BYTE *)v107 != 10)
    {
      v107 += 16;
      if (v107 == v66)
        goto LABEL_352;
    }
    if (v107 != v66 && *(_QWORD *)(v107 + 8))
    {
      std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0xDu);
      v65 = *v4;
      v66 = v4[1];
    }
  }
LABEL_352:
  if (v65 != v66)
  {
    v108 = v65;
    while (*(_BYTE *)v108 != 13)
    {
      v108 += 16;
      if (v108 == v66)
        goto LABEL_360;
    }
    if (v108 != v66 && *(_QWORD *)(v108 + 8))
    {
      std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0x1Au);
      v65 = *v4;
      v66 = v4[1];
    }
  }
LABEL_360:
  if (v65 != v66)
  {
    v109 = v65;
    while (*(_BYTE *)v109 != 13)
    {
      v109 += 16;
      if (v109 == v66)
        goto LABEL_368;
    }
    if (v109 != v66 && *(_QWORD *)(v109 + 8))
    {
      std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0x1Eu);
      v65 = *v4;
      v66 = v4[1];
    }
  }
LABEL_368:
  if (v65 == v66)
    goto LABEL_378;
  v110 = v65;
  while (*(_BYTE *)v110 != 14)
  {
    v110 += 16;
    if (v110 == v66)
      goto LABEL_378;
  }
  if (v110 != v66 && *(_QWORD *)(v110 + 8))
  {
    std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 8u);
    v65 = *v4;
    v66 = v4[1];
  }
LABEL_378:
  while (v65 != v66)
  {
    if (*(_BYTE *)v65 == 14)
    {
      if (v65 != v66 && *(_QWORD *)(v65 + 8))
        std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0xBu);
      break;
    }
    v65 += 16;
  }
  v111 = *v4;
  v112 = v4[1];
  v113 = *v4;
  if (*v4 != v112)
  {
    v113 = *v4;
    while (*(_BYTE *)v113 != 14)
    {
      v113 += 16;
      if (v113 == v112)
        goto LABEL_387;
    }
  }
  if (v113 != v112 && *(_QWORD *)(v113 + 8))
  {
    std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 9u);
    v111 = *v4;
    v112 = v4[1];
  }
LABEL_387:
  if (v111 != v112)
  {
    v114 = v111;
    while (*(_BYTE *)v114 != 14)
    {
      v114 += 16;
      if (v114 == v112)
        goto LABEL_398;
    }
    if (v114 != v112 && *(_QWORD *)(v114 + 8))
    {
      std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 7u);
      v111 = *v4;
      v112 = v4[1];
    }
  }
LABEL_398:
  if (v111 != v112)
  {
    v115 = v111;
    while (*(_BYTE *)v115 != 15)
    {
      v115 += 16;
      if (v115 == v112)
        goto LABEL_406;
    }
    if (v115 != v112 && *(_QWORD *)(v115 + 8))
    {
      std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 2u);
      v111 = *v4;
      v112 = v4[1];
    }
  }
LABEL_406:
  if (v111 == v112)
    goto LABEL_416;
  v116 = v111;
  while (*(_BYTE *)v116 != 16)
  {
    v116 += 16;
    if (v116 == v112)
      goto LABEL_416;
  }
  if (v116 != v112 && *(_QWORD *)(v116 + 8))
  {
    std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0x13u);
    v111 = *v4;
    v112 = v4[1];
  }
LABEL_416:
  while (v111 != v112)
  {
    if (*(_BYTE *)v111 == 16)
    {
      if (v111 != v112)
      {
        if (*(_QWORD *)(v111 + 8))
          std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 0x14u);
      }
      return;
    }
    v111 += 16;
  }
}

void std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(uint64_t *a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;

  v2 = a1[1];
  if (v2)
  {
    v3 = a2;
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = a2;
      if (v2 <= a2)
        v5 = a2 % v2;
    }
    else
    {
      v5 = ((_DWORD)v2 - 1) & a2;
    }
    v6 = *a1;
    v7 = *(unsigned __int8 ***)(*a1 + 8 * v5);
    if (v7)
    {
      v8 = *v7;
      if (v8)
      {
        v9 = v2 - 1;
        if (v4.u32[0] < 2uLL)
        {
          while (1)
          {
            v10 = *((_QWORD *)v8 + 1);
            if (v10 == a2)
            {
              if (v8[16] == a2)
                goto LABEL_22;
            }
            else if ((v10 & v9) != v5)
            {
              return;
            }
            v8 = *(unsigned __int8 **)v8;
            if (!v8)
              return;
          }
        }
        do
        {
          v11 = *((_QWORD *)v8 + 1);
          if (v11 == a2)
          {
            if (v8[16] == a2)
            {
LABEL_22:
              if (v4.u32[0] > 1uLL)
              {
                if (v2 <= a2)
                  v3 = a2 % v2;
              }
              else
              {
                v3 = v9 & a2;
              }
              v12 = *(unsigned __int8 **)(v6 + 8 * v3);
              do
              {
                v13 = (uint64_t *)v12;
                v12 = *(unsigned __int8 **)v12;
              }
              while (v12 != v8);
              if (v13 == a1 + 2)
                goto LABEL_39;
              v14 = v13[1];
              if (v4.u32[0] > 1uLL)
              {
                if (v14 >= v2)
                  v14 %= v2;
              }
              else
              {
                v14 &= v9;
              }
              if (v14 != v3)
              {
LABEL_39:
                if (!*(_QWORD *)v8)
                  goto LABEL_40;
                v15 = *(_QWORD *)(*(_QWORD *)v8 + 8);
                if (v4.u32[0] > 1uLL)
                {
                  if (v15 >= v2)
                    v15 %= v2;
                }
                else
                {
                  v15 &= v9;
                }
                if (v15 != v3)
LABEL_40:
                  *(_QWORD *)(v6 + 8 * v3) = 0;
              }
              v16 = *(unsigned __int8 **)v8;
              if (*(_QWORD *)v8)
              {
                v17 = *((_QWORD *)v16 + 1);
                if (v4.u32[0] > 1uLL)
                {
                  if (v17 >= v2)
                    v17 %= v2;
                }
                else
                {
                  v17 &= v9;
                }
                if (v17 != v3)
                {
                  *(_QWORD *)(*a1 + 8 * v17) = v13;
                  v16 = *(unsigned __int8 **)v8;
                }
              }
              *v13 = (uint64_t)v16;
              *(_QWORD *)v8 = 0;
              --a1[3];
              operator delete(v8);
              return;
            }
          }
          else
          {
            if (v11 >= v2)
              v11 %= v2;
            if (v11 != v5)
              return;
          }
          v8 = *(unsigned __int8 **)v8;
        }
        while (v8);
      }
    }
  }
}

__n128 md::ARMeshRenderResources::generateIcoSphereCached(md::ARMeshRenderResources *this, unsigned int a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  float *v10;
  float *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count_vtbl *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  __int128 v19;
  std::__shared_weak_count_vtbl *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count_vtbl *v24;
  float *v25;
  float *v26;
  float32x2_t *v27;
  float32x2_t v28;
  int8x16_t v29;
  _WORD *v30;
  float *v31;
  _WORD *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float32x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  float32x4_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  int16x8_t v58;
  __int16 *v59;
  _DWORD *v60;
  _DWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  const float *v66;
  __int16 *v67;
  uint64_t v68;
  const float *v69;
  int16x8_t v70;
  int16x8_t v71;
  __int16 *v72;
  int16x4_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  char *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t **v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t *v109;
  uint64_t **v110;
  uint64_t **v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  __n128 *v142;
  __n128 result;
  md::ARMeshRenderResources *v144;
  _BYTE *v145;
  _BYTE *v146;
  uint64_t *v147;
  uint64_t v148;
  int8x16_t v149;
  int16x8_t v150;
  unint64_t v151;
  __int16 *v152;
  __int128 v153;
  unint64_t v154;
  std::__shared_weak_count_vtbl *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  __int128 v158;
  unint64_t v159;
  std::__shared_weak_count_vtbl *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  __int128 v163;
  unint64_t v164;
  std::__shared_weak_count_vtbl *v165;
  _BYTE *v166;
  _BYTE *v167;
  uint64_t v168;
  float *v169;
  float *v170;
  uint64_t v171;
  uint64_t v172[2];
  std::__shared_weak_count *v173;
  std::__shared_weak_count *v174;
  float32x4x3_t v175;
  int16x8x3_t v176;

  if ((v4 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))std::array<std::shared_ptr<ggl::DaVinci::TexturedMesh>,3ul>::~array, md::ARMeshRenderResources::generateIcoSphereCached(unsigned char)::_icoSpheres, &dword_19F029000);
  }
  if ((v5 & 1) == 0
  {
  }
  if (a2 >= 3)
    v6 = 3;
  else
    v6 = a2;
  v7 = md::ARMeshRenderResources::generateIcoSphereCached(unsigned char)::_icoSpheres[2 * v6];
  if (!v7)
  {
    v147 = &md::ARMeshRenderResources::generateIcoSphereCached(unsigned char)::_icoSpheres[2 * v6];
    v169 = 0;
    v170 = 0;
    v171 = 0;
    v166 = 0;
    v167 = 0;
    v168 = 0;
    md::GeometryLogic::createIcoSphere(&v169, (void **)&v166, v6);
    v9 = v166;
    v8 = v167;
    v11 = v169;
    v10 = v170;
    v12 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v145 = v9;
    v146 = v8;
    v12->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    v14 = 0xAAAAAAAAAAAAAAABLL * (v10 - v11);
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E04F0;
    ggl::BufferData::BufferData((uint64_t)&v12[1], 12, 0, 0, 6, v14);
    v12[9].__shared_weak_owners_ = (uint64_t)"/VertexData";
    v12[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::DaVinci::texturedVboReflection;
    v12[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B81E0;
    v12[9].__shared_owners_ = (uint64_t)&unk_1E42B8200;
    *(_QWORD *)&v15 = 0;
    if (v12[1].__shared_owners_ * v14)
      v16 = v12[4].__vftable;
    else
      v16 = 0;
    *((_QWORD *)&v15 + 1) = v12 + 1;
    v163 = v15;
    v164 = v12[1].__shared_owners_ * v14;
    v165 = v16;
    v17 = (std::__shared_weak_count *)operator new(0xE0uLL);
    v17->__shared_owners_ = 0;
    v17->__shared_weak_owners_ = 0;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF488;
    v18 = ggl::BufferData::BufferData((uint64_t)&v17[1], qword_1EE5517E8, 3, 1, 6, v14);
    v17[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6F28;
    v161 = v18;
    v162 = v17;
    *(_QWORD *)&v19 = 0;
    *((_QWORD *)&v19 + 1) = v18;
    if (v17[1].__shared_owners_ * v14)
      v20 = v17[4].__vftable;
    else
      v20 = 0;
    v158 = v19;
    v159 = v17[1].__shared_owners_ * v14;
    v160 = v20;
    v21 = (std::__shared_weak_count *)operator new(0xE0uLL);
    v21->__shared_owners_ = 0;
    v21->__shared_weak_owners_ = 0;
    v21->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF4C0;
    v22 = ggl::BufferData::BufferData((uint64_t)&v21[1], qword_1EE5517A8, 3, 1, 6, v14);
    v21[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6F48;
    v156 = v22;
    v157 = v21;
    *(_QWORD *)&v23 = 0;
    *((_QWORD *)&v23 + 1) = v22;
    v144 = this;
    v148 = v6;
    if (v21[1].__shared_owners_ * v14)
      v24 = v21[4].__vftable;
    else
      v24 = 0;
    v153 = v23;
    v154 = v21[1].__shared_owners_ * v14;
    v155 = v24;
    v25 = v169;
    v26 = v170;
    if (v169 != v170)
    {
      v27 = (float32x2_t *)((char *)&md::ARMeshRenderResources::generateIcoSphereCached(unsigned char)::_icoSpheresBounds
                          + 24 * v6);
      v28 = v27[2];
      v29 = *(int8x16_t *)v27->f32;
      v30 = (_WORD *)&v20->~__shared_weak_count + 1;
      v31 = (float *)&v16->~__shared_weak_count_0;
      v32 = (_WORD *)&v24->~__shared_weak_count + 1;
      do
      {
        v149 = v29;
        v33 = *v25;
        v34 = v25[1];
        v35 = v25[2];
        *(v31 - 2) = *v25;
        *(v31 - 1) = v34;
        *v31 = v35;
        v31 += 3;
        v36 = v25[1];
        v37 = v25[2];
        v38 = 1.0 / sqrtf((float)((float)(*v25 * *v25) + (float)(v36 * v36)) + (float)(v37 * v37));
        v39 = (float)(v38 * v37) + 1.0;
        v40 = v38 * 0.28126;
        _S2 = (float)((float)(v40 * *v25) / v39) + 0.5;
        _S3 = (float)((float)(v40 * v36) / v39) + 0.5;
        __asm
        {
          FCVT            H2, S2
          FCVT            H3, S3
        }
        *(v32 - 1) = LOWORD(_S2);
        *v32 = LOWORD(_S3);
        _D15 = atan2f(v35, v33) * 0.159154943;
        *(double *)_Q0.i64 = asinf(v34) * 0.318309886 + 0.5;
        __asm
        {
          FCVT            H1, D15
          FCVT            H0, D0
        }
        *(v30 - 1) = _H1;
        *v30 = _Q0.i16[0];
        _Q0.i32[0] = *(__int32 *)v25;
        v50 = (float32x4_t)v149;
        v50.f32[3] = *v25;
        v51.i64[0] = *(_QWORD *)(v25 + 1);
        v52 = vextq_s8(vextq_s8(_Q0, _Q0, 4uLL), v51, 0xCuLL);
        v53 = (float32x4_t)v52;
        v53.i32[3] = v149.i32[3];
        v52.i32[3] = v52.i32[0];
        v29 = vbslq_s8((int8x16_t)vcgtq_f32(v50, v53), v52, v149);
        *(int8x16_t *)v27->f32 = v29;
        v28 = vmaxnm_f32(v28, *(float32x2_t *)v51.i8);
        v27[2] = v28;
        v30 += 2;
        v32 += 2;
        v25 += 3;
      }
      while (v25 != v26);
    }
    v54 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v55 = (v146 - v145) >> 2;
    v54->__shared_owners_ = 0;
    v56 = (unint64_t *)&v54->__shared_owners_;
    v57 = 0xAAAAAAAAAAAAAAABLL * v55;
    v54->__shared_weak_owners_ = 0;
    v54->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
    ggl::BufferData::BufferData((uint64_t)&v54[1], 2, 1, 0, 6, v55);
    LODWORD(v54[10].__vftable) = 0;
    v54[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
    v54[1].__shared_owners_ = 2;
    v54[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
    v54[9].__shared_weak_owners_ = (uint64_t)"/IndexData";
    v58.i64[0] = 0;
    v58.i64[1] = (uint64_t)&v54[1];
    if (v146 == v145)
      v59 = 0;
    else
      v59 = (__int16 *)v54[4].__vftable;
    v150 = v58;
    v151 = 6 * v57;
    v152 = v59;
    v60 = v166;
    v61 = v167;
    if (v166 != v167)
    {
      v62 = v167 - v166 - 12;
      if (v62 <= 0x53)
      {
        v63 = 0;
        goto LABEL_29;
      }
      v64 = v62 / 0xC + 1;
      v65 = v64 & 0x3FFFFFFFFFFFFFF8;
      v66 = (const float *)v166;
      v67 = v59;
      v68 = v64 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        v69 = v66;
        *(float32x4x3_t *)v58.i8 = vld3q_f32(v69);
        v69 += 12;
        v175 = vld3q_f32(v69);
        v176.val[0] = vuzp1q_s16(v58, (int16x8_t)v175.val[0]);
        v176.val[1] = vuzp1q_s16(v70, (int16x8_t)v175.val[1]);
        v176.val[2] = vuzp1q_s16(v71, (int16x8_t)v175.val[2]);
        vst3q_s16(v67, v176);
        v67 += 24;
        v66 += 24;
        v68 -= 8;
      }
      while (v68);
      if (v64 != v65)
      {
        v63 = 3 * v65;
        v60 += 3 * (v64 & 0x3FFFFFFFFFFFFFF8);
LABEL_29:
        v72 = &v59[v63];
        do
        {
          v58.i64[0] = *(_QWORD *)v60;
          v58.i32[2] = v60[2];
          v73 = vmovn_s32((int32x4_t)v58);
          v72[2] = v73.i16[2];
          *(_DWORD *)v72 = v73.i32[0];
          v72 += 3;
          v60 += 3;
        }
        while (v60 != v61);
      }
    }
    v74 = operator new(0xA8uLL);
    v75 = v74;
    v74[1] = 0;
    v74[2] = 0;
    *v74 = &off_1E42E48F8;
    v76 = v74 + 3;
    v173 = v12 + 1;
    v174 = v12;
    do
      v77 = __ldxr(p_shared_owners);
    while (__stxr(v77 + 1, p_shared_owners));
    v172[0] = (uint64_t)&v54[1];
    v172[1] = (uint64_t)v54;
    do
      v78 = __ldxr(v56);
    while (__stxr(v78 + 1, v56));
    ggl::DaVinci::TexturedMesh::TexturedMesh((uint64_t)(v74 + 3), (uint64_t)"/ArrivalSphere", (uint64_t *)&v173, v172);
    do
      v79 = __ldaxr(v56);
    while (__stlxr(v79 - 1, v56));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
    v80 = v174;
    if (v174)
    {
      v81 = (unint64_t *)&v174->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    *v147 = (uint64_t)v76;
    v6 = v148;
    v83 = (char *)&md::ARMeshRenderResources::generateIcoSphereCached(unsigned char)::_icoSpheres[2 * v148];
    v84 = (std::__shared_weak_count *)*((_QWORD *)v83 + 1);
    *((_QWORD *)v83 + 1) = v75;
    if (v84)
    {
      v85 = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    v87 = *v147;
    v88 = v161;
    v89 = v162;
    if (v162)
    {
      v90 = (unint64_t *)&v162->__shared_owners_;
      do
        v91 = __ldxr(v90);
      while (__stxr(v91 + 1, v90));
    }
    if (!v161)
    {
LABEL_68:
      if (v162)
      {
        v102 = (unint64_t *)&v162->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
      }
      v104 = *v147;
      v105 = v156;
      v106 = v157;
      if (v157)
      {
        v107 = (unint64_t *)&v157->__shared_owners_;
        do
          v108 = __ldxr(v107);
        while (__stxr(v108 + 1, v107));
      }
      if (!v156)
        goto LABEL_96;
      v110 = (uint64_t **)(v104 + 120);
      v109 = *(uint64_t **)(v104 + 120);
      if (v109)
      {
        while (1)
        {
          while (1)
          {
            v111 = (uint64_t **)v109;
            v112 = v109[4];
            if (v112 < 2)
              break;
            v109 = *v111;
            v110 = v111;
            if (!*v111)
              goto LABEL_84;
          }
          if (v112)
            break;
          v109 = v111[1];
          if (!v109)
          {
            v110 = v111 + 1;
            goto LABEL_84;
          }
        }
        v113 = (uint64_t *)v111;
        if (!v157)
          goto LABEL_91;
      }
      else
      {
        v111 = (uint64_t **)(v104 + 120);
LABEL_84:
        v113 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v104 + 128) + 16))(*(_QWORD *)(v104 + 128), 56, 8);
        v113[5] = 0;
        v113[6] = 0;
        v113[4] = 1;
        *v113 = 0;
        v113[1] = 0;
        v113[2] = (uint64_t)v111;
        *v110 = v113;
        v114 = **(_QWORD **)(v104 + 112);
        v115 = v113;
        if (v114)
        {
          *(_QWORD *)(v104 + 112) = v114;
          v115 = *v110;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v104 + 120), v115);
        ++*(_QWORD *)(v104 + 136);
        v105 = v156;
        v106 = v157;
        if (!v157)
          goto LABEL_91;
      }
      v116 = (unint64_t *)&v106->__shared_owners_;
      do
        v117 = __ldxr(v116);
      while (__stxr(v117 + 1, v116));
LABEL_91:
      v118 = (std::__shared_weak_count *)v113[6];
      v113[5] = v105;
      v113[6] = (uint64_t)v106;
      if (v118)
      {
        v119 = (unint64_t *)&v118->__shared_owners_;
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
LABEL_96:
      if (v157)
      {
        v121 = (unint64_t *)&v157->__shared_owners_;
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
      if (v152 && v151)
      {
        if (v150.i64[0] && *(_BYTE *)(v150.i64[1] + 17) != 2)
          (*(void (**)(void))(*(_QWORD *)v150.i64[0] + 64))();
        v124 = *(_QWORD *)(v150.i64[1] + 56);
        v123 = *(_QWORD *)(v150.i64[1] + 64);
        if (v123 == v124)
          v124 = *(_QWORD *)(v150.i64[1] + 80) - *(_QWORD *)(v150.i64[1] + 72);
        if (v124)
          v124 = 0;
        if (v123 <= v151)
          v123 = v151;
        if (v123 == v124)
          v123 = v124 + *(_QWORD *)(v150.i64[1] + 80) - *(_QWORD *)(v150.i64[1] + 72);
        *(_QWORD *)(v150.i64[1] + 56) = v124;
        *(_QWORD *)(v150.i64[1] + 64) = v123;
      }
      if (v54)
      {
        v125 = (unint64_t *)&v54->__shared_owners_;
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if (v155 && v154)
      {
        if ((_QWORD)v153 && *(_BYTE *)(*((_QWORD *)&v153 + 1) + 17) != 2)
          (*(void (**)(void))(*(_QWORD *)v153 + 64))();
        v128 = *(_QWORD *)(*((_QWORD *)&v153 + 1) + 56);
        v127 = *(_QWORD *)(*((_QWORD *)&v153 + 1) + 64);
        if (v127 == v128)
          v128 = *(_QWORD *)(*((_QWORD *)&v153 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v153 + 1) + 72);
        if (v128)
          v128 = 0;
        if (v127 <= v154)
          v127 = v154;
        if (v127 == v128)
          v127 = v128 + *(_QWORD *)(*((_QWORD *)&v153 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v153 + 1) + 72);
        *(_QWORD *)(*((_QWORD *)&v153 + 1) + 56) = v128;
        *(_QWORD *)(*((_QWORD *)&v153 + 1) + 64) = v127;
      }
      if (v157)
      {
        v129 = (unint64_t *)&v157->__shared_owners_;
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 - 1, v129));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
      if (v160 && v159)
      {
        if ((_QWORD)v158 && *(_BYTE *)(*((_QWORD *)&v158 + 1) + 17) != 2)
          (*(void (**)(void))(*(_QWORD *)v158 + 64))();
        v132 = *(_QWORD *)(*((_QWORD *)&v158 + 1) + 56);
        v131 = *(_QWORD *)(*((_QWORD *)&v158 + 1) + 64);
        if (v131 == v132)
          v132 = *(_QWORD *)(*((_QWORD *)&v158 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v158 + 1) + 72);
        if (v132)
          v132 = 0;
        if (v131 <= v159)
          v131 = v159;
        if (v131 == v132)
          v131 = v132 + *(_QWORD *)(*((_QWORD *)&v158 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v158 + 1) + 72);
        *(_QWORD *)(*((_QWORD *)&v158 + 1) + 56) = v132;
        *(_QWORD *)(*((_QWORD *)&v158 + 1) + 64) = v131;
      }
      if (v162)
      {
        v133 = (unint64_t *)&v162->__shared_owners_;
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
      }
      if (v165 && v164)
      {
        if ((_QWORD)v163 && *(_BYTE *)(*((_QWORD *)&v163 + 1) + 17) != 2)
          (*(void (**)(void))(*(_QWORD *)v163 + 64))();
        v136 = *(_QWORD *)(*((_QWORD *)&v163 + 1) + 56);
        v135 = *(_QWORD *)(*((_QWORD *)&v163 + 1) + 64);
        if (v135 == v136)
          v136 = *(_QWORD *)(*((_QWORD *)&v163 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v163 + 1) + 72);
        if (v136)
          v136 = 0;
        if (v135 <= v164)
          v135 = v164;
        if (v135 == v136)
          v135 = v136 + *(_QWORD *)(*((_QWORD *)&v163 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v163 + 1) + 72);
        *(_QWORD *)(*((_QWORD *)&v163 + 1) + 56) = v136;
        *(_QWORD *)(*((_QWORD *)&v163 + 1) + 64) = v135;
      }
      this = v144;
      if (v12)
      {
        v137 = (unint64_t *)&v12->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (v166)
      {
        v167 = v166;
        operator delete(v166);
      }
      if (v169)
      {
        v170 = v169;
        operator delete(v169);
      }
      v7 = *v147;
      goto LABEL_182;
    }
    v93 = (uint64_t **)(v87 + 120);
    v92 = *(uint64_t **)(v87 + 120);
    if (v92)
    {
      while (1)
      {
        v93 = (uint64_t **)v92;
        if (!v92[4])
          break;
        v92 = (uint64_t *)*v92;
        if (!*v93)
          goto LABEL_56;
      }
      v94 = v92;
      if (!v162)
        goto LABEL_63;
    }
    else
    {
LABEL_56:
      v94 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v87 + 128) + 16))(*(_QWORD *)(v87 + 128), 56, 8);
      *v94 = 0;
      v94[1] = 0;
      v94[5] = 0;
      v94[6] = 0;
      v94[4] = 0;
      v94[2] = (uint64_t)v93;
      *v93 = v94;
      v95 = **(_QWORD **)(v87 + 112);
      v96 = v94;
      if (v95)
      {
        *(_QWORD *)(v87 + 112) = v95;
        v96 = *v93;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v87 + 120), v96);
      ++*(_QWORD *)(v87 + 136);
      v88 = v161;
      v89 = v162;
      if (!v162)
        goto LABEL_63;
    }
    v97 = (unint64_t *)&v89->__shared_owners_;
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
LABEL_63:
    v99 = (std::__shared_weak_count *)v94[6];
    v94[5] = v88;
    v94[6] = (uint64_t)v89;
    if (v99)
    {
      v100 = (unint64_t *)&v99->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    goto LABEL_68;
  }
LABEL_182:
  v139 = md::ARMeshRenderResources::generateIcoSphereCached(unsigned char)::_icoSpheres[2 * v6 + 1];
  *(_QWORD *)this = v7;
  *((_QWORD *)this + 1) = v139;
  if (v139)
  {
    v140 = (unint64_t *)(v139 + 8);
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
  }
  v142 = (__n128 *)((char *)&md::ARMeshRenderResources::generateIcoSphereCached(unsigned char)::_icoSpheresBounds
                  + 24 * v6);
  result = *v142;
  *((__n128 *)this + 1) = *v142;
  *((_QWORD *)this + 4) = v142[1].n128_u64[0];
  return result;
}

void sub_19F8BA3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,char a45)
{
  uint64_t v45;
  void *v47;
  void *v48;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a21);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a29);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a37);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a45);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v45 - 248);
  v47 = *(void **)(v45 - 232);
  if (v47)
  {
    *(_QWORD *)(v45 - 224) = v47;
    operator delete(v47);
    v48 = *(void **)(v45 - 208);
    if (!v48)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v48 = *(void **)(v45 - 208);
    if (!v48)
      goto LABEL_3;
  }
  *(_QWORD *)(v45 - 200) = v48;
  operator delete(v48);
  _Unwind_Resume(a1);
}

void sub_19F8BA478()
{
  JUMPOUT(0x19F8BA440);
}

void sub_19F8BA480()
{
  JUMPOUT(0x19F8BA440);
}

_QWORD *std::array<std::shared_ptr<ggl::DaVinci::TexturedMesh>,3ul>::~array(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<ggl::DaVinci::TexturedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E48F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::TexturedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E48F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::TexturedMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::DeviceDataTyped<ggl::DaVinci::Normals>::~DeviceDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::DeviceDataTyped<ggl::DaVinci::Normals>::~DeviceDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF4C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF4C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::DeviceDataTyped<ggl::DaVinci::UVs>::~DeviceDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::DeviceDataTyped<ggl::DaVinci::UVs>::~DeviceDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF488;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF488;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::VertexDataTyped<ggl::DaVinci::TexturedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::DaVinci::TexturedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::DaVinci::TexturedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E04F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E04F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,void ()(ggl::ARMesh::ARDepthMeshPipelineSetup *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,void ()(ggl::ARMesh::ARDepthMeshPipelineSetup *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D0A18;
  return result;
}

void std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,void ()(ggl::ARMesh::ARDepthMeshPipelineSetup *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D0A18;
}

void std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::ARMesh::ARDepthMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::ARMesh::ARDepthMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D09D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::ARMesh::ARDepthMeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D09D0;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::ARMesh::ARDepthMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BC0E8;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v13 = (uint64_t *)v3[8];
  *v13 = v12;
  v13[1] = 0;
  v14 = (uint64_t *)v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = (std::__shared_weak_count *)v14[1];
  *v14 = v12;
  v14[1] = (uint64_t)v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E22E8;
  v21 = ggl::BufferData::BufferData((uint64_t)&v19[1], qword_1EE54AFA0, 2, 1, 6, 1);
  v19[9].__shared_owners_ = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97F0;
  v22 = v3[8];
  *(_QWORD *)(v22 + 16) = v21;
  *(_QWORD *)(v22 + 24) = 0;
  v23 = v3[20];
  do
    v24 = __ldxr(v20);
  while (__stxr(v24 + 1, v20));
  v25 = *(std::__shared_weak_count **)(v23 + 24);
  *(_QWORD *)(v23 + 16) = v21;
  *(_QWORD *)(v23 + 24) = v19;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v28->__shared_owners_ = 0;
  v29 = (unint64_t *)&v28->__shared_owners_;
  v28->__shared_weak_owners_ = 0;
  v28->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E25C0;
  v30 = ggl::BufferData::BufferData((uint64_t)&v28[1], qword_1EE561378, 2, 1, 6, 1);
  v28[9].__shared_owners_ = (uint64_t)ggl::ARMesh::CameraView::reflection(void)::reflection;
  v28[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9990;
  v31 = v3[8];
  *(_QWORD *)(v31 + 32) = v30;
  *(_QWORD *)(v31 + 40) = 0;
  v32 = v3[20];
  do
    v33 = __ldxr(v29);
  while (__stxr(v33 + 1, v29));
  v34 = *(std::__shared_weak_count **)(v32 + 40);
  *(_QWORD *)(v32 + 32) = v30;
  *(_QWORD *)(v32 + 40) = v28;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  do
    v37 = __ldaxr(v29);
  while (__stlxr(v37 - 1, v29));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  do
    v38 = __ldaxr(v20);
  while (__stlxr(v38 - 1, v20));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  do
    v39 = __ldaxr(v11);
  while (__stlxr(v39 - 1, v11));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void sub_19F8BAF34(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v6;
  unint64_t v7;

  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 - 1, v4));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  do
    v7 = __ldaxr(v3);
  while (__stlxr(v7 - 1, v3));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ggl::ConstantDataTyped<ggl::ARMesh::CameraView>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::ARMesh::CameraView>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E25C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E25C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,void ()(ggl::ARMesh::ARMeshPipelineSetup *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,void ()(ggl::ARMesh::ARMeshPipelineSetup *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D0988;
  return result;
}

void std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,void ()(ggl::ARMesh::ARMeshPipelineSetup *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D0988;
}

void std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::ARMesh::ARMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::ARMesh::ARMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0940;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::ARMesh::ARMeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0940;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::ARMesh::ARMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t shared_owners;
  unint64_t shared_weak_owners;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v63;
  _QWORD *v64;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(std::__shared_weak_count **)(v1 + 32);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BC048;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E27F0;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE54A408, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::DaVinci::StyleColor::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9AD0;
  v13 = v3[8];
  *(_QWORD *)(v13 + 96) = v12;
  *(_QWORD *)(v13 + 104) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 104);
  *(_QWORD *)(v14 + 96) = v12;
  *(_QWORD *)(v14 + 104) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v63 = v10;
  v19 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E27F0;
  v21 = ggl::BufferData::BufferData((uint64_t)&v19[1], qword_1EE54A408, 2, 1, 6, 1);
  v19[9].__shared_owners_ = (uint64_t)ggl::DaVinci::StyleColor::reflection(void)::reflection;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9AD0;
  v22 = v3[8];
  *(_QWORD *)(v22 + 96) = v21;
  *(_QWORD *)(v22 + 104) = 0;
  v23 = v3[20];
  do
    v24 = __ldxr(v20);
  while (__stxr(v24 + 1, v20));
  v25 = *(std::__shared_weak_count **)(v23 + 104);
  *(_QWORD *)(v23 + 96) = v21;
  *(_QWORD *)(v23 + 104) = v19;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  shared_owners = v19[1].__shared_owners_;
  shared_weak_owners = v19[3].__shared_weak_owners_;
  v19[4].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))0x3C002E662E662E66;
  if (shared_weak_owners > shared_owners)
    shared_owners = shared_weak_owners;
  v19[3].__shared_owners_ = 0;
  v19[3].__shared_weak_owners_ = shared_owners;
  v30 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v30->__shared_owners_ = 0;
  v31 = (unint64_t *)&v30->__shared_owners_;
  v30->__shared_weak_owners_ = 0;
  v30->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v32 = ggl::BufferData::BufferData((uint64_t)&v30[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v30[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v30[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v33 = (uint64_t *)v3[8];
  *v33 = v32;
  v33[1] = 0;
  v34 = (uint64_t *)v3[20];
  do
    v35 = __ldxr(v31);
  while (__stxr(v35 + 1, v31));
  v36 = (std::__shared_weak_count *)v34[1];
  *v34 = v32;
  v34[1] = (uint64_t)v30;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v39->__shared_owners_ = 0;
  v40 = (unint64_t *)&v39->__shared_owners_;
  v39->__shared_weak_owners_ = 0;
  v39->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E22E8;
  v41 = ggl::BufferData::BufferData((uint64_t)&v39[1], qword_1EE54AFA0, 2, 1, 6, 1);
  v39[9].__shared_owners_ = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
  v39[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97F0;
  v42 = v3[8];
  *(_QWORD *)(v42 + 16) = v41;
  *(_QWORD *)(v42 + 24) = 0;
  v64 = v3;
  v43 = v3[20];
  do
    v44 = __ldxr(v40);
  while (__stxr(v44 + 1, v40));
  v45 = *(std::__shared_weak_count **)(v43 + 24);
  *(_QWORD *)(v43 + 16) = v41;
  *(_QWORD *)(v43 + 24) = v39;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v48->__shared_owners_ = 0;
  v49 = (unint64_t *)&v48->__shared_owners_;
  v48->__shared_weak_owners_ = 0;
  v48->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E25C0;
  v50 = ggl::BufferData::BufferData((uint64_t)&v48[1], qword_1EE561378, 2, 1, 6, 1);
  v48[9].__shared_owners_ = (uint64_t)ggl::ARMesh::CameraView::reflection(void)::reflection;
  v48[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9990;
  v51 = v64[8];
  *(_QWORD *)(v51 + 32) = v50;
  *(_QWORD *)(v51 + 40) = 0;
  v52 = v64[20];
  do
    v53 = __ldxr(v49);
  while (__stxr(v53 + 1, v49));
  v54 = *(std::__shared_weak_count **)(v52 + 40);
  *(_QWORD *)(v52 + 32) = v50;
  *(_QWORD *)(v52 + 40) = v48;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  do
    v57 = __ldaxr(v49);
  while (__stlxr(v57 - 1, v49));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  do
    v58 = __ldaxr(v40);
  while (__stlxr(v58 - 1, v40));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  do
    v59 = __ldaxr(v31);
  while (__stlxr(v59 - 1, v31));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  do
    v60 = __ldaxr(v20);
  while (__stlxr(v60 - 1, v20));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  do
    v61 = __ldaxr(v11);
  while (__stlxr(v61 - 1, v11));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
  return v64;
}

void sub_19F8BB6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9)
{
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  do
    v17 = __ldaxr(v12);
  while (__stlxr(v17 - 1, v12));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  do
    v18 = __ldaxr(v15);
  while (__stlxr(v18 - 1, v15));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  do
    v19 = __ldaxr(v14);
  while (__stlxr(v19 - 1, v14));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  do
    v20 = __ldaxr(v13);
  while (__stlxr(v20 - 1, v13));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
    std::__shared_weak_count::__release_weak(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E27F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E27F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::ARMesh::ARShadowPipelineSetup *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::ARMesh::ARShadowPipelineSetup *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D08F8;
  return result;
}

void std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::ARMesh::ARShadowPipelineSetup *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D08F8;
}

void std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::ARMesh::ARShadowPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::ARMesh::ARShadowPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D08B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::ARMesh::ARShadowPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D08B0;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::ARMeshRenderResources::ARMeshRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::ARMesh::ARShadowPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t shared_owners;
  unint64_t shared_weak_owners;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v63;
  _QWORD *v64;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(std::__shared_weak_count **)(v1 + 64);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BC098;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E27F0;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE54A408, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::DaVinci::StyleColor::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9AD0;
  v13 = v3[8];
  *(_QWORD *)(v13 + 48) = v12;
  *(_QWORD *)(v13 + 56) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 56);
  *(_QWORD *)(v14 + 48) = v12;
  *(_QWORD *)(v14 + 56) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v63 = v10;
  v19 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E27F0;
  v21 = ggl::BufferData::BufferData((uint64_t)&v19[1], qword_1EE54A408, 2, 1, 6, 1);
  v19[9].__shared_owners_ = (uint64_t)ggl::DaVinci::StyleColor::reflection(void)::reflection;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9AD0;
  v22 = v3[8];
  *(_QWORD *)(v22 + 48) = v21;
  *(_QWORD *)(v22 + 56) = 0;
  v23 = v3[20];
  do
    v24 = __ldxr(v20);
  while (__stxr(v24 + 1, v20));
  v25 = *(std::__shared_weak_count **)(v23 + 56);
  *(_QWORD *)(v23 + 48) = v21;
  *(_QWORD *)(v23 + 56) = v19;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  shared_owners = v19[1].__shared_owners_;
  shared_weak_owners = v19[3].__shared_weak_owners_;
  v19[4].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))0x3C002E662E662E66;
  if (shared_weak_owners > shared_owners)
    shared_owners = shared_weak_owners;
  v19[3].__shared_owners_ = 0;
  v19[3].__shared_weak_owners_ = shared_owners;
  v30 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v30->__shared_owners_ = 0;
  v31 = (unint64_t *)&v30->__shared_owners_;
  v30->__shared_weak_owners_ = 0;
  v30->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v32 = ggl::BufferData::BufferData((uint64_t)&v30[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v30[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v30[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v33 = (uint64_t *)v3[8];
  *v33 = v32;
  v33[1] = 0;
  v34 = (uint64_t *)v3[20];
  do
    v35 = __ldxr(v31);
  while (__stxr(v35 + 1, v31));
  v36 = (std::__shared_weak_count *)v34[1];
  *v34 = v32;
  v34[1] = (uint64_t)v30;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v39->__shared_owners_ = 0;
  v40 = (unint64_t *)&v39->__shared_owners_;
  v39->__shared_weak_owners_ = 0;
  v39->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E22E8;
  v41 = ggl::BufferData::BufferData((uint64_t)&v39[1], qword_1EE54AFA0, 2, 1, 6, 1);
  v39[9].__shared_owners_ = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
  v39[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97F0;
  v42 = v3[8];
  *(_QWORD *)(v42 + 16) = v41;
  *(_QWORD *)(v42 + 24) = 0;
  v64 = v3;
  v43 = v3[20];
  do
    v44 = __ldxr(v40);
  while (__stxr(v44 + 1, v40));
  v45 = *(std::__shared_weak_count **)(v43 + 24);
  *(_QWORD *)(v43 + 16) = v41;
  *(_QWORD *)(v43 + 24) = v39;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v48->__shared_owners_ = 0;
  v49 = (unint64_t *)&v48->__shared_owners_;
  v48->__shared_weak_owners_ = 0;
  v48->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E25C0;
  v50 = ggl::BufferData::BufferData((uint64_t)&v48[1], qword_1EE561378, 2, 1, 6, 1);
  v48[9].__shared_owners_ = (uint64_t)ggl::ARMesh::CameraView::reflection(void)::reflection;
  v48[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9990;
  v51 = v64[8];
  *(_QWORD *)(v51 + 32) = v50;
  *(_QWORD *)(v51 + 40) = 0;
  v52 = v64[20];
  do
    v53 = __ldxr(v49);
  while (__stxr(v53 + 1, v49));
  v54 = *(std::__shared_weak_count **)(v52 + 40);
  *(_QWORD *)(v52 + 32) = v50;
  *(_QWORD *)(v52 + 40) = v48;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  do
    v57 = __ldaxr(v49);
  while (__stlxr(v57 - 1, v49));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  do
    v58 = __ldaxr(v40);
  while (__stlxr(v58 - 1, v40));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  do
    v59 = __ldaxr(v31);
  while (__stlxr(v59 - 1, v31));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  do
    v60 = __ldaxr(v20);
  while (__stlxr(v60 - 1, v20));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  do
    v61 = __ldaxr(v11);
  while (__stlxr(v61 - 1, v11));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
  return v64;
}

void sub_19F8BBF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9)
{
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  do
    v17 = __ldaxr(v12);
  while (__stlxr(v17 - 1, v12));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  do
    v18 = __ldaxr(v15);
  while (__stlxr(v18 - 1, v15));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  do
    v19 = __ldaxr(v14);
  while (__stlxr(v19 - 1, v14));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  do
    v20 = __ldaxr(v13);
  while (__stlxr(v20 - 1, v13));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
    std::__shared_weak_count::__release_weak(a9);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<ggl::ARMesh::ARShadowPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ARMesh::ARShadowPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ARMesh::ARShadowPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::ARMesh::ARDepthMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ARMesh::ARDepthMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4770;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ARMesh::ARDepthMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::ARMesh::ARMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ARMesh::ARMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4700;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ARMesh::ARMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t geo::_retain_ptr<ARCamera * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5450;

  return a1;
}

void geo::_retain_ptr<ARCamera * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5450;

  JUMPOUT(0x1A1AF4E00);
}

long double md::MDARCamera::widestFieldOfView(md::MDARCamera *this, uint64_t a2)
{
  id v4;
  double v5;
  double v6;
  id v7;
  float v8;
  long double result;
  float v10;

  v4 = *(id *)(a2 + 8);
  objc_msgSend(v4, "imageResolution");
  v6 = v5;
  objc_msgSend(*(id *)(a2 + 8), "imageResolution");

  v7 = *(id *)(a2 + 8);
  objc_msgSend(v7, "intrinsics");
  v10 = v8;
  objc_msgSend(*(id *)(a2 + 8), "intrinsics");

  result = atan(fmax(v6, 0.0) / (v10 + v10)) * 114.591559;
  *(long double *)this = result;
  return result;
}

void sub_19F8BC204(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::PolylineCollider::buildTopDownAABBTree(uint64_t result, unsigned int a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  uint64_t *v6;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned int v11;
  uint64_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  int8x16_t v17;
  uint64_t v18;
  _BYTE *v19;
  unsigned __int16 **v20;
  unsigned __int16 *v21;
  float32x2_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  unint64_t v26;
  float *v27;
  float *v28;
  float *v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  float v36;
  float v37;
  uint64_t *v38;
  float v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *v44;
  float v45;
  float v46;
  uint64_t *v47;
  float v48;
  unsigned __int16 v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t *v58;
  float v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t v62;
  float v63;
  float v64;
  uint64_t *v65;
  float v66;
  unsigned __int16 v67;
  uint64_t v68;
  uint64_t *v69;
  float v70;
  float v71;
  uint64_t *v72;
  float v73;
  unsigned __int16 v74;
  unsigned __int16 *v75;
  uint64_t v76;
  uint64_t *v77;
  float v78;
  float v79;
  uint64_t *v80;
  float v81;
  unsigned __int16 *v82;
  uint64_t v83;
  uint64_t *v84;
  float v85;
  float v86;
  uint64_t *v87;
  float v88;
  unsigned __int16 *v89;
  uint64_t v90;
  uint64_t *v91;
  float v92;
  float v93;
  uint64_t *v94;
  float v95;
  uint64_t v96;
  uint64_t *v97;
  float v98;
  float v99;
  uint64_t *v100;
  float v101;
  unsigned __int16 v102;
  uint64_t *v103;
  unsigned int v104;
  float v105;
  float v106;
  uint64_t *v107;
  float v108;
  uint64_t *v109;
  unsigned int v110;
  float v111;
  float v112;
  uint64_t *v113;
  float v114;
  unsigned __int16 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  float v119;
  float v120;
  uint64_t *v121;
  float v122;
  unsigned __int16 v123;
  unsigned __int16 *v124;
  unsigned __int16 *v125;
  uint64_t v126;
  unsigned __int16 v127;
  unsigned __int16 *v128;
  unsigned __int16 v129;
  unsigned int v130;
  uint64_t *v131;
  float v132;
  float v133;
  uint64_t *v134;
  float v135;
  unsigned __int16 v136;
  unsigned __int16 *v137;
  uint64_t *v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;

  v6 = (uint64_t *)result;
  v138 = (uint64_t *)result;
  while (1)
  {
    v7 = *v6;
    v8 = (int8x16_t)xmmword_19FFB2E30;
    v9 = (char *)a4 - (char *)a3;
    if (a4 != a3)
    {
      v10 = a3;
      v8 = (int8x16_t)xmmword_19FFB2E30;
      do
      {
        v11 = *v10++;
        v12 = (uint64_t *)(v6[3] + 8 * v11);
        v13.i64[0] = *v12;
        v14.i64[0] = v12[1];
        v15.i64[0] = *v12;
        v16.i64[0] = v8.i64[0];
        v16.i64[1] = *v12;
        v13.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
        v15.i64[1] = *v12;
        v17 = vbslq_s8((int8x16_t)vcgtq_f32(v16, v13), v15, v8);
        v13.i64[0] = v14.i64[0];
        v13.i64[1] = v14.i64[0];
        v15.i64[0] = v17.i64[0];
        v15.i64[1] = v14.i64[0];
        v14.i64[1] = vextq_s8(v17, v17, 8uLL).u64[0];
        v8 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v15, v14), (int8x16_t)v13, v17);
      }
      while (v10 != a4);
    }
    v139 = a2;
    v18 = v7 + 32 * a2;
    *(int8x16_t *)(v18 + 4) = v8;
    v19 = (_BYTE *)(v18 + 2);
    v20 = (unsigned __int16 **)(v18 + 24);
    if ((v9 & 0x1FFFFFFFCLL) == 0)
      break;
    *v19 = 1;
    *(_WORD *)v18 = (unint64_t)v9 >> 1;
    *v20 = 0;
    v21 = (unsigned __int16 *)((char *)a3 + (((v9 >> 1) + (v9 >> 1 < 0)) & 0xFFFFFFFFFFFFFFFELL));
    if (v21 == a4)
      goto LABEL_3;
    v22 = vmaxnm_f32(vsub_f32(*(float32x2_t *)(v7 + 32 * a2 + 12), *(float32x2_t *)v8.i8), 0);
    v23 = *(_QWORD *)&vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v22, 1), v22) & 1;
    v24 = a3;
    v25 = a4;
    v137 = a3;
    while (1)
    {
      v26 = v25 - v24;
      if (v26 < 2)
        goto LABEL_3;
      if (v26 == 3)
      {
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::PolylineCollider::partitionSegments(std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>,gm::Box<float,2> &)::$_0 &,std::__wrap_iter<unsigned short *>>(v24, v24 + 1, v25 - 1, v6[3], v23);
        v6 = v138;
        goto LABEL_3;
      }
      v27 = (float *)((unint64_t)&v140 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v23 & 1)));
      v28 = (float *)((unint64_t)&v141 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v23 & 1)));
      if (v26 == 2)
      {
        v116 = *v24;
        v117 = v6[3];
        v118 = (uint64_t *)(v117 + 8 * *(v25 - 1));
        v141 = *v118;
        v119 = *(float *)((unint64_t)&v141 | (4 * v23));
        v140 = v118[1];
        v120 = (float)(*v27 + v119) * 0.5;
        v121 = (uint64_t *)(v117 + 8 * v116);
        v141 = *v121;
        v122 = *v28;
        v140 = v121[1];
        if (v120 < (float)((float)(*v27 + v122) * 0.5))
        {
          v123 = *v24;
          *v24 = *(v25 - 1);
          *(v25 - 1) = v123;
        }
        goto LABEL_3;
      }
      v29 = (float *)((unint64_t)&v140 | (4 * v23));
      if ((char *)v25 - (char *)v24 <= 15)
      {
        if (v25 - 1 == v24)
          goto LABEL_3;
        while (2)
        {
          v124 = v25;
          if (v24 == v25)
          {
LABEL_70:
            if (v124 != v24)
            {
              v136 = *v24;
              *v24 = *v124;
              *v124 = v136;
            }
          }
          else
          {
            v125 = v24 + 1;
            if (v24 + 1 != v25)
            {
              v126 = v6[3];
              v127 = *v24;
              v124 = v24;
              v128 = v24 + 1;
              do
              {
                v130 = *v128++;
                v129 = v130;
                v131 = (uint64_t *)(v126 + 8 * v130);
                v141 = *v131;
                v132 = *v28;
                v140 = v131[1];
                v133 = (float)(*v27 + v132) * 0.5;
                v134 = (uint64_t *)(v126 + 8 * v127);
                v141 = *v134;
                v135 = *v28;
                v140 = v134[1];
                if (v133 < (float)((float)(*v29 + v135) * 0.5))
                {
                  v127 = v129;
                  v124 = v125;
                }
                v125 = v128;
              }
              while (v128 != v25);
              goto LABEL_70;
            }
          }
          if (++v24 == v25 - 1)
            goto LABEL_3;
          continue;
        }
      }
      v30 = (unsigned __int16 *)((char *)v24 + (v26 & 0xFFFFFFFFFFFFFFFELL));
      v31 = v25 - 1;
      v32 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::PolylineCollider::partitionSegments(std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>,gm::Box<float,2> &)::$_0 &,std::__wrap_iter<unsigned short *>>(v24, v30, v25 - 1, v6[3], v23);
      v6 = v138;
      v33 = *v30;
      v34 = v138[3];
      v35 = (uint64_t *)(v34 + 8 * *v24);
      v141 = *v35;
      v36 = *v28;
      v140 = v35[1];
      v37 = (float)(*v27 + v36) * 0.5;
      v38 = (uint64_t *)(v34 + 8 * v33);
      v141 = *v38;
      v39 = *v28;
      v140 = v38[1];
      if (v37 < (float)((float)(*v29 + v39) * 0.5))
        break;
      v40 = v25 - 2;
      while (v40 != v24)
      {
        v41 = v40;
        v42 = *v40--;
        v43 = *v30;
        v44 = (uint64_t *)(v34 + 8 * v42);
        v141 = *v44;
        v45 = *v28;
        v140 = v44[1];
        v46 = (float)(*v27 + v45) * 0.5;
        v47 = (uint64_t *)(v34 + 8 * v43);
        v141 = *v47;
        v48 = *v28;
        v140 = v47[1];
        if (v46 < (float)((float)(*v29 + v48) * 0.5))
        {
          v49 = *v24;
          *v24 = *v41;
          *v41 = v49;
          ++v32;
          v31 = v41;
          goto LABEL_19;
        }
      }
      v82 = v24 + 1;
      v83 = *v31;
      v84 = (uint64_t *)(v34 + 8 * *v24);
      v141 = *v84;
      v85 = *v28;
      v140 = v84[1];
      v86 = (float)(*v27 + v85) * 0.5;
      v87 = (uint64_t *)(v34 + 8 * v83);
      v141 = *v87;
      v88 = *v28;
      v140 = v87[1];
      if (v86 >= (float)((float)(*v29 + v88) * 0.5))
      {
        a3 = v137;
        if (v82 == v31)
          goto LABEL_3;
        while (1)
        {
          v96 = *v82;
          v97 = (uint64_t *)(v34 + 8 * *v24);
          v141 = *v97;
          v98 = *v28;
          v140 = v97[1];
          v99 = (float)(*v27 + v98) * 0.5;
          v100 = (uint64_t *)(v34 + 8 * v96);
          v141 = *v100;
          v101 = *v28;
          v140 = v100[1];
          if (v99 < (float)((float)(*v29 + v101) * 0.5))
            break;
          if (++v82 == v31)
            goto LABEL_3;
        }
        v102 = *v82;
        *v82++ = *v31;
        *v31 = v102;
        if (v82 == v31)
          goto LABEL_3;
      }
      else
      {
        a3 = v137;
        if (v82 == v31)
          goto LABEL_3;
      }
      while (1)
      {
        do
        {
          v75 = v82;
          v103 = (uint64_t *)(v34 + 8 * *v24);
          v104 = *v82++;
          v141 = *v103;
          v105 = *v28;
          v140 = v103[1];
          v106 = *v27 + v105;
          v107 = (uint64_t *)(v34 + 8 * v104);
          v141 = *v107;
          v108 = *v28;
          v140 = v107[1];
        }
        while ((float)(v106 * 0.5) >= (float)((float)(*v29 + v108) * 0.5));
        do
        {
          v109 = (uint64_t *)(v34 + 8 * *v24);
          v110 = *--v31;
          v141 = *v109;
          v111 = *v28;
          v140 = v109[1];
          v112 = *v27 + v111;
          v113 = (uint64_t *)(v34 + 8 * v110);
          v141 = *v113;
          v114 = *v28;
          v140 = v113[1];
        }
        while ((float)(v112 * 0.5) < (float)((float)(*v29 + v114) * 0.5));
        if (v75 >= v31)
          break;
        v115 = *v75;
        *v75 = *v31;
        *v31 = v115;
      }
      if (v75 > v21)
        goto LABEL_3;
LABEL_57:
      v24 = v75;
      if (v25 == v21)
        goto LABEL_3;
    }
LABEL_19:
    v50 = v24 + 1;
    if (v24 + 1 >= v31)
    {
      v52 = v24 + 1;
    }
    else
    {
      v51 = v24 + 1;
      while (1)
      {
        do
        {
          v52 = v51;
          v53 = *v51++;
          v54 = (uint64_t *)(v34 + 8 * v53);
          v55 = *v30;
          v141 = *v54;
          v56 = *v28;
          v140 = v54[1];
          v57 = *v27 + v56;
          v58 = (uint64_t *)(v34 + 8 * v55);
          v141 = *v58;
          v59 = *v28;
          v140 = v58[1];
        }
        while ((float)(v57 * 0.5) < (float)((float)(*v29 + v59) * 0.5));
        do
        {
          v60 = *--v31;
          v61 = (uint64_t *)(v34 + 8 * v60);
          v62 = *v30;
          v141 = *v61;
          v63 = *v28;
          v140 = v61[1];
          v64 = *v27 + v63;
          v65 = (uint64_t *)(v34 + 8 * v62);
          v141 = *v65;
          v66 = *v28;
          v140 = v65[1];
        }
        while ((float)(v64 * 0.5) >= (float)((float)(*v29 + v66) * 0.5));
        if (v52 >= v31)
          break;
        v67 = *v52;
        *v52 = *v31;
        *v31 = v67;
        ++v32;
        if (v30 == v52)
          v30 = v31;
      }
    }
    if (v52 != v30)
    {
      v68 = *v52;
      v69 = (uint64_t *)(v34 + 8 * *v30);
      v141 = *v69;
      v70 = *v28;
      v140 = v69[1];
      v71 = (float)(*v27 + v70) * 0.5;
      v72 = (uint64_t *)(v34 + 8 * v68);
      v141 = *v72;
      v73 = *v28;
      v140 = v72[1];
      if (v71 < (float)((float)(*v29 + v73) * 0.5))
      {
        v74 = *v52;
        *v52 = *v30;
        *v30 = v74;
        ++v32;
      }
    }
    a3 = v137;
    if (v52 == v21)
      goto LABEL_3;
    if (v32)
    {
LABEL_33:
      if (v52 <= v21)
      {
        v75 = v52 + 1;
      }
      else
      {
        v25 = v52;
        v75 = v24;
      }
      goto LABEL_57;
    }
    if (v52 <= v21)
    {
      v89 = v52 + 1;
      while (v89 != v25)
      {
        v90 = *(v89 - 1);
        v91 = (uint64_t *)(v34 + 8 * *v89);
        v141 = *v91;
        v92 = *v28;
        v140 = v91[1];
        v93 = (float)(*v27 + v92) * 0.5;
        v94 = (uint64_t *)(v34 + 8 * v90);
        v141 = *v94;
        v95 = *v28;
        v140 = v94[1];
        ++v89;
        if (v93 < (float)((float)(*v29 + v95) * 0.5))
          goto LABEL_33;
      }
    }
    else
    {
      while (v50 != v52)
      {
        v76 = *(v50 - 1);
        v77 = (uint64_t *)(v34 + 8 * *v50);
        v141 = *v77;
        v78 = *v28;
        v140 = v77[1];
        v79 = (float)(*v27 + v78) * 0.5;
        v80 = (uint64_t *)(v34 + 8 * v76);
        v141 = *v80;
        v81 = *v28;
        v140 = v80[1];
        ++v50;
        if (v79 < (float)((float)(*v29 + v81) * 0.5))
          goto LABEL_33;
      }
    }
LABEL_3:
    result = md::PolylineCollider::buildTopDownAABBTree(v6, (2 * v139) | 1, a3, v21);
    v6 = v138;
    a2 = 2 * v139 + 2;
    a3 = v21;
  }
  *v19 = 2;
  *(_WORD *)v18 = (unint64_t)v9 >> 1;
  *v20 = a3;
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::PolylineCollider::partitionSegments(std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>,gm::Box<float,2> &)::$_0 &,std::__wrap_iter<unsigned short *>>(_WORD *a1, _WORD *a2, _WORD *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  unsigned int v12;
  unsigned int v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  float v35;
  unint64_t v37;
  unint64_t v38;

  v5 = (unsigned __int16)*a2;
  v6 = (unsigned __int16)*a1;
  v7 = (unsigned int *)(a4 + 8 * v5);
  v9 = *v7;
  v8 = v7[1];
  LODWORD(v38) = *v7;
  HIDWORD(v38) = v8;
  v10 = 4 * a5;
  v11 = *(float *)((char *)&v38 + v10);
  v13 = v7[2];
  v12 = v7[3];
  v37 = __PAIR64__(v12, v13);
  v14 = *(float *)((char *)&v37 + v10) + v11;
  v38 = *(_QWORD *)(a4 + 8 * v6);
  v15 = *(float *)((char *)&v38 + v10);
  v37 = *(_QWORD *)(a4 + 8 * (v6 + 1));
  v16 = (float)(*(float *)((char *)&v37 + v10) + v15) * 0.5;
  v17 = (unsigned __int16)*a3;
  v18 = v17 + 1;
  if ((float)(v14 * 0.5) < v16)
  {
    v38 = *(_QWORD *)(a4 + 8 * v17);
    v19 = 4 * a5;
    v20 = *(float *)((char *)&v38 + v19);
    v37 = *(_QWORD *)(a4 + 8 * v18);
    v21 = (float)(*(float *)((char *)&v37 + v19) + v20) * 0.5;
    v38 = __PAIR64__(v8, v9);
    v22 = *(float *)((char *)&v38 + v19);
    v37 = __PAIR64__(v12, v13);
    if (v21 < (float)((float)(*(float *)((char *)&v37 + v19) + v22) * 0.5))
    {
      *a1 = v17;
      *a3 = v6;
      return 1;
    }
    *a1 = v5;
    *a2 = v6;
    v32 = (unsigned __int16)*a3;
    v33 = (unint64_t *)(a4 + 8 * v32);
    v34 = *v33;
    v37 = v33[1];
    v38 = v34;
    *(float *)&v34 = (float)(*((float *)&v37 + a5) + *((float *)&v38 + a5)) * 0.5;
    v38 = *(_QWORD *)(a4 + 8 * v6);
    v35 = *((float *)&v38 + a5);
    v37 = *(_QWORD *)(a4 + 8 * (v6 + 1));
    if (*(float *)&v34 >= (float)((float)(*((float *)&v37 + a5) + v35) * 0.5))
      return 1;
    *a2 = v32;
    *a3 = v6;
    return 2;
  }
  v38 = *(_QWORD *)(a4 + 8 * v17);
  v23 = *((float *)&v38 + a5);
  v37 = *(_QWORD *)(a4 + 8 * v18);
  v24 = (float)(*((float *)&v37 + a5) + v23) * 0.5;
  v38 = __PAIR64__(v8, v9);
  v25 = *((float *)&v38 + a5);
  v37 = __PAIR64__(v12, v13);
  if (v24 < (float)((float)(*((float *)&v37 + a5) + v25) * 0.5))
  {
    *a2 = v17;
    *a3 = v5;
    v26 = (unsigned __int16)*a2;
    v27 = (unsigned __int16)*a1;
    v28 = (unint64_t *)(a4 + 8 * v26);
    v29 = *v28;
    v37 = v28[1];
    v38 = v29;
    *(float *)&v29 = (float)(*((float *)&v37 + a5) + *((float *)&v38 + a5)) * 0.5;
    v30 = (unint64_t *)(a4 + 8 * v27);
    v31 = *v30;
    v37 = v30[1];
    v38 = v31;
    if (*(float *)&v29 >= (float)((float)(*((float *)&v37 + a5) + *((float *)&v38 + a5)) * 0.5))
      return 1;
    *a1 = v26;
    *a2 = v27;
    return 2;
  }
  return 0;
}

uint64_t md::CrossFadeLabelPart::placement(md::CrossFadeLabelPart *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 72) + 8) + 528))(*(_QWORD *)(*((_QWORD *)this + 72) + 8));
}

uint64_t md::StyleCrossFadeLabelPart::shouldSnapToDefaultPlacement(md::StyleCrossFadeLabelPart *this)
{
  return 0;
}

uint64_t md::StyleCrossFadeLabelPart::snapToDefaultPlacement()
{
  return 0;
}

uint64_t md::CrossFadeLabelPart::isFading(md::CrossFadeLabelPart *this)
{
  return 1;
}

void md::StyleCrossFadeLabelPart::debugCompositeClassName(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "StyleCrossFade");
}

void md::DaVinciMaterialDataRequester::~DaVinciMaterialDataRequester(md::DaVinciMaterialDataRequester *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::ARAssetOcclusionMeshDataLogic::~ARAssetOcclusionMeshDataLogic(md::ARAssetOcclusionMeshDataLogic *this)
{
  md::ARAssetOcclusionMeshDataLogic::~ARAssetOcclusionMeshDataLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  gdc::LayerDataCollector *v5;

  *(_QWORD *)this = &off_1E42A6270;
  md::ARAssetOcclusionMeshDataLogic::{unnamed type#1}::~ARAssetOcclusionMeshDataLogic((uint64_t)this + 176);
  v2 = (_QWORD *)*((_QWORD *)this + 19);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v4)
    operator delete(v4);
  v5 = (gdc::LayerDataCollector *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
  {
    gdc::LayerDataCollector::~LayerDataCollector(v5);
    MEMORY[0x1A1AF4E00]();
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

void md::ARAssetOcclusionMeshDataLogic::didBecomeInactive(gdc::LayerDataCollector **this)
{
  gdc::LayerDataCollector::clear(this[16]);
}

void md::Logic<md::ARAssetOcclusionMeshDataLogic,md::ARAssetOcclusionMeshDataContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v13, a1);
  v5 = operator new();
  *(_WORD *)v5 = v13;
  *(_BYTE *)(v5 + 2) = BYTE2(v13);
  v6 = v15;
  *(_QWORD *)(v5 + 8) = v14;
  *(_QWORD *)(v5 + 16) = v6;
  v7 = v5 + 16;
  v8 = v16;
  *(_QWORD *)(v5 + 24) = v16;
  if (v8)
  {
    v6[2] = v7;
    v14 = &v15;
    v15 = 0;
    v16 = 0;
  }
  else
  {
    *(_QWORD *)(v5 + 8) = v7;
  }
  v10 = v17;
  v9 = v18;
  *(_QWORD *)(v5 + 40) = v18;
  v11 = v5 + 40;
  *(_QWORD *)(v5 + 32) = v10;
  v12 = v19;
  *(_QWORD *)(v5 + 48) = v19;
  if (v12)
  {
    v9[2] = v11;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
    v9 = 0;
  }
  else
  {
    *(_QWORD *)(v5 + 32) = v11;
  }
  v4[2] = "md::ARAssetOcclusionMeshDataContext]";
  v4[3] = 35;
  v4[4] = v5;
  *v4 = &off_1E42B1590;
  v4[1] = 0x18CA739B45F5362ALL;
  *a2 = v4;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v9);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v15);
}

void sub_19F8BCE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  uint64_t v15;

  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(a15);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(a12);
  MEMORY[0x1A1AF4E00](v15, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARAssetOcclusionMeshDataLogic,md::ARAssetOcclusionMeshDataContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x18CA739B45F5362ALL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARAssetOcclusionMeshDataLogic,md::ARAssetOcclusionMeshDataContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x18CA739B45F5362ALL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARAssetOcclusionMeshDataLogic,md::ARAssetOcclusionMeshDataContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x18CA739B45F5362ALL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARAssetOcclusionMeshDataLogic,md::ARAssetOcclusionMeshDataContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x18CA739B45F5362ALL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARAssetOcclusionMeshDataLogic,md::ARAssetOcclusionMeshDataContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  if (*(_QWORD *)(a3 + 8) == 0x18CA739B45F5362ALL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

void md::Logic<md::ARAssetOcclusionMeshDataLogic,md::ARAssetOcclusionMeshDataContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::allocateContext(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
}

uint64_t md::Logic<md::ARAssetOcclusionMeshDataLogic,md::ARAssetOcclusionMeshDataContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::ARAssetOcclusionMeshDataLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *this, gdc::LayerDataManager ***a3, uint64_t a4)
{
  uint64_t v5;
  double v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  gdc::LayerDataCollector *v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  gdc::LayerDataCollector *v40;
  unsigned __int8 *v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  std::__shared_weak_count_vtbl **v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t i;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  uint8x8_t v68;
  void **v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  float v74;
  float v75;
  _BOOL8 v76;
  unint64_t v77;
  unint64_t v78;
  size_t prime;
  void *v80;
  void *v81;
  uint64_t v82;
  _QWORD *v83;
  size_t v84;
  size_t v85;
  size_t v86;
  _QWORD *j;
  size_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint8x8_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  size_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t **v106;
  uint64_t *v107;
  uint64_t **v108;
  unint64_t v109;
  uint64_t *v110;
  gdc::LayerDataManager *v111;
  uint64_t *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *p_shared_owners;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  unint64_t v122;
  int8x8_t v123;
  uint8x8_t v124;
  unint64_t v125;
  uint64_t **v126;
  uint64_t *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t **v137;
  uint64_t *v138;
  uint64_t **v139;
  unint64_t v140;
  uint64_t *v141;
  gdc::LayerDataManager *v142;
  uint64_t *v143;
  NSObject *v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  int8x8_t v151;
  uint8x8_t v152;
  unint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  _QWORD *k;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  gdc::LayerDataManager *v163;
  char v164;
  _QWORD *v165;
  BOOL v166;
  BOOL v167;
  gdc::LayerDataManager *v168;
  gdc::LayerDataManager *v169;
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v172;
  void *v173;
  _QWORD *v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  gdc::LayerDataManager **v179;
  char v180;
  _QWORD *v181;
  gdc::LayerDataManager *v183;
  gdc::LayerDataManager *v184;
  void *__p[2];
  void *v186[2];
  int v187;
  void *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  char v192[32];
  unint64_t v193;
  QuadTile v194;
  _BYTE buf[24];
  const char *v196;
  uint64_t v197;
  char v198;
  uint64_t v199;

  v199 = *MEMORY[0x1E0C80C00];
  v183 = **a3;
  md::LayoutContext::frameState(this);
  v6 = *(double *)(v5 + 88);
  gdc::LayerDataCollector::clear(*(gdc::LayerDataCollector **)(a1 + 128));
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v186 = 0u;
  v187 = 1065353216;
  v7 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)60>>(*(_QWORD *)(a1 + 120));
  v8 = v7[7];
  v9 = v7[8];
  if (v8 != v9)
  {
    v10 = (_QWORD *)v7[10];
    while (1)
    {
      v11 = (_QWORD *)*v10;
      if ((_QWORD *)*v10 != v10 + 1)
        break;
LABEL_3:
      v10 += 3;
      v8 += 8;
      if (v8 == v9)
        goto LABEL_45;
    }
LABEL_7:
    v12 = v11[4];
    v13 = *(_QWORD *)(v12 + 720);
    v14 = *(_QWORD *)(v12 + 728);
    while (1)
    {
      if (v13 == v14)
      {
        v28 = (_QWORD *)v11[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD *)v11[2];
            v166 = *v29 == (_QWORD)v11;
            v11 = v29;
          }
          while (!v166);
        }
        v11 = v29;
        if (v29 == v10 + 1)
          goto LABEL_3;
        goto LABEL_7;
      }
      v16 = (unint64_t *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 16);
      if (*(_BYTE *)(v13 + 8))
        v16 = (unint64_t *)v13;
      v18 = *v16;
      *(_QWORD *)buf = *v16;
      if (__p[1])
      {
        v19 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v19.i16[0] = vaddlv_u8(v19);
        if (v19.u32[0] > 1uLL)
        {
          v20 = v18;
          if ((void *)v18 >= __p[1])
            v20 = v18 % (unint64_t)__p[1];
        }
        else
        {
          v20 = ((unint64_t)__p[1] - 1) & v18;
        }
        v21 = (_QWORD *)*((_QWORD *)__p[0] + v20);
        if (v21)
        {
          v21 = (_QWORD *)*v21;
          if (v21)
          {
            if (v19.u32[0] < 2uLL)
            {
              while (1)
              {
                v23 = v21[1];
                if (v23 == v18)
                {
                  if (v21[2] == v18)
                    goto LABEL_34;
                }
                else if ((v23 & ((uint64_t)__p[1] - 1)) != v20)
                {
                  goto LABEL_33;
                }
                v21 = (_QWORD *)*v21;
                if (!v21)
                  goto LABEL_34;
              }
            }
            do
            {
              v22 = v21[1];
              if (v22 == v18)
              {
                if (v21[2] == v18)
                  break;
              }
              else
              {
                if ((void *)v22 >= __p[1])
                  v22 %= (unint64_t)__p[1];
                if (v22 != v20)
                  goto LABEL_33;
              }
              v21 = (_QWORD *)*v21;
            }
            while (v21);
          }
        }
      }
      else
      {
LABEL_33:
        v21 = 0;
      }
LABEL_34:
      if ((*(_BYTE *)(v13 + 24) & 2) != 0)
        break;
      if ((*(_BYTE *)(v13 + 24) & 1) != 0 && !v21)
      {
        v24 = std::__hash_table<std::__hash_value_type<unsigned long long,std::list<std::pair<unsigned long long,unsigned char>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::list<std::pair<unsigned long long,unsigned char>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::list<std::pair<unsigned long long,unsigned char>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::list<std::pair<unsigned long long,unsigned char>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t *)__p, v18, buf);
        v25 = operator new(0x20uLL);
        v25[2] = v17;
        *((_BYTE *)v25 + 24) = *(_BYTE *)(v13 + 24);
        v15 = v24[3];
        *v25 = v15;
        v25[1] = v24 + 3;
        *(_QWORD *)(v15 + 8) = v25;
        v24[3] = v25;
LABEL_8:
        ++v24[5];
      }
      v13 += 32;
    }
    v24 = std::__hash_table<std::__hash_value_type<unsigned long long,std::list<std::pair<unsigned long long,unsigned char>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::list<std::pair<unsigned long long,unsigned char>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::list<std::pair<unsigned long long,unsigned char>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::list<std::pair<unsigned long long,unsigned char>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t *)__p, v18, buf);
    v26 = operator new(0x20uLL);
    v26[2] = v17;
    *((_BYTE *)v26 + 24) = *(_BYTE *)(v13 + 24);
    *v26 = v24 + 3;
    v27 = (_QWORD *)v24[4];
    v26[1] = v27;
    *v27 = v26;
    v24[4] = v26;
    goto LABEL_8;
  }
LABEL_45:
  v30 = v186[0];
  if (v186[0])
  {
    do
    {
      v31 = *(_QWORD *)(v30[4] + 16);
      v32 = v30[2];
      v33 = *(gdc::LayerDataCollector **)(a1 + 128);
      v188 = v192;
      v189 = v192;
      v190 = v192;
      v191 = 32;
      v193 = 0;
      *(_QWORD *)buf = v31;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v188, v192, buf, &buf[8]);
      *(_QWORD *)buf = 42;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v188, v189, buf, &buf[8]);
      *(_QWORD *)buf = v32;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v188, v189, buf, &buf[8]);
      v34 = (unsigned __int8 *)v188;
      v35 = v189 - (_BYTE *)v188;
      if (v189 == v188)
      {
        v36 = 0;
      }
      else
      {
        v36 = 0;
        if (v35 <= 1)
          v35 = 1;
        do
        {
          v37 = *v34++;
          v36 ^= (v36 << 6) - 0x61C8864680B583EBLL + (v36 >> 2) + v37;
          --v35;
        }
        while (v35);
      }
      v193 = v36;
      gdc::LayerDataRequestKey::LayerDataRequestKey(buf, 0, 0x3Du, (uint64_t)&v188, -4);
      if (v188 != v190)
        free(v188);
      *(_WORD *)&v194._type = 255;
      v194._yIdx = 0;
      v194._xIdx = 0;
      gdc::LayerDataCollector::addDataKey(v33, (const gdc::LayerDataRequestKey *)buf, &v194);
      if (v198)
        v198 = 0;
      if (*(_QWORD *)&buf[16] != v197)
        free(*(void **)&buf[16]);
      v38 = *(_QWORD *)(v30[4] + 16);
      v39 = v30[2];
      v40 = *(gdc::LayerDataCollector **)(a1 + 128);
      v188 = v192;
      v189 = v192;
      v190 = v192;
      v191 = 32;
      v193 = 0;
      *(_QWORD *)buf = v38;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v188, v192, buf, &buf[8]);
      *(_QWORD *)buf = 28;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v188, v189, buf, &buf[8]);
      *(_QWORD *)buf = v39;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v188, v189, buf, &buf[8]);
      v41 = (unsigned __int8 *)v188;
      v42 = v189 - (_BYTE *)v188;
      if (v189 == v188)
      {
        v43 = 0;
      }
      else
      {
        v43 = 0;
        if (v42 <= 1)
          v42 = 1;
        do
        {
          v44 = *v41++;
          v43 ^= (v43 << 6) - 0x61C8864680B583EBLL + (v43 >> 2) + v44;
          --v42;
        }
        while (v42);
      }
      v193 = v43;
      gdc::LayerDataRequestKey::LayerDataRequestKey(buf, 0, 0x3Du, (uint64_t)&v188, -1073741827);
      if (v188 != v190)
        free(v188);
      *(_WORD *)&v194._type = 255;
      v194._yIdx = 0;
      v194._xIdx = 0;
      gdc::LayerDataCollector::addDataKey(v40, (const gdc::LayerDataRequestKey *)buf, &v194);
      if (v198)
        v198 = 0;
      if (*(_QWORD *)&buf[16] != v197)
        free(*(void **)&buf[16]);
      v30 = (_QWORD *)*v30;
    }
    while (v30);
  }
  gdc::LayerDataManager::createDataRequests(v183, *(gdc::LayerDataCollector **)(a1 + 128), (uint64_t)(v6 * 1000.0));
  gdc::LayerDataManager::getData(v183, *(gdc::LayerDataCollector **)(a1 + 128));
  v45 = *(_QWORD *)(a1 + 128);
  v46 = *(_QWORD *)(v45 + 24);
  v47 = *(_QWORD *)(v45 + 32);
  if (v46 != v47)
  {
    while (*(_WORD *)v46 != 61)
    {
      v46 += 32;
      if (v46 == v47)
        goto LABEL_78;
    }
  }
  if (v46 == v47)
  {
LABEL_78:
    v49 = 0;
    v48 = 0;
  }
  else
  {
    v49 = *(_QWORD *)(v46 + 8);
    v48 = *(_QWORD *)(v46 + 16);
  }
  v50 = *(_OWORD *)(a4 + 32);
  v52 = (std::__shared_weak_count_vtbl *)(a4 + 16);
  v51 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 40) = v51;
  v53 = (std::__shared_weak_count *)(a4 + 8);
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 8);
  *(_OWORD *)(a4 + 8) = v50;
  v54 = *(_QWORD *)(a4 + 48);
  v55 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 48) = v55;
  *(_QWORD *)(a4 + 24) = v54;
  v56 = (_QWORD *)(v51 + 16);
  if (!v55)
    v56 = (_QWORD *)(a4 + 32);
  *v56 = a4 + 40;
  v57 = (std::__shared_weak_count_vtbl **)((char *)v52->~__shared_weak_count + 16);
  if (!v54)
    v57 = (std::__shared_weak_count_vtbl **)(a4 + 8);
  *v57 = v52;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v52->~__shared_weak_count);
  v53->__vftable = v52;
  *(_QWORD *)(a4 + 24) = 0;
  v184 = (gdc::LayerDataManager *)(a4 + 16);
  v52->~__shared_weak_count = 0;
  if (*(_QWORD *)(a1 + 160))
  {
    v58 = *(_QWORD **)(a1 + 152);
    if (v58)
    {
      do
      {
        v59 = (_QWORD *)*v58;
        operator delete(v58);
        v58 = v59;
      }
      while (v59);
    }
    *(_QWORD *)(a1 + 152) = 0;
    v60 = *(_QWORD *)(a1 + 144);
    if (v60)
    {
      for (i = 0; i != v60; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 160) = 0;
  }
  v179 = (gdc::LayerDataManager **)(a4 + 8);
  if (v49 == v48)
  {
    v180 = 0;
    goto LABEL_299;
  }
  v180 = 0;
  v181 = (_QWORD *)(a1 + 152);
  v62 = v49;
  do
  {
    v63 = *(uint64_t **)(v62 + 16);
    if (*((_WORD *)v63 + 4) == 28)
      goto LABEL_93;
    v64 = v63[2];
    v65 = *v63;
    v66 = *(_DWORD *)(v62 + 128);
    v67 = *(_QWORD *)(a1 + 144);
    if (v67)
    {
      v68 = (uint8x8_t)vcnt_s8((int8x8_t)v67);
      v68.i16[0] = vaddlv_u8(v68);
      if (v68.u32[0] > 1uLL)
      {
        v53 = (std::__shared_weak_count *)v63[2];
        if (v64 >= v67)
          v53 = (std::__shared_weak_count *)(v64 % v67);
      }
      else
      {
        v53 = (std::__shared_weak_count *)((v67 - 1) & v64);
      }
      v69 = *(void ***)(*(_QWORD *)(a1 + 136) + 8 * (_QWORD)v53);
      if (v69)
      {
        v70 = *v69;
        if (*v69)
        {
          if (v68.u32[0] < 2uLL)
          {
            while (1)
            {
              v72 = v70[1];
              if (v72 == v64)
              {
                if (v70[2] == v64)
                  goto LABEL_115;
              }
              else if ((std::__shared_weak_count *)(v72 & (v67 - 1)) != v53)
              {
                goto LABEL_116;
              }
              v70 = (_QWORD *)*v70;
              if (!v70)
                goto LABEL_116;
            }
          }
          do
          {
            v71 = v70[1];
            if (v71 == v64)
            {
              if (v70[2] == v64)
              {
LABEL_115:
                v73 = *(_DWORD *)(v62 + 128);
                goto LABEL_176;
              }
            }
            else
            {
              if (v71 >= v67)
                v71 %= v67;
              if ((std::__shared_weak_count *)v71 != v53)
                break;
            }
            v70 = (_QWORD *)*v70;
          }
          while (v70);
        }
      }
    }
LABEL_116:
    v70 = operator new(0x28uLL);
    *v70 = 0;
    v70[1] = v64;
    v70[2] = v64;
    v70[3] = 0;
    *((_DWORD *)v70 + 8) = 0;
    v74 = (float)(unint64_t)(*(_QWORD *)(a1 + 160) + 1);
    v75 = *(float *)(a1 + 168);
    if (!v67 || (float)(v75 * (float)v67) < v74)
    {
      v76 = (v67 & (v67 - 1)) != 0;
      if (v67 < 3)
        v76 = 1;
      v77 = v76 | (2 * v67);
      v78 = vcvtps_u32_f32(v74 / v75);
      if (v77 <= v78)
        prime = v78;
      else
        prime = v77;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v67 = *(_QWORD *)(a1 + 144);
      }
      if (prime <= v67)
      {
        if (prime >= v67)
          goto LABEL_153;
        v91 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 160) / *(float *)(a1 + 168));
        if (v67 < 3 || (v92 = (uint8x8_t)vcnt_s8((int8x8_t)v67), v92.i16[0] = vaddlv_u8(v92), v92.u32[0] > 1uLL))
        {
          v91 = std::__next_prime(v91);
        }
        else
        {
          v93 = 1 << -(char)__clz(v91 - 1);
          if (v91 >= 2)
            v91 = v93;
        }
        if (prime <= v91)
          prime = v91;
        if (prime >= v67)
        {
          v67 = *(_QWORD *)(a1 + 144);
LABEL_153:
          if ((v67 & (v67 - 1)) != 0)
          {
            if (v64 >= v67)
              v53 = (std::__shared_weak_count *)(v64 % v67);
            else
              v53 = (std::__shared_weak_count *)v64;
          }
          else
          {
            v53 = (std::__shared_weak_count *)((v67 - 1) & v64);
          }
          goto LABEL_166;
        }
        if (!prime)
        {
          v120 = *(void **)(a1 + 136);
          *(_QWORD *)(a1 + 136) = 0;
          if (v120)
            operator delete(v120);
          v67 = 0;
          *(_QWORD *)(a1 + 144) = 0;
          goto LABEL_153;
        }
      }
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v80 = operator new(8 * prime);
      v81 = *(void **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v80;
      if (v81)
        operator delete(v81);
      v82 = 0;
      *(_QWORD *)(a1 + 144) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v82++) = 0;
      while (prime != v82);
      v83 = (_QWORD *)*v181;
      if (!*v181)
      {
LABEL_152:
        v67 = prime;
        goto LABEL_153;
      }
      v84 = v83[1];
      v85 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v86 = v84 & v85;
        *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v86) = v181;
        for (j = (_QWORD *)*v83; *v83; j = (_QWORD *)*v83)
        {
          v88 = j[1] & v85;
          if (v88 == v86)
          {
            v83 = j;
          }
          else
          {
            v89 = *(_QWORD *)(a1 + 136);
            if (*(_QWORD *)(v89 + 8 * v88))
            {
              *v83 = *j;
              v90 = 8 * v88;
              *j = **(_QWORD **)(*(_QWORD *)(a1 + 136) + v90);
              **(_QWORD **)(*(_QWORD *)(a1 + 136) + v90) = j;
            }
            else
            {
              *(_QWORD *)(v89 + 8 * v88) = v83;
              v83 = j;
              v86 = v88;
            }
          }
        }
        goto LABEL_152;
      }
      if (v84 >= prime)
        v84 %= prime;
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v84) = v181;
      v94 = (_QWORD *)*v83;
      if (!*v83)
        goto LABEL_152;
      while (1)
      {
        v96 = v94[1];
        if (v96 >= prime)
          v96 %= prime;
        if (v96 != v84)
        {
          v97 = *(_QWORD *)(a1 + 136);
          if (!*(_QWORD *)(v97 + 8 * v96))
          {
            *(_QWORD *)(v97 + 8 * v96) = v83;
            goto LABEL_157;
          }
          *v83 = *v94;
          v95 = 8 * v96;
          *v94 = **(_QWORD **)(*(_QWORD *)(a1 + 136) + v95);
          **(_QWORD **)(*(_QWORD *)(a1 + 136) + v95) = v94;
          v94 = v83;
        }
        v96 = v84;
LABEL_157:
        v83 = v94;
        v94 = (_QWORD *)*v94;
        v84 = v96;
        if (!v94)
          goto LABEL_152;
      }
    }
LABEL_166:
    v98 = *(_QWORD *)(a1 + 136);
    v99 = *(_QWORD **)(v98 + 8 * (_QWORD)v53);
    if (v99)
    {
      *v70 = *v99;
LABEL_174:
      *v99 = v70;
      goto LABEL_175;
    }
    *v70 = *v181;
    *v181 = v70;
    *(_QWORD *)(v98 + 8 * (_QWORD)v53) = v181;
    if (*v70)
    {
      v100 = *(_QWORD *)(*v70 + 8);
      if ((v67 & (v67 - 1)) != 0)
      {
        if (v100 >= v67)
          v100 %= v67;
      }
      else
      {
        v100 &= v67 - 1;
      }
      v99 = (_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v100);
      goto LABEL_174;
    }
LABEL_175:
    ++*(_QWORD *)(a1 + 160);
    v73 = *(_DWORD *)(v62 + 128);
LABEL_176:
    v70[3] = v65;
    *((_DWORD *)v70 + 8) = v66;
    if (v73 == 1)
    {
      v180 = 1;
      goto LABEL_93;
    }
    if (v73 == 3)
    {
      v101 = *(_QWORD *)(v62 + 112);
      v102 = *(_QWORD *)(v62 + 120);
      *(_QWORD *)buf = v101;
      *(_QWORD *)&buf[8] = v102;
      if (v102)
      {
        v103 = (unint64_t *)(v102 + 8);
        do
          v104 = __ldxr(v103);
        while (__stxr(v104 + 1, v103));
      }
      v105 = *(_QWORD *)(v101 + 168);
      v106 = (uint64_t **)(a4 + 16);
      while (1)
      {
        v107 = *v106;
        v108 = v106;
        if (!*v106)
          break;
        while (1)
        {
          v106 = (uint64_t **)v107;
          v109 = v107[4];
          if (v105 < v109)
            break;
          if (v109 >= v105)
          {
            v110 = (uint64_t *)v106;
            if (!v102)
              goto LABEL_194;
            goto LABEL_192;
          }
          v107 = v106[1];
          if (!v107)
          {
            v108 = v106 + 1;
            goto LABEL_187;
          }
        }
      }
LABEL_187:
      v110 = (uint64_t *)operator new(0x38uLL);
      v110[5] = 0;
      v110[6] = 0;
      v110[4] = v105;
      *v110 = 0;
      v110[1] = 0;
      v110[2] = (uint64_t)v106;
      *v108 = v110;
      v111 = *(gdc::LayerDataManager **)*v179;
      v112 = v110;
      if (v111)
      {
        *v179 = v111;
        v112 = *v108;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a4 + 16), v112);
      ++*(_QWORD *)(a4 + 24);
      v101 = *(_QWORD *)buf;
      v102 = *(_QWORD *)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
LABEL_192:
        v113 = (unint64_t *)(v102 + 8);
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
LABEL_194:
      v53 = (std::__shared_weak_count *)v110[6];
      v110[5] = v101;
      v110[6] = v102;
      if (!v53)
        goto LABEL_198;
      p_shared_owners = (unint64_t *)&v53->__shared_owners_;
      do
        v116 = __ldaxr(p_shared_owners);
      while (__stlxr(v116 - 1, p_shared_owners));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
        v117 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_93;
      }
      else
      {
LABEL_198:
        v117 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_93;
      }
      v118 = (unint64_t *)&v117->__shared_owners_;
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
LABEL_93:
    v62 += 144;
  }
  while (v62 != v48);
  while (2)
  {
    v121 = *(_QWORD *)(v49 + 16);
    if (*(_WORD *)(v121 + 8) == 42)
      goto LABEL_216;
    v122 = *(_QWORD *)(v121 + 16);
    v123 = *(int8x8_t *)(a1 + 144);
    if (!*(_QWORD *)&v123)
      goto LABEL_240;
    v124 = (uint8x8_t)vcnt_s8(v123);
    v124.i16[0] = vaddlv_u8(v124);
    if (v124.u32[0] > 1uLL)
    {
      v125 = *(_QWORD *)(v121 + 16);
      if (v122 >= *(_QWORD *)&v123)
        v125 = v122 % *(_QWORD *)&v123;
    }
    else
    {
      v125 = (*(_QWORD *)&v123 - 1) & v122;
    }
    v126 = *(uint64_t ***)(*(_QWORD *)(a1 + 136) + 8 * v125);
    if (!v126)
      goto LABEL_240;
    v127 = *v126;
    if (!v127)
      goto LABEL_240;
    if (v124.u32[0] < 2uLL)
    {
      v128 = *(_QWORD *)&v123 - 1;
      while (1)
      {
        v130 = v127[1];
        if (v130 == v122)
        {
          if (v127[2] == v122)
            goto LABEL_239;
        }
        else if ((v130 & v128) != v125)
        {
          goto LABEL_240;
        }
        v127 = (uint64_t *)*v127;
        if (!v127)
          goto LABEL_240;
      }
    }
    while (1)
    {
      v129 = v127[1];
      if (v129 == v122)
        break;
      if (v129 >= *(_QWORD *)&v123)
        v129 %= *(_QWORD *)&v123;
      if (v129 != v125)
        goto LABEL_240;
LABEL_228:
      v127 = (uint64_t *)*v127;
      if (!v127)
        goto LABEL_240;
    }
    if (v127[2] != v122)
      goto LABEL_228;
LABEL_239:
    if (*((_DWORD *)v127 + 8) == 2)
    {
LABEL_240:
      v131 = *(_DWORD *)(v49 + 128);
      switch(v131)
      {
        case 1:
          v180 = 1;
          break;
        case 2:
          if (GEOGetVectorKitARAssetOcclusionMeshDataLogicLog(void)::onceToken != -1)
            dispatch_once(&GEOGetVectorKitARAssetOcclusionMeshDataLogicLog(void)::onceToken, &__block_literal_global_10199);
          v144 = (id)GEOGetVectorKitARAssetOcclusionMeshDataLogicLog(void)::log;
          if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
          {
            v145 = **(_QWORD **)(v49 + 16);
            *(_DWORD *)buf = 134218754;
            *(_QWORD *)&buf[4] = v145;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "false";
            *(_WORD *)&buf[22] = 2080;
            v196 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/ARAssetOcclusionMeshDataLogic.mm";
            LOWORD(v197) = 1024;
            *(_DWORD *)((char *)&v197 + 2) = 166;
            _os_log_impl(&dword_19F029000, v144, OS_LOG_TYPE_ERROR, "Failed to resolve an occlusion mesh for asset:%llu: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x26u);
          }

          break;
        case 3:
          v132 = *(_QWORD *)(v49 + 112);
          v133 = *(_QWORD *)(v49 + 120);
          *(_QWORD *)buf = v132;
          *(_QWORD *)&buf[8] = v133;
          if (v133)
          {
            v134 = (unint64_t *)(v133 + 8);
            do
              v135 = __ldxr(v134);
            while (__stxr(v135 + 1, v134));
          }
          v136 = *(_QWORD *)(v132 + 168);
          v137 = (uint64_t **)(a4 + 16);
          while (1)
          {
            v138 = *v137;
            v139 = v137;
            if (!*v137)
              break;
            while (1)
            {
              v137 = (uint64_t **)v138;
              v140 = v138[4];
              if (v136 < v140)
                break;
              if (v140 >= v136)
              {
                v141 = (uint64_t *)v137;
                if (!v133)
                  goto LABEL_264;
                goto LABEL_262;
              }
              v138 = v137[1];
              if (!v138)
              {
                v139 = v137 + 1;
                goto LABEL_252;
              }
            }
          }
LABEL_252:
          v141 = (uint64_t *)operator new(0x38uLL);
          v141[5] = 0;
          v141[6] = 0;
          v141[4] = v136;
          *v141 = 0;
          v141[1] = 0;
          v141[2] = (uint64_t)v137;
          *v139 = v141;
          v142 = *(gdc::LayerDataManager **)*v179;
          v143 = v141;
          if (v142)
          {
            *v179 = v142;
            v143 = *v139;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a4 + 16), v143);
          ++*(_QWORD *)(a4 + 24);
          v132 = *(_QWORD *)buf;
          v133 = *(_QWORD *)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
LABEL_262:
            v146 = (unint64_t *)(v133 + 8);
            do
              v147 = __ldxr(v146);
            while (__stxr(v147 + 1, v146));
          }
LABEL_264:
          v148 = (std::__shared_weak_count *)v141[6];
          v141[5] = v132;
          v141[6] = v133;
          if (!v148)
            goto LABEL_268;
          v149 = (unint64_t *)&v148->__shared_owners_;
          do
            v150 = __ldaxr(v149);
          while (__stlxr(v150 - 1, v149));
          if (!v150)
          {
            ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
            std::__shared_weak_count::__release_weak(v148);
            v151 = (int8x8_t)__p[1];
            if (!__p[1])
              goto LABEL_293;
          }
          else
          {
LABEL_268:
            v151 = (int8x8_t)__p[1];
            if (!__p[1])
              goto LABEL_293;
          }
          v152 = (uint8x8_t)vcnt_s8(v151);
          v152.i16[0] = vaddlv_u8(v152);
          if (v152.u32[0] > 1uLL)
          {
            v153 = v122;
            if (v122 >= *(_QWORD *)&v151)
              v153 = v122 % *(_QWORD *)&v151;
          }
          else
          {
            v153 = (*(_QWORD *)&v151 - 1) & v122;
          }
          v154 = (_QWORD *)*((_QWORD *)__p[0] + v153);
          if (v154)
          {
            v155 = (_QWORD *)*v154;
            if (v155)
            {
              if (v152.u32[0] < 2uLL)
              {
                v156 = *(_QWORD *)&v151 - 1;
                while (1)
                {
                  v158 = v155[1];
                  if (v158 == v122)
                  {
                    if (v155[2] == v122)
                      goto LABEL_291;
                  }
                  else if ((v158 & v156) != v153)
                  {
                    goto LABEL_293;
                  }
                  v155 = (_QWORD *)*v155;
                  if (!v155)
                    goto LABEL_293;
                }
              }
              do
              {
                v157 = v155[1];
                if (v157 == v122)
                {
                  if (v155[2] == v122)
                  {
LABEL_291:
                    for (k = (_QWORD *)v155[4]; k != v155 + 3; k = (_QWORD *)k[1])
                      ;
                    break;
                  }
                }
                else
                {
                  if (v157 >= *(_QWORD *)&v151)
                    v157 %= *(_QWORD *)&v151;
                  if (v157 != v153)
                    break;
                }
                v155 = (_QWORD *)*v155;
              }
              while (v155);
            }
          }
LABEL_293:
          v160 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v161 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v162 = __ldaxr(v161);
            while (__stlxr(v162 - 1, v161));
            if (!v162)
            {
              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
              std::__shared_weak_count::__release_weak(v160);
            }
          }
          break;
      }
    }
LABEL_216:
    v49 += 144;
    if (v49 != v48)
      continue;
    break;
  }
LABEL_299:
  if (*(_QWORD *)(a4 + 24) == *(_QWORD *)(a4 + 48))
  {
    v163 = *v179;
    v164 = v180;
    if (*v179 == v184)
    {
LABEL_323:
      v167 = 0;
    }
    else
    {
      v165 = *(_QWORD **)(a4 + 32);
      while (1)
      {
        v166 = *((_QWORD *)v163 + 4) == v165[4] && *((_QWORD *)v163 + 5) == v165[5];
        v167 = !v166;
        if (!v166)
          break;
        v168 = (gdc::LayerDataManager *)*((_QWORD *)v163 + 1);
        v169 = v163;
        if (v168)
        {
          do
          {
            v163 = v168;
            v168 = *(gdc::LayerDataManager **)v168;
          }
          while (v168);
        }
        else
        {
          do
          {
            v163 = (gdc::LayerDataManager *)*((_QWORD *)v169 + 2);
            v166 = *(_QWORD *)v163 == (_QWORD)v169;
            v169 = v163;
          }
          while (!v166);
        }
        v170 = (_QWORD *)v165[1];
        if (v170)
        {
          do
          {
            v171 = v170;
            v170 = (_QWORD *)*v170;
          }
          while (v170);
        }
        else
        {
          do
          {
            v171 = (_QWORD *)v165[2];
            v166 = *v171 == (_QWORD)v165;
            v165 = v171;
          }
          while (!v166);
        }
        v165 = v171;
        if (v163 == v184)
          goto LABEL_323;
      }
    }
  }
  else
  {
    v167 = 1;
    v164 = v180;
  }
  *(_BYTE *)(a4 + 2) = v167;
  *(_BYTE *)(a4 + 1) = *(_BYTE *)a4 != (v164 & 1);
  *(_BYTE *)a4 = v164 & 1;
  v172 = v186[0];
  if (v186[0])
  {
    do
    {
      v174 = v172;
      v172 = (_QWORD *)*v172;
      if (v174[5])
      {
        v176 = v174[3];
        v175 = (uint64_t *)v174[4];
        v177 = *v175;
        *(_QWORD *)(v177 + 8) = *(_QWORD *)(v176 + 8);
        **(_QWORD **)(v176 + 8) = v177;
        v174[5] = 0;
        if (v175 != v174 + 3)
        {
          do
          {
            v178 = (uint64_t *)v175[1];
            operator delete(v175);
            v175 = v178;
          }
          while (v178 != v174 + 3);
        }
      }
      operator delete(v174);
    }
    while (v172);
  }
  v173 = __p[0];
  __p[0] = 0;
  if (v173)
    operator delete(v173);
}

void sub_19F8BE354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::unordered_map<unsigned long long,std::list<std::pair<unsigned long long,unsigned char>>>::~unordered_map[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::Logic<md::ARAssetOcclusionMeshDataLogic,md::ARAssetOcclusionMeshDataContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)60>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x37A96293F55A3841;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x37A96293F55A3841;
      if (*(_QWORD *)&v3 <= 0x37A96293F55A3841uLL)
        v5 = 0x37A96293F55A3841uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x37A96293F55A3841;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x37A96293F55A3841)
            {
              if (v7[2] == 0x37A96293F55A3841)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x37A96293F55A3841)
          {
            if (v7[2] == 0x37A96293F55A3841)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataInView<md::MapDataType::ARBuildings>]";
  *(_QWORD *)(v11 + 24) = 62;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2AA8;
  *(_QWORD *)(v11 + 8) = 0x37A96293F55A3841;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x37A96293F55A3841uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x37A96293F55A3841;
  v15[1] = "SceneComponents::LayerDataInView<md::MapDataType::ARBuildings>]";
  v15[2] = 62;
  gdc::Registry::_registerStorageDataSignals(a1, 0x37A96293F55A3841, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F8BE668(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::list<std::pair<unsigned long long,unsigned char>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::list<std::pair<unsigned long long,unsigned char>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::list<std::pair<unsigned long long,unsigned char>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::list<std::pair<unsigned long long,unsigned char>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = v10 + 3;
  v10[4] = v10 + 3;
  v10[5] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    goto LABEL_72;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    v23 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_59;
    v24 = v23[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*a1 + 8 * v26) = v13;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v28))
        {
          *v23 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*a1 + v29);
          **(_QWORD **)(*a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v28) = v23;
          v23 = i;
          v26 = v28;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*a1 + 8 * v24) = v13;
    v33 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_59;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*a1 + 8 * v35))
        {
          *(_QWORD *)(*a1 + 8 * v35) = v23;
          goto LABEL_64;
        }
        *v23 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*a1 + v34);
        **(_QWORD **)(*a1 + v34) = v33;
        v33 = v23;
      }
      v35 = v24;
LABEL_64:
      v23 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = (void *)*a1;
      *a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = a1[1];
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v5);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v36 + 8 * v5) = v13;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v10;
}

void sub_19F8BEAEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::list<std::pair<unsigned long long,unsigned char>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::list<std::pair<unsigned long long,unsigned char>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned long long,std::list<std::pair<unsigned long long,unsigned char>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    if (v5[5])
    {
      v7 = v5[3];
      v6 = (uint64_t *)v5[4];
      v8 = *v6;
      *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
      **(_QWORD **)(v7 + 8) = v8;
      v5[5] = 0;
      if (v6 != v5 + 3)
      {
        do
        {
          v9 = (uint64_t *)v6[1];
          operator delete(v6);
          v6 = v9;
        }
        while (v9 != v5 + 3);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void ___ZL47GEOGetVectorKitARAssetOcclusionMeshDataLogicLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "ARAssetOcclusionMeshDataLogic");
  v1 = (void *)GEOGetVectorKitARAssetOcclusionMeshDataLogicLog(void)::log;
  GEOGetVectorKitARAssetOcclusionMeshDataLogicLog(void)::log = (uint64_t)v0;

}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::list<std::pair<unsigned long long,unsigned char>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::list<std::pair<unsigned long long,unsigned char>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      if (v2[5])
      {
        v4 = v2[3];
        v3 = (uint64_t *)v2[4];
        v5 = *v3;
        *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
        **(_QWORD **)(v4 + 8) = v5;
        v2[5] = 0;
        if (v3 != v2 + 3)
        {
          do
          {
            v6 = (uint64_t *)v3[1];
            operator delete(v3);
            v3 = v6;
          }
          while (v6 != v2 + 3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)60>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)60>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)60>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)60>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x7851AF310F49C988;
    if (a2 <= 0x7851AF310F49C988)
      v3 = 0x7851AF310F49C988 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0x7851AF310F49C988;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0x7851AF310F49C988)
      {
        if (v6[2] == 0x7851AF310F49C988)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0x7851AF310F49C988)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0x7851AF310F49C988)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0x7851AF310F49C988)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0xF9EFCB105DF83E4;
    if (a2 <= 0xF9EFCB105DF83E4)
      v11 = 0xF9EFCB105DF83E4 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0xF9EFCB105DF83E4;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0xF9EFCB105DF83E4)
      {
        if (v13[2] == 0xF9EFCB105DF83E4)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0xF9EFCB105DF83E4)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0xF9EFCB105DF83E4)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0xF9EFCB105DF83E4)
    return v10;
  return v10;
}

_QWORD *gdc::ManagedObjectHolder<md::ARAssetOcclusionMeshDataContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1590;
  v2 = a1[4];
  if (v2)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v2 + 40));
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v2 + 16));
    MEMORY[0x1A1AF4E00](v2, 0x1020C400970237FLL);
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::ARAssetOcclusionMeshDataContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1590;
  v1 = a1[4];
  if (v1)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v1 + 40));
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v1 + 16));
    MEMORY[0x1A1AF4E00](v1, 0x1020C400970237FLL);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARAssetOcclusionMeshDataContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t md::ARAssetOcclusionMeshDataLogic::{unnamed type#1}::~ARAssetOcclusionMeshDataLogic(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;

  v2 = *(_QWORD **)(a1 + 136);
  while (v2)
  {
    v11 = v2;
    v2 = (_QWORD *)*v2;
    v12 = (std::__shared_weak_count *)v11[3];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v11);
  }
  v3 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD **)(a1 + 96);
  while (v4)
  {
    v15 = v4;
    v4 = (_QWORD *)*v4;
    v16 = (std::__shared_weak_count *)v15[3];
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    operator delete(v15);
  }
  v5 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v5)
    operator delete(v5);
  v6 = *(_QWORD **)(a1 + 56);
  while (v6)
  {
    v19 = v6;
    v6 = (_QWORD *)*v6;
    v20 = (std::__shared_weak_count *)v19[3];
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    operator delete(v19);
  }
  v7 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD **)(a1 + 16);
  while (v8)
  {
    v23 = v8;
    v8 = (_QWORD *)*v8;
    v24 = (std::__shared_weak_count *)v23[3];
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    operator delete(v23);
  }
  v9 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v9)
    operator delete(v9);
  return a1;
}

void ggl::TrafficGlow::BasePipelineState::~BasePipelineState(ggl::TrafficGlow::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::TrafficGlow::BasePipelineSetup::~BasePipelineSetup(ggl::TrafficGlow::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::TrafficGlow::BasePipelineSetup::constantDataIsEnabled(ggl::TrafficGlow::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::TrafficGlow::BasePipelineSetup::textureIsEnabled(ggl::TrafficGlow::BasePipelineSetup *this)
{
  return 0;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14PolygonOverlay22AntialiasPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14PolygonOverlay22AntialiasPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6428;
  return result;
}

void std::__function::__func<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::PolygonOverlay::AntialiasPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::PolygonOverlay::AntialiasPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3688;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::PolygonOverlay::AntialiasPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(std::__shared_weak_count **)(v1 + 40);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B6D38;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1638;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE54E148, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::PolygonOverlay::AntialiasConstants::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9070;
  v13 = v3[8];
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 40);
  *(_QWORD *)(v14 + 32) = v12;
  *(_QWORD *)(v14 + 40) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

uint64_t ggl::ConstantDataTyped<ggl::PolygonOverlay::AntialiasConstants>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::PolygonOverlay::AntialiasConstants>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonOverlay::AntialiasConstants>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonOverlay::AntialiasConstants>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonOverlay::AntialiasConstants>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::PolygonOverlay::FillPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::PolygonOverlay::FillPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3640;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::PolygonOverlay::FillPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(std::__shared_weak_count **)(v1 + 24);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B6CE8;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1670;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE54E0C8, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::PolygonOverlay::Fill::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9090;
  v13 = v3[8];
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 40);
  *(_QWORD *)(v14 + 32) = v12;
  *(_QWORD *)(v14 + 40) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

uint64_t ggl::ConstantDataTyped<ggl::PolygonOverlay::Fill>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::PolygonOverlay::Fill>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonOverlay::Fill>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonOverlay::Fill>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonOverlay::Fill>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14PolygonOverlay17FillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14PolygonOverlay17FillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D63E0;
  return result;
}

void std::__function::__func<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonOverlay::FillPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonOverlay::FillPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D35F8;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonOverlay::FillPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *v1;
  v5 = (std::__shared_weak_count *)v1[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B6CE8;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1670;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE54E0C8, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::PolygonOverlay::Fill::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9090;
  v13 = v3[8];
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 40);
  *(_QWORD *)(v14 + 32) = v12;
  *(_QWORD *)(v14 + 40) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void std::__shared_ptr_emplace<ggl::PolygonOverlay::AntialiasPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolygonOverlay::AntialiasPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF300;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::PolygonOverlay::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF2C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolygonOverlay::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF2C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::RouteLineAlphaReset::BasePipelineSetup::~BasePipelineSetup(ggl::RouteLineAlphaReset::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::RouteLineAlphaReset::BasePipelineSetup::constantDataIsEnabled(ggl::RouteLineAlphaReset::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

uint64_t ggl::RouteLineAlphaReset::BasePipelineSetup::textureIsEnabled(ggl::RouteLineAlphaReset::BasePipelineSetup *this)
{
  return 0;
}

void md::InteractiveMapEngineCommandExecutor::~InteractiveMapEngineCommandExecutor(md::InteractiveMapEngineCommandExecutor *this)
{
  md::InteractiveMapEngineCommandExecutor::~InteractiveMapEngineCommandExecutor(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void **v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char v19;
  char v20;

  *(_QWORD *)this = &off_1E42AA908;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    std::mutex::lock((std::mutex *)(v2 + 8));
    *(_BYTE *)v2 = 1;
    if (*(_QWORD *)(v2 + 136))
    {
      v3 = *(_QWORD *)(v2 + 120);
      v4 = *(uint64_t **)(v2 + 128);
      v5 = *v4;
      *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
      **(_QWORD **)(v3 + 8) = v5;
      *(_QWORD *)(v2 + 136) = 0;
      if (v4 != (uint64_t *)(v2 + 120))
      {
        do
        {
          v6 = (uint64_t *)v4[1];
          v7 = *((unsigned int *)v4 + 14);
          if ((_DWORD)v7 != -1)
            ((void (*)(char *, uint64_t *))off_1E42F3138[v7])(&v19, v4 + 2);
          operator delete(v4);
          v4 = v6;
        }
        while (v6 != (uint64_t *)(v2 + 120));
      }
    }
    if (*(_QWORD *)(v2 + 168))
    {
      v8 = *(void ***)(v2 + 160);
      if (v8)
      {
        do
        {
          v9 = (void **)*v8;
          v10 = *((unsigned int *)v8 + 14);
          if ((_DWORD)v10 != -1)
            ((void (*)(char *, void **))off_1E42F3138[v10])(&v20, v8 + 2);
          operator delete(v8);
          v8 = v9;
        }
        while (v9);
      }
      *(_QWORD *)(v2 + 160) = 0;
      v11 = *(_QWORD *)(v2 + 152);
      if (v11)
      {
        for (i = 0; i != v11; ++i)
          *(_QWORD *)(*(_QWORD *)(v2 + 144) + 8 * i) = 0;
      }
      *(_QWORD *)(v2 + 168) = 0;
    }
    std::condition_variable::notify_all((std::condition_variable *)(v2 + 72));
    std::mutex::unlock((std::mutex *)(v2 + 8));
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

}

void md::InteractiveMapEngineCommandExecutor::schedule(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  BOOL v17;
  unint64_t v18;
  BOOL v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t **v32;
  uint64_t *v33;
  unint64_t v34;
  BOOL v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  BOOL v41;
  std::mutex *v42;
  _QWORD *v43;
  uint64_t v44;
  float v45;
  float v46;
  _BOOL8 v47;
  unint64_t v48;
  unint64_t v49;
  size_t prime;
  unint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  _QWORD *v55;
  size_t v56;
  size_t v57;
  size_t v58;
  _QWORD *i;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint8x8_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  size_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  _QWORD v76[2];
  char v77;
  char v78;
  char v79;
  _BYTE v80[40];
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)(a1 + 24);
  v4 = *(unsigned __int8 **)(a1 + 24);
  v80[0] = 0;
  v81 = -1;
  v5 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_1E42EFC98[v5])(&v79, v80, a2);
    v81 = v5;
  }
  v82 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v4 + 8));
  v6 = *v4;
  if (*v4)
  {
    std::mutex::unlock((std::mutex *)(v4 + 8));
    goto LABEL_142;
  }
  v7 = v81;
  if (v81 == -1)
    v8 = -1;
  else
    v8 = v81;
  v9 = *(int8x8_t *)(v4 + 152);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = v81;
      if (v8 >= *(_QWORD *)&v9)
        v11 = v8 % *(_QWORD *)&v9;
    }
    else
    {
      v11 = (*(_QWORD *)&v9 - 1) & v8;
    }
    v12 = *(uint64_t ***)(*((_QWORD *)v4 + 18) + 8 * v11);
    if (v12)
    {
      v13 = *v12;
      if (v13)
      {
        if (v10.u32[0] < 2uLL)
        {
          v14 = *(_QWORD *)&v9 - 1;
          while (1)
          {
            v22 = v13[1];
            if (v22 == v8)
            {
              v19 = v81 == -1;
              v20 = *((_DWORD *)v13 + 14);
              v21 = v81 == v20 && v81 != -1;
              if (v20 != -1)
                v19 = v21;
              if (v19)
                goto LABEL_39;
            }
            else if ((v22 & v14) != v11)
            {
              goto LABEL_42;
            }
            v13 = (uint64_t *)*v13;
            if (!v13)
              goto LABEL_42;
          }
        }
        do
        {
          v18 = v13[1];
          if (v18 == v8)
          {
            v15 = v81 == -1;
            v16 = *((_DWORD *)v13 + 14);
            v17 = v81 == v16 && v81 != -1;
            if (v16 != -1)
              v15 = v17;
            if (v15)
            {
LABEL_39:
              v23 = (uint64_t *)v13[9];
              v24 = *v23;
              *(_QWORD *)(v24 + 8) = v23[1];
              *(_QWORD *)v23[1] = v24;
              --*((_QWORD *)v4 + 17);
              v25 = *((unsigned int *)v23 + 14);
              if ((_DWORD)v25 != -1)
                ((void (*)(_QWORD *, uint64_t *))off_1E42F3138[v25])(v76, v23 + 2);
              operator delete(v23);
              v7 = v81;
              break;
            }
          }
          else
          {
            if (v18 >= *(_QWORD *)&v9)
              v18 %= *(_QWORD *)&v9;
            if (v18 != v11)
              break;
          }
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_42:
  v26 = operator new(0x48uLL);
  v26[16] = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  v27 = -1;
  *((_DWORD *)v26 + 14) = -1;
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *, _BYTE *, _BYTE *))off_1E42EFCB8[v7])(&v79, v26 + 16, v80);
    *((_DWORD *)v26 + 14) = v7;
    v27 = v81;
  }
  v73 = v82;
  *((_QWORD *)v26 + 8) = v82;
  v28 = *((_QWORD *)v4 + 15);
  *(_QWORD *)(v28 + 8) = v26;
  *(_QWORD *)v26 = v28;
  *((_QWORD *)v4 + 15) = v26;
  *((_QWORD *)v26 + 1) = v4 + 120;
  ++*((_QWORD *)v4 + 17);
  if (v27 == -1)
    v29 = -1;
  else
    v29 = v27;
  v30 = *((_QWORD *)v4 + 19);
  if (v30)
  {
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] > 1uLL)
    {
      v7 = v27;
      if (v29 >= v30)
        v7 = v29 % v30;
    }
    else
    {
      v7 = (v30 - 1) & v29;
    }
    v32 = *(uint64_t ***)(*((_QWORD *)v4 + 18) + 8 * v7);
    if (v32)
    {
      v33 = *v32;
      if (v33)
      {
        if (v31.u32[0] < 2uLL)
        {
          while (1)
          {
            v38 = v33[1];
            if (v38 == v29)
            {
              v39 = v27 == -1;
              v40 = *((_DWORD *)v33 + 14);
              v41 = v27 == v40 && v27 != -1;
              if (v40 != -1)
                v39 = v41;
              if (v39)
                goto LABEL_78;
            }
            else if ((v38 & (v30 - 1)) != v7)
            {
              goto LABEL_79;
            }
            v33 = (uint64_t *)*v33;
            if (!v33)
              goto LABEL_79;
          }
        }
        do
        {
          v34 = v33[1];
          if (v34 == v29)
          {
            v35 = v27 == -1;
            v36 = *((_DWORD *)v33 + 14);
            v37 = v27 == v36 && v27 != -1;
            if (v36 != -1)
              v35 = v37;
            if (v35)
            {
LABEL_78:
              v42 = (std::mutex *)(v4 + 8);
              goto LABEL_141;
            }
          }
          else
          {
            if (v34 >= v30)
              v34 %= v30;
            if (v34 != v7)
              break;
          }
          v33 = (uint64_t *)*v33;
        }
        while (v33);
      }
    }
  }
LABEL_79:
  v75 = v29;
  v43 = operator new(0x50uLL);
  v76[0] = v43;
  v76[1] = v4 + 160;
  v74 = v4 + 160;
  v77 = 0;
  *v43 = 0;
  v43[1] = v75;
  *((_BYTE *)v43 + 16) = 0;
  *((_DWORD *)v43 + 14) = -1;
  if (v27 == -1)
  {
    v44 = v73;
  }
  else
  {
    ((void (*)(char *, _QWORD *, _BYTE *))off_1E42EFC98[v27])(&v78, v43 + 2, v80);
    *((_DWORD *)v43 + 14) = v27;
    v44 = v82;
  }
  v43[8] = v44;
  v43[9] = 0;
  v77 = 1;
  v45 = (float)(unint64_t)(*((_QWORD *)v4 + 21) + 1);
  v46 = *((float *)v4 + 44);
  if (!v30 || (float)(v46 * (float)v30) < v45)
  {
    v47 = 1;
    if (v30 >= 3)
      v47 = (v30 & (v30 - 1)) != 0;
    v48 = v47 | (2 * v30);
    v49 = vcvtps_u32_f32(v45 / v46);
    if (v48 <= v49)
      prime = v49;
    else
      prime = v48;
    if (prime == 1)
    {
      prime = 2;
      v51 = v75;
    }
    else
    {
      v51 = v75;
      if ((prime & (prime - 1)) != 0)
        prime = std::__next_prime(prime);
    }
    v30 = *((_QWORD *)v4 + 19);
    if (prime <= v30)
    {
      if (prime >= v30)
        goto LABEL_119;
      v63 = vcvtps_u32_f32((float)*((unint64_t *)v4 + 21) / *((float *)v4 + 44));
      if (v30 < 3 || (v64 = (uint8x8_t)vcnt_s8((int8x8_t)v30), v64.i16[0] = vaddlv_u8(v64), v64.u32[0] > 1uLL))
      {
        v63 = std::__next_prime(v63);
      }
      else
      {
        v65 = 1 << -(char)__clz(v63 - 1);
        if (v63 >= 2)
          v63 = v65;
      }
      if (prime <= v63)
        prime = v63;
      if (prime >= v30)
      {
        v30 = *((_QWORD *)v4 + 19);
LABEL_119:
        if ((v30 & (v30 - 1)) != 0)
        {
          if (v51 >= v30)
            v7 = v51 % v30;
          else
            v7 = v27;
        }
        else
        {
          v7 = (v30 - 1) & v51;
        }
        goto LABEL_132;
      }
      if (!prime)
      {
        v72 = (void *)*((_QWORD *)v4 + 18);
        *((_QWORD *)v4 + 18) = 0;
        if (v72)
          operator delete(v72);
        v30 = 0;
        *((_QWORD *)v4 + 19) = 0;
        goto LABEL_119;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v52 = operator new(8 * prime);
    v53 = (void *)*((_QWORD *)v4 + 18);
    *((_QWORD *)v4 + 18) = v52;
    if (v53)
      operator delete(v53);
    v54 = 0;
    *((_QWORD *)v4 + 19) = prime;
    do
      *(_QWORD *)(*((_QWORD *)v4 + 18) + 8 * v54++) = 0;
    while (prime != v54);
    v55 = (_QWORD *)*v74;
    if (!*v74)
    {
LABEL_118:
      v30 = prime;
      goto LABEL_119;
    }
    v56 = v55[1];
    v57 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v58 = v56 & v57;
      *(_QWORD *)(*((_QWORD *)v4 + 18) + 8 * v58) = v74;
      for (i = (_QWORD *)*v55; *v55; i = (_QWORD *)*v55)
      {
        v60 = i[1] & v57;
        if (v60 == v58)
        {
          v55 = i;
        }
        else
        {
          v61 = *((_QWORD *)v4 + 18);
          if (*(_QWORD *)(v61 + 8 * v60))
          {
            *v55 = *i;
            v62 = 8 * v60;
            *i = **(_QWORD **)(*((_QWORD *)v4 + 18) + v62);
            **(_QWORD **)(*((_QWORD *)v4 + 18) + v62) = i;
          }
          else
          {
            *(_QWORD *)(v61 + 8 * v60) = v55;
            v55 = i;
            v58 = v60;
          }
        }
      }
      goto LABEL_118;
    }
    if (v56 >= prime)
      v56 %= prime;
    *(_QWORD *)(*((_QWORD *)v4 + 18) + 8 * v56) = v74;
    v66 = (_QWORD *)*v55;
    if (!*v55)
      goto LABEL_118;
    while (1)
    {
      v68 = v66[1];
      if (v68 >= prime)
        v68 %= prime;
      if (v68 != v56)
      {
        v69 = *((_QWORD *)v4 + 18);
        if (!*(_QWORD *)(v69 + 8 * v68))
        {
          *(_QWORD *)(v69 + 8 * v68) = v55;
          goto LABEL_123;
        }
        *v55 = *v66;
        v67 = 8 * v68;
        *v66 = **(_QWORD **)(*((_QWORD *)v4 + 18) + v67);
        **(_QWORD **)(*((_QWORD *)v4 + 18) + v67) = v66;
        v66 = v55;
      }
      v68 = v56;
LABEL_123:
      v55 = v66;
      v66 = (_QWORD *)*v66;
      v56 = v68;
      if (!v66)
        goto LABEL_118;
    }
  }
LABEL_132:
  v70 = *(_QWORD **)(*((_QWORD *)v4 + 18) + 8 * v7);
  if (v70)
  {
    *(_QWORD *)v76[0] = *v70;
    *v70 = v76[0];
    v42 = (std::mutex *)(v4 + 8);
  }
  else
  {
    *(_QWORD *)v76[0] = *((_QWORD *)v4 + 20);
    *((_QWORD *)v4 + 20) = v76[0];
    v42 = (std::mutex *)(v4 + 8);
    *(_QWORD *)(*((_QWORD *)v4 + 18) + 8 * v7) = v74;
    if (*(_QWORD *)v76[0])
    {
      v71 = *(_QWORD *)(*(_QWORD *)v76[0] + 8);
      if ((v30 & (v30 - 1)) != 0)
      {
        if (v71 >= v30)
          v71 %= v30;
      }
      else
      {
        v71 &= v30 - 1;
      }
      *(_QWORD *)(*((_QWORD *)v4 + 18) + 8 * v71) = v76[0];
    }
  }
  v33 = (uint64_t *)v76[0];
  ++*((_QWORD *)v4 + 21);
LABEL_141:
  v33[9] = (uint64_t)v26;
  std::mutex::unlock(v42);
  std::condition_variable::notify_one((std::condition_variable *)(v4 + 72));
LABEL_142:
  if (v81 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E42F3138[v81])(v76, v80);
  if (!v6)
    md::InteractiveMapEngineCommandExecutor::nextCommand(*(void **)(a1 + 16), *(_QWORD *)(a1 + 8), v3, a1 + 40);
}

void sub_19F8C07E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::RunnableMapEngineCommand,std::__list_iterator<md::RunnableMapEngineCommand,void *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::RunnableMapEngineCommand,std::__list_iterator<md::RunnableMapEngineCommand,void *>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&a18);
  std::mutex::unlock(a11);
  if (a30 != -1)
    ((void (*)(char *, char *))off_1E42F3138[a30])(&a17, &a25);
  _Unwind_Resume(a1);
}

void md::InteractiveMapEngineCommandExecutor::nextCommand(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  id v7;
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  std::mutex *v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int8x8_t v21;
  uint8x8_t v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  std::mutex *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  std::mutex *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  id v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  unint64_t *v55;
  unint64_t v56;
  NSObject *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD v72[6];
  std::__shared_weak_count *v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  _BYTE *v78;
  char v79;
  _QWORD v80[5];
  const char *v81;
  uint64_t v82;
  char v83;
  int v84;
  uint64_t v85;
  _BYTE v86[40];
  int v87;
  uint64_t v88;
  _BYTE v89[40];
  unsigned int v90;
  uint64_t v91;
  std::mutex *v92;
  std::__shared_weak_count *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  char v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = *(std::mutex **)a4;
  std::mutex::lock(*(std::mutex **)a4);
  v9 = *(_QWORD *)&v8[1].__m_.__opaque[40];
  if (!v9)
  {
    std::mutex::unlock(v8);
    goto LABEL_156;
  }
  *(_QWORD *)&v8[1].__m_.__opaque[40] = v9 - 1;
  std::mutex::unlock(v8);
  v87 = 0;
  v88 = 0;
  v10 = *a3;
  LOBYTE(v80[0]) = 0;
  v83 = 0;
  std::mutex::lock((std::mutex *)(v10 + 8));
  if (*(_BYTE *)v10)
  {
    LOBYTE(v92) = 0;
    v99 = 0;
    v11 = *(std::mutex **)a4;
    std::mutex::lock(*(std::mutex **)a4);
    ++*(_QWORD *)&v11[1].__m_.__opaque[40];
    std::condition_variable::notify_one((std::condition_variable *)&v11[1]);
    std::mutex::unlock(v11);
    if (v99)
    {
      if ((_DWORD)v97 != -1)
        ((void (*)(_BYTE *, std::mutex **))off_1E42F3138[v97])(v89, &v92);
      v12 = 0;
      LODWORD(v97) = -1;
    }
    else
    {
      v12 = 0;
    }
    goto LABEL_113;
  }
  v90 = 0;
  v91 = 0;
  v13 = *(_QWORD *)(v10 + 136);
  v12 = v13 != 0;
  if (!v13)
  {
    LOBYTE(v92) = 0;
    v99 = 0;
    v43 = *(std::mutex **)a4;
    std::mutex::lock(*(std::mutex **)a4);
    ++*(_QWORD *)&v43[1].__m_.__opaque[40];
    std::condition_variable::notify_one((std::condition_variable *)&v43[1]);
    std::mutex::unlock(v43);
    if (v99)
      goto LABEL_108;
    goto LABEL_111;
  }
  v14 = *(_QWORD *)(v10 + 128);
  v15 = *(unsigned int *)(v14 + 56);
  if ((_DWORD)v15 == -1)
  {
    v90 = -1;
    v16 = v13;
    v17 = (_DWORD *)v14;
  }
  else
  {
    v92 = (std::mutex *)v89;
    ((void (*)(std::mutex **, _BYTE *, uint64_t))off_1E42EFCF8[v15])(&v92, v89, v14 + 16);
    v17 = *(_DWORD **)(v10 + 128);
    v16 = *(_QWORD *)(v10 + 136);
    LODWORD(v15) = v17[14];
  }
  v91 = *(_QWORD *)(v14 + 64);
  v18 = *(_QWORD *)v17;
  *(_QWORD *)(v18 + 8) = *((_QWORD *)v17 + 1);
  **((_QWORD **)v17 + 1) = v18;
  *(_QWORD *)(v10 + 136) = v16 - 1;
  if ((_DWORD)v15 != -1)
    ((void (*)(std::mutex **, _DWORD *))off_1E42F3138[v15])(&v92, v17 + 4);
  operator delete(v17);
  v19 = v90;
  if (v90 == -1)
    v20 = -1;
  else
    v20 = v90;
  v21 = *(int8x8_t *)(v10 + 152);
  if (!*(_QWORD *)&v21)
    goto LABEL_80;
  v22 = (uint8x8_t)vcnt_s8(v21);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    v23 = v90;
    if (v20 >= *(_QWORD *)&v21)
      v23 = v20 % *(_QWORD *)&v21;
  }
  else
  {
    v23 = (*(_QWORD *)&v21 - 1) & v20;
  }
  v24 = *(_QWORD *)(v10 + 144);
  v25 = *(void ***)(v24 + 8 * v23);
  if (!v25)
    goto LABEL_80;
  v26 = *v25;
  if (!*v25)
    goto LABEL_80;
  v27 = *(_QWORD *)&v21 - 1;
  if (v22.u32[0] < 2uLL)
  {
    while (1)
    {
      v31 = v26[1];
      if (v31 == v20)
      {
        v28 = v90 == -1;
        v29 = *((_DWORD *)v26 + 14);
        v30 = v90 == v29 && v90 != -1;
        if (v29 != -1)
          v28 = v30;
        if (v28)
          goto LABEL_50;
      }
      else if ((v31 & v27) != v23)
      {
        goto LABEL_79;
      }
      v26 = (_QWORD *)*v26;
      if (!v26)
        goto LABEL_79;
    }
  }
  while (1)
  {
    v34 = v26[1];
    if (v34 == v20)
      break;
    if (v34 >= *(_QWORD *)&v21)
      v34 %= *(_QWORD *)&v21;
    if (v34 != v23)
      goto LABEL_79;
LABEL_44:
    v26 = (_QWORD *)*v26;
    if (!v26)
      goto LABEL_79;
  }
  v32 = v90 == -1;
  v29 = *((_DWORD *)v26 + 14);
  v33 = v90 == v29 && v90 != -1;
  if (v29 != -1)
    v32 = v33;
  if (!v32)
    goto LABEL_44;
LABEL_50:
  if (v22.u32[0] > 1uLL)
  {
    if (v20 >= *(_QWORD *)&v21)
      v20 %= *(_QWORD *)&v21;
  }
  else
  {
    v20 &= v27;
  }
  v35 = *(_QWORD **)(v24 + 8 * v20);
  do
  {
    v36 = v35;
    v35 = (_QWORD *)*v35;
  }
  while (v35 != v26);
  if (v36 == (_QWORD *)(v10 + 160))
    goto LABEL_67;
  v37 = v36[1];
  if (v22.u32[0] > 1uLL)
  {
    if (v37 >= *(_QWORD *)&v21)
      v37 %= *(_QWORD *)&v21;
  }
  else
  {
    v37 &= v27;
  }
  if (v37 != v20)
  {
LABEL_67:
    if (!*v26)
      goto LABEL_68;
    v38 = *(_QWORD *)(*v26 + 8);
    if (v22.u32[0] > 1uLL)
    {
      if (v38 >= *(_QWORD *)&v21)
        v38 %= *(_QWORD *)&v21;
    }
    else
    {
      v38 &= v27;
    }
    if (v38 != v20)
LABEL_68:
      *(_QWORD *)(v24 + 8 * v20) = 0;
  }
  v39 = *v26;
  if (*v26)
  {
    v40 = *(_QWORD *)(v39 + 8);
    if (v22.u32[0] > 1uLL)
    {
      if (v40 >= *(_QWORD *)&v21)
        v40 %= *(_QWORD *)&v21;
    }
    else
    {
      v40 &= v27;
    }
    if (v40 != v20)
    {
      *(_QWORD *)(*(_QWORD *)(v10 + 144) + 8 * v40) = v36;
      v39 = *v26;
    }
  }
  *v36 = v39;
  *v26 = 0;
  --*(_QWORD *)(v10 + 168);
  if (v29 != -1)
    ((void (*)(std::mutex **, _QWORD *))off_1E42F3138[v29])(&v92, v26 + 2);
  operator delete(v26);
LABEL_79:
  v19 = v90;
LABEL_80:
  LOBYTE(v92) = 0;
  LODWORD(v97) = -1;
  if (v19 == -1)
  {
    v19 = -1;
  }
  else
  {
    ((void (*)(char *, std::mutex **, _BYTE *))off_1E42EFCB8[v19])(&v79, &v92, v89);
    LODWORD(v97) = v19;
  }
  v41 = v91;
  v98 = v91;
  v99 = 1;
  if (v83)
  {
    if ((_DWORD)v81 == -1)
    {
      if (v19 != -1)
        goto LABEL_92;
    }
    else
    {
      if (v19 == -1)
      {
        ((void (*)(_BYTE **, _QWORD *))off_1E42F3138[v81])(&v78, v80);
        LODWORD(v81) = -1;
        goto LABEL_93;
      }
LABEL_92:
      v78 = v80;
      ((void (*)(_BYTE **, _QWORD *, std::mutex **))off_1E42EFCD8[v19])(&v78, v80, &v92);
    }
LABEL_93:
    v82 = v98;
    if (v99)
    {
LABEL_94:
      if ((_DWORD)v97 != -1)
        ((void (*)(_BYTE **, std::mutex **))off_1E42F3138[v97])(&v78, &v92);
    }
  }
  else
  {
    LOBYTE(v80[0]) = 0;
    LODWORD(v81) = -1;
    if (v19 != -1)
    {
      ((void (*)(char *, _QWORD *, std::mutex **))off_1E42EFCB8[v19])(&v79, v80, &v92);
      LODWORD(v81) = v19;
      v41 = v98;
    }
    v82 = v41;
    v83 = 1;
    if (v99)
      goto LABEL_94;
  }
  LOBYTE(v92) = 0;
  v99 = 0;
  if (v83)
  {
    LODWORD(v97) = -1;
    v42 = (int)v81;
    if ((_DWORD)v81 != -1)
    {
      ((void (*)(char *, std::mutex **, _QWORD *))off_1E42EFCB8[v81])(&v79, &v92, v80);
      LODWORD(v97) = v42;
    }
    v98 = v82;
    v99 = 1;
    if (v87 == -1)
    {
      if ((_DWORD)v97 != -1)
        goto LABEL_106;
    }
    else
    {
      if ((_DWORD)v97 == -1)
      {
        ((void (*)(_BYTE **, _BYTE *))off_1E42F3138[v87])(&v78, v86);
        v87 = -1;
        goto LABEL_107;
      }
LABEL_106:
      v78 = v86;
      ((void (*)(_BYTE **, _BYTE *, std::mutex **))off_1E42EFCD8[v97])(&v78, v86, &v92);
    }
LABEL_107:
    v88 = v98;
    if (v99)
    {
LABEL_108:
      if ((_DWORD)v97 != -1)
        ((void (*)(_BYTE **, std::mutex **))off_1E42F3138[v97])(&v78, &v92);
      LODWORD(v97) = -1;
    }
LABEL_111:
    if (v90 != -1)
      ((void (*)(_BYTE **, _BYTE *))off_1E42F3138[v90])(&v78, v89);
LABEL_113:
    std::mutex::unlock((std::mutex *)(v10 + 8));
    if (v83 && (_DWORD)v81 != -1)
      ((void (*)(_BYTE *, _QWORD *))off_1E42F3138[v81])(v89, v80);
    if (v12)
    {
      do
        v44 = __ldaxr(&nextCommandExecutionIdentifier(void)::key);
      while (__stlxr(v44 + 1, &nextCommandExecutionIdentifier(void)::key));
      v46 = *(std::mutex **)a4;
      v45 = *(std::__shared_weak_count **)(a4 + 8);
      v92 = *(std::mutex **)a4;
      v93 = v45;
      if (v45)
      {
        p_shared_owners = (unint64_t *)&v45->__shared_owners_;
        do
          v48 = __ldxr(p_shared_owners);
        while (__stxr(v48 + 1, p_shared_owners));
      }
      v49 = v7;
      v94 = v49;
      v95 = a2;
      v51 = *a3;
      v50 = (std::__shared_weak_count *)a3[1];
      v96 = v51;
      v97 = v50;
      if (v50)
      {
        v52 = (unint64_t *)&v50->__shared_owners_;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      v80[0] = 0;
      v80[1] = v80;
      v80[2] = 0x6812000000;
      v80[3] = __Block_byref_object_copy__10283;
      v80[4] = __Block_byref_object_dispose__10284;
      v81 = "";
      LOBYTE(v82) = 0;
      v84 = -1;
      v54 = v87;
      if (v87 != -1)
      {
        ((void (*)(char *, uint64_t *, _BYTE *))off_1E42EFC98[v87])(&v79, &v82, v86);
        v84 = v54;
      }
      v85 = v88;
      v72[0] = MEMORY[0x1E0C809B0];
      v72[1] = 3321888768;
      v72[2] = ___ZN2md35InteractiveMapEngineCommandExecutor11nextCommandEPU28objcproto17OS_dispatch_queue8NSObjectPKvRKNSt3__110shared_ptrIN3geo21concurrent_queue_baseINS_24RunnableMapEngineCommandENS8_19UniqueStoragePolicyISA_NS8_23ReplaceDuplicatesPolicyISA_EENS_20MapEngineCommandHashENS_21MapEngineCommandEqualEEEEEEERKNS7_INS8_9SemaphoreEEE_block_invoke;
      v72[3] = &unk_1E42E9F18;
      v72[4] = v80;
      v72[5] = v46;
      v73 = v45;
      if (v45)
      {
        v55 = (unint64_t *)&v45->__shared_owners_;
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      v57 = v49;
      v74 = v57;
      v75 = a2;
      v76 = v51;
      v77 = v50;
      if (v50)
      {
        v58 = (unint64_t *)&v50->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      dispatch_async(v57, v72);
      v60 = v77;
      if (v77)
      {
        v61 = (unint64_t *)&v77->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }

      v63 = v73;
      if (v73)
      {
        v64 = (unint64_t *)&v73->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      _Block_object_dispose(v80, 8);
      if (v84 != -1)
        ((void (*)(_BYTE *, uint64_t *))off_1E42F3138[v84])(v89, &v82);
      v66 = v97;
      if (v97)
      {
        v67 = (unint64_t *)&v97->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }

      v69 = v93;
      if (v93)
      {
        v70 = (unint64_t *)&v93->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
    }
    if (v87 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E42F3138[v87])(v80, v86);
LABEL_156:

  }
  else
  {
    std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
  }
}

void sub_19F8C12CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40)
{
  if (a27 != -1)
  {
    ((void (*)(char *, char *))off_1E42F3138[a27])(&a20, &a22);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__10283(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[2];

  v3 = result;
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 88) = -1;
  v4 = *(unsigned int *)(a2 + 88);
  if ((_DWORD)v4 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E42EFCB8[v4])(v5, result + 48, a2 + 48);
    *(_DWORD *)(v3 + 88) = v4;
  }
  *(_QWORD *)(v3 + 96) = *(_QWORD *)(a2 + 96);
  return result;
}

void sub_19F8C1538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 88);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E42F3138[v16])(&a13, v14);
  *(_DWORD *)(v13 + 88) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_dispose__10284(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E42F3138[v2])(&v3, result + 48);
  *(_DWORD *)(v1 + 88) = -1;
  return result;
}

uint64_t md::InteractiveMapEngineCommandExecutor::nextCommand(NSObject  {objcproto17OS_dispatch_queue}*,void const*,std::shared_ptr<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>> const&,std::shared_ptr<geo::Semaphore> const&)::$_1::~$_1(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void ___ZN2md35InteractiveMapEngineCommandExecutor11nextCommandEPU28objcproto17OS_dispatch_queue8NSObjectPKvRKNSt3__110shared_ptrIN3geo21concurrent_queue_baseINS_24RunnableMapEngineCommandENS8_19UniqueStoragePolicyISA_NS8_23ReplaceDuplicatesPolicyISA_EENS_20MapEngineCommandHashENS_21MapEngineCommandEqualEEEEEEERKNS7_INS8_9SemaphoreEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t *v35;
  _BYTE v36[24];
  _BYTE *v37;
  uint64_t v38;
  _BYTE v39[24];
  _BYTE *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  v34 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(id *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(std::__shared_weak_count **)(a1 + 80);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v37 = 0;
  v13 = operator new(0x38uLL);
  v14 = v13;
  *v13 = &off_1E42D3EB0;
  v13[1] = v2;
  v13[2] = v4;
  if (v4)
  {
    v15 = (unint64_t *)&v4->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v13[3] = v7;
  v13[4] = v8;
  v13[5] = v9;
  v13[6] = v10;
  if (v10)
  {
    v17 = (unint64_t *)&v10->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v37 = v13;
  v38 = v3 + 48;
  v19 = operator new(0x38uLL);
  *v19 = &off_1E42D3EB0;
  v19[1] = v2;
  v19[2] = v4;
  if (v4)
  {
    v20 = (unint64_t *)&v4->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = v39;
  v19[3] = v7;
  *((_OWORD *)v19 + 2) = *((_OWORD *)v14 + 2);
  v23 = v14[6];
  v19[6] = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v40 = v19;
  v26 = *(unsigned int *)(v3 + 88);
  if ((_DWORD)v26 == -1)
  {
    std::__throw_bad_variant_access[abi:nn180100]();
    __break(1u);
  }
  v35 = &v38;
  ((void (*)(uint64_t **, uint64_t))off_1E42EFC78[v26])(&v35, v3 + 48);
  if (v40 == v39)
  {
    v27 = 4;
  }
  else
  {
    if (!v40)
      goto LABEL_25;
    v27 = 5;
    v22 = v40;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v27))(v22);
LABEL_25:
  v28 = v37;
  if (v37 == v36)
  {
    v29 = 4;
    v28 = v36;
    goto LABEL_29;
  }
  if (v37)
  {
    v29 = 5;
LABEL_29:
    (*(void (**)(void))(*v28 + 8 * v29))();
  }
  if (v10)
  {
    v30 = (unint64_t *)&v10->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (v34)
  {
    v32 = (unint64_t *)&v34->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_19F8C18FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  md::InteractiveMapEngineCommandExecutor::nextCommand(NSObject  {objcproto17OS_dispatch_queue}*,void const*,std::shared_ptr<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>> const&,std::shared_ptr<geo::Semaphore> const&)::$_1::~$_1((uint64_t)va);
  _Unwind_Resume(a1);
}

id __copy_helper_block_ea8_40c337_ZTSZN2md35InteractiveMapEngineCommandExecutor11nextCommandEPU28objcproto17OS_dispatch_queue8NSObjectPKvRKNSt3__110shared_ptrIN3geo21concurrent_queue_baseINS_24RunnableMapEngineCommandENS8_19UniqueStoragePolicyISA_NS8_23ReplaceDuplicatesPolicyISA_EENS_20MapEngineCommandHashENS_21MapEngineCommandEqualEEEEEEERKNS7_INS8_9SemaphoreEEEE3__1(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  id result;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(id *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = result;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

void __destroy_helper_block_ea8_40c337_ZTSZN2md35InteractiveMapEngineCommandExecutor11nextCommandEPU28objcproto17OS_dispatch_queue8NSObjectPKvRKNSt3__110shared_ptrIN3geo21concurrent_queue_baseINS_24RunnableMapEngineCommandENS8_19UniqueStoragePolicyISA_NS8_23ReplaceDuplicatesPolicyISA_EENS_20MapEngineCommandHashENS_21MapEngineCommandEqualEEEEEEERKNS7_INS8_9SemaphoreEEEE3__1(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<md::RunnableMapEngineCommand::operator()(std::function<void ()(void)>)::$_0 &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::DisplayLinkFired,md::DestroyMapEngine,md::RenderScene,md::RenderSceneInContext> &>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v2 = *(_QWORD *)(*(_QWORD *)*a1 + 48);
  v3 = *(_QWORD *)(*a1 + 32);
  if (v3)
  {
    if (v3 == v1 + 8)
    {
      v11 = v10;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v3, v10);
    }
    else
    {
      v11 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    v11 = 0;
  }
  v4 = CACurrentMediaTime();
  v5 = (uint64_t)v11;
  if (!v11)
    goto LABEL_9;
  if (v11 != v10)
  {
    v5 = (*(uint64_t (**)(void))(*v11 + 16))();
LABEL_9:
    v13 = (_QWORD *)v5;
    goto LABEL_11;
  }
  v13 = v12;
  (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, v12);
LABEL_11:
  md::MapEngine::onRenderTimerFired(v2, v12, v4);
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_19F8C1BF8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F8C1C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
  _Unwind_Resume(exception_object);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<md::RunnableMapEngineCommand::operator()(std::function<void ()(void)>)::$_0 &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::DisplayLinkFired,md::DestroyMapEngine,md::RenderScene,md::RenderSceneInContext> &>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  unsigned __int8 v5;
  int8x8_t *v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint8_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint8_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int8x8_t *v37;
  int8x8_t v38;
  uint8x8_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  int8x8_t *v65;
  int8x8_t v66;
  uint8x8_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint8_t *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int8x8_t *v86;
  int8x8_t v87;
  uint8x8_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t **i;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  md::World *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  NSObject *v109;
  uint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  md::LayoutContext *v133;
  md::LayoutContext *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  void *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  md::World *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  _QWORD *result;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint8_t v173[16];
  _BYTE v174[24];
  _BYTE *v175;
  _QWORD v176[3];
  _QWORD *v177;
  _QWORD v178[3];
  _QWORD *v179;
  _BYTE v180[24];
  _BYTE *v181;
  _BYTE v182[24];
  _BYTE *v183;
  _QWORD v184[3];
  _QWORD *v185;
  _BYTE v186[24];
  _BYTE *v187;
  _QWORD v188[3];
  _QWORD *v189;
  _QWORD v190[3];
  _QWORD *v191;
  _QWORD v192[3];
  _QWORD *v193;
  _BYTE v194[24];
  _BYTE *v195;
  _BYTE v196[24];
  _BYTE *v197;
  _BYTE v198[24];
  _BYTE *v199;
  _QWORD v200[3];
  _QWORD *v201;
  _QWORD v202[3];
  _QWORD *v203;
  uint8_t buf[4];
  uint64_t v205;
  __int16 v206;
  int v207;
  uint8_t *v208;
  uint64_t v209;

  v209 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v2 = *(_QWORD *)(*(_QWORD *)*a1 + 48);
  v3 = *(_QWORD *)(*a1 + 32);
  if (v3)
  {
    if (v3 == v1 + 8)
    {
      v175 = v174;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 24))(v3, v174);
    }
    else
    {
      v175 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    v175 = 0;
  }
  if (!v2)
    goto LABEL_342;
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v4 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = atomic_load((unsigned __int8 *)(v2 + 1));
    *(_DWORD *)buf = 134218240;
    v205 = v2;
    v206 = 1024;
    v207 = v5 & 1;
    _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_INFO, "Destroy MapEngine:%p wasQueued:%d", buf, 0x12u);
  }

  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 4504) + 48))(*(_QWORD *)(v2 + 4504));
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 4336) + 48))(*(_QWORD *)(v2 + 4336));
  md::MapEngine::logLayoutReasonsHistory((md::MapEngine *)v2, 0);
  GEOConfigRemoveBlockListener();
  GEOConfigRemoveBlockListener();
  GEOConfigRemoveBlockListener();
  GEOConfigRemoveBlockListener();
  GEOConfigRemoveBlockListener();
  v6 = *(int8x8_t **)(v2 + 1120);
  v7 = v6[2];
  if (!*(_QWORD *)&v7)
    goto LABEL_78;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = 0x20A1ED17D78F322BLL;
    if (*(_QWORD *)&v7 <= 0x20A1ED17D78F322BuLL)
      v9 = 0x20A1ED17D78F322BuLL % *(_QWORD *)&v7;
  }
  else
  {
    v9 = (*(_QWORD *)&v7 - 1) & 0x20A1ED17D78F322BLL;
  }
  v10 = *(_QWORD **)(*(_QWORD *)&v6[1] + 8 * v9);
  if (!v10)
    goto LABEL_78;
  v11 = (_QWORD *)*v10;
  if (!v11)
    goto LABEL_78;
  if (v8.u32[0] < 2uLL)
  {
    v12 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v14 = v11[1];
      if (v14 == 0x20A1ED17D78F322BLL)
      {
        if (v11[2] == 0x20A1ED17D78F322BLL)
          goto LABEL_32;
      }
      else if ((v14 & v12) != v9)
      {
        goto LABEL_78;
      }
      v11 = (_QWORD *)*v11;
      if (!v11)
        goto LABEL_78;
    }
  }
  while (1)
  {
    v13 = v11[1];
    if (v13 == 0x20A1ED17D78F322BLL)
      break;
    if (v13 >= *(_QWORD *)&v7)
      v13 %= *(_QWORD *)&v7;
    if (v13 != v9)
      goto LABEL_78;
LABEL_21:
    v11 = (_QWORD *)*v11;
    if (!v11)
      goto LABEL_78;
  }
  if (v11[2] != 0x20A1ED17D78F322BLL)
    goto LABEL_21;
LABEL_32:
  v15 = v11[5];
  if (v15)
  {
    v203 = 0;
    md::LabelsLogic::setNeedsDisplayCallback(*(_QWORD **)(*(_QWORD *)(v15 + 152) + 88), v202);
    v16 = v203;
    if (v203 == v202)
    {
      v17 = 4;
      v16 = v202;
LABEL_37:
      (*(void (**)(void))(*v16 + 8 * v17))();
    }
    else if (v203)
    {
      v17 = 5;
      goto LABEL_37;
    }
    v201 = 0;
    md::LabelsLogic::setNeedsLayoutCallback(v15, v200);
    v18 = v201;
    if (v201 == v200)
    {
      v19 = 4;
      v18 = v200;
LABEL_42:
      (*(void (**)(void))(*v18 + 8 * v19))();
    }
    else if (v201)
    {
      v19 = 5;
      goto LABEL_42;
    }
    v199 = 0;
    v20 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 152) + 88) + 96);
    v208 = 0;
    std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](buf, v20);
    v21 = v208;
    if (v208 == buf)
    {
      v22 = 4;
      v21 = buf;
LABEL_47:
      (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
    }
    else if (v208)
    {
      v22 = 5;
      goto LABEL_47;
    }
    v23 = v199;
    if (v199 == v198)
    {
      v24 = 4;
      v23 = v198;
LABEL_52:
      (*(void (**)(void))(*v23 + 8 * v24))();
    }
    else if (v199)
    {
      v24 = 5;
      goto LABEL_52;
    }
    v197 = 0;
    v25 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 152) + 88) + 128);
    v208 = 0;
    std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](buf, v25);
    v26 = v208;
    if (v208 == buf)
    {
      v27 = 4;
      v26 = buf;
LABEL_57:
      (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
    }
    else if (v208)
    {
      v27 = 5;
      goto LABEL_57;
    }
    v28 = v197;
    if (v197 == v196)
    {
      v29 = 4;
      v28 = v196;
LABEL_62:
      (*(void (**)(void))(*v28 + 8 * v29))();
    }
    else if (v197)
    {
      v29 = 5;
      goto LABEL_62;
    }
    v195 = 0;
    v30 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 152) + 88) + 160);
    v208 = 0;
    std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](buf, v30);
    v31 = v208;
    if (v208 == buf)
    {
      v32 = 4;
      v31 = buf;
LABEL_67:
      (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
    }
    else if (v208)
    {
      v32 = 5;
      goto LABEL_67;
    }
    v33 = v195;
    if (v195 == v194)
    {
      v34 = 4;
      v33 = v194;
LABEL_72:
      (*(void (**)(void))(*v33 + 8 * v34))();
    }
    else if (v195)
    {
      v34 = 5;
      goto LABEL_72;
    }
    v193 = 0;
    md::LabelsLogic::setDidLayoutCallback(v15, v192);
    v35 = v193;
    if (v193 == v192)
    {
      v36 = 4;
      v35 = v192;
LABEL_77:
      (*(void (**)(void))(*v35 + 8 * v36))();
    }
    else if (v193)
    {
      v36 = 5;
      goto LABEL_77;
    }
  }
LABEL_78:
  v37 = *(int8x8_t **)(v2 + 1120);
  v38 = v37[2];
  if (!*(_QWORD *)&v38)
    goto LABEL_145;
  v39 = (uint8x8_t)vcnt_s8(v38);
  v39.i16[0] = vaddlv_u8(v39);
  if (v39.u32[0] > 1uLL)
  {
    v40 = 0xEC9B77B4222D22FFLL;
    if (*(_QWORD *)&v38 <= 0xEC9B77B4222D22FFLL)
      v40 = 0xEC9B77B4222D22FFLL % *(_QWORD *)&v38;
  }
  else
  {
    v40 = (*(_QWORD *)&v38 - 1) & 0xEC9B77B4222D22FFLL;
  }
  v41 = *(_QWORD **)(*(_QWORD *)&v37[1] + 8 * v40);
  if (!v41)
    goto LABEL_145;
  v42 = (_QWORD *)*v41;
  if (!v42)
    goto LABEL_145;
  if (v39.u32[0] < 2uLL)
  {
    v43 = *(_QWORD *)&v38 - 1;
    while (1)
    {
      v45 = v42[1];
      if (v45 == 0xEC9B77B4222D22FFLL)
      {
        if (v42[2] == 0xEC9B77B4222D22FFLL)
          goto LABEL_99;
      }
      else if ((v45 & v43) != v40)
      {
        goto LABEL_145;
      }
      v42 = (_QWORD *)*v42;
      if (!v42)
        goto LABEL_145;
    }
  }
  while (2)
  {
    v44 = v42[1];
    if (v44 != 0xEC9B77B4222D22FFLL)
    {
      if (v44 >= *(_QWORD *)&v38)
        v44 %= *(_QWORD *)&v38;
      if (v44 != v40)
        goto LABEL_145;
      goto LABEL_88;
    }
    if (v42[2] != 0xEC9B77B4222D22FFLL)
    {
LABEL_88:
      v42 = (_QWORD *)*v42;
      if (!v42)
        goto LABEL_145;
      continue;
    }
    break;
  }
LABEL_99:
  v46 = (_QWORD *)v42[5];
  if (v46)
  {
    v191 = 0;
    md::VenueLogic::setNearestVenueDidChangeCallback((uint64_t)v46, v190);
    v47 = v191;
    if (v191 == v190)
    {
      v48 = 4;
      v47 = v190;
LABEL_104:
      (*(void (**)(void))(*v47 + 8 * v48))();
    }
    else if (v191)
    {
      v48 = 5;
      goto LABEL_104;
    }
    v189 = 0;
    md::VenueLogic::setFocusedVenueDidChangeCallback((uint64_t)v46, v188);
    v49 = v189;
    if (v189 == v188)
    {
      v50 = 4;
      v49 = v188;
LABEL_109:
      (*(void (**)(void))(*v49 + 8 * v50))();
    }
    else if (v189)
    {
      v50 = 5;
      goto LABEL_109;
    }
    v187 = 0;
    v208 = 0;
    std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](buf, v46 + 95);
    v51 = v208;
    if (v208 == buf)
    {
      v52 = 4;
      v51 = buf;
LABEL_114:
      (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
    }
    else if (v208)
    {
      v52 = 5;
      goto LABEL_114;
    }
    v53 = v187;
    if (v187 == v186)
    {
      v54 = 4;
      v53 = v186;
LABEL_119:
      (*(void (**)(void))(*v53 + 8 * v54))();
    }
    else if (v187)
    {
      v54 = 5;
      goto LABEL_119;
    }
    v185 = 0;
    md::VenueLogic::setRunAnimationCallback((uint64_t)v46, v184);
    v55 = v185;
    if (v185 == v184)
    {
      v56 = 4;
      v55 = v184;
LABEL_124:
      (*(void (**)(void))(*v55 + 8 * v56))();
    }
    else if (v185)
    {
      v56 = 5;
      goto LABEL_124;
    }
    v183 = 0;
    v208 = 0;
    std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](buf, v46 + 103);
    v57 = v208;
    if (v208 == buf)
    {
      v58 = 4;
      v57 = buf;
LABEL_129:
      (*(void (**)(void))(*(_QWORD *)v57 + 8 * v58))();
    }
    else if (v208)
    {
      v58 = 5;
      goto LABEL_129;
    }
    v59 = v183;
    if (v183 == v182)
    {
      v60 = 4;
      v59 = v182;
LABEL_134:
      (*(void (**)(void))(*v59 + 8 * v60))();
    }
    else if (v183)
    {
      v60 = 5;
      goto LABEL_134;
    }
    v181 = 0;
    v208 = 0;
    std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](buf, v46 + 107);
    v61 = v208;
    if (v208 == buf)
    {
      v62 = 4;
      v61 = buf;
LABEL_139:
      (*(void (**)(void))(*(_QWORD *)v61 + 8 * v62))();
    }
    else if (v208)
    {
      v62 = 5;
      goto LABEL_139;
    }
    v63 = v181;
    if (v181 == v180)
    {
      v64 = 4;
      v63 = v180;
LABEL_144:
      (*(void (**)(void))(*v63 + 8 * v64))();
    }
    else if (v181)
    {
      v64 = 5;
      goto LABEL_144;
    }
  }
LABEL_145:
  v65 = *(int8x8_t **)(v2 + 1120);
  v66 = v65[2];
  if (!*(_QWORD *)&v66)
    goto LABEL_177;
  v67 = (uint8x8_t)vcnt_s8(v66);
  v67.i16[0] = vaddlv_u8(v67);
  if (v67.u32[0] > 1uLL)
  {
    v68 = 0xC74495586E0C32F6;
    if (*(_QWORD *)&v66 <= 0xC74495586E0C32F6)
      v68 = 0xC74495586E0C32F6 % *(_QWORD *)&v66;
  }
  else
  {
    v68 = (*(_QWORD *)&v66 - 1) & 0xC74495586E0C32F6;
  }
  v69 = *(_QWORD **)(*(_QWORD *)&v65[1] + 8 * v68);
  if (!v69)
    goto LABEL_177;
  v70 = (_QWORD *)*v69;
  if (!v70)
    goto LABEL_177;
  if (v67.u32[0] < 2uLL)
  {
    v71 = *(_QWORD *)&v66 - 1;
    while (1)
    {
      v73 = v70[1];
      if (v73 == 0xC74495586E0C32F6)
      {
        if (v70[2] == 0xC74495586E0C32F6)
          goto LABEL_166;
      }
      else if ((v73 & v71) != v68)
      {
        goto LABEL_177;
      }
      v70 = (_QWORD *)*v70;
      if (!v70)
        goto LABEL_177;
    }
  }
  while (2)
  {
    v72 = v70[1];
    if (v72 != 0xC74495586E0C32F6)
    {
      if (v72 >= *(_QWORD *)&v66)
        v72 %= *(_QWORD *)&v66;
      if (v72 != v68)
        goto LABEL_177;
      goto LABEL_155;
    }
    if (v70[2] != 0xC74495586E0C32F6)
    {
LABEL_155:
      v70 = (_QWORD *)*v70;
      if (!v70)
        goto LABEL_177;
      continue;
    }
    break;
  }
LABEL_166:
  v74 = v70[5];
  if (v74)
  {
    v208 = 0;
    md::HikingLogic::setCallbackForToolTipRegionLocationIntersectionRequest(v74, buf);
    v75 = v208;
    if (v208 == buf)
    {
      v76 = 4;
      v75 = buf;
LABEL_171:
      (*(void (**)(void))(*(_QWORD *)v75 + 8 * v76))();
    }
    else if (v208)
    {
      v76 = 5;
      goto LABEL_171;
    }
    v179 = 0;
    md::HikingLogic::setCallbackForContextualRegionLocationIntersectionRequest(v74, v178);
    v77 = v179;
    if (v179 == v178)
    {
      v78 = 4;
      v77 = v178;
LABEL_176:
      (*(void (**)(void))(*v77 + 8 * v78))();
    }
    else if (v179)
    {
      v78 = 5;
      goto LABEL_176;
    }
  }
LABEL_177:
  **(_QWORD **)(v2 + 120) = 0;
  v79 = *(_QWORD *)(v2 + 88);
  if (v79)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 32))(v79);
    v80 = *(std::__shared_weak_count **)(v2 + 72);
    *(_QWORD *)(v2 + 64) = 0;
    *(_QWORD *)(v2 + 72) = 0;
    if (v80)
    {
      p_shared_owners = (unint64_t *)&v80->__shared_owners_;
      do
        v82 = __ldaxr(p_shared_owners);
      while (__stlxr(v82 - 1, p_shared_owners));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    v83 = *(_QWORD *)(v2 + 80);
    *(_QWORD *)(v2 + 80) = 0;
    if (v83)
      (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  }
  **(_QWORD **)(v2 + 112) = 0;
  objc_storeWeak((id *)(v2 + 848), 0);
  md::AnimationManager::stopAllAnimations(*(md::AnimationManager **)(v2 + 104));
  v84 = *(_QWORD *)(v2 + 1048);
  *(_QWORD *)(v2 + 1048) = 0;
  if (v84)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  v85 = *(_QWORD *)(v2 + 856);
  *(_QWORD *)(v2 + 856) = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = *(int8x8_t **)(v2 + 1120);
  v87 = v86[2];
  if (v87)
  {
    v88 = (uint8x8_t)vcnt_s8(v87);
    v88.i16[0] = vaddlv_u8(v88);
    if (v88.u32[0] > 1uLL)
    {
      v89 = 0x79FE0BD9535D5C4DLL;
      if (*(_QWORD *)&v87 <= 0x79FE0BD9535D5C4DuLL)
        v89 = 0x79FE0BD9535D5C4DuLL % *(_QWORD *)&v87;
    }
    else
    {
      v89 = (*(_QWORD *)&v87 - 1) & 0x79FE0BD9535D5C4DLL;
    }
    v90 = *(_QWORD **)(*(_QWORD *)&v86[1] + 8 * v89);
    if (v90)
    {
      v91 = (_QWORD *)*v90;
      if (v91)
      {
        if (v88.u32[0] < 2uLL)
        {
          v92 = *(_QWORD *)&v87 - 1;
          while (1)
          {
            v94 = v91[1];
            if (v94 == 0x79FE0BD9535D5C4DLL)
            {
              if (v91[2] == 0x79FE0BD9535D5C4DLL)
                goto LABEL_210;
            }
            else if ((v94 & v92) != v89)
            {
              goto LABEL_215;
            }
            v91 = (_QWORD *)*v91;
            if (!v91)
              goto LABEL_215;
          }
        }
        do
        {
          v93 = v91[1];
          if (v93 == 0x79FE0BD9535D5C4DLL)
          {
            if (v91[2] == 0x79FE0BD9535D5C4DLL)
            {
LABEL_210:
              v95 = v91[5];
              if (v95)
              {
                *(_QWORD *)(v95 + 144) = 0;
                v96 = *(_QWORD *)(v95 + 128);
                if (v96)
                {
                  if (*(_QWORD *)(v96 + 16))
                  {
                    *(_QWORD *)(v96 + 16) = 0;
                    for (i = *(uint64_t ***)(v96 + 48); i; i = (uint64_t **)*i)
                      (*(void (**)(uint64_t *))(*i[2] + 104))(i[2]);
                  }
                }
              }
              break;
            }
          }
          else
          {
            if (v93 >= *(_QWORD *)&v87)
              v93 %= *(_QWORD *)&v87;
            if (v93 != v89)
              break;
          }
          v91 = (_QWORD *)*v91;
        }
        while (v91);
      }
    }
  }
LABEL_215:
  v98 = *(_QWORD *)(v2 + 864);
  *(_QWORD *)(v2 + 864) = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  v99 = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(v2 + 112) = 0;
  if (v99)
    MEMORY[0x1A1AF4E00](v99, 0x20C4093837F09);
  v100 = *(_QWORD *)(v2 + 1120);
  *(_QWORD *)(v2 + 1120) = 0;
  if (v100)
    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
  v101 = *(_QWORD *)(*(_QWORD *)(v2 + 896) + 272);
  v176[0] = &off_1E42D5338;
  v177 = v176;
  md::OverlayContainer::visitOverlays(v101, (uint64_t)v176);
  v102 = v177;
  if (v177 == v176)
  {
    v103 = 4;
    v102 = v176;
LABEL_225:
    (*(void (**)(void))(*v102 + 8 * v103))();
  }
  else if (v177)
  {
    v103 = 5;
    goto LABEL_225;
  }
  v104 = *(md::World **)(v2 + 896);
  *(_QWORD *)(v2 + 896) = 0;
  if (v104)
  {
    md::World::~World(v104);
    MEMORY[0x1A1AF4E00]();
  }
  v105 = *(std::__shared_weak_count **)(v2 + 128);
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  if (!v105)
    goto LABEL_232;
  v106 = (unint64_t *)&v105->__shared_owners_;
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (!v107)
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
    v108 = *(void **)(v2 + 832);
    if (v108)
LABEL_233:
      objc_msgSend(v108, "willDealloc");
  }
  else
  {
LABEL_232:
    v108 = *(void **)(v2 + 832);
    if (v108)
      goto LABEL_233;
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v109 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v173 = 0;
    _os_log_impl(&dword_19F029000, v109, OS_LOG_TYPE_INFO, "Destroy MapEngine End", v173, 2u);
  }

  md::Monitorable<md::ConfigValue<GEOConfigKeyInteger,int>>::~Monitorable(v2 + 4752);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v2 + 4672);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v2 + 4592);
  v110 = *(_QWORD *)(v2 + 4536);
  *(_QWORD *)(v2 + 4536) = 0;
  if (v110)
  {
    std::condition_variable::~condition_variable((std::condition_variable *)(v110 + 240));
    std::mutex::~mutex((std::mutex *)(v110 + 176));

    std::deque<std::function<void ()(void)>>::~deque[abi:nn180100](v110 + 120);
    std::condition_variable::~condition_variable((std::condition_variable *)(v110 + 72));
    std::mutex::~mutex((std::mutex *)(v110 + 8));
    MEMORY[0x1A1AF4E00](v110, 0x10A0C40BCFC4640);
  }
  v111 = *(_QWORD *)(v2 + 4528);
  *(_QWORD *)(v2 + 4528) = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  v112 = *(std::__shared_weak_count **)(v2 + 4520);
  if (v112)
  {
    v113 = (unint64_t *)&v112->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = *(_QWORD *)(v2 + 4504);
  *(_QWORD *)(v2 + 4504) = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v2 + 4424);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v2 + 4344);
  v116 = *(_QWORD *)(v2 + 4336);
  *(_QWORD *)(v2 + 4336) = 0;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  v117 = *(std::__shared_weak_count **)(v2 + 1384);
  if (v117)
    std::__shared_weak_count::__release_weak(v117);
  v118 = *(std::__shared_weak_count **)(v2 + 1368);
  if (v118)
  {
    v119 = (unint64_t *)&v118->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }

  v121 = *(std::__shared_weak_count **)(v2 + 1232);
  if (v121)
  {
    v122 = (unint64_t *)&v121->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = *(_QWORD *)(v2 + 1208);
  *(_QWORD *)(v2 + 1208) = 0;
  if (v124)
  {
    md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(v124 + 200);
    md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v124 + 120);
    MEMORY[0x1A1AF4E00](v124, 0x10A0C4071554381);
  }
  v125 = *(_QWORD *)(v2 + 1192);
  *(_QWORD *)(v2 + 1192) = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  v126 = *(_QWORD *)(v2 + 1184);
  *(_QWORD *)(v2 + 1184) = 0;
  if (v126)
    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  v127 = *(std::__shared_weak_count **)(v2 + 1152);
  if (v127)
  {
    v128 = (unint64_t *)&v127->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = *(_QWORD *)(v2 + 1136);
  *(_QWORD *)(v2 + 1136) = 0;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  v131 = *(_QWORD *)(v2 + 1128);
  *(_QWORD *)(v2 + 1128) = 0;
  if (v131)
    std::default_delete<md::MapEngineSettings>::operator()[abi:nn180100](v131);
  v132 = *(_QWORD *)(v2 + 1120);
  *(_QWORD *)(v2 + 1120) = 0;
  if (v132)
    (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
  *(_QWORD *)(v2 + 1096) = &off_1E42B50F0;

  v133 = *(md::LayoutContext **)(v2 + 1088);
  *(_QWORD *)(v2 + 1088) = 0;
  if (v133)
  {
    md::LayoutContext::~LayoutContext(v133);
    MEMORY[0x1A1AF4E00]();
  }
  v134 = *(md::LayoutContext **)(v2 + 1080);
  *(_QWORD *)(v2 + 1080) = 0;
  if (v134)
  {
    md::LayoutContext::~LayoutContext(v134);
    MEMORY[0x1A1AF4E00]();
  }
  v135 = *(std::__shared_weak_count **)(v2 + 1072);
  if (v135)
  {
    v136 = (unint64_t *)&v135->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = *(_QWORD *)(v2 + 1056);
  *(_QWORD *)(v2 + 1056) = 0;
  if (v138)
  {

    MEMORY[0x1A1AF4E00](v138, 0x1080C4006152ACDLL);
  }
  v139 = *(_QWORD *)(v2 + 1048);
  if (v139)
  {
    v140 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 24))(v139);
    v141 = *(_QWORD *)(v2 + 1048);
    *(_QWORD *)(v2 + 1048) = 0;
    *(_QWORD *)v173 = v141;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v140 + 48))(v140, v173);
    v142 = *(_QWORD *)v173;
    *(_QWORD *)v173 = 0;
    if (v142)
      (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
    v143 = *(_QWORD *)(v2 + 1048);
    *(_QWORD *)(v2 + 1048) = 0;
    if (v143)
      (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
  }
  else
  {
    *(_QWORD *)(v2 + 1048) = 0;
  }
  v144 = *(_QWORD *)(v2 + 920);
  *(_QWORD *)(v2 + 920) = 0;
  if (v144)
  {
    v145 = *(_QWORD **)(v144 + 16);
    if (v145)
    {
      do
      {
        v171 = (_QWORD *)*v145;
        v172 = v145[5];
        v145[5] = 0;
        if (v172)
          (*(void (**)(uint64_t))(*(_QWORD *)v172 + 8))(v172);
        operator delete(v145);
        v145 = v171;
      }
      while (v171);
    }
    v146 = *(void **)v144;
    *(_QWORD *)v144 = 0;
    if (v146)
      operator delete(v146);
    MEMORY[0x1A1AF4E00](v144, 0x10A0C408EF24B1CLL);
  }
  v147 = *(_QWORD *)(v2 + 904);
  *(_QWORD *)(v2 + 904) = 0;
  if (v147)
  {
    v148 = *(std::__shared_weak_count **)(v147 + 24);
    if (v148)
    {
      v149 = (unint64_t *)&v148->__shared_owners_;
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
    MEMORY[0x1A1AF4E00](v147, 0x1020C408EAB821DLL);
  }
  v151 = *(md::World **)(v2 + 896);
  *(_QWORD *)(v2 + 896) = 0;
  if (v151)
  {
    md::World::~World(v151);
    MEMORY[0x1A1AF4E00]();
  }
  v152 = *(std::__shared_weak_count **)(v2 + 888);
  if (v152)
  {
    v153 = (unint64_t *)&v152->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = *(_QWORD *)(v2 + 864);
  *(_QWORD *)(v2 + 864) = 0;
  if (v155)
    (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
  v156 = *(_QWORD *)(v2 + 856);
  *(_QWORD *)(v2 + 856) = 0;
  if (v156)
    (*(void (**)(uint64_t))(*(_QWORD *)v156 + 8))(v156);
  objc_destroyWeak((id *)(v2 + 848));

  ecs2::Flow::~Flow((ecs2::Flow *)(v2 + 584));
  gdc::Registry::~Registry((gdc::Registry *)(v2 + 136));
  v157 = *(std::__shared_weak_count **)(v2 + 128);
  if (v157)
  {
    v158 = (unint64_t *)&v157->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(v2 + 112) = 0;
  if (v160)
    MEMORY[0x1A1AF4E00](v160, 0x20C4093837F09);
  v161 = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v2 + 104) = 0;
  if (v161)
    (*(void (**)(uint64_t))(*(_QWORD *)v161 + 8))(v161);
  v162 = *(_QWORD *)(v2 + 80);
  *(_QWORD *)(v2 + 80) = 0;
  if (v162)
    (*(void (**)(uint64_t))(*(_QWORD *)v162 + 8))(v162);
  v163 = *(std::__shared_weak_count **)(v2 + 72);
  if (v163)
  {
    v164 = (unint64_t *)&v163->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  *(_QWORD *)(v2 + 40) = &off_1E42B5230;

  v166 = *(std::__shared_weak_count **)(v2 + 16);
  if (v166)
  {
    v167 = (unint64_t *)&v166->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  MEMORY[0x1A1AF4E00](v2, 0x10B2C404524076CLL);
LABEL_342:
  +[VKSharedResourcesManager removeResourceUser](VKSharedResourcesManager, "removeResourceUser", *(_QWORD *)v173);
  if (!v175)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_BYTE *))(*(_QWORD *)v175 + 48))(v175);
  result = v175;
  if (v175 == v174)
  {
    v170 = 4;
    result = v174;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v170))();
  }
  else if (v175)
  {
    v170 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v170))();
  }
  return result;
}

void sub_19F8C2FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char *a34)
{
  uint64_t v34;
  char *v35;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v37 = a34;
  if (a34 == v35)
  {
    v38 = 4;
    v37 = &a31;
  }
  else
  {
    if (!a34)
      goto LABEL_11;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_11:
  md::Monitorable<md::ConfigValue<GEOConfigKeyInteger,int>>::~Monitorable(v34 + 4752);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v34 + 4672);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v34 + 4592);
  std::unique_ptr<md::HomeQueueScheduler>::~unique_ptr[abi:nn180100]((uint64_t *)(v34 + 4536));
  v41 = *(_QWORD *)(v34 + 4528);
  *(_QWORD *)(v34 + 4528) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v34 + 4512);
  v42 = *(_QWORD *)(v34 + 4504);
  *(_QWORD *)(v34 + 4504) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v34 + 4424);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v34 + 4344);
  v43 = *(_QWORD *)(v34 + 4336);
  *(_QWORD *)(v34 + 4336) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *(std::__shared_weak_count **)(v34 + 1384);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v34 + 1360);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v34 + 1224);
  std::unique_ptr<md::DaVinciTransitionManager>::~unique_ptr[abi:nn180100]((uint64_t *)(v34 + 1208));
  v45 = *(_QWORD *)(v34 + 1192);
  *(_QWORD *)(v34 + 1192) = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(_QWORD *)(v34 + 1184);
  *(_QWORD *)(v34 + 1184) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v34 + 1144);
  v47 = *(_QWORD *)(v34 + 1136);
  *(_QWORD *)(v34 + 1136) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = *(_QWORD *)(v34 + 1128);
  *(_QWORD *)(v34 + 1128) = 0;
  if (v48)
    std::default_delete<md::MapEngineSettings>::operator()[abi:nn180100](v48);
  v49 = *(_QWORD *)(v34 + 1120);
  *(_QWORD *)(v34 + 1120) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  *(_QWORD *)(v34 + 1096) = &off_1E42B50F0;

  std::unique_ptr<md::LayoutContext>::~unique_ptr[abi:nn180100]((md::LayoutContext **)(v34 + 1088));
  std::unique_ptr<md::LayoutContext>::~unique_ptr[abi:nn180100]((md::LayoutContext **)(v34 + 1080));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v34 + 1064);
  std::unique_ptr<md::ARContext>::~unique_ptr[abi:nn180100]((uint64_t *)(v34 + 1056));
  ggl::Loader::~Loader((ggl::Loader *)(v34 + 1048));
  std::unique_ptr<gdc::Context>::~unique_ptr[abi:nn180100]((uint64_t *)(v34 + 920));
  std::unique_ptr<md::MapDataAccess>::~unique_ptr[abi:nn180100]((uint64_t *)(v34 + 904));
  std::unique_ptr<md::World>::~unique_ptr[abi:nn180100]((md::World **)(v34 + 896));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v34 + 880);
  v50 = *(_QWORD *)(v34 + 864);
  *(_QWORD *)(v34 + 864) = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = *(_QWORD *)(v34 + 856);
  *(_QWORD *)(v34 + 856) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  objc_destroyWeak((id *)(v34 + 848));

  ecs2::Flow::~Flow((ecs2::Flow *)(v34 + 584));
  gdc::Registry::~Registry((gdc::Registry *)(v34 + 136));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v34 + 120);
  v52 = *(_QWORD *)(v34 + 112);
  *(_QWORD *)(v34 + 112) = 0;
  if (v52)
    MEMORY[0x1A1AF4E00](v52, 0x20C4093837F09);
  v53 = *(_QWORD *)(v34 + 104);
  *(_QWORD *)(v34 + 104) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *(_QWORD *)(v34 + 80);
  *(_QWORD *)(v34 + 80) = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v34 + 64);
  *(_QWORD *)(v34 + 40) = &off_1E42B5230;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v34 + 8);
  v39 = a14;
  if (a14 == &a11)
  {
    v40 = 4;
    v39 = &a11;
  }
  else
  {
    if (!a14)
      _Unwind_Resume(a1);
    v40 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
  _Unwind_Resume(a1);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<md::RunnableMapEngineCommand::operator()(std::function<void ()(void)>)::$_0 &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::DisplayLinkFired,md::DestroyMapEngine,md::RenderScene,md::RenderSceneInContext> &>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)*a1 + 48);
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v20 = v19;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v19);
    }
    else
    {
      v20 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v20 = 0;
  }
  v5 = *(_QWORD *)(v2 + 32);
  if (!v5)
    goto LABEL_9;
  if (v5 != v2 + 8)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
LABEL_9:
    v18 = (_QWORD *)v5;
    goto LABEL_11;
  }
  v18 = v17;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, v17);
LABEL_11:
  v6 = CACurrentMediaTime();
  v7 = (uint64_t)v20;
  if (!v20)
  {
LABEL_14:
    v24 = (_QWORD *)v7;
    goto LABEL_16;
  }
  if (v20 != v19)
  {
    v7 = (*(uint64_t (**)(void))(*v20 + 16))();
    goto LABEL_14;
  }
  v24 = v23;
  (*(void (**)(_QWORD *, _QWORD *))(v19[0] + 24))(v19, v23);
LABEL_16:
  v8 = (uint64_t)v18;
  if (!v18)
  {
LABEL_19:
    v22 = (_QWORD *)v8;
    goto LABEL_21;
  }
  if (v18 != v17)
  {
    v8 = (*(uint64_t (**)(void))(*v18 + 16))();
    goto LABEL_19;
  }
  v22 = v21;
  (*(void (**)(_QWORD *, _QWORD *))(v17[0] + 24))(v17, v21);
LABEL_21:
  md::MapEngine::renderScene(v3, v23, v21, v6);
  v9 = v22;
  if (v22 == v21)
  {
    v10 = 4;
    v9 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_26;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_26:
  v11 = v24;
  if (v24 == v23)
  {
    v12 = 4;
    v11 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_31;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_31:
  v13 = v18;
  if (v18 == v17)
  {
    v14 = 4;
    v13 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_36;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_36:
  result = v20;
  if (v20 == v19)
  {
    v16 = 4;
    result = v19;
  }
  else
  {
    if (!v20)
      return result;
    v16 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
}

void sub_19F8C3650(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F8C365C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v23 = *(_QWORD **)(v21 - 48);
  if (v23 == (_QWORD *)(v21 - 72))
  {
    v24 = 4;
    v23 = (_QWORD *)(v21 - 72);
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_6:
  v25 = a13;
  if (a13 == &a10)
  {
    v26 = 4;
    v25 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_11:
  v27 = a17;
  if (a17 == &a14)
  {
    v28 = 4;
    v27 = &a14;
  }
  else
  {
    if (!a17)
      _Unwind_Resume(exception_object);
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<md::RunnableMapEngineCommand::operator()(std::function<void ()(void)>)::$_0 &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::DisplayLinkFired,md::DestroyMapEngine,md::RenderScene,md::RenderSceneInContext> &>(uint64_t *a1, CGContext **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  CGContext **v5;
  uint64_t v6;
  CGContext *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char v17;
  unsigned __int8 v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  _QWORD *v31;
  CGContext *v32;
  _QWORD v33[3];
  _QWORD *v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[24];
  _BYTE *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)*a1 + 48);
  v32 = *a2;
  v4 = v33;
  v5 = (CGContext **)a2[4];
  if (v5)
  {
    if (v5 == a2 + 1)
    {
      v34 = v33;
      (*((void (**)(CGContext **, _QWORD *))*v5 + 3))(v5, v33);
    }
    else
    {
      v34 = (_QWORD *)(*((uint64_t (**)(CGContext **))*v5 + 2))(v5);
    }
  }
  else
  {
    v34 = 0;
  }
  v6 = *(_QWORD *)(v2 + 32);
  if (!v6)
    goto LABEL_9;
  if (v6 != v2 + 8)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
LABEL_9:
    v31 = (_QWORD *)v6;
    goto LABEL_11;
  }
  v31 = v30;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 24))(v6, v30);
LABEL_11:
  v7 = v32;
  v8 = CACurrentMediaTime();
  v9 = (uint64_t)v34;
  if (!v34)
  {
LABEL_14:
    v38 = (_QWORD *)v9;
    goto LABEL_16;
  }
  if (v34 != v33)
  {
    v9 = (*(uint64_t (**)(void))(*v34 + 16))();
    goto LABEL_14;
  }
  v38 = v37;
  (*(void (**)(_QWORD *, _QWORD *))(v33[0] + 24))(v33, v37);
LABEL_16:
  v10 = (uint64_t)v31;
  if (!v31)
  {
LABEL_19:
    v36 = (_QWORD *)v10;
    goto LABEL_21;
  }
  if (v31 != v30)
  {
    v10 = (*(uint64_t (**)(void))(*v31 + 16))();
    goto LABEL_19;
  }
  v36 = v35;
  (*(void (**)(_QWORD *, _QWORD *))(v30[0] + 24))(v30, v35);
LABEL_21:
  if (!md::MapEngine::canRenderAsync((md::MapEngine *)v3))
  {
    if (md::MapEngine::renderSceneInContextSync((md::MapEngine *)v3, v7, v8) && v38)
      (*(void (**)(_QWORD *))(*v38 + 48))(v38);
    if (v36)
    {
      (*(void (**)(_QWORD *))(*v36 + 48))(v36);
      goto LABEL_57;
    }
LABEL_78:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  v11 = (uint64_t)v38;
  if (!v38)
    goto LABEL_25;
  if (v38 != v37)
  {
    v11 = (*(uint64_t (**)(void))(*v38 + 16))();
LABEL_25:
    v42 = (_BYTE *)v11;
    goto LABEL_32;
  }
  v42 = v41;
  (*(void (**)(_QWORD *, _BYTE *))(v37[0] + 24))(v37, v41);
LABEL_32:
  v12 = (uint64_t)v36;
  if (!v36)
  {
LABEL_35:
    v40 = (_BYTE *)v12;
    goto LABEL_37;
  }
  if (v36 != v35)
  {
    v12 = (*(uint64_t (**)(void))(*v36 + 16))();
    goto LABEL_35;
  }
  v40 = v39;
  (*(void (**)(_QWORD *, _BYTE *))(v35[0] + 24))(v35, v39);
LABEL_37:
  objc_msgSend(*(id *)(v3 + 840), "size");
  v14 = v13;
  v16 = v15;
  v17 = *(_BYTE *)(v3 + 1177);
  if (v17)
    v17 = *(_BYTE *)(v3 + 1178) == 0;
  if ((v17 & 1) == 0
    && !*(_BYTE *)(v3 + 1176)
    && ((objc_msgSend(*(id *)(v3 + 840), "hasRenderTarget") & 1) != 0 || *(_QWORD *)(v3 + 1200) == 1)
    && v16 * v14 > 0.0)
  {
    v18 = atomic_load((unsigned __int8 *)(v3 + 1181));
    if ((v18 & 1) == 0)
    {
      atomic_store(1u, (unsigned __int8 *)(v3 + 1181));
      md::MapEngine::runUpdatePhase((md::MapEngine *)v3, v8, 0);
      objc_msgSend(*(id *)(v3 + 824), "drawInContext:registry:", v7, v3 + 136);
      CGContextRelease(v7);
      atomic_store(0, (unsigned __int8 *)(v3 + 1181));
    }
  }
  if (!v40)
    goto LABEL_78;
  (*(void (**)(_BYTE *))(*(_QWORD *)v40 + 48))(v40);
  v19 = v40;
  if (v40 == v39)
  {
    v20 = 4;
    v19 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_52;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_52:
  v21 = v42;
  if (v42 == v41)
  {
    v22 = 4;
    v21 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_57;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_57:
  v23 = v36;
  if (v36 == v35)
  {
    v24 = 4;
    v23 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_62;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_62:
  v25 = v38;
  if (v38 == v37)
  {
    v26 = 4;
    v25 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_67;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_67:
  v27 = v31;
  if (v31 == v30)
  {
    v28 = 4;
    v27 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_72;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_72:
  if (v34 == v33)
  {
    v29 = 4;
  }
  else
  {
    if (!v34)
      return;
    v29 = 5;
    v4 = v34;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v29))(v4);
}

void sub_19F8C3B88(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F8C3B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,char *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;

  v32 = *(_QWORD **)(v30 - 80);
  if (v32 == (_QWORD *)(v30 - 104))
  {
    v33 = 4;
    v32 = (_QWORD *)(v30 - 104);
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_6:
  v34 = a21;
  if (a21 == &a18)
  {
    v35 = 4;
    v34 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_11;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_11:
  v36 = a25;
  if (a25 == &a22)
  {
    v37 = 4;
    v36 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_16;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_16:
  v38 = a12;
  if (a12 == &a9)
  {
    v39 = 4;
    v38 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_21;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_21:
  if (a17 == v29)
  {
    v40 = 4;
  }
  else
  {
    if (!a17)
      _Unwind_Resume(exception_object);
    v40 = 5;
    v29 = a17;
  }
  (*(void (**)(_QWORD *))(*v29 + 8 * v40))(v29);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<md::InteractiveMapEngineCommandExecutor::nextCommand(NSObject  {objcproto17OS_dispatch_queue}*,void const*,std::shared_ptr<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>> const&,std::shared_ptr<geo::Semaphore> const&)::$_1,std::allocator<md::InteractiveMapEngineCommandExecutor::nextCommand(NSObject  {objcproto17OS_dispatch_queue}*,void const*,std::shared_ptr<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>> const&,std::shared_ptr<geo::Semaphore> const&)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a1 = &off_1E42D3EB0;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void std::__function::__func<md::InteractiveMapEngineCommandExecutor::nextCommand(NSObject  {objcproto17OS_dispatch_queue}*,void const*,std::shared_ptr<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>> const&,std::shared_ptr<geo::Semaphore> const&)::$_1,std::allocator<md::InteractiveMapEngineCommandExecutor::nextCommand(NSObject  {objcproto17OS_dispatch_queue}*,void const*,std::shared_ptr<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>> const&,std::shared_ptr<geo::Semaphore> const&)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a1 = &off_1E42D3EB0;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::InteractiveMapEngineCommandExecutor::nextCommand(NSObject  {objcproto17OS_dispatch_queue}*,void const*,std::shared_ptr<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>> const&,std::shared_ptr<geo::Semaphore> const&)::$_1,std::allocator<md::InteractiveMapEngineCommandExecutor::nextCommand(NSObject  {objcproto17OS_dispatch_queue}*,void const*,std::shared_ptr<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>> const&,std::shared_ptr<geo::Semaphore> const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = operator new(0x38uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *v2 = &off_1E42D3EB0;
  v2[1] = v4;
  v2[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v2[3] = *(id *)(a1 + 24);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  v2[6] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return v2;
}

id std::__function::__func<md::InteractiveMapEngineCommandExecutor::nextCommand(NSObject  {objcproto17OS_dispatch_queue}*,void const*,std::shared_ptr<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>> const&,std::shared_ptr<geo::Semaphore> const&)::$_1,std::allocator<md::InteractiveMapEngineCommandExecutor::nextCommand(NSObject  {objcproto17OS_dispatch_queue}*,void const*,std::shared_ptr<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>> const&,std::shared_ptr<geo::Semaphore> const&)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  id result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_1E42D3EB0;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = *(id *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = result;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 48) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void std::__function::__func<md::InteractiveMapEngineCommandExecutor::nextCommand(NSObject  {objcproto17OS_dispatch_queue}*,void const*,std::shared_ptr<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>> const&,std::shared_ptr<geo::Semaphore> const&)::$_1,std::allocator<md::InteractiveMapEngineCommandExecutor::nextCommand(NSObject  {objcproto17OS_dispatch_queue}*,void const*,std::shared_ptr<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>> const&,std::shared_ptr<geo::Semaphore> const&)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void std::__function::__func<md::InteractiveMapEngineCommandExecutor::nextCommand(NSObject  {objcproto17OS_dispatch_queue}*,void const*,std::shared_ptr<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>> const&,std::shared_ptr<geo::Semaphore> const&)::$_1,std::allocator<md::InteractiveMapEngineCommandExecutor::nextCommand(NSObject  {objcproto17OS_dispatch_queue}*,void const*,std::shared_ptr<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>> const&,std::shared_ptr<geo::Semaphore> const&)::$_1>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete((void *)a1);
}

void std::__function::__func<md::InteractiveMapEngineCommandExecutor::nextCommand(NSObject  {objcproto17OS_dispatch_queue}*,void const*,std::shared_ptr<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>> const&,std::shared_ptr<geo::Semaphore> const&)::$_1,std::allocator<md::InteractiveMapEngineCommandExecutor::nextCommand(NSObject  {objcproto17OS_dispatch_queue}*,void const*,std::shared_ptr<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>> const&,std::shared_ptr<geo::Semaphore> const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 8;
  v2 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)v2);
  ++*(_QWORD *)(v2 + 112);
  std::condition_variable::notify_one((std::condition_variable *)(v2 + 64));
  std::mutex::unlock((std::mutex *)v2);
  md::InteractiveMapEngineCommandExecutor::nextCommand(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t *)(v1 + 32), v1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2md16DisplayLinkFiredENS8_16DestroyMapEngineENS8_11RenderSceneENS8_20RenderSceneInContextEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E42F3138[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2md16DisplayLinkFiredENS8_16DestroyMapEngineENS8_11RenderSceneENS8_20RenderSceneInContextEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 1)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E42F3138[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 40) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2md16DisplayLinkFiredENS8_16DestroyMapEngineENS8_11RenderSceneENS8_20RenderSceneInContextEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      result = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0;
      if (result == a2)
      {
        v7 = 4;
        result = a2;
      }
      else
      {
        if (!result)
          goto LABEL_16;
        v7 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v7))();
LABEL_16:
      v9 = *(_QWORD *)(a3 + 24);
      if (v9)
      {
        if (v9 == a3)
        {
          *(_QWORD *)(a2 + 24) = a2;
          return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a2);
        }
        else
        {
          *(_QWORD *)(a2 + 24) = v9;
          *(_QWORD *)(a3 + 24) = 0;
        }
      }
      else
      {
        *(_QWORD *)(a2 + 24) = 0;
      }
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E42F3138[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 40) = -1;
  v8 = *(_QWORD *)(a3 + 24);
  if (v8)
  {
    if (v8 == a3)
    {
      *(_QWORD *)(v4 + 24) = v4;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), v4);
    }
    else
    {
      *(_QWORD *)(v4 + 24) = v8;
      *(_QWORD *)(a3 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(v4 + 24) = 0;
  }
  *(_DWORD *)(v4 + 40) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2md16DisplayLinkFiredENS8_16DestroyMapEngineENS8_11RenderSceneENS8_20RenderSceneInContextEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      v7 = a3 + 1;
      *a2 = *a3;
      v8 = a2 + 1;
      result = a2[4];
      a2[4] = 0;
      if ((_QWORD *)result == a2 + 1)
      {
        v9 = 4;
        result = (uint64_t)(a2 + 1);
      }
      else
      {
        if (!result)
          goto LABEL_16;
        v9 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v9))();
LABEL_16:
      v11 = (_QWORD *)a3[4];
      if (v11)
      {
        if (v11 == v7)
        {
          a2[4] = v8;
          return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)a3[4] + 24))(a3[4], v8);
        }
        else
        {
          a2[4] = v11;
          a3[4] = 0;
        }
      }
      else
      {
        a2[4] = 0;
      }
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E42F3138[v5])(&v12, v4);
  }
  *(_DWORD *)(v4 + 40) = -1;
  *(_QWORD *)v4 = *a3;
  v10 = (_QWORD *)a3[4];
  if (v10)
  {
    if (v10 == a3 + 1)
    {
      *(_QWORD *)(v4 + 32) = v4 + 8;
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a3[4] + 24))(a3[4]);
    }
    else
    {
      *(_QWORD *)(v4 + 32) = v10;
      a3[4] = 0;
    }
  }
  else
  {
    *(_QWORD *)(v4 + 32) = 0;
  }
  *(_DWORD *)(v4 + 40) = 3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2md16DisplayLinkFiredENS8_16DestroyMapEngineENS8_11RenderSceneENS8_20RenderSceneInContextEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E42F3138[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2md16DisplayLinkFiredENS8_16DestroyMapEngineENS8_11RenderSceneENS8_20RenderSceneInContextEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 1)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E42F3138[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 40) = 1;
  return result;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2md16DisplayLinkFiredENS8_16DestroyMapEngineENS8_11RenderSceneENS8_20RenderSceneInContextEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if (*(_DWORD *)(*a1 + 40) == 2)
  {
    v5 = (_QWORD *)a3[3];
    if (v5)
    {
      if (v5 == a3)
      {
        v11 = v10;
        (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v10);
      }
      else
      {
        v11 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v11 = 0;
    }
    std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v10, a2);
    result = v11;
    if (v11 != v10)
      goto LABEL_12;
    goto LABEL_23;
  }
  result = (_QWORD *)a3[3];
  if (result)
  {
    if (result == a3)
    {
      v11 = v10;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v10);
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
      v11 = result;
    }
  }
  else
  {
    v11 = 0;
  }
  v8 = *(unsigned int *)(v3 + 40);
  if ((_DWORD)v8 != -1)
    result = (_QWORD *)((uint64_t (*)(char *, uint64_t))off_1E42F3138[v8])(&v9, v3);
  *(_DWORD *)(v3 + 40) = -1;
  if (!v11)
  {
    *(_QWORD *)(v3 + 24) = 0;
    goto LABEL_21;
  }
  if (v11 != v10)
  {
    *(_QWORD *)(v3 + 24) = v11;
LABEL_21:
    *(_DWORD *)(v3 + 40) = 2;
    return result;
  }
  *(_QWORD *)(v3 + 24) = v3;
  (*(void (**)(_QWORD *, uint64_t))(v10[0] + 24))(v10, v3);
  result = v11;
  *(_DWORD *)(v3 + 40) = 2;
  if (result != v10)
  {
LABEL_12:
    if (!result)
      return result;
    v7 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
LABEL_23:
  v7 = 4;
  result = v10;
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2md16DisplayLinkFiredENS8_16DestroyMapEngineENS8_11RenderSceneENS8_20RenderSceneInContextEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if (*(_DWORD *)(*a1 + 40) != 3)
  {
    v14 = *a3;
    v6 = v15;
    result = (uint64_t *)a3[4];
    if (result)
    {
      if (result == a3 + 1)
      {
        v17 = v15;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *, _QWORD *))(*result + 24))(result, v15);
      }
      else
      {
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 16))(result);
        v17 = result;
      }
    }
    else
    {
      v17 = 0;
    }
    v10 = *(unsigned int *)(v3 + 40);
    if ((_DWORD)v10 != -1)
      result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1E42F3138[v10])(&v13, v3);
    *(_DWORD *)(v3 + 40) = -1;
    *(_QWORD *)v3 = v14;
    if (v17)
    {
      if (v17 == v15)
      {
        *(_QWORD *)(v3 + 32) = v3 + 8;
        result = (uint64_t *)(*(uint64_t (**)(_QWORD *))(v15[0] + 24))(v15);
        v11 = v17;
        *(_DWORD *)(v3 + 40) = 3;
        if (v11 == v15)
        {
          v12 = 4;
        }
        else
        {
          if (!v11)
            return result;
          v12 = 5;
          v6 = v11;
        }
        v9 = *(uint64_t (**)(void))(*v6 + 8 * v12);
        return (uint64_t *)v9();
      }
      *(_QWORD *)(v3 + 32) = v17;
    }
    else
    {
      *(_QWORD *)(v3 + 32) = 0;
    }
    *(_DWORD *)(v3 + 40) = 3;
    return result;
  }
  *a2 = *a3;
  v4 = a2 + 1;
  v5 = (uint64_t *)a3[4];
  if (v5)
  {
    if (v5 == a3 + 1)
    {
      v16 = &v14;
      (*(void (**)(uint64_t *, uint64_t *))(a3[1] + 24))(a3 + 1, &v14);
    }
    else
    {
      v16 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*v5 + 16))(a3[4]);
    }
  }
  else
  {
    v16 = 0;
  }
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](&v14, v4);
  result = v16;
  if (v16 == &v14)
  {
    v8 = 4;
    result = &v14;
    goto LABEL_15;
  }
  if (v16)
  {
    v8 = 5;
LABEL_15:
    v9 = *(uint64_t (**)(void))(*result + 8 * v8);
    return (uint64_t *)v9();
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2md16DisplayLinkFiredENS8_16DestroyMapEngineENS8_11RenderSceneENS8_20RenderSceneInContextEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a3 + 24);
  if (v3)
  {
    if (v3 == a3)
    {
      *(_QWORD *)(a2 + 24) = a2;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v3;
      *(_QWORD *)(a3 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2md16DisplayLinkFiredENS8_16DestroyMapEngineENS8_11RenderSceneENS8_20RenderSceneInContextEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t result;

  *a2 = *a3;
  v3 = (_QWORD *)a3[4];
  if (v3)
  {
    if (v3 == a3 + 1)
    {
      a2[4] = a2 + 1;
      return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)a3[4] + 24))(a3[4], a2 + 1);
    }
    else
    {
      a2[4] = v3;
      a3[4] = 0;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::RunnableMapEngineCommand,std::__list_iterator<md::RunnableMapEngineCommand,void *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::RunnableMapEngineCommand,std::__list_iterator<md::RunnableMapEngineCommand,void *>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  char v5;

  v2 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[14];
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, unsigned int *))off_1E42F3138[v3])(&v5, v2 + 4);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2md16DisplayLinkFiredENS8_16DestroyMapEngineENS8_11RenderSceneENS8_20RenderSceneInContextEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)a2[3];
  if (v2 == a2)
    return (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  if (v2)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 40))(a2[3]);
  return result;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2md16DisplayLinkFiredENS8_16DestroyMapEngineENS8_11RenderSceneENS8_20RenderSceneInContextEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  result = *(_QWORD **)(a2 + 32);
  if (result == (_QWORD *)(a2 + 8))
  {
    v3 = 4;
    result = (_QWORD *)(a2 + 8);
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2md16DisplayLinkFiredENS8_16DestroyMapEngineENS8_11RenderSceneENS8_20RenderSceneInContextEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a3 + 24);
  if (result)
  {
    if (result == a3)
    {
      *(_QWORD *)(a2 + 24) = a2;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a2);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a2 + 24) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2md16DisplayLinkFiredENS8_16DestroyMapEngineENS8_11RenderSceneENS8_20RenderSceneInContextEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t result;

  *a2 = *a3;
  v4 = a2 + 1;
  result = a3[4];
  if (result)
  {
    if ((_QWORD *)result == a3 + 1)
    {
      a2[4] = v4;
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a3[4] + 24))(a3[4]);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v4);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

void sub_19F8C4C58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 40);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);

  _Unwind_Resume(a1);
}

void md::SnapshotMapEngineCommandExecutor::~SnapshotMapEngineCommandExecutor(md::SnapshotMapEngineCommandExecutor *this)
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::SnapshotMapEngineCommandExecutor::schedule(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE **v8;
  _QWORD v9[3];
  _QWORD *v10;
  _BYTE v11[40];
  int v12;
  uint64_t v13;
  _BYTE *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v11[0] = 0;
  v12 = -1;
  v3 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(_BYTE ***, _BYTE *, uint64_t))off_1E42EFC98[v3])(&v8, v11, a2);
    v12 = v3;
  }
  v13 = *(_QWORD *)(a1 + 8);
  v9[0] = &off_1E42D3B98;
  v10 = v9;
  v4 = v15;
  v16 = v15;
  v14 = v11;
  v15[0] = &off_1E42D3B98;
  if ((_DWORD)v3 == -1)
  {
    std::__throw_bad_variant_access[abi:nn180100]();
    __break(1u);
  }
  v8 = &v14;
  ((void (*)(_BYTE ***, _BYTE *))off_1E42EFC78[v3])(&v8, v11);
  if (v16 == v15)
  {
    v5 = 4;
  }
  else
  {
    if (!v16)
      goto LABEL_9;
    v5 = 5;
    v4 = v16;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v5))(v4);
LABEL_9:
  result = v10;
  if (v10 == v9)
  {
    v7 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_14;
    v7 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
LABEL_14:
  if (v12 != -1)
    return (_QWORD *)((uint64_t (*)(_BYTE **, _BYTE *))off_1E42F3138[v12])(&v14, v11);
  return result;
}

void sub_19F8C4DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  uint64_t v19;

  if (a19 != -1)
    ((void (*)(uint64_t, char *))off_1E42F3138[a19])(v19 - 64, &a14);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::SnapshotMapEngineCommandExecutor::schedule(std::variant<md::DisplayLinkFired,md::DestroyMapEngine,md::RenderScene,md::RenderSceneInContext>)::$_0,std::allocator<md::SnapshotMapEngineCommandExecutor::schedule(std::variant<md::DisplayLinkFired,md::DestroyMapEngine,md::RenderScene,md::RenderSceneInContext>)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::SnapshotMapEngineCommandExecutor::schedule(std::variant<md::DisplayLinkFired,md::DestroyMapEngine,md::RenderScene,md::RenderSceneInContext>)::$_0,std::allocator<md::SnapshotMapEngineCommandExecutor::schedule(std::variant<md::DisplayLinkFired,md::DestroyMapEngine,md::RenderScene,md::RenderSceneInContext>)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3B98;
  return result;
}

void std::__function::__func<md::SnapshotMapEngineCommandExecutor::schedule(std::variant<md::DisplayLinkFired,md::DestroyMapEngine,md::RenderScene,md::RenderSceneInContext>)::$_0,std::allocator<md::SnapshotMapEngineCommandExecutor::schedule(std::variant<md::DisplayLinkFired,md::DestroyMapEngine,md::RenderScene,md::RenderSceneInContext>)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3B98;
}

void std::__shared_ptr_emplace<geo::Semaphore>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE490;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::Semaphore>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE490;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<geo::Semaphore>::__on_zero_shared(uint64_t a1)
{
  std::mutex *v1;

  v1 = (std::mutex *)(a1 + 24);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex(v1);
}

void std::__shared_ptr_emplace<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE2D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE2D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<geo::concurrent_queue_base<md::RunnableMapEngineCommand,geo::UniqueStoragePolicy<md::RunnableMapEngineCommand,geo::ReplaceDuplicatesPolicy<md::RunnableMapEngineCommand>,md::MapEngineCommandHash,md::MapEngineCommandEqual>>>::__on_zero_shared(_QWORD *a1)
{
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  char v12;

  v2 = (void **)a1[23];
  if (v2)
  {
    do
    {
      v7 = (void **)*v2;
      v8 = *((unsigned int *)v2 + 14);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, void **))off_1E42F3138[v8])(&v11, v2 + 2);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)a1[21];
  a1[21] = 0;
  if (v3)
    operator delete(v3);
  if (a1[20])
  {
    v4 = a1[18];
    v5 = (uint64_t *)a1[19];
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    a1[20] = 0;
    if (v5 != a1 + 18)
    {
      do
      {
        v9 = (uint64_t *)v5[1];
        v10 = *((unsigned int *)v5 + 14);
        if ((_DWORD)v10 != -1)
          ((void (*)(char *, uint64_t *))off_1E42F3138[v10])(&v12, v5 + 2);
        operator delete(v5);
        v5 = v9;
      }
      while (v9 != a1 + 18);
    }
  }
  std::condition_variable::~condition_variable((std::condition_variable *)a1 + 2);
  std::mutex::~mutex((std::mutex *)(a1 + 4));
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelGlyphImageLoader>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBF98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelGlyphImageLoader>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBF98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelGlyphImageLoader>>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void md::LabelGlyphImageLoader::queueCommand(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42[2];
  __int128 v43;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = a1[3];
  v4 = *(std::__shared_weak_count **)(v3 + 16);
  if (!v4 || (v6 = *(std::__shared_weak_count **)(v3 + 8), (v7 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:nn180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v14 = a1[1];
  v13 = (std::__shared_weak_count *)a1[2];
  v40 = v14;
  v41 = v13;
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *(_QWORD *)(*(_QWORD *)(a1[3] + 152) + 88);
  v42[0] = v6;
  v42[1] = v8;
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  *(_QWORD *)&v43 = v14;
  *((_QWORD *)&v43 + 1) = v13;
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = v44;
  v22 = a2[3];
  if (!v22)
    goto LABEL_20;
  if ((_QWORD *)v22 != a2)
  {
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
LABEL_20:
    v45 = (_QWORD *)v22;
    goto LABEL_22;
  }
  v45 = v44;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v44);
LABEL_22:
  v47 = 0;
  v23 = (char *)operator new(0x48uLL);
  v24 = v23;
  *(_QWORD *)v23 = &off_1E427A338;
  v25 = v43;
  *(_OWORD *)(v23 + 8) = *(_OWORD *)v42;
  v42[0] = 0;
  v42[1] = 0;
  *(_OWORD *)(v23 + 24) = v25;
  v43 = 0uLL;
  if (v45)
  {
    if (v45 == v44)
    {
      *((_QWORD *)v23 + 8) = v23 + 40;
      (*(void (**)(_QWORD *))(v44[0] + 24))(v44);
    }
    else
    {
      *((_QWORD *)v23 + 8) = v45;
      v45 = 0;
    }
  }
  else
  {
    *((_QWORD *)v23 + 8) = 0;
  }
  v47 = v24;
  geo::TaskQueue::async(&v38, v17, v46);
  v26 = v39;
  if (v39)
  {
    v27 = (unint64_t *)&v39->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v47;
  if (v47 == v46)
  {
    v30 = 4;
    v29 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_37;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_37:
  if (v45 == v44)
  {
    v31 = 4;
    goto LABEL_41;
  }
  if (v45)
  {
    v31 = 5;
    v21 = v45;
LABEL_41:
    (*(void (**)(_QWORD *))(*v21 + 8 * v31))(v21);
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v42[1])
    std::__shared_weak_count::__release_weak(v42[1]);
  v35 = v41;
  if (v41)
  {
    v36 = (unint64_t *)&v41->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  std::__shared_weak_count::__release_weak(v8);
}

void sub_19F8C53F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v14;
  uint64_t v15;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v15);
  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

_QWORD *md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0::~$_0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)a1[3];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = (std::__shared_weak_count *)a1[1];
      if (!v8)
        return a1;
      goto LABEL_11;
    }
  }
  v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
LABEL_11:
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

_QWORD *std::__function::__func<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0,std::allocator<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_1E427A338;
  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = (std::__shared_weak_count *)a1[2];
      if (!v8)
        return a1;
      goto LABEL_11;
    }
  }
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
LABEL_11:
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void std::__function::__func<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0,std::allocator<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_1E427A338;
  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      v5 = (std::__shared_weak_count *)a1[4];
      if (!v5)
        goto LABEL_10;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (std::__shared_weak_count *)a1[2];
        if (!v8)
          goto LABEL_14;
      }
      else
      {
LABEL_10:
        v8 = (std::__shared_weak_count *)a1[2];
        if (!v8)
          goto LABEL_14;
      }
      std::__shared_weak_count::__release_weak(v8);
LABEL_14:
      JUMPOUT(0x1A1AF4E00);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  goto LABEL_6;
}

_QWORD *std::__function::__func<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0,std::allocator<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = operator new(0x48uLL);
  *v2 = &off_1E427A338;
  std::__compressed_pair_elem<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_19F8C56B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0,std::allocator<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427A338;
  return std::__compressed_pair_elem<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0 const&,0ul>(a2 + 1, (_QWORD *)(a1 + 8));
}

void std::__function::__func<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0,std::allocator<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0>,void ()(void)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)a1[4];
  if (!v5)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_10:
    v8 = (std::__shared_weak_count *)a1[2];
    if (!v8)
      return;
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
LABEL_11:
    std::__shared_weak_count::__release_weak(v8);
}

void std::__function::__func<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0,std::allocator<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0>,void ()(void)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = __p + 40;
  v3 = (char *)*((_QWORD *)__p + 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 4);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v8)
LABEL_11:
    std::__shared_weak_count::__release_weak(v8);
LABEL_12:
  operator delete(__p);
}

void std::__function::__func<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0,std::allocator<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::recursive_mutex *v6;
  std::mutex *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = (std::recursive_mutex *)(v5 + 24);
        std::recursive_mutex::lock((std::recursive_mutex *)(v5 + 24));
        v7 = (std::mutex *)a1[3];
        std::mutex::lock(v7);
        if (v7[1].__m_.__sig)
        {
          v8 = a1[8];
          if (!v8)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
            return;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
        }
        std::mutex::unlock(v7);
        std::recursive_mutex::unlock(v6);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_19F8C58EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::recursive_mutex *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  std::recursive_mutex::unlock(v2);
  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::__compressed_pair_elem<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::LabelGlyphImageLoader::queueCommand(std::function<void ()(void)>)::$_0 const&,0ul>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a2[7];
  if (v9)
  {
    if ((_QWORD *)v9 == a2 + 4)
    {
      a1[7] = a1 + 4;
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[7] + 24))(a2[7], a1 + 4);
      return a1;
    }
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  a1[7] = v9;
  return a1;
}

void sub_19F8C59F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::LabelGlyphImageLoader::onUpscaleFactorDidChange(void)::$_0,std::allocator<md::LabelGlyphImageLoader::onUpscaleFactorDidChange(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelGlyphImageLoader::onUpscaleFactorDidChange(void)::$_0,std::allocator<md::LabelGlyphImageLoader::onUpscaleFactorDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0B38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelGlyphImageLoader::onUpscaleFactorDidChange(void)::$_0,std::allocator<md::LabelGlyphImageLoader::onUpscaleFactorDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0B38;
  a2[1] = v2;
  return result;
}

md::FontGlyphCache *std::__function::__func<md::LabelGlyphImageLoader::onUpscaleFactorDidChange(void)::$_0,std::allocator<md::LabelGlyphImageLoader::onUpscaleFactorDidChange(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  md::FontGlyphCache *result;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned int *)(v1 + 68);
  if (!*(_BYTE *)(v1 + 72))
    v2 = (unsigned int *)&kDefaultUpscaleFactor;
  atomic_store(*v2, (unsigned int *)(*(_QWORD *)v1 + 104));
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 304);
  *(_BYTE *)(v3 + 120) = 1;
  md::FontAtlas::clearCells((md::FontAtlas *)v3);
  *(_DWORD *)(v3 + 116) = 0;
  v4 = operator new();
  md::FontGlyphCache::FontGlyphCache(v4, 1);
  result = *(md::FontGlyphCache **)(v3 + 128);
  *(_QWORD *)(v3 + 128) = v4;
  if (result)
  {
    md::FontGlyphCache::~FontGlyphCache(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void md::LabelGlyphImageLoader::~LabelGlyphImageLoader(md::LabelGlyphImageLoader *this)
{
  std::mutex *v2;
  uint64_t sig;
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;

  v2 = (std::mutex *)*((_QWORD *)this + 1);
  if (v2)
  {
    std::mutex::lock(*((std::mutex **)this + 1));
    sig = v2[1].__m_.__sig;
    std::mutex::unlock(v2);
    if (sig)
    {
      v4 = (std::mutex *)*((_QWORD *)this + 1);
      std::mutex::lock(v4);
      v4[1].__m_.__sig = 0;
      std::mutex::unlock(v4);
    }
  }
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    v6 = *((_QWORD *)this + 5);
    v7 = *((_QWORD *)this + 4);
    if (v6 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = *((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v7, *((_QWORD *)this + 6) - v7);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
}

void sub_19F8C5C94(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;

  v3 = v1[4];
  if (v3)
  {
    v4 = v1[5];
    v5 = v1[4];
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v6->__on_zero_shared)(v6, v5);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = v1[4];
    }
    v1[5] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[7] + 40))(v1[7], v5, v1[6] - v5);
  }
  v9 = (std::__shared_weak_count *)v1[2];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *v1;
  *v1 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 8);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v11->__on_zero_shared)(v11, v10);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = *(_QWORD *)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), v10, *(_QWORD *)(a1 + 24) - v10);
  }
  return a1;
}

uint64_t std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0,std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = &off_1E42D0AF0;
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(a1 + 16);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v11->__on_zero_shared)(v11, v10);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = *(_QWORD *)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), v10, *(_QWORD *)(a1 + 32) - v10);
  }
  return a1;
}

void std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0,std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = &off_1E42D0AF0;
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(a1 + 16);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v11->__on_zero_shared)(v11, v10);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = *(_QWORD *)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), v10, *(_QWORD *)(a1 + 32) - v10);
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0,std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D0AF0;
  return std::__compressed_pair_elem<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0 const&,0ul>(a2 + 1, (uint64_t *)(a1 + 8));
}

void std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0,std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0,std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0>,void ()(void)>::destroy[abi:nn180100](a1 + 8);
}

_QWORD *std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42D9E60;
  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42D9E60;
  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E42D9E60;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D9E18;
  return result;
}

void std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D9EA8;
  return result;
}

void std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D9EA8;
}

void std::__function::__alloc_func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0,std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0>,void ()(void)>::destroy[abi:nn180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 8);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v11->__on_zero_shared)(v11, v10);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = *(_QWORD *)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), v10, *(_QWORD *)(a1 + 24) - v10);
  }
}

_QWORD *std::__compressed_pair_elem<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0 const&,0ul>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v4 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = v4;
  v5 = a2[4];
  a1[3] = 0;
  a1[4] = v5;
  v6 = (char *)a2[1];
  v7 = (char *)a2[2];
  v8 = v7 - v6;
  if (v7 != v6)
  {
    if (v8 < 0)
      abort();
    v9 = v8 >> 4;
    v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    a1[1] = v10;
    a1[2] = v10;
    a1[3] = &v10[2 * v9];
    do
    {
      if (v10)
      {
        v11 = *((_QWORD *)v6 + 1);
        *v10 = *(_QWORD *)v6;
        v10[1] = v11;
        if (v11)
        {
          v12 = (unint64_t *)(v11 + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
      }
      v6 += 16;
      v10 += 2;
    }
    while (v6 != v7);
    a1[2] = v10;
  }
  v14 = a2[6];
  a1[5] = a2[5];
  a1[6] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = a2[8];
  a1[7] = a2[7];
  a1[8] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  return a1;
}

void std::__function::__func<md::LabelGlyphImageLoader::onContentScaleDidChange(void)::$_0,std::allocator<md::LabelGlyphImageLoader::onContentScaleDidChange(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelGlyphImageLoader::onContentScaleDidChange(void)::$_0,std::allocator<md::LabelGlyphImageLoader::onContentScaleDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427A380;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelGlyphImageLoader::onContentScaleDidChange(void)::$_0,std::allocator<md::LabelGlyphImageLoader::onContentScaleDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427A380;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelGlyphImageLoader::onContentScaleDidChange(void)::$_0,std::allocator<md::LabelGlyphImageLoader::onContentScaleDidChange(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  md::FontGlyphCache *v5;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = v1[3];
  *(_DWORD *)(*v1 + 108) = (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(v2 + 232) + 8) + 176)
                                                 * (float)*(unsigned int *)(*(_QWORD *)(v2 + 232) + 52));
  v3 = *(_QWORD *)(v2 + 304);
  *(_BYTE *)(v3 + 120) = 1;
  md::FontAtlas::clearCells((md::FontAtlas *)v3);
  *(_DWORD *)(v3 + 116) = 0;
  v4 = operator new();
  md::FontGlyphCache::FontGlyphCache(v4, 1);
  v5 = *(md::FontGlyphCache **)(v3 + 128);
  *(_QWORD *)(v3 + 128) = v4;
  if (v5)
  {
    md::FontGlyphCache::~FontGlyphCache(v5);
    MEMORY[0x1A1AF4E00]();
  }
  return md::LabelRenderer::onMaxHaloSizeDidChange(*(_QWORD **)(v1[3] + 328));
}

uint64_t ggl::VertexDataTyped<ggl::DaVinci::DistanceCompressedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::DaVinci::DistanceCompressedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::DaVinci::DistanceCompressedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinci::DistanceCompressedMesh::~DistanceCompressedMesh(ggl::DaVinci::DistanceCompressedMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::DaVinci::DistanceCompressedMesh::~DistanceCompressedMesh(ggl::DaVinci::DistanceCompressedMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DaVinci::DistanceCompressedMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::DaVinci::DistanceCompressedMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void sub_19F8C6AD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_OWORD *md::mun::frustumFromGEOFrustumCorners(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD *result;
  __int128 v4;
  __int128 v5;
  float *v6;
  uint64_t v7;
  float *v8;
  float *v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;

  v2 = a2[1];
  *(_OWORD *)(a1 + 96) = *a2;
  *(_OWORD *)(a1 + 112) = v2;
  result = (_OWORD *)(a1 + 96);
  v4 = a2[3];
  result[2] = a2[2];
  result[3] = v4;
  v5 = a2[5];
  result[4] = a2[4];
  result[5] = v5;
  v6 = (float *)result - 22;
  v7 = 2u;
  do
  {
    v8 = (float *)result + 3 * geo::Frustum<float>::calculatePlanes(void)::pointsToPlane[v7 - 2];
    v9 = (float *)result + 3 * geo::Frustum<float>::calculatePlanes(void)::pointsToPlane[v7 - 1];
    v10 = (float *)result + 3 * geo::Frustum<float>::calculatePlanes(void)::pointsToPlane[v7];
    v11 = v8[1];
    v12 = *v9 - *v8;
    v13 = v9[1] - v11;
    v14 = v8[2];
    v15 = v9[2] - v14;
    v16 = 1.0 / sqrtf((float)((float)(v12 * v12) + (float)(v13 * v13)) + (float)(v15 * v15));
    v17 = v16 * v12;
    v18 = *v10 - *v8;
    v19 = v16 * v13;
    v20 = v10[1] - v11;
    v21 = v10[2] - v14;
    v22 = v16 * v15;
    v23 = 1.0 / sqrtf((float)((float)(v18 * v18) + (float)(v20 * v20)) + (float)(v21 * v21));
    v24 = v23 * v18;
    v25 = v23 * v20;
    v26 = v23 * v21;
    v27 = -(float)((float)(v25 * v22) - (float)(v26 * v19));
    v28 = -(float)((float)(v26 * v17) - (float)(v24 * v22));
    v29 = -(float)((float)(v24 * v19) - (float)(v25 * v17));
    v30 = 1.0 / sqrtf((float)((float)(v27 * v27) + (float)(v28 * v28)) + (float)(v29 * v29));
    v31 = v30 * v27;
    v32 = v30 * v28;
    v33 = v30 * v29;
    v34 = -(float)((float)((float)((float)(v30 * v27) * *v8) + (float)(v32 * v11)) + (float)(v33 * v14));
    *(v6 - 2) = v31;
    *(v6 - 1) = v32;
    *v6 = v33;
    v6[1] = v34;
    v6 += 4;
    v7 += 3;
  }
  while (v7 != 20);
  return result;
}

void md::mun::MetadataResourceFetcher::~MetadataResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

unint64_t md::mun::MetadataResourceFetcher::tileKey(uint64_t a1, void *a2)
{
  id v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a2;
  objc_msgSend(v2, "size");
  objc_msgSend(v2, "scale");
  v3 = objc_msgSend(v2, "style");
  v4 = GEOTileKeyMake();
  if (v3 <= 0x19 && ((1 << v3) & 0x200101C) != 0)
    v5 = 128;
  else
    v5 = (unint64_t)(v3 == 26) << 7;
  v6 = v5 | v4 & 0xFFFFFFFFFFFFFF7FLL;

  return v6;
}

void sub_19F8C6DF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::mun::MetadataResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDDC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::mun::MetadataResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDDC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::mun::MetadataResourceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

grl::FontManager *md::RoadSignArtworkGenerator::generateRoadSignArtwork(uint64_t a1, void *a2, uint64_t a3, __int128 *a4, uint64_t a5, double *a6, uint64_t *a7)
{
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  uint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  id v26;
  BOOL v27;
  grl::IconMetrics *v28;
  void *v29;
  uint64_t v30;
  grl::FontManager *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  const char *v35;
  size_t v36;
  size_t v37;
  double *v38;
  const __CTLine *v39;
  const __CTFramesetter *v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  const char *v44;
  size_t v45;
  size_t v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  int v51;
  void *v52;
  CFTypeRef v53;
  uint64_t v54;
  CGColorRef v55;
  uint64_t v56;
  id v57;
  void *v58;
  CFTypeRef v59;
  uint64_t v60;
  const __CTFont *v61;
  const __CTFont *v62;
  CGColorRef v63;
  uint64_t v64;
  double v65;
  const __CTFramesetter *v66;
  CGSize v67;
  CGPath *Mutable;
  double v69;
  double v70;
  const __CTFrame *v71;
  const __CFArray *Lines;
  unint64_t Count;
  const __CFArray *v74;
  const __CTLine *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;
  md::RoadSignArtworkGenerator *v79;
  const __CTLine *v80;
  char isLineRTL;
  double v82;
  double TypographicBounds;
  id v84;
  int v85;
  double height;
  const __CTLine *ValueAtIndex;
  const __CTFramesetter *v88;
  CGSize v89;
  CGPath *v90;
  const __CFArray *v91;
  unint64_t v92;
  CFIndex v93;
  uint64_t v94;
  CGPoint *v95;
  double *p_x;
  CGPoint *v97;
  CFIndex v98;
  CGRect *v99;
  CGRect *v100;
  CGRect *v101;
  const __CTLine *v102;
  CGFloat width;
  CGFloat v104;
  CGFloat y;
  CGFloat x;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  CGFloat *v111;
  char *v112;
  CGSize size;
  char *v114;
  double v115;
  double v116;
  double v117;
  double v118;
  VKRoadSignArtwork *v119;
  VKRoadSignArtwork *v120;
  VKRoadSignArtwork *v121;
  __int128 v122;
  unint64_t *v123;
  unint64_t v124;
  __int128 v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  double v129;
  double v130;
  double v131;
  double v132;
  uint64_t v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double *v138;
  double v139;
  double v140;
  CGRect *v141;
  unsigned __int8 *v142;
  uint64_t v143;
  double v144;
  double v145;
  unint64_t *v146;
  unint64_t v147;
  char v149;
  const __CTFrame *frame;
  double *v151;
  const __CTFramesetter *v152;
  const __CTFramesetter *v153;
  uint64_t v154;
  BOOL v155;
  uint64_t v156;
  double v157;
  double v158;
  double *__p;
  double v160;
  double v161;
  const __CTFont *v162;
  id v163;
  void *v165;
  NSMutableAttributedString *attrString;
  std::__shared_weak_count *v167;
  CGColorRef v168;
  void *v169;
  id v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  double v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  __int16 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  double __dst;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  double v219;
  __int128 v220;
  uint64_t v221;
  uint64_t v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  __int128 v226;
  __int16 v227;
  CGFloat descent;
  double v229;
  double v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  double v236;
  __int128 v237;
  __int128 v238;
  double v239;
  double v240;
  double v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t (**v246)();
  CFTypeRef v247;
  uint64_t (**v248)();
  CFTypeRef cf;
  grl::FontManager *v250;
  std::__shared_weak_count *v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  uint64_t v254;
  CFRange v255;
  CFRange v256;
  CFRange v257;
  CFRange v258;
  CFRange v259;
  CGSize v260;
  CGSize v261;
  CGRect v262;
  CGRect v263;
  CGRect v264;
  CGRect ImageBounds;
  CGRect v266;

  v254 = *MEMORY[0x1E0C80C00];
  v163 = a2;
  objc_msgSend(v163, "componentsSeparatedByString:", CFSTR("\n"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v165 = v12;
  objc_msgSend(v12, "objectAtIndex:", 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend(v12, "count") >= 2
    && (v14 = objc_msgSend(v13, "length"),
        v15 = objc_msgSend(v163, "length"),
        (v16 = v15 + ~objc_msgSend(v13, "length")) != 0))
  {
    objc_msgSend(v163, "substringWithRange:", v14 + 1, v16);
    v169 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v169 = 0;
  }
  v157 = *(double *)a3;
  v18 = *(double *)(a3 + 8);
  v17 = *(double *)(a3 + 16);
  v19 = *(_OWORD *)(a3 + 40);
  v20 = *(_OWORD *)(a3 + 72);
  v187 = *(_OWORD *)(a3 + 56);
  v188 = v20;
  v189 = *(_QWORD *)(a3 + 88);
  v185 = *(_OWORD *)(a3 + 24);
  v186 = v19;
  v21 = *(_OWORD *)(a3 + 120);
  v183 = *(_OWORD *)(a3 + 104);
  v184 = v21;
  v22 = *(double *)(a3 + 152);
  v160 = *(double *)(a3 + 136);
  v161 = *(double *)(a3 + 144);
  v171 = *a4;
  v172 = a4[1];
  v173 = a4[2];
  v174 = *((double *)a4 + 6);
  v177 = *((_QWORD *)a4 + 10);
  if (*((char *)a4 + 79) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v175, *((void **)a4 + 7), *((_QWORD *)a4 + 8));
  }
  else
  {
    v175 = *(__int128 *)((char *)a4 + 56);
    v176 = *((_QWORD *)a4 + 9);
  }
  v180 = *((_QWORD *)a4 + 14);
  if (*((char *)a4 + 111) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v178, *((void **)a4 + 11), *((_QWORD *)a4 + 12));
  }
  else
  {
    v178 = *(__int128 *)((char *)a4 + 88);
    v179 = *((_QWORD *)a4 + 13);
  }
  v181 = *(__int128 *)((char *)a4 + 120);
  v182 = *((_WORD *)a4 + 68);
  v23 = *a7;
  v167 = (std::__shared_weak_count *)a7[1];
  if (v167)
  {
    p_shared_weak_owners = (unint64_t *)&v167->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
  }
  v26 = v13;
  v170 = v169;
  v27 = *(_QWORD *)a6 != 0;
  v158 = *a6;
  if (*(_QWORD *)a6)
  {
    v28 = *(grl::IconMetrics **)(*(_QWORD *)a6 + 104);
    if (v28)
    {
      v160 = *(float *)grl::IconMetrics::size(v28);
      v161 = *(float *)(grl::IconMetrics::size(*(grl::IconMetrics **)(*(_QWORD *)a6 + 104)) + 4);
    }
  }
  v155 = v27;
  v156 = v23;
  +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "grlFontManager");
  v31 = *(grl::FontManager **)v30;
  v32 = *(std::__shared_weak_count **)(v30 + 8);
  v250 = *(grl::FontManager **)v30;
  v251 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
  }

  if (!v31)
  {
    v39 = 0;
    v40 = 0;
    if (!v32)
      goto LABEL_218;
    goto LABEL_214;
  }
  v151 = a6;
  attrString = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x1E0CB3778]);
  if (v26)
  {
    if (v176 >= 0)
      v35 = (const char *)&v175;
    else
      v35 = (const char *)v175;
    v36 = strlen(v35);
    if (v36 > 0x7FFFFFFFFFFFFFF7)
      abort();
    v37 = v36;
    if (v36 >= 0x17)
    {
      v41 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v36 | 7) != 0x17)
        v41 = v36 | 7;
      v42 = v41 + 1;
      *(double *)&v38 = COERCE_DOUBLE(operator new(v41 + 1));
      *((_QWORD *)&v199 + 1) = v42 | 0x8000000000000000;
      __dst = *(double *)&v38;
      *(_QWORD *)&v199 = v37;
    }
    else
    {
      HIBYTE(v199) = v36;
      *(double *)&v38 = COERCE_DOUBLE(&__dst);
      if (!v36)
      {
LABEL_37:
        *((_BYTE *)v38 + v37) = 0;
        v43 = round(*(double *)&v171 * *((double *)&v173 + 1) * *((double *)&v171 + 1));
        grl::FontManager::fontForKey(v31, (__int128 *)&__dst, &v248, v43);
        if (SHIBYTE(v199) < 0)
        {
          operator delete(*(void **)&__dst);
          if (v170)
            goto LABEL_39;
        }
        else if (v170)
        {
LABEL_39:
          v31 = v250;
          goto LABEL_40;
        }
        v51 = 0;
        v246 = &off_1E42B4950;
        v247 = 0;
        goto LABEL_56;
      }
    }
    memmove(v38, v35, v37);
    goto LABEL_37;
  }
  v248 = &off_1E42B4950;
  cf = 0;
  if (!v170)
  {
    v168 = 0;
    v162 = 0;
    v246 = &off_1E42B4950;
    v247 = 0;
    goto LABEL_83;
  }
LABEL_40:
  if (v179 >= 0)
    v44 = (const char *)&v178;
  else
    v44 = (const char *)v178;
  v45 = strlen(v44);
  if (v45 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v46 = v45;
  if (v45 >= 0x17)
  {
    v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v48 = v45 | 7;
    v49 = v48 + 1;
    *(double *)&v47 = COERCE_DOUBLE(operator new(v48 + 1));
    *((_QWORD *)&v199 + 1) = v49 | 0x8000000000000000;
    __dst = *(double *)&v47;
    *(_QWORD *)&v199 = v46;
    goto LABEL_50;
  }
  HIBYTE(v199) = v45;
  *(double *)&v47 = COERCE_DOUBLE(&__dst);
  if (v45)
LABEL_50:
    memmove(v47, v44, v46);
  *((_BYTE *)v47 + v46) = 0;
  v50 = round(*(double *)&v171 * v174 * *((double *)&v171 + 1));
  grl::FontManager::fontForKey(v31, (__int128 *)&__dst, &v246, v50);
  if (SHIBYTE(v199) < 0)
  {
    operator delete(*(void **)&__dst);
    if (v26)
      goto LABEL_53;
LABEL_65:
    v57 = v170;
    v162 = 0;
    v168 = 0;
LABEL_69:
    v58 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3778]), "initWithString:", v57);
    v59 = v247;
    if (v247)
    {
      v60 = objc_msgSend(v57, "length");
      objc_msgSend(v58, "addAttribute:value:range:", *MEMORY[0x1E0CA8188], v59, 0, v60);
      v61 = (const __CTFont *)v247;
      if (v247)
        CFRetain(v247);
      v62 = v162;
      if (v162)
      {
        v162 = v61;
        CFRelease(v62);
      }
      else
      {
        v162 = v61;
      }
    }
    if (*(_BYTE *)(a5 + 7))
    {
      v63 = CGColorCreate(*(CGColorSpaceRef *)(a1 + 64), (const CGFloat *)(a5 + 232));
      v64 = objc_msgSend(v57, "length");
      objc_msgSend(v58, "addAttribute:value:range:", *MEMORY[0x1E0CA8550], v63, 0, v64);
      if (v63)
        CFRetain(v63);
      if (v168)
        CFRelease(v168);
      CGColorRelease(v63);
    }
    else
    {
      v63 = v168;
    }
    -[NSMutableAttributedString appendAttributedString:](attrString, "appendAttributedString:", v58);

    v168 = v63;
    goto LABEL_83;
  }
  if (!v26)
    goto LABEL_65;
LABEL_53:
  v51 = 1;
LABEL_56:
  v52 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3778]), "initWithString:", v26);
  v53 = cf;
  if (cf
    && (v54 = objc_msgSend(v26, "length"),
        objc_msgSend(v52, "addAttribute:value:range:", *MEMORY[0x1E0CA8188], v53, 0, v54),
        cf))
  {
    v162 = (const __CTFont *)cf;
    CFRetain(cf);
  }
  else
  {
    v162 = 0;
  }
  if (*(_BYTE *)(a5 + 6))
  {
    v55 = CGColorCreate(*(CGColorSpaceRef *)(a1 + 64), (const CGFloat *)(a5 + 200));
    v56 = objc_msgSend(v26, "length");
    objc_msgSend(v52, "addAttribute:value:range:", *MEMORY[0x1E0CA8550], v55, 0, v56);
    if (v55)
      CFRetain(v55);
    CGColorRelease(v55);
  }
  else
  {
    v55 = 0;
  }
  v168 = v55;
  -[NSMutableAttributedString appendAttributedString:](attrString, "appendAttributedString:", v52);

  if (v51)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("\n%@"), v170);
    v57 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_69;
  }
LABEL_83:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v247)
  {
    CFRelease(v247);
    v247 = 0;
  }
  v65 = *((double *)&v181 + 1);
  v154 = a1;
  if (v182 < 2u)
  {
    v79 = CTLineCreateWithAttributedString((CFAttributedStringRef)attrString);
    isLineRTL = md::RoadSignArtworkGenerator::isLineRTL(v79, v80);
    v82 = *((double *)&v181 + 1);
    __dst = 0.0;
    descent = 0.0;
    TypographicBounds = CTLineGetTypographicBounds(v79, &__dst, &descent, 0);
    if (v65 == 0.0 || TypographicBounds <= v17 * v82)
    {
      v39 = v79;
    }
    else
    {
      md::RoadSignArtworkGenerator::truncateAttributedStringWithEllipsis((md::RoadSignArtworkGenerator *)a1, attrString, v79, v17 * v82, v162, v168);
      v39 = CTLineCreateWithAttributedString((CFAttributedStringRef)attrString);
      if (v79)
        CFRelease(v79);
      TypographicBounds = CTLineGetTypographicBounds(v39, &__dst, &descent, 0);
    }
    -[NSMutableAttributedString string](attrString, "string");
    v84 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v84, "canBeConvertedToEncoding:", 5))
    {

    }
    else
    {
      v85 = objc_msgSend(v84, "canBeConvertedToEncoding:", 9);

      if (!v85)
      {
        ImageBounds = CTLineGetImageBounds(v39, 0);
        height = ImageBounds.size.height;
LABEL_153:
        *(_QWORD *)&v181 = ceil(TypographicBounds);
        HIBYTE(v182) = isLineRTL;
        if (!v39)
        {
          __p = 0;
          v40 = 0;
          v99 = 0;
          goto LABEL_157;
        }
        v120 = [VKRoadSignArtwork alloc];
        descent = v157;
        v229 = v18;
        v230 = v17;
        v232 = v186;
        v233 = v187;
        v234 = v188;
        v235 = v189;
        v231 = v185;
        v237 = v183;
        v238 = v184;
        v236 = (height + round(*(double *)&v171 * *((double *)&v172 + 1) * *((double *)&v171 + 1)) * 2.0) / (v18 * v17);
        v239 = v160;
        v240 = v161;
        v241 = v22;
        v216 = v171;
        v217 = v172;
        v218 = v173;
        v219 = v174;
        v222 = v177;
        if (SHIBYTE(v176) < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v220, (void *)v175, *((unint64_t *)&v175 + 1));
        }
        else
        {
          v220 = v175;
          v221 = v176;
        }
        v225 = v180;
        if (SHIBYTE(v179) < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v223, (void *)v178, *((unint64_t *)&v178 + 1));
        }
        else
        {
          v223 = v178;
          v224 = v179;
        }
        v226 = v181;
        v227 = v182;
        __dst = *(double *)a5;
        v199 = *(_OWORD *)(a5 + 8);
        v200 = *(_OWORD *)(a5 + 24);
        v201 = *(_OWORD *)(a5 + 40);
        v202 = *(_OWORD *)(a5 + 56);
        v204 = *(_OWORD *)(a5 + 88);
        v203 = *(_OWORD *)(a5 + 72);
        v206 = *(_OWORD *)(a5 + 120);
        v205 = *(_OWORD *)(a5 + 104);
        v208 = *(_OWORD *)(a5 + 152);
        v207 = *(_OWORD *)(a5 + 136);
        v210 = *(_OWORD *)(a5 + 184);
        v209 = *(_OWORD *)(a5 + 168);
        v212 = *(_OWORD *)(a5 + 216);
        v211 = *(_OWORD *)(a5 + 200);
        v122 = *(_OWORD *)(a5 + 232);
        v214 = *(_OWORD *)(a5 + 248);
        v213 = v122;
        v215 = *(_QWORD *)(a5 + 264);
        v252 = v156;
        v253 = v167;
        if (v167)
        {
          v123 = (unint64_t *)&v167->__shared_weak_owners_;
          do
            v124 = __ldxr(v123);
          while (__stxr(v124 + 1, v123));
        }
        v121 = -[VKRoadSignArtwork initWithLine:signMetrics:textMetrics:signColoring:glyph:cgGlyph:resourceStore:](v120, "initWithLine:signMetrics:textMetrics:signColoring:glyph:cgGlyph:resourceStore:", v39, &descent, &v216, &__dst, a6, 0, &v252);
        if (v253)
          std::__shared_weak_count::__release_weak(v253);
        if (SHIBYTE(v224) < 0)
        {
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v225 + 40))(v225, v223, v224 & 0x7FFFFFFFFFFFFFFFLL);
          if ((SHIBYTE(v221) & 0x80000000) == 0)
            goto LABEL_169;
        }
        else if ((SHIBYTE(v221) & 0x80000000) == 0)
        {
          goto LABEL_169;
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v222 + 40))(v222, v220, v221 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_169:
        p_x = 0;
        __p = 0;
        v40 = 0;
        v99 = 0;
        v100 = 0;
        v155 = 0;
        if (!v121)
          goto LABEL_201;
        goto LABEL_188;
      }
    }
    height = __dst - descent;
    goto LABEL_153;
  }
  v66 = CTFramesetterCreateWithAttributedString((CFAttributedStringRef)attrString);
  v260.width = v17 * v65;
  v260.height = 1.79769313e308;
  v255.location = 0;
  v255.length = 0;
  v152 = v66;
  v67 = CTFramesetterSuggestFrameSizeWithConstraints(v66, v255, 0, v260, 0);
  Mutable = CGPathCreateMutable();
  v69 = ceil(v67.width);
  v70 = ceil(v67.height);
  v262.origin.x = 0.0;
  v262.origin.y = 0.0;
  v262.size.width = v69;
  v262.size.height = v70;
  CGPathAddRect(Mutable, 0, v262);
  v256.location = 0;
  v256.length = 0;
  v71 = CTFramesetterCreateFrame(v66, v256, Mutable, 0);
  Lines = CTFrameGetLines(v71);
  Count = CFArrayGetCount(Lines);
  v245 = 0u;
  v244 = 0u;
  v243 = 0u;
  v242 = 0u;
  v74 = Lines;
  v76 = -[__CFArray countByEnumeratingWithState:objects:count:](v74, "countByEnumeratingWithState:objects:count:", &v242, &v252, 16);
  if (v76)
  {
    v77 = *(_QWORD *)v243;
    while (2)
    {
      for (i = 0; i != v76; ++i)
      {
        if (*(_QWORD *)v243 != v77)
          objc_enumerationMutation(v74);
        if ((md::RoadSignArtworkGenerator::isLineRTL(*(md::RoadSignArtworkGenerator **)(*((_QWORD *)&v242 + 1) + 8 * i), v75) & 1) != 0)
        {
          v149 = 1;
          goto LABEL_109;
        }
      }
      v76 = -[__CFArray countByEnumeratingWithState:objects:count:](v74, "countByEnumeratingWithState:objects:count:", &v242, &v252, 16);
      if (v76)
        continue;
      break;
    }
    v149 = 0;
  }
  else
  {
    v149 = 0;
  }
LABEL_109:

  v40 = v152;
  if (Count > v182)
  {
    ValueAtIndex = (const __CTLine *)CFArrayGetValueAtIndex(v74, v182 - 1);
    md::RoadSignArtworkGenerator::truncateAttributedStringWithEllipsis((md::RoadSignArtworkGenerator *)a1, attrString, ValueAtIndex, v69, v162, v168);
    v88 = CTFramesetterCreateWithAttributedString((CFAttributedStringRef)attrString);
    if (v152)
      CFRelease(v152);
    v257.location = 0;
    v257.length = 0;
    v261.width = v69;
    v261.height = v70;
    v89 = CTFramesetterSuggestFrameSizeWithConstraints(v88, v257, 0, v261, (CFRange *)&__dst);
    v69 = ceil(v89.width);
    v70 = ceil(v89.height);
    v40 = v88;
  }
  CFRelease(v71);
  CFRelease(Mutable);
  if ((v158 == 0.0 || Count <= 1) && !*(_BYTE *)(a1 + 80))
  {
    p_x = 0;
    __p = 0;
    v100 = 0;
    v99 = 0;
  }
  else
  {
    v90 = CGPathCreateMutable();
    v263.origin.x = 0.0;
    v263.origin.y = 0.0;
    v263.size.width = v69;
    v263.size.height = v70;
    CGPathAddRect(v90, 0, v263);
    v258.location = 0;
    v258.length = 0;
    frame = CTFramesetterCreateFrame(v40, v258, v90, 0);
    v91 = CTFrameGetLines(frame);
    v92 = CFArrayGetCount(v91);
    v93 = v92;
    if (v92)
    {
      if (v92 >> 60)
        abort();
      v94 = v92;
      v95 = (CGPoint *)operator new(16 * v92);
      bzero(v95, 16 * v93);
      p_x = &v95[v94].x;
      v97 = v95;
    }
    else
    {
      p_x = 0;
      v97 = 0;
    }
    v259.location = 0;
    v259.length = v93;
    CTFrameGetLineOrigins(frame, v259, v97);
    v153 = v40;
    __p = &v97->x;
    if (v97 == (CGPoint *)p_x)
    {
      v100 = 0;
      v99 = 0;
    }
    else
    {
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      do
      {
        v102 = (const __CTLine *)CFArrayGetValueAtIndex(v91, v98);
        v264 = CTLineGetImageBounds(v102, 0);
        width = v264.size.width;
        v104 = v264.size.height;
        x = v97->x;
        y = v97->y;
        if (v100 < v101)
        {
          v100->origin.x = x;
          v100->origin.y = y;
          v100->size.width = v264.size.width;
          v100->size.height = v264.size.height;
          ++v100;
        }
        else
        {
          v107 = v100 - v99;
          v108 = v107 + 1;
          if ((unint64_t)(v107 + 1) >> 59)
            abort();
          if (((char *)v101 - (char *)v99) >> 4 > v108)
            v108 = ((char *)v101 - (char *)v99) >> 4;
          if ((unint64_t)((char *)v101 - (char *)v99) >= 0x7FFFFFFFFFFFFFE0)
            v109 = 0x7FFFFFFFFFFFFFFLL;
          else
            v109 = v108;
          if (v109)
          {
            if (v109 >> 59)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v110 = (char *)operator new(32 * v109);
          }
          else
          {
            v110 = 0;
          }
          v111 = (CGFloat *)&v110[32 * v107];
          *v111 = x;
          v111[1] = y;
          v111[2] = width;
          v111[3] = v104;
          if (v100 == v99)
          {
            v114 = &v110[32 * v107];
          }
          else
          {
            v112 = &v110[32 * v107];
            do
            {
              size = v100[-1].size;
              v114 = v112 - 32;
              *((_OWORD *)v112 - 2) = v100[-1].origin;
              *((CGSize *)v112 - 1) = size;
              --v100;
              v112 -= 32;
            }
            while (v100 != v99);
          }
          v101 = (CGRect *)&v110[32 * v109];
          v100 = (CGRect *)(v111 + 4);
          if (v99)
            operator delete(v99);
          v99 = (CGRect *)v114;
          v12 = v165;
        }
        ++v98;
        ++v97;
      }
      while (v97 != (CGPoint *)p_x);
    }
    v40 = v153;
    CFRelease(frame);
    CFRelease(v90);
  }
  v115 = v70 * 0.5;
  v116 = round(*(double *)&v171 * *((double *)&v172 + 1) * *((double *)&v171 + 1));
  v117 = (v70 + v116 * 2.0) / (v18 * v17);
  *(_QWORD *)&v181 = ceil(v69);
  if (v158 == 0.0)
    v118 = v117 * 0.5;
  else
    v118 = v115;
  HIBYTE(v182) = v149;
  if (!v40)
  {
    v39 = 0;
LABEL_157:
    v121 = 0;
    goto LABEL_201;
  }
  v158 = v115;
  v119 = [VKRoadSignArtwork alloc];
  descent = v157;
  v229 = v18;
  v230 = v17;
  v232 = v186;
  v233 = v187;
  v234 = v188;
  v235 = v189;
  v231 = v185;
  v237 = v183;
  v238 = v184;
  v236 = v117;
  v239 = v160;
  v240 = v161;
  v241 = floor(floor((v116 + v118) / (v18 * v17)) - v117 * 0.5) * (v18 * v17);
  v216 = v171;
  v217 = v172;
  v218 = v173;
  v219 = v174;
  v222 = v177;
  if (SHIBYTE(v176) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v220, (void *)v175, *((unint64_t *)&v175 + 1));
  }
  else
  {
    v220 = v175;
    v221 = v176;
  }
  v225 = v180;
  if (SHIBYTE(v179) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v223, (void *)v178, *((unint64_t *)&v178 + 1));
  }
  else
  {
    v223 = v178;
    v224 = v179;
  }
  v226 = v181;
  v227 = v182;
  __dst = *(double *)a5;
  v199 = *(_OWORD *)(a5 + 8);
  v200 = *(_OWORD *)(a5 + 24);
  v201 = *(_OWORD *)(a5 + 40);
  v202 = *(_OWORD *)(a5 + 56);
  v204 = *(_OWORD *)(a5 + 88);
  v203 = *(_OWORD *)(a5 + 72);
  v206 = *(_OWORD *)(a5 + 120);
  v205 = *(_OWORD *)(a5 + 104);
  v208 = *(_OWORD *)(a5 + 152);
  v207 = *(_OWORD *)(a5 + 136);
  v210 = *(_OWORD *)(a5 + 184);
  v209 = *(_OWORD *)(a5 + 168);
  v212 = *(_OWORD *)(a5 + 216);
  v211 = *(_OWORD *)(a5 + 200);
  v125 = *(_OWORD *)(a5 + 232);
  v214 = *(_OWORD *)(a5 + 248);
  v213 = v125;
  v215 = *(_QWORD *)(a5 + 264);
  v196 = v156;
  v197 = v167;
  if (v167)
  {
    v126 = (unint64_t *)&v167->__shared_weak_owners_;
    do
      v127 = __ldxr(v126);
    while (__stxr(v127 + 1, v126));
  }
  v121 = -[VKRoadSignArtwork initWithFramesetter:signMetrics:textMetrics:signColoring:glyph:cgGlyph:resourceStore:](v119, "initWithFramesetter:signMetrics:textMetrics:signColoring:glyph:cgGlyph:resourceStore:", v40, &descent, &v216, &__dst, v151, 0, &v196);
  if (v197)
    std::__shared_weak_count::__release_weak(v197);
  if (SHIBYTE(v224) < 0)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v225 + 40))(v225, v223, v224 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SHIBYTE(v221) & 0x80000000) == 0)
    {
LABEL_184:
      v39 = 0;
      if (!v121)
        goto LABEL_201;
      goto LABEL_188;
    }
  }
  else if ((SHIBYTE(v221) & 0x80000000) == 0)
  {
    goto LABEL_184;
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v222 + 40))(v222, v220, v221 & 0x7FFFFFFFFFFFFFFFLL);
  v39 = 0;
  if (!v121)
    goto LABEL_201;
LABEL_188:
  if (*(_BYTE *)(v154 + 80))
  {
    v128 = -[VKRoadSignArtwork generatedMetrics](v121, "generatedMetrics");
    v129 = *(double *)(v128 + 728);
    v130 = *(double *)(v128 + 736);
    v131 = *(double *)(v128 + 744);
    v132 = *(double *)(v128 + 752);
    v133 = -[VKRoadSignArtwork generatedMetrics](v121, "generatedMetrics");
    v134 = *(double *)(v133 + 816);
    v135 = *(double *)(v133 + 824);
    v136 = *(double *)(v133 + 832);
    v137 = *(double *)(v133 + 840);
    if (__p != p_x)
    {
      v138 = __p;
      do
      {
        v139 = *v138 + v134;
        v140 = v138[1] + v135;
        v195 = xmmword_19FFB3950;
        -[VKRoadSignArtwork addDebugPoint:color:](v121, "addDebugPoint:color:", &v195, v139, v140);
        v138 += 2;
      }
      while (v138 != p_x);
    }
    if (v99 != v100)
    {
      v141 = v99;
      do
      {
        v266 = CGRectOffset(*v141, v134, v135);
        v194 = xmmword_19FFB2D90;
        -[VKRoadSignArtwork addDebugRect:color:](v121, "addDebugRect:color:", &v194, v266.origin.x, v266.origin.y, v266.size.width, v266.size.height);
        ++v141;
      }
      while (v141 != v100);
    }
    if (v155)
    {
      v193 = xmmword_19FFB3950;
      -[VKRoadSignArtwork addDebugPoint:color:](v121, "addDebugPoint:color:", &v193, v129 + v131 * 0.5, v135 + v158);
    }
    v192 = xmmword_19FFB2D90;
    -[VKRoadSignArtwork addDebugRect:color:](v121, "addDebugRect:color:", &v192, v134, v135, v136, v137);
    v191 = xmmword_19FFB3970;
    -[VKRoadSignArtwork addDebugRect:color:](v121, "addDebugRect:color:", &v191, v129, v130, v131, v132);
    v142 = -[VKRoadSignArtwork generatedMetrics](v121, "generatedMetrics");
    if (v142[96] | v142[264] || v142[672] && v142[600])
    {
      v143 = -[VKRoadSignArtwork generatedMetrics](v121, "generatedMetrics");
      v144 = *(double *)(v143 + 784);
      v145 = *(double *)(v143 + 792);
      v190 = xmmword_19FFB2D90;
      -[VKRoadSignArtwork addDebugPoint:color:](v121, "addDebugPoint:color:", &v190, v144, v145);
    }
  }
LABEL_201:
  v31 = v121;

  if (v168)
    CFRelease(v168);
  if (v162)
    CFRelease(v162);
  v246 = &off_1E42B4950;
  if (v247)
    CFRelease(v247);
  v248 = &off_1E42B4950;
  if (cf)
    CFRelease(cf);

  if (v99)
    operator delete(v99);
  if (__p)
    operator delete(__p);
  v32 = v251;
  if (v251)
  {
LABEL_214:
    v146 = (unint64_t *)&v32->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
LABEL_218:
  if (v39)
    CFRelease(v39);
  if (v40)
    CFRelease(v40);

  if (v167)
    std::__shared_weak_count::__release_weak(v167);
  if (SHIBYTE(v179) < 0)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v180 + 40))(v180, v178, v179 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SHIBYTE(v176) & 0x80000000) == 0)
      goto LABEL_226;
LABEL_228:
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v177 + 40))(v177, v175, v176 & 0x7FFFFFFFFFFFFFFFLL);
    goto LABEL_226;
  }
  if (SHIBYTE(v176) < 0)
    goto LABEL_228;
LABEL_226:

  return v31;
}

void sub_19F8C83F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,CFTypeRef a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,std::__shared_weak_count *a36,CFTypeRef cf,void *a38,char a39)
{
  void *v39;
  const void *v40;

  if (SLOBYTE(STACK[0x3BF]) < 0)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)STACK[0x3C0] + 40))(STACK[0x3C0], STACK[0x3A8], STACK[0x3B8] & 0x7FFFFFFFFFFFFFFFLL);
  if (cf)
    CFRelease(cf);
  if (a28)
    CFRelease(a28);
  STACK[0x4E8] = (unint64_t)&off_1E42B4950;
  if (STACK[0x4F0])
    CFRelease((CFTypeRef)STACK[0x4F0]);
  STACK[0x500] = (unint64_t)&off_1E42B4950;
  if (STACK[0x508])
    CFRelease((CFTypeRef)STACK[0x508]);

  if (v39)
    operator delete(v39);
  if (__p)
    operator delete(__p);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x518]);
  if (v40)
    CFRelease(v40);

  if (a36)
    std::__shared_weak_count::__release_weak(a36);
  md::RoadSignTextMetrics::~RoadSignTextMetrics((md::RoadSignTextMetrics *)&a39);

  _Unwind_Resume(a1);
}

void md::RoadSignTextMetrics::~RoadSignTextMetrics(md::RoadSignTextMetrics *this)
{
  if ((*((char *)this + 111) & 0x80000000) == 0)
  {
    if ((*((char *)this + 79) & 0x80000000) == 0)
      return;
LABEL_5:
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 10) + 40))(*((_QWORD *)this + 10), *((_QWORD *)this + 7), *((_QWORD *)this + 9) & 0x7FFFFFFFFFFFFFFFLL);
    return;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 14) + 40))(*((_QWORD *)this + 14), *((_QWORD *)this + 11), *((_QWORD *)this + 13) & 0x7FFFFFFFFFFFFFFFLL);
  if (*((char *)this + 79) < 0)
    goto LABEL_5;
}

uint64_t md::RoadSignArtworkGenerator::isLineRTL(md::RoadSignArtworkGenerator *this, const __CTLine *a2)
{
  const __CFArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = CTLineGetGlyphRuns(this);
  v3 = -[__CFArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v2);
        if ((CTRunGetStatus(*(CTRunRef *)(*((_QWORD *)&v7 + 1) + 8 * i)) & 1) != 0)
        {
          v3 = 1;
          goto LABEL_11;
        }
      }
      v3 = -[__CFArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_11:

  return v3;
}

void sub_19F8C8970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::RoadSignArtworkGenerator::truncateAttributedStringWithEllipsis(md::RoadSignArtworkGenerator *this, NSMutableAttributedString *a2, const __CTLine *a3, double a4, const __CTFont *a5, CGColor *a6)
{
  unint64_t v6;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  double **v19;
  double *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  const __CFAttributedString *v24;
  const __CTFramesetter *v25;
  double v26;
  unint64_t v27;
  uint8x8_t v28;
  double **v29;
  double *v30;
  unint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t prime;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  size_t v44;
  size_t v45;
  size_t v46;
  _QWORD *i;
  size_t v48;
  uint64_t v49;
  unint64_t v50;
  uint8x8_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  size_t v55;
  double **v56;
  unint64_t v57;
  double v58;
  CFIndex StringIndexForPosition;
  CFIndex location;
  uint64_t v61;
  CFIndex v62;
  uint64_t v63;
  NSMutableAttributedString *v64;
  id v65;
  _QWORD v66[2];
  _QWORD v67[3];
  CFRange v68;
  CGSize v69;
  CGPoint v70;

  v67[2] = *MEMORY[0x1E0C80C00];
  v64 = a2;
  if (a5)
  {
    v12 = *MEMORY[0x1E0CA8550];
    v66[0] = *MEMORY[0x1E0CA8188];
    v66[1] = v12;
    v67[0] = a5;
    v67[1] = a6;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v67, v66, 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v13 = 0;
  }
  v14 = objc_msgSend(v13, "hash", v64);
  v15 = v14;
  v16 = *(int8x8_t *)((char *)this + 8);
  if (v16)
  {
    v17 = (uint8x8_t)vcnt_s8(v16);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      v18 = v14;
      if (v14 >= *(_QWORD *)&v16)
        v18 = v14 % *(_QWORD *)&v16;
    }
    else
    {
      v18 = (*(_QWORD *)&v16 - 1) & v14;
    }
    v19 = *(double ***)(*(_QWORD *)this + 8 * v18);
    if (v19)
    {
      v20 = *v19;
      if (v20)
      {
        if (v17.u32[0] < 2uLL)
        {
          v21 = *(_QWORD *)&v16 - 1;
          while (1)
          {
            v23 = *((_QWORD *)v20 + 1);
            if (v23 == v14)
            {
              if (*((_QWORD *)v20 + 2) == v14)
                goto LABEL_109;
            }
            else if ((v23 & v21) != v18)
            {
              goto LABEL_24;
            }
            v20 = *(double **)v20;
            if (!v20)
              goto LABEL_24;
          }
        }
        do
        {
          v22 = *((_QWORD *)v20 + 1);
          if (v22 == v14)
          {
            if (*((_QWORD *)v20 + 2) == v14)
            {
LABEL_109:
              v58 = v20[3];
              goto LABEL_105;
            }
          }
          else
          {
            if (v22 >= *(_QWORD *)&v16)
              v22 %= *(_QWORD *)&v16;
            if (v22 != v18)
              break;
          }
          v20 = *(double **)v20;
        }
        while (v20);
      }
    }
  }
LABEL_24:
  v24 = (const __CFAttributedString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:attributes:", CFSTR("…"), v13);
  v25 = CTFramesetterCreateWithAttributedString(v24);
  v69.width = 1.79769313e308;
  v68.location = 0;
  v68.length = 0;
  v69.height = 1.79769313e308;
  *(_QWORD *)&v26 = *(_OWORD *)&CTFramesetterSuggestFrameSizeWithConstraints(v25, v68, 0, v69, 0);
  CFRelease(v25);
  v27 = *((_QWORD *)this + 1);
  if (v27)
  {
    v28 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
    v28.i16[0] = vaddlv_u8(v28);
    if (v28.u32[0] > 1uLL)
    {
      v6 = v15;
      if (v15 >= v27)
        v6 = v15 % v27;
    }
    else
    {
      v6 = (v27 - 1) & v15;
    }
    v29 = *(double ***)(*(_QWORD *)this + 8 * v6);
    if (v29)
    {
      v30 = *v29;
      if (*v29)
      {
        if (v28.u32[0] < 2uLL)
        {
          while (1)
          {
            v32 = *((_QWORD *)v30 + 1);
            if (v32 == v15)
            {
              if (*((_QWORD *)v30 + 2) == v15)
                goto LABEL_104;
            }
            else if ((v32 & (v27 - 1)) != v6)
            {
              goto LABEL_45;
            }
            v30 = *(double **)v30;
            if (!v30)
              goto LABEL_45;
          }
        }
        do
        {
          v31 = *((_QWORD *)v30 + 1);
          if (v31 == v15)
          {
            if (*((_QWORD *)v30 + 2) == v15)
              goto LABEL_104;
          }
          else
          {
            if (v31 >= v27)
              v31 %= v27;
            if (v31 != v6)
              break;
          }
          v30 = *(double **)v30;
        }
        while (v30);
      }
    }
  }
LABEL_45:
  v30 = (double *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), 32, 8);
  *v30 = 0.0;
  *((_QWORD *)v30 + 1) = v15;
  *((_QWORD *)v30 + 2) = v15;
  v30[3] = 0.0;
  v33 = (float)(unint64_t)(*((_QWORD *)this + 5) + 1);
  v34 = *((float *)this + 12);
  if (!v27 || (float)(v34 * (float)v27) < v33)
  {
    v35 = 1;
    if (v27 >= 3)
      v35 = (v27 & (v27 - 1)) != 0;
    v36 = v35 | (2 * v27);
    v37 = vcvtps_u32_f32(v33 / v34);
    if (v36 <= v37)
      prime = v37;
    else
      prime = v36;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v27 = *((_QWORD *)this + 1);
    if (prime <= v27)
    {
      if (prime >= v27)
        goto LABEL_81;
      v50 = vcvtps_u32_f32((float)*((unint64_t *)this + 5) / *((float *)this + 12));
      if (v27 < 3 || (v51 = (uint8x8_t)vcnt_s8((int8x8_t)v27), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
      {
        v50 = std::__next_prime(v50);
      }
      else
      {
        v52 = 1 << -(char)__clz(v50 - 1);
        if (v50 >= 2)
          v50 = v52;
      }
      if (prime <= v50)
        prime = v50;
      if (prime >= v27)
      {
        v27 = *((_QWORD *)this + 1);
LABEL_81:
        if ((v27 & (v27 - 1)) != 0)
        {
          if (v15 >= v27)
            v6 = v15 % v27;
          else
            v6 = v15;
        }
        else
        {
          v6 = (v27 - 1) & v15;
        }
        goto LABEL_94;
      }
      if (!prime)
      {
        v63 = *(_QWORD *)this;
        *(_QWORD *)this = 0;
        if (v63)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2), v63, 8 * *((_QWORD *)this + 1));
        v27 = 0;
        *((_QWORD *)this + 1) = 0;
        goto LABEL_81;
      }
    }
    v39 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 8 * prime, 8);
    v40 = *(_QWORD *)this;
    *(_QWORD *)this = v39;
    if (v40)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2), v40, 8 * *((_QWORD *)this + 1));
    v41 = 0;
    *((_QWORD *)this + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)this + 8 * v41++) = 0;
    while (prime != v41);
    v43 = (char *)this + 24;
    v42 = (_QWORD *)*((_QWORD *)this + 3);
    if (!v42)
    {
LABEL_80:
      v27 = prime;
      goto LABEL_81;
    }
    v44 = v42[1];
    v45 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v46 = v44 & v45;
      *(_QWORD *)(*(_QWORD *)this + 8 * v46) = v43;
      for (i = (_QWORD *)*v42; *v42; i = (_QWORD *)*v42)
      {
        v48 = i[1] & v45;
        if (v48 == v46)
        {
          v42 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)this + 8 * v48))
        {
          *v42 = *i;
          v49 = 8 * v48;
          *i = **(_QWORD **)(*(_QWORD *)this + v49);
          **(_QWORD **)(*(_QWORD *)this + v49) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)this + 8 * v48) = v42;
          v42 = i;
          v46 = v48;
        }
      }
      goto LABEL_80;
    }
    if (v44 >= prime)
      v44 %= prime;
    *(_QWORD *)(*(_QWORD *)this + 8 * v44) = v43;
    v53 = (_QWORD *)*v42;
    if (!*v42)
      goto LABEL_80;
    while (1)
    {
      v55 = v53[1];
      if (v55 >= prime)
        v55 %= prime;
      if (v55 != v44)
      {
        if (!*(_QWORD *)(*(_QWORD *)this + 8 * v55))
        {
          *(_QWORD *)(*(_QWORD *)this + 8 * v55) = v42;
          goto LABEL_85;
        }
        *v42 = *v53;
        v54 = 8 * v55;
        *v53 = **(_QWORD **)(*(_QWORD *)this + v54);
        **(_QWORD **)(*(_QWORD *)this + v54) = v53;
        v53 = v42;
      }
      v55 = v44;
LABEL_85:
      v42 = v53;
      v53 = (_QWORD *)*v53;
      v44 = v55;
      if (!v53)
        goto LABEL_80;
    }
  }
LABEL_94:
  v56 = *(double ***)(*(_QWORD *)this + 8 * v6);
  if (v56)
  {
    *(_QWORD *)v30 = *v56;
  }
  else
  {
    *v30 = *((double *)this + 3);
    *((_QWORD *)this + 3) = v30;
    *(_QWORD *)(*(_QWORD *)this + 8 * v6) = (char *)this + 24;
    if (!*(_QWORD *)v30)
      goto LABEL_103;
    v57 = *(_QWORD *)(*(_QWORD *)v30 + 8);
    if ((v27 & (v27 - 1)) != 0)
    {
      if (v57 >= v27)
        v57 %= v27;
    }
    else
    {
      v57 &= v27 - 1;
    }
    v56 = (double **)(*(_QWORD *)this + 8 * v57);
  }
  *v56 = v30;
LABEL_103:
  ++*((_QWORD *)this + 5);
LABEL_104:
  v58 = ceil(v26);
  v30[3] = v58;

LABEL_105:
  v70.y = 0.0;
  v70.x = fmax(a4 - v58, 0.0);
  StringIndexForPosition = CTLineGetStringIndexForPosition(a3, v70);
  location = CTLineGetStringRange(a3).location;
  v61 = objc_msgSend(v65, "length");
  if (location <= StringIndexForPosition - 1)
    v62 = StringIndexForPosition - 1;
  else
    v62 = location;
  objc_msgSend(v65, "replaceCharactersInRange:withString:", v62, v61 - v62, CFSTR("…"));

}

void sub_19F8C903C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v10 + 32) + 40))(*(_QWORD *)(v10 + 32), v12, 32);

  _Unwind_Resume(a1);
}

_QWORD *geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E42B4950;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

{
  const void *v2;

  *a1 = &off_1E42B4970;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

void geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v1;

  *a1 = &off_1E42B4950;
  v1 = (const void *)a1[1];
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1A1AF4E00);
}

{
  const void *v1;

  *a1 = &off_1E42B4970;
  v1 = (const void *)a1[1];
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1A1AF4E00);
}

void md::FontAtlas::~FontAtlas(md::FontAtlas *this)
{
  md::FontAtlas::~FontAtlas(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  md::FontGlyphCache *v4;
  void *v5;
  md::FontGlyphCache *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __CFNotificationCenter *LocalCenter;

  *(_QWORD *)this = &off_1E42AF750;
  *((_BYTE *)this + 120) = 1;
  md::FontAtlas::clearCells(this);
  *((_DWORD *)this + 29) = 0;
  v2 = operator new();
  v3 = md::FontGlyphCache::FontGlyphCache(v2, 1);
  v4 = (md::FontGlyphCache *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v3;
  if (v4)
  {
    md::FontGlyphCache::~FontGlyphCache(v4);
    MEMORY[0x1A1AF4E00]();
  }
  v5 = (void *)*((_QWORD *)this + 17);
  if (v5)
  {
    *((_QWORD *)this + 18) = v5;
    operator delete(v5);
  }
  v6 = (md::FontGlyphCache *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v6)
  {
    md::FontGlyphCache::~FontGlyphCache(v6);
    MEMORY[0x1A1AF4E00]();
  }
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {
    *((_QWORD *)this + 7) = v7;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), v7, *((_QWORD *)this + 8) - v7);
  }
  v8 = (_QWORD *)*((_QWORD *)this + 2);
  if (v8)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 3);
    v10 = *((_QWORD *)this + 2);
    if (v9 != v8)
    {
      do
      {
        v12 = *--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
        {
          v13 = *(_QWORD *)(v11 - 8);
          if (v13)
          {
            v14 = v11 + 48 * v13;
            do
            {
              v15 = *(std::__shared_weak_count **)(v14 - 8);
              if (v15)
              {
                p_shared_owners = (unint64_t *)&v15->__shared_owners_;
                do
                  v17 = __ldaxr(p_shared_owners);
                while (__stlxr(v17 - 1, p_shared_owners));
                if (!v17)
                {
                  ((void (*)(std::__shared_weak_count *, uint64_t))v15->__on_zero_shared)(v15, v10);
                  std::__shared_weak_count::__release_weak(v15);
                }
              }
              v14 -= 48;
            }
            while (v14 != v11);
          }
          MEMORY[0x1A1AF4DE8](v11 - 16, 0x1020C80D08A26EBLL);
        }
      }
      while (v9 != v8);
      v10 = *((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5), v10, *((_QWORD *)this + 4) - v10);
  }
  *(_QWORD *)this = &off_1E4299F90;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, this);
}

void sub_19F8C9318(_Unwind_Exception *a1)
{
  void *v1;
  void *v3;
  uint64_t v4;
  __CFNotificationCenter *LocalCenter;

  v3 = (void *)*((_QWORD *)v1 + 17);
  if (v3)
  {
    *((_QWORD *)v1 + 18) = v3;
    operator delete(v3);
  }
  std::unique_ptr<md::FontGlyphCache>::~unique_ptr[abi:nn180100]((md::FontGlyphCache **)v1 + 16);
  v4 = *((_QWORD *)v1 + 6);
  if (v4)
  {
    *((_QWORD *)v1 + 7) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v1 + 9) + 40))(*((_QWORD *)v1 + 9), v4, *((_QWORD *)v1 + 8) - v4);
  }
  std::vector<std::unique_ptr<md::FontAtlasCell []>,geo::StdAllocator<std::unique_ptr<md::FontAtlasCell []>,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t)v1 + 16);
  *(_QWORD *)v1 = &off_1E4299F90;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, v1);
  _Unwind_Resume(a1);
}

void md::FontAtlas::clearCells(md::FontAtlas *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  v3 = (uint64_t *)*((_QWORD *)this + 3);
  if (v2 != v3)
  {
    do
    {
      for (i = 0; i != 32; ++i)
      {
        v5 = *v2;
        v6 = *(_QWORD *)(*v2 + 48 * i + 8);
        if (v6)
          *(_QWORD *)(v6 + 96) = 0;
        v7 = v5 + 48 * i;
        v10 = *(_QWORD *)(v7 + 32);
        v9 = (_QWORD *)(v7 + 32);
        v8 = v10;
        if (v10)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          v11 = *(std::__shared_weak_count **)(v5 + 48 * i + 40);
          *v9 = 0;
          v9[1] = 0;
          if (v11)
          {
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldaxr(p_shared_owners);
            while (__stlxr(v13 - 1, p_shared_owners));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
        }
      }
      ++v2;
    }
    while (v2 != v3);
    v14 = (uint64_t *)*((_QWORD *)this + 2);
    v2 = (uint64_t *)*((_QWORD *)this + 3);
    if (v2 != v14)
    {
      do
      {
        v16 = *--v2;
        v15 = v16;
        *v2 = 0;
        if (v16)
        {
          v17 = *(_QWORD *)(v15 - 8);
          if (v17)
          {
            v18 = v15 + 48 * v17;
            do
            {
              v19 = *(std::__shared_weak_count **)(v18 - 8);
              if (v19)
              {
                v20 = (unint64_t *)&v19->__shared_owners_;
                do
                  v21 = __ldaxr(v20);
                while (__stlxr(v21 - 1, v20));
                if (!v21)
                {
                  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                  std::__shared_weak_count::__release_weak(v19);
                }
              }
              v18 -= 48;
            }
            while (v18 != v15);
          }
          MEMORY[0x1A1AF4DE8](v15 - 16, 0x1020C80D08A26EBLL);
        }
      }
      while (v2 != v14);
      v2 = v14;
    }
  }
  *((_QWORD *)this + 3) = v2;
  *((_QWORD *)this + 7) = *((_QWORD *)this + 6);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  v22 = (void *)*((_QWORD *)this + 17);
  v23 = *((_QWORD *)this + 18) - (_QWORD)v22;
  if (v23 >= 1)
    bzero(v22, 4 * (((unint64_t)v23 >> 2) - ((unint64_t)v23 > 3)) + 4);
}

md::FontGlyphCache **std::unique_ptr<md::FontGlyphCache>::~unique_ptr[abi:nn180100](md::FontGlyphCache **a1)
{
  md::FontGlyphCache *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::FontGlyphCache::~FontGlyphCache(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

uint64_t std::vector<std::unique_ptr<md::FontAtlasCell []>,geo::StdAllocator<std::unique_ptr<md::FontAtlasCell []>,mdm::Allocator>>::~vector[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(_QWORD **)(a1 + 8);
    v4 = *(_QWORD **)a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          v7 = *(_QWORD *)(v5 - 8);
          if (v7)
          {
            v8 = v5 + 48 * v7;
            do
            {
              v9 = *(std::__shared_weak_count **)(v8 - 8);
              if (v9)
              {
                p_shared_owners = (unint64_t *)&v9->__shared_owners_;
                do
                  v11 = __ldaxr(p_shared_owners);
                while (__stlxr(v11 - 1, p_shared_owners));
                if (!v11)
                {
                  ((void (*)(std::__shared_weak_count *, _QWORD *))v9->__on_zero_shared)(v9, v4);
                  std::__shared_weak_count::__release_weak(v9);
                }
              }
              v8 -= 48;
            }
            while (v8 != v5);
          }
          MEMORY[0x1A1AF4DE8](v5 - 16, 0x1020C80D08A26EBLL);
        }
      }
      while (v3 != v2);
      v4 = *(_QWORD **)a1;
    }
    *(_QWORD *)(a1 + 8) = v2;
    (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v4, *(_QWORD *)(a1 + 16) - (_QWORD)v4);
  }
  return a1;
}

void md::ARDebugCustomScene::~ARDebugCustomScene(md::ARDebugCustomScene *this)
{
  *(_QWORD *)this = &off_1E4293F38;
  *((_QWORD *)this + 4) = &off_1E42B53F0;

  *(_QWORD *)this = off_1E428C9D0;
  *((_QWORD *)this + 1) = &off_1E42B5370;

}

{
  *(_QWORD *)this = &off_1E4293F38;
  *((_QWORD *)this + 4) = &off_1E42B53F0;

  *(_QWORD *)this = off_1E428C9D0;
  *((_QWORD *)this + 1) = &off_1E42B5370;

  JUMPOUT(0x1A1AF4E00);
}

BOOL md::ARDebugCustomScene::update(void **this, const md::LayoutContext *a2, const md::NavigationContext *a3, const md::ARLogicContext *a4)
{
  void *v5;

  if (*((_BYTE *)a4 + 65))
    return md::ARDebugScene::setFeatures((uint64_t)this, this[5]);
  v5 = this[2];
  if (!v5)
    return 0;
  this[2] = 0;

  return 1;
}

BOOL md::ARDebugScene::setFeatures(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;

  v3 = a2;
  v4 = v3;
  v5 = *(id *)(a1 + 16);
  if (v5 != v3)
  {
    v6 = v3;
    v7 = v6;
    if (v6)
      v8 = v6;
    v9 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v7;

  }
  return v5 != v4;
}

uint64_t geo::_retain_ptr<NSArray<VKARWalkingFeature *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5370;

  return a1;
}

void geo::_retain_ptr<NSArray<VKARWalkingFeature *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5370;

  JUMPOUT(0x1A1AF4E00);
}

void md::ARDebugCustomSceneBuilder::convertPointToCoordinate(double *a1, unsigned __int8 a2, long double a3, long double a4, long double a5)
{
  double v9;
  double v10;
  double v11;
  __double2 v12;
  double v13;
  __double2 v14;
  long double v15;
  long double v16;
  long double v17;
  long double v18;
  float64x2_t v19;
  long double v20;

  if (a2 - 1 > 2)
  {
    if (a2)
    {
      *a1 = 0.0;
      a1[1] = 0.0;
      a1[2] = 0.0;
    }
    else
    {
      v15 = a5 * 40075017.0;
      v16 = exp(a4 * 6.28318531 + -3.14159265);
      v20 = atan(v16);
      v17 = fmod(a3 * 6.28318531, 6.28318531);
      v18 = fmod(v17 + 6.28318531, 6.28318531);
      v19.f64[0] = v20;
      v19.f64[1] = v18;
      *(float64x2_t *)a1 = vmlaq_f64((float64x2_t)xmmword_19FFB32F0, (float64x2_t)xmmword_19FFB32E0, v19);
      a1[2] = v15;
    }
  }
  else
  {
    v9 = sqrt(a3 * a3 + a4 * a4);
    v10 = atan2(a5, v9 * 0.996647189);
    v11 = atan2(a4, a3);
    v12 = __sincos_stret(v10);
    v13 = atan2(a5 + v12.__sinval * v12.__sinval * 42841.3115 * v12.__sinval, v9 + v12.__cosval * v12.__cosval * -42697.6727 * v12.__cosval);
    v14 = __sincos_stret(v13);
    *a1 = v13 * 57.2957795;
    a1[1] = v11 * 57.2957795;
    a1[2] = v9 / v14.__cosval + -6378137.0 / sqrt(v14.__sinval * v14.__sinval * -0.00669437999 + 1.0);
  }
}

void arComponents::AlbedoTextureComponent::~AlbedoTextureComponent(arComponents::AlbedoTextureComponent *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *((_QWORD *)this + 3) = &off_1E42B5430;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t gdc::Registry::storage<arComponents::XYPlaneMeshRequest>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0xD6C83C44ECE8EA5;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD6C83C44ECE8EA5;
      if (*(_QWORD *)&v3 <= 0xD6C83C44ECE8EA5uLL)
        v5 = 0xD6C83C44ECE8EA5uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD6C83C44ECE8EA5;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD6C83C44ECE8EA5)
            {
              if (v7[2] == 0xD6C83C44ECE8EA5)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD6C83C44ECE8EA5)
          {
            if (v7[2] == 0xD6C83C44ECE8EA5)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::XYPlaneMeshRequest]";
  *(_QWORD *)(v11 + 24) = 32;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1DB8;
  *(_QWORD *)(v11 + 8) = 0xD6C83C44ECE8EA5;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD6C83C44ECE8EA5uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD6C83C44ECE8EA5;
  v15[1] = "arComponents::XYPlaneMeshRequest]";
  v15[2] = 32;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD6C83C44ECE8EA5, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F8C9C78(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::AlbedoTextureComponent>::emplace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  arComponents::AlbedoTextureComponent *v33;
  arComponents::AlbedoTextureComponent *v34;
  const arComponents::AlbedoTextureComponent *v35;
  const arComponents::AlbedoTextureComponent *v36;
  arComponents::AlbedoTextureComponent *v37;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  arComponents::AlbedoTextureComponent *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;

  v44 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(a1 + 32), (uint64_t)&v44);
  if ((v6 & 1) != 0)
  {
    v25 = *(_QWORD *)(a1 + 96);
    v26 = *(_QWORD *)(a1 + 88);
    if (v26 >= v25)
    {
      v28 = *(_QWORD *)(a1 + 80);
      v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v28) >> 4);
      if (v29 + 1 > 0x555555555555555)
        goto LABEL_48;
      v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v28) >> 4);
      v31 = 2 * v30;
      if (2 * v30 <= v29 + 1)
        v31 = v29 + 1;
      if (v30 >= 0x2AAAAAAAAAAAAAALL)
        v32 = 0x555555555555555;
      else
        v32 = v31;
      v50 = a1 + 96;
      if (v32)
      {
        if (v32 > 0x555555555555555)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v33 = (arComponents::AlbedoTextureComponent *)operator new(48 * v32);
      }
      else
      {
        v33 = 0;
      }
      v46 = v33;
      v47 = (uint64_t)v33 + 48 * v29;
      v48 = v47;
      v49 = (char *)v33 + 48 * v32;
      arComponents::AlbedoTextureComponent::AlbedoTextureComponent((arComponents::AlbedoTextureComponent *)v47, (const arComponents::AlbedoTextureComponent *)a3);
      v34 = (arComponents::AlbedoTextureComponent *)v47;
      v27 = v48 + 48;
      v48 += 48;
      v36 = *(const arComponents::AlbedoTextureComponent **)(a1 + 80);
      v35 = *(const arComponents::AlbedoTextureComponent **)(a1 + 88);
      if (v35 == v36)
      {
        v37 = *(arComponents::AlbedoTextureComponent **)(a1 + 88);
      }
      else
      {
        do
        {
          v35 = (const arComponents::AlbedoTextureComponent *)((char *)v35 - 48);
          v34 = arComponents::AlbedoTextureComponent::AlbedoTextureComponent((arComponents::AlbedoTextureComponent *)((char *)v34 - 48), v35);
        }
        while (v35 != v36);
        v37 = *(arComponents::AlbedoTextureComponent **)(a1 + 80);
        v35 = *(const arComponents::AlbedoTextureComponent **)(a1 + 88);
        v27 = v48;
      }
      *(_QWORD *)(a1 + 80) = v34;
      *(_QWORD *)(a1 + 88) = v27;
      v38 = *(char **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = v49;
      v49 = v38;
      v46 = v37;
      v47 = (uint64_t)v37;
      if (v35 != v37)
      {
        do
        {
          v48 = (uint64_t)v35 - 48;
          *((_QWORD *)v35 - 3) = &off_1E42B5430;

          v39 = (std::__shared_weak_count *)*((_QWORD *)v35 - 4);
          if (v39)
          {
            p_shared_owners = (unint64_t *)&v39->__shared_owners_;
            do
              v41 = __ldaxr(p_shared_owners);
            while (__stlxr(v41 - 1, p_shared_owners));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          v35 = (const arComponents::AlbedoTextureComponent *)v48;
        }
        while ((arComponents::AlbedoTextureComponent *)v48 != v37);
        v35 = v46;
      }
      if (v35)
        operator delete(v35);
    }
    else
    {
      arComponents::AlbedoTextureComponent::AlbedoTextureComponent(*(arComponents::AlbedoTextureComponent **)(a1 + 88), (const arComponents::AlbedoTextureComponent *)a3);
      v27 = v26 + 48;
      *(_QWORD *)(a1 + 88) = v27;
    }
    *(_QWORD *)(a1 + 88) = v27;
    v22 = *(_QWORD *)(a1 + 248);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 80);
    v8 = ((uint64_t)v5 - *(_QWORD *)(a1 + 56)) >> 3;
    v9 = (_QWORD *)(v7 + 48 * v8);
    *v9 = *(_QWORD *)a3;
    v10 = v9 + 1;
    v12 = *(_QWORD *)(a3 + 8);
    v11 = *(_QWORD *)(a3 + 16);
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *v10 = v12;
    v15 = v7 + 48 * v8;
    v16 = *(std::__shared_weak_count **)(v15 + 16);
    *(_QWORD *)(v15 + 16) = v11;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = *(id *)(a3 + 32);
    v20 = v7 + 48 * v8;
    v21 = *(void **)(v20 + 32);
    *(_QWORD *)(v20 + 32) = v19;

    v22 = *(_QWORD *)(a1 + 248);
    if (v7 + 48 * v8 != *(_QWORD *)(a1 + 88))
    {
      v23 = *(_QWORD **)(a1 + 128);
      if (v23)
      {
        while (1)
        {
          v46 = (arComponents::AlbedoTextureComponent *)&v44;
          v47 = 1;
          v45 = v22;
          v24 = v23[6];
          if (!v24)
            break;
          (*(void (**)(uint64_t, uint64_t *, arComponents::AlbedoTextureComponent **))(*(_QWORD *)v24 + 48))(v24, &v45, &v46);
          v23 = (_QWORD *)*v23;
          if (!v23)
            return;
        }
LABEL_47:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_48:
        abort();
      }
      return;
    }
  }
  v42 = *(_QWORD **)(a1 + 176);
  if (v42)
  {
    while (1)
    {
      v46 = (arComponents::AlbedoTextureComponent *)&v44;
      v47 = 1;
      v45 = v22;
      v43 = v42[6];
      if (!v43)
        break;
      (*(void (**)(uint64_t, uint64_t *, arComponents::AlbedoTextureComponent **))(*(_QWORD *)v43 + 48))(v43, &v45, &v46);
      v42 = (_QWORD *)*v42;
      if (!v42)
        return;
    }
    goto LABEL_47;
  }
}

void sub_19F8C9FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<arComponents::AlbedoTextureComponent>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVScale>::emplace(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  v30 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v30);
  if ((v6 & 1) != 0)
  {
    v12 = (char *)a1[11];
    v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (char *)a1[10];
      v15 = (v12 - v14) >> 3;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
        goto LABEL_36;
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 2 > v16)
        v16 = v17 >> 2;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = operator new(8 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[8 * v15];
      *v20 = *(_QWORD *)a3;
      v13 = v20 + 1;
      if (v12 == v14)
      {
        v14 = v12;
      }
      else
      {
        v21 = v12 - v14 - 8;
        if (v21 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v14 - v19) < 0x20)
          goto LABEL_40;
        v22 = (v21 >> 3) + 1;
        v23 = &v19[8 * v15 - 16];
        v24 = v12 - 16;
        v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 4;
        }
        while (v25);
        v20 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
        v12 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v27 = *((_QWORD *)v12 - 1);
            v12 -= 8;
            *--v20 = v27;
          }
          while (v12 != v14);
          v14 = (char *)a1[10];
        }
      }
      a1[10] = (uint64_t)v20;
      a1[11] = (uint64_t)v13;
      a1[12] = (uint64_t)&v19[8 * v18];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_QWORD *)v12 = *(_QWORD *)a3;
      v13 = v12 + 8;
    }
    a1[11] = (uint64_t)v13;
    v8 = a1[31];
  }
  else
  {
    v7 = (_DWORD *)((char *)v5 + a1[10] - a1[7]);
    *v7 = *(_DWORD *)a3;
    v7[1] = *(_DWORD *)(a3 + 4);
    v8 = a1[31];
    if (v7 != (_DWORD *)a1[11])
    {
      v9 = (_QWORD *)a1[16];
      if (v9)
      {
        while (1)
        {
          v32 = &v30;
          v33 = 1;
          v31 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v31, &v32);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v28 = (_QWORD *)a1[22];
  if (v28)
  {
    while (1)
    {
      v32 = &v30;
      v33 = 1;
      v31 = v8;
      v29 = v28[6];
      if (!v29)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v29 + 48))(v29, &v31, &v32);
      v28 = (_QWORD *)*v28;
      if (!v28)
        return;
    }
    goto LABEL_35;
  }
}

arComponents::AlbedoTextureComponent *arComponents::AlbedoTextureComponent::AlbedoTextureComponent(arComponents::AlbedoTextureComponent *this, const arComponents::AlbedoTextureComponent *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  id v11;
  void *v12;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &off_1E42B5430;
  *((_QWORD *)this + 4) = 0;
  v4 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 1) = v4;
    *((_QWORD *)this + 2) = v5;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = v4;
    *((_QWORD *)this + 2) = 0;
  }
  v11 = *((id *)a2 + 4);
  v12 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v11;

  return this;
}

uint64_t std::__split_buffer<arComponents::AlbedoTextureComponent>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    *(_QWORD *)(i - 24) = &off_1E42B5430;

    v4 = *(std::__shared_weak_count **)(i - 32);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::XYPlaneMeshRequest>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::XYPlaneMeshRequest>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 8 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_DWORD *)(v15 - 8);
  v15 -= 8;
  *v14 = v16;
  v14[1] = *(_DWORD *)(v15 + 4);
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::XYPlaneMeshRequest>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<arComponents::XYPlaneMeshRequest>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void md::SelectedRoadLayerDataSource::~SelectedRoadLayerDataSource(md::SelectedRoadLayerDataSource *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42A4550;
  v2 = (_QWORD *)*((_QWORD *)this + 103);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)this = &off_1E4297950;
  *((_QWORD *)this + 97) = &off_1E42B4D50;

  *(_QWORD *)this = off_1E429DEE0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 96);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42A4550;
  v2 = (_QWORD *)*((_QWORD *)this + 103);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)this = &off_1E4297950;
  *((_QWORD *)this + 97) = &off_1E42B4D50;

  *(_QWORD *)this = off_1E429DEE0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 96);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL md::SelectedRoadLayerDataSource::shouldFilterFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _BOOL8 result;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
  v4 = *(unsigned __int16 *)(a1 + 32);
  if (!*(_BYTE *)(a1 + 850))
  {
    if (v4 == 68)
      goto LABEL_16;
    return *(_QWORD *)(a3 + 40) != v3;
  }
  if (v4 != 68)
    return *(_QWORD *)(a3 + 40) != v3;
  if (*(unsigned __int16 *)(a2 + 2) == *(unsigned __int16 *)(a1 + 848))
  {
    v5 = *(_QWORD **)(a1 + 824);
    if (v5)
    {
      while (v5[2] != *(_QWORD *)(a3 + 40))
      {
        v5 = (_QWORD *)*v5;
        if (!v5)
          goto LABEL_7;
      }
      return 0;
    }
LABEL_7:
    if (*(_BYTE *)(a3 + 74))
    {
      v6 = *(_QWORD **)(a1 + 824);
      if (v6)
      {
        v7 = 0;
        result = 1;
LABEL_10:
        v9 = v6;
        while (v9[2] != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 3528)
                                   + 8 * (*(_DWORD *)(a3 + 64) + v7)))
        {
          v9 = (_QWORD *)*v9;
          if (!v9)
          {
            if (++v7 != *(unsigned __int8 *)(a3 + 74))
              goto LABEL_10;
            return result;
          }
        }
        return 0;
      }
    }
    return 1;
  }
LABEL_16:
  if (*(_QWORD *)(a3 + 40) == v3)
    return 0;
  if (!*(_BYTE *)(a3 + 74))
    return 1;
  v10 = 1;
  do
  {
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 3528) + 8 * (*(_DWORD *)(a3 + 64) + v10 - 1));
    result = v11 != v3;
  }
  while (v11 != v3 && v10++ < *(unsigned __int8 *)(a3 + 74));
  return result;
}

void ggl::DaVinci::TexturedMesh::~TexturedMesh(ggl::DaVinci::TexturedMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::DaVinci::TexturedMesh::~TexturedMesh(ggl::DaVinci::TexturedMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DaVinci::TexturedMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::DaVinci::TexturedMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::DaVinci::TexturedMesh::TexturedMesh(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *zone;
  int v35;
  int v36;
  uint64_t v37;
  geo::read_write_lock *v38;
  const char *v39;
  malloc_zone_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((v7 & 1) == 0)
  {
    v42 = a3;
    a3 = v42;
    if (v27)
    {
      if ((v28 & 1) == 0
      {
        ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::texturedVboReflection;
      }
      ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::attributesReflection(void)::r;
      *(_QWORD *)algn_1ECE37150 = 1;
      a3 = v42;
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E42BBC08;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = &ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::typedReflection(void)::r;
  *(_QWORD *)(a1 + 64) = 0;
  v8 = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v9 = &unk_1ECE44000;
  if ((v10 & 1) == 0)
  {
    v43 = a3;
    v9 = &unk_1ECE44000;
    v30 = v29;
    v8 = a1 + 64;
    a3 = v43;
    if (v30)
    {
      v31 = operator new();
      *(_QWORD *)(v31 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v31 + 24) = "GeoGL";
      *(_OWORD *)(v31 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v31 = &off_1E42B5668;
      *(_QWORD *)(v31 + 8) = "GeoGL";
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      *(_OWORD *)(v31 + 120) = 0u;
      *(_OWORD *)(v31 + 136) = 0u;
      *(_OWORD *)(v31 + 152) = 0u;
      *(_OWORD *)(v31 + 168) = 0u;
      *(_OWORD *)(v31 + 184) = 0u;
      *(_OWORD *)(v31 + 200) = 0u;
      *(_OWORD *)(v31 + 216) = 0u;
      *(_OWORD *)(v31 + 232) = 0u;
      *(_QWORD *)(v31 + 248) = 0;
      *(_OWORD *)(v31 + 56) = 0u;
      v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
      if ((_DWORD)v32)
        geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v31 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v31;
      v9 = &unk_1ECE44000;
      v8 = a1 + 64;
      a3 = v43;
    }
  }
  v11 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 120) = 0;
  v12 = a1 + 120;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  if ((v11 & 1) == 0)
  {
    v41 = v8;
    v44 = a3;
    v9 = (_QWORD *)&unk_1ECE44000;
    v36 = v35;
    v8 = v41;
    a3 = v44;
    if (v36)
    {
      v37 = operator new();
      *(_QWORD *)(v37 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v37 + 24) = "GeoGL";
      *(_OWORD *)(v37 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v37 = &off_1E42B5668;
      *(_QWORD *)(v37 + 8) = "GeoGL";
      *(_OWORD *)(v37 + 72) = 0u;
      *(_OWORD *)(v37 + 88) = 0u;
      *(_OWORD *)(v37 + 104) = 0u;
      *(_OWORD *)(v37 + 120) = 0u;
      *(_OWORD *)(v37 + 136) = 0u;
      *(_OWORD *)(v37 + 152) = 0u;
      *(_OWORD *)(v37 + 168) = 0u;
      *(_OWORD *)(v37 + 184) = 0u;
      *(_OWORD *)(v37 + 200) = 0u;
      *(_OWORD *)(v37 + 216) = 0u;
      *(_OWORD *)(v37 + 232) = 0u;
      *(_QWORD *)(v37 + 248) = 0;
      *(_OWORD *)(v37 + 56) = 0u;
      v38 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v37 + 56), 0);
      if ((_DWORD)v38)
        geo::read_write_lock::logFailure(v38, (uint64_t)"initialization", v39);
      v40 = malloc_create_zone(0, 0);
      *(_QWORD *)(v37 + 48) = v40;
      malloc_set_zone_name(v40, "GeoGL");
      *(_QWORD *)(v37 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v37;
      v9 = &unk_1ECE44000;
      v8 = v41;
      a3 = v44;
      v12 = a1 + 120;
    }
  }
  *(_QWORD *)(a1 + 128) = v9[495];
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 112) = v12;
  *(_QWORD *)a1 = &off_1E42BDE38;
  *(_QWORD *)(a1 + 16) = &unk_1E42BDE58;
  v13 = a3[1];
  v45 = *a3;
  v46 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v8, &v45, &v47, 1uLL);
  v16 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = *a4;
  v19 = a4[1];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v20;
  *(_QWORD *)(a1 + 104) = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)a1 = &off_1E42BC390;
  *(_QWORD *)(a1 + 16) = &unk_1E42BC3B0;
  return a1;
}

uint64_t ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E05D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E05D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::DaVinci::TexturedCompressedMesh::~TexturedCompressedMesh(ggl::DaVinci::TexturedCompressedMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::DaVinci::TexturedCompressedMesh::~TexturedCompressedMesh(ggl::DaVinci::TexturedCompressedMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DaVinci::TexturedCompressedMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::DaVinci::TexturedCompressedMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::DaVinci::TexturedCompressedVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::DaVinci::TexturedCompressedVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

ggl::DaVinci::TexturedCompressedMesh *ggl::DaVinci::TexturedCompressedMesh::TexturedCompressedMesh(ggl::DaVinci::TexturedCompressedMesh *this, const char *a2)
{
  unsigned __int8 v4;
  char *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  const char *v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unsigned __int8 v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned __int8 v29;
  uint64_t v30;
  geo::read_write_lock *v31;
  const char *v32;
  malloc_zone_t *zone;
  uint64_t v34;
  geo::read_write_lock *v35;
  const char *v36;
  malloc_zone_t *v37;
  uint64_t v38;
  geo::read_write_lock *v39;
  const char *v40;
  malloc_zone_t *v41;
  int v42;
  uint64_t v43;
  geo::read_write_lock *v44;
  const char *v45;
  malloc_zone_t *v46;

  if ((v4 & 1) == 0
  {
    if ((v29 & 1) == 0
    {
      ggl::MeshTyped<ggl::DaVinci::TexturedCompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::texturedCompressedVboReflection;
    }
    ggl::MeshTyped<ggl::DaVinci::TexturedCompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedCompressedVbo>::attributesReflection(void)::r;
    unk_1ECE2FDA0 = 1;
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_QWORD *)this = &off_1E42BBC08;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = &unk_1E42BBC28;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 7) = &ggl::MeshTyped<ggl::DaVinci::TexturedCompressedVbo>::typedReflection(void)::r;
  *((_QWORD *)this + 8) = 0;
  v5 = (char *)this + 64;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  {
    v30 = operator new();
    *(_QWORD *)(v30 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v30 + 24) = "GeoGL";
    *(_OWORD *)(v30 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v30 = &off_1E42B5668;
    *(_QWORD *)(v30 + 8) = "GeoGL";
    *(_OWORD *)(v30 + 72) = 0u;
    *(_OWORD *)(v30 + 88) = 0u;
    *(_OWORD *)(v30 + 104) = 0u;
    *(_OWORD *)(v30 + 120) = 0u;
    *(_OWORD *)(v30 + 136) = 0u;
    *(_OWORD *)(v30 + 152) = 0u;
    *(_OWORD *)(v30 + 168) = 0u;
    *(_OWORD *)(v30 + 184) = 0u;
    *(_OWORD *)(v30 + 200) = 0u;
    *(_OWORD *)(v30 + 216) = 0u;
    *(_OWORD *)(v30 + 232) = 0u;
    *(_QWORD *)(v30 + 248) = 0;
    *(_OWORD *)(v30 + 56) = 0u;
    v31 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v30 + 56), 0);
    if ((_DWORD)v31)
      geo::read_write_lock::logFailure(v31, (uint64_t)"initialization", v32);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v30 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v30 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v30;
  }
  v7 = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = v7;
  {
    v34 = operator new();
    *(_QWORD *)(v34 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v34 + 24) = "GeoGL";
    *(_OWORD *)(v34 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v34 = &off_1E42B5668;
    *(_QWORD *)(v34 + 8) = "GeoGL";
    *(_OWORD *)(v34 + 72) = 0u;
    *(_OWORD *)(v34 + 88) = 0u;
    *(_OWORD *)(v34 + 104) = 0u;
    *(_OWORD *)(v34 + 120) = 0u;
    *(_OWORD *)(v34 + 136) = 0u;
    *(_OWORD *)(v34 + 152) = 0u;
    *(_OWORD *)(v34 + 168) = 0u;
    *(_OWORD *)(v34 + 184) = 0u;
    *(_OWORD *)(v34 + 200) = 0u;
    *(_OWORD *)(v34 + 216) = 0u;
    *(_OWORD *)(v34 + 232) = 0u;
    *(_QWORD *)(v34 + 248) = 0;
    *(_OWORD *)(v34 + 56) = 0u;
    v35 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v34 + 56), 0);
    if ((_DWORD)v35)
      geo::read_write_lock::logFailure(v35, (uint64_t)"initialization", v36);
    v37 = malloc_create_zone(0, 0);
    *(_QWORD *)(v34 + 48) = v37;
    malloc_set_zone_name(v37, "GeoGL");
    *(_QWORD *)(v34 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v34;
  }
  *((_QWORD *)this + 16) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 14) = (char *)this + 120;
  *(_QWORD *)this = &off_1E42BDF78;
  *((_QWORD *)this + 2) = &unk_1E42BDF98;
  v8 = *((_QWORD *)this + 8);
  v9 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  v10 = *((_QWORD *)this + 9);
  v11 = (v10 - v8) >> 4;
  v12 = v9 - v11;
  if (v9 <= v11)
  {
    if (v9 < v11)
    {
      v13 = v8 + 16 * v9;
      while (v10 != v13)
      {
        v14 = *(std::__shared_weak_count **)(v10 - 8);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v14->__on_zero_shared)(v14, v12);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v10 -= 16;
      }
      *((_QWORD *)this + 9) = v13;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append((uint64_t)this + 64, v12);
  }
  *(_QWORD *)this = &off_1E42BC5C0;
  *((_QWORD *)this + 2) = &unk_1E42BC5E0;
  if (a2)
    v17 = a2;
  else
    v17 = "/VertexData";
  {
    v38 = operator new();
    *(_QWORD *)(v38 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v38 + 24) = "GeoGL";
    *(_OWORD *)(v38 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v38 = &off_1E42B5668;
    *(_QWORD *)(v38 + 8) = "GeoGL";
    *(_OWORD *)(v38 + 72) = 0u;
    *(_OWORD *)(v38 + 88) = 0u;
    *(_OWORD *)(v38 + 104) = 0u;
    *(_OWORD *)(v38 + 120) = 0u;
    *(_OWORD *)(v38 + 136) = 0u;
    *(_OWORD *)(v38 + 152) = 0u;
    *(_OWORD *)(v38 + 168) = 0u;
    *(_OWORD *)(v38 + 184) = 0u;
    *(_OWORD *)(v38 + 200) = 0u;
    *(_OWORD *)(v38 + 216) = 0u;
    *(_OWORD *)(v38 + 232) = 0u;
    *(_QWORD *)(v38 + 248) = 0;
    *(_OWORD *)(v38 + 56) = 0u;
    v39 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v38 + 56), 0);
    if ((_DWORD)v39)
      geo::read_write_lock::logFailure(v39, (uint64_t)"initialization", v40);
    v41 = malloc_create_zone(0, 0);
    *(_QWORD *)(v38 + 48) = v41;
    malloc_set_zone_name(v41, "GeoGL");
    *(_QWORD *)(v38 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v38;
  }
  v19 = ggl::Allocator::instance(void)::alloc;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v20 = &off_1E42E05D0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 24) = v19;
  *(_QWORD *)(v20 + 32) = &off_1E42B5748;
  v21 = v20 + 32;
  *(_QWORD *)(v20 + 40) = 8;
  *(_DWORD *)(v20 + 48) = 6;
  v22 = 0uLL;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_OWORD *)(v20 + 88) = 0u;
  *(_OWORD *)(v20 + 104) = 0u;
  *(_QWORD *)(v20 + 120) = 0;
  if ((v23 & 1) == 0)
  {
    v22 = 0uLL;
    if (v42)
    {
      v43 = operator new();
      *(_QWORD *)(v43 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v43 + 24) = "GeoGL";
      *(_OWORD *)(v43 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v43 = &off_1E42B5668;
      *(_QWORD *)(v43 + 8) = "GeoGL";
      *(_OWORD *)(v43 + 72) = 0u;
      *(_OWORD *)(v43 + 88) = 0u;
      *(_OWORD *)(v43 + 104) = 0u;
      *(_OWORD *)(v43 + 120) = 0u;
      *(_OWORD *)(v43 + 136) = 0u;
      *(_OWORD *)(v43 + 152) = 0u;
      *(_OWORD *)(v43 + 168) = 0u;
      *(_OWORD *)(v43 + 184) = 0u;
      *(_OWORD *)(v43 + 200) = 0u;
      *(_OWORD *)(v43 + 216) = 0u;
      *(_OWORD *)(v43 + 232) = 0u;
      *(_QWORD *)(v43 + 248) = 0;
      *(_OWORD *)(v43 + 56) = 0u;
      v44 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v43 + 56), 0);
      if ((_DWORD)v44)
        geo::read_write_lock::logFailure(v44, (uint64_t)"initialization", v45);
      v46 = malloc_create_zone(0, 0);
      *(_QWORD *)(v43 + 48) = v46;
      malloc_set_zone_name(v46, "GeoGL");
      *(_QWORD *)(v43 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v43;
      v21 = v20 + 32;
      v22 = 0uLL;
    }
  }
  *(_QWORD *)(v20 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v20 + 136) = 0;
  *(_OWORD *)(v20 + 200) = v22;
  *(_OWORD *)(v20 + 184) = v22;
  *(_OWORD *)(v20 + 168) = v22;
  *(_QWORD *)(v20 + 216) = 0;
  *(_QWORD *)(v20 + 224) = -1;
  *(_OWORD *)(v20 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v20 + 144) = 0;
  *(_QWORD *)(v20 + 240) = v17;
  *(_QWORD *)(v20 + 248) = &ggl::DaVinci::texturedCompressedVboReflection;
  *(_QWORD *)(v20 + 32) = &off_1E42B8320;
  *(_QWORD *)(v20 + 232) = &unk_1E42B8340;
  v24 = *(uint64_t **)v5;
  v25 = *(std::__shared_weak_count **)(*(_QWORD *)v5 + 8);
  *v24 = v21;
  v24[1] = v20;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return this;
}

uint64_t ggl::DaVinci::TexturedCompressedMesh::TexturedCompressedMesh(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *zone;
  int v35;
  int v36;
  uint64_t v37;
  geo::read_write_lock *v38;
  const char *v39;
  malloc_zone_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((v7 & 1) == 0)
  {
    v42 = a3;
    a3 = v42;
    if (v27)
    {
      if ((v28 & 1) == 0
      {
        ggl::MeshTyped<ggl::DaVinci::TexturedCompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::texturedCompressedVboReflection;
      }
      ggl::MeshTyped<ggl::DaVinci::TexturedCompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedCompressedVbo>::attributesReflection(void)::r;
      unk_1ECE2FDA0 = 1;
      a3 = v42;
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E42BBC08;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = &ggl::MeshTyped<ggl::DaVinci::TexturedCompressedVbo>::typedReflection(void)::r;
  *(_QWORD *)(a1 + 64) = 0;
  v8 = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v9 = &unk_1ECE44000;
  if ((v10 & 1) == 0)
  {
    v43 = a3;
    v9 = &unk_1ECE44000;
    v30 = v29;
    v8 = a1 + 64;
    a3 = v43;
    if (v30)
    {
      v31 = operator new();
      *(_QWORD *)(v31 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v31 + 24) = "GeoGL";
      *(_OWORD *)(v31 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v31 = &off_1E42B5668;
      *(_QWORD *)(v31 + 8) = "GeoGL";
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      *(_OWORD *)(v31 + 120) = 0u;
      *(_OWORD *)(v31 + 136) = 0u;
      *(_OWORD *)(v31 + 152) = 0u;
      *(_OWORD *)(v31 + 168) = 0u;
      *(_OWORD *)(v31 + 184) = 0u;
      *(_OWORD *)(v31 + 200) = 0u;
      *(_OWORD *)(v31 + 216) = 0u;
      *(_OWORD *)(v31 + 232) = 0u;
      *(_QWORD *)(v31 + 248) = 0;
      *(_OWORD *)(v31 + 56) = 0u;
      v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
      if ((_DWORD)v32)
        geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v31 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v31;
      v9 = &unk_1ECE44000;
      v8 = a1 + 64;
      a3 = v43;
    }
  }
  v11 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 120) = 0;
  v12 = a1 + 120;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  if ((v11 & 1) == 0)
  {
    v41 = v8;
    v44 = a3;
    v9 = (_QWORD *)&unk_1ECE44000;
    v36 = v35;
    v8 = v41;
    a3 = v44;
    if (v36)
    {
      v37 = operator new();
      *(_QWORD *)(v37 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v37 + 24) = "GeoGL";
      *(_OWORD *)(v37 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v37 = &off_1E42B5668;
      *(_QWORD *)(v37 + 8) = "GeoGL";
      *(_OWORD *)(v37 + 72) = 0u;
      *(_OWORD *)(v37 + 88) = 0u;
      *(_OWORD *)(v37 + 104) = 0u;
      *(_OWORD *)(v37 + 120) = 0u;
      *(_OWORD *)(v37 + 136) = 0u;
      *(_OWORD *)(v37 + 152) = 0u;
      *(_OWORD *)(v37 + 168) = 0u;
      *(_OWORD *)(v37 + 184) = 0u;
      *(_OWORD *)(v37 + 200) = 0u;
      *(_OWORD *)(v37 + 216) = 0u;
      *(_OWORD *)(v37 + 232) = 0u;
      *(_QWORD *)(v37 + 248) = 0;
      *(_OWORD *)(v37 + 56) = 0u;
      v38 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v37 + 56), 0);
      if ((_DWORD)v38)
        geo::read_write_lock::logFailure(v38, (uint64_t)"initialization", v39);
      v40 = malloc_create_zone(0, 0);
      *(_QWORD *)(v37 + 48) = v40;
      malloc_set_zone_name(v40, "GeoGL");
      *(_QWORD *)(v37 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v37;
      v9 = &unk_1ECE44000;
      v8 = v41;
      a3 = v44;
      v12 = a1 + 120;
    }
  }
  *(_QWORD *)(a1 + 128) = v9[495];
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 112) = v12;
  *(_QWORD *)a1 = &off_1E42BDF78;
  *(_QWORD *)(a1 + 16) = &unk_1E42BDF98;
  v13 = a3[1];
  v45 = *a3;
  v46 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v8, &v45, &v47, 1uLL);
  v16 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = *a4;
  v19 = a4[1];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v20;
  *(_QWORD *)(a1 + 104) = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)a1 = &off_1E42BC5C0;
  *(_QWORD *)(a1 + 16) = &unk_1E42BC5E0;
  return a1;
}

uint64_t ggl::VertexDataTyped<ggl::DaVinci::TexturedPositionCompressedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::DaVinci::TexturedPositionCompressedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::DaVinci::TexturedPositionCompressedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinci::TexturedPositionCompressedMesh::~TexturedPositionCompressedMesh(ggl::DaVinci::TexturedPositionCompressedMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::DaVinci::TexturedPositionCompressedMesh::~TexturedPositionCompressedMesh(ggl::DaVinci::TexturedPositionCompressedMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DaVinci::TexturedPositionCompressedMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::DaVinci::TexturedPositionCompressedMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::DaVinci::TexturedPositionCompressedVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::DaVinci::TexturedPositionCompressedVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinci::TexturedCompressedDrapingMesh::~TexturedCompressedDrapingMesh(ggl::DaVinci::TexturedCompressedDrapingMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::DaVinci::TexturedCompressedDrapingMesh::~TexturedCompressedDrapingMesh(ggl::DaVinci::TexturedCompressedDrapingMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DaVinci::TexturedCompressedDrapingMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::DaVinci::TexturedCompressedDrapingMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void md::TransitLayerDataSource::~TransitLayerDataSource(md::TransitLayerDataSource *this)
{
  md::TransitLayerDataSource::~TransitLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  md::TransitLayerDataSource *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  *(_QWORD *)this = &off_1E429DF90;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 106);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (md::TransitLayerDataSource *)*((_QWORD *)this + 104);
  if (v5 == (md::TransitLayerDataSource *)((char *)this + 808))
  {
    v6 = 4;
    v5 = (md::TransitLayerDataSource *)((char *)this + 808);
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 100);
  if (!v7)
    goto LABEL_15;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v10)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v10)
      goto LABEL_21;
  }
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_21:
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

void md::TransitLayerDataSource::didActivate(md::TransitLayerDataSource *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _Unwind_Exception *v12;
  _Unwind_Exception *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v2 = *((_QWORD *)this + 104);
  if (!v2)
  {
LABEL_16:
    std::__throw_bad_function_call[abi:nn180100]();
    v13 = v12;
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v14);
    _Unwind_Resume(v13);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 48))(&v14);
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v14 + 168) + 64) + 16))(*(_QWORD *)(*(_QWORD *)(v14 + 168) + 64));
  if (!*(_QWORD *)(v3 + 8)
    || (v4 = *(_QWORD *)v3, (v5 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v3 + 8))) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
    goto LABEL_16;
  }
  *((_QWORD *)this + 105) = v4;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void md::TransitLayerDataSource::didDeactivate(md::TransitLayerDataSource *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 106);
  *(_OWORD *)((char *)this + 840) = 0u;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void md::TransitLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *__p[3];
  uint64_t v36;
  std::__shared_weak_count *v37;

  v8 = (unsigned __int16 *)*a3;
  v9 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v9)
  {
    while (*v8 != *(unsigned __int16 *)(a1 + 584))
    {
      v8 += 24;
      if (v8 == v9)
        goto LABEL_15;
    }
  }
  if (v8 == v9 || *((_QWORD *)v8 + 4) != 1)
  {
LABEL_15:
    v11 = 0;
    goto LABEL_16;
  }
  v10 = *((_QWORD *)v8 + 3);
  v11 = *(_QWORD *)(v10 + 112);
  v12 = *(std::__shared_weak_count **)(v10 + 120);
  if (!v12)
  {
LABEL_16:
    v36 = v11;
    v37 = 0;
    goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v36 = v11;
  v37 = v12;
  v15 = (unint64_t *)&v12->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_17:
  if (!*(_QWORD *)(a1 + 840))
  {
    *a4 = 0;
    a4[1] = 0;
    v30 = v37;
    if (!v37)
      return;
    goto LABEL_31;
  }
  memset(__p, 0, sizeof(__p));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], __p);
  sp_mut = std::__get_sp_mut((const void *)(a1 + 792));
  std::__sp_mut::lock(sp_mut);
  v19 = *(std::__shared_weak_count **)(a1 + 800);
  v33 = *(_QWORD *)(a1 + 792);
  v34 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  std::__sp_mut::unlock(sp_mut);
  v22 = v36;
  v23 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 856)));
  v24 = *(id *)(a1 + 760);
  v25 = *(_QWORD *)(a1 + 776);
  v26 = operator new(0x578uLL);
  v26[1] = 0;
  v26[2] = 0;
  *v26 = &off_1E42DB5C0;
  *a4 = md::TransitTileData::TransitTileData((uint64_t)(v26 + 3), a2, (_QWORD *)(v22 + 144), &v33, v24, v25, (_QWORD *)(a1 + 840), (uint64_t)__p, v23);
  a4[1] = (uint64_t)v26;

  v27 = v34;
  if (v34)
  {
    v28 = (unint64_t *)&v34->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p[0])
    operator delete(__p[0]);
  v30 = v37;
  if (v37)
  {
LABEL_31:
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_19F8CC344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  std::__shared_weak_count *v16;
  void *v18;

  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v18);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
    operator delete(__p);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void md::TransitLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void std::__shared_ptr_emplace<md::TransitTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB5C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TransitTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB5C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TransitTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::TransitLineSharedResources>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD4D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TransitLineSharedResources>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD4D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void sub_19F8CC8DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id dynamicValueAnimation(void *a1, double a2, double a3, double a4, double a5)
{
  id v9;
  id v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  _QWORD *v15;
  _QWORD *v16;
  double v17;
  double v18;
  _QWORD v19[4];
  _QWORD v20[4];

  v9 = a1;
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x2020000000;
  *(double *)&v20[3] = a3 * 0.001;
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x2020000000;
  *(double *)&v19[3] = a2;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __dynamicValueAnimation_block_invoke;
  v13[3] = &unk_1E42F0048;
  v15 = v19;
  v16 = v20;
  v14 = v9;
  v17 = a4;
  v18 = a5;
  v10 = v9;
  v11 = (void *)objc_msgSend(v13, "copy");

  _Block_object_dispose(v19, 8);
  _Block_object_dispose(v20, 8);
  return v11;
}

void sub_19F8CCD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v12;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v12 - 80), 8);
  _Unwind_Resume(a1);
}

BOOL __dynamicValueAnimation_block_invoke(uint64_t a1, double a2)
{
  double v3;
  long double v4;
  double v5;
  uint64_t v6;
  double v7;

  v3 = *(double *)(a1 + 56) * 0.025;
  v4 = pow(1.0 - v3, a2 * 1000.0);
  v5 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) * (1.0 - v3);
  *(long double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                               + 24)
                                                                   + (v5 - v4 * v5) / v3;
  *(long double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                               + 24)
                                                                   * v4;
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    (*(void (**)(double))(v6 + 16))(*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
  v7 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  return v7 * v7 < *(double *)(a1 + 64) * *(double *)(a1 + 64) * 0.0001;
}

double dynamicValueAnimationDuration(double a1, double a2, double a3)
{
  double v3;
  double v4;
  long double v5;
  double v6;

  v3 = fabs(a1) * 0.001;
  v4 = 0.0;
  if (v3 > 0.0)
  {
    v5 = a2 * -0.025 + 1.0;
    v6 = log(a3 * 0.01 / v3);
    v4 = v6 * 0.06 / log(v5);
  }
  return ceil(v4) * 0.0166666667;
}

long double dynamicValueAnimationVelocity(double a1, double a2, double a3)
{
  return a3 * 0.01 * pow(a2 * -0.025 + 1.0, a1 * -1000.0);
}

id dynamicValueAnimationTimingFunction(double a1, double a2, double a3)
{
  double v3;
  double v4;
  double v5;
  long double v6;
  double v7;
  long double v8;
  float v9;
  long double v10;
  _QWORD v12[9];

  v3 = fabs(a2) * -0.001;
  v4 = a1 * 1000.0;
  v5 = a3 * 0.025;
  v6 = 1.0 - a3 * 0.025;
  v7 = pow(v6, 16.6666667);
  v8 = v3 * v6 * (v7 + -1.0) / v5;
  v9 = v4;
  v10 = pow(v6, v9);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  *(float *)&v10 = -(v8 - v10 * v8) / (v7 + -1.0);
  v12[2] = __dynamicValueAnimationTimingFunction_block_invoke;
  v12[3] = &__block_descriptor_72_e8_f12__0f8l;
  *(double *)&v12[4] = *(float *)&v10;
  *(double *)&v12[5] = v4;
  *(long double *)&v12[6] = v8;
  *(long double *)&v12[7] = v6;
  *(double *)&v12[8] = v7;
  return (id)objc_msgSend(v12, "copy");
}

float __dynamicValueAnimationTimingFunction_block_invoke(uint64_t a1, float a2)
{
  double v2;
  float v3;
  double v4;
  float v5;
  float v6;

  v2 = *(double *)(a1 + 32);
  v3 = 1.0;
  if (v2 > 0.0)
  {
    v4 = *(double *)(a1 + 48);
    v5 = *(double *)(a1 + 40) * a2;
    v6 = -(v4 - pow(*(long double *)(a1 + 56), v5) * v4) / (*(double *)(a1 + 64) + -1.0);
    return v6 / v2;
  }
  return v3;
}

void md::TransitMapEngineMode::~TransitMapEngineMode(md::TransitMapEngineMode *this)
{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
}

{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::TransitMapEngineMode::didBecomeActive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;

  md::StandardMapEngineMode::didBecomeActive(a1, a2, a3, a4);
  v5 = *(_QWORD **)(a2 + 896);
  v6 = v5[7];
  v7 = v5[8];
  if (v6 != v7)
  {
    while (*(_WORD *)v6 != 15)
    {
      v6 += 16;
      if (v6 == v7)
        goto LABEL_9;
    }
  }
  if (v6 != v7)
  {
    v8 = *(_QWORD *)(v6 + 8);
    if (v8)
    {
      if (!*(_BYTE *)(v8 + 21))
        *(_BYTE *)(v8 + 21) = 1;
    }
  }
LABEL_9:
  v10 = v5[4];
  v9 = v5[5];
  if (v10 != v9)
  {
    while (*(_WORD *)v10 != 15)
    {
      v10 += 16;
      if (v10 == v9)
        return;
    }
  }
  if (v10 != v9)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      if (!*(_BYTE *)(v11 + 600))
      {
        *(_BYTE *)(v11 + 600) = 1;
        v12 = *(_QWORD *)(v11 + 16);
        for (i = *(_QWORD *)(v12 + 8); i != v12; i = *(_QWORD *)(i + 8))
          *(_QWORD *)(*(_QWORD *)(i + 128) + 152) = 1;
      }
    }
  }
}

void md::TransitMapEngineMode::willBecomeInactive(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;

  v2 = *(_QWORD **)(a2 + 896);
  v3 = v2[7];
  v4 = v2[8];
  if (v3 != v4)
  {
    while (*(_WORD *)v3 != 15)
    {
      v3 += 16;
      if (v3 == v4)
        goto LABEL_9;
    }
  }
  if (v3 != v4)
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      if (*(_BYTE *)(v5 + 21))
        *(_BYTE *)(v5 + 21) = 0;
    }
  }
LABEL_9:
  v7 = v2[4];
  v6 = v2[5];
  if (v7 != v6)
  {
    while (*(_WORD *)v7 != 15)
    {
      v7 += 16;
      if (v7 == v6)
        return;
    }
  }
  if (v7 != v6)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      if (*(_BYTE *)(v8 + 600))
      {
        *(_BYTE *)(v8 + 600) = 0;
        v9 = *(_QWORD *)(v8 + 16);
        for (i = *(_QWORD *)(v9 + 8); i != v9; i = *(_QWORD *)(i + 8))
          *(_QWORD *)(*(_QWORD *)(i + 128) + 152) = 1;
      }
    }
  }
}

md::TransitMapEngineMode *md::TransitMapEngineMode::TransitMapEngineMode(md::TransitMapEngineMode *this, int a2)
{
  char IsEnabled_VKMLayout_SPR;
  _QWORD *v5;
  int v6;
  int v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int v13;
  _WORD *v14;
  uint64_t v15;
  _QWORD v17[2];
  __int128 v18;
  uint64_t v19;
  char v20;
  unint64_t v21[3];
  _QWORD v22[2];
  _OWORD v23[3];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  IsEnabled_VKMLayout_SPR = MapsFeature_IsEnabled_VKMLayout_SPR();
  md::StandardMapEngineMode::StandardMapEngineMode((uint64_t)this, 6, a2, IsEnabled_VKMLayout_SPR);
  *(_QWORD *)this = &off_1E429A5F0;
  LOBYTE(v22[0]) = 19;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x13u, v22)+ 17) = 0;
  LOBYTE(v22[0]) = 20;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x14u, v22)+ 17) = 1;
  LOWORD(v22[0]) = 25;
  WORD1(v22[0]) = a2;
  WORD2(v22[0]) = 16;
  HIWORD(v22[0]) = a2;
  v5 = std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 0x19u, v22);
  if (a2)
    v6 = 0x10000;
  else
    v6 = 0;
  *(_DWORD *)((char *)v5 + 18) = v6;
  v7 = HIWORD(v22[0]);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD2(v22[0]), (_WORD *)v22 + 2)+ 18) = v7 << 16;
  LOWORD(v22[0]) = 17;
  WORD1(v22[0]) = a2;
  v8 = std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 0x11u, v22);
  if (a2)
    v9 = 65537;
  else
    v9 = 1;
  *(_DWORD *)((char *)v8 + 18) = v9;
  if (a2)
  {
    v11 = (_QWORD *)((char *)this + 128);
    v10 = *((_QWORD *)this + 16);
    if (v10)
    {
      while (1)
      {
        while (1)
        {
          v12 = (_QWORD *)v10;
          v13 = *(unsigned __int16 *)(v10 + 26);
          if (v13 < 9)
            break;
          v10 = *v12;
          v11 = v12;
          if (!*v12)
            goto LABEL_15;
        }
        if (v13 == 8)
          break;
        v10 = v12[1];
        if (!v10)
        {
          v11 = v12 + 1;
          goto LABEL_15;
        }
      }
    }
    else
    {
      v12 = (_QWORD *)((char *)this + 128);
LABEL_15:
      v14 = operator new(0x20uLL);
      v14[13] = 8;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = v12;
      *v11 = v14;
      v15 = **((_QWORD **)this + 15);
      if (v15)
      {
        *((_QWORD *)this + 15) = v15;
        v14 = (_WORD *)*v11;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 16), (uint64_t *)v14);
      ++*((_QWORD *)this + 17);
    }
  }
  v21[0] = 0x1BCA10CB9934FB1BLL;
  v21[1] = (unint64_t)"md::TransitLogic]";
  v21[2] = 16;
  *(_QWORD *)&v18 = 0xFD5D5EC7C4E1E43ELL;
  *((_QWORD *)&v18 + 1) = "md::TransitContext]";
  v19 = 18;
  v20 = 1;
  v22[0] = v23;
  v22[1] = 2;
  v23[0] = xmmword_1E42F7A98;
  v23[1] = unk_1E42F7AA8;
  v23[2] = xmmword_1E42F7AB8;
  v17[0] = &v18;
  v17[1] = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, v21, &v18, 0, (uint64_t)v22, (uint64_t)v17);
  return this;
}

void sub_19F8CD4C8(_Unwind_Exception *a1)
{
  md::MapEngineMode *v1;

  *(_QWORD *)v1 = &off_1E42A1BF8;
  if (*((_BYTE *)v1 + 548))
    *((_BYTE *)v1 + 548) = 0;
  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

void md::MaterialData::~MaterialData(md::MaterialData *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_1E428CF00;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B4768;
  if (*((_BYTE *)this + 112))
    *((_BYTE *)this + 112) = 0;
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5 != *((void **)this + 6))
    free(v5);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_1E428CF00;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B4768;
  if (*((_BYTE *)this + 112))
    *((_BYTE *)this + 112) = 0;
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5 != *((void **)this + 6))
    free(v5);
  JUMPOUT(0x1A1AF4E00);
}

void md::DaVinciGroundRenderLayer::MaterialConstants::~MaterialConstants(md::DaVinciGroundRenderLayer::MaterialConstants *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;

  v2 = (_QWORD *)*((_QWORD *)this + 27);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 22);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)*((_QWORD *)this + 17);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v10)
    operator delete(v10);
  v11 = (_QWORD *)*((_QWORD *)this + 12);
  if (v11)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      operator delete(v11);
      v11 = v12;
    }
    while (v12);
  }
  v13 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v13)
    operator delete(v13);
  v14 = (_QWORD *)*((_QWORD *)this + 7);
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      operator delete(v14);
      v14 = v15;
    }
    while (v15);
  }
  v16 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v16)
    operator delete(v16);
  v17 = (_QWORD *)*((_QWORD *)this + 2);
  if (v17)
  {
    do
    {
      v18 = (_QWORD *)*v17;
      operator delete(v17);
      v17 = v18;
    }
    while (v18);
  }
  v19 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v19)
    operator delete(v19);
}

void std::__function::__func<md::ita::PrepareGradientParametersConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>)::$_1,std::allocator<md::ita::PrepareGradientParametersConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::PrepareGradientParametersConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>)::$_1,std::allocator<md::ita::PrepareGradientParametersConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = &off_1E427C978;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PrepareGradientParametersConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>)::$_1,std::allocator<md::ita::PrepareGradientParametersConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E427C978;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<md::ita::PrepareGradientParametersConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>)::$_1,std::allocator<md::ita::PrepareGradientParametersConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  _QWORD **v8;
  uint64_t ColorRampData;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  uint64_t (***v26)();
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void **v33;
  BOOL v34;
  int8x8_t *v35;
  uint64_t v36;
  unsigned int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t **v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t **v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70[2];
  uint64_t (**v71)();
  uint64_t v72;
  int v73;
  uint64_t (***v74)();
  void *__p[2];
  __int128 v76;
  int v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD ***)(a1 + 16);
  ColorRampData = md::VKMRenderResourcesStore::getColorRampData(**(_QWORD **)(a1 + 8), *a5);
  if (!ColorRampData)
    return;
  v10 = ColorRampData;
  if (!*(_BYTE *)(ColorRampData + 32))
    return;
  v11 = *v8;
  v12 = *a5;
  v13 = *(_QWORD **)*v11;
  v14 = *(_QWORD **)(*v11 + 8);
  if (v13 != v14)
  {
    while (*v13 != 0x41D4E9297E100630)
    {
      v13 += 5;
      if (v13 == v14)
        goto LABEL_14;
    }
  }
  if (v13 == v14)
  {
LABEL_14:
    v15 = 0;
  }
  else
  {
    v15 = v13[3];
    v16 = (std::__shared_weak_count *)v13[4];
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v20 = md::VKMRenderResourcesStore::getColorRampData(v15, v12);
  if (!v20)
    goto LABEL_28;
  v21 = v20;
  if (!*(_BYTE *)(v20 + 32))
    goto LABEL_28;
  v22 = (char *)operator new(0x10uLL);
  v23 = v22;
  *(_OWORD *)v22 = *(_OWORD *)(v21 + 16);
  v24 = v22 + 16;
  if (*(_QWORD *)v22 || *((_QWORD *)v22 + 1))
  {
    v25 = gdc::Registry::create((gdc::Registry *)v11[1]);
    __p[0] = v23;
    __p[1] = v24;
    *(_QWORD *)&v76 = v24;
    ecs2::addComponent<md::ls::TexturesToDisconnect>(v11, v25, (__int128 *)__p);
    if (__p[0])
      operator delete(__p[0]);
    v71 = &off_1E427E280;
    v72 = v25 << 32;
    v73 = HIDWORD(v25);
    v74 = &v71;
    __p[0] = &off_1E427E280;
    *((_QWORD *)&v76 + 1) = __p;
    __p[1] = (void *)(v25 << 32);
    LODWORD(v76) = HIDWORD(v25);
    v77 = 0;
    ecs2::Runtime::queueCommand(v11, (uint64_t)__p);
    if (v77 != -1)
      ((void (*)(uint64_t *, void **))off_1E42FB340[v77])(v70, __p);
    v77 = -1;
    v26 = v74;
    if (v74 == &v71)
    {
      v27 = 4;
      v26 = &v71;
    }
    else
    {
      if (!v74)
        goto LABEL_28;
      v27 = 5;
    }
    (*v26)[v27]();
LABEL_28:
    if (!*(_BYTE *)(v10 + 32))
      goto LABEL_86;
    goto LABEL_29;
  }
  operator delete(v22);
  if (!*(_BYTE *)(v10 + 32))
    goto LABEL_86;
LABEL_29:
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  v28 = **(_QWORD **)(a1 + 24);
  v29 = *a4;
  v70[0] = v29;
  v30 = *(_QWORD *)(v28 + 120);
  if (v29 >= (unint64_t)((*(_QWORD *)(v28 + 128) - v30) >> 3))
    goto LABEL_37;
  v31 = *(void **)(v30 + 8 * v29);
  if (!v31)
    goto LABEL_38;
  if (HIDWORD(v29) != HIDWORD(v31)
    || ((v32 = *(_QWORD *)(v28 + 144), v33 = (void **)(v32 + 8 * v31), v33 != *(void ***)(v28 + 152))
      ? (v34 = v32 == 0)
      : (v34 = 1),
        v34))
  {
LABEL_37:
    v31 = 0;
  }
  else
  {
    v69 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v28 + 56, v29, v70);
    ++v69[3];
    v31 = *v33;
  }
LABEL_38:
  v35 = *(int8x8_t **)v28;
  __p[0] = v31;
  __p[1] = 0;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v71, v35, (uint64_t *)__p, 0);
  v36 = **(_QWORD **)(a1 + 32);
  v37 = (int)**(float **)(a1 + 48);
  v38 = (std::__shared_weak_count *)v72;
  v70[0] = (uint64_t)v71;
  v70[1] = v72;
  if (v72)
  {
    v39 = (unint64_t *)(v72 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = (float *)md::MaterialTextureManager::colorRampTexturesFromMaterial(v36, v37, v70);
  v43 = v42;
  if (v38)
  {
    v44 = (unint64_t *)&v38->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v46 = (std::__shared_weak_count *)v72;
  if (!((unint64_t)v41 | v43))
    goto LABEL_79;
  v47 = *(uint64_t ***)(a1 + 56);
  if (v72)
  {
    v48 = (unint64_t *)(v72 + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v50 = md::ita::PrepareGradientParametersConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>)::$_0::operator()(v47, v41[12], v41[13]);
  if (v46)
  {
    v51 = (unint64_t *)&v46->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v50)
  {
    if (!*(_BYTE *)(v10 + 32))
      goto LABEL_86;
    *(_QWORD *)v10 = v50;
  }
  if (v41)
  {
    v53 = **(_QWORD **)(a1 + 64);
    md::SharedResource::addFrameRef((md::SharedResource *)v41, **(_QWORD **)(a1 + 72));
    v54 = *((_QWORD *)v41 + 4);
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v53 + 104));
    if (v54)
    {
      __p[0] = (void *)v54;
      __p[1] = (void *)v54;
      v55 = *(unsigned int *)(v54 + 68) | ((unint64_t)*(unsigned int *)(v54 + 64) << 32);
      *(_QWORD *)&v76 = *(_QWORD *)(v54 + 80);
      *((_QWORD *)&v76 + 1) = v55;
    }
    else
    {
      *(_OWORD *)__p = 0u;
      v76 = 0u;
    }
    LOBYTE(v77) = 1;
    v56 = geo::packed_array<mre::TextureStorage,geo::handle<mre::Texture>>::push_back((_QWORD *)(v53 + 576), (__int128 *)__p);
    std::__shared_mutex_base::unlock((std::__shared_mutex_base *)(v53 + 104));
    if (!*(_BYTE *)(v10 + 32))
      goto LABEL_86;
    *(_QWORD *)(v10 + 16) = v56;
  }
  v46 = (std::__shared_weak_count *)v72;
  if (!**(_BYTE **)(a1 + 80))
    goto LABEL_79;
  v57 = *(uint64_t ***)(a1 + 56);
  if (v72)
  {
    v58 = (unint64_t *)(v72 + 8);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v60 = md::ita::PrepareGradientParametersConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>)::$_0::operator()(v57, *(float *)(v43 + 48), *(float *)(v43 + 52));
  if (v46)
  {
    v61 = (unint64_t *)&v46->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (!*(_BYTE *)(v10 + 32))
    goto LABEL_86;
  *(_QWORD *)(v10 + 8) = v60;
  v63 = **(_QWORD **)(a1 + 64);
  md::SharedResource::addFrameRef((md::SharedResource *)v43, **(_QWORD **)(a1 + 72));
  v64 = *(_QWORD *)(v43 + 32);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v63 + 104));
  if (v64)
  {
    __p[0] = (void *)v64;
    __p[1] = (void *)v64;
    v65 = *(unsigned int *)(v64 + 68) | ((unint64_t)*(unsigned int *)(v64 + 64) << 32);
    *(_QWORD *)&v76 = *(_QWORD *)(v64 + 80);
    *((_QWORD *)&v76 + 1) = v65;
  }
  else
  {
    *(_OWORD *)__p = 0u;
    v76 = 0u;
  }
  LOBYTE(v77) = 1;
  v66 = geo::packed_array<mre::TextureStorage,geo::handle<mre::Texture>>::push_back((_QWORD *)(v63 + 576), (__int128 *)__p);
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)(v63 + 104));
  if (!*(_BYTE *)(v10 + 32))
  {
LABEL_86:
    std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
    return;
  }
  *(_QWORD *)(v10 + 24) = v66;
  v46 = (std::__shared_weak_count *)v72;
LABEL_79:
  if (v46)
  {
    v67 = (unint64_t *)&v46->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_19F8CDD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void *__p)
{
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t md::ita::PrepareGradientParametersConstantDataHandle::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>)::$_0::operator()(uint64_t **a1, float a2, float a3)
{
  uint64_t v5;
  unint64_t v6;
  float *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  _QWORD *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint8x8_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  float v72;
  float v73;
  _BOOL8 v74;
  unint64_t v75;
  unint64_t v76;
  size_t prime;
  unint64_t v78;
  uint8x8_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint8x8_t v88;
  float v89;
  void **v90;
  float *v91;
  unint64_t v93;
  uint64_t v95;
  float v96;
  float v97;
  _BOOL8 v98;
  unint64_t v99;
  unint64_t v100;
  size_t v101;
  void *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  size_t v107;
  size_t v108;
  size_t v109;
  _QWORD *i;
  size_t v111;
  uint64_t v112;
  unint64_t v113;
  uint8x8_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  size_t v118;
  _QWORD *v119;
  float **v120;
  unint64_t v121;
  unint64_t v122;
  uint8x8_t v123;
  _QWORD **v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  float v128;
  float v129;
  _BOOL8 v130;
  unint64_t v131;
  unint64_t v132;
  size_t v133;
  void *v134;
  void *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  size_t v139;
  size_t v140;
  size_t v141;
  _QWORD *j;
  size_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint8x8_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  size_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  uint8x8_t v163;
  _QWORD **v164;
  _QWORD *v165;
  unint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  float v169;
  float v170;
  _BOOL8 v171;
  unint64_t v172;
  unint64_t v173;
  size_t v174;
  void *v175;
  void *v176;
  uint64_t v177;
  _QWORD *v178;
  size_t v179;
  size_t v180;
  size_t v181;
  _QWORD *v182;
  size_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint8x8_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  size_t v191;
  uint64_t v192;
  _QWORD *v193;
  void *v194;
  void *v195;
  uint64_t v196;
  _QWORD *v197;
  unint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  _QWORD *v201;
  unint64_t v202;
  unint64_t v203;
  float v205;
  float v206;
  unint64_t v207;

  v5 = **a1;
  v6 = v5 + 7552;
  v205 = 1.0 / (float)(a3 - a2);
  v206 = -a2;
  v7 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>>>::find<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>((_QWORD *)(v5 + 7552), -a2, v205);
  if (v7)
  {
    v8 = *((_QWORD *)v7 + 3);
    if (v8)
      return v8;
  }
  v9 = *(_QWORD *)(v5 + 7424);
  if (*(_QWORD *)(v5 + 7416) == v9)
  {
    v11 = (-1431655765 * ((*(_QWORD *)(v5 + 7472) - *(_QWORD *)(v5 + 7464)) >> 3)) | 0x100000000;
    v12 = *(uint64_t **)(v5 + 7448);
    v13 = *(_QWORD *)(v5 + 7456);
    if ((unint64_t)v12 >= v13)
    {
      v15 = *(uint64_t **)(v5 + 7440);
      v16 = v12 - v15;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_416;
      v18 = v13 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          goto LABEL_415;
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = (uint64_t *)&v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v11;
      v14 = v21 + 1;
      if (v12 == v15)
      {
        v15 = v12;
      }
      else
      {
        v23 = (char *)v12 - (char *)v15 - 8;
        if (v23 < 0x58)
          goto LABEL_419;
        if ((unint64_t)((char *)v15 - v20) < 0x20)
          goto LABEL_419;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v12 - 2;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 4;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v12 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_419:
          do
          {
            v29 = *--v12;
            *--v21 = v29;
          }
          while (v12 != v15);
          v15 = *(uint64_t **)(v5 + 7440);
        }
      }
      *(_QWORD *)(v5 + 7440) = v21;
      *(_QWORD *)(v5 + 7448) = v14;
      *(_QWORD *)(v5 + 7456) = v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v12 = v11;
      v14 = v12 + 1;
    }
    *(_QWORD *)(v5 + 7448) = v14;
    v8 = *(v14 - 1);
  }
  else
  {
    v10 = *(_QWORD *)(v9 - 8);
    *(_QWORD *)(v5 + 7424) = v9 - 8;
    *(_DWORD *)(*(_QWORD *)(v5 + 7440) + 8 * v10) = -1431655765
                                                  * ((*(_QWORD *)(v5 + 7472) - *(_QWORD *)(v5 + 7464)) >> 3);
    *(_DWORD *)(*(_QWORD *)(v5 + 7440) + 8 * v10 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v5 + 7440)
                                                                                            + 8 * v10
                                                                                            + 4) << 32)
                                                       + 0x100000000) >> 32;
    v8 = v10 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v5 + 7440) + 8 * v10 + 4) << 32);
  }
  v30 = *(_QWORD **)(v5 + 7472);
  v31 = *(_QWORD *)(v5 + 7480);
  if ((unint64_t)v30 >= v31)
  {
    v33 = *(_QWORD **)(v5 + 7464);
    v34 = 0xAAAAAAAAAAAAAAABLL * (v30 - v33) + 1;
    if (v34 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_416;
    v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (_QWORD)v33) >> 3);
    if (2 * v35 > v34)
      v34 = 2 * v35;
    if (v35 >= 0x555555555555555)
      v36 = 0xAAAAAAAAAAAAAAALL;
    else
      v36 = v34;
    if (v36 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_415;
    v37 = 24 * v36;
    v38 = (char *)operator new(24 * v36);
    v39 = &v38[8 * (v30 - v33)];
    *((_QWORD *)v39 + 1) = 0;
    *((_QWORD *)v39 + 2) = 0;
    v40 = &v38[v37];
    *(_QWORD *)v39 = 0;
    v32 = v39 + 24;
    if (v30 == v33)
    {
      *(_QWORD *)(v5 + 7464) = v39;
      *(_QWORD *)(v5 + 7472) = v32;
      *(_QWORD *)(v5 + 7480) = v40;
    }
    else
    {
      do
      {
        v41 = *(_OWORD *)(v30 - 3);
        v30 -= 3;
        *(_OWORD *)(v39 - 24) = v41;
        v39 -= 24;
        *((_QWORD *)v39 + 2) = v30[2];
        v30[1] = 0;
        v30[2] = 0;
      }
      while (v30 != v33);
      v30 = *(_QWORD **)(v5 + 7464);
      v42 = *(_QWORD **)(v5 + 7472);
      *(_QWORD *)(v5 + 7464) = v39;
      *(_QWORD *)(v5 + 7472) = v32;
      *(_QWORD *)(v5 + 7480) = v40;
      while (v42 != v30)
      {
        v43 = (std::__shared_weak_count *)*(v42 - 1);
        if (v43)
        {
          p_shared_owners = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(p_shared_owners);
          while (__stlxr(v45 - 1, p_shared_owners));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v42 -= 3;
      }
    }
    if (v30)
      operator delete(v30);
  }
  else
  {
    *v30 = 0;
    v30[1] = 0;
    v32 = v30 + 3;
    v30[2] = 0;
  }
  *(_QWORD *)(v5 + 7472) = v32;
  v46 = *(char **)(v5 + 7496);
  v47 = *(_QWORD *)(v5 + 7504);
  if ((unint64_t)v46 < v47)
  {
    *(_QWORD *)v46 = v8;
    v48 = (unint64_t)(v46 + 8);
    goto LABEL_72;
  }
  v49 = *(char **)(v5 + 7488);
  v50 = (v46 - v49) >> 3;
  v51 = v50 + 1;
  if ((unint64_t)(v50 + 1) >> 61)
LABEL_416:
    abort();
  v52 = v47 - (_QWORD)v49;
  if (v52 >> 2 > v51)
    v51 = v52 >> 2;
  if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
    v53 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v53 = v51;
  if (v53)
  {
    if (v53 >> 61)
      goto LABEL_415;
    v54 = operator new(8 * v53);
  }
  else
  {
    v54 = 0;
  }
  v55 = &v54[8 * v50];
  v56 = &v54[8 * v53];
  *v55 = v8;
  v48 = (unint64_t)(v55 + 1);
  if (v46 != v49)
  {
    v57 = v46 - v49 - 8;
    if (v57 < 0x58)
      goto LABEL_420;
    if ((unint64_t)(v49 - v54) < 0x20)
      goto LABEL_420;
    v58 = (v57 >> 3) + 1;
    v59 = &v54[8 * v50 - 16];
    v60 = v46 - 16;
    v61 = v58 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v62 = *(_OWORD *)v60;
      *(v59 - 1) = *((_OWORD *)v60 - 1);
      *v59 = v62;
      v59 -= 2;
      v60 -= 32;
      v61 -= 4;
    }
    while (v61);
    v55 -= v58 & 0x3FFFFFFFFFFFFFFCLL;
    v46 -= 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
    if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_420:
      do
      {
        v63 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        *--v55 = v63;
      }
      while (v46 != v49);
    }
  }
  *(_QWORD *)(v5 + 7488) = v55;
  *(_QWORD *)(v5 + 7496) = v48;
  *(_QWORD *)(v5 + 7504) = v56;
  if (v49)
    operator delete(v49);
LABEL_72:
  v64 = v5 + 7336;
  *(_QWORD *)(v5 + 7496) = v48;
  v65 = *(_QWORD *)(v5 + 7344);
  if (v65)
  {
    v66 = (uint8x8_t)vcnt_s8((int8x8_t)v65);
    v66.i16[0] = vaddlv_u8(v66);
    if (v66.u32[0] > 1uLL)
    {
      v48 = v8;
      if (v8 >= v65)
        v48 = v8 % v65;
    }
    else
    {
      v48 = (v65 - 1) & v8;
    }
    v67 = *(_QWORD **)(*(_QWORD *)v64 + 8 * v48);
    if (v67)
    {
      v68 = (_QWORD *)*v67;
      if (v68)
      {
        if (v66.u32[0] < 2uLL)
        {
          while (1)
          {
            v70 = v68[1];
            if (v70 == v8)
            {
              if (v68[2] == v8)
                goto LABEL_131;
            }
            else if ((v70 & (v65 - 1)) != v48)
            {
              goto LABEL_93;
            }
            v68 = (_QWORD *)*v68;
            if (!v68)
              goto LABEL_93;
          }
        }
        do
        {
          v69 = v68[1];
          if (v69 == v8)
          {
            if (v68[2] == v8)
              goto LABEL_131;
          }
          else
          {
            if (v69 >= v65)
              v69 %= v65;
            if (v69 != v48)
              break;
          }
          v68 = (_QWORD *)*v68;
        }
        while (v68);
      }
    }
  }
LABEL_93:
  v71 = (char *)operator new(0x30uLL);
  *(_QWORD *)v71 = 0;
  *((_QWORD *)v71 + 1) = v8;
  *((_QWORD *)v71 + 2) = v8;
  *(_OWORD *)(v71 + 24) = xmmword_19FFB3350;
  v71[40] = 0;
  v72 = (float)(unint64_t)(*(_QWORD *)(v5 + 7360) + 1);
  v73 = *(float *)(v5 + 7368);
  if (!v65 || (float)(v73 * (float)v65) < v72)
  {
    v74 = 1;
    if (v65 >= 3)
      v74 = (v65 & (v65 - 1)) != 0;
    v75 = v74 | (2 * v65);
    v76 = vcvtps_u32_f32(v72 / v73);
    if (v75 <= v76)
      prime = v76;
    else
      prime = v75;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v65 = *(_QWORD *)(v5 + 7344);
    }
    if (prime > v65)
      goto LABEL_105;
    if (prime < v65)
    {
      v78 = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 7360) / *(float *)(v5 + 7368));
      if (v65 < 3 || (v79 = (uint8x8_t)vcnt_s8((int8x8_t)v65), v79.i16[0] = vaddlv_u8(v79), v79.u32[0] > 1uLL))
      {
        v78 = std::__next_prime(v78);
      }
      else
      {
        v80 = 1 << -(char)__clz(v78 - 1);
        if (v78 >= 2)
          v78 = v80;
      }
      if (prime <= v78)
        prime = v78;
      if (prime < v65)
LABEL_105:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v5 + 7336, prime);
    }
    v65 = *(_QWORD *)(v5 + 7344);
    if ((v65 & (v65 - 1)) != 0)
    {
      if (v8 >= v65)
        v48 = v8 % v65;
      else
        v48 = v8;
    }
    else
    {
      v48 = (v65 - 1) & v8;
    }
  }
  v81 = *(_QWORD *)v64;
  v82 = *(_QWORD **)(*(_QWORD *)v64 + 8 * v48);
  if (v82)
  {
    *(_QWORD *)v71 = *v82;
LABEL_129:
    *v82 = v71;
    goto LABEL_130;
  }
  *(_QWORD *)v71 = *(_QWORD *)(v5 + 7352);
  *(_QWORD *)(v5 + 7352) = v71;
  *(_QWORD *)(v81 + 8 * v48) = v5 + 7352;
  if (*(_QWORD *)v71)
  {
    v83 = *(_QWORD *)(*(_QWORD *)v71 + 8);
    if ((v65 & (v65 - 1)) != 0)
    {
      if (v83 >= v65)
        v83 %= v65;
    }
    else
    {
      v83 &= v65 - 1;
    }
    v82 = (_QWORD *)(*(_QWORD *)v64 + 8 * v83);
    goto LABEL_129;
  }
LABEL_130:
  ++*(_QWORD *)(v5 + 7360);
LABEL_131:
  v84 = *(_QWORD *)(v5 + 7560);
  v85 = LODWORD(v206);
  if (a2 == 0.0)
    v85 = 0;
  v86 = LODWORD(v205) - 0x61C8864680B583EBLL;
  if (v205 == 0.0)
    v86 = 0x9E3779B97F4A7C15;
  v87 = ((v85 >> 2) + (v85 << 6) + v86) ^ v85;
  if (v84)
  {
    v88 = (uint8x8_t)vcnt_s8((int8x8_t)v84);
    v88.i16[0] = vaddlv_u8(v88);
    if (v88.u32[0] > 1uLL)
    {
      v64 = ((v85 >> 2) + (v85 << 6) + v86) ^ v85;
      v89 = v206;
      if (v87 >= v84)
        v64 = v87 % v84;
    }
    else
    {
      v64 = v87 & (v84 - 1);
      v89 = v206;
    }
    v90 = *(void ***)(*(_QWORD *)v6 + 8 * v64);
    if (v90)
    {
      v91 = (float *)*v90;
      if (*v90)
      {
        if (v88.u32[0] < 2uLL)
        {
          while (1)
          {
            v95 = *((_QWORD *)v91 + 1);
            if (v95 == v87)
            {
              if (v91[4] == v89 && v91[5] == v205)
                goto LABEL_222;
            }
            else if ((v95 & (v84 - 1)) != v64)
            {
              goto LABEL_162;
            }
            v91 = *(float **)v91;
            if (!v91)
              goto LABEL_162;
          }
        }
        do
        {
          v93 = *((_QWORD *)v91 + 1);
          if (v93 == v87)
          {
            if (v91[4] == v89 && v91[5] == v205)
              goto LABEL_222;
          }
          else
          {
            if (v93 >= v84)
              v93 %= v84;
            if (v93 != v64)
              break;
          }
          v91 = *(float **)v91;
        }
        while (v91);
      }
    }
  }
LABEL_162:
  v91 = (float *)operator new(0x20uLL);
  *(_QWORD *)v91 = 0;
  *((_QWORD *)v91 + 1) = v87;
  *((_OWORD *)v91 + 1) = __PAIR64__(LODWORD(v205), LODWORD(v206));
  v96 = (float)(unint64_t)(*(_QWORD *)(v5 + 7576) + 1);
  v97 = *(float *)(v5 + 7584);
  if (!v84 || (float)(v97 * (float)v84) < v96)
  {
    v98 = 1;
    if (v84 >= 3)
      v98 = (v84 & (v84 - 1)) != 0;
    v99 = v98 | (2 * v84);
    v100 = vcvtps_u32_f32(v96 / v97);
    if (v99 <= v100)
      v101 = v100;
    else
      v101 = v99;
    if (v101 == 1)
    {
      v101 = 2;
    }
    else if ((v101 & (v101 - 1)) != 0)
    {
      v101 = std::__next_prime(v101);
      v84 = *(_QWORD *)(v5 + 7560);
    }
    if (v101 <= v84)
    {
      if (v101 >= v84)
        goto LABEL_199;
      v113 = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 7576) / *(float *)(v5 + 7584));
      if (v84 < 3 || (v114 = (uint8x8_t)vcnt_s8((int8x8_t)v84), v114.i16[0] = vaddlv_u8(v114), v114.u32[0] > 1uLL))
      {
        v113 = std::__next_prime(v113);
      }
      else
      {
        v115 = 1 << -(char)__clz(v113 - 1);
        if (v113 >= 2)
          v113 = v115;
      }
      if (v101 <= v113)
        v101 = v113;
      if (v101 >= v84)
      {
        v84 = *(_QWORD *)(v5 + 7560);
LABEL_199:
        if ((v84 & (v84 - 1)) != 0)
        {
          if (v87 >= v84)
            v64 = v87 % v84;
          else
            v64 = v87;
        }
        else
        {
          v64 = (v84 - 1) & v87;
        }
        goto LABEL_212;
      }
      if (!v101)
      {
        v193 = *(_QWORD **)v6;
        *(_QWORD *)v6 = 0;
        if (v193)
          operator delete(v193);
        v84 = 0;
        *(_QWORD *)(v5 + 7560) = 0;
        goto LABEL_199;
      }
    }
    if (v101 >> 61)
      goto LABEL_415;
    v102 = operator new(8 * v101);
    v103 = *(_QWORD **)v6;
    *(_QWORD *)v6 = v102;
    if (v103)
      operator delete(v103);
    v104 = 0;
    *(_QWORD *)(v5 + 7560) = v101;
    do
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v104++) = 0;
    while (v101 != v104);
    v105 = *(_QWORD **)(v5 + 7568);
    if (!v105)
    {
LABEL_198:
      v84 = v101;
      goto LABEL_199;
    }
    v106 = v5 + 7568;
    v107 = v105[1];
    v108 = v101 - 1;
    if ((v101 & (v101 - 1)) == 0)
    {
      v109 = v107 & v108;
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v109) = v106;
      for (i = (_QWORD *)*v105; *v105; i = (_QWORD *)*v105)
      {
        v111 = i[1] & v108;
        if (v111 == v109)
        {
          v105 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)v6 + 8 * v111))
        {
          *v105 = *i;
          v112 = 8 * v111;
          *i = **(_QWORD **)(*(_QWORD *)v6 + v112);
          **(_QWORD **)(*(_QWORD *)v6 + v112) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v6 + 8 * v111) = v105;
          v105 = i;
          v109 = v111;
        }
      }
      goto LABEL_198;
    }
    if (v107 >= v101)
      v107 %= v101;
    *(_QWORD *)(*(_QWORD *)v6 + 8 * v107) = v106;
    v116 = (_QWORD *)*v105;
    if (!*v105)
      goto LABEL_198;
    while (1)
    {
      v118 = v116[1];
      if (v118 >= v101)
        v118 %= v101;
      if (v118 != v107)
      {
        if (!*(_QWORD *)(*(_QWORD *)v6 + 8 * v118))
        {
          *(_QWORD *)(*(_QWORD *)v6 + 8 * v118) = v105;
          goto LABEL_203;
        }
        *v105 = *v116;
        v117 = 8 * v118;
        *v116 = **(_QWORD **)(*(_QWORD *)v6 + v117);
        **(_QWORD **)(*(_QWORD *)v6 + v117) = v116;
        v116 = v105;
      }
      v118 = v107;
LABEL_203:
      v105 = v116;
      v116 = (_QWORD *)*v116;
      v107 = v118;
      if (!v116)
        goto LABEL_198;
    }
  }
LABEL_212:
  v119 = *(_QWORD **)v6;
  v120 = *(float ***)(*(_QWORD *)v6 + 8 * v64);
  if (v120)
  {
    *(_QWORD *)v91 = *v120;
LABEL_220:
    *v120 = v91;
    goto LABEL_221;
  }
  *(_QWORD *)v91 = *(_QWORD *)(v5 + 7568);
  *(_QWORD *)(v5 + 7568) = v91;
  v119[v64] = v5 + 7568;
  if (*(_QWORD *)v91)
  {
    v121 = *(_QWORD *)(*(_QWORD *)v91 + 8);
    if ((v84 & (v84 - 1)) != 0)
    {
      if (v121 >= v84)
        v121 %= v84;
    }
    else
    {
      v121 &= v84 - 1;
    }
    v120 = (float **)(*(_QWORD *)v6 + 8 * v121);
    goto LABEL_220;
  }
LABEL_221:
  ++*(_QWORD *)(v5 + 7576);
LABEL_222:
  *((_QWORD *)v91 + 3) = v8;
  v122 = *(_QWORD *)(v5 + 7600);
  if (v122)
  {
    v123 = (uint8x8_t)vcnt_s8((int8x8_t)v122);
    v123.i16[0] = vaddlv_u8(v123);
    if (v123.u32[0] > 1uLL)
    {
      v6 = v8;
      if (v8 >= v122)
        v6 = v8 % v122;
    }
    else
    {
      v6 = (v122 - 1) & v8;
    }
    v124 = *(_QWORD ***)(*(_QWORD *)(v5 + 7592) + 8 * v6);
    if (v124)
    {
      v125 = *v124;
      if (*v124)
      {
        if (v123.u32[0] < 2uLL)
        {
          while (1)
          {
            v127 = v125[1];
            if (v127 == v8)
            {
              if (v125[2] == v8)
                goto LABEL_303;
            }
            else if ((v127 & (v122 - 1)) != v6)
            {
              goto LABEL_243;
            }
            v125 = (_QWORD *)*v125;
            if (!v125)
              goto LABEL_243;
          }
        }
        do
        {
          v126 = v125[1];
          if (v126 == v8)
          {
            if (v125[2] == v8)
              goto LABEL_303;
          }
          else
          {
            if (v126 >= v122)
              v126 %= v122;
            if (v126 != v6)
              break;
          }
          v125 = (_QWORD *)*v125;
        }
        while (v125);
      }
    }
  }
LABEL_243:
  v125 = operator new(0x20uLL);
  *v125 = 0;
  v125[1] = v8;
  v125[2] = v8;
  v125[3] = 0;
  v128 = (float)(unint64_t)(*(_QWORD *)(v5 + 7616) + 1);
  v129 = *(float *)(v5 + 7624);
  if (!v122 || (float)(v129 * (float)v122) < v128)
  {
    v130 = 1;
    if (v122 >= 3)
      v130 = (v122 & (v122 - 1)) != 0;
    v131 = v130 | (2 * v122);
    v132 = vcvtps_u32_f32(v128 / v129);
    if (v131 <= v132)
      v133 = v132;
    else
      v133 = v131;
    if (v133 == 1)
    {
      v133 = 2;
    }
    else if ((v133 & (v133 - 1)) != 0)
    {
      v133 = std::__next_prime(v133);
      v122 = *(_QWORD *)(v5 + 7600);
    }
    if (v133 <= v122)
    {
      if (v133 >= v122)
        goto LABEL_280;
      v146 = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 7616) / *(float *)(v5 + 7624));
      if (v122 < 3 || (v147 = (uint8x8_t)vcnt_s8((int8x8_t)v122), v147.i16[0] = vaddlv_u8(v147), v147.u32[0] > 1uLL))
      {
        v146 = std::__next_prime(v146);
      }
      else
      {
        v148 = 1 << -(char)__clz(v146 - 1);
        if (v146 >= 2)
          v146 = v148;
      }
      if (v133 <= v146)
        v133 = v146;
      if (v133 >= v122)
      {
        v122 = *(_QWORD *)(v5 + 7600);
LABEL_280:
        if ((v122 & (v122 - 1)) != 0)
        {
          if (v8 >= v122)
            v6 = v8 % v122;
          else
            v6 = v8;
        }
        else
        {
          v6 = (v122 - 1) & v8;
        }
        goto LABEL_293;
      }
      if (!v133)
      {
        v194 = *(void **)(v5 + 7592);
        *(_QWORD *)(v5 + 7592) = 0;
        if (v194)
          operator delete(v194);
        v122 = 0;
        *(_QWORD *)(v5 + 7600) = 0;
        goto LABEL_280;
      }
    }
    if (v133 >> 61)
      goto LABEL_415;
    v134 = operator new(8 * v133);
    v135 = *(void **)(v5 + 7592);
    *(_QWORD *)(v5 + 7592) = v134;
    if (v135)
      operator delete(v135);
    v136 = 0;
    *(_QWORD *)(v5 + 7600) = v133;
    do
      *(_QWORD *)(*(_QWORD *)(v5 + 7592) + 8 * v136++) = 0;
    while (v133 != v136);
    v137 = *(_QWORD **)(v5 + 7608);
    if (!v137)
    {
LABEL_279:
      v122 = v133;
      goto LABEL_280;
    }
    v138 = v5 + 7608;
    v139 = v137[1];
    v140 = v133 - 1;
    if ((v133 & (v133 - 1)) == 0)
    {
      v141 = v139 & v140;
      *(_QWORD *)(*(_QWORD *)(v5 + 7592) + 8 * v141) = v138;
      for (j = (_QWORD *)*v137; *v137; j = (_QWORD *)*v137)
      {
        v143 = j[1] & v140;
        if (v143 == v141)
        {
          v137 = j;
        }
        else
        {
          v144 = *(_QWORD *)(v5 + 7592);
          if (*(_QWORD *)(v144 + 8 * v143))
          {
            *v137 = *j;
            v145 = 8 * v143;
            *j = **(_QWORD **)(*(_QWORD *)(v5 + 7592) + v145);
            **(_QWORD **)(*(_QWORD *)(v5 + 7592) + v145) = j;
          }
          else
          {
            *(_QWORD *)(v144 + 8 * v143) = v137;
            v137 = j;
            v141 = v143;
          }
        }
      }
      goto LABEL_279;
    }
    if (v139 >= v133)
      v139 %= v133;
    *(_QWORD *)(*(_QWORD *)(v5 + 7592) + 8 * v139) = v138;
    v149 = (_QWORD *)*v137;
    if (!*v137)
      goto LABEL_279;
    while (1)
    {
      v151 = v149[1];
      if (v151 >= v133)
        v151 %= v133;
      if (v151 != v139)
      {
        v152 = *(_QWORD *)(v5 + 7592);
        if (!*(_QWORD *)(v152 + 8 * v151))
        {
          *(_QWORD *)(v152 + 8 * v151) = v137;
          goto LABEL_284;
        }
        *v137 = *v149;
        v150 = 8 * v151;
        *v149 = **(_QWORD **)(*(_QWORD *)(v5 + 7592) + v150);
        **(_QWORD **)(*(_QWORD *)(v5 + 7592) + v150) = v149;
        v149 = v137;
      }
      v151 = v139;
LABEL_284:
      v137 = v149;
      v149 = (_QWORD *)*v149;
      v139 = v151;
      if (!v149)
        goto LABEL_279;
    }
  }
LABEL_293:
  v153 = *(_QWORD *)(v5 + 7592);
  v154 = *(_QWORD **)(v153 + 8 * v6);
  if (v154)
  {
    *v125 = *v154;
LABEL_301:
    *v154 = v125;
    goto LABEL_302;
  }
  *v125 = *(_QWORD *)(v5 + 7608);
  *(_QWORD *)(v5 + 7608) = v125;
  *(_QWORD *)(v153 + 8 * v6) = v5 + 7608;
  if (*v125)
  {
    v155 = *(_QWORD *)(*v125 + 8);
    if ((v122 & (v122 - 1)) != 0)
    {
      if (v155 >= v122)
        v155 %= v122;
    }
    else
    {
      v155 &= v122 - 1;
    }
    v154 = (_QWORD *)(*(_QWORD *)(v5 + 7592) + 8 * v155);
    goto LABEL_301;
  }
LABEL_302:
  ++*(_QWORD *)(v5 + 7616);
LABEL_303:
  v125[3] = __PAIR64__(LODWORD(v205), LODWORD(v206));
  v156 = **a1;
  v157 = *(_QWORD *)(v156 + 7440);
  v207 = v8;
  v158 = *(_DWORD *)(v157 + 8 * v8);
  v159 = *(_QWORD *)(v156 + 7464);
  v160 = operator new();
  v161 = (_QWORD *)ggl::BufferData::BufferData(v160, qword_1EE56DF20, 2, 0, 6, 1);
  v161[25] = ggl::DaVinci::GradientParameters::reflection(void)::reflection;
  *v161 = &off_1E42B9C90;
  v162 = *(_QWORD *)(v156 + 7520);
  if (v162)
  {
    v163 = (uint8x8_t)vcnt_s8((int8x8_t)v162);
    v163.i16[0] = vaddlv_u8(v163);
    if (v163.u32[0] > 1uLL)
    {
      v6 = v8;
      if (v8 >= v162)
        v6 = v8 % v162;
    }
    else
    {
      v6 = (v162 - 1) & v8;
    }
    v164 = *(_QWORD ***)(*(_QWORD *)(v156 + 7512) + 8 * v6);
    if (v164)
    {
      v165 = *v164;
      if (*v164)
      {
        if (v163.u32[0] < 2uLL)
        {
          while (1)
          {
            v167 = v165[1];
            if (v167 == v8)
            {
              if (v165[2] == v8)
                goto LABEL_409;
            }
            else if ((v167 & (v162 - 1)) != v6)
            {
              goto LABEL_324;
            }
            v165 = (_QWORD *)*v165;
            if (!v165)
              goto LABEL_324;
          }
        }
        do
        {
          v166 = v165[1];
          if (v166 == v8)
          {
            if (v165[2] == v8)
              goto LABEL_409;
          }
          else
          {
            if (v166 >= v162)
              v166 %= v162;
            if (v166 != v6)
              break;
          }
          v165 = (_QWORD *)*v165;
        }
        while (v165);
      }
    }
  }
LABEL_324:
  v168 = (_QWORD *)(v156 + 7528);
  v165 = operator new(0x20uLL);
  *v165 = 0;
  v165[1] = v8;
  v165[2] = v8;
  v165[3] = 0;
  v169 = (float)(unint64_t)(*(_QWORD *)(v156 + 7536) + 1);
  v170 = *(float *)(v156 + 7544);
  if (!v162 || (float)(v170 * (float)v162) < v169)
  {
    v171 = 1;
    if (v162 >= 3)
      v171 = (v162 & (v162 - 1)) != 0;
    v172 = v171 | (2 * v162);
    v173 = vcvtps_u32_f32(v169 / v170);
    if (v172 <= v173)
      v174 = v173;
    else
      v174 = v172;
    if (v174 == 1)
    {
      v174 = 2;
    }
    else if ((v174 & (v174 - 1)) != 0)
    {
      v174 = std::__next_prime(v174);
      v162 = *(_QWORD *)(v156 + 7520);
    }
    if (v174 <= v162)
    {
      if (v174 >= v162)
        goto LABEL_394;
      v186 = vcvtps_u32_f32((float)*(unint64_t *)(v156 + 7536) / *(float *)(v156 + 7544));
      if (v162 < 3 || (v187 = (uint8x8_t)vcnt_s8((int8x8_t)v162), v187.i16[0] = vaddlv_u8(v187), v187.u32[0] > 1uLL))
      {
        v186 = std::__next_prime(v186);
      }
      else
      {
        v188 = 1 << -(char)__clz(v186 - 1);
        if (v186 >= 2)
          v186 = v188;
      }
      if (v174 <= v186)
        v174 = v186;
      if (v174 >= v162)
        goto LABEL_394;
      if (!v174)
      {
        v195 = *(void **)(v156 + 7512);
        *(_QWORD *)(v156 + 7512) = 0;
        if (v195)
          operator delete(v195);
        *(_QWORD *)(v156 + 7520) = 0;
        goto LABEL_394;
      }
    }
    if (!(v174 >> 61))
    {
      v175 = operator new(8 * v174);
      v176 = *(void **)(v156 + 7512);
      *(_QWORD *)(v156 + 7512) = v175;
      if (v176)
        operator delete(v176);
      v177 = 0;
      *(_QWORD *)(v156 + 7520) = v174;
      do
        *(_QWORD *)(*(_QWORD *)(v156 + 7512) + 8 * v177++) = 0;
      while (v174 != v177);
      v178 = (_QWORD *)*v168;
      if (!*v168)
        goto LABEL_394;
      v179 = v178[1];
      v180 = v174 - 1;
      if ((v174 & (v174 - 1)) == 0)
      {
        v181 = v179 & v180;
        *(_QWORD *)(*(_QWORD *)(v156 + 7512) + 8 * v181) = v168;
        while (1)
        {
          v182 = (_QWORD *)*v178;
          if (!*v178)
            break;
          v183 = v182[1] & v180;
          if (v183 == v181)
          {
            v178 = (_QWORD *)*v178;
          }
          else
          {
            v184 = *(_QWORD *)(v156 + 7512);
            if (*(_QWORD *)(v184 + 8 * v183))
            {
              *v178 = *v182;
              v185 = 8 * v183;
              *v182 = **(_QWORD **)(*(_QWORD *)(v156 + 7512) + v185);
              **(_QWORD **)(*(_QWORD *)(v156 + 7512) + v185) = v182;
            }
            else
            {
              *(_QWORD *)(v184 + 8 * v183) = v178;
              v178 = v182;
              v181 = v183;
            }
          }
        }
LABEL_394:
        v162 = *(_QWORD *)(v156 + 7520);
        if ((v162 & (v162 - 1)) != 0)
        {
          if (v8 >= v162)
            v6 = v8 % v162;
          else
            v6 = v8;
        }
        else
        {
          v6 = (v162 - 1) & v8;
        }
        goto LABEL_399;
      }
      if (v179 >= v174)
        v179 %= v174;
      *(_QWORD *)(*(_QWORD *)(v156 + 7512) + 8 * v179) = v168;
      v189 = (_QWORD *)*v178;
      if (!*v178)
        goto LABEL_394;
      while (1)
      {
        v191 = v189[1];
        if (v191 >= v174)
          v191 %= v174;
        if (v191 != v179)
        {
          v192 = *(_QWORD *)(v156 + 7512);
          if (!*(_QWORD *)(v192 + 8 * v191))
          {
            *(_QWORD *)(v192 + 8 * v191) = v178;
            goto LABEL_362;
          }
          *v178 = *v189;
          v190 = 8 * v191;
          *v189 = **(_QWORD **)(*(_QWORD *)(v156 + 7512) + v190);
          **(_QWORD **)(*(_QWORD *)(v156 + 7512) + v190) = v189;
          v189 = v178;
        }
        v191 = v179;
LABEL_362:
        v178 = v189;
        v189 = (_QWORD *)*v189;
        v179 = v191;
        if (!v189)
          goto LABEL_394;
      }
    }
LABEL_415:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_399:
  v196 = *(_QWORD *)(v156 + 7512);
  v197 = *(_QWORD **)(v196 + 8 * v6);
  if (v197)
  {
    *v165 = *v197;
  }
  else
  {
    *v165 = *v168;
    *v168 = v165;
    *(_QWORD *)(v196 + 8 * v6) = v168;
    if (!*v165)
      goto LABEL_408;
    v198 = *(_QWORD *)(*v165 + 8);
    if ((v162 & (v162 - 1)) != 0)
    {
      if (v198 >= v162)
        v198 %= v162;
    }
    else
    {
      v198 &= v162 - 1;
    }
    v197 = (_QWORD *)(*(_QWORD *)(v156 + 7512) + 8 * v198);
  }
  *v197 = v165;
LABEL_408:
  ++*(_QWORD *)(v156 + 7536);
LABEL_409:
  v199 = (uint64_t *)(v159 + 24 * v158);
  v200 = v165[3];
  v165[3] = v160;
  if (v200)
    (*(void (**)(uint64_t))(*(_QWORD *)v200 + 8))(v200);
  v201 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>> const&>,std::tuple<>>(v156 + 7336, v207, &v207);
  ++v201[3];
  *v199 = v160;
  v202 = *(_QWORD *)(v160 + 8);
  v203 = *(_QWORD *)(v160 + 64);
  **(int32x2_t **)(v160 + 72) = vrev64_s32((int32x2_t)__PAIR64__(LODWORD(v205), LODWORD(v206)));
  if (v203 > v202)
    v202 = v203;
  *(_QWORD *)(v160 + 56) = 0;
  *(_QWORD *)(v160 + 64) = v202;
  return v8;
}

void sub_19F8CF32C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[3];
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::LabelMapTileCollisionInfo::extractPathsFromSource(double *a1, double *a2, uint64_t *a3, int **a4)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t *v36;
  double v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  uint64_t *v46;
  uint64_t *v47;
  double *v48;
  int **v49;
  uint64_t *v50;
  double v51;
  double v52;
  double v53;
  unsigned __int8 v54;
  int *v55;
  char *v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  double v60;
  BOOL v61;
  char *v62;
  double v63;
  uint64_t v64;
  double *v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double *v88;
  double *v89;
  double *v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  char *v100;
  __int128 v101;
  char *v102;
  double *v103;
  __int128 v104;
  int v105;
  unint64_t v106;
  uint64_t *v107;
  _DWORD *v108;
  unint64_t v109;
  _DWORD *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  _DWORD *v122;
  uint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  __int128 *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  unint64_t v132;
  uint64_t *v133;
  _DWORD *v134;
  unint64_t v135;
  _DWORD *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _DWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  _DWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _OWORD *v151;
  __int128 *v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  double **v158;
  char *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  double *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  double *v170;
  _QWORD *v171;
  char *v172;
  unint64_t v173;
  char *v174;
  char *v175;
  double *v176;
  double *v177;
  double *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  __int128 v193;
  double *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  float32x4_t *v198;
  unint64_t v199;
  unint64_t v200;
  double *v201;
  double *v202;
  unint64_t v203;
  uint64_t v204;
  float32x4_t *v205;
  const double *v206;
  unint64_t v207;
  const double *v208;
  unsigned __int128 v209;
  const double *v210;
  unsigned __int128 v211;
  const double *v212;
  unsigned __int128 v213;
  unsigned __int128 v214;
  float *v215;
  float v216;
  int64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  __int128 v231;
  double *v232;
  unint64_t v233;
  unint64_t v234;
  BOOL v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  double *v239;
  double *v240;
  unint64_t v241;
  const double *v242;
  double *v243;
  double *v244;
  _QWORD *v245;
  __int128 v246;
  uint64_t v247;
  double *v248;
  double *v249;
  double v250;
  double v251;
  long double v252;
  long double v253;
  double v254;
  long double v255;
  double v256;
  __double2 v257;
  double v258;
  __double2 v259;
  double v260;
  double v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  double *v269;
  double *v270;
  double *v271;
  double *v272;
  int v273;
  int *v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t *v278;
  int *v279;
  _QWORD v280[2];
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD v287[2];
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  float64x2x3_t v295;
  float64x2x3_t v296;

  v294 = *MEMORY[0x1E0C80C00];
  v287[0] = 0;
  v287[1] = 0;
  v288 = 0;
  {
    v262 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v262, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v289 = mdm::Allocator::instance(void)::alloc;
  v290 = 0;
  v291 = 0;
  v292 = 0;
  {
    v263 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v263, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v293 = mdm::Allocator::instance(void)::alloc;
  v280[0] = 0;
  v280[1] = 0;
  v281 = 0;
  {
    v264 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v264, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v282 = mdm::Allocator::instance(void)::alloc;
  v283 = 0;
  v284 = 0;
  v285 = 0;
  {
    v265 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v265, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v286 = mdm::Allocator::instance(void)::alloc;
  {
    v266 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v266, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v13 = mdm::Allocator::instance(void)::alloc;
  v14 = a1[2];
  if (vabdd_f64(v14, a2[2]) <= 0.000000001)
  {
    v17 = 0;
    v16 = 0;
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 24, 8);
    v16 = v15;
    v17 = v15 + 24;
    if (v15)
    {
      *(_OWORD *)v15 = xmmword_19FFB32C0;
      *(double *)(v15 + 16) = v14;
    }
  }
  v18 = *a1;
  v267 = v13;
  v270 = a1;
  if (vabdd_f64(*a1, *a2) > 0.000000001)
  {
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v16) >> 3);
    v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    if (0x5555555555555556 * ((uint64_t)(v17 - v16) >> 3) > v20)
      v20 = 0x5555555555555556 * ((uint64_t)(v17 - v16) >> 3);
    if (v19 >= 0x555555555555555)
      v21 = 0xAAAAAAAAAAAAAAALL;
    else
      v21 = v20;
    if (v21)
    {
      v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, 24 * v21, 8);
      v23 = v22 + 8 * ((uint64_t)(v17 - v16) >> 3);
      v21 = v22 + 24 * v21;
      v24 = a3;
      if (v22)
      {
        *(_OWORD *)v23 = xmmword_19FFB15E0;
        *(double *)(v23 + 16) = -v18;
      }
    }
    else
    {
      v24 = a3;
      v23 = 8 * ((uint64_t)(v17 - v16) >> 3);
    }
    v25 = v23 + 24;
    if (v17 == v16)
    {
      v28 = v17;
      v16 = v23;
      if (!v17)
        goto LABEL_27;
    }
    else
    {
      v26 = v17;
      do
      {
        v27 = *(_OWORD *)(v26 - 24);
        *(_QWORD *)(v23 - 8) = *(_QWORD *)(v26 - 8);
        *(_OWORD *)(v23 - 24) = v27;
        v23 -= 24;
        v26 -= 24;
      }
      while (v26 != v16);
      v28 = v16;
      v16 = v23;
      if (!v28)
        goto LABEL_27;
    }
    (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v13 + 40))(v13, v28, v17 - v28);
LABEL_27:
    v17 = v21;
    a1 = v270;
    goto LABEL_28;
  }
  v24 = a3;
  v25 = v17;
LABEL_28:
  v29 = a1[3];
  if (vabdd_f64(v29, a2[3]) <= 0.000000001)
  {
    v268 = v17;
    v269 = (double *)v16;
    v30 = v25;
  }
  else if (v25 >= v17)
  {
    v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v16) >> 3) + 1;
    if (v31 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    if (0x5555555555555556 * ((uint64_t)(v17 - v16) >> 3) > v31)
      v31 = 0x5555555555555556 * ((uint64_t)(v17 - v16) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v16) >> 3) >= 0x555555555555555)
      v32 = 0xAAAAAAAAAAAAAAALL;
    else
      v32 = v31;
    if (v32)
    {
      v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, 24 * v32, 8);
      v34 = v33 + 8 * ((uint64_t)(v25 - v16) >> 3);
      v32 = v33 + 24 * v32;
      if (v33)
      {
        *(_OWORD *)v34 = xmmword_19FFB33A0;
        *(double *)(v34 + 16) = v29;
      }
    }
    else
    {
      v34 = 8 * ((uint64_t)(v25 - v16) >> 3);
    }
    v30 = v34 + 24;
    if (v25 != v16)
    {
      do
      {
        v35 = *(_OWORD *)(v25 - 24);
        *(_QWORD *)(v34 - 8) = *(_QWORD *)(v25 - 8);
        *(_OWORD *)(v34 - 24) = v35;
        v34 -= 24;
        v25 -= 24;
      }
      while (v25 != v16);
      v25 = v16;
    }
    v269 = (double *)v34;
    if (v25)
      (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v13 + 40))(v13, v25, v17 - v25);
    v268 = v32;
    a1 = v270;
  }
  else
  {
    v268 = v17;
    v269 = (double *)v16;
    if (v25)
    {
      *(_OWORD *)v25 = xmmword_19FFB33A0;
      *(double *)(v25 + 16) = v29;
    }
    v30 = v25 + 24;
  }
  v36 = v24;
  v37 = a1[1];
  if (vabdd_f64(v37, a2[1]) > 0.000000001)
  {
    v38 = -v37;
    if (v30 >= v268)
    {
      v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (_QWORD)v269) >> 3) + 1;
      if (v39 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      if (0x5555555555555556 * ((uint64_t)(v268 - (_QWORD)v269) >> 3) > v39)
        v39 = 0x5555555555555556 * ((uint64_t)(v268 - (_QWORD)v269) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v268 - (_QWORD)v269) >> 3) >= 0x555555555555555)
        v40 = 0xAAAAAAAAAAAAAAALL;
      else
        v40 = v39;
      if (v40)
      {
        v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, 24 * v40, 8);
        v42 = v41 + 8 * ((uint64_t)(v30 - (_QWORD)v269) >> 3);
        v40 = v41 + 24 * v40;
        if (v41)
        {
          *(_OWORD *)v42 = xmmword_19FFB4C60;
          *(double *)(v42 + 16) = v38;
        }
      }
      else
      {
        v42 = 8 * ((uint64_t)(v30 - (_QWORD)v269) >> 3);
      }
      v43 = v42 + 24;
      if ((double *)v30 != v269)
      {
        do
        {
          v44 = *(_OWORD *)(v30 - 24);
          *(_QWORD *)(v42 - 8) = *(_QWORD *)(v30 - 8);
          *(_OWORD *)(v42 - 24) = v44;
          v42 -= 24;
          v30 -= 24;
        }
        while ((double *)v30 != v269);
        v30 = (unint64_t)v269;
      }
      v269 = (double *)v42;
      if (v30)
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v13 + 40))(v13, v30, v268 - v30);
      v268 = v40;
      v30 = v43;
    }
    else
    {
      if (v30)
      {
        *(_OWORD *)v30 = xmmword_19FFB4C60;
        *(double *)(v30 + 16) = v38;
      }
      v30 += 24;
    }
  }
  if (v269 == (double *)v30)
  {
    v49 = a4;
    v50 = v24;
    goto LABEL_215;
  }
  v45 = 0;
  v46 = v287;
  v47 = v280;
  v48 = v269;
  v271 = (double *)v30;
  while (2)
  {
    v272 = v48;
    v273 = v45;
    v50 = v46;
    v51 = *v48;
    v52 = v48[1];
    v53 = v48[2];
    v277 = v47;
    v47[1] = *v47;
    v46[1] = *v46;
    {
      v157 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v157, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v55 = *a4;
    v274 = a4[1];
    if (*a4 == v274)
      goto LABEL_75;
    v56 = 0;
    v57 = 0;
    v275 = v50;
    v276 = mdm::Allocator::instance(void)::alloc;
    v278 = v36;
    while (2)
    {
      if (!v55[1])
        goto LABEL_80;
      v58 = 0;
      v59 = *v55;
      v60 = 0.0;
      v61 = 1;
      v62 = v56;
      v279 = v55;
      do
      {
        v63 = v60;
        v64 = *v36;
        v65 = (double *)(*v36 + 24 * v59);
        v67 = *v65;
        v66 = v65[1];
        v60 = *v65 * v51 + v66 * v52;
        if (v60 > v53)
        {
          if (!v61 || v56 == v62)
            goto LABEL_84;
          v73 = (v53 - v63) / (v60 - v63);
          v74 = v64 + 24 * v59;
          v75 = *(double *)(v74 - 24) + (v67 - *(double *)(v74 - 24)) * v73;
          v76 = *(double *)(v74 - 16) + (v66 - *(double *)(v74 - 16)) * v73;
          v77 = *(double *)(v74 - 8) + (v65[2] - *(double *)(v74 - 8)) * v73;
          if ((unint64_t)v62 >= v57)
          {
            v84 = 0xAAAAAAAAAAAAAAABLL * ((v62 - v56) >> 3) + 1;
            if (v84 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v85 = v57 - (_QWORD)v56;
            if (0x5555555555555556 * ((uint64_t)(v57 - (_QWORD)v56) >> 3) > v84)
              v84 = 0x5555555555555556 * ((uint64_t)(v57 - (_QWORD)v56) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (_QWORD)v56) >> 3) >= 0x555555555555555)
              v86 = 0xAAAAAAAAAAAAAAALL;
            else
              v86 = v84;
            if (v86)
            {
              v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v276 + 16))(v276, 24 * v86, 8);
              v88 = (double *)(v87 + 8 * ((v62 - v56) >> 3));
              v57 = v87 + 24 * v86;
              if (v87)
              {
                *v88 = v75;
                v88[1] = v76;
                v88[2] = v77;
              }
            }
            else
            {
              v57 = 0;
              v88 = (double *)(8 * ((v62 - v56) >> 3));
            }
            v103 = v88;
            do
            {
              v104 = *(_OWORD *)(v62 - 24);
              *(v103 - 1) = *((double *)v62 - 1);
              *(_OWORD *)(v103 - 3) = v104;
              v103 -= 3;
              v62 -= 24;
            }
            while (v62 != v56);
            v78 = (char *)(v88 + 3);
            if (v56)
              (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v276 + 40))(v276, v56, v85);
            v56 = (char *)v103;
          }
          else
          {
            if (v62)
            {
              *(double *)v62 = v75;
              *((double *)v62 + 1) = v76;
              *((double *)v62 + 2) = v77;
            }
            v78 = v62 + 24;
          }
          v105 = -1431655765 * ((unint64_t)(v275[1] - *v275) >> 3);
          v106 = 0xAAAAAAAAAAAAAAABLL * ((v78 - v56) >> 3);
          v107 = v277;
          v108 = (_DWORD *)v277[1];
          v109 = v277[2];
          if ((unint64_t)v108 < v109)
          {
            if (v108)
            {
              *v108 = v105;
              v108[1] = v106;
            }
            v110 = v108 + 2;
            v55 = v279;
LABEL_179:
            v107[1] = (uint64_t)v110;
            std::vector<geo::Mercator3<double>,geo::StdAllocator<geo::Mercator3<double>,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<geo::Mercator3<double>*>,std::__wrap_iter<geo::Mercator3<double>*>>(v275, v275[1], v56, v78, 0xAAAAAAAAAAAAAAABLL * ((v78 - v56) >> 3));
            v62 = v56;
            v36 = v278;
            goto LABEL_84;
          }
          v111 = ((uint64_t)v108 - *v277) >> 3;
          v112 = v111 + 1;
          if ((unint64_t)(v111 + 1) >> 61)
            abort();
          v113 = v109 - *v277;
          if (v113 >> 2 > v112)
            v112 = v113 >> 2;
          if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
            v114 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v114 = v112;
          if (v114)
          {
            v115 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v277[3] + 16))(v277[3], 8 * v114, 4);
            v116 = (_DWORD *)(v115 + 8 * v111);
            v117 = v115 + 8 * v114;
            if (v115)
            {
              *v116 = v105;
              v116[1] = v106;
            }
            v107 = v277;
          }
          else
          {
            v117 = 0;
            v116 = (_DWORD *)(8 * v111);
          }
          v118 = *v107;
          v119 = v107[1];
          v120 = v119 - *v107;
          v55 = v279;
          if (v119 == *v107)
          {
            v118 = v107[1];
            v122 = v116;
            goto LABEL_177;
          }
          v121 = v120 - 8;
          if ((unint64_t)(v120 - 8) < 0x38)
          {
            v122 = v116;
          }
          else
          {
            v122 = v116;
            if ((unint64_t)(v119 - (_QWORD)v116) >= 0x20)
            {
              v123 = (v121 >> 3) + 1;
              v124 = v119 - 8 * (v123 & 0x3FFFFFFFFFFFFFFCLL);
              v125 = v116 - 4;
              v126 = (__int128 *)(v119 - 16);
              v127 = v123 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v128 = *v126;
                *(v125 - 1) = *(v126 - 1);
                *v125 = v128;
                v125 -= 2;
                v126 -= 2;
                v127 -= 4;
              }
              while (v127);
              v122 = &v116[-2 * (v123 & 0x3FFFFFFFFFFFFFFCLL)];
              v119 = v124;
              if (v123 == (v123 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_177;
            }
          }
          do
          {
            v129 = *(_QWORD *)(v119 - 8);
            v119 -= 8;
            *((_QWORD *)v122 - 1) = v129;
            v122 -= 2;
          }
          while (v119 != v118);
          v118 = *v277;
LABEL_177:
          v110 = v116 + 2;
          v107 = v277;
          *v277 = (uint64_t)v122;
          v277[1] = (uint64_t)(v116 + 2);
          v130 = v277[2];
          v277[2] = v117;
          if (v118)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v277[3] + 40))(v277[3], v118, v130 - v118);
            v107 = v277;
          }
          goto LABEL_179;
        }
        if (!v61)
        {
          v68 = (v53 - v63) / (v60 - v63);
          v69 = v64 + 24 * v59;
          v70 = *(double *)(v69 - 24) + (v67 - *(double *)(v69 - 24)) * v68;
          v71 = *(double *)(v69 - 16) + (v66 - *(double *)(v69 - 16)) * v68;
          v72 = *(double *)(v69 - 8) + (v65[2] - *(double *)(v69 - 8)) * v68;
          if ((unint64_t)v62 >= v57)
          {
            v79 = 0xAAAAAAAAAAAAAAABLL * ((v62 - v56) >> 3) + 1;
            if (v79 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v80 = v57 - (_QWORD)v56;
            if (0x5555555555555556 * ((uint64_t)(v57 - (_QWORD)v56) >> 3) > v79)
              v79 = 0x5555555555555556 * ((uint64_t)(v57 - (_QWORD)v56) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (_QWORD)v56) >> 3) >= 0x555555555555555)
              v81 = 0xAAAAAAAAAAAAAAALL;
            else
              v81 = v79;
            if (v81)
            {
              v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v276 + 16))(v276, 24 * v81, 8);
              v83 = (double *)(v82 + 8 * ((v62 - v56) >> 3));
              v57 = v82 + 24 * v81;
              if (v82)
              {
                *v83 = v70;
                v83[1] = v71;
                v83[2] = v72;
              }
            }
            else
            {
              v57 = 0;
              v83 = (double *)(8 * ((v62 - v56) >> 3));
            }
            v89 = v83;
            if (v62 != v56)
            {
              v90 = v83;
              do
              {
                v89 = v90 - 3;
                v91 = *(_OWORD *)(v62 - 24);
                *(v90 - 1) = *((double *)v62 - 1);
                *(_OWORD *)(v90 - 3) = v91;
                v62 -= 24;
                v90 -= 3;
              }
              while (v62 != v56);
            }
            v62 = (char *)(v83 + 3);
            if (v56)
              (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v276 + 40))(v276, v56, v80);
            v56 = (char *)v89;
            v36 = v278;
          }
          else
          {
            if (v62)
            {
              *(double *)v62 = v70;
              *((double *)v62 + 1) = v71;
              *((double *)v62 + 2) = v72;
            }
            v62 += 24;
          }
        }
        v92 = *v36 + 24 * v59;
        if ((unint64_t)v62 >= v57)
        {
          v94 = 0xAAAAAAAAAAAAAAABLL * ((v62 - v56) >> 3) + 1;
          if (v94 > 0xAAAAAAAAAAAAAAALL)
            abort();
          if (0x5555555555555556 * ((uint64_t)(v57 - (_QWORD)v56) >> 3) > v94)
            v94 = 0x5555555555555556 * ((uint64_t)(v57 - (_QWORD)v56) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (_QWORD)v56) >> 3) >= 0x555555555555555)
            v95 = 0xAAAAAAAAAAAAAAALL;
          else
            v95 = v94;
          if (v95)
          {
            v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v276 + 16))(v276, 24 * v95, 8);
            v97 = v96 + 8 * ((v62 - v56) >> 3);
            v98 = v96 + 24 * v95;
            if (v96)
            {
              v99 = *(_OWORD *)v92;
              *(_QWORD *)(v97 + 16) = *(_QWORD *)(v92 + 16);
              *(_OWORD *)v97 = v99;
            }
          }
          else
          {
            v98 = 0;
            v97 = 8 * ((v62 - v56) >> 3);
          }
          v55 = v279;
          if (v62 == v56)
          {
            v102 = v62;
            v56 = (char *)v97;
            v62 = (char *)(v97 + 24);
            if (v102)
              goto LABEL_141;
          }
          else
          {
            v100 = (char *)v97;
            do
            {
              v101 = *(_OWORD *)(v62 - 24);
              *((_QWORD *)v100 - 1) = *((_QWORD *)v62 - 1);
              *(_OWORD *)(v100 - 24) = v101;
              v100 -= 24;
              v62 -= 24;
            }
            while (v62 != v56);
            v102 = v56;
            v56 = v100;
            v62 = (char *)(v97 + 24);
            if (v102)
LABEL_141:
              (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v276 + 40))(v276, v102, v57 - (_QWORD)v102);
          }
          v57 = v98;
          v36 = v278;
          goto LABEL_84;
        }
        if (v62)
        {
          v93 = *(_OWORD *)v92;
          *((_QWORD *)v62 + 2) = *(_QWORD *)(v92 + 16);
          *(_OWORD *)v62 = v93;
        }
        v62 += 24;
        v55 = v279;
LABEL_84:
        ++v58;
        ++v59;
        v61 = v60 <= v53;
      }
      while (v58 < v55[1]);
      if (v56 == v62)
      {
        v56 = v62;
        v50 = v275;
      }
      else
      {
        v50 = v275;
        v131 = -1431655765 * ((unint64_t)(v275[1] - *v275) >> 3);
        v132 = 0xAAAAAAAAAAAAAAABLL * ((v62 - v56) >> 3);
        v133 = v277;
        v134 = (_DWORD *)v277[1];
        v135 = v277[2];
        if ((unint64_t)v134 < v135)
        {
          if (v134)
          {
            *v134 = v131;
            v134[1] = v132;
          }
          v136 = v134 + 2;
          goto LABEL_209;
        }
        v137 = ((uint64_t)v134 - *v277) >> 3;
        v138 = v137 + 1;
        if ((unint64_t)(v137 + 1) >> 61)
          abort();
        v139 = v135 - *v277;
        if (v139 >> 2 > v138)
          v138 = v139 >> 2;
        if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
          v140 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v140 = v138;
        if (v140)
        {
          v141 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v277[3] + 16))(v277[3], 8 * v140, 4);
          v142 = (_DWORD *)(v141 + 8 * v137);
          v143 = v141 + 8 * v140;
          if (v141)
          {
            *v142 = v131;
            v142[1] = v132;
          }
          v133 = v277;
        }
        else
        {
          v143 = 0;
          v142 = (_DWORD *)(8 * v137);
        }
        v55 = v279;
        v144 = *v133;
        v145 = v133[1];
        v146 = v145 - *v133;
        if (v145 == *v133)
        {
          v144 = v133[1];
          v148 = v142;
          goto LABEL_207;
        }
        v147 = v146 - 8;
        if ((unint64_t)(v146 - 8) < 0x38)
        {
          v148 = v142;
        }
        else
        {
          v148 = v142;
          if ((unint64_t)(v145 - (_QWORD)v142) >= 0x20)
          {
            v149 = (v147 >> 3) + 1;
            v150 = v145 - 8 * (v149 & 0x3FFFFFFFFFFFFFFCLL);
            v151 = v142 - 4;
            v152 = (__int128 *)(v145 - 16);
            v153 = v149 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v154 = *v152;
              *(v151 - 1) = *(v152 - 1);
              *v151 = v154;
              v151 -= 2;
              v152 -= 2;
              v153 -= 4;
            }
            while (v153);
            v148 = &v142[-2 * (v149 & 0x3FFFFFFFFFFFFFFCLL)];
            v145 = v150;
            if (v149 == (v149 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_207;
          }
        }
        do
        {
          v155 = *(_QWORD *)(v145 - 8);
          v145 -= 8;
          *((_QWORD *)v148 - 1) = v155;
          v148 -= 2;
        }
        while (v145 != v144);
        v144 = *v277;
LABEL_207:
        v136 = v142 + 2;
        v133 = v277;
        *v277 = (uint64_t)v148;
        v277[1] = (uint64_t)(v142 + 2);
        v156 = v277[2];
        v277[2] = v143;
        if (v144)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v277[3] + 40))(v277[3], v144, v156 - v144);
          v133 = v277;
        }
LABEL_209:
        v133[1] = (uint64_t)v136;
        std::vector<geo::Mercator3<double>,geo::StdAllocator<geo::Mercator3<double>,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<geo::Mercator3<double>*>,std::__wrap_iter<geo::Mercator3<double>*>>(v275, v275[1], v56, v62, 0xAAAAAAAAAAAAAAABLL * ((v62 - v56) >> 3));
        v36 = v278;
      }
LABEL_80:
      v55 += 2;
      if (v55 != v274)
        continue;
      break;
    }
    if (v56)
      (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v276 + 40))(v276, v56, v57 - (_QWORD)v56);
LABEL_75:
    v45 = v273 ^ 1;
    v47 = &v280[4 * (v273 ^ 1u)];
    v46 = &v287[4 * (v273 ^ 1u)];
    v48 = v272 + 3;
    v36 = v50;
    v49 = (int **)v277;
    a4 = (int **)v277;
    if (v272 + 3 != v271)
      continue;
    break;
  }
LABEL_215:
  v158 = (double **)v50;
  v159 = (char *)*((_QWORD *)v270 + 17);
  v161 = (char *)*v49;
  v160 = (char *)v49[1];
  v162 = v160 - (char *)*v49;
  v163 = v162 >> 3;
  v164 = *((_QWORD *)v270 + 19);
  if (v162 >> 3 > (unint64_t)((v164 - (uint64_t)v159) >> 3))
  {
    v165 = v267;
    v166 = v269;
    if (v159)
    {
      *((_QWORD *)v270 + 18) = v159;
      (*(void (**)(_QWORD, char *))(**((_QWORD **)v270 + 20) + 40))(*((_QWORD *)v270 + 20), v159);
      v164 = 0;
      v270[17] = 0.0;
      v270[18] = 0.0;
      v270[19] = 0.0;
    }
    if ((v162 & 0x8000000000000000) == 0)
    {
      v167 = v164 >> 2;
      if (v164 >> 2 <= v163)
        v167 = v162 >> 3;
      v168 = (unint64_t)v164 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v167;
      if (!(v168 >> 61))
      {
        v169 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)v270 + 20) + 16))(*((_QWORD *)v270 + 20), 8 * v168, 4);
        v159 = (char *)v169;
        v170 = v270;
        *((_QWORD *)v270 + 17) = v169;
        *((_QWORD *)v270 + 18) = v169;
        *((_QWORD *)v270 + 19) = v169 + 8 * v168;
        v171 = (_QWORD *)v169;
        if (v161 != v160)
        {
          v171 = (_QWORD *)v169;
          do
          {
            if (v171)
              *v171 = *(_QWORD *)v161;
            v161 += 8;
            ++v171;
          }
          while (v161 != v160);
        }
        v162 = (uint64_t)v171 - v169;
        goto LABEL_243;
      }
    }
LABEL_330:
    abort();
  }
  v172 = (char *)*((_QWORD *)v270 + 18);
  v173 = (v172 - v159) >> 3;
  v165 = v267;
  if (v173 >= v163)
  {
    v166 = v269;
    if (v160 != v161)
      memmove(*((void **)v270 + 17), *v49, v160 - (char *)*v49);
  }
  else
  {
    v174 = &v161[8 * v173];
    if (v172 != v159)
    {
      memmove(*((void **)v270 + 17), *v49, v172 - v159);
      v159 = (char *)*((_QWORD *)v270 + 18);
    }
    v166 = v269;
    v175 = v159;
    if (v174 != v160)
    {
      v175 = v159;
      do
      {
        if (v175)
          *(_QWORD *)v175 = *(_QWORD *)v174;
        v174 += 8;
        v175 += 8;
      }
      while (v174 != v160);
    }
    v162 = v175 - v159;
  }
  v170 = v270;
LABEL_243:
  *((_QWORD *)v170 + 18) = &v159[v162];
  v176 = v170;
  v177 = *v158;
  v178 = v158[1];
  v179 = (char *)v178 - (char *)*v158;
  v180 = 0xAAAAAAAAAAAAAAABLL * (v179 >> 3);
  v181 = *((_QWORD *)v170 + 14);
  v182 = *((_QWORD *)v176 + 13);
  v183 = v181 - v182;
  v184 = 0xAAAAAAAAAAAAAAABLL * ((v181 - v182) >> 3);
  if (v180 <= v184)
  {
    if (v180 < v184)
      *((_QWORD *)v270 + 14) = v182 + 8 * (v179 >> 3);
  }
  else
  {
    v185 = *((_QWORD *)v176 + 15);
    if (0xAAAAAAAAAAAAAAABLL * ((v185 - v181) >> 3) >= v180 - v184)
    {
      *((_QWORD *)v176 + 14) = v181 + 24 * ((v179 - v183) / 0x18uLL);
    }
    else
    {
      if (v180 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_330;
      v186 = 0xAAAAAAAAAAAAAAABLL * ((v185 - v182) >> 3);
      if (2 * v186 > v180)
        v180 = 2 * v186;
      if (v186 >= 0x555555555555555)
        v187 = 0xAAAAAAAAAAAAAAALL;
      else
        v187 = v180;
      v188 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v270 + 16) + 16))(*((_QWORD *)v270 + 16), 24 * v187, 8);
      v189 = *((_QWORD *)v270 + 13);
      v190 = *((_QWORD *)v270 + 14);
      v191 = v188 + 24 * v184;
      v192 = v191 + 24 * ((v179 - v183) / 0x18uLL);
      if (v190 == v189)
      {
        v194 = v270;
      }
      else
      {
        do
        {
          v193 = *(_OWORD *)(v190 - 24);
          *(_QWORD *)(v191 - 8) = *(_QWORD *)(v190 - 8);
          *(_OWORD *)(v191 - 24) = v193;
          v191 -= 24;
          v190 -= 24;
        }
        while (v190 != v189);
        v194 = v270;
        v189 = *((_QWORD *)v270 + 13);
      }
      *((_QWORD *)v194 + 13) = v191;
      *((_QWORD *)v194 + 14) = v192;
      v195 = *((_QWORD *)v194 + 15);
      *((_QWORD *)v194 + 15) = v188 + 24 * v187;
      if (v189)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v194 + 16) + 40))(*((_QWORD *)v194 + 16), v189, v195 - v189);
    }
    v177 = *v158;
    v178 = v158[1];
    v180 = 0xAAAAAAAAAAAAAAABLL * (v178 - *v158);
  }
  v196 = *((_QWORD *)v270 + 5);
  v197 = (*((_QWORD *)v270 + 6) - v196) >> 2;
  if (v180 <= v197)
  {
    if (v180 < v197)
      *((_QWORD *)v270 + 6) = v196 + 4 * v180;
  }
  else
  {
    std::vector<float,geo::StdAllocator<float,mdm::Allocator>>::__append((uint64_t)(v270 + 5), v180 - v197);
    v177 = *v158;
    v178 = v158[1];
  }
  if (v177 == v178)
  {
    v202 = v270;
    if (*((_BYTE *)v270 + 168))
      goto LABEL_278;
  }
  else
  {
    v198 = (float32x4_t *)*((_QWORD *)v270 + 5);
    v199 = (char *)v178 - (char *)v177 - 24;
    if (v199 > 0xBF)
    {
      v203 = v199 / 0x18 + 1;
      v204 = v203 & 7;
      if ((v203 & 7) == 0)
        v204 = 8;
      v200 = v203 - v204;
      v205 = v198 + 1;
      v206 = v177 + 14;
      v207 = v200;
      do
      {
        v208 = v206 - 12;
        v209 = (unsigned __int128)vld3q_f64(v208);
        v210 = v206 - 6;
        v211 = (unsigned __int128)vld3q_f64(v210);
        v212 = v206;
        v213 = (unsigned __int128)vld3q_f64(v212);
        v212 += 6;
        v214 = (unsigned __int128)vld3q_f64(v212);
        v205[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v209), (float64x2_t)v211);
        *v205 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v213), (float64x2_t)v214);
        v205 += 2;
        v206 += 24;
        v207 -= 8;
      }
      while (v207);
      v201 = &v177[3 * v200];
    }
    else
    {
      v200 = 0;
      v201 = v177;
    }
    v215 = &v198->f32[v200];
    do
    {
      v216 = v201[2];
      *v215++ = v216;
      v201 += 3;
    }
    while (v201 != v178);
    v202 = v270;
    if (*((_BYTE *)v270 + 168))
    {
LABEL_278:
      v217 = (char *)v178 - (char *)v177;
      v218 = 0xAAAAAAAAAAAAAAABLL * (v178 - v177);
      v219 = *((_QWORD *)v202 + 9);
      v220 = *((_QWORD *)v202 + 10);
      v221 = v220 - v219;
      v222 = 0xAAAAAAAAAAAAAAABLL * ((v220 - v219) >> 3);
      if (v218 <= v222)
      {
        if (v218 < v222)
          *((_QWORD *)v270 + 10) = v219 + 8 * (v178 - v177);
      }
      else
      {
        v223 = *((_QWORD *)v202 + 11);
        if (0xAAAAAAAAAAAAAAABLL * ((v223 - v220) >> 3) >= v218 - v222)
        {
          *((_QWORD *)v202 + 10) = v220 + 24 * ((v217 - v221) / 0x18uLL);
        }
        else
        {
          if (v218 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_330;
          v224 = 0xAAAAAAAAAAAAAAABLL * ((v223 - v219) >> 3);
          if (2 * v224 > v218)
            v218 = 2 * v224;
          if (v224 >= 0x555555555555555)
            v225 = 0xAAAAAAAAAAAAAAALL;
          else
            v225 = v218;
          v226 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v270 + 12) + 16))(*((_QWORD *)v270 + 12), 24 * v225, 8);
          v227 = *((_QWORD *)v270 + 9);
          v228 = *((_QWORD *)v270 + 10);
          v229 = v226 + 24 * v222;
          v230 = v229 + 24 * ((v217 - v221) / 0x18uLL);
          if (v228 == v227)
          {
            v232 = v270;
          }
          else
          {
            do
            {
              v231 = *(_OWORD *)(v228 - 24);
              *(_QWORD *)(v229 - 8) = *(_QWORD *)(v228 - 8);
              *(_OWORD *)(v229 - 24) = v231;
              v229 -= 24;
              v228 -= 24;
            }
            while (v228 != v227);
            v232 = v270;
            v227 = *((_QWORD *)v270 + 9);
          }
          *((_QWORD *)v232 + 9) = v229;
          *((_QWORD *)v232 + 10) = v230;
          v247 = *((_QWORD *)v232 + 11);
          *((_QWORD *)v232 + 11) = v226 + 24 * v225;
          if (v227)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v232 + 12) + 40))(*((_QWORD *)v232 + 12), v227, v247 - v227);
        }
        v177 = *v158;
        v178 = v158[1];
      }
      if (v177 != v178)
      {
        v248 = (double *)(*((_QWORD *)v270 + 9) + 16);
        v249 = (double *)(*((_QWORD *)v270 + 13) + 16);
        do
        {
          v250 = *v177;
          v251 = v177[1];
          v177 += 3;
          v252 = v250 * 6.28318531;
          v253 = exp(v251 * 6.28318531 + -3.14159265);
          v254 = atan(v253) * 2.0 + -1.57079633;
          v255 = fmod(v252, 6.28318531);
          v256 = fmod(v255 + 6.28318531, 6.28318531) + -3.14159265;
          v257 = __sincos_stret(v254);
          v258 = 6378137.0 / sqrt(v257.__sinval * v257.__sinval * -0.00669437999 + 1.0);
          v259 = __sincos_stret(v256);
          v260 = v258 * v257.__cosval * v259.__cosval;
          *(v248 - 2) = v260;
          *(v248 - 1) = v258 * v257.__cosval * v259.__sinval;
          *v248 = v257.__sinval * 0.99330562 * v258;
          *(v249 - 2) = v260;
          *(v249 - 1) = *(v248 - 1);
          v261 = *v248;
          v248 += 3;
          *v249 = v261;
          v249 += 3;
        }
        while (v177 != v178);
      }
    }
    else
    {
      v233 = *((_QWORD *)v270 + 13);
      if (v199 > 0x14F
        && ((v234 = v199 / 0x18, v233 < (unint64_t)&v177[3 * v234 + 2])
          ? (v235 = (unint64_t)v177 >= 24 * v234 + v233 + 24)
          : (v235 = 1),
            v235))
      {
        v236 = v234 + 1;
        v237 = v236 & 3;
        if ((v236 & 3) == 0)
          v237 = 4;
        v238 = v236 - v237;
        v239 = v177;
        v240 = (double *)*((_QWORD *)v270 + 13);
        v241 = v238;
        do
        {
          v242 = v239;
          v295 = vld3q_f64(v242);
          v242 += 6;
          v295.val[2] = 0uLL;
          v296 = vld3q_f64(v242);
          v296.val[2] = 0uLL;
          v243 = v240 + 12;
          vst3q_f64(v240, v295);
          v244 = v240 + 6;
          vst3q_f64(v244, v296);
          v239 += 12;
          v240 = v243;
          v241 -= 4;
        }
        while (v241);
        v177 += 3 * v238;
      }
      else
      {
        v238 = 0;
      }
      v245 = (_QWORD *)(v233 + 24 * v238 + 16);
      do
      {
        v246 = *(_OWORD *)v177;
        v177 += 3;
        *((_OWORD *)v245 - 1) = v246;
        *v245 = 0;
        v245 += 3;
      }
      while (v177 != v178);
    }
  }
  if (v166)
    (*(void (**)(uint64_t, double *, unint64_t))(*(_QWORD *)v165 + 40))(v165, v166, v268 - (_QWORD)v166);
  if (v283)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v286 + 40))(v286, v283, v285 - v283);
  if (v280[0])
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v282 + 40))(v282, v280[0], v281 - v280[0]);
  if (v290)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v293 + 40))(v293, v290, v292 - v290);
  if (v287[0])
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v289 + 40))(v289, v287[0], v288 - v287[0]);
}

void sub_19F8D0C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (a12)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a10 + 40))(a10, a12, a11 - a12);
    v39 = a27;
    if (!a27)
    {
LABEL_3:
      v40 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v39 = a27;
    if (!a27)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a30 + 40))(a30, v39, a29 - v39);
  v40 = a23;
  if (!a23)
  {
LABEL_4:
    v41 = a35;
    if (!a35)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a26 + 40))(a26, v40, a25 - v40);
  v41 = a35;
  if (!a35)
  {
LABEL_5:
    v42 = a31;
    if (!a31)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a38 + 40))(a38, v41, a37 - v41);
  v42 = a31;
  if (!a31)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a34 + 40))(a34, v42, a33 - v42);
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelMapTileCollisionInfo::setupCollidableItems(uint64_t result, unsigned int a2, char a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (***v12)(_QWORD);
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const float *v19;
  int64x2_t v20;
  int32x4_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  const float *v25;
  unsigned __int128 v26;
  unsigned __int128 v27;
  uint32x4_t v28;
  uint32x4_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (***v45)(_QWORD);
  uint64_t (***v46)(_QWORD);
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t (***v50)(_QWORD);
  uint64_t (***v51)(_QWORD);
  uint64_t (***v52)(_QWORD);
  uint64_t v53;
  _QWORD *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t (***v60)(_QWORD);
  uint64_t v61;
  uint64_t (***v62)(_QWORD);
  int *v63;
  int *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t (***v67)(_QWORD);
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (***v74)(_QWORD);
  int v75;
  uint64_t v76;
  _DWORD *v77;
  int v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;

  v5 = (_QWORD *)result;
  v6 = *(_QWORD *)(result + 136);
  v7 = *(_QWORD *)(result + 144);
  if (v6 == v7)
  {
    v9 = 0;
    v11 = (_QWORD *)(result + 184);
    v10 = *(_QWORD *)(result + 184);
    v13 = (_QWORD *)(result + 192);
    v12 = *(uint64_t (****)(_QWORD))(result + 192);
    v14 = 0xF0F0F0F0F0F0F0F1 * (((uint64_t)v12 - v10) >> 4);
LABEL_23:
    if (v14 > v9)
    {
      v45 = (uint64_t (***)(_QWORD))(v10 + 272 * v9);
      if (v12 != v45)
      {
        v46 = v12 - 34;
        do
        {
          result = (**v46)(v46);
          v47 = v46 == v45;
          v46 -= 34;
        }
        while (!v47);
      }
      *v13 = v45;
    }
    goto LABEL_45;
  }
  v8 = v7 - v6 - 8;
  if (v8 > 0x3F)
  {
    v15 = (v8 >> 3) + 1;
    v16 = v15 & 7;
    if ((v15 & 7) == 0)
      v16 = 8;
    v17 = v15 - v16;
    v18 = 8 * v17;
    v19 = (const float *)(v6 + 36);
    v20 = 0uLL;
    v21.i64[0] = -1;
    v21.i64[1] = -1;
    v22 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
    do
    {
      v25 = v19 - 8;
      v26 = (unsigned __int128)vld2q_f32(v25);
      v27 = (unsigned __int128)vld2q_f32(v19);
      v28 = (uint32x4_t)vaddq_s32((int32x4_t)v26, v21);
      v29 = (uint32x4_t)vaddq_s32((int32x4_t)v27, v21);
      v22 = (int64x2_t)vaddw_high_u32((uint64x2_t)v22, v28);
      v20 = (int64x2_t)vaddw_u32((uint64x2_t)v20, *(uint32x2_t *)v28.i8);
      v24 = (int64x2_t)vaddw_high_u32((uint64x2_t)v24, v29);
      v23 = (int64x2_t)vaddw_u32((uint64x2_t)v23, *(uint32x2_t *)v29.i8);
      v19 += 16;
      v17 -= 8;
    }
    while (v17);
    v6 += v18;
    v9 = vaddvq_s64(vaddq_s64(vaddq_s64(v23, v20), vaddq_s64(v24, v22)));
  }
  else
  {
    v9 = 0;
  }
  do
  {
    v30 = v9;
    v31 = (*(_DWORD *)(v6 + 4) - 1);
    v9 += v31;
    v6 += 8;
  }
  while (v6 != v7);
  v11 = (_QWORD *)(result + 184);
  v10 = *(_QWORD *)(result + 184);
  v13 = (_QWORD *)(result + 192);
  v12 = *(uint64_t (****)(_QWORD))(result + 192);
  v14 = 0xF0F0F0F0F0F0F0F1 * (((uint64_t)v12 - v10) >> 4);
  v32 = v9 - v14;
  if (v9 <= v14)
    goto LABEL_23;
  v33 = *(_QWORD *)(result + 200);
  if (0xF0F0F0F0F0F0F0F1 * ((v33 - (uint64_t)v12) >> 4) >= v32)
  {
    v48 = 0;
    v49 = 272 * v30 - 272 * v14 + 272 * v31;
    do
    {
      if (&v12[v48 / 8])
      {
        v50 = &v12[v48 / 8];
        v50[4] = 0;
        *(uint64_t (***)(_QWORD))((char *)v50 + 44) = 0;
        *((_BYTE *)v50 + 52) = 3;
        *v50 = (uint64_t (**)(_QWORD))&off_1E429EC78;
        *(_OWORD *)(v50 + 7) = xmmword_19FFB2E30;
        v50[9] = (uint64_t (**)(_QWORD))1065353216;
        *((_DWORD *)v50 + 20) = 1065353216;
        *(uint64_t (***)(_QWORD))((char *)v50 + 92) = 0;
        *(uint64_t (***)(_QWORD))((char *)v50 + 84) = 0;
        *((_DWORD *)v50 + 25) = 0;
        *(_OWORD *)(v50 + 13) = xmmword_19FFB2E30;
        *(_OWORD *)(v50 + 15) = xmmword_19FFB2E30;
        *(_OWORD *)(v50 + 17) = xmmword_19FFB2E30;
        *(_OWORD *)(v50 + 19) = xmmword_19FFB3480;
        *((_BYTE *)v50 + 208) = 0;
        v50[21] = 0;
        v50[22] = 0;
        *((_BYTE *)v50 + 184) = 0;
        *(_OWORD *)((char *)v50 + 241) = 0uLL;
        *(_OWORD *)(v50 + 29) = 0uLL;
        *(_OWORD *)(v50 + 27) = 0uLL;
      }
      v48 += 272;
    }
    while (v49 != v48);
    *v13 = &v12[34 * v32];
  }
  else
  {
    if (v9 > 0xF0F0F0F0F0F0F0)
      abort();
    v34 = 0xF0F0F0F0F0F0F0F1 * ((v33 - v10) >> 4);
    v35 = 2 * v34;
    if (2 * v34 <= v9)
      v35 = v9;
    if (v34 >= 0x78787878787878)
      v36 = 0xF0F0F0F0F0F0F0;
    else
      v36 = v35;
    v82 = (_QWORD *)result;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 208) + 16))(*(_QWORD *)(result + 208), 272 * v36, 8);
    v37 = 272 * v14;
    v38 = result + 272 * v14;
    v39 = 272 * v9;
    v40 = result + 272 * v9;
    v41 = xmmword_19FFB2E30;
    v42 = xmmword_19FFB3480;
    v43 = result;
    do
    {
      if (v43 + v37)
      {
        v44 = v43 + v37;
        *(_QWORD *)(v44 + 32) = 0;
        *(_QWORD *)(v44 + 44) = 0;
        *(_BYTE *)(v44 + 52) = 3;
        *(_QWORD *)v44 = &off_1E429EC78;
        *(_OWORD *)(v44 + 56) = xmmword_19FFB2E30;
        *(_QWORD *)(v44 + 72) = 1065353216;
        *(_DWORD *)(v44 + 80) = 1065353216;
        *(_QWORD *)(v44 + 92) = 0;
        *(_QWORD *)(v44 + 84) = 0;
        *(_DWORD *)(v44 + 100) = 0;
        *(_OWORD *)(v44 + 104) = xmmword_19FFB2E30;
        *(_OWORD *)(v44 + 120) = xmmword_19FFB2E30;
        *(_OWORD *)(v44 + 136) = xmmword_19FFB2E30;
        *(_OWORD *)(v44 + 152) = xmmword_19FFB3480;
        *(_BYTE *)(v44 + 208) = 0;
        *(_QWORD *)(v44 + 168) = 0;
        *(_QWORD *)(v44 + 176) = 0;
        *(_BYTE *)(v44 + 184) = 0;
        *(_OWORD *)(v44 + 241) = 0uLL;
        *(_OWORD *)(v44 + 232) = 0uLL;
        *(_OWORD *)(v44 + 216) = 0uLL;
      }
      v39 -= 272;
      v43 += 272;
    }
    while (v37 != v39);
    v51 = (uint64_t (***)(_QWORD))*v13;
    v52 = (uint64_t (***)(_QWORD))*v11;
    if (v51 == (uint64_t (***)(_QWORD))*v11)
    {
      v82[23] = v38;
      v82[24] = v40;
      v5 = v82;
      v61 = v82[25];
      v82[25] = result + 272 * v36;
      goto LABEL_43;
    }
    v80 = result + 272 * v36;
    v81 = v40;
    v53 = 0;
    do
    {
      v54 = (_QWORD *)(v38 + v53 * 8 - 272);
      *v54 = &off_1E4297320;
      v55 = *(_OWORD *)&v51[v53 - 33];
      v56 = *(_OWORD *)&v51[v53 - 31];
      v57 = *(_OWORD *)((char *)&v51[v53 - 29] - 3);
      *(_OWORD *)(v38 + v53 * 8 - 216) = v41;
      v58 = v38 + v53 * 8 - 216;
      *(_OWORD *)(v58 - 19) = v57;
      *(_OWORD *)(v58 - 48) = v55;
      *(_OWORD *)(v58 - 32) = v56;
      *v54 = &off_1E429EC78;
      *(_QWORD *)(v58 + 16) = 1065353216;
      *(_DWORD *)(v58 + 24) = 1065353216;
      *(_QWORD *)(v58 + 36) = 0;
      *(_QWORD *)(v58 + 28) = 0;
      *(_DWORD *)(v58 + 44) = 0;
      *(_OWORD *)(v58 + 48) = v41;
      *(_OWORD *)(v58 + 64) = v41;
      *(_OWORD *)(v58 + 80) = v41;
      *(_OWORD *)(v58 + 96) = v42;
      *(_BYTE *)(v58 + 152) = 0;
      *(_QWORD *)(v58 + 112) = 0;
      *(_QWORD *)(v58 + 120) = 0;
      *(_BYTE *)(v58 + 128) = 0;
      *(_OWORD *)(v58 + 185) = 0u;
      *(_OWORD *)(v58 + 160) = 0u;
      *(_OWORD *)(v58 + 176) = 0u;
      result = md::CollisionObject::operator=(v58, (uint64_t)&v51[v53 - 27]);
      v42 = xmmword_19FFB3480;
      v41 = xmmword_19FFB2E30;
      *(_DWORD *)(result + 208) = v51[v53 - 1];
      v53 -= 34;
    }
    while (&v51[v53] != v52);
    v59 = v38 + v53 * 8;
    v5 = v82;
    v51 = (uint64_t (***)(_QWORD))v82[23];
    v60 = (uint64_t (***)(_QWORD))v82[24];
    v82[23] = v59;
    v61 = v82[25];
    v82[24] = v81;
    v82[25] = v80;
    if (v60 != v51)
    {
      v62 = v60 - 34;
      do
      {
        result = (**v62)(v62);
        v47 = v62 == v51;
        v62 -= 34;
      }
      while (!v47);
LABEL_43:
      if (!v51)
        goto LABEL_45;
      goto LABEL_44;
    }
    if (v51)
LABEL_44:
      result = (*(uint64_t (**)(_QWORD, uint64_t (***)(_QWORD), uint64_t))(*(_QWORD *)v5[26] + 40))(v5[26], v51, v61 - (_QWORD)v51);
  }
LABEL_45:
  v63 = (int *)v5[17];
  v64 = (int *)v5[18];
  if (v63 != v64)
  {
    LODWORD(v65) = 0;
    do
    {
      v66 = v63[1];
      if (v66 >= 2)
      {
        v67 = (uint64_t (***)(_QWORD))*v11;
        v68 = *v63;
        v69 = (int)v65;
        v70 = LabelCollisionOverlayGroupToLayer[a2];
        v71 = v66 - 2;
        if (v66 == 2)
        {
          result = 1;
          v65 = v69;
        }
        else
        {
          v72 = v71 + 1;
          v73 = (v71 + 1) & 0x1FFFFFFFELL;
          v65 = v73 + v69;
          result = v72 | 1;
          v74 = &v67[34 * (int)v69];
          v75 = *v63;
          v76 = v73;
          do
          {
            *((_BYTE *)v74 + 52) = a3;
            *((_BYTE *)v74 + 324) = a3;
            *((_DWORD *)v74 + 66) = v75;
            *((_DWORD *)v74 + 134) = v75 + 1;
            *((_DWORD *)v74 + 8) = v70;
            *((_DWORD *)v74 + 76) = v70;
            v74 += 68;
            v75 += 2;
            v76 -= 2;
          }
          while (v76);
          if (v72 == v73)
            goto LABEL_47;
        }
        v77 = &v67[34 * v65 + 33];
        v78 = result + v68 - 1;
        v79 = v66 - result;
        do
        {
          LODWORD(v65) = v65 + 1;
          *((_BYTE *)v77 - 212) = a3;
          *v77 = v78;
          *(v77 - 58) = v70;
          v77 += 68;
          ++v78;
          --v79;
        }
        while (v79);
      }
LABEL_47:
      v63 += 2;
    }
    while (v63 != v64);
  }
  return result;
}

void md::LabelCollidableItem::~LabelCollidableItem(md::LabelCollidableItem *this)
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::LabelCollidableItem::collidesWithObject(md::LabelCollidableItem *this, const md::CollisionObject *a2)
{
  return 0;
}

void md::LabelLineCollidableItem::~LabelLineCollidableItem(void **this)
{
  *this = &off_1E429EC78;
  free(this[27]);
  free(this[28]);
  free(this[30]);
}

{
  *this = &off_1E429EC78;
  free(this[27]);
  free(this[28]);
  free(this[30]);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::LabelLineCollidableItem::collidesWithObject(md::LabelLineCollidableItem *this, const md::CollisionObject *a2)
{
  const md::CollisionObject *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  float32x2_t *v8;
  float v9;
  uint64_t v10;
  float32x2_t *v11;
  float v12;
  float32x2_t v13;
  md::CollisionObject *v14;

  if (!*((_QWORD *)this + 27) && !*((_QWORD *)this + 28) || (*((_BYTE *)a2 + 200) & *((_BYTE *)this + 256)) != 0)
    return 0;
  v3 = (md::LabelLineCollidableItem *)((char *)this + 56);
  v4 = *((_QWORD *)a2 + 21);
  if (!*((_QWORD *)this + 28))
  {
    if (!v4)
    {
      if (*((_BYTE *)this + 252) || *((_BYTE *)a2 + 196))
        return md::CollisionObject::rectsCollideWithRectsOBB((md::LabelLineCollidableItem *)((char *)this + 56), a2);
      else
        return md::CollisionObject::rectsCollideWithRects((md::LabelLineCollidableItem *)((char *)this + 56), a2);
    }
    v14 = a2;
    a2 = v3;
    return md::CollisionObject::circlesCollideWithRects(v14, a2);
  }
  if (!v4)
  {
    v14 = (md::LabelLineCollidableItem *)((char *)this + 56);
    return md::CollisionObject::circlesCollideWithRects(v14, a2);
  }
  v5 = *((unsigned int *)a2 + 44);
  if (!(_DWORD)v5)
    return 0;
  v6 = 0;
  v7 = 1;
  while (1)
  {
    v8 = (float32x2_t *)(*((_QWORD *)a2 + 23) + 24 * v6);
    v9 = v8[*((unsigned __int8 *)this + 255) + 1].f32[0];
    if (v9 > 0.0)
    {
      v10 = *((unsigned int *)this + 58);
      if ((_DWORD)v10)
        break;
    }
LABEL_9:
    v7 = ++v6 < v5;
    if (v6 == v5)
      return 0;
  }
  v11 = (float32x2_t *)*((_QWORD *)this + 30);
  while (1)
  {
    v12 = v11[*((unsigned __int8 *)a2 + 199) + 1].f32[0];
    if (v12 > 0.0)
    {
      v13 = vsub_f32(*v11, *v8);
      if (vaddv_f32(vmul_f32(v13, v13)) < (float)((float)(v12 + v9) * (float)(v12 + v9)))
        return v7;
    }
    v11 += 3;
    if (!--v10)
      goto LABEL_9;
  }
}

uint64_t md::LabelLineCollidableItem::orientation@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 80;
  if (!*(_BYTE *)(this + 253))
    v2 = 72;
  v3 = *(_QWORD *)(this + v2);
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 4) = v3;
  return this;
}

double std::vector<geo::Mercator3<double>,geo::StdAllocator<geo::Mercator3<double>,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<geo::Mercator3<double>*>,std::__wrap_iter<geo::Mercator3<double>*>>(uint64_t *a1, uint64_t a2, char *a3, char *a4, uint64_t a5)
{
  char *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  const double *v43;
  double *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

  if (a5 < 1)
    return *(double *)&v18;
  v6 = a3;
  v8 = *a1;
  v9 = a1[1];
  v10 = (a2 - *a1) / 24;
  v11 = *a1 + 24 * v10;
  v12 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v9) >> 3)) < a5)
  {
    v13 = a5 - 0x5555555555555555 * ((uint64_t)(v9 - v8) >> 3);
    if (v13 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v8) >> 3);
    v15 = 2 * v14;
    if (2 * v14 <= v13)
      v15 = v13;
    if (v14 >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v15;
    if (v16)
      v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 24 * v16, 8);
    else
      v17 = 0;
    v22 = v17 + 24 * v10;
    v23 = 24 * a5;
    v24 = v22 + 24 * a5;
    v25 = v22;
    do
    {
      if (v25)
      {
        v18 = *(_OWORD *)v6;
        *(_QWORD *)(v25 + 16) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v25 = v18;
      }
      v25 += 24;
      v6 += 24;
      v23 -= 24;
    }
    while (v23);
    v26 = *a1;
    if (*a1 == v11)
    {
      v28 = v17 + 24 * v10;
    }
    else
    {
      v27 = v11;
      do
      {
        v28 = v22 - 24;
        v18 = *(_OWORD *)(v27 - 24);
        *(_QWORD *)(v22 - 8) = *(_QWORD *)(v27 - 8);
        *(_OWORD *)(v22 - 24) = v18;
        v27 -= 24;
        v22 -= 24;
      }
      while (v27 != v26);
    }
    for (i = a1[1]; v11 != i; v11 += 24)
    {
      v18 = *(_OWORD *)v11;
      *(_QWORD *)(v24 + 16) = *(_QWORD *)(v11 + 16);
      *(_OWORD *)v24 = v18;
      v24 += 24;
    }
    v30 = *a1;
    *a1 = v28;
    a1[1] = v24;
    v31 = a1[2];
    a1[2] = v17 + 24 * v16;
    if (v30)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v30, v31 - v30);
    return *(double *)&v18;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v11) >> 3)) >= a5)
  {
    v19 = &a3[24 * a5];
    v21 = a1[1];
    goto LABEL_34;
  }
  v19 = &a3[8 * ((uint64_t)(v9 - v11) >> 3)];
  if (v19 == a4)
  {
    v21 = a1[1];
  }
  else
  {
    v20 = &a3[8 * ((uint64_t)(v9 - v11) >> 3)];
    v21 = a1[1];
    do
    {
      if (v21)
      {
        v18 = *(_OWORD *)v20;
        *(_QWORD *)(v21 + 16) = *((_QWORD *)v20 + 2);
        *(_OWORD *)v21 = v18;
      }
      v20 += 24;
      v21 += 24;
    }
    while (v20 != a4);
  }
  a1[1] = v21;
  if ((uint64_t)(v9 - v11) >= 1)
  {
LABEL_34:
    v32 = v11 + 24 * a5;
    v33 = v21 - v32;
    v34 = v21 - 24 * a5;
    v35 = v21;
    if (v34 < v9)
    {
      v36 = v21 - 24 * a5;
      v35 = v21;
      do
      {
        if (v35)
        {
          v18 = *(_OWORD *)v36;
          *(_QWORD *)(v35 + 16) = *(_QWORD *)(v36 + 16);
          *(_OWORD *)v35 = v18;
        }
        v36 += 24;
        v35 += 24;
      }
      while (v36 < v9);
    }
    a1[1] = v35;
    if (v21 != v32)
    {
      if (v33 - 24 < 0x138
        || ((v37 = (v33 - 24) / 0x18, v38 = v33 + 24 * v10 - 24 * v37 + v8 - 24, v21 - 24 * v37 - 24 < v34)
          ? (v39 = v38 >= v21)
          : (v39 = 1),
            !v39))
      {
        v42 = v21;
LABEL_51:
        v46 = (_QWORD *)(v42 - 8);
        do
        {
          v47 = *(_QWORD *)(v34 - 24);
          v34 -= 24;
          *(v46 - 2) = v47;
          *(v46 - 1) = *(_QWORD *)(v34 + 8);
          *(_QWORD *)&v18 = *(_QWORD *)(v34 + 16);
          *v46 = v18;
          v46 -= 3;
        }
        while (v34 != v11);
        goto LABEL_53;
      }
      v40 = v37 + 1;
      v41 = (v37 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v42 = v21 - 24 * v41;
      v43 = (const double *)(v34 - 48);
      v44 = (double *)(v21 - 48);
      v45 = v41;
      do
      {
        *(float64x2x3_t *)&v18 = vld3q_f64(v43);
        vst3q_f64(v44, *(float64x2x3_t *)&v18);
        v44 -= 6;
        v43 -= 6;
        v45 -= 2;
      }
      while (v45);
      if (v40 != v41)
      {
        v34 -= 24 * v41;
        goto LABEL_51;
      }
    }
LABEL_53:
    if (v19 == a3)
      return *(double *)&v18;
    v48 = v19 - a3 - 24;
    if (v48 >= 0x138)
    {
      v50 = v48 / 0x18;
      v51 = v8 + 24 * (v10 + v50) + 24;
      if (v11 < (unint64_t)&a3[24 * v50 + 24] && v51 > (unint64_t)a3)
      {
        v49 = (_QWORD *)v11;
      }
      else
      {
        v53 = v50 + 1;
        v54 = 24 * (v53 & 0x1FFFFFFFFFFFFFFCLL);
        v49 = (_QWORD *)(v11 + v54);
        v55 = a3;
        v56 = v53 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v18 = *((_OWORD *)v55 + 1);
          v58 = *((_OWORD *)v55 + 4);
          v57 = *((_OWORD *)v55 + 5);
          v59 = *((_OWORD *)v55 + 2);
          v60 = *((_OWORD *)v55 + 3);
          *(_OWORD *)v11 = *(_OWORD *)v55;
          *(_OWORD *)(v11 + 16) = v18;
          *(_OWORD *)(v11 + 32) = v59;
          *(_OWORD *)(v11 + 48) = v60;
          v55 += 96;
          *(_OWORD *)(v11 + 64) = v58;
          *(_OWORD *)(v11 + 80) = v57;
          v11 += 96;
          v56 -= 4;
        }
        while (v56);
        if (v53 == (v53 & 0x1FFFFFFFFFFFFFFCLL))
          return *(double *)&v18;
        v6 = &a3[v54];
      }
    }
    else
    {
      v49 = (_QWORD *)v11;
    }
    do
    {
      *v49 = *(_QWORD *)v6;
      v49[1] = *((_QWORD *)v6 + 1);
      *(_QWORD *)&v18 = *((_QWORD *)v6 + 2);
      v49[2] = v18;
      v6 += 24;
      v49 += 3;
    }
    while (v6 != v19);
  }
  return *(double *)&v18;
}

uint64_t md::LabelMapTileCollisionInfo::LabelMapTileCollisionInfo(uint64_t a1, char a2, _OWORD *a3, uint64_t a4, int a5)
{
  __int128 v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  float v13;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  geo::read_write_lock *v19;
  const char *v20;
  malloc_zone_t *zone;
  char v22;
  int v23;
  uint64_t v24;
  geo::read_write_lock *v25;
  const char *v26;
  malloc_zone_t *v27;
  char v28;
  int v29;
  uint64_t v30;
  geo::read_write_lock *v31;
  const char *v32;
  malloc_zone_t *v33;
  int v34;
  uint64_t v35;
  geo::read_write_lock *v36;
  const char *v37;
  malloc_zone_t *v38;
  int v39;
  uint64_t v40;
  geo::read_write_lock *v41;
  const char *v42;
  malloc_zone_t *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v7 = a3[1];
  *(_OWORD *)a1 = *a3;
  *(_OWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  if ((v8 & 1) == 0)
  {
    v15 = a4;
    v16 = a2;
    a2 = v16;
    a4 = v15;
    if (v17)
    {
      v18 = operator new();
      *(_QWORD *)(v18 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v18 + 24) = "VectorKitLabels";
      *(_OWORD *)(v18 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v18 = &off_1E42B5668;
      *(_QWORD *)(v18 + 8) = "VectorKitLabels";
      *(_OWORD *)(v18 + 72) = 0u;
      *(_OWORD *)(v18 + 88) = 0u;
      *(_OWORD *)(v18 + 104) = 0u;
      *(_OWORD *)(v18 + 120) = 0u;
      *(_OWORD *)(v18 + 136) = 0u;
      *(_OWORD *)(v18 + 152) = 0u;
      *(_OWORD *)(v18 + 168) = 0u;
      *(_OWORD *)(v18 + 184) = 0u;
      *(_OWORD *)(v18 + 200) = 0u;
      *(_OWORD *)(v18 + 216) = 0u;
      *(_OWORD *)(v18 + 232) = 0u;
      *(_QWORD *)(v18 + 248) = 0;
      *(_OWORD *)(v18 + 56) = 0u;
      v19 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v18 + 56), 0);
      if ((_DWORD)v19)
        geo::read_write_lock::logFailure(v19, (uint64_t)"initialization", v20);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v18 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v18 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v18;
      a4 = v15;
      a2 = v16;
    }
  }
  v9 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  if ((v9 & 1) == 0)
  {
    v45 = a4;
    v22 = a2;
    a2 = v22;
    a4 = v45;
    if (v23)
    {
      v24 = operator new();
      *(_QWORD *)(v24 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v24 + 24) = "VectorKitLabels";
      *(_OWORD *)(v24 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v24 = &off_1E42B5668;
      *(_QWORD *)(v24 + 8) = "VectorKitLabels";
      *(_OWORD *)(v24 + 72) = 0u;
      *(_OWORD *)(v24 + 88) = 0u;
      *(_OWORD *)(v24 + 104) = 0u;
      *(_OWORD *)(v24 + 120) = 0u;
      *(_OWORD *)(v24 + 136) = 0u;
      *(_OWORD *)(v24 + 152) = 0u;
      *(_OWORD *)(v24 + 168) = 0u;
      *(_OWORD *)(v24 + 184) = 0u;
      *(_OWORD *)(v24 + 200) = 0u;
      *(_OWORD *)(v24 + 216) = 0u;
      *(_OWORD *)(v24 + 232) = 0u;
      *(_QWORD *)(v24 + 248) = 0;
      *(_OWORD *)(v24 + 56) = 0u;
      v25 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v24 + 56), 0);
      if ((_DWORD)v25)
        geo::read_write_lock::logFailure(v25, (uint64_t)"initialization", v26);
      v27 = malloc_create_zone(0, 0);
      *(_QWORD *)(v24 + 48) = v27;
      malloc_set_zone_name(v27, "VectorKitLabels");
      *(_QWORD *)(v24 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v24;
      a4 = v45;
      a2 = v22;
    }
  }
  v10 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if ((v10 & 1) == 0)
  {
    v46 = a4;
    v28 = a2;
    a2 = v28;
    a4 = v46;
    if (v29)
    {
      v30 = operator new();
      *(_QWORD *)(v30 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v30 + 24) = "VectorKitLabels";
      *(_OWORD *)(v30 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v30 = &off_1E42B5668;
      *(_QWORD *)(v30 + 8) = "VectorKitLabels";
      *(_OWORD *)(v30 + 72) = 0u;
      *(_OWORD *)(v30 + 88) = 0u;
      *(_OWORD *)(v30 + 104) = 0u;
      *(_OWORD *)(v30 + 120) = 0u;
      *(_OWORD *)(v30 + 136) = 0u;
      *(_OWORD *)(v30 + 152) = 0u;
      *(_OWORD *)(v30 + 168) = 0u;
      *(_OWORD *)(v30 + 184) = 0u;
      *(_OWORD *)(v30 + 200) = 0u;
      *(_OWORD *)(v30 + 216) = 0u;
      *(_OWORD *)(v30 + 232) = 0u;
      *(_QWORD *)(v30 + 248) = 0;
      *(_OWORD *)(v30 + 56) = 0u;
      v31 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v30 + 56), 0);
      if ((_DWORD)v31)
        geo::read_write_lock::logFailure(v31, (uint64_t)"initialization", v32);
      v33 = malloc_create_zone(0, 0);
      *(_QWORD *)(v30 + 48) = v33;
      malloc_set_zone_name(v33, "VectorKitLabels");
      *(_QWORD *)(v30 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v30;
      a4 = v46;
      a2 = v28;
    }
  }
  v11 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = v11;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  if ((v11 & 1) == 0)
  {
    v47 = a4;
    v44 = a2;
    a2 = v44;
    a4 = v47;
    if (v34)
    {
      v35 = operator new();
      *(_QWORD *)(v35 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v35 + 24) = "VectorKitLabels";
      *(_OWORD *)(v35 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v35 = &off_1E42B5668;
      *(_QWORD *)(v35 + 8) = "VectorKitLabels";
      *(_OWORD *)(v35 + 72) = 0u;
      *(_OWORD *)(v35 + 88) = 0u;
      *(_OWORD *)(v35 + 104) = 0u;
      *(_OWORD *)(v35 + 120) = 0u;
      *(_OWORD *)(v35 + 136) = 0u;
      *(_OWORD *)(v35 + 152) = 0u;
      *(_OWORD *)(v35 + 168) = 0u;
      *(_OWORD *)(v35 + 184) = 0u;
      *(_OWORD *)(v35 + 200) = 0u;
      *(_OWORD *)(v35 + 216) = 0u;
      *(_OWORD *)(v35 + 232) = 0u;
      *(_QWORD *)(v35 + 248) = 0;
      *(_OWORD *)(v35 + 56) = 0u;
      v36 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v35 + 56), 0);
      if ((_DWORD)v36)
        geo::read_write_lock::logFailure(v36, (uint64_t)"initialization", v37);
      v38 = malloc_create_zone(0, 0);
      *(_QWORD *)(v35 + 48) = v38;
      malloc_set_zone_name(v38, "VectorKitLabels");
      *(_QWORD *)(v35 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v35;
      a4 = v47;
      a2 = v44;
    }
  }
  *(_QWORD *)(a1 + 160) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(a1 + 168) = a2;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  if ((v12 & 1) == 0)
  {
    v48 = a4;
    a4 = v48;
    if (v39)
    {
      v40 = operator new();
      *(_QWORD *)(v40 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v40 + 24) = "VectorKitLabels";
      *(_OWORD *)(v40 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v40 = &off_1E42B5668;
      *(_QWORD *)(v40 + 8) = "VectorKitLabels";
      *(_OWORD *)(v40 + 72) = 0u;
      *(_OWORD *)(v40 + 88) = 0u;
      *(_OWORD *)(v40 + 104) = 0u;
      *(_OWORD *)(v40 + 120) = 0u;
      *(_OWORD *)(v40 + 136) = 0u;
      *(_OWORD *)(v40 + 152) = 0u;
      *(_OWORD *)(v40 + 168) = 0u;
      *(_OWORD *)(v40 + 184) = 0u;
      *(_OWORD *)(v40 + 200) = 0u;
      *(_OWORD *)(v40 + 216) = 0u;
      *(_OWORD *)(v40 + 232) = 0u;
      *(_QWORD *)(v40 + 248) = 0;
      *(_OWORD *)(v40 + 56) = 0u;
      v41 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v40 + 56), 0);
      if ((_DWORD)v41)
        geo::read_write_lock::logFailure(v41, (uint64_t)"initialization", v42);
      v43 = malloc_create_zone(0, 0);
      *(_QWORD *)(v40 + 48) = v43;
      malloc_set_zone_name(v43, "VectorKitLabels");
      *(_QWORD *)(v40 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v40;
      a4 = v48;
    }
  }
  *(_QWORD *)(a1 + 208) = mdm::Allocator::instance(void)::alloc;
  md::LabelMapTileCollisionInfo::extractPathsFromSource((double *)a1, (double *)(a4 + 64), (uint64_t *)(a4 + 160), (int **)(a4 + 192));
  if (a5 == 2)
  {
    v13 = 4.0;
    md::LabelMapTileCollisionInfo::setupCollidableItems(a1, 3u, 2);
    goto LABEL_10;
  }
  if (a5 == 3)
  {
    md::LabelMapTileCollisionInfo::setupCollidableItems(a1, 2u, 3);
    v13 = 0.1;
LABEL_10:
    *(float *)(a1 + 32) = v13;
  }
  return a1;
}

void sub_19F8D20A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  void (***v8)(_QWORD, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (***v13)(_QWORD, uint64_t);
  uint64_t v14;
  void (***v15)(_QWORD, uint64_t);
  BOOL v16;

  v6 = v2;
  v8 = *(void (****)(_QWORD, uint64_t))(v1 + 184);
  if (v8)
  {
    v13 = *(void (****)(_QWORD, uint64_t))(v1 + 192);
    v14 = *(_QWORD *)(v1 + 184);
    if (v13 != v8)
    {
      v15 = v13 - 34;
      do
      {
        (**v15)(v15, v14);
        v16 = v15 == v8;
        v15 -= 34;
      }
      while (!v16);
      v14 = *(_QWORD *)(v1 + 184);
    }
    *(_QWORD *)(v1 + 192) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 208) + 40))(*(_QWORD *)(v1 + 208), v14, *(_QWORD *)(v1 + 200) - v14);
    v9 = *v5;
    if (!*v5)
    {
LABEL_3:
      v10 = *v4;
      if (!*v4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v9 = *v5;
    if (!*v5)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 144) = v9;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 160) + 40))(*(_QWORD *)(v1 + 160), v9, *(_QWORD *)(v1 + 152) - v9);
  v10 = *v4;
  if (!*v4)
  {
LABEL_4:
    v11 = *v3;
    if (!*v3)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v1 + 112) = v10;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 128) + 40))(*(_QWORD *)(v1 + 128), v10, *(_QWORD *)(v1 + 120) - v10);
  v11 = *v3;
  if (!*v3)
  {
LABEL_5:
    v12 = *v6;
    if (!*v6)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  *(_QWORD *)(v1 + 80) = v11;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 96) + 40))(*(_QWORD *)(v1 + 96), v11, *(_QWORD *)(v1 + 88) - v11);
  v12 = *v6;
  if (!*v6)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_16:
  *(_QWORD *)(v1 + 48) = v12;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 64) + 40))(*(_QWORD *)(v1 + 64), v12, *(_QWORD *)(v1 + 56) - v12);
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelMapTileCollisionInfo::LabelMapTileCollisionInfo(uint64_t a1, char a2, _OWORD *a3, uint64_t **a4)
{
  __int128 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  unsigned int v29;
  double v30;
  char v32;
  uint64_t **v33;
  int v34;
  uint64_t v35;
  geo::read_write_lock *v36;
  const char *v37;
  malloc_zone_t *zone;
  char v39;
  uint64_t **v40;
  int v41;
  uint64_t v42;
  geo::read_write_lock *v43;
  const char *v44;
  malloc_zone_t *v45;
  char v46;
  uint64_t **v47;
  int v48;
  uint64_t v49;
  geo::read_write_lock *v50;
  const char *v51;
  malloc_zone_t *v52;
  char v53;
  uint64_t **v54;
  int v55;
  uint64_t v56;
  geo::read_write_lock *v57;
  const char *v58;
  malloc_zone_t *v59;
  uint64_t **v60;
  int v61;
  uint64_t v62;
  geo::read_write_lock *v63;
  const char *v64;
  malloc_zone_t *v65;
  int v66;
  uint64_t v67;
  geo::read_write_lock *v68;
  const char *v69;
  malloc_zone_t *v70;
  uint64_t **v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v5 = a3[1];
  *(_OWORD *)a1 = *a3;
  *(_OWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 32) = 1036831949;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  if ((v6 & 1) == 0)
  {
    v32 = a2;
    v33 = a4;
    a4 = v33;
    a2 = v32;
    if (v34)
    {
      v35 = operator new();
      *(_QWORD *)(v35 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v35 + 24) = "VectorKitLabels";
      *(_OWORD *)(v35 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v35 = &off_1E42B5668;
      *(_QWORD *)(v35 + 8) = "VectorKitLabels";
      *(_OWORD *)(v35 + 72) = 0u;
      *(_OWORD *)(v35 + 88) = 0u;
      *(_OWORD *)(v35 + 104) = 0u;
      *(_OWORD *)(v35 + 120) = 0u;
      *(_OWORD *)(v35 + 136) = 0u;
      *(_OWORD *)(v35 + 152) = 0u;
      *(_OWORD *)(v35 + 168) = 0u;
      *(_OWORD *)(v35 + 184) = 0u;
      *(_OWORD *)(v35 + 200) = 0u;
      *(_OWORD *)(v35 + 216) = 0u;
      *(_OWORD *)(v35 + 232) = 0u;
      *(_QWORD *)(v35 + 248) = 0;
      *(_OWORD *)(v35 + 56) = 0u;
      v36 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v35 + 56), 0);
      if ((_DWORD)v36)
        geo::read_write_lock::logFailure(v36, (uint64_t)"initialization", v37);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v35 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v35 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v35;
      a2 = v32;
      a4 = v33;
    }
  }
  v7 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  if ((v7 & 1) == 0)
  {
    v39 = a2;
    v40 = a4;
    a4 = v40;
    a2 = v39;
    if (v41)
    {
      v42 = operator new();
      *(_QWORD *)(v42 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v42 + 24) = "VectorKitLabels";
      *(_OWORD *)(v42 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v42 = &off_1E42B5668;
      *(_QWORD *)(v42 + 8) = "VectorKitLabels";
      *(_OWORD *)(v42 + 72) = 0u;
      *(_OWORD *)(v42 + 88) = 0u;
      *(_OWORD *)(v42 + 104) = 0u;
      *(_OWORD *)(v42 + 120) = 0u;
      *(_OWORD *)(v42 + 136) = 0u;
      *(_OWORD *)(v42 + 152) = 0u;
      *(_OWORD *)(v42 + 168) = 0u;
      *(_OWORD *)(v42 + 184) = 0u;
      *(_OWORD *)(v42 + 200) = 0u;
      *(_OWORD *)(v42 + 216) = 0u;
      *(_OWORD *)(v42 + 232) = 0u;
      *(_QWORD *)(v42 + 248) = 0;
      *(_OWORD *)(v42 + 56) = 0u;
      v43 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v42 + 56), 0);
      if ((_DWORD)v43)
        geo::read_write_lock::logFailure(v43, (uint64_t)"initialization", v44);
      v45 = malloc_create_zone(0, 0);
      *(_QWORD *)(v42 + 48) = v45;
      malloc_set_zone_name(v45, "VectorKitLabels");
      *(_QWORD *)(v42 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v42;
      a2 = v39;
      a4 = v40;
    }
  }
  v8 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if ((v8 & 1) == 0)
  {
    v46 = a2;
    v47 = a4;
    a4 = v47;
    a2 = v46;
    if (v48)
    {
      v49 = operator new();
      *(_QWORD *)(v49 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v49 + 24) = "VectorKitLabels";
      *(_OWORD *)(v49 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v49 = &off_1E42B5668;
      *(_QWORD *)(v49 + 8) = "VectorKitLabels";
      *(_OWORD *)(v49 + 72) = 0u;
      *(_OWORD *)(v49 + 88) = 0u;
      *(_OWORD *)(v49 + 104) = 0u;
      *(_OWORD *)(v49 + 120) = 0u;
      *(_OWORD *)(v49 + 136) = 0u;
      *(_OWORD *)(v49 + 152) = 0u;
      *(_OWORD *)(v49 + 168) = 0u;
      *(_OWORD *)(v49 + 184) = 0u;
      *(_OWORD *)(v49 + 200) = 0u;
      *(_OWORD *)(v49 + 216) = 0u;
      *(_OWORD *)(v49 + 232) = 0u;
      *(_QWORD *)(v49 + 248) = 0;
      *(_OWORD *)(v49 + 56) = 0u;
      v50 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v49 + 56), 0);
      if ((_DWORD)v50)
        geo::read_write_lock::logFailure(v50, (uint64_t)"initialization", v51);
      v52 = malloc_create_zone(0, 0);
      *(_QWORD *)(v49 + 48) = v52;
      malloc_set_zone_name(v52, "VectorKitLabels");
      *(_QWORD *)(v49 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v49;
      a2 = v46;
      a4 = v47;
    }
  }
  v9 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = v9;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  if ((v9 & 1) == 0)
  {
    v53 = a2;
    v54 = a4;
    a4 = v54;
    a2 = v53;
    if (v55)
    {
      v56 = operator new();
      *(_QWORD *)(v56 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v56 + 24) = "VectorKitLabels";
      *(_OWORD *)(v56 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v56 = &off_1E42B5668;
      *(_QWORD *)(v56 + 8) = "VectorKitLabels";
      *(_OWORD *)(v56 + 72) = 0u;
      *(_OWORD *)(v56 + 88) = 0u;
      *(_OWORD *)(v56 + 104) = 0u;
      *(_OWORD *)(v56 + 120) = 0u;
      *(_OWORD *)(v56 + 136) = 0u;
      *(_OWORD *)(v56 + 152) = 0u;
      *(_OWORD *)(v56 + 168) = 0u;
      *(_OWORD *)(v56 + 184) = 0u;
      *(_OWORD *)(v56 + 200) = 0u;
      *(_OWORD *)(v56 + 216) = 0u;
      *(_OWORD *)(v56 + 232) = 0u;
      *(_QWORD *)(v56 + 248) = 0;
      *(_OWORD *)(v56 + 56) = 0u;
      v57 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v56 + 56), 0);
      if ((_DWORD)v57)
        geo::read_write_lock::logFailure(v57, (uint64_t)"initialization", v58);
      v59 = malloc_create_zone(0, 0);
      *(_QWORD *)(v56 + 48) = v59;
      malloc_set_zone_name(v59, "VectorKitLabels");
      *(_QWORD *)(v56 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v56;
      a2 = v53;
      a4 = v54;
    }
  }
  *(_QWORD *)(a1 + 160) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(a1 + 168) = a2;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  if ((v10 & 1) == 0)
  {
    v60 = a4;
    a4 = v60;
    if (v61)
    {
      v62 = operator new();
      *(_QWORD *)(v62 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v62 + 24) = "VectorKitLabels";
      *(_OWORD *)(v62 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v62 = &off_1E42B5668;
      *(_QWORD *)(v62 + 8) = "VectorKitLabels";
      *(_OWORD *)(v62 + 72) = 0u;
      *(_OWORD *)(v62 + 88) = 0u;
      *(_OWORD *)(v62 + 104) = 0u;
      *(_OWORD *)(v62 + 120) = 0u;
      *(_OWORD *)(v62 + 136) = 0u;
      *(_OWORD *)(v62 + 152) = 0u;
      *(_OWORD *)(v62 + 168) = 0u;
      *(_OWORD *)(v62 + 184) = 0u;
      *(_OWORD *)(v62 + 200) = 0u;
      *(_OWORD *)(v62 + 216) = 0u;
      *(_OWORD *)(v62 + 232) = 0u;
      *(_QWORD *)(v62 + 248) = 0;
      *(_OWORD *)(v62 + 56) = 0u;
      v63 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v62 + 56), 0);
      if ((_DWORD)v63)
        geo::read_write_lock::logFailure(v63, (uint64_t)"initialization", v64);
      v65 = malloc_create_zone(0, 0);
      *(_QWORD *)(v62 + 48) = v65;
      malloc_set_zone_name(v65, "VectorKitLabels");
      *(_QWORD *)(v62 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v62;
      a4 = v60;
    }
  }
  *(_QWORD *)(a1 + 208) = mdm::Allocator::instance(void)::alloc;
  v11 = *a4;
  v12 = **a4;
  v14 = *(uint64_t **)(v12 + 32);
  v13 = *(uint64_t **)(v12 + 40);
  v16 = (*a4)[10];
  v15 = (*a4)[11];
  v73 = 0;
  v74 = 0;
  v72 = 0;
  if ((v12 & 1) == 0)
  {
    v71 = a4;
    a4 = v71;
    if (v66)
    {
      v67 = operator new();
      *(_QWORD *)(v67 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v67 + 24) = "VectorKitLabels";
      *(_OWORD *)(v67 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v67 = &off_1E42B5668;
      *(_QWORD *)(v67 + 8) = "VectorKitLabels";
      *(_OWORD *)(v67 + 72) = 0u;
      *(_OWORD *)(v67 + 88) = 0u;
      *(_OWORD *)(v67 + 104) = 0u;
      *(_OWORD *)(v67 + 120) = 0u;
      *(_OWORD *)(v67 + 136) = 0u;
      *(_OWORD *)(v67 + 152) = 0u;
      *(_OWORD *)(v67 + 168) = 0u;
      *(_OWORD *)(v67 + 184) = 0u;
      *(_OWORD *)(v67 + 200) = 0u;
      *(_OWORD *)(v67 + 216) = 0u;
      *(_OWORD *)(v67 + 232) = 0u;
      *(_QWORD *)(v67 + 248) = 0;
      *(_OWORD *)(v67 + 56) = 0u;
      v68 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v67 + 56), 0);
      if ((_DWORD)v68)
        geo::read_write_lock::logFailure(v68, (uint64_t)"initialization", v69);
      v70 = malloc_create_zone(0, 0);
      *(_QWORD *)(v67 + 48) = v70;
      malloc_set_zone_name(v70, "VectorKitLabels");
      *(_QWORD *)(v67 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v67;
      a4 = v71;
    }
  }
  v17 = mdm::Allocator::instance(void)::alloc;
  v75 = mdm::Allocator::instance(void)::alloc;
  if (v15 == v16)
  {
    v20 = 0;
  }
  else
  {
    if ((unint64_t)(v15 - v16) >= 0x2AAAAAAAAAAAAAA9)
      abort();
    v18 = a4;
    v19 = 24 * ((v15 - v16) >> 2);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, v19, 8);
    v21 = 0;
    v72 = v20;
    v74 = v20 + v19;
    a4 = v18;
    do
    {
      v22 = (_QWORD *)(v20 + v21);
      if (v20 + v21)
      {
        *v22 = 0;
        v22[1] = 0;
        v22[2] = 0;
      }
      v21 += 24;
    }
    while (v19 != v21);
    v73 = v20 + v19;
  }
  v23 = (unsigned int *)v11[10];
  v24 = v11[11] - (_QWORD)v23;
  if (v24)
  {
    v25 = v24 >> 2;
    v26 = *v14;
    v27 = *v13;
    if (v25 <= 1)
      v25 = 1;
    v28 = (double *)(v20 + 16);
    do
    {
      v29 = *v23++;
      v30 = *(float *)(v27 + 4 * v29);
      *((_OWORD *)v28 - 1) = *(_OWORD *)(v26 + 16 * v29);
      *v28 = v30;
      v28 += 3;
      --v25;
    }
    while (v25);
  }
  md::LabelMapTileCollisionInfo::extractPathsFromSource((double *)a1, (double *)a4 + 1, &v72, (int **)a4 + 5);
  if (v72)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 40))(v17, v72, v74 - v72);
  md::LabelMapTileCollisionInfo::setupCollidableItems(a1, 3u, 1);
  return a1;
}

void sub_19F8D2A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (***v23)(_QWORD, uint64_t);
  void (***v24)(_QWORD, uint64_t);
  uint64_t v25;
  void (***v26)(_QWORD, uint64_t);
  BOOL v27;

  v23 = *(void (****)(_QWORD, uint64_t))(v15 + 184);
  if (v23)
  {
    v24 = *(void (****)(_QWORD, uint64_t))(v15 + 192);
    v25 = *(_QWORD *)(v15 + 184);
    if (v24 != v23)
    {
      v26 = v24 - 34;
      do
      {
        (**v26)(v26, v25);
        v27 = v26 == v23;
        v26 -= 34;
      }
      while (!v27);
      v25 = *(_QWORD *)(v15 + 184);
    }
    *(_QWORD *)(v15 + 192) = v23;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v15 + 208) + 40))(*(_QWORD *)(v15 + 208), v25, *(_QWORD *)(v15 + 200) - v25);
    v18 = *v17;
    if (*v17)
    {
LABEL_17:
      *(_QWORD *)(v15 + 144) = v18;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v15 + 160) + 40))(*(_QWORD *)(v15 + 160), v18, *(_QWORD *)(v15 + 152) - v18);
      v19 = *v16;
      if (!*v16)
      {
LABEL_5:
        v20 = *a11;
        if (*a11)
        {
          *(_QWORD *)(v15 + 80) = v20;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v15 + 96) + 40))(*(_QWORD *)(v15 + 96), v20, *(_QWORD *)(v15 + 88) - v20);
        }
        v21 = *a12;
        if (*a12)
        {
          *(_QWORD *)(v15 + 48) = v21;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v15 + 64) + 40))(*(_QWORD *)(v15 + 64), v21, *(_QWORD *)(v15 + 56) - v21);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_4:
      *(_QWORD *)(v15 + 112) = v19;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v15 + 128) + 40))(*(_QWORD *)(v15 + 128), v19, *(_QWORD *)(v15 + 120) - v19);
      goto LABEL_5;
    }
  }
  else
  {
    v18 = *v17;
    if (*v17)
      goto LABEL_17;
  }
  v19 = *v16;
  if (!*v16)
    goto LABEL_5;
  goto LABEL_4;
}

unint64_t md::LabelMapTileCollisionInfo::pointsToScreen(md::LabelMapTileCollisionInfo *this, md::LabelManager *a2, uint64_t a3, double a4)
{
  double v7;
  double *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v24;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  uint64_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float32x4_t *v32;
  unint64_t v33;
  const double *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float32x4_t v41;
  float64x2_t v42;
  float64x2_t v43;
  double *v44;
  unint64_t v45;
  uint64_t v46;
  float *v47;
  float64x2_t v48;
  float v49;
  double v50;
  float64x2_t v51;
  float64x2_t v52;
  double v53;
  float64x2_t *v54;
  _QWORD *v55;
  float32x4_t *v56;
  unint64_t v57;
  float32x4_t v58;
  float64x2_t v59;
  float64x2_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  float *v64;
  float v65;
  unsigned __int8 v66;
  float *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t result;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  BOOL v86;
  unint64_t v88;
  unint64_t v89;
  float32x2_t *v90;
  double *v91;
  double v92;
  double v93;
  double v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  const double *v106;
  float *v107;
  unint64_t v108;
  float64x2_t v109;
  const double *v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  int v117;
  uint64_t v118;
  unint64_t v119;
  float64x2x3_t v120;
  float64x2x3_t v121;
  float64x2x3_t v122;
  float64x2x3_t v123;

  v7 = *(float *)(a3 + 48) * a4;
  v8 = (double *)((char *)a2 + 176);
  if (vabdd_f64(*((double *)a2 + 22), v7) <= 0.00999999978)
  {
    v9 = *((_QWORD *)a2 + 13);
    v10 = *((_QWORD *)a2 + 14);
    goto LABEL_47;
  }
  *((double *)a2 + 22) = v7;
  v9 = *((_QWORD *)a2 + 13);
  v10 = *((_QWORD *)a2 + 14);
  if (!*((_BYTE *)a2 + 168))
  {
    if (v10 != v9)
    {
      v15 = (uint64_t)(v10 - v9) / 24;
      v16 = *((_QWORD *)a2 + 5);
      if (v15 <= 1)
        v15 = 1;
      if (v15 > 3)
      {
        v17 = v15 & 0xFFFFFFFFFFFFFFFCLL;
        v55 = (_QWORD *)(v9 + 64);
        v56 = (float32x4_t *)*((_QWORD *)a2 + 5);
        v57 = v15 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v58 = *v56++;
          v59 = vmulq_n_f64(vcvt_hight_f64_f32(v58), v7);
          v60 = vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v58.f32), v7);
          *(v55 - 6) = *(_QWORD *)&v60.f64[0];
          *(v55 - 3) = *(_QWORD *)&v60.f64[1];
          v61 = v55 + 3;
          *v55 = *(_QWORD *)&v59.f64[0];
          v55 += 12;
          *v61 = *(_QWORD *)&v59.f64[1];
          v57 -= 4;
        }
        while (v57);
        if (v15 == v17)
          goto LABEL_47;
      }
      else
      {
        v17 = 0;
      }
      v62 = v15 - v17;
      v63 = 24 * v17 + 16;
      v64 = (float *)(v16 + 4 * v17);
      do
      {
        v65 = *v64++;
        *(double *)(v9 + v63) = v7 * v65;
        v63 += 24;
        --v62;
      }
      while (v62);
      goto LABEL_47;
    }
LABEL_14:
    v9 = *((_QWORD *)a2 + 14);
    goto LABEL_47;
  }
  if (v10 == v9)
    goto LABEL_14;
  v11 = (uint64_t)(v10 - v9) / 24;
  v12 = *((_QWORD *)a2 + 9);
  v13 = *((_QWORD *)a2 + 5);
  if (v11 <= 1)
    v11 = 1;
  if (v11 <= 7)
  {
    v14 = 0;
LABEL_39:
    v45 = v11 - v14;
    v46 = 24 * v14;
    v47 = (float *)(v13 + 4 * v14);
    v48 = (float64x2_t)vdupq_n_s64(0x3D1BAD32FB2535B3uLL);
    do
    {
      v49 = *v47++;
      v50 = *(double *)(v12 + v46 + 16);
      v51 = *(float64x2_t *)(v12 + v46);
      v52 = vmulq_f64(v51, v48);
      v53 = *v8 * v49 / sqrt(vaddvq_f64(vmulq_f64(v52, v52)) + v50 * 2.4747391e-14 * (v50 * 2.4747391e-14));
      v54 = (float64x2_t *)(v9 + v46);
      *v54 = vmlaq_n_f64(v51, v52, v53);
      v54[1].f64[0] = v50 + v53 * (v50 * 2.4747391e-14);
      v46 += 24;
      --v45;
    }
    while (v45);
    goto LABEL_47;
  }
  v14 = 0;
  v18 = !is_mul_ok(v11 - 1, 0x18uLL);
  v19 = 24 * (v11 - 1);
  v20 = v9 + 8 + v19;
  v21 = v9 + 16 + v19;
  v22 = v9 + v19;
  v24 = v21 >= v9 + 16 && v20 >= v9 + 8 && v22 >= v9;
  if (!v24 || v18)
    goto LABEL_39;
  v14 = 0;
  v25 = v9 + 24 * v11;
  v26 = v9 >= (unint64_t)a2 + 184 || (unint64_t)v8 >= v25;
  v27 = !v26;
  if (v12 < v25 && v9 < v12 + 24 * v11)
    goto LABEL_39;
  if (v27)
    goto LABEL_39;
  v29 = 0;
  v30 = (float64x2_t)vdupq_n_s64(0x3D1BAD32FB2535B3uLL);
  v14 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  v31 = (float64x2_t)vdupq_n_s64(0x3D1BDCF3277BE69DuLL);
  v32 = (float32x4_t *)*((_QWORD *)a2 + 5);
  v33 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v34 = (const double *)(v12 + v29);
    v120 = vld3q_f64(v34);
    v34 += 6;
    v35 = vmulq_f64(v120.val[0], v30);
    v122 = vld3q_f64(v34);
    v36 = vmulq_f64(v122.val[0], v30);
    v37 = vmulq_f64(v120.val[1], v30);
    v38 = vmulq_f64(v122.val[1], v30);
    v39 = vmulq_f64(v120.val[2], v31);
    v40 = vmulq_f64(v122.val[2], v31);
    v41 = *v32++;
    v42 = vdivq_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v41.f32), *v8), vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v35, v35), v37, v37), v39, v39)));
    v43 = vdivq_f64(vmulq_n_f64(vcvt_hight_f64_f32(v41), *v8), vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v36, v36), v38, v38), v40, v40)));
    v122.val[0] = vmlaq_f64(v122.val[0], v36, v43);
    v122.val[1] = vmlaq_f64(v122.val[1], v38, v43);
    v122.val[2] = vmlaq_f64(v122.val[2], v40, v43);
    v120.val[0] = vmlaq_f64(v120.val[0], v35, v42);
    v120.val[1] = vmlaq_f64(v120.val[1], v37, v42);
    v120.val[2] = vmlaq_f64(v120.val[2], v39, v42);
    v44 = (double *)(v9 + v29);
    vst3q_f64(v44, v120);
    v44 += 6;
    vst3q_f64(v44, v122);
    v29 += 96;
    v33 -= 4;
  }
  while (v33);
  if (v11 != v14)
    goto LABEL_39;
LABEL_47:
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v67 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v66 & 1) == 0)
  {
    v119 = v9;
    v67 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    v9 = v119;
    if (v117)
    {
      v118 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v118, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v67 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
      v9 = v119;
    }
  }
  v68 = *((_QWORD *)v67 + 299);
  *((_QWORD *)this + 3) = v68;
  if (v10 == v9)
  {
    result = 0;
  }
  else
  {
    v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v9) >> 3);
    if (v69 >> 61)
      abort();
    v70 = 8 * v69;
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, 8 * v69, 4);
    *((_QWORD *)this + 1) = result + v70;
    *((_QWORD *)this + 2) = result + v70;
    *(_QWORD *)this = result;
  }
  v72 = *((_QWORD *)a2 + 13);
  v73 = *((_QWORD *)a2 + 14) - v72;
  if (v73)
  {
    v74 = v73 / 24;
    v75 = *(float64x2_t *)(a3 + 864);
    v76 = *(float64x2_t *)(a3 + 896);
    v77 = *(float64x2_t *)(a3 + 928);
    v78 = *(float64x2_t *)(a3 + 960);
    v79 = *(uint64_t *)(a3 + 888);
    v80 = *(uint64_t *)(a3 + 920);
    v81 = *(uint64_t *)(a3 + 952);
    v82 = *(uint64_t *)(a3 + 984);
    if (v74 <= 1)
      v74 = 1;
    if (v74 < 4
      || ((v83 = 8 * (v74 - 1), v84 = result + v83, v85 = result + 4 + v83, v84 >= result)
        ? (v86 = v85 >= result + 4)
        : (v86 = 0),
          v86 ? (_ZF = (v74 - 1) >> 61 == 0) : (_ZF = 0),
          !_ZF))
    {
      v88 = 0;
LABEL_64:
      v89 = v74 - v88;
      v90 = (float32x2_t *)(result + 8 * v88);
      v91 = (double *)(v72 + 24 * v88 + 16);
      do
      {
        v92 = *(v91 - 2);
        v93 = *(v91 - 1);
        v94 = *v91;
        v91 += 3;
        *v90++ = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v78, v75, v92), v76, v93), v77, v94), 1.0 / (*(double *)&v82 + *(double *)&v79 * v92 + *(double *)&v80 * v93 + *(double *)&v81 * v94)));
        --v89;
      }
      while (v89);
      return result;
    }
    v95 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75.f64[0], 0);
    v96 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v76.f64[0], 0);
    v97 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v77.f64[0], 0);
    v98 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v78.f64[0], 0);
    v99 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v75, 1);
    v100 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v76, 1);
    v101 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v77, 1);
    v102 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v78, 1);
    v103 = (float64x2_t)vdupq_lane_s64(v79, 0);
    v104 = (float64x2_t)vdupq_lane_s64(v80, 0);
    v105 = (float64x2_t)vdupq_lane_s64(v81, 0);
    v88 = v74 & 0xFFFFFFFFFFFFFFFCLL;
    v106 = (const double *)*((_QWORD *)a2 + 13);
    v107 = (float *)result;
    v108 = v74 & 0xFFFFFFFFFFFFFFFCLL;
    v109 = (float64x2_t)vdupq_lane_s64(v82, 0);
    do
    {
      v110 = v106;
      v123 = vld3q_f64(v110);
      v110 += 6;
      v121 = vld3q_f64(v110);
      v111 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v98, v95, v123.val[0]), v96, v123.val[1]), v97, v123.val[2]);
      v112 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v102, v123.val[0], v99), v123.val[1], v100), v123.val[2], v101);
      v113 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v102, v121.val[0], v99), v121.val[1], v100), v121.val[2], v101);
      v114 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v109, v123.val[0], v103), v123.val[1], v104), v123.val[2], v105);
      __asm { FMOV            V28.2D, #1.0 }
      v123.val[1] = vdivq_f64(v123.val[0], v114);
      v123.val[0] = vdivq_f64(v123.val[0], vmlaq_f64(vmlaq_f64(vmlaq_f64(v109, v121.val[0], v103), v121.val[1], v104), v121.val[2], v105));
      v121.val[0] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v123.val[1], v111)), vmulq_f64(v123.val[0], vmlaq_f64(vmlaq_f64(vmlaq_f64(v98, v95, v121.val[0]), v96, v121.val[1]), v97, v121.val[2])));
      v121.val[1] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v123.val[1], v112)), vmulq_f64(v123.val[0], v113));
      vst2q_f32(v107, *(float32x4x2_t *)v121.val[0].f64);
      v107 += 8;
      v106 += 12;
      v108 -= 4;
    }
    while (v108);
    if (v74 != v88)
      goto LABEL_64;
  }
  return result;
}

void md::LabelMapTileCollisionInfo::addItemsToCollider(md::LabelMapTileCollisionInfo *this, md::LabelManager *a2, md::LabelCollider *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float v12;
  __int128 v13;
  float v14;
  float32x2_t *v15;
  float32x2_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x2_t v25;
  BOOL v26;
  float32x2_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  float v31;
  float32x2_t v32;
  float32x2_t v33;
  __int128 v34;
  _QWORD v35[3];
  uint64_t v36;

  if (*((_QWORD *)this + 23) != *((_QWORD *)this + 24))
  {
    md::LabelMapTileCollisionInfo::pointsToScreen((md::LabelMapTileCollisionInfo *)v35, this, *((_QWORD *)a2 + 54), *(double *)(*((_QWORD *)a2 + 29) + 56));
    v7 = *((_QWORD *)this + 23);
    v8 = *((_QWORD *)this + 24);
    if (v7 != v8)
    {
      v31 = *((float *)a2 + 44) * *((float *)this + 8);
      v9 = v7 + 136;
      do
      {
        v24 = *(unsigned int *)(v9 + 128);
        v32 = *(float32x2_t *)(v35[0] + 8 * v24);
        v25 = vsub_f32(*(float32x2_t *)(v35[0] + 8 * (v24 + 1)), v32);
        *(float32x2_t *)&v6 = vmul_f32(v25, v25);
        *(float *)&v6 = sqrtf(vaddv_f32(*(float32x2_t *)&v6));
        v34 = v6;
        v26 = *(float *)&v6 <= 0.0;
        v27 = (float32x2_t)1065353216;
        if (!v26)
          v27 = vdiv_f32(v25, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v34, 0));
        v33 = v27;
        if (!*(_DWORD *)(v9 + 96))
        {
          md::CollisionObject::resetWithRects((void **)(v9 - 80), 1u);
          *(_DWORD *)(v9 + 96) = 1;
          *(_BYTE *)(v9 + 116) = 1;
        }
        *((_QWORD *)&v6 + 1) = *((_QWORD *)&v34 + 1);
        *(float *)&v6 = *(float *)&v34 * 0.5;
        v10.f32[0] = *(float *)&v34 * 0.5;
        v10.f32[1] = v31;
        v11 = vmla_f32(v32, (float32x2_t)0x3F0000003F000000, v25);
        v12 = vmuls_lane_f32(*(float *)&v34 * 0.5, v33, 1);
        *(float *)&v13 = *(float *)&v34 * 0.5;
        *((float *)&v13 + 1) = v31;
        *((float32x2_t *)&v13 + 1) = v11;
        v14 = fabsf(-(float)(v33.f32[1] * v31)) + fabsf((float)(*(float *)&v34 * 0.5) * v33.f32[0]);
        if (v33.f32[0] == 1.0)
          v14 = *(float *)&v34 * 0.5;
        *(float32x2_t *)(v9 - 64) = v33;
        v15 = *(float32x2_t **)(v9 + 80);
        v16 = vneg_f32(v10);
        *v15 = v16;
        v15[1].i32[0] = v6;
        v15[1].f32[1] = v31;
        *(_DWORD *)(v9 - 80) = v16.i32[0];
        *(_DWORD *)(v9 - 76) = v15->i32[1];
        *(_DWORD *)(v9 - 72) = v15[1].i32[0];
        *(_DWORD *)(v9 - 68) = v15[1].i32[1];
        *(float32x2_t *)(v9 - 48) = v11;
        v17 = fabsf(v31 * v33.f32[0]) + fabsf(v12);
        if (v33.f32[0] == 1.0)
          v17 = v31;
        v18 = v11.f32[0] - v14;
        v19 = v11.f32[1] - v17;
        v20 = v11.f32[0] + v14;
        v21 = v11.f32[1] + v17;
        *(float *)v9 = v18;
        *(float *)(v9 + 4) = v19;
        *(float *)(v9 + 8) = v20;
        *(float *)(v9 + 12) = v21;
        *(float *)(v9 - 32) = v18;
        *(float *)(v9 - 28) = v19;
        *(float *)(v9 - 24) = v20;
        *(float *)(v9 - 20) = v21;
        v22 = *(_QWORD *)(v9 + 104);
        *(_DWORD *)(v22 + 8) = v6;
        *(float *)(v22 + 12) = v31;
        *(_DWORD *)(v22 + 16) = v6;
        *(float *)(v22 + 20) = v31;
        *(_DWORD *)v22 = *(_DWORD *)(v9 - 48);
        *(_DWORD *)(v22 + 4) = *(_DWORD *)(v9 - 44);
        *(_OWORD *)(v9 - 128) = v13;
        *(float32x2_t *)(v9 - 112) = v33;
        v23 = v9 + 136;
        v9 += 272;
      }
      while (v23 != v8);
      v28 = *((_QWORD *)this + 23);
      if (*((_QWORD *)this + 24) != v28)
      {
        v29 = 0;
        v30 = 0;
        do
        {
          md::LabelCollider::addCollidableItem((char *)a3, (float32x2_t *)(v28 + v29));
          ++v30;
          v28 = *((_QWORD *)this + 23);
          v29 += 272;
        }
        while (v30 < 0xF0F0F0F0F0F0F0F1 * ((*((_QWORD *)this + 24) - v28) >> 4));
      }
    }
    if (v35[0])
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v36 + 40))(v36, v35[0], v35[2] - v35[0]);
  }
}

void sub_19F8D340C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a17)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a20 + 40))(a20, a17, a19 - a17);
  _Unwind_Resume(exception_object);
}

void sub_19F8D3530(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19F8D3634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F8D41B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  void *v32;
  void *v33;
  void *v34;

  if (a21)
  {
    operator delete(a21);
    v32 = a24;
    if (!a24)
    {
LABEL_3:
      v33 = a27;
      if (!a27)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v32 = a24;
    if (!a24)
      goto LABEL_3;
  }
  operator delete(v32);
  v33 = a27;
  if (!a27)
  {
LABEL_4:
    v34 = __p;
    if (!__p)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  operator delete(v33);
  v34 = __p;
  if (!__p)
  {
LABEL_6:

    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(v34);
  goto LABEL_6;
}

void sub_19F8D4964(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F8D4D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t md::CrossFadeLabelPart::shouldSnapToDefaultPlacement(md::CrossFadeLabelPart *this)
{
  return 0;
}

uint64_t md::CrossFadeLabelPart::snapToDefaultPlacement()
{
  return 0;
}

void md::AnimatedCrossFadeLabelPart::populateDebugNode(md::AnimatedCrossFadeLabelPart *this, gdc::DebugTreeNode *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *ChildNode;
  uint64_t v9;
  _QWORD v10[7];
  int v11;
  _BYTE v12[24];

  v4 = (uint64_t *)*((_QWORD *)this + 72);
  v5 = (uint64_t *)*((_QWORD *)this + 73);
  while (v4 != v5)
  {
    v6 = *v4++;
    (*(void (**)(uint64_t, gdc::DebugTreeNode *))(*(_QWORD *)v6 + 800))(v6, a2);
  }
  v7 = (char *)operator new(0x20uLL);
  *(_QWORD *)v12 = v7;
  *(_OWORD *)&v12[8] = xmmword_19FFB3620;
  strcpy(v7, "AnimatedCrossFadeLabelPart");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)v12);
  operator delete(v7);
  v12[23] = 15;
  strcpy(v12, "Is Cross Fading");
  v9 = *((unsigned __int8 *)this + 737);
  v11 = 0;
  memset(&v10[4], 0, 24);
  v10[0] = v9;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v12, (uint64_t)v10);
}

double md::AnimatedCrossFadeLabelPart::debugCompositeClassName@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x20uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_19FFB3620;
  strcpy(v3, "AnimatedCrossFadeLabelPart");
  return *(double *)"ossFadeLabelPart";
}

uint64_t md::AnimatedCrossFadeLabelPart::AnimatedCrossFadeLabelPart(uint64_t a1, md::LabelManager *a2, md::Label *a3, int a4, md::LabelPart *a5, md::LabelPart *a6, char a7)
{
  md::CrossFadeLabelPart *v13;
  uint64_t *v14;
  __n128 v15;
  float v16;
  uint8_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  __int128 *v22;
  float v23;
  int v24;
  unsigned int v25;
  __int128 *v26;
  __int128 *v27;
  __int128 *v28;
  __int128 *v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  int v37;
  int v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  float32x2_t *v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float v51;
  __int128 *v52;
  float v53;
  float v54;
  int v55;
  __int128 *v56;
  float v57;
  __int128 *v58;
  __int128 *v59;
  __int128 *v60;
  __int128 *v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;
  uint64_t *v88;
  _QWORD *v89;
  uint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 v107;
  uint64_t *v108;
  _QWORD *v109;
  uint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  char *v125;
  _QWORD *v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  _QWORD *v134;
  _QWORD *v135;
  char *v136;
  __int128 v137;
  uint64_t v138;
  unsigned __int8 v139;
  uint64_t *v140;
  _QWORD *v141;
  float v142;
  uint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  float *v158;
  void *v159;
  unint64_t v160;
  unint64_t v161;
  void *v162;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  _QWORD *v167;
  _QWORD *v168;
  char *v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  void *v175;
  uint64_t v176;
  unsigned __int8 v177;
  uint64_t v178;
  unsigned __int8 v179;
  uint64_t *v180;
  _QWORD *v181;
  uint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  md::LabelAnimationTrack **v198;
  md::LabelAnimationTrack **v199;
  char v200;
  md::LabelAnimationTrack *v201;
  NSObject *v202;
  NSObject *v203;
  os_signpost_id_t v204;
  uint64_t v206;
  geo::read_write_lock *v207;
  const char *v208;
  malloc_zone_t *zone;
  uint64_t v210;
  geo::read_write_lock *v211;
  const char *v212;
  malloc_zone_t *v213;
  uint64_t v214;
  geo::read_write_lock *v215;
  const char *v216;
  malloc_zone_t *v217;
  uint64_t v218;
  geo::read_write_lock *v219;
  const char *v220;
  malloc_zone_t *v221;
  uint64_t v222;
  geo::read_write_lock *v223;
  const char *v224;
  malloc_zone_t *v225;
  uint64_t *v226;
  unsigned int v227;
  uint64_t v228;
  float *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint8_t buf[4];
  uint64_t v234;
  float *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  float v240[4];

  v13 = md::CrossFadeLabelPart::CrossFadeLabelPart((md::CrossFadeLabelPart *)a1, a5, a6, a7);
  *(_QWORD *)v13 = off_1E42A2D18;
  v14 = (uint64_t *)((char *)v13 + 640);
  md::LabelAnimator::LabelAnimator((uint64_t)v13 + 640, a2, a3);
  *(_BYTE *)(a1 + 736) = a4;
  *(_WORD *)(a1 + 737) = 1;
  (*(void (**)(uint64_t, md::Label *))(*(_QWORD *)a1 + 16))(a1, a3);
  (*(void (**)(md::LabelPart *))(*(_QWORD *)a5 + 184))(a5);
  (*(void (**)(md::LabelPart *))(*(_QWORD *)a6 + 184))(a6);
  md::LabelPartContent::LabelPartContent((md::LabelPartContent *)buf, a5);
  md::LabelPartContent::LabelPartContent((md::LabelPartContent *)&v227, a6);
  switch(a4)
  {
    case 1:
    case 2:
      md::LabelAnimator::setupIconMorphAnimation(v14, buf[0], v235, v227, v229, 0x13E4CCCCDLL, v15.n128_f32[0]);
      *(_DWORD *)(a1 + 656) = 1045220557;
      goto LABEL_248;
    case 3:
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 648) + 1245))
      {
        v55 = 1;
        goto LABEL_67;
      }
      if (!*(_BYTE *)(*(_QWORD *)(*v14 + 432) + 12))
        goto LABEL_73;
      md::LabelAnimator::setupBalloonAnimation(v14, 1, (int *)buf, (int *)&v227);
      goto LABEL_74;
    case 4:
      if (*(_BYTE *)(*(_QWORD *)(a1 + 648) + 1245))
      {
        if (*(_BYTE *)(*(_QWORD *)(*v14 + 432) + 12))
          md::LabelAnimator::setupBalloonAnimation(v14, 0, (int *)buf, (int *)&v227);
        else
LABEL_73:
          md::LabelAnimator::setupIconMorphAnimation(v14, buf[0], v235, v227, v229, 0x13E4CCCCDLL, v15.n128_f32[0]);
LABEL_74:
        *(_DWORD *)(a1 + 656) = 1056964608;
      }
      else
      {
        v55 = 0;
LABEL_67:
        md::LabelAnimator::setupMKBalloonPickAnimations((md::LabelAnimator *)v14, v55, (const md::LabelPartContent *)buf, (const md::LabelPartContent *)&v227);
      }
      goto LABEL_248;
    case 5:
      if (*(_DWORD *)buf)
      {
        v16 = md::LabelAnimator::setupIconMorphAnimation(v14, buf[0], v235, v227, v229, 0x13E4CCCCDLL, v15.n128_f32[0]);
        md::LabelAnimator::setupTextMorphAnimation(v14, v237, v230, 0, 0, 0x13E4CCCCDLL, v16);
      }
      else if (v228)
      {
        v240[0] = 0.0;
        v47 = *(float32x2_t **)(*(_QWORD *)(a1 + 640) + 368);
        v48 = *(float32x2_t *)(*(_QWORD *)(a1 + 648) + 664);
        v49 = *v47;
        v50 = v47[1];
        v51 = v47[2].f32[0];
        v52 = md::LabelAnimator::resolveParams(v14, 1, 1u, 1, 0);
        v53 = fmaxf(vaddv_f32(vmul_f32(v50, vsub_f32(v48, v49))) * v51, 0.0);
        if (v53 <= 1.0)
          v54 = v53 * 0.8;
        else
          v54 = 0.8;
        md::LabelAnimator::createFadeAnimation(v14, v228, 1, (uint64_t)v52, v240, v54);
LABEL_64:
        *(_BYTE *)(a1 + 729) = 1;
      }
      goto LABEL_248;
    case 6:
      if (*(_DWORD *)buf)
      {
        v23 = md::LabelAnimator::setupIconMorphAnimation(v14, buf[0], v235, v227, v229, 0, v15.n128_f32[0]);
        md::LabelAnimator::setupTextMorphAnimation(v14, v237, v230, 0, 0, 0, v23);
        v24 = (*(_DWORD *)buf >> 2) & 7;
        v25 = (v227 >> 2) & 7;
        if (v24 == 2 && v25 == 3)
        {
          v240[0] = 0.0;
          v26 = md::LabelAnimator::resolveParams(v14, 0, 6u, 1, 2);
          md::LabelAnimator::createIconRowScaleAnimation(v14, v238, 0, (uint64_t)v26, v240, 0.0);
          v27 = md::LabelAnimator::resolveParams(v14, 1, 6u, 1, 2);
          md::LabelAnimator::createIconRowScaleAnimation(v14, v231, 1, (uint64_t)v27, (float *)&v239, v240[0] + -0.1);
        }
        else if (v24 == 3 && v25 == 2)
        {
          v240[0] = 0.0;
          v58 = md::LabelAnimator::resolveParams(v14, 0, 7u, 0, 2);
          md::LabelAnimator::createIconRowScaleAnimation(v14, v238, 0, (uint64_t)v58, v240, 0.0);
          v59 = md::LabelAnimator::resolveParams(v14, 1, 7u, 0, 2);
          md::LabelAnimator::createIconRowScaleAnimation(v14, v231, 1, (uint64_t)v59, (float *)&v239, v240[0] + -0.1);
        }
        else if (v24 == 3 && v25 == 4)
        {
          v240[0] = 0.0;
          v60 = md::LabelAnimator::resolveParams(v14, 0, 8u, 1, 2);
          md::LabelAnimator::createIconRowShiftAnimation(v14, v238, 0, (uint64_t)v60, v240, 0.0);
          v61 = md::LabelAnimator::resolveParams(v14, 1, 9u, 1, 2);
          md::LabelAnimator::createImageListFeatherAnimation(v14, v231, 1, (uint64_t)v61, (float *)&v239, v240[0] + -0.1);
        }
        else if (v24 == 4 && v25 == 3)
        {
          v240[0] = 0.0;
          v79 = md::LabelAnimator::resolveParams(v14, 0, 9u, 0, 2);
          md::LabelAnimator::createImageListFeatherAnimation(v14, v238, 0, (uint64_t)v79, v240, 0.0);
          v80 = md::LabelAnimator::resolveParams(v14, 1, 8u, 0, 2);
          md::LabelAnimator::createIconRowShiftAnimation(v14, v231, 1, (uint64_t)v80, (float *)&v239, v240[0] + -0.1);
        }
      }
      else
      {
        v240[0] = 0.0;
        v56 = md::LabelAnimator::resolveParams(v14, 1, 1u, 1, 0);
        if (v229)
        {
          md::LabelAnimator::createFadeAnimation(v14, (uint64_t)v229, 1, (uint64_t)v56, v240, 0.0);
          v57 = *((float *)v56 + 3);
        }
        else
        {
          v57 = 0.0;
        }
        if (v230)
        {
          md::LabelAnimator::createFadeAnimation(v14, v230, 1, (uint64_t)v56, v240, v57);
          v57 = *((float *)v56 + 3) + v57;
        }
        if (v231)
        {
          md::LabelAnimator::createFadeAnimation(v14, v231, 1, (uint64_t)v56, v240, v57);
          if (v232)
            md::LabelAnimator::createFadeAnimation(v14, v232, 1, (uint64_t)v56, v240, v57);
        }
      }
      goto LABEL_248;
    case 7:
      if (!v227 && v234)
      {
        v240[0] = 0.0;
        v28 = md::LabelAnimator::resolveParams(v14, 0, 2u, 1, 0);
        md::LabelAnimator::createFadeAnimation(v14, v234, 0, (uint64_t)v28, v240, 0.0);
        *(_BYTE *)(a1 + 729) = 1;
      }
      if (*(_DWORD *)buf || !v228)
        goto LABEL_248;
      v240[0] = 0.0;
      v29 = md::LabelAnimator::resolveParams(v14, 1, 2u, 1, 0);
      md::LabelAnimator::createFadeAnimation(v14, v228, 1, (uint64_t)v29, v240, 0.0);
      goto LABEL_64;
    case 8:
      v240[0] = 0.0;
      v17 = buf[0];
      if ((buf[0] & 2) != 0)
      {
        v18 = v236;
        v19 = v237;
        v20 = md::LabelAnimator::resolveParams(v14, 0, 0xFu, 1, 1);
        if (v18)
          v21 = v18;
        else
          v21 = v19;
        md::LabelAnimator::createFadeAnimation(v14, v21, 0, (uint64_t)v20, v240, 0.0);
        v17 = buf[0];
      }
      if ((v17 & 1) != 0)
      {
        v239 = 0;
        v22 = md::LabelAnimator::resolveParams(v14, 0, 0x10u, 1, 0);
        md::LabelAnimator::createFadeAnimation(v14, (uint64_t)v235, 0, (uint64_t)v22, (float *)&v239, v240[0]);
      }
      goto LABEL_248;
    case 9:
      if (!v229 || !v230 || (*(unsigned int (**)(void))(*(_QWORD *)v229 + 224))() != 8)
        goto LABEL_247;
      v30 = *(float **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 640) + 336) + 200) + 80);
      if (*((_BYTE *)v30 + 8))
        v31 = v30[1];
      else
        v31 = 0.3;
      if (*((_BYTE *)v30 + 16))
        v32 = v30[3];
      else
        v32 = 0.3;
      if (*((_BYTE *)v30 + 24))
        v33 = v30[5];
      else
        v33 = 0.6;
      if (*((_BYTE *)v30 + 32))
        v34 = v30[7];
      else
        v34 = 0.0;
      if (*((_BYTE *)v30 + 40))
        v35 = v30[9];
      else
        v35 = 0.4;
      if (*((_BYTE *)v30 + 48))
        v36 = v30[11];
      else
        v36 = 0.8;
      v37 = *((unsigned __int8 *)v30 + 1);
      v38 = *(unsigned __int8 *)v30;
      if (v37)
        v39 = v38 == 0;
      else
        v39 = 1;
      v40 = v39;
      v41 = *(_QWORD *)(*((_QWORD *)v229 + 72) + 8);
      v42 = (uint64_t *)(a1 + 664);
      v43 = *(_QWORD *)(a1 + 672);
      v44 = *(_QWORD *)(a1 + 664);
      if (v43 - v44 == -144)
      {
        while (v43 != v44)
        {
          v46 = *(void **)(v43 - 144);
          v43 -= 144;
          v45 = v46;
          if (v46 != *(void **)(v43 + 16))
            free(v45);
        }
        *(_QWORD *)(a1 + 672) = v44;
      }
      else
      {
        std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append((uint64_t *)(a1 + 664));
        v44 = *(_QWORD *)(a1 + 672);
      }
      v226 = (uint64_t *)(a1 + 664);
      v62 = *v42;
      v63 = 57 * ((v44 - *v42) >> 4) - 1;
      *(_BYTE *)(v41 + 563) = v63;
      v64 = operator new();
      *(_QWORD *)v64 = 0;
      *(_QWORD *)(v64 + 8) = 0;
      *(_QWORD *)(v64 + 16) = 0;
      {
        v206 = operator new();
        *(_QWORD *)(v206 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v206 + 24) = "VectorKitLabels";
        *(_OWORD *)(v206 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v206 = &off_1E42B5668;
        *(_QWORD *)(v206 + 8) = "VectorKitLabels";
        *(_OWORD *)(v206 + 72) = 0u;
        *(_OWORD *)(v206 + 88) = 0u;
        *(_OWORD *)(v206 + 104) = 0u;
        *(_OWORD *)(v206 + 120) = 0u;
        *(_OWORD *)(v206 + 136) = 0u;
        *(_OWORD *)(v206 + 152) = 0u;
        *(_OWORD *)(v206 + 168) = 0u;
        *(_OWORD *)(v206 + 184) = 0u;
        *(_OWORD *)(v206 + 200) = 0u;
        *(_OWORD *)(v206 + 216) = 0u;
        *(_OWORD *)(v206 + 232) = 0u;
        *(_QWORD *)(v206 + 248) = 0;
        *(_OWORD *)(v206 + 56) = 0u;
        v207 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v206 + 56), 0);
        if ((_DWORD)v207)
          geo::read_write_lock::logFailure(v207, (uint64_t)"initialization", v208);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v206 + 48) = zone;
        malloc_set_zone_name(zone, "VectorKitLabels");
        *(_QWORD *)(v206 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v206;
      }
      *(_QWORD *)(v64 + 24) = mdm::Allocator::instance(void)::alloc;
      *(_QWORD *)(v64 + 32) = 0;
      *(_WORD *)(v64 + 40) = 0;
      *(_QWORD *)v240 = v64;
      v66 = *(uint64_t **)(a1 + 704);
      if ((unint64_t)v66 >= *(_QWORD *)(a1 + 712))
      {
        v67 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>(a1 + 696, v240);
      }
      else
      {
        if (v66)
          *v66 = v64;
        v67 = v66 + 1;
      }
      *(_QWORD *)(a1 + 704) = v67;
      v68 = (uint64_t *)*(v67 - 1);
      v69 = v68[1];
      v70 = v68[2];
      if (v69 >= v70)
      {
        v72 = (uint64_t)(v69 - *v68) >> 5;
        v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 59)
          goto LABEL_265;
        v74 = v70 - *v68;
        if (v74 >> 4 > v73)
          v73 = v74 >> 4;
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFE0)
          v75 = 0x7FFFFFFFFFFFFFFLL;
        else
          v75 = v73;
        if (v75)
        {
          v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68[3] + 16))(v68[3], 32 * v75, 8);
          v77 = v76 + 32 * v72;
          v78 = v76 + 32 * v75;
          if (v76)
          {
            *(float *)v77 = v31;
            *(_QWORD *)(v77 + 8) = 0;
            *(_DWORD *)(v77 + 4) = 981668463;
            *(_BYTE *)(v77 + 16) = 1;
            *(_QWORD *)(v77 + 24) = EaseLinear;
          }
        }
        else
        {
          v78 = 0;
          v77 = 32 * v72;
        }
        v71 = v77 + 32;
        v82 = *v68;
        v81 = v68[1];
        if (v81 != *v68)
        {
          do
          {
            v83 = *(_OWORD *)(v81 - 16);
            *(_OWORD *)(v77 - 32) = *(_OWORD *)(v81 - 32);
            *(_OWORD *)(v77 - 16) = v83;
            v77 -= 32;
            v81 -= 32;
          }
          while (v81 != v82);
          v81 = *v68;
        }
        *v68 = v77;
        v68[1] = v71;
        v84 = v68[2];
        v68[2] = v78;
        if (v81)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68[3] + 40))(v68[3], v81, v84 - v81);
      }
      else
      {
        if (v69)
        {
          *(float *)v69 = v31;
          *(_DWORD *)(v69 + 12) = 0;
          *(_QWORD *)(v69 + 4) = 981668463;
          *(_BYTE *)(v69 + 16) = 1;
          *(_QWORD *)(v69 + 24) = EaseLinear;
        }
        v71 = v69 + 32;
        v68[1] = v69 + 32;
      }
      v68[1] = v71;
      v85 = v62 + 144 * v63;
      *(_QWORD *)(v85 + 72) = v68;
      *(_QWORD *)(v85 + 80) = 0x3F80000000000000;
      v86 = operator new();
      *(_QWORD *)v86 = 0;
      *(_QWORD *)(v86 + 8) = 0;
      *(_QWORD *)(v86 + 16) = 0;
      {
        v210 = operator new();
        *(_QWORD *)(v210 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v210 + 24) = "VectorKitLabels";
        *(_OWORD *)(v210 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v210 = &off_1E42B5668;
        *(_QWORD *)(v210 + 8) = "VectorKitLabels";
        *(_OWORD *)(v210 + 72) = 0u;
        *(_OWORD *)(v210 + 88) = 0u;
        *(_OWORD *)(v210 + 104) = 0u;
        *(_OWORD *)(v210 + 120) = 0u;
        *(_OWORD *)(v210 + 136) = 0u;
        *(_OWORD *)(v210 + 152) = 0u;
        *(_OWORD *)(v210 + 168) = 0u;
        *(_OWORD *)(v210 + 184) = 0u;
        *(_OWORD *)(v210 + 200) = 0u;
        *(_OWORD *)(v210 + 216) = 0u;
        *(_OWORD *)(v210 + 232) = 0u;
        *(_QWORD *)(v210 + 248) = 0;
        *(_OWORD *)(v210 + 56) = 0u;
        v211 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v210 + 56), 0);
        if ((_DWORD)v211)
          geo::read_write_lock::logFailure(v211, (uint64_t)"initialization", v212);
        v213 = malloc_create_zone(0, 0);
        *(_QWORD *)(v210 + 48) = v213;
        malloc_set_zone_name(v213, "VectorKitLabels");
        *(_QWORD *)(v210 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v210;
      }
      *(_QWORD *)(v86 + 24) = mdm::Allocator::instance(void)::alloc;
      *(_QWORD *)(v86 + 32) = 0;
      *(_WORD *)(v86 + 40) = 0;
      *(_QWORD *)v240 = v86;
      v88 = *(uint64_t **)(a1 + 704);
      if ((unint64_t)v88 >= *(_QWORD *)(a1 + 712))
      {
        v89 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>(a1 + 696, v240);
      }
      else
      {
        if (v88)
          *v88 = v86;
        v89 = v88 + 1;
      }
      *(_QWORD *)(a1 + 704) = v89;
      v90 = (uint64_t *)*(v89 - 1);
      v91 = v90[1];
      v92 = v90[2];
      if (v91 >= v92)
      {
        v94 = (uint64_t)(v91 - *v90) >> 5;
        v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 59)
          goto LABEL_265;
        v96 = v92 - *v90;
        if (v96 >> 4 > v95)
          v95 = v96 >> 4;
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFE0)
          v97 = 0x7FFFFFFFFFFFFFFLL;
        else
          v97 = v95;
        if (v97)
        {
          v98 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v90[3] + 16))(v90[3], 32 * v97, 8);
          v99 = v98 + 32 * v94;
          v100 = v98 + 32 * v97;
          if (v98)
          {
            *(float *)v99 = v31;
            *(float *)(v99 + 4) = fmaxf(v32, 0.000001);
            *(_QWORD *)(v99 + 8) = 0;
            *(_BYTE *)(v99 + 16) = 1;
            *(_QWORD *)(v99 + 24) = EaseQuadIn;
          }
        }
        else
        {
          v100 = 0;
          v99 = 32 * v94;
        }
        v93 = v99 + 32;
        v102 = *v90;
        v101 = v90[1];
        if (v101 != *v90)
        {
          do
          {
            v103 = *(_OWORD *)(v101 - 16);
            *(_OWORD *)(v99 - 32) = *(_OWORD *)(v101 - 32);
            *(_OWORD *)(v99 - 16) = v103;
            v99 -= 32;
            v101 -= 32;
          }
          while (v101 != v102);
          v101 = *v90;
        }
        *v90 = v99;
        v90[1] = v93;
        v104 = v90[2];
        v90[2] = v100;
        if (v101)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v90[3] + 40))(v90[3], v101, v104 - v101);
      }
      else
      {
        if (v91)
        {
          *(float *)v91 = v31;
          *(float *)(v91 + 4) = fmaxf(v32, 0.000001);
          *(_QWORD *)(v91 + 8) = 0;
          *(_BYTE *)(v91 + 16) = 1;
          *(_QWORD *)(v91 + 24) = EaseQuadIn;
        }
        v93 = v91 + 32;
        v90[1] = v91 + 32;
      }
      v105 = v62 + 144 * v63;
      v90[1] = v93;
      *(_QWORD *)(v105 + 56) = v90;
      *(float *)(v105 + 64) = v33;
      *(_DWORD *)(v105 + 68) = 1065353216;
      if ((v40 & 1) != 0)
        goto LABEL_178;
      v106 = operator new();
      *(_QWORD *)v106 = 0;
      *(_QWORD *)(v106 + 8) = 0;
      *(_QWORD *)(v106 + 16) = 0;
      {
        v222 = operator new();
        *(_QWORD *)(v222 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v222 + 24) = "VectorKitLabels";
        *(_OWORD *)(v222 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v222 = &off_1E42B5668;
        *(_QWORD *)(v222 + 8) = "VectorKitLabels";
        *(_OWORD *)(v222 + 72) = 0u;
        *(_OWORD *)(v222 + 88) = 0u;
        *(_OWORD *)(v222 + 104) = 0u;
        *(_OWORD *)(v222 + 120) = 0u;
        *(_OWORD *)(v222 + 136) = 0u;
        *(_OWORD *)(v222 + 152) = 0u;
        *(_OWORD *)(v222 + 168) = 0u;
        *(_OWORD *)(v222 + 184) = 0u;
        *(_OWORD *)(v222 + 200) = 0u;
        *(_OWORD *)(v222 + 216) = 0u;
        *(_OWORD *)(v222 + 232) = 0u;
        *(_QWORD *)(v222 + 248) = 0;
        *(_OWORD *)(v222 + 56) = 0u;
        v223 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v222 + 56), 0);
        if ((_DWORD)v223)
          geo::read_write_lock::logFailure(v223, (uint64_t)"initialization", v224);
        v225 = malloc_create_zone(0, 0);
        *(_QWORD *)(v222 + 48) = v225;
        malloc_set_zone_name(v225, "VectorKitLabels");
        *(_QWORD *)(v222 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v222;
      }
      *(_QWORD *)(v106 + 24) = mdm::Allocator::instance(void)::alloc;
      *(_QWORD *)(v106 + 32) = 0;
      *(_WORD *)(v106 + 40) = 0;
      *(_QWORD *)v240 = v106;
      v108 = *(uint64_t **)(a1 + 704);
      if ((unint64_t)v108 >= *(_QWORD *)(a1 + 712))
      {
        v109 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>(a1 + 696, v240);
      }
      else
      {
        if (v108)
          *v108 = v106;
        v109 = v108 + 1;
      }
      *(_QWORD *)(a1 + 704) = v109;
      v110 = (uint64_t *)*(v109 - 1);
      v111 = v110[1];
      v112 = v110[2];
      if (v111 >= v112)
      {
        v114 = (uint64_t)(v111 - *v110) >> 5;
        v115 = v114 + 1;
        if ((unint64_t)(v114 + 1) >> 59)
          goto LABEL_265;
        v116 = v112 - *v110;
        if (v116 >> 4 > v115)
          v115 = v116 >> 4;
        if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFE0)
          v117 = 0x7FFFFFFFFFFFFFFLL;
        else
          v117 = v115;
        if (v117)
        {
          v118 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v110[3] + 16))(v110[3], 32 * v117, 8);
          v119 = v118 + 32 * v114;
          v120 = v118 + 32 * v117;
          if (v118)
          {
            *(float *)v119 = v31;
            *(float *)(v119 + 4) = fmaxf(v32, 0.000001);
            *(_QWORD *)(v119 + 8) = 0;
            *(_BYTE *)(v119 + 16) = 1;
            *(_QWORD *)(v119 + 24) = EaseLinear;
          }
        }
        else
        {
          v120 = 0;
          v119 = 32 * v114;
        }
        v113 = v119 + 32;
        v122 = *v110;
        v121 = v110[1];
        if (v121 != *v110)
        {
          do
          {
            v123 = *(_OWORD *)(v121 - 16);
            *(_OWORD *)(v119 - 32) = *(_OWORD *)(v121 - 32);
            *(_OWORD *)(v119 - 16) = v123;
            v119 -= 32;
            v121 -= 32;
          }
          while (v121 != v122);
          v121 = *v110;
        }
        *v110 = v119;
        v110[1] = v113;
        v124 = v110[2];
        v110[2] = v120;
        if (v121)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v110[3] + 40))(v110[3], v121, v124 - v121);
      }
      else
      {
        if (v111)
        {
          *(float *)v111 = v31;
          *(float *)(v111 + 4) = fmaxf(v32, 0.000001);
          *(_QWORD *)(v111 + 8) = 0;
          *(_BYTE *)(v111 + 16) = 1;
          *(_QWORD *)(v111 + 24) = EaseLinear;
        }
        v113 = v111 + 32;
        v110[1] = v111 + 32;
      }
      v110[1] = v113;
      v126 = *(_QWORD **)v105;
      v125 = *(char **)(v105 + 8);
      v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v125[-*(_QWORD *)v105] >> 3);
      v128 = *(_QWORD *)(v105 + 24);
      if (v128 < v127 + 1)
      {
        v129 = *(_QWORD **)(v105 + 16);
        v130 = (1 << -(char)__clz(v128 + 1));
        if (v128 >= 0xFFFFFFFFFFFFFFFELL)
          v130 = 1;
        if (v130 <= v127 + 1)
          v131 = v127 + 1;
        else
          v131 = v130;
        v132 = (char *)malloc_type_malloc(24 * v131, 0x1020040545B2139uLL);
        v133 = v132;
        v134 = *(_QWORD **)v105;
        v135 = *(_QWORD **)(v105 + 8);
        if (*(_QWORD **)v105 != v135)
        {
          v136 = v132;
          do
          {
            v137 = *(_OWORD *)v134;
            *((_QWORD *)v136 + 2) = v134[2];
            *(_OWORD *)v136 = v137;
            v136 += 24;
            v134 += 3;
          }
          while (v134 != v135);
        }
        if (v126 != v129)
          free(*(void **)v105);
        v125 = &v133[24 * v127];
        *(_QWORD *)v105 = v133;
        *(_QWORD *)(v105 + 8) = v125;
        *(_QWORD *)(v105 + 24) = v131;
      }
      *(_QWORD *)v125 = v110;
      *((_QWORD *)v125 + 1) = 0x3F80000000000000;
      v125[16] = 3;
      *(_QWORD *)(v105 + 8) += 24;
LABEL_178:
      v138 = operator new();
      *(_QWORD *)v138 = 0;
      *(_QWORD *)(v138 + 8) = 0;
      *(_QWORD *)(v138 + 16) = 0;
      {
        v214 = operator new();
        *(_QWORD *)(v214 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v214 + 24) = "VectorKitLabels";
        *(_OWORD *)(v214 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v214 = &off_1E42B5668;
        *(_QWORD *)(v214 + 8) = "VectorKitLabels";
        *(_OWORD *)(v214 + 72) = 0u;
        *(_OWORD *)(v214 + 88) = 0u;
        *(_OWORD *)(v214 + 104) = 0u;
        *(_OWORD *)(v214 + 120) = 0u;
        *(_OWORD *)(v214 + 136) = 0u;
        *(_OWORD *)(v214 + 152) = 0u;
        *(_OWORD *)(v214 + 168) = 0u;
        *(_OWORD *)(v214 + 184) = 0u;
        *(_OWORD *)(v214 + 200) = 0u;
        *(_OWORD *)(v214 + 216) = 0u;
        *(_OWORD *)(v214 + 232) = 0u;
        *(_QWORD *)(v214 + 248) = 0;
        *(_OWORD *)(v214 + 56) = 0u;
        v215 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v214 + 56), 0);
        if ((_DWORD)v215)
          geo::read_write_lock::logFailure(v215, (uint64_t)"initialization", v216);
        v217 = malloc_create_zone(0, 0);
        *(_QWORD *)(v214 + 48) = v217;
        malloc_set_zone_name(v217, "VectorKitLabels");
        *(_QWORD *)(v214 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v214;
      }
      *(_QWORD *)(v138 + 24) = mdm::Allocator::instance(void)::alloc;
      *(_QWORD *)(v138 + 32) = 0;
      *(_WORD *)(v138 + 40) = 0;
      *(_QWORD *)v240 = v138;
      v140 = *(uint64_t **)(a1 + 704);
      if ((unint64_t)v140 >= *(_QWORD *)(a1 + 712))
      {
        v141 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>(a1 + 696, v240);
      }
      else
      {
        if (v140)
          *v140 = v138;
        v141 = v140 + 1;
      }
      v142 = (float)(v32 + v31) + v34;
      *(_QWORD *)(a1 + 704) = v141;
      v143 = (uint64_t *)*(v141 - 1);
      v144 = v143[1];
      v145 = v143[2];
      if (v144 >= v145)
      {
        v147 = (uint64_t)(v144 - *v143) >> 5;
        v148 = v147 + 1;
        if ((unint64_t)(v147 + 1) >> 59)
          goto LABEL_265;
        v149 = v145 - *v143;
        if (v149 >> 4 > v148)
          v148 = v149 >> 4;
        if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFE0)
          v150 = 0x7FFFFFFFFFFFFFFLL;
        else
          v150 = v148;
        if (v150)
        {
          v151 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v143[3] + 16))(v143[3], 32 * v150, 8);
          v152 = v151 + 32 * v147;
          v153 = v151 + 32 * v150;
          if (v151)
          {
            *(float *)v152 = v142;
            *(float *)(v152 + 4) = fmaxf(v35, 0.000001);
            *(_QWORD *)(v152 + 8) = 0;
            *(_BYTE *)(v152 + 16) = 1;
            *(_QWORD *)(v152 + 24) = EaseSpringOut;
          }
        }
        else
        {
          v153 = 0;
          v152 = 32 * v147;
        }
        v146 = v152 + 32;
        v155 = *v143;
        v154 = v143[1];
        if (v154 != *v143)
        {
          do
          {
            v156 = *(_OWORD *)(v154 - 16);
            *(_OWORD *)(v152 - 32) = *(_OWORD *)(v154 - 32);
            *(_OWORD *)(v152 - 16) = v156;
            v152 -= 32;
            v154 -= 32;
          }
          while (v154 != v155);
          v154 = *v143;
        }
        *v143 = v152;
        v143[1] = v146;
        v157 = v143[2];
        v143[2] = v153;
        if (v154)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v143[3] + 40))(v143[3], v154, v157 - v154);
      }
      else
      {
        if (v144)
        {
          *(float *)v144 = v142;
          *(float *)(v144 + 4) = fmaxf(v35, 0.000001);
          *(_QWORD *)(v144 + 8) = 0;
          *(_BYTE *)(v144 + 16) = 1;
          *(_QWORD *)(v144 + 24) = EaseSpringOut;
        }
        v146 = v144 + 32;
        v143[1] = v144 + 32;
      }
      v143[1] = v146;
      v159 = *(void **)v105;
      v158 = *(float **)(v105 + 8);
      v160 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v158 - *(_QWORD *)v105) >> 3);
      v161 = *(_QWORD *)(v105 + 24);
      if (v161 < v160 + 1)
      {
        v162 = *(void **)(v105 + 16);
        v163 = (1 << -(char)__clz(v161 + 1));
        if (v161 >= 0xFFFFFFFFFFFFFFFELL)
          v163 = 1;
        if (v163 <= v160 + 1)
          v164 = v160 + 1;
        else
          v164 = v163;
        v165 = (char *)malloc_type_malloc(24 * v164, 0x1020040545B2139uLL);
        v166 = v165;
        v167 = *(_QWORD **)v105;
        v168 = *(_QWORD **)(v105 + 8);
        if (*(_QWORD **)v105 != v168)
        {
          v169 = v165;
          do
          {
            v170 = *(_OWORD *)v167;
            *((_QWORD *)v169 + 2) = v167[2];
            *(_OWORD *)v169 = v170;
            v169 += 24;
            v167 += 3;
          }
          while (v167 != v168);
        }
        if (v159 != v162)
          free(*(void **)v105);
        v158 = (float *)&v166[24 * v160];
        *(_QWORD *)v105 = v166;
        *(_QWORD *)(v105 + 8) = v158;
        *(_QWORD *)(v105 + 24) = v164;
      }
      *(_QWORD *)v158 = v143;
      v158[2] = v36;
      v158[3] = 1.0;
      *((_BYTE *)v158 + 16) = 2;
      *(_QWORD *)(v105 + 8) += 24;
      v171 = v230;
      v172 = *(_QWORD *)(a1 + 672);
      v173 = *(_QWORD *)(a1 + 664);
      if (v172 - v173 == -144)
      {
        while (v172 != v173)
        {
          v175 = *(void **)(v172 - 144);
          v172 -= 144;
          v174 = v175;
          if (v175 != *(void **)(v172 + 16))
            free(v174);
        }
        *(_QWORD *)(a1 + 672) = v173;
      }
      else
      {
        std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append(v226);
        v173 = *(_QWORD *)(a1 + 672);
      }
      v176 = *v226;
      v177 = 57 * ((v173 - *v226) >> 4) - 1;
      *(_BYTE *)(v171 + 563) = v177;
      v178 = operator new();
      *(_QWORD *)v178 = 0;
      *(_QWORD *)(v178 + 8) = 0;
      *(_QWORD *)(v178 + 16) = 0;
      {
        v218 = operator new();
        *(_QWORD *)(v218 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v218 + 24) = "VectorKitLabels";
        *(_OWORD *)(v218 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v218 = &off_1E42B5668;
        *(_QWORD *)(v218 + 8) = "VectorKitLabels";
        *(_OWORD *)(v218 + 72) = 0u;
        *(_OWORD *)(v218 + 88) = 0u;
        *(_OWORD *)(v218 + 104) = 0u;
        *(_OWORD *)(v218 + 120) = 0u;
        *(_OWORD *)(v218 + 136) = 0u;
        *(_OWORD *)(v218 + 152) = 0u;
        *(_OWORD *)(v218 + 168) = 0u;
        *(_OWORD *)(v218 + 184) = 0u;
        *(_OWORD *)(v218 + 200) = 0u;
        *(_OWORD *)(v218 + 216) = 0u;
        *(_OWORD *)(v218 + 232) = 0u;
        *(_QWORD *)(v218 + 248) = 0;
        *(_OWORD *)(v218 + 56) = 0u;
        v219 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v218 + 56), 0);
        if ((_DWORD)v219)
          geo::read_write_lock::logFailure(v219, (uint64_t)"initialization", v220);
        v221 = malloc_create_zone(0, 0);
        *(_QWORD *)(v218 + 48) = v221;
        malloc_set_zone_name(v221, "VectorKitLabels");
        *(_QWORD *)(v218 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v218;
      }
      *(_QWORD *)(v178 + 24) = mdm::Allocator::instance(void)::alloc;
      *(_QWORD *)(v178 + 32) = 0;
      *(_WORD *)(v178 + 40) = 0;
      *(_QWORD *)v240 = v178;
      v180 = *(uint64_t **)(a1 + 704);
      if ((unint64_t)v180 >= *(_QWORD *)(a1 + 712))
      {
        v181 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>(a1 + 696, v240);
      }
      else
      {
        if (v180)
          *v180 = v178;
        v181 = v180 + 1;
      }
      *(_QWORD *)(a1 + 704) = v181;
      v182 = (uint64_t *)*(v181 - 1);
      v183 = v182[1];
      v184 = v182[2];
      if (v183 < v184)
      {
        if (v183)
        {
          *(float *)v183 = v142;
          *(float *)(v183 + 4) = fmaxf(v35, 0.000001);
          *(_QWORD *)(v183 + 8) = 0;
          *(_BYTE *)(v183 + 16) = 1;
          *(_QWORD *)(v183 + 24) = EaseSpringOut;
        }
        v185 = v183 + 32;
        v182[1] = v183 + 32;
        goto LABEL_246;
      }
      v186 = (uint64_t)(v183 - *v182) >> 5;
      v187 = v186 + 1;
      if ((unint64_t)(v186 + 1) >> 59)
LABEL_265:
        abort();
      v188 = v184 - *v182;
      if (v188 >> 4 > v187)
        v187 = v188 >> 4;
      if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFE0)
        v189 = 0x7FFFFFFFFFFFFFFLL;
      else
        v189 = v187;
      if (v189)
      {
        v190 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v182[3] + 16))(v182[3], 32 * v189, 8);
        v191 = v190 + 32 * v186;
        v192 = v190 + 32 * v189;
        if (v190)
        {
          *(float *)v191 = v142;
          *(float *)(v191 + 4) = fmaxf(v35, 0.000001);
          *(_QWORD *)(v191 + 8) = 0;
          *(_BYTE *)(v191 + 16) = 1;
          *(_QWORD *)(v191 + 24) = EaseSpringOut;
        }
      }
      else
      {
        v192 = 0;
        v191 = 32 * v186;
      }
      v185 = v191 + 32;
      v194 = *v182;
      v193 = v182[1];
      if (v193 != *v182)
      {
        do
        {
          v15 = *(__n128 *)(v193 - 32);
          v195 = *(_OWORD *)(v193 - 16);
          *(__n128 *)(v191 - 32) = v15;
          *(_OWORD *)(v191 - 16) = v195;
          v191 -= 32;
          v193 -= 32;
        }
        while (v193 != v194);
        v193 = *v182;
      }
      *v182 = v191;
      v182[1] = v185;
      v196 = v182[2];
      v182[2] = v192;
      if (v193)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v182[3] + 40))(v182[3], v193, v196 - v193);
LABEL_246:
      v182[1] = v185;
      v197 = v176 + 144 * v177;
      *(_QWORD *)(v197 + 56) = v182;
      *(float *)(v197 + 64) = v36;
      *(_DWORD *)(v197 + 68) = 1065353216;
LABEL_247:
      *(_BYTE *)(a1 + 730) = 1;
LABEL_248:
      if (!*(_BYTE *)(a1 + 728))
      {
        if (*(_BYTE *)(a1 + 730))
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 648) + 1192) + 52) != 2)
            goto LABEL_257;
          *(_BYTE *)(a1 + 730) = 0;
        }
        v198 = *(md::LabelAnimationTrack ***)(a1 + 696);
        v199 = *(md::LabelAnimationTrack ***)(a1 + 704);
        if (v198 == v199)
          goto LABEL_256;
        v200 = 0;
        do
        {
          v15.n128_u32[0] = *(_DWORD *)(a1 + 660);
          md::LabelAnimationTrack::runAnimation(*v198, v15);
          v201 = *v198++;
          v200 |= *((_BYTE *)v201 + 40) == 0;
        }
        while (v198 != v199);
        if ((v200 & 1) == 0)
LABEL_256:
          *(_BYTE *)(a1 + 728) = 1;
      }
LABEL_257:
      if (*(unsigned __int8 *)(a1 + 736) - 3 <= 1)
      {
        *(_BYTE *)(a1 + 738) = 1;
        if (GEOGetVectorKitPerformanceLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
        v202 = (id)GEOGetVectorKitPerformanceLog_log;
        v203 = v202;
        v204 = *(unsigned __int8 *)(a1 + 736);
        if (*(_BYTE *)(a1 + 736) && os_signpost_enabled(v202))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_19F029000, v203, OS_SIGNPOST_INTERVAL_BEGIN, v204, "LabelsPickAnimation", (const char *)&unk_1A0189141, buf, 2u);
        }

      }
      return a1;
    default:
      goto LABEL_248;
  }
}

void sub_19F8D6964(_Unwind_Exception *a1)
{
  md::CompositeLabelPart *v1;
  md::LabelAnimator *v2;

  md::LabelAnimator::~LabelAnimator(v2);
  md::CompositeLabelPart::~CompositeLabelPart(v1);
  _Unwind_Resume(a1);
}

void md::DefaultFaultNotificationService::post(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned __int8 *v3;
  char v6;
  std::mutex *v8;
  double v9;
  double v10;
  _QWORD *v11;
  unint64_t v12;
  double *v13;
  double *v14;
  double *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  dispatch_time_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  NSObject *v32;
  unint64_t *v33;
  unint64_t v34;
  dispatch_block_t v35;
  uint64_t v36;
  void *v37;
  _QWORD v38[5];
  std::__shared_weak_count *v39;
  uint8_t buf[4];
  double v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = (unsigned __int8 *)(a1 + a2 + 24);
  if (__ldaxr(v3))
  {
    __clrex();
  }
  else if (!__stlxr(1u, v3))
  {
    v6 = a2;
    v8 = *(std::mutex **)(a1 + 8);
    std::mutex::lock(v8);
    v9 = CACurrentMediaTime();
    v10 = v9;
    v11 = *(_QWORD **)(a1 + 8);
    v13 = (double *)v11[10];
    v12 = v11[11];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (double *)v11[9];
      v16 = 0xAAAAAAAAAAAAAAABLL * (v13 - v15) + 1;
      if (v16 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v15) >> 3);
      if (2 * v17 > v16)
        v16 = 2 * v17;
      if (v17 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = (char *)operator new(24 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[8 * (v13 - v15)];
      *(double *)v20 = v10;
      v20[8] = v6;
      *((_QWORD *)v20 + 2) = a3;
      v14 = (double *)(v20 + 24);
      if (v13 != v15)
      {
        do
        {
          v21 = *(_OWORD *)(v13 - 3);
          *((double *)v20 - 1) = *(v13 - 1);
          *(_OWORD *)(v20 - 24) = v21;
          v20 -= 24;
          v13 -= 3;
        }
        while (v13 != v15);
        v13 = (double *)v11[9];
      }
      v11[9] = v20;
      v11[10] = v14;
      v11[11] = &v19[24 * v18];
      if (v13)
        operator delete(v13);
    }
    else
    {
      *v13 = v9;
      *((_BYTE *)v13 + 8) = v6;
      v14 = v13 + 3;
      *((_QWORD *)v13 + 2) = a3;
    }
    v11[10] = v14;
    v22 = *(_QWORD *)(a1 + 8);
    if (!*(_BYTE *)(v22 + 64))
    {
      v23 = v10 - *(double *)(v22 + 120);
      v24 = *(double *)(a1 + 40);
      v25 = 30.0;
      if (v23 < v24)
        v25 = fmin(fmax(v24 + v24, 30.0), 1200.0);
      *(double *)(a1 + 40) = v25;
      if (v23 <= v25)
        v26 = v25 - v23;
      else
        v26 = 0.0;
      *(_BYTE *)(v22 + 64) = 1;
      v27 = dispatch_time(0, (uint64_t)(v26 * 1000000000.0));
      v29 = *(_QWORD *)(a1 + 8);
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      if (v28)
      {
        p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
        do
          v31 = __ldxr(p_shared_weak_owners);
        while (__stxr(v31 + 1, p_shared_weak_owners));
      }
      if (GEOGetVectorKitFaultNotificationServiceLog(void)::onceToken[0] != -1)
        dispatch_once(GEOGetVectorKitFaultNotificationServiceLog(void)::onceToken, &__block_literal_global_10542);
      v32 = GEOGetVectorKitFaultNotificationServiceLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitFaultNotificationServiceLog(void)::log, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v41 = v26;
        _os_log_impl(&dword_19F029000, v32, OS_LOG_TYPE_INFO, "Dispatching notification in %f seconds", buf, 0xCu);
      }
      v38[0] = MEMORY[0x1E0C809B0];
      v38[1] = 3321888768;
      v38[2] = ___ZN2md31DefaultFaultNotificationService4postENS_21FaultNotificationTypeEPKc_block_invoke;
      v38[3] = &__block_descriptor_48_ea8_32c67_ZTSNSt3__18weak_ptrIN2md31DefaultFaultNotificationService5StateEEE_e5_v8__0l;
      v38[4] = v29;
      v39 = v28;
      if (v28)
      {
        v33 = (unint64_t *)&v28->__shared_weak_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      v35 = dispatch_block_create(DISPATCH_BLOCK_INHERIT_QOS_CLASS, v38);
      v36 = *(_QWORD *)(a1 + 8);
      v37 = *(void **)(v36 + 128);
      *(_QWORD *)(v36 + 128) = v35;

      dispatch_after(v27, *(dispatch_queue_t *)(a1 + 32), *(dispatch_block_t *)(*(_QWORD *)(a1 + 8) + 128));
      if (v39)
        std::__shared_weak_count::__release_weak(v39);
      if (v28)
        std::__shared_weak_count::__release_weak(v28);
    }
    std::mutex::unlock(v8);
  }
}

void sub_19F8D6D14(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void md::DefaultFaultNotificationService::~DefaultFaultNotificationService(md::DefaultFaultNotificationService *this)
{
  md::DefaultFaultNotificationService::~DefaultFaultNotificationService(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::mutex *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42A89B0;
  v3 = (char *)this + 8;
  v2 = (std::mutex *)*((_QWORD *)this + 1);
  std::mutex::lock(v2);
  v4 = *(void **)(*(_QWORD *)v3 + 128);
  if (v4)
    dispatch_block_cancel(v4);
  std::mutex::unlock(v2);

  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_19F8D6DF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void ___ZN2md31DefaultFaultNotificationService4postENS_21FaultNotificationTypeEPKc_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD v22[2];
  _QWORD v23[2];
  uint8_t buf[4];
  unint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v21 = std::__shared_weak_count::lock(v2);
    if (v21)
    {
      v3 = *(_QWORD *)(a1 + 32);
      if (v3)
      {
        std::mutex::lock((std::mutex *)v3);
        *(_BYTE *)(v3 + 64) = 0;
        *(CFTimeInterval *)(v3 + 120) = CACurrentMediaTime();
        v4 = *(_OWORD *)(v3 + 72);
        *(_OWORD *)(v3 + 72) = *(_OWORD *)(v3 + 96);
        *(_OWORD *)(v3 + 96) = v4;
        v5 = *(_QWORD *)(v3 + 88);
        *(_QWORD *)(v3 + 88) = *(_QWORD *)(v3 + 112);
        *(_QWORD *)(v3 + 112) = v5;
        v6 = *(void **)(v3 + 128);
        *(_QWORD *)(v3 + 128) = 0;

        std::mutex::unlock((std::mutex *)v3);
        if (GEOGetVectorKitFaultNotificationServiceLog(void)::onceToken[0] != -1)
          dispatch_once(GEOGetVectorKitFaultNotificationServiceLog(void)::onceToken, &__block_literal_global_10542);
        v7 = GEOGetVectorKitFaultNotificationServiceLog(void)::log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitFaultNotificationServiceLog(void)::log, OS_LOG_TYPE_INFO))
        {
          v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + 104) - *(_QWORD *)(v3 + 96)) >> 3);
          *(_DWORD *)buf = 134217984;
          v25 = v8;
          _os_log_impl(&dword_19F029000, v7, OS_LOG_TYPE_INFO, "Dispatching notification with %lu faults now", buf, 0xCu);
        }
        v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + 104) - *(_QWORD *)(v3 + 96)) >> 3));
        v10 = *(_QWORD *)(v3 + 96);
        v11 = *(_QWORD *)(v3 + 104);
        if (v10 != v11)
        {
          do
          {
            v12 = *(unsigned __int8 *)(v10 + 8);
            v13 = *(_QWORD *)(v10 + 16);
            v22[0] = CFSTR("type");
            v14 = "<Invalid>";
            if (v12 <= 2)
              v14 = off_1E42F00A8[v12];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v14);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v22[1] = CFSTR("details");
            v23[0] = v15;
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v13);
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            v23[1] = v16;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, v22, 2);
            v17 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v9, "addObject:", v17);
            v10 += 24;
          }
          while (v10 != v11);
          v10 = *(_QWORD *)(v3 + 96);
        }
        *(_QWORD *)(v3 + 104) = v10;
        objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "postNotificationName:object:userInfo:", CFSTR("VKFaultNotification"), v9, 0);

      }
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
}

void sub_19F8D70C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c67_ZTSNSt3__18weak_ptrIN2md31DefaultFaultNotificationService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_32c67_ZTSNSt3__18weak_ptrIN2md31DefaultFaultNotificationService5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZL42GEOGetVectorKitFaultNotificationServiceLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "FaultNotificationService");
  v1 = (void *)GEOGetVectorKitFaultNotificationServiceLog(void)::log;
  GEOGetVectorKitFaultNotificationServiceLog(void)::log = (uint64_t)v0;

}

void std::__shared_ptr_emplace<md::DefaultFaultNotificationService::State>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDB60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::DefaultFaultNotificationService::State>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDB60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::DefaultFaultNotificationService::State>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t md::GeoidModel::getUndulation(md::GeoidModel *this, double a2, double a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  float v7;
  float v8;
  float v9;
  float v10;
  unsigned int v11;
  unsigned int v12;
  float v13;
  float v14;
  int v15;
  signed int v16;
  _WORD *v17;
  int v18;
  float v19;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this == *((_QWORD *)this + 1))
    return 0;
  v4 = *((float *)this + 8);
  if (v4 >= a2)
    a2 = v4 + 1.0e-12;
  if (a2 <= v4)
    return 0;
  LODWORD(v4) = *((_DWORD *)this + 9);
  if (a2 > *(float *)&v4)
    return 0;
  v6 = floor(a3 * 0.00277777778);
  v5 = a3 + v6 * -360.0;
  LODWORD(v6) = *((_DWORD *)this + 10);
  if (v5 < *(float *)&v6 || v5 >= *((float *)this + 11))
    return 0;
  v7 = v5;
  v8 = (float)(v7 - *(float *)&v6) / *((float *)this + 13);
  v9 = a2;
  v10 = (float)(*(float *)&v4 - v9) / *((float *)this + 12);
  *(float *)&v4 = floorf(v8);
  v11 = vcvtms_s32_f32(v8);
  *(float *)&v6 = floorf(v10);
  v12 = vcvtms_s32_f32(v10);
  v13 = v8 - *(float *)&v4;
  v14 = v10 - *(float *)&v6;
  v15 = *((_DWORD *)this + 7);
  v16 = v11 + v15 * v12;
  v17 = (_WORD *)(v3 + 2 * v16);
  LOWORD(v4) = *v17;
  v18 = vmovl_s16(*(int16x4_t *)&v4).u32[0];
  LOWORD(v6) = v17[1];
  v19 = (float)v18 + (float)((float)((float)vmovl_s16(*(int16x4_t *)&v6).i32[0] - (float)v18) * v13);
  return COERCE_UNSIGNED_INT(*((float *)this + 14)+ (float)((float)(v19+ (float)((float)(truncf((float)*(__int16 *)(v3 + 2 * (v16 + v15))+ (float)(v13* (float)(*(__int16 *)(v3 + 2 * (v16 + v15) + 2)- *(__int16 *)(v3 + 2 * (v16 + v15)))))- v19)* v14))* *((float *)this + 15))) | 0x100000000;
}

_QWORD *std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E427B148;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E427B148;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = operator new(0x20uLL);
  v3 = a1[1];
  v4 = a1[2];
  *result = &off_1E427B148;
  result[1] = v3;
  v5 = a1[3];
  result[2] = v4;
  result[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

_QWORD *std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = result[1];
  *a2 = &off_1E427B148;
  a2[1] = v2;
  v3 = result[3];
  a2[2] = result[2];
  a2[3] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[2];
      if (v5)
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v5 + 56))(a1[2], a1[1]);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, a1[1]);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_1,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_1,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E427B190;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_1,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427B190;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_1,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled((os_log_t)GEOGetVectorKitPerformanceLog_log))
    {
      *(_WORD *)v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v2, "SubmitCommands", (const char *)&unk_1A0189141, v5, 2u);
    }
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16));
}

void _setupSinglePassRenderItem(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4, int a5, uint64_t a6, _DWORD *a7, int a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15, uint64_t a16)
{
  unsigned int v16;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  float v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  NSObject *v61;
  unint64_t *v62;
  unint64_t v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  NSObject *v73;
  float v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  int v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  uint8_t buf[16];
  uint8_t v84[8];
  std::__shared_weak_count *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  __n128 v89;
  unint64_t v90;
  unint64_t v91;
  __int16 v92;
  uint64_t v93;

  v89 = 0uLL;
  v28 = *(_QWORD *)(a4 + 8);
  v29.n128_u64[0] = 0;
  v29.n128_u64[1] = a4;
  if (v28)
    v30 = *(_QWORD *)(a4 + 72);
  else
    v30 = 0;
  v89 = v29;
  v90 = 0;
  v91 = v28;
  v93 = v30;
  v92 = 1;
  v29.n128_u32[0] = 1.0;
  if (a5 == 2)
    v29.n128_f32[0] = 0.5;
  if (a5 == 1)
    v31 = 0.0;
  else
    v31 = v29.n128_f32[0];
  v32 = *a2;
  v33 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)buf = *a2;
  *(_QWORD *)&buf[8] = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
    v85 = v33;
    do
      v36 = __ldxr(p_shared_owners);
    while (__stxr(v36 + 1, p_shared_owners));
  }
  else
  {
    v85 = 0;
  }
  v86 = 0;
  v87 = 0;
  *(_QWORD *)v84 = v32;
  v88 = 0;
  if (v32)
    LODWORD(v32) = (*(uint64_t (**)(uint64_t, uint64_t *, __n128))(*(_QWORD *)v32 + 48))(v32, &v86, v29);
  v88 = v32;
  if (v33)
  {
    v37 = (unint64_t *)&v33->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v33->__on_zero_shared)(v33, v29);
      std::__shared_weak_count::__release_weak(v33);
    }
    LODWORD(v32) = v88;
  }
  if ((_DWORD)v32)
  {
    gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)buf, *(_QWORD *)(*(_QWORD *)v84 + 24), 0x5Cu, 2u, fminf(fmaxf(*(float *)(a1 + 8), 0.0), 23.0));
    LOWORD(v16) = *(_WORD *)&buf[6];
    md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v84, 0, 0, *(float *)(a1 + 8));
    v39 = (float)v16 * 0.000015259;
    v40 = v93;
    v41 = *(_DWORD *)buf;
    v42 = *(_DWORD *)&buf[4];
    *(_DWORD *)(v93 + 80) = *(_DWORD *)buf;
    *(_DWORD *)(v40 + 84) = v42;
    v43 = *(_DWORD *)&buf[8];
    *(_DWORD *)(v40 + 88) = *(_DWORD *)&buf[8];
    *(float *)(v40 + 92) = v39;
    *(_DWORD *)(v40 + 160) = v41;
    *(_DWORD *)(v40 + 164) = v42;
    *(_DWORD *)(v40 + 168) = v43;
    *(float *)(v40 + 172) = v39;
    md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v84, 1, 0, *(float *)(a1 + 8));
    v44 = *(_DWORD *)buf;
    v45 = *(_DWORD *)&buf[4];
    *(_DWORD *)(v40 + 96) = *(_DWORD *)buf;
    *(_DWORD *)(v40 + 100) = v45;
    v46 = *(_DWORD *)&buf[8];
    *(_DWORD *)(v40 + 104) = *(_DWORD *)&buf[8];
    *(float *)(v40 + 108) = v39;
    *(_DWORD *)(v40 + 176) = v44;
    *(_DWORD *)(v40 + 180) = v45;
    *(_DWORD *)(v40 + 184) = v46;
    *(float *)(v40 + 188) = v39;
    md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v84, 2, 0, *(float *)(a1 + 8));
    v47 = *(_DWORD *)buf;
    v48 = *(_DWORD *)&buf[4];
    *(_DWORD *)(v40 + 112) = *(_DWORD *)buf;
    *(_DWORD *)(v40 + 116) = v48;
    v49 = *(_DWORD *)&buf[8];
    *(_DWORD *)(v40 + 120) = *(_DWORD *)&buf[8];
    *(float *)(v40 + 124) = v39;
    *(_DWORD *)(v40 + 192) = v47;
    *(_DWORD *)(v40 + 196) = v48;
    *(_DWORD *)(v40 + 200) = v49;
    *(float *)(v40 + 204) = v39;
    md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v84, 3, 0, *(float *)(a1 + 8));
    v50 = *(_DWORD *)buf;
    v51 = *(_DWORD *)&buf[4];
    *(_DWORD *)(v40 + 128) = *(_DWORD *)buf;
    *(_DWORD *)(v40 + 132) = v51;
    v52 = *(_DWORD *)&buf[8];
    *(_DWORD *)(v40 + 136) = *(_DWORD *)&buf[8];
    *(float *)(v40 + 140) = v39;
    *(_DWORD *)(v40 + 208) = v50;
    *(_DWORD *)(v40 + 212) = v51;
    *(_DWORD *)(v40 + 216) = v52;
    *(float *)(v40 + 220) = v39;
    md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v84, 4, 0, *(float *)(a1 + 8));
    v53 = *(_DWORD *)buf;
    v54 = *(_DWORD *)&buf[4];
    *(_DWORD *)(v40 + 144) = *(_DWORD *)buf;
    *(_DWORD *)(v40 + 148) = v54;
    v55 = *(_DWORD *)&buf[8];
    *(_DWORD *)(v40 + 152) = *(_DWORD *)&buf[8];
    *(float *)(v40 + 156) = v39;
    *(_DWORD *)(v40 + 224) = v53;
    *(_DWORD *)(v40 + 228) = v54;
    *(_DWORD *)(v40 + 232) = v55;
    *(float *)(v40 + 236) = v39;
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v84);
    v56 = *a3;
    v57 = (std::__shared_weak_count *)a3[1];
    *(_QWORD *)buf = v56;
    *(_QWORD *)&buf[8] = v57;
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
      v85 = v57;
      do
        v60 = __ldxr(v58);
      while (__stxr(v60 + 1, v58));
    }
    else
    {
      v85 = 0;
    }
    v86 = 0;
    v87 = 0;
    *(_QWORD *)v84 = v56;
    v88 = 0;
    if (v56)
      LODWORD(v56) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v56 + 48))(v56, &v86);
    v88 = v56;
    if (v57)
    {
      v62 = (unint64_t *)&v57->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
      LODWORD(v56) = v88;
    }
    if ((_DWORD)v56)
    {
      gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)buf, *(_QWORD *)(*(_QWORD *)v84 + 24), 0x5Cu, 2u, fminf(fmaxf(*(float *)(a1 + 8), 0.0), 23.0));
      LOWORD(v39) = *(_WORD *)&buf[6];
      md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v84, 0, 0, *(float *)(a1 + 8));
      v64 = (float)LODWORD(v39) * 0.000015259;
      v65 = v93;
      v66 = *(_QWORD *)buf;
      *(_DWORD *)(v93 + 168) = *(_DWORD *)&buf[8];
      *(_QWORD *)(v65 + 160) = v66;
      *(float *)(v65 + 172) = v64;
      md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v84, 1, 0, *(float *)(a1 + 8));
      v67 = *(_QWORD *)buf;
      *(_DWORD *)(v65 + 184) = *(_DWORD *)&buf[8];
      *(_QWORD *)(v65 + 176) = v67;
      *(float *)(v65 + 188) = v64;
      md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v84, 2, 0, *(float *)(a1 + 8));
      v68 = *(_QWORD *)buf;
      *(_DWORD *)(v65 + 200) = *(_DWORD *)&buf[8];
      *(_QWORD *)(v65 + 192) = v68;
      *(float *)(v65 + 204) = v64;
      md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v84, 3, 0, *(float *)(a1 + 8));
      v69 = *(_QWORD *)buf;
      *(_DWORD *)(v65 + 216) = *(_DWORD *)&buf[8];
      *(_QWORD *)(v65 + 208) = v69;
      *(float *)(v65 + 220) = v64;
      md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v84, 4, 0, *(float *)(a1 + 8));
      v70 = *(_QWORD *)buf;
      *(_DWORD *)(v65 + 232) = *(_DWORD *)&buf[8];
      *(_QWORD *)(v65 + 224) = v70;
      *(float *)(v65 + 236) = v64;
    }
    else if (*(_BYTE *)(a1 + 120) == 2 && !*(_BYTE *)(*(_QWORD *)(a16 + 8) + 317))
    {
      if (GEOGetVectorKitRouteLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
      v71 = (id)GEOGetVectorKitRouteLog_log;
      if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19F029000, v71, OS_LOG_TYPE_INFO, "RouteLine failed to setup travelledTrafficStyle style", buf, 2u);
      }

      md::RouteLineSection::dumpStyleAttributes(*(md::RouteLineSection **)(a16 + 2456));
      *(_BYTE *)(*(_QWORD *)(a16 + 8) + 317) = 1;
    }
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v84);
    v72 = v93;
    *(float *)v93 = a9;
    *(float *)(v72 + 4) = a10;
    *(float *)(v72 + 8) = v31;
    if (fabsf(*(float *)(a6 + 12)) <= 0.00000011921)
    {
      if (GEOGetVectorKitRouteLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
      v73 = (id)GEOGetVectorKitRouteLog_log;
      if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v84 = 0;
        _os_log_impl(&dword_19F029000, v73, OS_LOG_TYPE_INFO, "RouteLine trafficColor is 0", v84, 2u);
      }

    }
    *(_DWORD *)(v72 + 16) = *(_DWORD *)a6;
    *(_DWORD *)(v72 + 20) = *(_DWORD *)(a6 + 4);
    *(_DWORD *)(v72 + 24) = *(_DWORD *)(a6 + 8);
    *(_DWORD *)(v72 + 28) = *(_DWORD *)(a6 + 12);
    *(_DWORD *)(v72 + 32) = *a7;
    *(_DWORD *)(v72 + 36) = a7[1];
    *(_DWORD *)(v72 + 40) = a7[2];
    *(_DWORD *)(v72 + 44) = a7[3];
    *(float *)(v72 + 48) = a15;
    *(float *)(v72 + 52) = a11;
    *(float *)(v72 + 56) = a12;
    *(float *)(v72 + 60) = a13;
    *(float *)(v72 + 64) = a14;
    v74 = 0.0078431;
    if (!a8)
      v74 = 0.0;
    *(float *)(v72 + 68) = v74;
LABEL_64:
    v76 = v90;
    v75 = v91;
    if (v91 != v90)
    {
      v77 = (_QWORD *)v89.n128_u64[1];
      v78 = v92;
      v79 = HIBYTE(v92);
      if (v89.n128_u64[0] && *(_BYTE *)(v89.n128_u64[1] + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v89.n128_u64[0] + 64))();
      if (v78 && !v79)
      {
        v81 = v77[7];
        v80 = v77[8];
        if (v80 == v81)
          v81 = v77[10] - v77[9];
        if (v76 < v81)
          v81 = v76;
        if (v80 <= v75)
          v80 = v75;
        if (v80 == v81)
          v80 = v81 + v77[10] - v77[9];
        v77[7] = v81;
        v77[8] = v80;
      }
    }
    return;
  }
  if (GEOGetVectorKitRouteLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
  v61 = (id)GEOGetVectorKitRouteLog_log;
  if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19F029000, v61, OS_LOG_TYPE_INFO, "***RouteLine failed to setupSinglePassRenderItem", buf, 2u);
  }

  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v84);
  if (v93)
    goto LABEL_64;
}

void sub_19F8D7DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va1);
  _Unwind_Resume(a1);
}

void md::realistic::GlobeRenderLayer::~GlobeRenderLayer(md::realistic::GlobeRenderLayer *this)
{
  md::realistic::GlobeRenderLayer::~GlobeRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  altitude::FlyoverShared *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;

  *(_QWORD *)this = &off_1E42AFEF8;
  v2 = *((_QWORD *)this + 8);
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C4049ECCB0CLL);
  v3 = *((_QWORD *)this + 9);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 10);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 11);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 12);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (void *)*((_QWORD *)this + 31);
  if (v7)
  {
    *((_QWORD *)this + 32) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 28);
  if (v8)
  {
    *((_QWORD *)this + 29) = v8;
    operator delete(v8);
  }
  v9 = (altitude::FlyoverShared *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v9)
  {
    altitude::FlyoverShared::~FlyoverShared(v9);
    MEMORY[0x1A1AF4E00]();
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (!v10)
    goto LABEL_21;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
    if (!v13)
      goto LABEL_27;
  }
  else
  {
LABEL_21:
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
    if (!v13)
      goto LABEL_27;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_27:
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v16)
    goto LABEL_31;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v19)
      goto LABEL_37;
  }
  else
  {
LABEL_31:
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v19)
      goto LABEL_37;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_37:
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v22)
    goto LABEL_41;
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v25)
      goto LABEL_47;
  }
  else
  {
LABEL_41:
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v25)
      goto LABEL_47;
  }
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_47:
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  *(_QWORD *)this = off_1E428C468;
  v31 = (void *)*((_QWORD *)this + 1);
  if (v31)
  {
    *((_QWORD *)this + 2) = v31;
    operator delete(v31);
  }
}

unint64_t md::realistic::GlobeRenderLayer::layout(md::realistic::GlobeRenderLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  float64x2_t *v13;
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  float32x4_t *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  float *v28;
  double v29;
  float v30;
  float v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  id v40;
  float v41;
  float v42;
  float v43;
  double *v44;
  float v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  float v50;
  float v51;
  double *v52;
  double v53;
  double v54;
  double v55;
  double *v56;
  float v57;
  float v58;
  long double v59;
  double v60;
  double v61;
  __double2 v62;
  double v63;
  __double2 v64;
  float v65;
  float v66;
  double v67;
  float v68;
  float v69;
  double v70;
  double v71;
  float v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD **v76;
  _QWORD **v77;
  _QWORD *v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  uint64_t v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x2_t v125;
  float32x2_t v126;
  _QWORD *v127;
  unint64_t v128;
  float32x2_t *v129;
  uint64_t v130;
  float v131;
  int v132;
  unsigned int v133;
  int v134;
  unsigned int v136;
  uint64_t v137;
  double **v138;
  double **v139;
  double *v140;
  uint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  uint64_t v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double *v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  unint64_t v207;
  const md::LayoutContext *v208;
  int *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  double v214;
  uint64_t v215;
  float32x4_t *v216;
  float v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  double v224;
  md::realistic::GlobeRenderLayer *v225;
  unint64_t *v226;
  unint64_t v227;
  char v228;
  float v229;
  int v230;
  float v231;
  unint64_t *v232;
  unint64_t v233;
  float v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t **v237;
  uint64_t *v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void **v243;
  md::realistic::GlobeRenderLayer *v244;
  ggl::DebugConsole *v245;
  double v246;
  uint64_t v251;
  uint64_t **v252;
  uint64_t *v253;
  uint64_t *v254;
  uint64_t **v255;
  uint64_t **v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  unint64_t *v261;
  unint64_t v262;
  altitude::FlyoverNightRenderable **v263;
  altitude::FlyoverNightRenderable **v264;
  altitude::FlyoverNightRenderable *v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  dispatch_time_t v272;
  NSObject *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unsigned __int8 *v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unsigned __int8 *v296;
  unsigned __int8 *v297;
  _QWORD *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unsigned __int8 *v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unsigned __int8 *v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t *v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t result;
  ggl::RenderItem **v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  uint64_t v331;
  __int128 v332;
  std::__shared_weak_count_vtbl *v333;
  std::__shared_weak_count *v334;
  std::__shared_weak_count *v335;
  _QWORD *v336;
  unint64_t v337;
  unint64_t v338;
  std::__shared_weak_count *v339;
  uint64_t v340;
  unint64_t *v341;
  unint64_t v342;
  _QWORD *v343;
  _QWORD *v344;
  unint64_t *v345;
  unint64_t v346;
  unint64_t *v347;
  unint64_t v348;
  uint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  _QWORD *v353;
  _QWORD *v354;
  unint64_t *v355;
  unint64_t v356;
  _QWORD *v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  unint64_t *v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  _QWORD *v365;
  _QWORD *v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  _QWORD *v380;
  int v381;
  int v382;
  unint64_t v383;
  unint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  md::realistic::GlobeRenderLayer *v391;
  const md::LayoutContext *v392;
  uint64_t v393;
  uint64_t v394;
  float v395;
  double v396;
  double v397;
  double v398;
  double v399;
  double v400;
  double v401;
  double v402;
  double v403;
  double v404;
  double v405;
  ggl::DebugConsole *v406;
  ggl::DebugConsole *v407;
  __int128 v408;
  double v409;
  char v410;
  float v411;
  __int128 v412;
  _QWORD block[5];
  std::__shared_weak_count *v414;
  uint64_t v415;
  _QWORD *v416;
  std::__shared_weak_count *v417;
  double v418;
  double v419;
  double v420;
  uint64_t v421;
  double v422;
  double v423;
  double v424;
  uint64_t v425;
  double v426;
  double v427;
  double v428;
  uint64_t v429;
  double v430;
  double v431;
  double v432;
  uint64_t v433;
  uint64_t v434[16];
  double v435;
  double v436;
  double v437;
  uint64_t v438;
  double v439;
  double v440;
  double v441;
  uint64_t v442;
  double v443;
  double v444;
  double v445;
  uint64_t v446;
  __int128 v447;
  uint64_t v448;
  uint64_t v449;
  _BYTE v450[128];

  v4 = (_QWORD *)*((_QWORD *)this + 5);
  v5 = v4[3];
  v6 = v4[17];
  v394 = v4[18];
  v7 = *(unsigned int *)(v6 + 88);
  v8 = *(_QWORD *)(*((_QWORD *)a2 + 92) + 16);
  v9 = (_QWORD *)*((_QWORD *)a2 + 1);
  v10 = v9[1];
  v390 = v5;
  v388 = v6;
  if ((v10 & (v10 - 1)) != 0)
  {
    v12 = 0xE42D19AFCA302E68;
    if (v10 <= 0xE42D19AFCA302E68)
      v12 = 0xE42D19AFCA302E68 % v10;
    v11 = *(_QWORD **)(*v9 + 8 * v12);
    do
    {
      do
        v11 = (_QWORD *)*v11;
      while (v11[1] != 0xE42D19AFCA302E68);
    }
    while (v11[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    v11 = *(_QWORD **)(*v9 + 8 * ((v10 - 1) & 0xE42D19AFCA302E68));
    do
    {
      do
        v11 = (_QWORD *)*v11;
      while (v11[1] != 0xE42D19AFCA302E68);
    }
    while (v11[2] != 0xE42D19AFCA302E68);
  }
  v13 = (float64x2_t *)(v8 + 376);
  v14 = *(unsigned __int8 *)(*(_QWORD *)(v11[5] + 32) + 72);
  v15 = (_QWORD *)*((_QWORD *)this + 21);
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = v15[1];
  v20 = (float32x4_t *)v15[9];
  *v20 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v13), *(float64x2_t *)(v8 + 392));
  v20[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v8 + 408)), *(float64x2_t *)(v8 + 424));
  v20[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v8 + 440)), *(float64x2_t *)(v8 + 456));
  v20[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v8 + 472)), *(float64x2_t *)(v8 + 488));
  if (v15[8] > v19)
    v19 = v15[8];
  v15[7] = 0;
  v15[8] = v19;
  if (v16)
  {
    v21 = (unint64_t *)&v16->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v23 = (_QWORD *)*((_QWORD *)this + 25);
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = v23[1];
  v28 = (float *)v23[9];
  v29 = 0.0;
  if (v14 == 1)
    v29 = 1.0;
  v30 = v29 * 0.05;
  v31 = v29 * -0.5 + 1.0;
  *v28 = v30;
  v28[1] = v30;
  v28[2] = v31;
  if (v23[8] > v27)
    v27 = v23[8];
  v23[7] = 0;
  v23[8] = v27;
  if (v24)
  {
    v32 = (unint64_t *)&v24->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v392 = a2;
  v34 = **((_QWORD **)this + 27);
  v35 = *(uint64_t **)(v8 + 32);
  v36 = *v35;
  *(_QWORD *)&v450[8] = 0;
  *(_QWORD *)v450 = 0;
  v37 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)&v38 = 0;
  *((_QWORD *)&v38 + 1) = v34;
  if (v37)
    v39 = *(_QWORD *)(v34 + 72);
  else
    v39 = 0;
  v408 = v38;
  *(_OWORD *)v450 = v38;
  *(_QWORD *)&v450[16] = 0;
  *(_QWORD *)&v450[24] = v37;
  *(_QWORD *)&v450[40] = v39;
  *(_WORD *)&v450[32] = 1;
  *(float32x4_t *)v39 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v13), *(float64x2_t *)(v8 + 392));
  *(float32x4_t *)(v39 + 16) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v8 + 408)), *(float64x2_t *)(v8 + 424));
  *(float32x4_t *)(v39 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v8 + 440)), *(float64x2_t *)(v8 + 456));
  *(float32x4_t *)(v39 + 48) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v8 + 472)), *(float64x2_t *)(v8 + 488));
  v40 = objc_alloc_init(MEMORY[0x1E0D26ED0]);
  v435 = 0.0;
  v434[0] = 0;
  v418 = 0.0;
  objc_msgSend(v40, "calculateGeocentricDirectionForSunX:Y:Z:", &v435, v434, &v418);
  v41 = v435;
  v42 = *(double *)v434;
  v43 = v418;
  *(float *)(v39 + 96) = v41;
  *(float *)(v39 + 100) = v42;
  *(float *)(v39 + 104) = v43;

  if (*((_BYTE *)v35 + 48))
  {
    v44 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 40) + 24))(v8 + 40);
    v45 = fmin(fmax(fabs(sqrt(*v44 * *v44 + v44[1] * v44[1] + v44[2] * v44[2]) + -6378137.0) * 0.000000666666667 + -4.66666667, 0.0), 1.0);
  }
  else
  {
    v45 = 0.0;
  }
  *(float *)(v39 + 112) = v45;
  v46 = (_QWORD *)*((_QWORD *)v392 + 1);
  v47 = v46[1];
  if ((v47 & (v47 - 1)) != 0)
  {
    v49 = 0x1AF456233693CD46;
    if (v47 <= 0x1AF456233693CD46)
      v49 = 0x1AF456233693CD46 % v47;
    v48 = *(_QWORD **)(*v46 + 8 * v49);
    do
    {
      do
        v48 = (_QWORD *)*v48;
      while (v48[1] != 0x1AF456233693CD46);
    }
    while (v48[2] != 0x1AF456233693CD46);
  }
  else
  {
    v48 = *(_QWORD **)(*v46 + 8 * ((v47 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v48 = (_QWORD *)*v48;
      while (v48[1] != 0x1AF456233693CD46);
    }
    while (v48[2] != 0x1AF456233693CD46);
  }
  if (v14 != 1 || (v50 = 0.0, *(double *)(*(_QWORD *)(v48[5] + 32) + 32) >= 6378137.0))
    v50 = *(float *)(**(_QWORD **)(*(_QWORD *)(v36 + 856) + 40) + 68);
  v51 = v50 * 2.0 + -1.0;
  if (**((_BYTE **)v392 + 9))
    v51 = 0.0;
  *(float32x2_t *)(v39 + 64) = vmul_n_f32((float32x2_t)0x3F4CCCCD3F333333, v51);
  *(float *)(v39 + 72) = v51;
  v52 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 40) + 24))(v8 + 40);
  v53 = *v52;
  v54 = v52[1];
  v55 = v52[2];
  v56 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 40) + 24))(v8 + 40);
  v57 = sqrt(v53 * v53 + v54 * v54 + v55 * v55) + -6371008.77;
  v58 = fmaxf(v57, 0.0);
  v59 = v56[2];
  v60 = sqrt(*v56 * *v56 + v56[1] * v56[1]);
  v61 = atan2(v59, v60 * 0.996647189);
  v62 = __sincos_stret(v61);
  v63 = atan2(v59 + v62.__sinval * v62.__sinval * 42841.3115 * v62.__sinval, v60 + v62.__cosval * v62.__cosval * -42697.6727 * v62.__cosval);
  v64 = __sincos_stret(v63);
  v65 = v60 / v64.__cosval + -6378137.0 / sqrt(v64.__sinval * v64.__sinval * -0.00669437999 + 1.0);
  v66 = fmaxf(v65, 1.0);
  v67 = v66;
  v68 = sqrt((float)(v66 * v66) + v66 * 12742017.5);
  v69 = v68 - v58;
  v70 = fmax(v67, 0.0);
  if (v70 <= 8000.0)
    v71 = v70 * 0.000125;
  else
    v71 = 1.0;
  v72 = v69 + (v71 * v71 * (v71 * 2.0 + -3.0) + 1.0) * (float)(v69 * -0.5);
  *(float *)(v39 + 80) = v58;
  *(float *)(v39 + 84) = v72;
  if (v37)
  {
    if ((_QWORD)v408 && *(_BYTE *)(*((_QWORD *)&v408 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v408 + 64))();
    v73 = *(_QWORD *)(*((_QWORD *)&v408 + 1) + 64);
    if (v73 <= v37)
      v73 = v37;
    *(_QWORD *)(*((_QWORD *)&v408 + 1) + 56) = 0;
    *(_QWORD *)(*((_QWORD *)&v408 + 1) + 64) = v73;
  }
  v74 = *(_QWORD *)(*((_QWORD *)this + 5) + 128);
  v75 = *(_QWORD *)(v74 + 368);
  v391 = this;
  if (v75)
  {
    v76 = *(_QWORD ***)(v75 + 48);
    v77 = *(_QWORD ***)(v75 + 56);
    if (v76 != v77)
    {
      do
      {
        v78 = *v76++;
        v79 = *(double *)(v8 + 80);
        v80 = *(double *)(v8 + 88);
        v81 = *(double *)(v8 + 96);
        v83 = *(double *)(v8 + 64);
        v82 = *(double *)(v8 + 72);
        v85 = *(double *)(v8 + 48);
        v84 = *(double *)(v8 + 56);
        v86 = v78[24];
        v87 = -(v83 * v79 - v84 * v80) - (v83 * v79 - v84 * v80);
        v88 = -(v85 * v80 - v83 * v82) - (v85 * v80 - v83 * v82);
        v89 = -(v84 * v82 - v85 * v79) - (v84 * v82 - v85 * v79);
        v90 = -(-(v84 - v87 * v80) - v88 * v81);
        v91 = v83 + v87 * v79;
        v92 = v85 + v87 * v81 + v88 * v80;
        v93 = v91 + v89 * v81;
        v94 = -(v80 * (v80 * -2.0));
        v95 = v80 * -2.0 * v81;
        v96 = -(v80 * (v82 * -2.0));
        v97 = v81 * (v79 * -2.0);
        v98 = -(v80 * (v79 * -2.0));
        v99 = v81 * (v82 * -2.0);
        v100 = v82 * -2.0 * v82 + 1.0;
        v418 = 1.0 - (v94 - v79 * (v79 * -2.0));
        v419 = v95 - v79 * (v82 * -2.0);
        v422 = -(v79 * (v82 * -2.0)) - v95;
        v423 = v100 - v94;
        v426 = v97 + v96;
        v427 = v98 - v99;
        v420 = v96 - v97;
        v424 = v99 + v98;
        v428 = v100 - -(v79 * (v79 * -2.0));
        v421 = 0;
        v425 = 0;
        v429 = 0;
        v430 = -(v92 - v89 * v79);
        v431 = -(v90 + v89 * v82);
        v433 = 0x3FF0000000000000;
        v432 = -(v93 - v88 * v82);
        v101 = gm::operator*<double,4,4,4>((double *)v434, (double *)(v8 + 376), &v418);
        v102 = (*(uint64_t (**)(_QWORD *, double))(*v78 + 24))(v78, v101);
        memset(&v450[8], 0, 112);
        *(_QWORD *)&v450[120] = 0x3FF0000000000000;
        v103 = v78[30];
        *(_QWORD *)v450 = v78[29];
        *(_QWORD *)&v450[40] = v103;
        *(_QWORD *)&v450[80] = v78[31];
        v104 = *(double *)(v102 + 24);
        v105 = *(double *)(v102 + 32);
        v106 = *(double *)(v102 + 40);
        v107 = *(double *)(v102 + 48);
        v108 = v105 + v105;
        v109 = (v105 + v105) * v105;
        v110 = (v106 + v106) * v106;
        v111 = v104 + v104;
        v112 = (v104 + v104) * v105;
        v113 = (v106 + v106) * v107;
        v114 = v106 * (v104 + v104);
        v115 = v107 * v108;
        v116 = v107 * v108 + v114;
        v117 = 1.0 - (v104 + v104) * v104;
        v118 = v108 * v106;
        v119 = v107 * v111;
        v435 = 1.0 - (v109 + v110);
        v436 = v113 + v112;
        v439 = v112 - v113;
        v440 = v117 - v110;
        v443 = v116;
        v444 = v118 - v119;
        v437 = v114 - v115;
        v441 = v119 + v118;
        v445 = v117 - v109;
        v438 = 0;
        v442 = 0;
        v446 = 0;
        v447 = *(_OWORD *)v102;
        v448 = *(_QWORD *)(v102 + 16);
        v449 = 0x3FF0000000000000;
        gm::operator*<double,4,4,4>((double *)&v416, &v435, (double *)v450);
        gm::operator*<double,4,4,4>((double *)v450, (double *)v434, (double *)&v416);
        v120 = vcvt_f32_f64(*(float64x2_t *)&v450[16]);
        v121 = vcvt_f32_f64(*(float64x2_t *)&v450[32]);
        v122 = vcvt_f32_f64(*(float64x2_t *)&v450[48]);
        v123 = vcvt_f32_f64(*(float64x2_t *)&v450[64]);
        v124 = vcvt_f32_f64(*(float64x2_t *)&v450[80]);
        v125 = vcvt_f32_f64(*(float64x2_t *)&v450[96]);
        v126 = vcvt_f32_f64(*(float64x2_t *)&v450[112]);
        v127 = *(_QWORD **)(*(_QWORD *)(v86 + 64) + 16);
        v128 = v127[1];
        v129 = (float32x2_t *)v127[9];
        *v129 = vcvt_f32_f64(*(float64x2_t *)v450);
        v129[1] = v120;
        v129[2] = v121;
        v129[3] = v122;
        v129[4] = v123;
        v129[5] = v124;
        v129[6] = v125;
        v129[7] = v126;
        if (v127[8] > v128)
          v128 = v127[8];
        v127[7] = 0;
        v127[8] = v128;
      }
      while (v76 != v77);
      v74 = *(_QWORD *)(*((_QWORD *)this + 5) + 128);
    }
  }
  v389 = v14;
  v130 = *(_QWORD *)(v74 + 704);
  v131 = *(double *)(*(_QWORD *)(**(_QWORD **)(v130 + 32) + 72) + 32);
  v132 = 1;
  if (v131 > 8.0)
  {
    v133 = 0;
    v134 = 8;
    do
    {
      v132 = v134;
      v134 *= 8;
    }
    while ((float)v134 < v131 && v133++ < 0xE);
  }
  v136 = 1 << (25 - *(_BYTE *)(v130 + 128));
  if (25 - *(_DWORD *)(v130 + 128) < 1)
    v136 = 1;
  v137 = *(_QWORD *)(v130 + 104);
  v393 = *(_QWORD *)(v130 + 112);
  if (v137 != v393)
  {
    v395 = (float)((float)v136 * 4.0) / (float)v132;
    do
    {
      v139 = *(double ***)(*(_QWORD *)v137 + 48);
      v138 = *(double ***)(*(_QWORD *)v137 + 56);
      while (v139 != v138)
      {
        v140 = *v139;
        v141 = *(_QWORD *)(*((_QWORD *)*v139 + 24) + 64);
        v142 = *(_QWORD **)v141;
        v143 = *(_QWORD *)(*(_QWORD *)v141 + 8);
        if (v143)
          v144 = v142[9];
        else
          v144 = 0;
        v146 = *(double *)(v8 + 80);
        v145 = *(double *)(v8 + 88);
        v147 = *(double *)(v8 + 96);
        v148 = *(double *)(v8 + 72);
        v409 = *(double *)(v8 + 64);
        v150 = *(double *)(v8 + 48);
        v149 = *(double *)(v8 + 56);
        v396 = -(v409 * v146 - v149 * v145) - (v409 * v146 - v149 * v145);
        v397 = -(v150 * v145 - v409 * v148) - (v150 * v145 - v409 * v148);
        v398 = v150;
        v399 = -(v149 * v148 - v150 * v146) - (v149 * v148 - v150 * v146);
        v400 = v149;
        v151 = -(v146 * (v146 * -2.0));
        v152 = v145 * -2.0 * v147;
        v404 = -(v146 * (v148 * -2.0)) - v152;
        v405 = 1.0 - (v151 - v145 * (v145 * -2.0));
        v153 = v147 * (v146 * -2.0);
        v154 = v152 - v146 * (v148 * -2.0);
        v155 = v148 * -2.0 * v148 + 1.0;
        v156 = v155 - -(v145 * (v145 * -2.0));
        v157 = v147 * (v148 * -2.0);
        v401 = -(v145 * (v146 * -2.0)) - v157;
        v402 = v153 - v145 * (v148 * -2.0);
        v158 = -(v145 * (v148 * -2.0)) - v153;
        v159 = v157 - v145 * (v146 * -2.0);
        v403 = v155 - v151;
        v160 = (double *)(*(uint64_t (**)(double *))(*(_QWORD *)v140 + 24))(v140);
        v161 = v140[31];
        v162 = v160[4];
        v163 = v160[5];
        v164 = v160[6];
        v165 = v162 + v162;
        v166 = (v162 + v162) * v162;
        v167 = (v163 + v163) * v163;
        v168 = v166 + v167;
        v169 = v160[2];
        v170 = v160[3];
        v171 = v170 + v170;
        v172 = (v170 + v170) * v162;
        v173 = (v163 + v163) * v164;
        v174 = v172 - v173;
        v175 = v173 + v172;
        v176 = v163 * (v170 + v170);
        v177 = v165 * v163;
        v178 = v164 * v165;
        v179 = 1.0 - (v170 + v170) * v170;
        v180 = v164 * v171;
        v181 = v179 - v167;
        v182 = v179 - v166;
        v183 = (v178 + v176) * v161;
        v184 = (v177 - v180) * v161;
        v185 = v182 * v161;
        v186 = v140[29];
        v187 = v140[30];
        v188 = v160[1];
        v189 = v186 - v168 * v186;
        v190 = v174 * v187;
        v191 = v175 * v186;
        v192 = v181 * v187;
        v193 = v189 * v405 + v191 * v404;
        v194 = v190 * v405 + v192 * v404;
        v195 = v189 * v154 + v191 * v156;
        v196 = v185 * v401 + v183 * v154;
        v197 = *v160 * v154 - (v400 + v397 * v147 + v399 * v148 - v396 * v145);
        v198 = v190 * v154 + v192 * v156;
        v199 = v190 * v158 + v192 * v159;
        v200 = v180 + v177;
        v201 = (v176 - v178) * v186;
        v202 = v200 * v187;
        v203 = *v160 * v405 - (v398 + v396 * v147 + v397 * v145 - v399 * v146) + v188 * v404 + v169 * v402;
        v204 = v197 + v188 * v156 + v169 * v401;
        v205 = v189 * v158 + v191 * v159 + v201 * v403;
        v206 = *v160 * v158 - (v409 + v396 * v146 + v399 * v147 - v397 * v148) + v188 * v159 + v169 * v403;
        *(float *)&v191 = v193 + v201 * v402;
        *(float *)&v201 = v195 + v201 * v401;
        *(_DWORD *)v144 = LODWORD(v191);
        *(_DWORD *)(v144 + 4) = LODWORD(v201);
        *(float *)&v205 = v205;
        *(_DWORD *)(v144 + 8) = LODWORD(v205);
        *(float *)&v205 = v194 + v202 * v402;
        *(float *)&v191 = v198 + v202 * v401;
        *(_DWORD *)(v144 + 16) = LODWORD(v205);
        *(_DWORD *)(v144 + 20) = LODWORD(v191);
        *(float *)&v205 = v199 + v202 * v403;
        *(_DWORD *)(v144 + 24) = LODWORD(v205);
        *(float *)&v205 = v185 * v402 + v183 * v405 + v184 * v404;
        *(float *)&v191 = v196 + v184 * v156;
        *(_DWORD *)(v144 + 32) = LODWORD(v205);
        *(_DWORD *)(v144 + 36) = LODWORD(v191);
        *(float *)&v205 = v185 * v403 + v183 * v158 + v184 * v159;
        *(_DWORD *)(v144 + 40) = LODWORD(v205);
        *(float *)&v205 = v203;
        *(float *)&v185 = v204;
        *(_DWORD *)(v144 + 48) = LODWORD(v205);
        *(_DWORD *)(v144 + 52) = LODWORD(v185);
        *(float *)&v206 = v206;
        *(_DWORD *)(v144 + 56) = LODWORD(v206);
        *(_DWORD *)(v144 + 12) = 0;
        *(_DWORD *)(v144 + 28) = 0;
        *(_DWORD *)(v144 + 44) = 0;
        *(_DWORD *)(v144 + 60) = 1065353216;
        *(float *)(v144 + 64) = v395;
        *(float *)(v144 + 68) = v395;
        *(_QWORD *)(v144 + 72) = 0;
        if (v143)
        {
          v207 = v142[8];
          if (v207 <= v143)
            v207 = v143;
          v142[7] = 0;
          v142[8] = v207;
        }
        ++v139;
      }
      v137 += 32;
    }
    while (v137 != v393);
  }
  v208 = v392;
  if (*(_QWORD *)v392
    && (v209 = *(int **)(*((_QWORD *)v392 + 92) + 24),
        v210 = v209[12],
        v211 = v209[13],
        v212 = v209[10],
        v213 = v209[11],
        v214 = *(double *)(v388 + 32),
        (objc_opt_respondsToSelector() & 1) != 0))
  {
    v215 = objc_msgSend(*(id *)v392, "debugConsoleForId:", 1);
    if (v215)
    {
      v216 = (float32x4_t *)v215;
      v217 = (float)(unint64_t)(v210 - v212);
      v218 = *((_QWORD *)v392 + 4);
      v219 = (std::__shared_weak_count *)*((_QWORD *)v392 + 5);
      if (v219)
      {
        v220 = (unint64_t *)&v219->__shared_owners_;
        do
          v221 = __ldxr(v220);
        while (__stxr(v221 + 1, v220));
        v222 = *((_QWORD *)v392 + 4);
        v223 = (std::__shared_weak_count *)*((_QWORD *)v392 + 5);
        v224 = *(double *)(v218 + 64);
        v225 = v391;
        if (v223)
        {
          v226 = (unint64_t *)&v223->__shared_owners_;
          do
            v227 = __ldxr(v226);
          while (__stxr(v227 + 1, v226));
          v228 = 0;
        }
        else
        {
          v228 = 1;
        }
        v218 = v222;
      }
      else
      {
        v223 = 0;
        v224 = *(double *)(v218 + 64);
        v228 = 1;
        v225 = v391;
      }
      v229 = v224;
      v230 = *(unsigned __int8 *)(v218 + 72);
      *(_OWORD *)&v450[4] = 0uLL;
      *(float *)v450 = 2.0 / v217;
      *(float *)&v450[20] = -2.0 / (float)(unint64_t)(v211 - v213);
      v231 = v229 + -1.0;
      if (!v230)
        v231 = 1.0 - v229;
      *(_QWORD *)&v450[32] = 0;
      *(_QWORD *)&v450[24] = 0;
      *(float *)&v450[40] = v231 * 0.5;
      *(_DWORD *)&v450[44] = 0;
      *(float *)&v450[48] = (float)-v217 / v217;
      *(_DWORD *)&v450[52] = 1065353216;
      *(float *)&v450[56] = (float)(v229 * 0.5) + 0.5;
      *(_DWORD *)&v450[60] = 1065353216;
      ggl::DebugConsole::setProjection(v215, v450);
      if ((v228 & 1) == 0)
      {
        v232 = (unint64_t *)&v223->__shared_owners_;
        do
          v233 = __ldaxr(v232);
        while (__stlxr(v233 - 1, v232));
        if (!v233)
        {
          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
          std::__shared_weak_count::__release_weak(v223);
        }
      }
      v234 = v214;
      v208 = v392;
      if (v219)
      {
        v235 = (unint64_t *)&v219->__shared_owners_;
        do
          v236 = __ldaxr(v235);
        while (__stlxr(v236 - 1, v235));
        if (!v236)
        {
          v411 = v214;
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
          v234 = v411;
        }
      }
      v216[1] = vmulq_n_f32((float32x4_t)xmmword_19FFB49D0, v234);
      v216[6].i32[1] = -16777216;
      v406 = (ggl::DebugConsole *)v216;
      ggl::DebugConsole::begin((ggl::DebugConsole *)v216);
      v410 = 0;
    }
    else
    {
      v410 = 1;
      v406 = 0;
      v225 = v391;
    }
  }
  else
  {
    v406 = 0;
    v410 = 1;
    v225 = v391;
  }
  v237 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v225 + 7) + 56))(*((_QWORD *)v225 + 7));
  v238 = *v237;
  v239 = v237[1];
  if (*v237 != v239)
  {
    do
    {
      v241 = *v238;
      v240 = *(_QWORD *)(*v238 + 328);
      if (!v240)
      {
        v242 = operator new();
        *(_DWORD *)(v242 + 8) = 0;
        *(_QWORD *)(v242 + 40) = 0;
        *(_QWORD *)(v242 + 32) = 0;
        *(_QWORD *)(v242 + 16) = 0;
        *(_QWORD *)(v242 + 24) = v242 + 32;
        *(_OWORD *)(v242 + 48) = 0u;
        *(_OWORD *)(v242 + 64) = 0u;
        *(_OWORD *)(v242 + 80) = 0u;
        v243 = (void **)(v242 + 80);
        *(_QWORD *)v242 = &off_1E42C5580;
        *(_QWORD *)(v242 + 208) = 0;
        *(_QWORD *)(v242 + 216) = 0;
        *(_OWORD *)(v242 + 96) = 0u;
        *(_OWORD *)(v242 + 112) = 0u;
        *(_OWORD *)(v242 + 128) = 0u;
        *(_OWORD *)(v242 + 144) = 0u;
        *(_OWORD *)(v242 + 160) = 0u;
        *(_OWORD *)(v242 + 176) = 0u;
        *(_OWORD *)(v242 + 185) = 0u;
        *(_DWORD *)(v242 + 224) = -1;
        *(_QWORD *)(v242 + 232) = 0;
        *(_OWORD *)(v242 + 248) = 0u;
        *(_OWORD *)(v242 + 264) = 0u;
        *(_DWORD *)(v242 + 279) = 0;
        *(_QWORD *)(v242 + 288) = 0x3FF0000000000000;
        *(_DWORD *)(v242 + 296) = 0;
        *(_WORD *)(v242 + 300) = 0;
        altitude::Tile::createTileName(v450, (unsigned int *)(v241 + 392), (uint64_t *)(*(_QWORD *)(v241 + 288) + 40), (uint64_t *)(*(_QWORD *)(v241 + 288) + 136));
        if (*(char *)(v242 + 103) < 0)
          operator delete(*v243);
        *(_OWORD *)v243 = *(_OWORD *)v450;
        *(_QWORD *)(v242 + 96) = *(_QWORD *)&v450[16];
        *(_QWORD *)(v241 + 328) = v242;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v242 + 16))(v242, v241);
        v240 = *(_QWORD *)(v241 + 328);
        v208 = v392;
      }
      (*(void (**)(uint64_t, const md::LayoutContext *, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v240 + 80))(v240, v208, v8, *(_QWORD *)(*((_QWORD *)v208 + 92) + 24), v7, v394);
      ++v238;
    }
    while (v238 != v239);
  }
  if ((v410 & 1) == 0)
    ggl::DebugConsole::end((uint64_t)v406);
  v244 = v391;
  v245 = (ggl::DebugConsole *)*((_QWORD *)v391 + 31);
  v407 = (ggl::DebugConsole *)*((_QWORD *)v391 + 32);
  if (v245 != v407)
  {
    v246 = 0.0;
    __asm { FMOV            V0.2D, #1.0 }
    v412 = _Q0;
    do
    {
      v252 = *(uint64_t ***)(*(_QWORD *)v245 + 128);
      if (v252)
      {
        altitude::SceneGraph::updateTime(*(altitude::SceneGraph **)(*(_QWORD *)v245 + 128));
        v253 = *v252;
        v254 = v252[1];
        if (*v252 != v254)
        {
          v255 = v252 + 3;
          v256 = v252 + 10;
          do
          {
            v257 = *v253;
            v258 = *((std::__shared_weak_count **)v253 + 1);
            v435 = *(double *)v253;
            v436 = *(double *)&v258;
            if (*(double *)&v258 != 0.0)
            {
              v259 = (unint64_t *)&v258->__shared_owners_;
              do
                v260 = __ldxr(v259);
              while (__stxr(v260 + 1, v259));
            }
            *(_OWORD *)v450 = v412;
            *(_QWORD *)&v450[16] = 0x3FF0000000000000;
            (*(void (**)(uint64_t, uint64_t **, uint64_t **, _BYTE *, uint64_t))(*(_QWORD *)v257 + 16))(v257, v256, v255, v450, 1);
            if (*(double *)&v258 != 0.0)
            {
              v261 = (unint64_t *)&v258->__shared_owners_;
              do
                v262 = __ldaxr(v261);
              while (__stlxr(v262 - 1, v261));
              if (!v262)
              {
                ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                std::__shared_weak_count::__release_weak(v258);
              }
            }
            v253 += 2;
          }
          while (v253 != v254);
        }
        v251 = *(_QWORD *)v245;
        v263 = *(altitude::FlyoverNightRenderable ***)(*(_QWORD *)v245 + 48);
        v264 = *(altitude::FlyoverNightRenderable ***)(*(_QWORD *)v245 + 56);
        if (v263 != v264)
        {
          do
          {
            v265 = *v263;
            v266 = *((_DWORD *)*v263 + 40);
            switch(v266)
            {
              case 3:
                altitude::FlyoverBorderRenderable::setup((uint64_t)v265, (double *)v8, v7, 1.0);
                break;
              case 2:
                altitude::FlyoverNightRenderable::setup(v265, (altitude::View *)v8, v7, 1.0);
                break;
              case 1:
                altitude::FlyoverRenderable::setup(v265, (altitude::View *)v8, v7, 1.0);
                break;
            }
            ++v263;
          }
          while (v263 != v264);
          v251 = *(_QWORD *)v245;
        }
        v246 = fmax(v246, *(double *)(*(_QWORD *)(v251 + 128) + 104));
      }
      v245 = (ggl::DebugConsole *)((char *)v245 + 8);
    }
    while (v245 != v407);
    v244 = v391;
    if (v246 > 0.0)
    {
      v267 = *(_QWORD *)(v8 + 32);
      v268 = *(_QWORD *)(*(_QWORD *)v267 + 552);
      v269 = *(std::__shared_weak_count **)(*(_QWORD *)v267 + 560);
      if (v269)
      {
        v270 = (unint64_t *)&v269->__shared_owners_;
        do
          v271 = __ldxr(v270);
        while (__stxr(v271 + 1, v270));
      }
      v272 = dispatch_time(0, (uint64_t)(1000000000.0 / v246));
      v273 = **(id **)(*((_QWORD *)v391 + 5) + 8);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3321888768;
      block[2] = ___ZN2md9realistic16GlobeRenderLayer6layoutERKNS_13LayoutContextE_block_invoke;
      block[3] = &__block_descriptor_56_ea8_32c27_ZTSNSt3__110shared_ptrIbEE_e5_v8__0l;
      block[4] = v268;
      v414 = v269;
      if (v269)
      {
        v274 = (unint64_t *)&v269->__shared_owners_;
        do
          v275 = __ldxr(v274);
        while (__stxr(v275 + 1, v274));
      }
      v415 = v267;
      dispatch_after(v272, v273, block);

      v276 = v414;
      if (v414)
      {
        v277 = (unint64_t *)&v414->__shared_owners_;
        do
          v278 = __ldaxr(v277);
        while (__stlxr(v278 - 1, v277));
        if (!v278)
        {
          ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
          std::__shared_weak_count::__release_weak(v276);
        }
      }
      v244 = v391;
      if (v269)
      {
        v279 = (unint64_t *)&v269->__shared_owners_;
        do
          v280 = __ldaxr(v279);
        while (__stlxr(v280 - 1, v279));
        if (!v280)
        {
          ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
          std::__shared_weak_count::__release_weak(v269);
        }
      }
    }
  }
  v281 = *(_QWORD **)(v390 + 8);
  v282 = v281[3];
  v283 = v281[4];
  v284 = v283 - v282;
  if (v283 == v282)
    goto LABEL_179;
  v285 = 0;
  v286 = v284 >> 3;
  while (1)
  {
    v287 = *(unsigned __int8 **)(v282 + 8 * v285);
    if (*v287 == *((unsigned __int8 *)v244 + 272))
    {
      v288 = *((_QWORD *)v287 + 1);
      v289 = v281[15];
      if (v288 < (v281[16] - v289) >> 3)
        break;
    }
    if (++v285 >= v286)
      goto LABEL_179;
  }
  v290 = *(_QWORD *)(v289 + 8 * v288);
  if (!v290)
LABEL_179:
    v291 = 0;
  else
    v291 = *(_QWORD *)(*(_QWORD *)(v290 + 24) + 8 * *((unsigned __int8 *)v244 + 273));
  v292 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v244 + 7) + 56))(*((_QWORD *)v244 + 7));
  v293 = *v292;
  v294 = v292[1];
  while (v293 != v294)
  {
    v295 = *(_QWORD *)(*(_QWORD *)v293 + 328);
    if (v295)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v295 + 88))(v295, v8, v390, v7, 2, *(_QWORD *)(*((_QWORD *)v244 + 5) + 120));
    v293 += 8;
  }
  v296 = (unsigned __int8 *)*((_QWORD *)v244 + 28);
  v297 = (unsigned __int8 *)*((_QWORD *)v244 + 29);
  while (v296 != v297)
  {
    v298 = *(_QWORD **)(v390 + 8);
    v300 = v298[3];
    v299 = v298[4];
    if (v299 == v300)
      goto LABEL_195;
    v301 = 0;
    while (1)
    {
      v302 = *(_QWORD *)(v300 + 8 * v301);
      if (!*(_BYTE *)v302)
      {
        v303 = *(_QWORD *)(v302 + 8);
        v304 = v298[15];
        if (v303 < (v298[16] - v304) >> 3)
          break;
      }
      if (++v301 >= (unint64_t)((v299 - v300) >> 3))
        goto LABEL_195;
    }
    v305 = *(_QWORD *)(v304 + 8 * v303);
    if (!v305)
LABEL_195:
      v306 = 0;
    else
      v306 = *(_QWORD *)(*(_QWORD *)(v305 + 24) + 8 * v296[8]);
    if (*(_BYTE *)(*(_QWORD *)v296 + 180))
      ggl::CommandBuffer::pushRenderItem(v306, *(ggl::RenderItem **)(*(_QWORD *)v296 + 184));
    v296 += 16;
  }
  v307 = *(_QWORD **)(v390 + 8);
  v308 = v307[3];
  v309 = v307[4];
  v310 = 0;
  if (v309 != v308)
  {
    while (1)
    {
      v311 = *(unsigned __int8 **)(v308 + 8 * v310);
      if (*v311 == *((unsigned __int8 *)v244 + 274))
      {
        v312 = *((_QWORD *)v311 + 1);
        v313 = v307[15];
        if (v312 < (v307[16] - v313) >> 3)
          break;
      }
      if (++v310 >= (unint64_t)((v309 - v308) >> 3))
      {
        v310 = 0;
        v314 = v309 - v308;
        if (v309 == v308)
          goto LABEL_214;
        goto LABEL_208;
      }
    }
    v310 = *(_QWORD *)(v313 + 8 * v312);
    if (v310)
      v310 = *(_QWORD *)(*(_QWORD *)(v310 + 24) + 8 * *((unsigned __int8 *)v244 + 275));
    v314 = v309 - v308;
    if (v309 == v308)
      goto LABEL_214;
LABEL_208:
    v315 = 0;
    v316 = v314 >> 3;
    while (1)
    {
      v317 = *(unsigned __int8 **)(v308 + 8 * v315);
      if (*v317 == *((unsigned __int8 *)v244 + 276))
      {
        v318 = *((_QWORD *)v317 + 1);
        v319 = v307[15];
        if (v318 < (v307[16] - v319) >> 3)
          break;
      }
      if (++v315 >= v316)
        goto LABEL_214;
    }
    v320 = *(_QWORD *)(v319 + 8 * v318);
    if (v320)
    {
      v321 = *(_QWORD *)(*(_QWORD *)(v320 + 24) + 8 * *((unsigned __int8 *)v244 + 277));
      goto LABEL_215;
    }
  }
LABEL_214:
  v321 = 0;
LABEL_215:
  if (*(_QWORD *)(v291 + 72) == *(_QWORD *)(v291 + 80))
    v322 = 0;
  else
    v322 = *((_QWORD *)v244 + 8);
  *(_QWORD *)(v310 + 32) = v322;
  v323 = *(_QWORD *)(v321 + 72);
  v324 = *(uint64_t **)(v321 + 80);
  v325 = 126 - 2 * __clz((uint64_t)((uint64_t)v324 - v323) >> 3);
  if (v324 == (uint64_t *)v323)
    v326 = 0;
  else
    v326 = v325;
  result = std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v323, v324, v326, 1);
  if (v389 == 1)
  {
    v328 = (ggl::RenderItem **)*((_QWORD *)v244 + 6);
    if (!v328)
    {
      *(double *)&v329 = COERCE_DOUBLE(operator new(0xF8uLL));
      v329->__shared_owners_ = 0;
      v330 = (unint64_t *)&v329->__shared_owners_;
      v329->__shared_weak_owners_ = 0;
      v329->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF840;
      ggl::BufferData::BufferData((uint64_t)&v329[1], 8, 0, 0, 6, 4);
      v329[9].__shared_weak_owners_ = (uint64_t)"/night/vdata";
      v329[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos2Reflection;
      v329[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B74E0;
      v329[9].__shared_owners_ = (uint64_t)&unk_1E42B7500;
      *(_QWORD *)&v418 = &v329[1];
      v419 = *(double *)&v329;
      memset(v450, 0, 24);
      v331 = 4 * v329[1].__shared_owners_;
      *(_QWORD *)&v332 = 0;
      *((_QWORD *)&v332 + 1) = v329 + 1;
      v333 = v329[4].__vftable;
      *(_OWORD *)v450 = v332;
      *(_QWORD *)&v450[24] = v331;
      *(_QWORD *)&v450[40] = v333;
      *(_WORD *)&v450[32] = 1;
      *(_OWORD *)&v333->~__shared_weak_count = xmmword_19FFB33E0;
      *(_OWORD *)&v333->__on_zero_shared = xmmword_19FFB4AB0;
      v334 = (std::__shared_weak_count *)operator new(0xA8uLL);
      v335 = v334;
      v334->__shared_owners_ = 0;
      v334->__shared_weak_owners_ = 0;
      v334->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE5A8;
      v336 = &v334[1].__vftable;
      *(_QWORD *)&v435 = &v329[1];
      v436 = *(double *)&v329;
      do
        v337 = __ldxr(v330);
      while (__stxr(v337 + 1, v330));
      v434[0] = 0;
      v434[1] = 0;
      ggl::CommonMesh::Pos2Mesh::Pos2Mesh((uint64_t)&v334[1], (uint64_t)"/night/mesh", (uint64_t *)&v435, v434);
      do
        v338 = __ldaxr(v330);
      while (__stlxr(v338 - 1, v330));
      if (!v338)
      {
        ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
        std::__shared_weak_count::__release_weak(v329);
      }
      v416 = v336;
      v417 = v335;
      v340 = *((uint64_t *)v391 + 19);
      v339 = *((std::__shared_weak_count **)v391 + 20);
      if (*(double *)&v339 != 0.0)
      {
        v341 = (unint64_t *)&v339->__shared_owners_;
        do
          v342 = __ldxr(v341);
        while (__stxr(v342 + 1, v341));
      }
      v435 = *(double *)&v340;
      v436 = *(double *)&v339;
      v343 = (_QWORD *)operator new();
      v344 = v343;
      if (*(double *)&v339 == 0.0)
      {
        ggl::PipelineSetup::PipelineSetup(v343, v340, 0);
      }
      else
      {
        v345 = (unint64_t *)&v339->__shared_owners_;
        do
          v346 = __ldxr(v345);
        while (__stxr(v346 + 1, v345));
        ggl::PipelineSetup::PipelineSetup(v343, v340, (uint64_t)v339);
        v347 = (unint64_t *)&v339->__shared_owners_;
        do
          v348 = __ldaxr(v347);
        while (__stlxr(v348 - 1, v347));
        if (!v348)
        {
          ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
          std::__shared_weak_count::__release_weak(v339);
        }
      }
      *v344 = &off_1E42B7128;
      v349 = *((_QWORD *)v391 + 25);
      v350 = (std::__shared_weak_count *)*((_QWORD *)v391 + 26);
      if (v350)
      {
        v351 = (unint64_t *)&v350->__shared_owners_;
        do
          v352 = __ldxr(v351);
        while (__stxr(v352 + 1, v351));
        v353 = (_QWORD *)v344[8];
        *v353 = v349;
        v353[1] = 0;
        v354 = (_QWORD *)v344[20];
        v355 = (unint64_t *)&v350->__shared_owners_;
        do
          v356 = __ldxr(v355);
        while (__stxr(v356 + 1, v355));
      }
      else
      {
        v357 = (_QWORD *)v344[8];
        *v357 = v349;
        v357[1] = 0;
        v354 = (_QWORD *)v344[20];
      }
      v358 = (std::__shared_weak_count *)v354[1];
      *v354 = v349;
      v354[1] = v350;
      if (v358)
      {
        v359 = (unint64_t *)&v358->__shared_owners_;
        do
          v360 = __ldaxr(v359);
        while (__stlxr(v360 - 1, v359));
        if (!v360)
        {
          ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
          std::__shared_weak_count::__release_weak(v358);
        }
      }
      if (v350)
      {
        v361 = (unint64_t *)&v350->__shared_owners_;
        do
          v362 = __ldaxr(v361);
        while (__stlxr(v362 - 1, v361));
        if (!v362)
        {
          ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
          std::__shared_weak_count::__release_weak(v350);
        }
      }
      v363 = operator new();
      v364 = *((_QWORD *)v391 + 12);
      v365 = v416;
      *(_QWORD *)v363 = &off_1E42B59B0;
      *(_QWORD *)(v363 + 16) = "";
      *(_QWORD *)(v363 + 24) = v364;
      *(_QWORD *)(v363 + 32) = v344;
      *(_DWORD *)(v363 + 40) = 0;
      *(_QWORD *)(v363 + 48) = 0;
      *(_DWORD *)(v363 + 56) = 1065353216;
      *(_QWORD *)(v363 + 64) = v365;
      *(int64x2_t *)(v363 + 96) = vdupq_n_s64(1uLL);
      *(_QWORD *)(v363 + 112) = 0;
      *(_OWORD *)(v363 + 72) = xmmword_19FFB4C80;
      *(_QWORD *)(v363 + 88) = 0;
      *(_QWORD *)(v363 + 96) = 1;
      v366 = (_QWORD *)operator new();
      v367 = v417;
      if (v417)
      {
        v368 = (unint64_t *)&v417->__shared_owners_;
        do
          v369 = __ldxr(v368);
        while (__stxr(v369 + 1, v368));
        *v366 = v363;
        v366[1] = v344;
        v366[2] = v365;
        v366[3] = v367;
        do
          v370 = __ldxr(v368);
        while (__stxr(v370 + 1, v368));
        *((_QWORD *)v391 + 6) = v366;
        do
          v371 = __ldaxr(v368);
        while (__stlxr(v371 - 1, v368));
        if (!v371)
        {
          ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
          std::__shared_weak_count::__release_weak(v367);
        }
      }
      else
      {
        *v366 = v363;
        v366[1] = v344;
        v366[2] = v365;
        v366[3] = 0;
        *((_QWORD *)v391 + 6) = v366;
      }
      v372 = *(std::__shared_weak_count **)&v436;
      if (v436 != 0.0)
      {
        v373 = (unint64_t *)(*(_QWORD *)&v436 + 8);
        do
          v374 = __ldaxr(v373);
        while (__stlxr(v374 - 1, v373));
        if (!v374)
        {
          ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
          std::__shared_weak_count::__release_weak(v372);
        }
      }
      v375 = v417;
      if (v417)
      {
        v376 = (unint64_t *)&v417->__shared_owners_;
        do
          v377 = __ldaxr(v376);
        while (__stlxr(v377 - 1, v376));
        if (!v377)
        {
          ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
          std::__shared_weak_count::__release_weak(v375);
        }
      }
      if (*(_QWORD *)&v450[40])
      {
        v378 = *(_QWORD *)&v450[16];
        v379 = *(_QWORD *)&v450[24];
        if (*(_QWORD *)&v450[24] != *(_QWORD *)&v450[16])
        {
          v380 = *(_QWORD **)&v450[8];
          v381 = v450[32];
          v382 = v450[33];
          if (*(_QWORD *)v450 && *(_BYTE *)(*(_QWORD *)&v450[8] + 17) != 2)
            (*(void (**)(void))(**(_QWORD **)v450 + 64))();
          if (v381 && !v382)
          {
            v384 = v380[7];
            v383 = v380[8];
            if (v383 == v384)
              v384 = v380[10] - v380[9];
            if (v378 < v384)
              v384 = v378;
            if (v383 <= v379)
              v383 = v379;
            if (v383 == v384)
              v383 = v384 + v380[10] - v380[9];
            v380[7] = v384;
            v380[8] = v383;
          }
        }
      }
      v385 = *(std::__shared_weak_count **)&v419;
      if (v419 != 0.0)
      {
        v386 = (unint64_t *)(*(_QWORD *)&v419 + 8);
        do
          v387 = __ldaxr(v386);
        while (__stlxr(v387 - 1, v386));
        if (!v387)
        {
          ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
          std::__shared_weak_count::__release_weak(v385);
        }
      }
      v328 = (ggl::RenderItem **)*((_QWORD *)v391 + 6);
    }
    return ggl::CommandBuffer::pushRenderItem(v321, *v328);
  }
  return result;
}

void sub_19F8D9978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;
  uint64_t v56;

  (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x270]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&STACK[0x2F0]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void sub_19F8D99DC(_Unwind_Exception *a1)
{
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_19F8D9A08(_Unwind_Exception *a1)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x270]);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2md9realistic16GlobeRenderLayer6layoutERKNS_13LayoutContextE_block_invoke(uint64_t result)
{
  if (!**(_BYTE **)(result + 32))
  {
    result = *(_QWORD *)(*(_QWORD *)(result + 48) + 160);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  }
  return result;
}

uint64_t __copy_helper_block_ea8_32c27_ZTSNSt3__110shared_ptrIbEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_32c27_ZTSNSt3__110shared_ptrIbEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void altitude::FlyoverShared::~FlyoverShared(altitude::FlyoverShared *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;

  v2 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v10)
    goto LABEL_19;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v13)
      goto LABEL_25;
  }
  else
  {
LABEL_19:
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v13)
      goto LABEL_25;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_25:
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (!v16)
    goto LABEL_29;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (!v19)
      goto LABEL_35;
  }
  else
  {
LABEL_29:
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (!v19)
      goto LABEL_35;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_35:
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v22)
    goto LABEL_39;
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v25)
      goto LABEL_45;
  }
  else
  {
LABEL_39:
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v25)
      goto LABEL_45;
  }
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_45:
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (!v28)
    goto LABEL_49;
  v29 = (unint64_t *)&v28->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v31)
      goto LABEL_55;
  }
  else
  {
LABEL_49:
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v31)
      goto LABEL_55;
  }
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_55:
  v34 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (!v34)
    goto LABEL_59;
  v35 = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v37 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v37)
      goto LABEL_65;
  }
  else
  {
LABEL_59:
    v37 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v37)
      goto LABEL_65;
  }
  v38 = (unint64_t *)&v37->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
LABEL_65:
  v40 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v40)
    goto LABEL_69;
  v41 = (unint64_t *)&v40->__shared_owners_;
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    v43 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v43)
      goto LABEL_75;
  }
  else
  {
LABEL_69:
    v43 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v43)
      goto LABEL_75;
  }
  v44 = (unint64_t *)&v43->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
LABEL_75:
  v46 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void std::__shared_ptr_emplace<ggl::FlyoverNightDim::QuadPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF5D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverNightDim::QuadPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF5D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverNightDim::QuadPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::SolidLine::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::SolidLine::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5378;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::SolidLine::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::EndOfWorld::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE618;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::EndOfWorld::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE618;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::EndOfWorld::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::TileBaseSurface::P3T2T2PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::TileBaseSurface::P3T2T2PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF798;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::TileBaseSurface::P3T2T2PipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverNightDim::Color>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverNightDim::Color>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverNightDim::Color>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverNightDim::Color>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1788;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverNightDim::Color>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::TileBaseSurface::Shared>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::TileBaseSurface::Shared>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TileBaseSurface::Shared>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TileBaseSurface::Shared>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1948;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TileBaseSurface::Shared>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::realistic::GlobeRenderLayer::registerNoCullingRenderable(_QWORD *a1, uint64_t a2, char a3)
{
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;

  v7 = (_BYTE *)a1[29];
  v6 = a1[30];
  if ((unint64_t)v7 >= v6)
  {
    v9 = (_BYTE *)a1[28];
    v10 = (v7 - v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      abort();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = (char *)operator new(16 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[16 * v10];
    *(_QWORD *)v15 = a2;
    v15[8] = a3;
    v8 = v15 + 16;
    if (v7 != v9)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
        v15 -= 16;
        v7 -= 16;
      }
      while (v7 != v9);
      v7 = (_BYTE *)a1[28];
    }
    a1[28] = v15;
    a1[29] = v8;
    a1[30] = &v14[16 * v13];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v7 = a2;
    v7[8] = a3;
    v8 = v7 + 16;
  }
  a1[29] = v8;
}

void md::realistic::GlobeRenderLayer::unregisterAnimatedGroup(md::realistic::GlobeRenderLayer *this, altitude::RenderableGroup *a2)
{
  altitude::RenderableGroup **v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  altitude::RenderableGroup **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  altitude::RenderableGroup **v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  altitude::RenderableGroup **v23;

  v3 = (altitude::RenderableGroup **)*((_QWORD *)this + 31);
  v4 = *((_QWORD *)this + 32) - (_QWORD)v3;
  v5 = v4 >> 3;
  v6 = (v4 >> 3);
  if ((v4 & 0x7FFFFFFF8) == 0)
    goto LABEL_21;
  v7 = 0;
  while (v3[v7] != a2)
  {
    if (v6 == ++v7)
      goto LABEL_21;
  }
  v6 = (v5 - 1);
  v3[v7] = v3[v6];
  v3 = (altitude::RenderableGroup **)*((_QWORD *)this + 31);
  v8 = (altitude::RenderableGroup **)*((_QWORD *)this + 32);
  v5 = v8 - v3;
  v9 = v6 - v5;
  if (v6 <= v5)
  {
LABEL_21:
    if (v5 <= v6)
      return;
    v23 = &v3[v6];
    goto LABEL_23;
  }
  v10 = *((_QWORD *)this + 33);
  if (v9 <= (v10 - (uint64_t)v8) >> 3)
  {
    bzero(*((void **)this + 32), 8 * v9);
    v23 = &v8[v9];
LABEL_23:
    *((_QWORD *)this + 32) = v23;
    return;
  }
  v11 = v10 - (_QWORD)v3;
  if (v11 >> 2 > v6)
    v6 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (v6 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v12 = 8 * v6;
  v13 = operator new(8 * v6);
  v14 = &v13[8 * v5];
  bzero(v14, 8 * v9);
  v15 = &v14[8 * v9];
  if (v8 == v3)
  {
    v3 = v8;
  }
  else
  {
    v16 = (char *)v8 - (char *)v3 - 8;
    if (v16 < 0x58)
      goto LABEL_32;
    if ((unint64_t)((char *)v3 - v13) < 0x20)
      goto LABEL_32;
    v17 = (v16 >> 3) + 1;
    v18 = &v13[8 * v5 - 16];
    v19 = v8 - 2;
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *(_OWORD *)v19;
      *(v18 - 1) = *((_OWORD *)v19 - 1);
      *v18 = v21;
      v18 -= 2;
      v19 -= 4;
      v20 -= 4;
    }
    while (v20);
    v14 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v8 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_32:
      do
      {
        v22 = (uint64_t)*--v8;
        *((_QWORD *)v14 - 1) = v22;
        v14 -= 8;
      }
      while (v8 != v3);
      v3 = (altitude::RenderableGroup **)*((_QWORD *)this + 31);
    }
  }
  *((_QWORD *)this + 31) = v14;
  *((_QWORD *)this + 32) = v15;
  *((_QWORD *)this + 33) = &v13[v12];
  if (v3)
    operator delete(v3);
}

void md::Ribbons::RibbonSection<md::FlyoverTrafficDrawables>::computeMesh(_QWORD *a1, float64x2_t *a2, uint64_t a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  float64_t v7;
  float64_t v8;
  float64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _WORD *v26;
  float32x2_t *v27;
  int v28;
  float64_t v29;
  float64_t v30;
  float64_t v31;
  float64_t v32;
  double v33;
  double v34;
  int v35;
  float v36;
  float32_t v37;
  float32x2_t v38;
  float32_t v39;
  float32_t v40;
  float32_t v41;
  float32_t v42;
  float32_t v43;
  float32_t v44;
  float32_t v45;
  float32_t v46;
  float32_t v47;
  float32_t v48;
  float32_t v49;
  float v50;
  __int32 v51;
  __int32 v52;
  __int32 v53;
  __int32 v54;
  float v55;
  float32_t v56;
  float32x2_t v57;
  float32_t v58;
  float32_t v59;
  float32_t v60;
  float32_t v61;
  float32_t v62;
  float32_t v63;
  float32_t v64;
  float32_t v65;
  float32_t v66;
  float32_t v67;
  float32_t v68;
  float v69;
  __int32 v70;
  __int32 v71;
  __int32 v72;
  __int32 v73;
  float32_t v74;
  float32_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  double v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  double v100;
  double v101;
  float64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  double v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float64x2_t v139;
  double v140;
  double v141;
  double v142;
  double v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float64x2_t v156;
  double v157;
  double v158;
  double v159;
  double v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  int v167;
  double v168;
  double v169;
  double v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  double v174;
  double v175;
  double v176;

  v13 = **(_QWORD **)(a1[26] + 64);
  v14 = *(_QWORD *)(v13 + 8);
  v15 = v14 * *a1;
  v83 = v14 * a1[1];
  if (v83 == v15)
  {
    v87 = 0;
  }
  else if (a3 && *(_BYTE *)(v13 + 17) != 2)
  {
    v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v13, v15);
  }
  else
  {
    v87 = *(_QWORD *)(v13 + 72) + v15;
  }
  v16 = a1[2];
  v18 = a1[4];
  v17 = a1[5];
  if (v17 == v18)
  {
    v17 = a1[3];
  }
  else
  {
    if (v18 < v16)
      v16 = a1[4];
    if (a1[3] > v17)
      v17 = a1[3];
  }
  v19 = *(_QWORD *)(a1[26] + 96);
  v20 = *(_QWORD *)(v19 + 8);
  v85 = a3;
  v84 = v15;
  v81 = v20 * v16;
  v82 = v19;
  v80 = v20 * v17;
  if (v20 * v17 == v20 * v16)
  {
    v86 = 0;
  }
  else if (a3 && *(_BYTE *)(v19 + 17) != 2)
  {
    v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3);
  }
  else
  {
    v86 = *(_QWORD *)(v19 + 72) + v20 * v16;
  }
  v21 = (uint64_t *)a1[22];
  v88 = (uint64_t *)a1[23];
  if (v21 != v88)
  {
    v90 = v87;
    v91 = v86 + 2 * a1[2] - 2 * v16;
    while (1)
    {
      v89 = v21;
      v22 = *v21;
      v149 = 0uLL;
      v166 = 0uLL;
      v132 = 0uLL;
      v129 = 0uLL;
      v23 = *(_QWORD *)(v22 + 48);
      v126 = v23 - 1;
      if (v23 != 1)
        break;
LABEL_21:
      v21 = v89 + 1;
      v90 += (*(_QWORD *)(*v89 + 8) - *(_QWORD *)*v89) << 7;
      v91 += 2 * (*(_QWORD *)(*v89 + 24) - *(_QWORD *)(*v89 + 16));
      if (v89 + 1 == v88)
        goto LABEL_55;
    }
    v24 = 0;
    v25 = 0;
    v125 = v23 - 2;
    v26 = (_WORD *)(v91 + 6);
    v27 = (float32x2_t *)(v90 + 256);
    while (1)
    {
      v28 = v25 == 0;
      if (v125 == v25)
        v28 |= 2u;
      v167 = v28;
      md::Ribbons::PolylineSegment::calculate((uint64_t)&v133, v22, v25);
      if (v25)
      {
        v29 = v156.f64[0];
        v31 = v139.f64[1];
        v30 = v139.f64[0];
        if (vabdd_f64(v139.f64[0], v156.f64[0]) >= 1.0e-10)
        {
          v33 = v140;
          v32 = v156.f64[1];
          v34 = v157;
        }
        else
        {
          v32 = v156.f64[1];
          v33 = v140;
          v34 = v157;
          if (vabdd_f64(v139.f64[1], v156.f64[1]) < 1.0e-10 && vabdd_f64(v140, v157) < 1.0e-10)
          {
            v148 = v131;
            v149 = v132;
            v147 = v130;
            v165 = v128;
            v166 = v129;
            v164 = v127;
            v133 = v124;
            v134 = v123;
            v135 = v122;
            v136 = v121;
            v137 = v120;
            v138 = v119;
            v139.f64[0] = v8;
            v139.f64[1] = v7;
            v140 = v3;
            v141 = v4;
            v142 = v5;
            v143 = v6;
            v144 = v118;
            v145 = v117;
            v146 = v116;
            v150 = v115;
            v151 = v114;
            v152 = v113;
            v153 = v112;
            v154 = v111;
            v155 = v110;
            v156.f64[0] = v9;
            v156.f64[1] = v102;
            v157 = v100;
            v158 = v109;
            v159 = v108;
            v160 = v107;
            v161 = v106;
            v162 = v105;
            v163 = v104;
            v167 = v103;
            v168 = v101;
            v169 = v99;
            v170 = v98;
            v171 = v97;
            v172 = v96;
            v173 = v94;
            v174 = v93;
            v175 = v92;
            v29 = v9;
            v31 = v7;
            v30 = v8;
            v176 = v95;
            goto LABEL_36;
          }
        }
        v123 = v134;
        v124 = v133;
        v121 = v136;
        v122 = v135;
        v119 = v138;
        v120 = v137;
        v4 = v141;
        v5 = v142;
        v6 = v143;
        v117 = v145;
        v118 = v144;
        v116 = v146;
        v130 = v147;
        v131 = v148;
        v132 = v149;
        v115 = v150;
        v114 = v151;
        v113 = v152;
        v112 = v153;
        v111 = v154;
        v110 = v155;
        v109 = v158;
        v108 = v159;
        v107 = v160;
        v106 = v161;
        v105 = v162;
        v104 = v163;
        v129 = v166;
        v127 = v164;
        v128 = v165;
        v103 = v167;
        v100 = v34;
        v101 = v168;
        v99 = v169;
        v98 = v170;
        v97 = v171;
        v102 = v32;
        v3 = v33;
      }
      else
      {
        v123 = v134;
        v124 = v133;
        v121 = v136;
        v122 = v135;
        v119 = v138;
        v120 = v137;
        v31 = v139.f64[1];
        v30 = v139.f64[0];
        v3 = v140;
        v4 = v141;
        v5 = v142;
        v6 = v143;
        v117 = v145;
        v118 = v144;
        v131 = v148;
        v132 = v149;
        v130 = v147;
        v115 = v150;
        v116 = v146;
        v113 = v152;
        v114 = v151;
        v111 = v154;
        v112 = v153;
        v102 = v156.f64[1];
        v29 = v156.f64[0];
        v100 = v157;
        v109 = v158;
        v110 = v155;
        v107 = v160;
        v108 = v159;
        v105 = v162;
        v106 = v161;
        v104 = v163;
        v128 = v165;
        v129 = v166;
        v127 = v164;
        v103 = v167;
        v101 = v168;
        v98 = v170;
        v99 = v169;
        v97 = v171;
      }
      v93 = v174;
      v94 = v173;
      v92 = v175;
      v95 = v176;
      v96 = v172;
LABEL_36:
      v35 = v24 + *(_DWORD *)v22;
      *(v26 - 3) = v35;
      *(v26 - 2) = v35 + 1;
      *(v26 - 1) = v35 + 2;
      *v26 = v35 + 1;
      v26[1] = v35 + 3;
      v26[2] = v35 + 2;
      if ((*(_DWORD *)(v22 + 80) - 1) >= 2)
        v36 = 0.0;
      else
        v36 = 1.0;
      v37 = v3 - a2[14].f64[0];
      v38 = vcvt_f32_f64(vsubq_f64(v139, a2[13]));
      v27[-32] = v38;
      v27[-31].f32[0] = v37;
      v39 = v4;
      v40 = v5;
      v41 = v6;
      v27[-30].f32[0] = v39;
      v27[-30].f32[1] = v40;
      v27[-29].f32[0] = v41;
      v42 = *(double *)&v149;
      v43 = *(double *)&v166;
      v27[-24].i32[0] = -1082130432;
      v27[-24].f32[1] = v42;
      v27[-23].f32[0] = v42;
      v27[-23].f32[1] = v43;
      v44 = v168;
      v45 = v169;
      v46 = v170;
      v27[-26].f32[0] = v44;
      v27[-26].f32[1] = v45;
      v27[-25].f32[0] = v46;
      v47 = v174;
      v48 = v175;
      v49 = v176;
      v27[-28].f32[0] = v47;
      v27[-28].f32[1] = v48;
      v27[-27].f32[0] = v49;
      v50 = (float)*(int *)(v22 + 76);
      v27[-20] = 0;
      v27[-19].f32[0] = v50;
      v27[-19].f32[1] = v36;
      v51 = *(_DWORD *)(v22 + 124);
      v52 = *(_DWORD *)(v22 + 132);
      v27[-22].i32[0] = 0;
      v27[-22].i32[1] = v51;
      v27[-21].i32[0] = v52;
      v27[-18] = 0;
      v27[-16] = v38;
      v27[-15].f32[0] = v37;
      v27[-14].f32[0] = v39;
      v27[-14].f32[1] = v40;
      v27[-13].f32[0] = v41;
      v27[-8].i32[0] = 1065353216;
      v27[-8].f32[1] = v42;
      v27[-7].f32[0] = v42;
      v27[-7].f32[1] = v43;
      v27[-10].f32[0] = v44;
      v27[-10].f32[1] = v45;
      v27[-9].f32[0] = v46;
      v27[-12].f32[0] = v47;
      v27[-12].f32[1] = v48;
      v27[-11].f32[0] = v49;
      v27[-4] = 0;
      v27[-3].f32[0] = v50;
      v27[-3].f32[1] = v36;
      v53 = *(_DWORD *)(v22 + 124);
      v54 = *(_DWORD *)(v22 + 132);
      v27[-6].i32[0] = 0;
      v27[-6].i32[1] = v53;
      v27[-5].i32[0] = v54;
      v27[-2] = 0;
      if ((*(_DWORD *)(v22 + 80) - 1) >= 2)
        v55 = 0.0;
      else
        v55 = 1.0;
      v56 = v157 - a2[14].f64[0];
      v57 = vcvt_f32_f64(vsubq_f64(v156, a2[13]));
      *v27 = v57;
      v27[1].f32[0] = v56;
      v58 = v158;
      v59 = v159;
      v60 = v160;
      v27[2].f32[0] = v58;
      v27[2].f32[1] = v59;
      v27[3].f32[0] = v60;
      v61 = *(double *)&v166;
      v62 = *(double *)&v149;
      v27[8].i32[0] = -1082130432;
      v27[8].f32[1] = v61;
      v27[9].f32[0] = v62;
      v27[9].f32[1] = v61;
      v63 = v168;
      v64 = v169;
      v65 = v170;
      v27[6].f32[0] = v63;
      v27[6].f32[1] = v64;
      v27[7].f32[0] = v65;
      v66 = v174;
      v67 = v175;
      v68 = v176;
      v27[4].f32[0] = v66;
      v27[4].f32[1] = v67;
      v27[5].f32[0] = v68;
      v69 = (float)*(int *)(v22 + 76);
      v27[12] = 0;
      v27[13].f32[0] = v69;
      v27[13].f32[1] = v55;
      v70 = *(_DWORD *)(v22 + 124);
      v71 = *(_DWORD *)(v22 + 132);
      v27[10].i32[0] = 0;
      v27[10].i32[1] = v70;
      v27[11].i32[0] = v71;
      v27[14] = 0;
      v27[16] = v57;
      v27[17].f32[0] = v56;
      v27[18].f32[0] = v58;
      v27[18].f32[1] = v59;
      v27[19].f32[0] = v60;
      v27[24].i32[0] = 1065353216;
      v27[24].f32[1] = v61;
      v27[25].f32[0] = v62;
      v27[25].f32[1] = v61;
      v27[22].f32[0] = v63;
      v27[22].f32[1] = v64;
      v27[23].f32[0] = v65;
      v27[20].f32[0] = v66;
      v27[20].f32[1] = v67;
      v27[21].f32[0] = v68;
      v27[28] = 0;
      v27[29].f32[0] = v69;
      v27[29].f32[1] = v55;
      v72 = *(_DWORD *)(v22 + 124);
      v73 = *(_DWORD *)(v22 + 132);
      v27[26].i32[0] = 0;
      v27[26].i32[1] = v72;
      v27[27].i32[0] = v73;
      v27[30] = 0;
      v74 = *((double *)&v148 + 1);
      v27[-20].f32[0] = -v74;
      v27[-4].f32[0] = v74;
      v75 = *((double *)&v165 + 1);
      v27[12].f32[0] = -v75;
      v27[28].f32[0] = v75;
      v76 = *(_DWORD *)(v22 + 120);
      if ((v76 & 1) != 0 || (v77 = *(_QWORD *)(v22 + 112)) != 0 && !*(_BYTE *)(v77 + 84))
      {
        v27[-18].i32[0] = -1056964608;
        v27[-2].i32[0] = -1056964608;
        if ((v76 & 2) == 0)
        {
LABEL_48:
          v78 = *(_QWORD *)(v22 + 104);
          if (!v78 || *(_BYTE *)(v78 + 84))
            goto LABEL_51;
        }
      }
      else if ((v76 & 2) == 0)
      {
        goto LABEL_48;
      }
      v27[14].i32[1] = 1090519040;
      v27[30].i32[1] = 1090519040;
LABEL_51:
      v79 = v167;
      if ((v167 & 1) != 0)
      {
        v27[-20].i32[0] = -1082130432;
        v27[-4].i32[0] = -1082130432;
      }
      if ((v79 & 2) != 0)
      {
        v27[12].i32[0] = 1065353216;
        v27[28].i32[0] = 1065353216;
      }
      ++v25;
      v26 += 6;
      v27 += 64;
      v24 += 4;
      v8 = v30;
      v7 = v31;
      v9 = v29;
      if (v126 == v25)
        goto LABEL_21;
    }
  }
LABEL_55:
  if (v86 && v85 && v80 != v81 && *(_BYTE *)(v82 + 17) != 2)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v85 + 64))(v85, v86, v82, v81, v80, 1, 1);
  if (v87 && v85 && v83 != v84 && *(_BYTE *)(v13 + 17) != 2)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v85 + 64))(v85, v87, v13, v84, v83, 1, 1);
}

void altitude::RouteTrafficDrawRegion::point(double **this, int a2, int a3, double a4)
{
  double v5;
  uint64_t v6;
  float64x2_t *v7;
  float64x2_t *v8;
  float64x2_t v9;
  double v10;
  unint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;

  v5 = (a4 - *(double *)(*((_QWORD *)*this + 7) + 48 * a3 + 8))
     / (*(double *)(*((_QWORD *)*this + 7) + 48 * a2 + 8) - *(double *)(*((_QWORD *)*this + 7) + 48 * a3 + 8));
  v6 = *((_QWORD *)*this + 10);
  v7 = (float64x2_t *)(v6 + 24 * a3);
  v8 = (float64x2_t *)(v6 + 24 * a2);
  v9 = vmlaq_n_f64(*v7, vsubq_f64(*v8, *v7), v5);
  v10 = v7[1].f64[0] + (v8[1].f64[0] - v7[1].f64[0]) * v5;
  v12 = this[3];
  v11 = (unint64_t)this[4];
  if ((unint64_t)v12 >= v11)
  {
    v14 = this[2];
    v15 = 0xAAAAAAAAAAAAAAABLL * (v12 - v14) + 1;
    if (v15 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v14) >> 3);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x555555555555555)
      v17 = 0xAAAAAAAAAAAAAAALL;
    else
      v17 = v15;
    if (v17)
    {
      v21 = v9;
      if (v17 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v18 = (char *)operator new(24 * v17);
      v9 = v21;
    }
    else
    {
      v18 = 0;
    }
    v19 = (float64x2_t *)&v18[8 * (v12 - v14)];
    *v19 = v9;
    v19[1].f64[0] = v10;
    v13 = &v19[1].f64[1];
    if (v12 != v14)
    {
      do
      {
        v20 = *(float64x2_t *)(v12 - 3);
        v19[-1].f64[1] = *(v12 - 1);
        *(float64x2_t *)((char *)v19 - 24) = v20;
        v19 = (float64x2_t *)((char *)v19 - 24);
        v12 -= 3;
      }
      while (v12 != v14);
      v12 = this[2];
    }
    this[2] = (double *)v19;
    this[3] = v13;
    this[4] = (double *)&v18[24 * v17];
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(float64x2_t *)v12 = v9;
    v12[2] = v10;
    v13 = v12 + 3;
  }
  this[3] = v13;
}

_QWORD *std::vector<std::unique_ptr<md::FlyoverTraffic,mdm::TypeDeleter<md::FlyoverTraffic>>,geo::StdAllocator<std::unique_ptr<md::FlyoverTraffic,mdm::TypeDeleter<md::FlyoverTraffic>>,mdm::Allocator>>::__push_back_slow_path<std::unique_ptr<md::FlyoverTraffic,mdm::TypeDeleter<md::FlyoverTraffic>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  BOOL v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v5 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  if (v5 >> 2 > v3)
    v3 = v5 >> 2;
  v19 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8;
  v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v19)
    v6 = v3;
  if (v6)
  {
    v8 = 8 * v6;
    v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * v6, 8);
    v10 = (_QWORD *)(v9 + 8 * v2);
    v6 = v9 + v8;
    if (v9)
    {
      v11 = *a2;
      *a2 = 0;
      *v10 = v11;
    }
  }
  else
  {
    v10 = (_QWORD *)(8 * v2);
  }
  v12 = v10 + 1;
  v13 = *(char **)a1;
  v14 = *(char **)(a1 + 8);
  if (v14 == *(char **)a1)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_32;
  }
  v15 = (unint64_t)&v14[-*(_QWORD *)a1 - 8];
  if (v15 <= 0x57
    || ((v16 = (v13 - v14 + 7) & 0xFFFFFFFFFFFFFFF8,
         v17 = (unint64_t)&v14[v16],
         v18 = (char *)v10 + v16,
         v17 < (unint64_t)v10)
      ? (v19 = v18 >= v14)
      : (v19 = 1),
        !v19))
  {
    v21 = *(char **)(a1 + 8);
    do
    {
LABEL_22:
      v27 = *((_QWORD *)v21 - 1);
      v21 -= 8;
      *(_QWORD *)v21 = 0;
      *--v10 = v27;
    }
    while (v21 != v13);
    goto LABEL_23;
  }
  v20 = (v15 >> 3) + 1;
  v21 = &v14[-8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
  v22 = v10 - 2;
  v23 = v14 - 32;
  v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v26 = *(_OWORD *)v23;
    v25 = *((_OWORD *)v23 + 1);
    *(_OWORD *)v23 = 0uLL;
    *((_OWORD *)v23 + 1) = 0uLL;
    v23 -= 32;
    *(v22 - 1) = v26;
    *v22 = v25;
    v22 -= 2;
    v24 -= 4;
  }
  while (v24);
  v10 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_22;
LABEL_23:
  v14 = *(char **)a1;
  v28 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  v29 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  while (v28 != v14)
  {
    v30 = *((_QWORD *)v28 - 1);
    v28 -= 8;
    *(_QWORD *)v28 = 0;
    if (v30)
    {
      {
        v32 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v32, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc);
    }
  }
LABEL_32:
  if (v14)
    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v14, v29 - (_QWORD)v14);
  return v12;
}

_QWORD *md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(_QWORD *result, _QWORD *a2, _QWORD *a3, unsigned int a4, __n128 a5)
{
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  void (***v20)(void);
  void (**v21)(void);
  uint64_t v22;
  _BOOL4 v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char **v28;
  char **v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char **v45;
  char **v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v65;
  int v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _QWORD v73[3];
  _QWORD *v74;
  _BYTE v75[24];
  _BYTE *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  if (result != a2)
  {
    v5 = a4;
    v6 = a3;
    v7 = a2;
    for (i = result; i != v7; ++i)
    {
      v10 = *i;
      v11 = (_QWORD *)v6[3];
      if (v11)
      {
        if (v11 == v6)
        {
          v74 = v73;
          (*(void (**)(_QWORD *, _QWORD *))(*v6 + 24))(v6, v73);
          if (!*(_BYTE *)(v10 + 272))
            goto LABEL_70;
        }
        else
        {
          v74 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v11 + 16))(v11);
          if (!*(_BYTE *)(v10 + 272))
            goto LABEL_70;
        }
      }
      else
      {
        v74 = 0;
        if (!*(_BYTE *)(v10 + 272))
          goto LABEL_70;
      }
      v13 = *(_QWORD *)(v10 + 168);
      v12 = *(_QWORD *)(v10 + 176);
      if (v12 != v13)
      {
        v14 = *(_QWORD *)(v10 + 176);
        do
        {
          v16 = *(void **)(v14 - 24);
          v14 -= 24;
          v15 = v16;
          if (v16)
          {
            *(_QWORD *)(v12 - 16) = v15;
            operator delete(v15);
          }
          v12 = v14;
        }
        while (v14 != v13);
      }
      *(_QWORD *)(v10 + 176) = v13;
      *(_QWORD *)(v10 + 152) = *(_QWORD *)(v10 + 144);
      v17 = *(_QWORD **)(v10 + 224);
      if (v17)
      {
        do
        {
          if (v17[1])
          {
            v19 = 0;
            v20 = (void (***)(void))(v17 + 2);
            do
            {
              v21 = *v20;
              v20 += 15;
              (*v21)();
              ++v19;
            }
            while (v19 < v17[1]);
          }
          v17[1] = 0;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
        v18 = *(_QWORD *)(v10 + 224);
      }
      else
      {
        v18 = 0;
      }
      *(_QWORD *)(v10 + 232) = v18;
      if (v74)
      {
        if (v74 == v73)
        {
          v76 = v75;
          (*(void (**)(_QWORD *, _BYTE *))(v73[0] + 24))(v73, v75);
          if (*(_BYTE *)(v10 + 272))
          {
LABEL_33:
            v65 = i;
            if (*(_BYTE *)(v10 + 136))
            {
              v22 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 56);
              *(_QWORD *)(v10 + 40) = v22;
              v23 = *(unsigned __int8 *)(v22 + 58) == 1;
            }
            else
            {
              v23 = 0;
            }
            v24 = *(uint64_t **)(v10 + 248);
            v25 = *(uint64_t **)(v10 + 256);
            if (v24 != v25)
            {
              v26 = 0;
              while (1)
              {
                v27 = *v24;
                if (*(_BYTE *)(*v24 + 48))
                {
                  if (*(_QWORD *)(v27 + 208) != v26)
                  {
                    if (v26)
                    {
                      v28 = ggl::Batcher::commit((__int128 **)(v10 + 144), v5, a5);
                      if (v28[1] != *v28)
                      {
                        if (*(_BYTE *)(v10 + 136))
                        {
                          v29 = v28;
                          v31 = *(_QWORD *)(v10 + 24);
                          v30 = *(_QWORD *)(v10 + 32);
                          v32 = *(_OWORD *)(v10 + 88);
                          v69 = *(_OWORD *)(v10 + 72);
                          v70 = v32;
                          v33 = *(_OWORD *)(v10 + 120);
                          v71 = *(_OWORD *)(v10 + 104);
                          v72 = v33;
                          v34 = *(_OWORD *)(v10 + 56);
                          v67 = *(_OWORD *)(v10 + 40);
                          v68 = v34;
                          v35 = *(_QWORD **)(v10 + 232);
                          v36 = v35[1];
                          if (v36 == *(_QWORD *)(v10 + 240))
                          {
                            v35 = (_QWORD *)*v35;
                            if (!v35)
                            {
                              v35 = malloc_type_malloc(120 * v36 + 16, 0xB644C221uLL);
                              *v35 = 0;
                              v35[1] = 0;
                              **(_QWORD **)(v10 + 232) = v35;
                            }
                            *(_QWORD *)(v10 + 232) = v35;
                            v36 = v35[1];
                          }
                          v37 = &v35[15 * v36];
                          v35[1] = v36 + 1;
                          v37[2] = &off_1E42B59B0;
                          v37[3] = v31;
                          v37 += 2;
                          v37[2] = v30;
                          v38 = v71;
                          v39 = v72;
                          v40 = v70;
                          *(_OWORD *)(v37 + 7) = v69;
                          v41 = v67;
                          *(_OWORD *)(v37 + 5) = v68;
                          *(_OWORD *)(v37 + 3) = v41;
                          *(_OWORD *)(v37 + 13) = v39;
                          *(_OWORD *)(v37 + 11) = v38;
                          *(_OWORD *)(v37 + 9) = v40;
                          v37[8] = v26;
                          v42 = *v29;
                          v37[11] = *v29;
                          v37[12] = (v29[1] - v42) >> 4;
                          v66 = 0;
                          *(_QWORD *)&v67 = v37;
                          if (!v76)
                            goto LABEL_74;
                          (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v76 + 48))(v76, &v66, &v67);
                          v5 = a4;
                        }
                      }
                    }
                    v27 = *v24;
                    v26 = *(_QWORD *)(*v24 + 208);
                  }
                  v43 = 32;
                  if (v23)
                  {
                    v44 = v27 + 32;
                  }
                  else
                  {
                    v43 = 16;
                    v44 = v27 + 16;
                  }
                  if (*(_QWORD *)(v44 + 8) != *(_QWORD *)(v27 + v43))
                    gm::MultiRange<unsigned long>::push_back((char **)(v10 + 144), (_OWORD *)v44);
                }
                if (++v24 == v25)
                  goto LABEL_57;
              }
            }
            v26 = 0;
LABEL_57:
            v45 = ggl::Batcher::commit((__int128 **)(v10 + 144), v5, a5);
            v7 = a2;
            v6 = a3;
            i = v65;
            if (v45[1] != *v45 && *(_BYTE *)(v10 + 136))
            {
              v46 = v45;
              v47 = *(_QWORD *)(v10 + 24);
              v48 = *(_QWORD *)(v10 + 32);
              v49 = *(_OWORD *)(v10 + 88);
              v69 = *(_OWORD *)(v10 + 72);
              v70 = v49;
              v50 = *(_OWORD *)(v10 + 120);
              v71 = *(_OWORD *)(v10 + 104);
              v72 = v50;
              v51 = *(_OWORD *)(v10 + 56);
              v67 = *(_OWORD *)(v10 + 40);
              v68 = v51;
              v52 = *(_QWORD **)(v10 + 232);
              v53 = v52[1];
              if (v53 == *(_QWORD *)(v10 + 240))
              {
                v52 = (_QWORD *)*v52;
                if (!v52)
                {
                  v52 = malloc_type_malloc(120 * v53 + 16, 0xB644C221uLL);
                  *v52 = 0;
                  v52[1] = 0;
                  **(_QWORD **)(v10 + 232) = v52;
                }
                *(_QWORD *)(v10 + 232) = v52;
                v53 = v52[1];
              }
              v54 = &v52[15 * v53];
              v52[1] = v53 + 1;
              v54[2] = &off_1E42B59B0;
              v54[3] = v47;
              v54 += 2;
              v54[2] = v48;
              v55 = v71;
              v56 = v72;
              v57 = v70;
              *(_OWORD *)(v54 + 7) = v69;
              v58 = v67;
              *(_OWORD *)(v54 + 5) = v68;
              *(_OWORD *)(v54 + 3) = v58;
              *(_OWORD *)(v54 + 13) = v56;
              *(_OWORD *)(v54 + 11) = v55;
              *(_OWORD *)(v54 + 9) = v57;
              v54[8] = v26;
              v59 = *v46;
              v54[11] = *v46;
              v54[12] = (v46[1] - v59) >> 4;
              v66 = 0;
              *(_QWORD *)&v67 = v54;
              if (!v76)
LABEL_74:
                std::__throw_bad_function_call[abi:nn180100]();
              (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v76 + 48))(v76, &v66, &v67);
            }
          }
        }
        else
        {
          v76 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v74 + 16))(v74);
          if (*(_BYTE *)(v10 + 272))
            goto LABEL_33;
        }
      }
      else
      {
        v76 = 0;
        if (*(_BYTE *)(v10 + 272))
          goto LABEL_33;
      }
      v60 = v76;
      if (v76 == v75)
      {
        v60 = v75;
        v61 = 4;
      }
      else
      {
        if (!v76)
          goto LABEL_70;
        v61 = 5;
      }
      (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_70:
      result = v74;
      if (v74 == v73)
      {
        result = v73;
        v9 = 4;
      }
      else
      {
        if (!v74)
          continue;
        v9 = 5;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
    }
  }
  return result;
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverTrafficPasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverTrafficPasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverTrafficPasses,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverTrafficPasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverTrafficPasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverTrafficPasses,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4378;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverTrafficPasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverTrafficPasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverTrafficPasses,ggl::RenderItem *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4378;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverTrafficPasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverTrafficPasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverTrafficPasses,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, ggl::RenderItem **a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(a1 + 8), *a3);
}

uint64_t ggl::VertexDataTyped<ggl::TransitLineRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::TransitLineRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::TransitLineRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::TransitLineRibbon::BaseMesh::~BaseMesh(ggl::TransitLineRibbon::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::TransitLineRibbon::BaseMesh::~BaseMesh(ggl::TransitLineRibbon::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::TransitLineRibbon::BaseMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::TransitLineRibbon::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::TransitLineRibbon::BasePipelineSetup::~BasePipelineSetup(ggl::TransitLineRibbon::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::TransitLineRibbon::BasePipelineSetup::constantDataIsEnabled(ggl::TransitLineRibbon::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

BOOL ggl::TransitLineRibbon::BasePipelineSetup::textureIsEnabled(ggl::TransitLineRibbon::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::TransitLineRibbon::PatternedBasePipelineSetup::~PatternedBasePipelineSetup(ggl::TransitLineRibbon::PatternedBasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::TransitLineRibbon::PatternedBasePipelineSetup::constantDataIsEnabled(ggl::TransitLineRibbon::PatternedBasePipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

BOOL ggl::TransitLineRibbon::PatternedBasePipelineSetup::textureIsEnabled(ggl::TransitLineRibbon::PatternedBasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void md::HikingLogic::~HikingLogic(md::HikingLogic *this)
{
  md::HikingLogic *v2;
  uint64_t v3;
  md::HikingLogic *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)this = &off_1E428BF80;
  *((_QWORD *)this + 45) = &off_1E42B49F0;

  v2 = (md::HikingLogic *)*((_QWORD *)this + 39);
  if (v2 == (md::HikingLogic *)((char *)this + 288))
  {
    v3 = 4;
    v2 = (md::HikingLogic *)((char *)this + 288);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (md::HikingLogic *)*((_QWORD *)this + 32);
  if (v4 == (md::HikingLogic *)((char *)this + 232))
  {
    v5 = 4;
    v4 = (md::HikingLogic *)((char *)this + 232);
    goto LABEL_10;
  }
  if (v4)
  {
    v5 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  md::HikingLogic *v2;
  uint64_t v3;
  md::HikingLogic *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)this = &off_1E428BF80;
  *((_QWORD *)this + 45) = &off_1E42B49F0;

  v2 = (md::HikingLogic *)*((_QWORD *)this + 39);
  if (v2 == (md::HikingLogic *)((char *)this + 288))
  {
    v3 = 4;
    v2 = (md::HikingLogic *)((char *)this + 288);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (md::HikingLogic *)*((_QWORD *)this + 32);
  if (v4 == (md::HikingLogic *)((char *)this + 232))
  {
    v5 = 4;
    v4 = (md::HikingLogic *)((char *)this + 232);
  }
  else
  {
    if (!v4)
    {
LABEL_11:
      v6 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      *(_QWORD *)this = off_1E42AFC70;
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
      JUMPOUT(0x1A1AF4E00);
    }
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  goto LABEL_11;
}

uint64_t md::Logic<md::HikingLogic,md::HikingContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  LODWORD(a1) = v6;
  result = operator new();
  *(_QWORD *)result = v5;
  *(_DWORD *)(result + 8) = a1;
  v4[2] = "md::HikingContext]";
  v4[3] = 17;
  v4[4] = result;
  *v4 = &off_1E42B0B90;
  v4[1] = 0x92F3DC114CADB853;
  *a2 = v4;
  return result;
}

void sub_19F8DC3EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::HikingLogic,md::HikingContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0x92F3DC114CADB853)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::HikingLogic,md::HikingContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0x92F3DC114CADB853)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::HikingLogic,md::HikingContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0x92F3DC114CADB853)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::HikingLogic,md::HikingContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0x92F3DC114CADB853)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::HikingLogic,md::HikingContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[6];

  if (*(_QWORD *)(a3 + 8) == 0x92F3DC114CADB853 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::HikingLogic,md::HikingContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>>::allocateContext()
{
  return 0x3F80000000000000;
}

uint64_t md::Logic<md::HikingLogic,md::HikingContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

_QWORD *md::HikingLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  int v17;
  long double v18;
  long double v19;
  float64x2_t v20;
  char v26;
  char v27;
  unint64_t doesLocationIntersectWithParkRegion;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  const char *v33;
  unint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  NSObject *v38;
  const char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void **v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  float v67;
  float v68;
  int v69;
  float v70;
  void *v71;
  void *v72;
  float v73;
  VKTimedAnimation *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  id v78;
  VKTimedAnimation *v79;
  void *v80;
  _QWORD *result;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  _QWORD v86[3];
  _QWORD *v87;
  _QWORD v88[3];
  _QWORD *v89;
  _QWORD v90[3];
  _QWORD *v91;
  __int128 v92;
  float (*v93)(uint64_t);
  void *v94;
  uint64_t v95;
  uint64_t v96;
  float v97;
  _BYTE buf[24];
  void *v99;
  id v100;
  uint64_t v101;
  float v102;
  float v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v88[0] = &off_1E42C8CA8;
  v88[1] = a2;
  v89 = v88;
  v86[0] = &off_1E42C8CF0;
  v86[1] = a2;
  v87 = v86;
  v91 = v90;
  v90[0] = &off_1E42C8CF0;
  v90[1] = a2;
  _ZNSt3__110__function6__funcIZN2md11HikingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextENS2_17StyleLogicContextENS2_15SettingsContextENS2_17NavigationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13HikingContextEE3__0NS_9allocatorISN_EEFvvEEclEv((uint64_t)v88);
  v8 = v87;
  if (v87 == v86)
  {
    v9 = 4;
    v8 = v86;
  }
  else
  {
    if (!v87)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v89;
  if (v89 == v88)
  {
    v11 = 4;
    v10 = v88;
  }
  else
  {
    if (!v89)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  v84 = *a3;
  v12 = (uint64_t *)a3[3];
  md::LayoutContext::frameState(a2);
  v14 = (uint64_t)(*(double *)(v13 + 88) * 1000.0);
  v15 = *(unsigned __int8 *)(a1 + 338);
  if (*(_BYTE *)(a1 + 338))
    v15 = v14 - *(_QWORD *)(a1 + 160) > 100;
  if (*(_BYTE *)(a1 + 224))
  {
    v16 = v14 - *(_QWORD *)(a1 + 168) > 1000;
    v17 = *(unsigned __int8 *)(a1 + 280);
    if (!v15)
      goto LABEL_16;
    goto LABEL_15;
  }
  v16 = 0;
  v17 = *(unsigned __int8 *)(a1 + 280);
  if (v15)
  {
LABEL_15:
    v83 = *(_OWORD *)(v84 + 16);
    v18 = tan(*(double *)(v84 + 8) * 0.5 + 0.785398163);
    v19 = log(v18);
    *(_QWORD *)&v20.f64[0] = v83;
    v20.f64[1] = v19;
    __asm { FMOV            V1.2D, #0.5 }
    *(float64x2_t *)buf = vmlaq_f64(_Q1, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v20);
    *(_QWORD *)(a1 + 176) = md::HikingLogic::_doesLocationIntersectWithParkRegion((double *)buf, 1, 1, (uint64_t)a3);
    *(_BYTE *)(a1 + 184) = v26;
    *(_QWORD *)(a1 + 192) = md::HikingLogic::_doesLocationIntersectWithParkRegion((double *)buf, 1, 2, (uint64_t)a3);
    *(_BYTE *)(a1 + 200) = v27;
    *(_BYTE *)a4 = *(_BYTE *)(a1 + 184);
    *(_BYTE *)(a4 + 1) = v27 != 0;
    *(_QWORD *)(a1 + 160) = v14;
  }
LABEL_16:
  if (v16)
  {
    if (!*(_BYTE *)(a1 + 224))
      goto LABEL_125;
    doesLocationIntersectWithParkRegion = md::HikingLogic::_doesLocationIntersectWithParkRegion((double *)(a1 + 208), 2, 1, (uint64_t)a3);
    v30 = v29;
    if (v29)
    {
      v31 = *(_QWORD *)(a1 + 256);
      if (v31)
      {
        *(_QWORD *)buf = doesLocationIntersectWithParkRegion;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v31 + 48))(v31, buf);
      }
    }
    if (*(_BYTE *)(a1 + 224))
      *(_BYTE *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 168) = v14;
    if (GEOGetVectorKitHikingLogicLog(void)::onceToken[0] != -1)
      dispatch_once(GEOGetVectorKitHikingLogicLog(void)::onceToken, &__block_literal_global_9_10683);
    v32 = GEOGetVectorKitHikingLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitHikingLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      v33 = "YES";
      if (v30)
      {
        v34 = doesLocationIntersectWithParkRegion;
      }
      else
      {
        v33 = "NO";
        v34 = 0;
      }
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v33;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v34;
      _os_log_impl(&dword_19F029000, v32, OS_LOG_TYPE_DEBUG, "Requested Location In ToolTip Region: %s feature id: %llu", buf, 0x16u);
    }
  }
  if (!v17)
    goto LABEL_42;
  if (!*(_BYTE *)(a1 + 280))
  {
LABEL_125:
    std::__throw_bad_optional_access[abi:nn180100]();
    goto LABEL_128;
  }
  *(_OWORD *)buf = *(_OWORD *)(a1 + 264);
  md::HikingLogic::_doesLocationIntersectWithParkRegion((double *)buf, 4, 1, (uint64_t)a3);
  v36 = v35;
  v37 = *(_QWORD *)(a1 + 312);
  if (v37)
  {
    v85 = *(_OWORD *)buf;
    LOBYTE(v92) = v35 != 0;
    (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v37 + 48))(v37, &v85, &v92);
  }
  if (*(_BYTE *)(a1 + 280))
    *(_BYTE *)(a1 + 280) = 0;
  if (GEOGetVectorKitHikingLogicLog(void)::onceToken[0] != -1)
    dispatch_once(GEOGetVectorKitHikingLogicLog(void)::onceToken, &__block_literal_global_9_10683);
  v38 = GEOGetVectorKitHikingLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitHikingLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
  {
    v39 = "YES";
    if (!v36)
      v39 = "NO";
    LODWORD(v92) = 136315138;
    *(_QWORD *)((char *)&v92 + 4) = v39;
    _os_log_impl(&dword_19F029000, v38, OS_LOG_TYPE_DEBUG, "Requested Location In Contextual Region: %s", (uint8_t *)&v92, 0xCu);
  }
LABEL_42:
  if (*(_BYTE *)(a1 + 328))
  {
    v40 = 2;
  }
  else if (*(_BYTE *)(a1 + 338))
  {
    v40 = *(unsigned __int8 *)(a1 + 184);
  }
  else
  {
    v41 = *v12;
    v42 = v12[1];
    if (*v12 != v42)
    {
      while (*(_BYTE *)v41 != 34)
      {
        v41 += 16;
        if (v41 == v42)
          goto LABEL_55;
      }
    }
    if (v41 == v42 || !*(_QWORD *)(v41 + 8))
LABEL_55:
      v40 = 3;
    else
      v40 = 4;
  }
  if (!*(_BYTE *)(a1 + 337) || v40 != *(unsigned __int8 *)(a1 + 336))
  {
    v43 = v40 | 0x100;
    *(_WORD *)(a1 + 336) = v40 | 0x100;
    v44 = *(void ***)(a1 + 144);
    v46 = (char *)v44[1];
    v45 = (unint64_t)v44[2];
    if ((unint64_t)v46 < v45)
    {
      *(_QWORD *)v46 = &off_1E427A2A8;
      *((_DWORD *)v46 + 2) = v43;
      *((_DWORD *)v46 + 3) = 1053609165;
      *((_QWORD *)v46 + 3) = v46;
      v47 = v46 + 32;
LABEL_89:
      v44[1] = v47;
      goto LABEL_90;
    }
    v48 = (char *)*v44;
    v49 = (v46 - (_BYTE *)*v44) >> 5;
    v50 = v49 + 1;
    if ((unint64_t)(v49 + 1) >> 59)
      abort();
    v51 = v45 - (_QWORD)v48;
    if (v51 >> 4 > v50)
      v50 = v51 >> 4;
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFE0)
      v52 = 0x7FFFFFFFFFFFFFFLL;
    else
      v52 = v50;
    if (v52)
    {
      if (v52 >> 59)
        goto LABEL_129;
      v53 = (char *)operator new(32 * v52);
    }
    else
    {
      v53 = 0;
    }
    v54 = &v53[32 * v49];
    v55 = &v53[32 * v52];
    *(_QWORD *)v54 = &off_1E427A2A8;
    *((_DWORD *)v54 + 2) = v43;
    *((_DWORD *)v54 + 3) = 1053609165;
    *((_QWORD *)v54 + 3) = v54;
    v47 = v54 + 32;
    if (v46 == v48)
    {
      *v44 = v54;
      v44[1] = v47;
      v44[2] = v55;
      goto LABEL_87;
    }
    v56 = v46 - 32;
    do
    {
      v57 = v54;
      v54 -= 32;
      v58 = (char *)*((_QWORD *)v56 + 3);
      if (v58)
      {
        if (v56 == v58)
        {
          *((_QWORD *)v57 - 1) = v54;
          (*(void (**)(char *, char *))(*(_QWORD *)v56 + 24))(v56, v54);
        }
        else
        {
          *((_QWORD *)v57 - 1) = v58;
          *((_QWORD *)v56 + 3) = 0;
        }
      }
      else
      {
        *((_QWORD *)v57 - 1) = 0;
      }
      _ZF = v56 == v48;
      v56 -= 32;
    }
    while (!_ZF);
    v46 = (char *)*v44;
    v59 = (char *)v44[1];
    *v44 = v54;
    v44[1] = v47;
    v44[2] = v55;
    if (v59 == v46)
    {
LABEL_87:
      if (v46)
        operator delete(v46);
      goto LABEL_89;
    }
    while (1)
    {
      v62 = v59 - 32;
      v60 = (char *)*((_QWORD *)v59 - 1);
      if (v59 - 32 == v60)
      {
        v60 = v59 - 32;
        v61 = 4;
      }
      else
      {
        if (!v60)
          goto LABEL_82;
        v61 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v60 + 8 * v61))();
LABEL_82:
      v59 = v62;
      if (v62 == v46)
        goto LABEL_87;
    }
  }
LABEL_90:
  v63 = *v12;
  v64 = v12[1];
  if (*v12 != v64)
  {
    while (*(_BYTE *)v63 != 34)
    {
      v63 += 16;
      if (v63 == v64)
        goto LABEL_101;
    }
  }
  if (v63 == v64)
  {
LABEL_101:
    *(_DWORD *)(a1 + 348) = 0;
    v67 = 0.0;
  }
  else
  {
    v65 = *(_QWORD *)(v63 + 8);
    v66 = 1.0;
    v67 = 0.0;
    if (!v65)
      v66 = 0.0;
    *(float *)(a1 + 348) = v66;
    if (v65)
    {
      v68 = *(float *)(a1 + 340);
      v67 = 1.0;
      if (v68 > 0.0)
      {
        v67 = v66;
        if (*(double *)(v84 + 40) * 57.2957795 > v68)
        {
          v67 = *(float *)(a1 + 344);
          *(float *)(a1 + 348) = v67;
        }
      }
    }
  }
  if (vabds_f32(*(float *)(a1 + 352), v67) > 0.0001)
  {
    *(float *)(a1 + 352) = v67;
    v69 = *(unsigned __int8 *)(a1 + 392);
    v70 = *(float *)(a1 + 356);
    v71 = *(void **)(a1 + 368);
    if (v71)
    {
      objc_msgSend(v71, "pause");
      v72 = *(void **)(a1 + 368);
      if (v72)
      {
        *(_QWORD *)(a1 + 368) = 0;

      }
      *(_BYTE *)(a4 + 8) = 0;
    }
    if (*(_QWORD *)(a1 + 384) && v69 && (v73 = vabds_f32(v67, v70), v73 > 0.001))
    {
      v74 = -[VKTimedAnimation initWithDuration:]([VKTimedAnimation alloc], "initWithDuration:", (float)(v73 * 0.45));
      if (v70 >= v67)
        v75 = &__block_literal_global_3;
      else
        v75 = &__block_literal_global_10689;
      v76 = (void *)MEMORY[0x1A1AF5730](v75);
      -[VKTimedAnimation setTimingFunction:](v74, "setTimingFunction:", VKAnimationCurveLinear);
      v77 = MEMORY[0x1E0C809B0];
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZN2md11HikingLogic19_animateContourFadeERNS_13HikingContextEfb_block_invoke_3;
      v99 = &unk_1E42F0378;
      v101 = a1;
      v102 = v70;
      v103 = v67;
      v78 = v76;
      v100 = v78;
      -[VKTimedAnimation setStepHandler:](v74, "setStepHandler:", buf);
      *(_QWORD *)&v92 = v77;
      *((_QWORD *)&v92 + 1) = 3221225472;
      v93 = ___ZN2md11HikingLogic19_animateContourFadeERNS_13HikingContextEfb_block_invoke_4;
      v94 = &__block_descriptor_52_e8_v12__0B8l;
      v97 = v67;
      v95 = a1;
      v96 = a4;
      -[VKAnimation setCompletionHandler:](v74, "setCompletionHandler:", &v92);
      if (md::AnimationRunner::runAnimation(*(md::MapEngine ***)(a1 + 384), &v74->super))
      {
        v79 = v74;
        v80 = *(void **)(a1 + 368);
        *(_QWORD *)(a1 + 368) = v79;

        *(_BYTE *)(a4 + 8) = 1;
      }

    }
    else
    {
      *(float *)(a1 + 356) = v67;
    }
  }
  *(_DWORD *)(a4 + 4) = *(_DWORD *)(a1 + 356);
  if (!v91)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_128:
    __break(1u);
LABEL_129:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  (*(void (**)(_QWORD *))(*v91 + 48))(v91);
  result = v91;
  if (v91 == v90)
  {
    v82 = 4;
    result = v90;
  }
  else
  {
    if (!v91)
      return result;
    v82 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v82))();
}

void sub_19F8DCF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  void *v16;
  uint64_t v17;
  va_list va;

  va_start(va, a15);

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

void sub_19F8DCFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, char a19, uint64_t a20,uint64_t a21,char *a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  v30 = a18;
  if (a18 == &a15)
  {
    v31 = 4;
    v30 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_11;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_11:
  v32 = a22;
  if (a22 == &a19)
  {
    v33 = 4;
    v32 = &a19;
  }
  else
  {
    if (!a22)
      _Unwind_Resume(exception_object);
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
  _Unwind_Resume(exception_object);
}

void md::HikingLogic::debugConsoleString(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void _ZNSt3__110__function6__funcIZN2md11HikingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextENS2_17StyleLogicContextENS2_15SettingsContextENS2_17NavigationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13HikingContextEE3__0NS_9allocatorISN_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "HikingLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

unint64_t md::HikingLogic::_doesLocationIntersectWithParkRegion(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 v5;
  _WORD *v6;
  _WORD *v7;
  uint64_t *v8;
  _WORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  double v19;
  float v20;
  float v22;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v42;
  float *v44;
  float v45;
  BOOL v46;
  float v47;
  BOOL v50;
  BOOL v51;
  float v52;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float *v64;
  BOOL v65;
  float v66;
  uint64_t v68;
  float v69;
  float v70;
  float v72;
  float *v74;
  float v75;
  float v77;
  BOOL v80;
  BOOL v81;
  float v82;
  float v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  double *v92;

  v4 = **(_QWORD **)(a4 + 8);
  if ((v5 & 1) == 0)
  {
    v91 = a3;
    v92 = a1;
    v88 = a2;
    a2 = v88;
    v90 = v89;
    a3 = v91;
    a1 = v92;
    if (v90)
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
      a3 = v91;
      a1 = v92;
      a2 = v88;
    }
  }
  v6 = *(_WORD **)(v4 + 48);
  v7 = *(_WORD **)(v4 + 56);
  v8 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v6 != v7)
  {
    v9 = *(_WORD **)(v4 + 48);
    while (*v9 != 70)
    {
      v9 += 16;
      if (v9 == v7)
        goto LABEL_13;
    }
    if (v9 == v7)
    {
      v8 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v6 != 70)
      {
        v6 += 16;
        if (v6 == v7)
        {
          v6 = *(_WORD **)(v4 + 56);
          break;
        }
      }
      v8 = (uint64_t *)(v6 + 4);
    }
  }
LABEL_13:
  v12 = (uint64_t *)*v8;
  v10 = v8 + 1;
  v11 = v12;
  if (v12 != v10)
  {
    v13 = *a1;
    v14 = a1[1];
    do
    {
      v15 = v11[4];
      if (v15)
      {
        v16 = *(uint64_t **)(v15 + 720);
        v17 = *(uint64_t **)(v15 + 728);
        if (v16 != v17)
        {
          v18 = 1 << *(_BYTE *)(v15 + 169);
          v19 = -1.0 / (double)v18;
          v20 = (v13 + v19 * (double)*(int *)(v15 + 176)) * (double)v18;
          if (v20 >= 0.0 && v20 < 1.0)
          {
            v22 = (v14 + v19 * (double)(v18 + ~*(_DWORD *)(v15 + 172))) * (double)v18;
            if (v22 >= 0.0 && v22 < 1.0)
            {
              do
              {
                if ((v16[1] & a2) != 0 && (v16[2] & a3) != 0)
                {
                  for (i = v16[3]; i != v16[4]; i += 64)
                  {
                    if (*(float *)i <= v20
                      && *(float *)(i + 8) > v20
                      && *(float *)(i + 4) <= v22
                      && *(float *)(i + 12) > v22)
                    {
                      v27 = *(_QWORD *)(i + 16);
                      v28 = *(_QWORD *)(i + 24);
                      v29 = v28 - v27;
                      if (v28 == v27)
                      {
                        v30 = 0;
                      }
                      else
                      {
                        v30 = 0;
                        v31 = 0;
                        v32 = v29 >> 3;
                        v33 = (v29 >> 3) - 1;
                        v34 = (unint64_t)(v29 >> 3) <= 1 ? 1 : v29 >> 3;
                        v35 = (float *)(v27 + 4);
                        LOBYTE(v29) = 1;
                        do
                        {
                          v36 = v33 == v31 ? 0 : v31 + 1;
                          v37 = *(v35 - 1);
                          v38 = vabds_f32(v37, v20);
                          v39 = fabsf(v37 + v20) * 0.000011921;
                          v40 = *v35;
                          if (v38 <= v39 || v38 <= 1.1755e-38)
                          {
                            v42 = vabds_f32(v40, v22);
                            if (v42 <= (float)(fabsf(v40 + v22) * 0.000011921) || v42 <= 1.1755e-38)
                              break;
                          }
                          v44 = (float *)(v27 + 8 * v36);
                          v45 = v44[1];
                          v46 = v40 == v45 && v40 == v22;
                          if (v46)
                          {
                            v47 = *v44;
                            if (v37 <= v20 && v47 >= v20)
                              break;
                            if (v47 <= v20 && v37 >= v20)
                              break;
                          }
                          v50 = v40 > v22 || v45 <= v22;
                          if (!v50 || (v45 <= v22 ? (v51 = v40 <= v22) : (v51 = 1), !v51))
                          {
                            if (v37 != *v44)
                            {
                              v37 = (float)((float)((float)(*v44 - v37) * (float)(v22 - v40)) / (float)(v45 - v40))
                                  + v37;
                              v39 = fabsf(v37 + v20) * 0.000011921;
                            }
                            v52 = vabds_f32(v20, v37);
                            if (v52 <= v39 || v52 < 1.1755e-38)
                              break;
                            if (v37 < v20)
                              ++v30;
                          }
                          LOBYTE(v29) = ++v31 < v32;
                          v35 += 2;
                        }
                        while (v34 != v31);
                      }
                      if ((v29 & 1) != 0 || (v30 & 1) != 0)
                      {
                        v54 = *(uint64_t **)(i + 40);
                        v55 = *(uint64_t **)(i + 48);
                        while (v54 != v55)
                        {
                          v57 = *v54;
                          v56 = v54[1];
                          v58 = v56 - *v54;
                          if (v56 != *v54)
                          {
                            v59 = 0;
                            v60 = 0;
                            v61 = v58 >> 3;
                            v62 = (v58 >> 3) - 1;
                            if ((unint64_t)(v58 >> 3) <= 1)
                              v63 = 1;
                            else
                              v63 = v58 >> 3;
                            v64 = (float *)(v57 + 4);
                            v65 = 1;
                            do
                            {
                              v68 = v62 == v60 ? 0 : v60 + 1;
                              v82 = *(v64 - 1);
                              v69 = vabds_f32(v82, v20);
                              v83 = fabsf(v82 + v20) * 0.000011921;
                              v70 = *v64;
                              if (v69 <= v83 || v69 <= 1.1755e-38)
                              {
                                v72 = vabds_f32(v70, v22);
                                if (v72 <= (float)(fabsf(v70 + v22) * 0.000011921) || v72 <= 1.1755e-38)
                                  break;
                              }
                              v74 = (float *)(v57 + 8 * v68);
                              v75 = v74[1];
                              if (v70 == v75 && v70 == v22)
                              {
                                v77 = *v74;
                                if (v82 <= v20 && v77 >= v20)
                                  break;
                                if (v77 <= v20 && v82 >= v20)
                                  break;
                              }
                              v80 = v70 > v22 || v75 <= v22;
                              if (!v80 || (v75 <= v22 ? (v81 = v70 <= v22) : (v81 = 1), !v81))
                              {
                                if (v82 != *v74)
                                {
                                  v82 = (float)((float)((float)(*v74 - v82) * (float)(v22 - v70)) / (float)(v75 - v70))
                                      + v82;
                                  v83 = fabsf(v82 + v20) * 0.000011921;
                                }
                                v66 = vabds_f32(v20, v82);
                                if (v66 <= v83 || v66 < 1.1755e-38)
                                  break;
                                if (v82 < v20)
                                  ++v59;
                              }
                              v65 = ++v60 < v61;
                              v64 += 2;
                            }
                            while (v63 != v60);
                            v84 = 0;
                            if (v65)
                            {
                              v85 = 0;
                              return v85 | v84;
                            }
                            v85 = 0;
                            if ((v59 & 1) != 0)
                              return v85 | v84;
                          }
                          v54 += 3;
                        }
                        v86 = *v16;
                        v84 = v86 & 0xFFFFFFFFFFFFFF00;
                        v85 = v86;
                        return v85 | v84;
                      }
                    }
                  }
                }
                v16 += 6;
              }
              while (v16 != v17);
            }
          }
        }
      }
      v24 = (uint64_t *)v11[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (uint64_t *)v11[2];
          v46 = *v25 == (_QWORD)v11;
          v11 = v25;
        }
        while (!v46);
      }
      v11 = v25;
    }
    while (v25 != v10);
  }
  v84 = 0;
  v85 = 0;
  return v85 | v84;
}

float ___ZN2md11HikingLogic19_animateContourFadeERNS_13HikingContextEfb_block_invoke_3(uint64_t a1)
{
  float v1;
  float v2;
  uint64_t v3;
  float result;

  v1 = *(float *)(a1 + 48);
  v2 = *(float *)(a1 + 52);
  v3 = *(_QWORD *)(a1 + 40);
  result = v1 + (float)((*(float (**)(void))(*(_QWORD *)(a1 + 32) + 16))() * (float)(v2 - v1));
  *(float *)(v3 + 356) = result;
  return result;
}

float ___ZN2md11HikingLogic19_animateContourFadeERNS_13HikingContextEfb_block_invoke_4(uint64_t a1)
{
  float result;
  uint64_t v2;

  result = *(float *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 40);
  *(float *)(*(_QWORD *)(a1 + 32) + 356) = result;
  *(_BYTE *)(v2 + 8) = 0;
  return result;
}

float ___ZN2md11HikingLogic19_animateContourFadeERNS_13HikingContextEfb_block_invoke_2(float a1)
{
  return fminf(fmaxf((float)(a1 * 2.0) + -1.0, 0.0), 1.0);
}

float ___ZN2md11HikingLogic19_animateContourFadeERNS_13HikingContextEfb_block_invoke(float a1)
{
  return fminf(fmaxf(a1 + a1, 0.0), 1.0);
}

void ___ZL29GEOGetVectorKitHikingLogicLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "HikingLogic");
  v1 = (void *)GEOGetVectorKitHikingLogicLog(void)::log;
  GEOGetVectorKitHikingLogicLog(void)::log = (uint64_t)v0;

}

void _ZNSt3__110__function6__funcIZN2md11HikingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextENS2_17StyleLogicContextENS2_15SettingsContextENS2_17NavigationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13HikingContextEE3__1NS_9allocatorISN_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md11HikingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextENS2_17StyleLogicContextENS2_15SettingsContextENS2_17NavigationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13HikingContextEE3__1NS_9allocatorISN_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8CF0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md11HikingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextENS2_17StyleLogicContextENS2_15SettingsContextENS2_17NavigationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13HikingContextEE3__1NS_9allocatorISN_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8CF0;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md11HikingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextENS2_17StyleLogicContextENS2_15SettingsContextENS2_17NavigationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13HikingContextEE3__1NS_9allocatorISN_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "HikingLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md11HikingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextENS2_17StyleLogicContextENS2_15SettingsContextENS2_17NavigationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13HikingContextEE3__0NS_9allocatorISN_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md11HikingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextENS2_17StyleLogicContextENS2_15SettingsContextENS2_17NavigationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13HikingContextEE3__0NS_9allocatorISN_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8CA8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md11HikingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextENS2_17StyleLogicContextENS2_15SettingsContextENS2_17NavigationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13HikingContextEE3__0NS_9allocatorISN_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8CA8;
  a2[1] = v2;
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    goto LABEL_117;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v4 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v9 = *(_QWORD **)(a2 + 8 * v4);
  if (!v9)
    goto LABEL_25;
  v10 = (_QWORD *)*v9;
  if (!v10)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v12 = v10[1];
      if (v12 == 0x1AF456233693CD46)
      {
        if (v10[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v12 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v11 = v10[1];
    if (v11 == 0x1AF456233693CD46)
      break;
    if (v11 >= a3)
      v11 %= a3;
    if (v11 != v4)
      goto LABEL_25;
LABEL_12:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_25;
  }
  if (v10[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v13 = v10[5];
  if (*(_QWORD *)(v13 + 8) == 0x1AF456233693CD46)
  {
    v7 = *(_QWORD *)(v13 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v7 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v14 = 0x99BED48DEFBBD82BLL;
    if (a3 <= 0x99BED48DEFBBD82BLL)
      v14 = 0x99BED48DEFBBD82BLL % a3;
  }
  else
  {
    v14 = (a3 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v15 = *(_QWORD **)(a2 + 8 * v14);
  if (!v15)
    goto LABEL_48;
  v16 = (_QWORD *)*v15;
  if (!v16)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v18 = v16[1];
      if (v18 == 0x99BED48DEFBBD82BLL)
      {
        if (v16[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_46;
      }
      else if ((v18 & (a3 - 1)) != v14)
      {
        goto LABEL_48;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v17 = v16[1];
    if (v17 != 0x99BED48DEFBBD82BLL)
    {
      if (v17 >= a3)
        v17 %= a3;
      if (v17 != v14)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v16[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_35:
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v19 = v16[5];
  if (*(_QWORD *)(v19 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v6 = *(_QWORD *)(v19 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v6 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v20 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68)
      v20 = 0xE42D19AFCA302E68 % a3;
  }
  else
  {
    v20 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  v21 = *(_QWORD **)(a2 + 8 * v20);
  if (!v21)
    goto LABEL_71;
  v22 = (_QWORD *)*v21;
  if (!v22)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v24 = v22[1];
      if (v24 == 0xE42D19AFCA302E68)
      {
        if (v22[2] == 0xE42D19AFCA302E68)
          goto LABEL_69;
      }
      else if ((v24 & (a3 - 1)) != v20)
      {
        goto LABEL_71;
      }
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v23 = v22[1];
    if (v23 != 0xE42D19AFCA302E68)
    {
      if (v23 >= a3)
        v23 %= a3;
      if (v23 != v20)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v22[2] != 0xE42D19AFCA302E68)
    {
LABEL_58:
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v25 = v22[5];
  if (*(_QWORD *)(v25 + 8) == 0xE42D19AFCA302E68)
  {
    v8 = *(_QWORD *)(v25 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v8 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    v26 = 0xC97B9E962ADF4AD4;
    if (a3 <= 0xC97B9E962ADF4AD4)
      v26 = 0xC97B9E962ADF4AD4 % a3;
  }
  else
  {
    v26 = (a3 - 1) & 0xC97B9E962ADF4AD4;
  }
  v27 = *(_QWORD **)(a2 + 8 * v26);
  if (!v27)
    goto LABEL_94;
  v28 = (_QWORD *)*v27;
  if (!v28)
    goto LABEL_94;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v30 = v28[1];
      if (v30 == 0xC97B9E962ADF4AD4)
      {
        if (v28[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_92;
      }
      else if ((v30 & (a3 - 1)) != v26)
      {
        goto LABEL_94;
      }
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_94;
    }
  }
  while (2)
  {
    v29 = v28[1];
    if (v29 != 0xC97B9E962ADF4AD4)
    {
      if (v29 >= a3)
        v29 %= a3;
      if (v29 != v26)
        goto LABEL_94;
      goto LABEL_81;
    }
    if (v28[2] != 0xC97B9E962ADF4AD4)
    {
LABEL_81:
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_94;
      continue;
    }
    break;
  }
LABEL_92:
  v31 = v28[5];
  if (*(_QWORD *)(v31 + 8) == 0xC97B9E962ADF4AD4)
  {
    v5 = *(_QWORD *)(v31 + 32);
    goto LABEL_95;
  }
LABEL_94:
  v5 = 0;
LABEL_95:
  if (v3.u32[0] > 1uLL)
  {
    v32 = 0x1B8B241A8D896A1DLL;
    if (a3 <= 0x1B8B241A8D896A1DLL)
      v32 = 0x1B8B241A8D896A1DLL % a3;
  }
  else
  {
    v32 = (a3 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v33 = *(_QWORD **)(a2 + 8 * v32);
  if (!v33)
    goto LABEL_117;
  v34 = (_QWORD *)*v33;
  if (!v34)
    goto LABEL_117;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v36 = v34[1];
      if (v36 == 0x1B8B241A8D896A1DLL)
      {
        if (v34[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_115;
      }
      else if ((v36 & (a3 - 1)) != v32)
      {
        goto LABEL_117;
      }
      v34 = (_QWORD *)*v34;
      if (!v34)
        goto LABEL_117;
    }
  }
  while (1)
  {
    v35 = v34[1];
    if (v35 == 0x1B8B241A8D896A1DLL)
      break;
    if (v35 >= a3)
      v35 %= a3;
    if (v35 != v32)
      goto LABEL_117;
LABEL_104:
    v34 = (_QWORD *)*v34;
    if (!v34)
      goto LABEL_117;
  }
  if (v34[2] != 0x1B8B241A8D896A1DLL)
    goto LABEL_104;
LABEL_115:
  v37 = v34[5];
  if (*(_QWORD *)(v37 + 8) != 0x1B8B241A8D896A1DLL)
  {
LABEL_117:
    v38 = 0;
    goto LABEL_118;
  }
  v38 = *(_QWORD *)(v37 + 32);
LABEL_118:
  *result = v7;
  result[1] = v6;
  result[2] = v8;
  result[3] = v5;
  result[4] = v38;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::HikingContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B0B90;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C4096AF022DLL);
  return a1;
}

uint64_t gdc::ObjectHolder<md::HikingContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::Logic<md::HikingLogic,md::HikingContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

_QWORD *md::HikingLogic::setCallbackForToolTipRegionLocationIntersectionRequest(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 232);
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v3 != v9)
  {
    v5 = v10;
    v6 = *(_QWORD **)(a1 + 256);
    if (v10 == v9)
    {
      if (v6 == v3)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 256) + 24))(*(_QWORD *)(a1 + 256), v9);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 32))(*(_QWORD *)(a1 + 256));
        *(_QWORD *)(a1 + 256) = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, v3);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v3);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = *(_QWORD **)(a1 + 256);
      }
      *(_QWORD *)(a1 + 256) = v3;
    }
    else if (v6 == v3)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(a1 + 232) + 24))(v3, v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 32))(*(_QWORD *)(a1 + 256));
      *(_QWORD *)(a1 + 256) = v10;
      v10 = v9;
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 256);
      *(_QWORD *)(a1 + 256) = v5;
    }
  }
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

_QWORD *md::HikingLogic::setCallbackForContextualRegionLocationIntersectionRequest(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 288);
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v3 != v9)
  {
    v5 = v10;
    v6 = *(_QWORD **)(a1 + 312);
    if (v10 == v9)
    {
      if (v6 == v3)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 312) + 24))(*(_QWORD *)(a1 + 312), v9);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 32))(*(_QWORD *)(a1 + 312));
        *(_QWORD *)(a1 + 312) = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, v3);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v3);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = *(_QWORD **)(a1 + 312);
      }
      *(_QWORD *)(a1 + 312) = v3;
    }
    else if (v6 == v3)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(a1 + 288) + 24))(v3, v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 32))(*(_QWORD *)(a1 + 312));
      *(_QWORD *)(a1 + 312) = v10;
      v10 = v9;
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 312);
      *(_QWORD *)(a1 + 312) = v5;
    }
  }
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void md::HikingLogic::setSelectedTrail(md::HikingLogic *this, unint64_t a2, const char *a3, const char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  md::SelectedLabelLayerDataSource *v25;
  uint64_t v26;
  uint64_t v27;
  md::SelectedLabelLayerDataSource *v28;
  _Unwind_Exception *v29;
  void *v30[2];
  void *__p[2];
  int v32;

  if (!*((_BYTE *)this + 328) || *((_QWORD *)this + 40) != a2)
  {
    *((_QWORD *)this + 40) = a2;
    *((_BYTE *)this + 328) = 1;
    v8 = *((_QWORD *)this + 15);
    v9 = *(_QWORD *)(v8 + 32);
    v10 = *(_QWORD *)(v8 + 40);
    v11 = v9;
    if (v9 != v10)
    {
      v11 = v9;
      while (*(_WORD *)v11 != 68)
      {
        v11 += 16;
        if (v11 == v10)
          goto LABEL_18;
      }
    }
    if (v11 != v10)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        *(_OWORD *)v30 = 0u;
        *(_OWORD *)__p = 0u;
        v32 = 1065353216;
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)v30, a2, a2);
        if (!std::operator==[abi:nn180100]<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>(*(_QWORD **)(v12 + 824), *(_QWORD *)(v12 + 832), (uint64_t *)v30))
        {
          gdc::LayerDataSource::cancelAllLayerDataRequests((gdc::LayerDataSource *)v12);
          gdc::LayerDataStore::clearAllData(*(gdc::LayerDataStore **)(v12 + 16));
          if ((void **)(v12 + 808) != v30)
          {
            *(_DWORD *)(v12 + 840) = v32;
            std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>((_QWORD *)(v12 + 808), (_QWORD *)__p[0]);
          }
        }
        v13 = __p[0];
        if (__p[0])
        {
          do
          {
            v14 = (_QWORD *)*v13;
            operator delete(v13);
            v13 = v14;
          }
          while (v14);
        }
        v15 = v30[0];
        v30[0] = 0;
        if (v15)
          operator delete(v15);
        v16 = *((_QWORD *)this + 15);
        v9 = *(_QWORD *)(v16 + 32);
        v10 = *(_QWORD *)(v16 + 40);
      }
    }
LABEL_18:
    if (v9 != v10)
    {
      v17 = v9;
      while (*(_WORD *)v17 != 48)
      {
        v17 += 16;
        if (v17 == v10)
          goto LABEL_34;
      }
      if (v17 != v10)
      {
        v18 = *(_QWORD *)(v17 + 8);
        if (v18)
        {
          if (!*((_BYTE *)this + 328))
          {
            v29 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:nn180100]();
            std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)v30);
            _Unwind_Resume(v29);
          }
          v19 = *((_QWORD *)this + 40);
          *(_OWORD *)v30 = 0u;
          *(_OWORD *)__p = 0u;
          v32 = 1065353216;
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)v30, v19, v19);
          if (!std::operator==[abi:nn180100]<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>(*(_QWORD **)(v18 + 848), *(_QWORD *)(v18 + 856), (uint64_t *)v30))
          {
            gdc::LayerDataSource::cancelAllLayerDataRequests((gdc::LayerDataSource *)v18);
            gdc::LayerDataStore::clearAllData(*(gdc::LayerDataStore **)(v18 + 16));
            if ((void **)(v18 + 832) != v30)
            {
              *(_DWORD *)(v18 + 864) = v32;
              std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>((_QWORD *)(v18 + 832), (_QWORD *)__p[0]);
            }
          }
          v20 = __p[0];
          if (__p[0])
          {
            do
            {
              v21 = (_QWORD *)*v20;
              operator delete(v20);
              v20 = v21;
            }
            while (v21);
          }
          v22 = v30[0];
          v30[0] = 0;
          if (v22)
            operator delete(v22);
          v23 = *((_QWORD *)this + 15);
          v9 = *(_QWORD *)(v23 + 32);
          v10 = *(_QWORD *)(v23 + 40);
        }
      }
    }
LABEL_34:
    if (v9 == v10)
      goto LABEL_44;
    v24 = v9;
    while (*(_WORD *)v24 != 73)
    {
      v24 += 16;
      if (v24 == v10)
        goto LABEL_44;
    }
    if (v24 != v10)
    {
      v25 = *(md::SelectedLabelLayerDataSource **)(v24 + 8);
      if (v25)
      {
        md::SelectedLabelLayerDataSource::setSelectedRoadFeature(v25, a2, a3, a4);
        v26 = *((_QWORD *)this + 15);
        v9 = *(_QWORD *)(v26 + 32);
        v10 = *(_QWORD *)(v26 + 40);
      }
    }
LABEL_44:
    while (v9 != v10)
    {
      if (*(_WORD *)v9 == 80)
      {
        if (v9 != v10)
        {
          v28 = *(md::SelectedLabelLayerDataSource **)(v9 + 8);
          if (v28)
            md::SelectedLabelLayerDataSource::setSelectedRoadFeature(v28, a2, a3, a4);
        }
        break;
      }
      v9 += 16;
    }
    v27 = **((_QWORD **)this + 17);
    if (v27)
    {
      LOBYTE(v30[0]) = 8;
      md::MapEngine::setNeedsTick(v27, v30);
    }
  }
}

void sub_19F8DE57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, _QWORD *__p)
{
  _QWORD *v12;
  _QWORD *v13;

  v12 = __p;
  if (__p)
  {
    do
    {
      v13 = (_QWORD *)*v12;
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
  if (a9)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void md::FlyoverTileDataLogic::~FlyoverTileDataLogic(md::FlyoverTileDataLogic *this)
{
  md::FlyoverTileDataLogic::~FlyoverTileDataLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  void *v3;
  md::FlyoverTileDataLogic *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  md::FlyoverTileDataLogic *v10;
  uint64_t v11;
  uint64_t v12;
  md::FlyoverTileDataLogic *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;

  *(_QWORD *)this = &off_1E4298E40;
  v2 = (_QWORD *)*((_QWORD *)this + 43);
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = (_QWORD *)v2[7];
      if (v7)
      {
        do
        {
          v8 = (_QWORD *)*v7;
          operator delete(v7);
          v7 = v8;
        }
        while (v8);
      }
      v9 = (void *)v2[5];
      v2[5] = 0;
      if (v9)
        operator delete(v9);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = (void *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v3)
    operator delete(v3);
  if (*((_BYTE *)this + 320))
  {
    v4 = (md::FlyoverTileDataLogic *)*((_QWORD *)this + 39);
    if (v4 == (md::FlyoverTileDataLogic *)((char *)this + 288))
    {
      v5 = 4;
      v4 = (md::FlyoverTileDataLogic *)((char *)this + 288);
      goto LABEL_14;
    }
    if (v4)
    {
      v5 = 5;
LABEL_14:
      (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
    }
  }
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 200);
  if (*((_QWORD *)this + 24))
  {
    v11 = *((_QWORD *)this + 22);
    v10 = (md::FlyoverTileDataLogic *)*((_QWORD *)this + 23);
    v12 = *(_QWORD *)v10;
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(v11 + 8);
    **(_QWORD **)(v11 + 8) = v12;
    *((_QWORD *)this + 24) = 0;
    if (v10 != (md::FlyoverTileDataLogic *)((char *)this + 176))
    {
      do
      {
        v13 = (md::FlyoverTileDataLogic *)*((_QWORD *)v10 + 1);
        operator delete(v10);
        v10 = v13;
      }
      while (v13 != (md::FlyoverTileDataLogic *)((char *)this + 176));
    }
  }
  v14 = (_QWORD *)*((_QWORD *)this + 19);
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      operator delete(v14);
      v14 = v15;
    }
    while (v15);
  }
  v16 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v16)
    operator delete(v16);
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

double md::FlyoverTileDataLogic::createDebugNode@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void *md::Logic<md::FlyoverTileDataLogic,md::FlyoverTileDataResolverContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *result;
  _OWORD v20[2];
  char v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57[3];
  double v58;
  __int128 v59;
  double v60;
  _WORD v61[2];
  int v62;
  __int128 v63;
  uint64_t v64;
  _BYTE v65[384];

  v4 = (_QWORD *)operator new();
  (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(v20, a1);
  v5 = operator new();
  v6 = v5;
  v7 = v20[1];
  *(_OWORD *)v5 = v20[0];
  *(_OWORD *)(v5 + 16) = v7;
  *(_BYTE *)(v5 + 32) = v21;
  *(_QWORD *)(v5 + 40) = v22;
  v8 = v24;
  *(_OWORD *)(v5 + 48) = v23;
  *(_OWORD *)(v5 + 64) = v8;
  v9 = v26;
  *(_OWORD *)(v5 + 80) = v25;
  *(_OWORD *)(v5 + 96) = v9;
  v10 = v27;
  v11 = v28;
  v12 = v29;
  v13 = v43;
  *(_QWORD *)(v5 + 160) = v30;
  *(_OWORD *)(v5 + 128) = v11;
  *(_OWORD *)(v5 + 144) = v12;
  *(_OWORD *)(v5 + 112) = v10;
  v14 = v42;
  *(_OWORD *)(v5 + 328) = v41;
  *(_OWORD *)(v5 + 344) = v14;
  *(_QWORD *)(v5 + 360) = v13;
  *(_OWORD *)(v5 + 248) = v36;
  *(_OWORD *)(v5 + 264) = v37;
  *(_OWORD *)(v5 + 280) = v38;
  v15 = v40;
  *(_OWORD *)(v5 + 296) = v39;
  *(_OWORD *)(v5 + 312) = v15;
  *(_OWORD *)(v5 + 184) = v32;
  *(_OWORD *)(v5 + 200) = v33;
  *(_OWORD *)(v5 + 216) = v34;
  *(_OWORD *)(v5 + 232) = v35;
  *(_OWORD *)(v5 + 168) = v31;
  *(_BYTE *)(v5 + 368) = 0;
  if (v44)
  {
    *(_QWORD *)(v5 + 376) = v45;
    *(_BYTE *)(v5 + 368) = 1;
  }
  *(_BYTE *)(v5 + 384) = 0;
  if (v46)
  {
    *(_QWORD *)(v5 + 392) = v47;
    *(_BYTE *)(v5 + 384) = 1;
  }
  v16 = v49;
  *(_OWORD *)(v5 + 400) = v48;
  *(_OWORD *)(v5 + 416) = v16;
  v17 = v51;
  *(_OWORD *)(v5 + 432) = v50;
  *(_OWORD *)(v5 + 448) = v17;
  *(_OWORD *)(v5 + 464) = v52;
  *(_DWORD *)(v5 + 480) = v53;
  *(_QWORD *)(v5 + 488) = v54;
  v18 = v56;
  *(_OWORD *)(v5 + 496) = v55;
  *(_OWORD *)(v5 + 512) = v18;
  geo::View<double>::View(v5 + 528, v57, &v58, &v59, v61, v62, v60);
  *(_OWORD *)(v6 + 992) = v63;
  *(_QWORD *)(v6 + 1008) = v64;
  result = memcpy((void *)(v6 + 1016), v65, 0x180uLL);
  v4[2] = "md::FlyoverTileDataResolverContext]";
  v4[3] = 34;
  v4[4] = v6;
  *v4 = &off_1E42B1568;
  v4[1] = 0x479E84E48468DB70;
  *a2 = v4;
  return result;
}

void sub_19F8DE868(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::FlyoverTileDataLogic,md::FlyoverTileDataResolverContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x479E84E48468DB70)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::FlyoverTileDataLogic,md::FlyoverTileDataResolverContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x479E84E48468DB70)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::FlyoverTileDataLogic,md::FlyoverTileDataResolverContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x479E84E48468DB70)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::FlyoverTileDataLogic,md::FlyoverTileDataResolverContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x479E84E48468DB70)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::FlyoverTileDataLogic,md::FlyoverTileDataResolverContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[4];

  if (*(_QWORD *)(a3 + 8) == 0x479E84E48468DB70 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

void *md::FlyoverTileDataLogic::allocateContext@<X0>(md::FlyoverTileDataLogic *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  __int128 v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _BYTE v20[32];
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50[3];
  uint64_t v51;
  double v52;
  __int128 v53[16];
  unint64_t v54;
  uint64_t v55;
  __int16 v56[2];
  int v57;
  _BYTE v58[384];

  v17 = *(unint64_t *)(*((_QWORD *)this + 15) + 352);
  *(_QWORD *)&v18 = (char *)this + 128;
  *((_QWORD *)&v18 + 1) = (char *)this + 328;
  bzero(&v19, 0x558uLL);
  v27 = 0;
  *(int64x2_t *)v20 = vdupq_n_s64(0xC00921FB54442D18);
  *(_OWORD *)&v20[16] = 0u;
  v21 = 0u;
  v22 = 0u;
  v26 = 0uLL;
  v23 = 0;
  v28 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v29 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v30 = v28;
  v31 = v29;
  v32 = v28;
  v33 = v29;
  v34 = v28;
  v35 = v29;
  v36 = v28;
  v37 = v29;
  v38 = v28;
  v39 = v29;
  LOBYTE(v40) = 1;
  v41 = 0;
  v43 = 0u;
  v42 = 0u;
  v47 = 0;
  v46 = 0uLL;
  v48 = xmmword_19FFB4C90;
  v49 = 0u;
  memset(v50, 0, sizeof(v50));
  v51 = 0x3FF0000000000000;
  v54 = 0xBFF0000000000000;
  v55 = 0x3FF0000000000000;
  v57 = 2;
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v18;
  *(_BYTE *)(a2 + 32) = 0;
  a2 += 32;
  *(_QWORD *)(a2 + 8) = 0xC00921FB54442D18;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  v3 = v24;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)&v20[8];
  *(_OWORD *)(a2 + 32) = 0u;
  v4 = v40;
  *(_QWORD *)(a2 + 128) = v27;
  v5 = v26;
  *(_OWORD *)(a2 + 96) = v25;
  *(_OWORD *)(a2 + 112) = v5;
  *(_OWORD *)(a2 + 80) = v3;
  *(int64x2_t *)(a2 + 136) = v28;
  v6 = v29;
  v7 = v30;
  v8 = v31;
  *(int64x2_t *)(a2 + 200) = v32;
  *(int64x2_t *)(a2 + 184) = v8;
  *(int64x2_t *)(a2 + 168) = v7;
  *(int64x2_t *)(a2 + 152) = v6;
  v9 = v34;
  v10 = v33;
  *(int64x2_t *)(a2 + 248) = v35;
  *(int64x2_t *)(a2 + 232) = v9;
  *(int64x2_t *)(a2 + 216) = v10;
  v11 = v36;
  v12 = v37;
  v13 = v38;
  v14 = v39;
  *(_QWORD *)(a2 + 328) = v4;
  *(int64x2_t *)(a2 + 296) = v13;
  *(int64x2_t *)(a2 + 312) = v14;
  *(int64x2_t *)(a2 + 264) = v11;
  *(int64x2_t *)(a2 + 280) = v12;
  *(_BYTE *)(a2 + 336) = 0;
  *(_BYTE *)(a2 + 352) = 0;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  v15 = v45;
  *(_OWORD *)(a2 + 400) = v44;
  *(_OWORD *)(a2 + 416) = v15;
  *(_OWORD *)(a2 + 432) = v46;
  *(_DWORD *)(a2 + 448) = v47;
  *(_QWORD *)(a2 + 456) = 0;
  *(_OWORD *)(a2 + 464) = xmmword_19FFB4C90;
  *(_QWORD *)(a2 + 480) = 0;
  *(_QWORD *)(a2 + 488) = 0;
  geo::View<double>::View(a2 + 496, v50, &v52, v53, v56, 2, -1.0);
  *(_QWORD *)(a2 + 968) = 0;
  *(_QWORD *)(a2 + 960) = 0;
  *(_QWORD *)(a2 + 976) = 0;
  return memcpy((void *)(a2 + 984), v58, 0x180uLL);
}

uint64_t md::Logic<md::FlyoverTileDataLogic,md::FlyoverTileDataResolverContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::FlyoverTileDataLogic::runBeforeLayoutAtVariableRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t i;
  char *v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **p_p;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int8x8_t v49;
  uint8x8_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _BOOL4 v65;
  _QWORD *v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  void *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  void *__p;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  char v84[8];
  void *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  char v106;
  char v107;
  char v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  int v122;
  _QWORD v123[3];
  _QWORD *v124;
  _QWORD v125[3];
  _QWORD *v126;
  _QWORD v127[3];
  _QWORD *v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v125[0] = &off_1E427A0F8;
  v125[1] = a2;
  v126 = v125;
  v123[0] = &off_1E427A140;
  v123[1] = a2;
  v124 = v123;
  v128 = v127;
  v127[0] = &off_1E427A140;
  v127[1] = a2;
  _ZNSt3__110__function6__funcIZN2md20FlyoverTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_21LayerDataLogicContextENS2_16ElevationContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverTileDataResolverContextEE3__0NS_9allocatorISL_EEFvvEEclEv((uint64_t)v125);
  v7 = v124;
  if (v124 == v123)
  {
    v8 = 4;
    v7 = v123;
  }
  else
  {
    if (!v124)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = v126;
  if (v126 == v125)
  {
    v10 = 4;
    v9 = v125;
    goto LABEL_10;
  }
  if (v126)
  {
    v10 = 5;
LABEL_10:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v11 = *(_QWORD *)(a3 + 8);
  v12 = *(_QWORD *)(a3 + 16);
  if (*(_QWORD *)(v12 + 5584))
    v12 = *(_QWORD *)(v12 + 5584);
  *(_QWORD *)(a4 + 8) = v12;
  v13 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(v13 + 32);
  v15 = *(_QWORD *)(v13 + 40);
  v16 = v14;
  if (v14 != v15)
  {
    v16 = v14;
    while (*(_WORD *)v16 != 45)
    {
      v16 += 16;
      if (v16 == v15)
        goto LABEL_28;
    }
  }
  if (v16 != v15)
  {
    v17 = *(_QWORD *)(v16 + 8);
    if (v17)
    {
      v18 = *(unsigned __int8 **)(v17 + 824);
      if (v18)
        atomic_store(*(_BYTE *)(a1 + 216), v18);
      if (*(_BYTE *)(a1 + 280))
        v19 = *(_BYTE *)(a1 + 216) != 0;
      else
        v19 = 1;
      atomic_store(v19, (unsigned __int8 *)(v17 + 816));
      v20 = *(_QWORD *)(a1 + 120);
      v14 = *(_QWORD *)(v20 + 32);
      v15 = *(_QWORD *)(v20 + 40);
    }
  }
LABEL_28:
  while (v14 != v15)
  {
    if (*(_WORD *)v14 == 53)
    {
      if (v14 != v15)
      {
        v74 = *(_QWORD *)(v14 + 8);
        if (v74)
        {
          v75 = *(unsigned __int8 **)(v74 + 792);
          if (v75)
            atomic_store(*(_BYTE *)(a1 + 216), v75);
          if (*(_BYTE *)(a1 + 280))
            v76 = *(_BYTE *)(a1 + 216) != 0;
          else
            v76 = 1;
          atomic_store(v76, (unsigned __int8 *)(v74 + 786));
        }
      }
      break;
    }
    v14 += 16;
  }
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(v11 + 5);
  if (*(_QWORD *)(a1 + 352))
  {
    v21 = *(_QWORD **)(a1 + 344);
    if (v21)
    {
      do
      {
        v32 = (_QWORD *)*v21;
        v33 = (_QWORD *)v21[7];
        if (v33)
        {
          do
          {
            v34 = (_QWORD *)*v33;
            operator delete(v33);
            v33 = v34;
          }
          while (v34);
        }
        v35 = (void *)v21[5];
        v21[5] = 0;
        if (v35)
          operator delete(v35);
        operator delete(v21);
        v21 = v32;
      }
      while (v32);
    }
    *(_QWORD *)(a1 + 344) = 0;
    v22 = *(_QWORD *)(a1 + 336);
    if (v22)
    {
      for (i = 0; i != v22; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 352) = 0;
  }
  if (*(_BYTE *)(a1 + 320))
  {
    v24 = *(char **)(a4 + 8);
    v25 = *v24;
    v78 = *((_OWORD *)v24 + 24);
    v79 = *((_OWORD *)v24 + 23);
    v26 = *((_OWORD *)v24 + 26);
    v119 = *((_OWORD *)v24 + 25);
    v120 = v26;
    v121 = *((_OWORD *)v24 + 27);
    v122 = *((_DWORD *)v24 + 112);
    v27 = *(_QWORD *)(a1 + 312);
    if (!v27)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_125;
    }
    v28 = *((_QWORD *)v24 + 57);
    v77 = *((_OWORD *)v24 + 29);
    v29 = *((_QWORD *)v24 + 60);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v27 + 48))(&__p);
    v85 = __p;
    v86 = v81;
    v87 = v82;
    v88 = v83;
    v90 = 0;
    v89 = 0;
    v93 = 0;
    v91 = 0;
    v92 = 0;
    v94 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v95 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v96 = v94;
    v97 = v95;
    v98 = v94;
    v99 = v95;
    v100 = v94;
    v101 = v95;
    v102 = v94;
    v103 = v95;
    v104 = v94;
    v105 = v95;
    v106 = 1;
    v107 = 0;
    v108 = 0;
    v109 = v79;
    v110 = v78;
    v111 = v119;
    v112 = v120;
    v113 = v121;
    v114 = v122;
    v116 = v77;
    v115 = v28;
    v117 = v29;
    v118 = 0;
    v84[0] = v25;
    gdc::CameraView::geocentricCameraView((gdc::CameraView *)&__p, (const Camera *)v84);
    v30 = a4 + 32;
    p_p = &__p;
  }
  else
  {
    p_p = *(void ***)(a4 + 8);
    v30 = a4 + 32;
  }
  v36.n128_f64[0] = gdc::CameraView::operator=(v30, (uint64_t)p_p);
  v37 = *(_QWORD *)(a1 + 120);
  if (!v37)
    goto LABEL_108;
  v38 = *(_QWORD *)(v37 + 32);
  v39 = *(_QWORD *)(v37 + 40);
  if (v38 != v39)
  {
    while (*(_WORD *)v38 != 75)
    {
      v38 += 16;
      if (v38 == v39)
        goto LABEL_108;
    }
  }
  if (v38 != v39)
  {
    v40 = *(_QWORD *)(v38 + 8);
    if (v40)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v40 + 624));
      v41 = *(_QWORD *)(v40 + 664);
      os_unfair_lock_unlock((os_unfair_lock_t)(v40 + 624));
      if (v41)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v40 + 624));
        v42 = *(_QWORD **)(v40 + 136);
        if (!v42)
          goto LABEL_107;
        v43 = (uint64_t *)(v40 + 680);
LABEL_55:
        while (1)
        {
          v44 = v42[4];
          v45 = *(_DWORD *)(v44 + 8);
          if ((_BYTE)v45)
            break;
LABEL_54:
          v42 = (_QWORD *)*v42;
          if (!v42)
            goto LABEL_107;
        }
        v46 = *(unsigned __int8 *)(v44 + 12);
        v47 = *(_DWORD *)v44;
        v48 = *(_DWORD *)(v44 + 4);
        v49 = *(int8x8_t *)(v40 + 648);
        v50 = (uint8x8_t)vcnt_s8(v49);
        v50.i16[0] = vaddlv_u8(v50);
        v51 = *(_QWORD *)&v49 - 1;
LABEL_57:
        if (!*(_QWORD *)&v49)
          goto LABEL_86;
        v52 = (v45
             - 0x61C8864680B583EBLL
             + ((v46 - 0x61C8864680B583EBLL) << 6)
             + ((unint64_t)(v46 - 0x61C8864680B583EBLL) >> 2)) ^ (v46 - 0x61C8864680B583EBLL);
        v53 = (v48 - 0x61C8864680B583EBLL + (v52 << 6) + (v52 >> 2)) ^ v52;
        v54 = (v47 - 0x61C8864680B583EBLL + (v53 << 6) + (v53 >> 2)) ^ v53;
        if (v50.u32[0] > 1uLL)
        {
          v55 = v54;
          if (v54 >= *(_QWORD *)&v49)
            v55 = v54 % *(_QWORD *)&v49;
        }
        else
        {
          v55 = v54 & v51;
        }
        v56 = *(uint64_t ***)(*(_QWORD *)(v40 + 640) + 8 * v55);
        if (!v56 || (v57 = *v56) == 0)
        {
LABEL_86:
          v65 = 0;
          goto LABEL_89;
        }
        if (v50.u32[0] < 2uLL)
        {
          while (1)
          {
            v58 = v57[1];
            if (v58 == v54)
            {
              if (*((unsigned __int8 *)v57 + 16) == (_DWORD)v46
                && *((unsigned __int8 *)v57 + 17) == v45
                && *((_DWORD *)v57 + 5) == v48
                && *((_DWORD *)v57 + 6) == v47)
              {
                goto LABEL_73;
              }
            }
            else if ((v58 & v51) != v55)
            {
              goto LABEL_87;
            }
            v57 = (uint64_t *)*v57;
            if (!v57)
              goto LABEL_87;
          }
        }
        while (1)
        {
          v64 = v57[1];
          if (v64 == v54)
          {
            if (*((unsigned __int8 *)v57 + 16) == (_DWORD)v46
              && *((unsigned __int8 *)v57 + 17) == v45
              && *((_DWORD *)v57 + 5) == v48
              && *((_DWORD *)v57 + 6) == v47)
            {
LABEL_73:
              v59 = *(uint64_t **)(v40 + 688);
              v60 = (uint64_t *)v57[5];
              if (v59 != v60)
              {
                v61 = (uint64_t *)v60[1];
                if (v61 != v59)
                {
                  v62 = *v60;
                  *(_QWORD *)(v62 + 8) = v61;
                  *(_QWORD *)v60[1] = v62;
                  v63 = *v59;
                  *(_QWORD *)(v63 + 8) = v60;
                  *v60 = v63;
                  *v59 = (uint64_t)v60;
                  v60[1] = (uint64_t)v59;
                  v59 = *(uint64_t **)(v40 + 688);
                }
              }
LABEL_88:
              v65 = v59 != v43;
              if (!(_BYTE)v45)
              {
                if (v59 != v43)
                  goto LABEL_94;
                goto LABEL_54;
              }
LABEL_89:
              LOBYTE(v45) = v45 - 1;
              if (!(_BYTE)v45 || (v48 >>= 1, v47 >>= 1, v65))
              {
                if (!v65)
                  goto LABEL_54;
LABEL_94:
                v66 = (_QWORD *)*v42;
                std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)(v40 + 120), v42);
                v67 = __p;
                __p = 0;
                if (v67)
                {
                  if (BYTE8(v81))
                  {
                    v68 = (std::__shared_weak_count *)*((_QWORD *)v67 + 17);
                    if (v68)
                    {
                      p_shared_owners = (unint64_t *)&v68->__shared_owners_;
                      do
                        v70 = __ldaxr(p_shared_owners);
                      while (__stlxr(v70 - 1, p_shared_owners));
                      if (!v70)
                      {
                        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                        std::__shared_weak_count::__release_weak(v68);
                      }
                    }
                    if (*((_BYTE *)v67 + 112))
                      *((_BYTE *)v67 + 112) = 0;
                    v71 = (void *)*((_QWORD *)v67 + 4);
                    if (v71 != *((void **)v67 + 6))
                      free(v71);
                  }
                  operator delete(v67);
                }
                v42 = v66;
                if (!v66)
                {
LABEL_107:
                  os_unfair_lock_unlock((os_unfair_lock_t)(v40 + 624));
                  break;
                }
                goto LABEL_55;
              }
              goto LABEL_57;
            }
          }
          else
          {
            if (v64 >= *(_QWORD *)&v49)
              v64 %= *(_QWORD *)&v49;
            if (v64 != v55)
            {
LABEL_87:
              v59 = (uint64_t *)(v40 + 680);
              goto LABEL_88;
            }
          }
          v57 = (uint64_t *)*v57;
          if (!v57)
            goto LABEL_87;
        }
      }
    }
  }
LABEL_108:
  if (!v128)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_125:
    __break(1u);
    return;
  }
  (*(void (**)(_QWORD *, __n128))(*v128 + 48))(v128, v36);
  v72 = v128;
  if (v128 == v127)
  {
    v73 = 4;
    v72 = v127;
  }
  else
  {
    if (!v128)
      return;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
}

void sub_19F8DF4AC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD **)(v2 - 112);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 136);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD **)(v2 - 176);
  if (v6 == (_QWORD *)(v2 - 200))
  {
    v7 = 4;
    v6 = (_QWORD *)(v2 - 200);
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = *(_QWORD **)(v2 - 144);
  if (v8 == (_QWORD *)(v2 - 168))
  {
    v9 = 4;
    v8 = (_QWORD *)(v2 - 168);
  }
  else
  {
    if (!v8)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

void md::Logic<md::FlyoverTileDataLogic,md::FlyoverTileDataResolverContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void _ZNSt3__110__function6__funcIZN2md20FlyoverTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_21LayerDataLogicContextENS2_16ElevationContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverTileDataResolverContextEE3__0NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "FlyoverTileDataLogicVariableRate", (const char *)&unk_1A0189141, v5, 2u);
  }

}

double gdc::CameraView::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  double result;

  gdc::Camera::operator=(a1, a2);
  *(_QWORD *)(v3 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(v3 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(v3 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(v3 + 544) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(v3 + 496) = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(v3 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(v3 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(v3 + 552) = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(v3 + 560) = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(v3 + 568) = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(v3 + 576) = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(v3 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(v3 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(v3 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(v3 + 608) = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(v3 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(v3 + 624) = *(_QWORD *)(a2 + 624);
  *(_QWORD *)(v3 + 632) = *(_QWORD *)(a2 + 632);
  *(_QWORD *)(v3 + 640) = *(_QWORD *)(a2 + 640);
  *(_QWORD *)(v3 + 648) = *(_QWORD *)(a2 + 648);
  *(_QWORD *)(v3 + 656) = *(_QWORD *)(a2 + 656);
  *(_QWORD *)(v3 + 664) = *(_QWORD *)(a2 + 664);
  *(_QWORD *)(v3 + 672) = *(_QWORD *)(a2 + 672);
  *(_QWORD *)(v3 + 680) = *(_QWORD *)(a2 + 680);
  *(_QWORD *)(v3 + 688) = *(_QWORD *)(a2 + 688);
  *(_QWORD *)(v3 + 696) = *(_QWORD *)(a2 + 696);
  *(_QWORD *)(v3 + 704) = *(_QWORD *)(a2 + 704);
  *(_QWORD *)(v3 + 712) = *(_QWORD *)(a2 + 712);
  *(_QWORD *)(v3 + 720) = *(_QWORD *)(a2 + 720);
  *(_QWORD *)(v3 + 728) = *(_QWORD *)(a2 + 728);
  *(_QWORD *)(v3 + 736) = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(v3 + 744) = *(_QWORD *)(a2 + 744);
  *(_QWORD *)(v3 + 752) = *(_QWORD *)(a2 + 752);
  *(_QWORD *)(v3 + 760) = *(_QWORD *)(a2 + 760);
  *(_QWORD *)(v3 + 768) = *(_QWORD *)(a2 + 768);
  *(_QWORD *)(v3 + 776) = *(_QWORD *)(a2 + 776);
  *(_QWORD *)(v3 + 784) = *(_QWORD *)(a2 + 784);
  *(_QWORD *)(v3 + 792) = *(_QWORD *)(a2 + 792);
  *(_QWORD *)(v3 + 800) = *(_QWORD *)(a2 + 800);
  *(_QWORD *)(v3 + 808) = *(_QWORD *)(a2 + 808);
  *(_QWORD *)(v3 + 816) = *(_QWORD *)(a2 + 816);
  *(_QWORD *)(v3 + 824) = *(_QWORD *)(a2 + 824);
  *(_QWORD *)(v3 + 832) = *(_QWORD *)(a2 + 832);
  *(_QWORD *)(v3 + 840) = *(_QWORD *)(a2 + 840);
  *(_QWORD *)(v3 + 848) = *(_QWORD *)(a2 + 848);
  *(_QWORD *)(v3 + 856) = *(_QWORD *)(a2 + 856);
  *(_QWORD *)(v3 + 864) = *(_QWORD *)(a2 + 864);
  *(_QWORD *)(v3 + 872) = *(_QWORD *)(a2 + 872);
  *(_QWORD *)(v3 + 880) = *(_QWORD *)(a2 + 880);
  *(_QWORD *)(v3 + 888) = *(_QWORD *)(a2 + 888);
  *(_QWORD *)(v3 + 896) = *(_QWORD *)(a2 + 896);
  *(_QWORD *)(v3 + 904) = *(_QWORD *)(a2 + 904);
  *(_QWORD *)(v3 + 912) = *(_QWORD *)(a2 + 912);
  *(_QWORD *)(v3 + 920) = *(_QWORD *)(a2 + 920);
  *(_QWORD *)(v3 + 928) = *(_QWORD *)(a2 + 928);
  v4 = *(_OWORD *)(a2 + 936);
  *(_QWORD *)(v3 + 952) = *(_QWORD *)(a2 + 952);
  *(_OWORD *)(v3 + 936) = v4;
  v5 = *(_OWORD *)(a2 + 960);
  *(_QWORD *)(v3 + 976) = *(_QWORD *)(a2 + 976);
  *(_OWORD *)(v3 + 960) = v5;
  *(_QWORD *)(v3 + 984) = *(_QWORD *)(a2 + 984);
  *(_QWORD *)(v3 + 992) = *(_QWORD *)(a2 + 992);
  *(_QWORD *)(v3 + 1000) = *(_QWORD *)(a2 + 1000);
  *(_QWORD *)(v3 + 1008) = *(_QWORD *)(a2 + 1008);
  *(_QWORD *)(v3 + 1016) = *(_QWORD *)(a2 + 1016);
  *(_QWORD *)(v3 + 1024) = *(_QWORD *)(a2 + 1024);
  *(_QWORD *)(v3 + 1032) = *(_QWORD *)(a2 + 1032);
  *(_QWORD *)(v3 + 1040) = *(_QWORD *)(a2 + 1040);
  *(_QWORD *)(v3 + 1048) = *(_QWORD *)(a2 + 1048);
  *(_QWORD *)(v3 + 1056) = *(_QWORD *)(a2 + 1056);
  *(_QWORD *)(v3 + 1064) = *(_QWORD *)(a2 + 1064);
  *(_QWORD *)(v3 + 1072) = *(_QWORD *)(a2 + 1072);
  *(_QWORD *)(v3 + 1080) = *(_QWORD *)(a2 + 1080);
  *(_QWORD *)(v3 + 1088) = *(_QWORD *)(a2 + 1088);
  *(_QWORD *)(v3 + 1096) = *(_QWORD *)(a2 + 1096);
  *(_QWORD *)(v3 + 1104) = *(_QWORD *)(a2 + 1104);
  *(_QWORD *)(v3 + 1112) = *(_QWORD *)(a2 + 1112);
  *(_QWORD *)(v3 + 1120) = *(_QWORD *)(a2 + 1120);
  *(_QWORD *)(v3 + 1128) = *(_QWORD *)(a2 + 1128);
  *(_QWORD *)(v3 + 1136) = *(_QWORD *)(a2 + 1136);
  *(_QWORD *)(v3 + 1144) = *(_QWORD *)(a2 + 1144);
  *(_QWORD *)(v3 + 1152) = *(_QWORD *)(a2 + 1152);
  *(_QWORD *)(v3 + 1160) = *(_QWORD *)(a2 + 1160);
  *(_QWORD *)(v3 + 1168) = *(_QWORD *)(a2 + 1168);
  *(_QWORD *)(v3 + 1176) = *(_QWORD *)(a2 + 1176);
  *(_QWORD *)(v3 + 1184) = *(_QWORD *)(a2 + 1184);
  *(_QWORD *)(v3 + 1192) = *(_QWORD *)(a2 + 1192);
  *(_QWORD *)(v3 + 1200) = *(_QWORD *)(a2 + 1200);
  *(_QWORD *)(v3 + 1208) = *(_QWORD *)(a2 + 1208);
  *(_QWORD *)(v3 + 1216) = *(_QWORD *)(a2 + 1216);
  *(_QWORD *)(v3 + 1224) = *(_QWORD *)(a2 + 1224);
  *(_QWORD *)(v3 + 1232) = *(_QWORD *)(a2 + 1232);
  *(_QWORD *)(v3 + 1240) = *(_QWORD *)(a2 + 1240);
  *(_QWORD *)(v3 + 1248) = *(_QWORD *)(a2 + 1248);
  *(_QWORD *)(v3 + 1256) = *(_QWORD *)(a2 + 1256);
  *(_QWORD *)(v3 + 1264) = *(_QWORD *)(a2 + 1264);
  *(_QWORD *)(v3 + 1272) = *(_QWORD *)(a2 + 1272);
  *(_QWORD *)(v3 + 1280) = *(_QWORD *)(a2 + 1280);
  *(_QWORD *)(v3 + 1288) = *(_QWORD *)(a2 + 1288);
  *(_QWORD *)(v3 + 1296) = *(_QWORD *)(a2 + 1296);
  *(_QWORD *)(v3 + 1304) = *(_QWORD *)(a2 + 1304);
  *(_QWORD *)(v3 + 1312) = *(_QWORD *)(a2 + 1312);
  *(_QWORD *)(v3 + 1320) = *(_QWORD *)(a2 + 1320);
  *(_QWORD *)(v3 + 1328) = *(_QWORD *)(a2 + 1328);
  *(_QWORD *)(v3 + 1336) = *(_QWORD *)(a2 + 1336);
  *(_QWORD *)(v3 + 1344) = *(_QWORD *)(a2 + 1344);
  *(_QWORD *)(v3 + 1352) = *(_QWORD *)(a2 + 1352);
  result = *(double *)(a2 + 1360);
  *(double *)(v3 + 1360) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md20FlyoverTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_21LayerDataLogicContextENS2_16ElevationContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverTileDataResolverContextEE3__1NS_9allocatorISL_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md20FlyoverTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_21LayerDataLogicContextENS2_16ElevationContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverTileDataResolverContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427A140;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md20FlyoverTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_21LayerDataLogicContextENS2_16ElevationContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverTileDataResolverContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427A140;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md20FlyoverTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_21LayerDataLogicContextENS2_16ElevationContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverTileDataResolverContextEE3__1NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "FlyoverTileDataLogicVariableRate", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md20FlyoverTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_21LayerDataLogicContextENS2_16ElevationContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverTileDataResolverContextEE3__0NS_9allocatorISL_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md20FlyoverTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_21LayerDataLogicContextENS2_16ElevationContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverTileDataResolverContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427A0F8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md20FlyoverTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_21LayerDataLogicContextENS2_16ElevationContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverTileDataResolverContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427A0F8;
  a2[1] = v2;
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_71;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x7851AF310F49C988;
    if (a3 <= 0x7851AF310F49C988)
      v4 = 0x7851AF310F49C988 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x7851AF310F49C988;
  }
  v7 = *(_QWORD **)(a2 + 8 * v4);
  if (!v7)
    goto LABEL_25;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == 0x7851AF310F49C988)
      {
        if (v8[2] == 0x7851AF310F49C988)
          goto LABEL_23;
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v9 = v8[1];
    if (v9 == 0x7851AF310F49C988)
      break;
    if (v9 >= a3)
      v9 %= a3;
    if (v9 != v4)
      goto LABEL_25;
LABEL_12:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_25;
  }
  if (v8[2] != 0x7851AF310F49C988)
    goto LABEL_12;
LABEL_23:
  v11 = v8[5];
  if (*(_QWORD *)(v11 + 8) == 0x7851AF310F49C988)
  {
    v6 = *(_QWORD *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v12 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL)
      v12 = 0x8BD499FBD96FBB9ELL % a3;
  }
  else
  {
    v12 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v13 = *(_QWORD **)(a2 + 8 * v12);
  if (!v13)
    goto LABEL_48;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x8BD499FBD96FBB9ELL)
      {
        if (v14[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_46;
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v15 = v14[1];
    if (v15 != 0x8BD499FBD96FBB9ELL)
    {
      if (v15 >= a3)
        v15 %= a3;
      if (v15 != v12)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v14[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_35:
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v17 = v14[5];
  if (*(_QWORD *)(v17 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v5 = *(_QWORD *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v18 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v18 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v18 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v19 = *(_QWORD **)(a2 + 8 * v18);
  if (!v19)
    goto LABEL_71;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v20[1];
      if (v22 == 0x1AF456233693CD46)
      {
        if (v20[2] == 0x1AF456233693CD46)
          goto LABEL_69;
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_71;
    }
  }
  while (1)
  {
    v21 = v20[1];
    if (v21 == 0x1AF456233693CD46)
      break;
    if (v21 >= a3)
      v21 %= a3;
    if (v21 != v18)
      goto LABEL_71;
LABEL_58:
    v20 = (_QWORD *)*v20;
    if (!v20)
      goto LABEL_71;
  }
  if (v20[2] != 0x1AF456233693CD46)
    goto LABEL_58;
LABEL_69:
  v23 = v20[5];
  if (*(_QWORD *)(v23 + 8) != 0x1AF456233693CD46)
  {
LABEL_71:
    v24 = 0;
    goto LABEL_72;
  }
  v24 = *(_QWORD *)(v23 + 32);
LABEL_72:
  *result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::FlyoverTileDataResolverContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1568;
  v2 = a1[4];
  if (v2)
  {
    if (*(_BYTE *)(v2 + 384))
      *(_BYTE *)(v2 + 384) = 0;
    if (*(_BYTE *)(v2 + 368))
      *(_BYTE *)(v2 + 368) = 0;
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::FlyoverTileDataResolverContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1568;
  v1 = a1[4];
  if (v1)
  {
    if (*(_BYTE *)(v1 + 384))
      *(_BYTE *)(v1 + 384) = 0;
    if (*(_BYTE *)(v1 + 368))
      *(_BYTE *)(v1 + 368) = 0;
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::FlyoverTileDataResolverContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t std::deque<md::FlyoverOctile>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 51;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 102;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void md::FlyoverSelectionContext::~FlyoverSelectionContext(md::FlyoverSelectionContext *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)this = &off_1E429E7C8;
  if (*((_BYTE *)this + 520))
    *((_BYTE *)this + 520) = 0;
  if (*((_BYTE *)this + 504))
    *((_BYTE *)this + 504) = 0;
  std::deque<md::FlyoverOctile>::~deque[abi:nn180100]((uint64_t)this + 88);
  *(_QWORD *)this = &off_1E42B0978;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    operator delete(v4);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)this = &off_1E429E7C8;
  if (*((_BYTE *)this + 520))
    *((_BYTE *)this + 520) = 0;
  if (*((_BYTE *)this + 504))
    *((_BYTE *)this + 504) = 0;
  std::deque<md::FlyoverOctile>::~deque[abi:nn180100]((uint64_t)this + 88);
  *(_QWORD *)this = &off_1E42B0978;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    operator delete(v4);
  JUMPOUT(0x1A1AF4E00);
}

void md::FlyoverSelectionContext::getTileBound(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint8x8_t v50;
  unint64_t v51;
  uint64_t **v52;
  uint64_t *v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  float v61;
  float v62;
  _BOOL8 v63;
  unint64_t v64;
  unint64_t v65;
  size_t prime;
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  size_t v72;
  size_t v73;
  size_t v74;
  _QWORD *i;
  size_t v76;
  uint64_t v77;
  unint64_t v78;
  uint8x8_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  size_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  char *v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t *v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  int64x2_t v104;
  __int128 v105;
  int64x2_t v106;
  _BYTE __p[24];
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  void *v117;

  v8 = (_QWORD *)(a2 + 8);
  v9 = std::__hash_table<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,true>,std::__unordered_map_equal<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<md::FlyoverOctile>,md::FlyoverOctileHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<md::FlyoverOctile>((_QWORD *)(a2 + 8), a3);
  if (!v9)
    goto LABEL_7;
  v10 = *(uint64_t **)(a2 + 56);
  v11 = (uint64_t *)v9[7];
  if (v10 != v11)
  {
    v12 = (uint64_t *)v11[1];
    if (v12 != v10)
    {
      v13 = *v11;
      *(_QWORD *)(v13 + 8) = v12;
      *(_QWORD *)v11[1] = v13;
      v14 = *v10;
      *(_QWORD *)(v14 + 8) = v11;
      *v11 = v14;
      *v10 = (uint64_t)v11;
      v11[1] = (uint64_t)v10;
      v10 = *(uint64_t **)(a2 + 56);
    }
  }
  if (v10 == (uint64_t *)(a2 + 48))
  {
LABEL_7:
    if (!*(_BYTE *)a4)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 104) = 0;
      return;
    }
    v104 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v105 = xmmword_19FFB2E00;
    v106 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v101 = 0u;
    v102 = 0u;
    v100 = 0u;
    v103 = 0x3FF0000000000000;
    v19 = *(double *)(a4 + 8);
    v20 = *(double *)(a4 + 16);
    md::FlyoverCommon::computeGeocentricBoundsFromOctile((uint64_t)a3, (uint64_t)&v100, (uint64_t)&v104, v19, v20);
    v21 = v101;
    v98 = *((_QWORD *)&v100 + 1);
    v99 = v100;
    v22 = *((_QWORD *)&v101 + 1);
    v24 = v102;
    v23 = v103;
    v25 = v104.i64[0];
    v96 = v105;
    v97 = v104.i64[1];
    v26 = v106.i64[0];
    v95 = *((_QWORD *)&v105 + 1);
    v27 = v106.i64[1];
    v28 = std::__hash_table<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,true>,std::__unordered_map_equal<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<md::FlyoverOctile>,md::FlyoverOctileHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<md::FlyoverOctile>(v8, a3);
    if (v28)
    {
      v29 = v28;
      v30 = (uint64_t *)v28[7];
      v31 = *v30;
      *(_QWORD *)(v31 + 8) = v30[1];
      *(_QWORD *)v30[1] = v31;
      --*(_QWORD *)(a2 + 64);
      operator delete(v30);
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v8, v29);
      if (*(_QWORD *)__p)
        operator delete(*(void **)__p);
    }
    v32 = (char *)operator new(0xA0uLL);
    v33 = a3[1];
    v34 = *a3;
    v32[16] = v34;
    v32[17] = v33;
    v35 = *(_QWORD *)(a3 + 4);
    *(_QWORD *)(v32 + 20) = v35;
    v36 = a3 + 24;
    *(_OWORD *)(v32 + 40) = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v32 + 7) = v99;
    *((_QWORD *)v32 + 8) = v98;
    *((_QWORD *)v32 + 9) = v21;
    *((_QWORD *)v32 + 10) = v22;
    *(_OWORD *)(v32 + 88) = v24;
    *((_QWORD *)v32 + 13) = v23;
    *((_QWORD *)v32 + 14) = v25;
    *((_QWORD *)v32 + 15) = v97;
    *((_QWORD *)v32 + 16) = v96;
    *((_QWORD *)v32 + 17) = v95;
    *((_QWORD *)v32 + 18) = v26;
    *((_QWORD *)v32 + 19) = v27;
    v37 = *(_QWORD **)(a2 + 56);
    *(_QWORD *)v32 = a2 + 48;
    *((_QWORD *)v32 + 1) = v37;
    *v37 = v32;
    v38 = *(_QWORD *)(a2 + 64) + 1;
    *(_QWORD *)(a2 + 56) = v32;
    *(_QWORD *)(a2 + 64) = v38;
    v39 = a3[1];
    v40 = (v39
         + ((v34 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v34 - 0x61C8864680B583EBLL) >> 2)
         - 0x61C8864680B583EBLL) ^ (v34 - 0x61C8864680B583EBLL);
    v41 = ((v40 << 6) + (int)v35 + (v40 >> 2) - 0x61C8864680B583EBLL) ^ v40;
    v42 = (v41 << 6) + SHIDWORD(v35) + (v41 >> 2) - 0x61C8864680B583EBLL;
    v43 = *((unsigned int *)a3 + 9);
    v44 = *(_QWORD *)(a3 + 28);
    v45 = v44 & 0xFF00000000;
    v46 = 2 * v44;
    if ((v44 & 0xFF00000000) == 0)
      v46 = 0;
    v47 = (v46 | (v43 << 33)) ^ v41;
    v48 = v47 ^ v42;
    v49 = *(_QWORD *)(a2 + 16);
    v94 = v35;
    if (v49)
    {
      v50 = (uint8x8_t)vcnt_s8((int8x8_t)v49);
      v50.i16[0] = vaddlv_u8(v50);
      if (v50.u32[0] > 1uLL)
      {
        v51 = v47 ^ v42;
        if (v48 >= v49)
          v51 = v48 % v49;
      }
      else
      {
        v51 = v48 & (v49 - 1);
      }
      v52 = *(uint64_t ***)(*v8 + 8 * v51);
      v93 = v51;
      if (v52)
      {
        v53 = *v52;
        if (v53)
        {
          v54 = *v36;
          if (v50.u32[0] <= 1uLL)
          {
            v55 = v49 - 1;
            if (!v45)
            {
              while (1)
              {
                v57 = v53[1];
                if (v57 == v48)
                {
                  if (*((unsigned __int8 *)v53 + 40) == v54
                    && __PAIR64__(*((unsigned __int8 *)v53 + 17), *((unsigned __int8 *)v53 + 16)) == __PAIR64__(v39, v34)
                    && *(uint64_t *)((char *)v53 + 20) == v35
                    && *((_DWORD *)v53 + 13) == (_DWORD)v43
                    && !*((_BYTE *)v53 + 48))
                  {
                    goto LABEL_129;
                  }
                }
                else if ((v57 & v55) != v51)
                {
                  goto LABEL_69;
                }
                v53 = (uint64_t *)*v53;
                if (!v53)
                  goto LABEL_69;
              }
            }
            while (1)
            {
              v56 = v53[1];
              if (v56 == v48)
              {
                if (*((unsigned __int8 *)v53 + 40) == v54
                  && __PAIR64__(*((unsigned __int8 *)v53 + 17), *((unsigned __int8 *)v53 + 16)) == __PAIR64__(v39, v34)
                  && *(uint64_t *)((char *)v53 + 20) == v35
                  && *((_DWORD *)v53 + 13) == (_DWORD)v43
                  && *((_BYTE *)v53 + 48)
                  && *((_DWORD *)v53 + 11) == (_DWORD)v44)
                {
                  goto LABEL_129;
                }
              }
              else if ((v56 & v55) != v51)
              {
                goto LABEL_69;
              }
              v53 = (uint64_t *)*v53;
              if (!v53)
                goto LABEL_69;
            }
          }
          if (!v45)
          {
            while (1)
            {
              v59 = v53[1];
              if (v59 == v48)
              {
                if (*((unsigned __int8 *)v53 + 40) == v54
                  && __PAIR64__(*((unsigned __int8 *)v53 + 17), *((unsigned __int8 *)v53 + 16)) == __PAIR64__(v39, v34)
                  && *(uint64_t *)((char *)v53 + 20) == v35
                  && *((_DWORD *)v53 + 13) == (_DWORD)v43
                  && !*((_BYTE *)v53 + 48))
                {
                  goto LABEL_129;
                }
              }
              else
              {
                if (v59 >= v49)
                  v59 %= v49;
                if (v59 != v51)
                  goto LABEL_69;
              }
              v53 = (uint64_t *)*v53;
              if (!v53)
                goto LABEL_69;
            }
          }
          do
          {
            v58 = v53[1];
            if (v58 == v48)
            {
              if (*((unsigned __int8 *)v53 + 40) == v54
                && __PAIR64__(*((unsigned __int8 *)v53 + 17), *((unsigned __int8 *)v53 + 16)) == __PAIR64__(v39, v34)
                && *(uint64_t *)((char *)v53 + 20) == v35
                && *((_DWORD *)v53 + 13) == (_DWORD)v43
                && *((_BYTE *)v53 + 48)
                && *((_DWORD *)v53 + 11) == (_DWORD)v44)
              {
                goto LABEL_129;
              }
            }
            else
            {
              if (v58 >= v49)
                v58 %= v49;
              if (v58 != v51)
                break;
            }
            v53 = (uint64_t *)*v53;
          }
          while (v53);
        }
      }
    }
LABEL_69:
    v60 = (char *)operator new(0x40uLL);
    *(_QWORD *)v60 = 0;
    *((_QWORD *)v60 + 1) = v48;
    v60[16] = *a3;
    v60[17] = v39;
    *(_QWORD *)(v60 + 20) = v94;
    *(_OWORD *)(v60 + 40) = *(_OWORD *)v36;
    *((_QWORD *)v60 + 7) = v32;
    v61 = (float)(unint64_t)(*(_QWORD *)(a2 + 32) + 1);
    v62 = *(float *)(a2 + 40);
    if (v49 && (float)(v62 * (float)v49) >= v61)
    {
      v48 = v93;
      goto LABEL_119;
    }
    v63 = 1;
    if (v49 >= 3)
      v63 = (v49 & (v49 - 1)) != 0;
    v64 = v63 | (2 * v49);
    v65 = vcvtps_u32_f32(v61 / v62);
    if (v64 <= v65)
      prime = v65;
    else
      prime = v64;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v49 = *(_QWORD *)(a2 + 16);
    }
    if (prime <= v49)
    {
      if (prime >= v49)
        goto LABEL_107;
      v78 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 32) / *(float *)(a2 + 40));
      if (v49 < 3 || (v79 = (uint8x8_t)vcnt_s8((int8x8_t)v49), v79.i16[0] = vaddlv_u8(v79), v79.u32[0] > 1uLL))
      {
        v78 = std::__next_prime(v78);
      }
      else
      {
        v80 = 1 << -(char)__clz(v78 - 1);
        if (v78 >= 2)
          v78 = v80;
      }
      if (prime <= v78)
        prime = v78;
      if (prime >= v49)
      {
        v49 = *(_QWORD *)(a2 + 16);
LABEL_107:
        if ((v49 & (v49 - 1)) != 0)
        {
          if (v48 >= v49)
            v48 %= v49;
        }
        else
        {
          v48 &= v49 - 1;
        }
LABEL_119:
        v84 = (_QWORD *)*v8;
        v85 = *(_QWORD **)(*v8 + 8 * v48);
        if (v85)
        {
          *(_QWORD *)v60 = *v85;
        }
        else
        {
          *(_QWORD *)v60 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a2 + 24) = v60;
          v84[v48] = a2 + 24;
          if (!*(_QWORD *)v60)
            goto LABEL_128;
          v86 = *(_QWORD *)(*(_QWORD *)v60 + 8);
          if ((v49 & (v49 - 1)) != 0)
          {
            if (v86 >= v49)
              v86 %= v49;
          }
          else
          {
            v86 &= v49 - 1;
          }
          v85 = (_QWORD *)(*v8 + 8 * v86);
        }
        *v85 = v60;
LABEL_128:
        ++*(_QWORD *)(a2 + 32);
        v38 = *(_QWORD *)(a2 + 64);
LABEL_129:
        while (v38 > *(_QWORD *)a2)
        {
          v87 = *(char **)(a2 + 48);
          *(_WORD *)__p = *((_WORD *)v87 + 8);
          *(_QWORD *)&__p[4] = *(_QWORD *)(v87 + 20);
          v108 = *(_OWORD *)(v87 + 40);
          v109 = *(_OWORD *)(v87 + 56);
          v110 = *((_QWORD *)v87 + 9);
          v111 = *((_OWORD *)v87 + 5);
          v112 = *((_QWORD *)v87 + 12);
          v113 = *((_QWORD *)v87 + 13);
          v88 = *((_OWORD *)v87 + 9);
          v89 = *((_OWORD *)v87 + 7);
          v115 = *((_OWORD *)v87 + 8);
          v116 = v88;
          v114 = v89;
          v90 = *(_QWORD *)v87;
          *(_QWORD *)(v90 + 8) = *((_QWORD *)v87 + 1);
          **((_QWORD **)v87 + 1) = v90;
          *(_QWORD *)(a2 + 64) = v38 - 1;
          operator delete(v87);
          v91 = std::__hash_table<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,true>,std::__unordered_map_equal<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<md::FlyoverOctile>,md::FlyoverOctileHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<md::FlyoverOctile>(v8, __p);
          if (v91)
          {
            std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&v117, v8, v91);
            if (v117)
              operator delete(v117);
          }
          v38 = *(_QWORD *)(a2 + 64);
        }
        *(_QWORD *)a1 = v99;
        *(_QWORD *)(a1 + 8) = v98;
        *(_QWORD *)(a1 + 16) = v21;
        *(_QWORD *)(a1 + 24) = v22;
        *(_OWORD *)(a1 + 32) = v24;
        *(_QWORD *)(a1 + 48) = v23;
        *(_QWORD *)(a1 + 56) = v25;
        *(_QWORD *)(a1 + 64) = v97;
        *(_QWORD *)(a1 + 72) = v96;
        *(_QWORD *)(a1 + 80) = v95;
        *(_QWORD *)(a1 + 88) = v26;
        *(_QWORD *)(a1 + 96) = v27;
        goto LABEL_136;
      }
      if (!prime)
      {
        v92 = (_QWORD *)*v8;
        *v8 = 0;
        if (v92)
          operator delete(v92);
        v49 = 0;
        *(_QWORD *)(a2 + 16) = 0;
        goto LABEL_107;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v67 = operator new(8 * prime);
    v68 = (_QWORD *)*v8;
    *v8 = v67;
    if (v68)
      operator delete(v68);
    v69 = 0;
    *(_QWORD *)(a2 + 16) = prime;
    do
      *(_QWORD *)(*v8 + 8 * v69++) = 0;
    while (prime != v69);
    v71 = a2 + 24;
    v70 = *(_QWORD **)(a2 + 24);
    if (!v70)
    {
LABEL_106:
      v49 = prime;
      goto LABEL_107;
    }
    v72 = v70[1];
    v73 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v74 = v72 & v73;
      *(_QWORD *)(*v8 + 8 * v74) = v71;
      for (i = (_QWORD *)*v70; *v70; i = (_QWORD *)*v70)
      {
        v76 = i[1] & v73;
        if (v76 == v74)
        {
          v70 = i;
        }
        else if (*(_QWORD *)(*v8 + 8 * v76))
        {
          *v70 = *i;
          v77 = 8 * v76;
          *i = **(_QWORD **)(*v8 + v77);
          **(_QWORD **)(*v8 + v77) = i;
        }
        else
        {
          *(_QWORD *)(*v8 + 8 * v76) = v70;
          v70 = i;
          v74 = v76;
        }
      }
      goto LABEL_106;
    }
    if (v72 >= prime)
      v72 %= prime;
    *(_QWORD *)(*v8 + 8 * v72) = v71;
    v81 = (_QWORD *)*v70;
    if (!*v70)
      goto LABEL_106;
    while (1)
    {
      v83 = v81[1];
      if (v83 >= prime)
        v83 %= prime;
      if (v83 != v72)
      {
        if (!*(_QWORD *)(*v8 + 8 * v83))
        {
          *(_QWORD *)(*v8 + 8 * v83) = v70;
          goto LABEL_111;
        }
        *v70 = *v81;
        v82 = 8 * v83;
        *v81 = **(_QWORD **)(*v8 + v82);
        **(_QWORD **)(*v8 + v82) = v81;
        v81 = v70;
      }
      v83 = v72;
LABEL_111:
      v70 = v81;
      v81 = (_QWORD *)*v81;
      v72 = v83;
      if (!v81)
        goto LABEL_106;
    }
  }
  v15 = v10[19];
  v16 = *(_OWORD *)(v10 + 9);
  *(_OWORD *)a1 = *(_OWORD *)(v10 + 7);
  *(_OWORD *)(a1 + 16) = v16;
  v17 = *(_OWORD *)(v10 + 13);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v10 + 11);
  *(_OWORD *)(a1 + 48) = v17;
  v18 = *(_OWORD *)(v10 + 17);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v10 + 15);
  *(_OWORD *)(a1 + 80) = v18;
  *(_QWORD *)(a1 + 96) = v15;
LABEL_136:
  *(_BYTE *)(a1 + 104) = 1;
}

void sub_19F8E0CC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,true>,std::__unordered_map_equal<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<md::FlyoverOctile>,md::FlyoverOctileHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<md::FlyoverOctile>(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int8x8_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *result;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v2 = *(_QWORD *)(a2 + 28);
  v3 = v2 & 0xFF00000000;
  if ((v2 & 0xFF00000000) != 0)
    v4 = 2 * *(_QWORD *)(a2 + 28);
  else
    v4 = 0;
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = *a2;
  v7 = a2[1];
  v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  v9 = *((int *)a2 + 1);
  v10 = *((int *)a2 + 2);
  v11 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  v12 = *((unsigned int *)a2 + 9);
  v13 = (v4 | (v12 << 33)) ^ v11 ^ (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL);
  v14 = (uint8x8_t)vcnt_s8(v5);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = v13;
    if (v13 >= *(_QWORD *)&v5)
      v15 = v13 % *(_QWORD *)&v5;
  }
  else
  {
    v15 = v13 & (*(_QWORD *)&v5 - 1);
  }
  v16 = *(uint64_t ***)(*a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = *v16;
  if (!v17)
    return 0;
  v18 = a2[24];
  if (v14.u32[0] <= 1uLL)
  {
    v19 = *(_QWORD *)&v5 - 1;
    if (!v3)
    {
      while (1)
      {
        v22 = v17[1];
        if (v22 == v13)
        {
          if (*((unsigned __int8 *)v17 + 40) == v18
            && __PAIR64__(*((unsigned __int8 *)v17 + 17), *((unsigned __int8 *)v17 + 16)) == __PAIR64__(v7, v6)
            && *(uint64_t *)((char *)v17 + 20) == __PAIR64__(v10, v9)
            && *((_DWORD *)v17 + 13) == (_DWORD)v12
            && !*((_BYTE *)v17 + 48))
          {
            return v17;
          }
        }
        else if ((v22 & v19) != v15)
        {
          return 0;
        }
        result = 0;
        v17 = (uint64_t *)*v17;
        if (!v17)
          return result;
      }
    }
    while (1)
    {
      v20 = v17[1];
      if (v20 == v13)
      {
        if (*((unsigned __int8 *)v17 + 40) == v18
          && __PAIR64__(*((unsigned __int8 *)v17 + 17), *((unsigned __int8 *)v17 + 16)) == __PAIR64__(v7, v6)
          && *(uint64_t *)((char *)v17 + 20) == __PAIR64__(v10, v9)
          && *((_DWORD *)v17 + 13) == (_DWORD)v12
          && *((_BYTE *)v17 + 48)
          && *((_DWORD *)v17 + 11) == (_DWORD)v2)
        {
          return v17;
        }
      }
      else if ((v20 & v19) != v15)
      {
        return 0;
      }
      v17 = (uint64_t *)*v17;
      if (!v17)
        return 0;
    }
  }
  if (!v3)
  {
    while (1)
    {
      v24 = v17[1];
      if (v24 == v13)
      {
        if (*((unsigned __int8 *)v17 + 40) == v18
          && __PAIR64__(*((unsigned __int8 *)v17 + 17), *((unsigned __int8 *)v17 + 16)) == __PAIR64__(v7, v6)
          && *(uint64_t *)((char *)v17 + 20) == __PAIR64__(v10, v9)
          && *((_DWORD *)v17 + 13) == (_DWORD)v12
          && !*((_BYTE *)v17 + 48))
        {
          return v17;
        }
      }
      else
      {
        if (v24 >= *(_QWORD *)&v5)
          v24 %= *(_QWORD *)&v5;
        if (v24 != v15)
          return 0;
      }
      result = 0;
      v17 = (uint64_t *)*v17;
      if (!v17)
        return result;
    }
  }
  while (1)
  {
    v23 = v17[1];
    if (v23 == v13)
      break;
    if (v23 >= *(_QWORD *)&v5)
      v23 %= *(_QWORD *)&v5;
    if (v23 != v15)
      return 0;
LABEL_37:
    v17 = (uint64_t *)*v17;
    if (!v17)
      return 0;
  }
  if (*((unsigned __int8 *)v17 + 40) != v18
    || __PAIR64__(*((unsigned __int8 *)v17 + 17), *((unsigned __int8 *)v17 + 16)) != __PAIR64__(v7, v6)
    || *(uint64_t *)((char *)v17 + 20) != __PAIR64__(v10, v9)
    || *((_DWORD *)v17 + 13) != (_DWORD)v12
    || !*((_BYTE *)v17 + 48)
    || *((_DWORD *)v17 + 11) != (_DWORD)v2)
  {
    goto LABEL_37;
  }
  return v17;
}

void std::__hash_table<md::FlyoverOctile,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,std::allocator<md::FlyoverOctile>>::__emplace_unique_key_args<md::FlyoverOctile,md::FlyoverOctile const&>(float *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t **v21;
  uint64_t *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  float v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  size_t v41;
  size_t v42;
  size_t v43;
  _QWORD *i;
  size_t v45;
  uint64_t v46;
  unint64_t v47;
  uint8x8_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  size_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  _QWORD *v56;

  v6 = *a2;
  v7 = a2[1];
  v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  v9 = *((int *)a2 + 1);
  v10 = *((int *)a2 + 2);
  v11 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  v12 = v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL;
  v13 = *((unsigned int *)a2 + 9);
  v14 = *(_QWORD *)(a2 + 28);
  v15 = v14 & 0xFF00000000;
  v16 = 2 * v14;
  if ((v14 & 0xFF00000000) == 0)
    v16 = 0;
  v17 = (v16 | (v13 << 33)) ^ v11;
  v18 = v17 ^ v12;
  v19 = *((_QWORD *)a1 + 1);
  if (v19)
  {
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      v3 = v17 ^ v12;
      if (v18 >= v19)
        v3 = v18 % v19;
    }
    else
    {
      v3 = v18 & (v19 - 1);
    }
    v21 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
      v22 = *v21;
      if (v22)
      {
        v23 = a2[24];
        if (v20.u32[0] <= 1uLL)
        {
          v24 = v19 - 1;
          if (!v15)
          {
            while (1)
            {
              v26 = v22[1];
              if (v26 == v18)
              {
                if (*((unsigned __int8 *)v22 + 40) == v23
                  && __PAIR64__(*((unsigned __int8 *)v22 + 17), *((unsigned __int8 *)v22 + 16)) == __PAIR64__(v7, v6)
                  && *(uint64_t *)((char *)v22 + 20) == __PAIR64__(v10, v9)
                  && *((_DWORD *)v22 + 13) == (_DWORD)v13
                  && !*((_BYTE *)v22 + 48))
                {
                  return;
                }
              }
              else if ((v26 & v24) != v3)
              {
                goto LABEL_58;
              }
              v22 = (uint64_t *)*v22;
              if (!v22)
                goto LABEL_58;
            }
          }
          while (1)
          {
            v25 = v22[1];
            if (v25 == v18)
            {
              if (*((unsigned __int8 *)v22 + 40) == v23
                && __PAIR64__(*((unsigned __int8 *)v22 + 17), *((unsigned __int8 *)v22 + 16)) == __PAIR64__(v7, v6)
                && *(uint64_t *)((char *)v22 + 20) == __PAIR64__(v10, v9)
                && *((_DWORD *)v22 + 13) == (_DWORD)v13
                && *((_BYTE *)v22 + 48)
                && *((_DWORD *)v22 + 11) == (_DWORD)v14)
              {
                return;
              }
            }
            else if ((v25 & v24) != v3)
            {
              goto LABEL_58;
            }
            v22 = (uint64_t *)*v22;
            if (!v22)
              goto LABEL_58;
          }
        }
        if (!v15)
        {
          while (1)
          {
            v28 = v22[1];
            if (v28 == v18)
            {
              if (*((unsigned __int8 *)v22 + 40) == v23
                && __PAIR64__(*((unsigned __int8 *)v22 + 17), *((unsigned __int8 *)v22 + 16)) == __PAIR64__(v7, v6)
                && *(uint64_t *)((char *)v22 + 20) == __PAIR64__(v10, v9)
                && *((_DWORD *)v22 + 13) == (_DWORD)v13
                && !*((_BYTE *)v22 + 48))
              {
                return;
              }
            }
            else
            {
              if (v28 >= v19)
                v28 %= v19;
              if (v28 != v3)
                goto LABEL_58;
            }
            v22 = (uint64_t *)*v22;
            if (!v22)
              goto LABEL_58;
          }
        }
        do
        {
          v27 = v22[1];
          if (v27 == v18)
          {
            if (*((unsigned __int8 *)v22 + 40) == v23
              && __PAIR64__(*((unsigned __int8 *)v22 + 17), *((unsigned __int8 *)v22 + 16)) == __PAIR64__(v7, v6)
              && *(uint64_t *)((char *)v22 + 20) == __PAIR64__(v10, v9)
              && *((_DWORD *)v22 + 13) == (_DWORD)v13
              && *((_BYTE *)v22 + 48)
              && *((_DWORD *)v22 + 11) == (_DWORD)v14)
            {
              return;
            }
          }
          else
          {
            if (v27 >= v19)
              v27 %= v19;
            if (v27 != v3)
              break;
          }
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
    }
  }
LABEL_58:
  v29 = (char *)operator new(0x38uLL);
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = v18;
  *((_WORD *)v29 + 8) = *(_WORD *)a3;
  *(_QWORD *)(v29 + 20) = *(_QWORD *)(a3 + 4);
  *(_OWORD *)(v29 + 40) = *(_OWORD *)(a3 + 24);
  v30 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v31 = a1[8];
  if (!v19 || (float)(v31 * (float)v19) < v30)
  {
    v32 = 1;
    if (v19 >= 3)
      v32 = (v19 & (v19 - 1)) != 0;
    v33 = v32 | (2 * v19);
    v34 = vcvtps_u32_f32(v30 / v31);
    if (v33 <= v34)
      prime = v34;
    else
      prime = v33;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v19 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v19)
    {
      if (prime >= v19)
        goto LABEL_95;
      v47 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v19 < 3 || (v48 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v48.i16[0] = vaddlv_u8(v48), v48.u32[0] > 1uLL))
      {
        v47 = std::__next_prime(v47);
      }
      else
      {
        v49 = 1 << -(char)__clz(v47 - 1);
        if (v47 >= 2)
          v47 = v49;
      }
      if (prime <= v47)
        prime = v47;
      if (prime >= v19)
      {
        v19 = *((_QWORD *)a1 + 1);
LABEL_95:
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v18 >= v19)
            v3 = v18 % v19;
          else
            v3 = v18;
        }
        else
        {
          v3 = (v19 - 1) & v18;
        }
        goto LABEL_108;
      }
      if (!prime)
      {
        v56 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v56)
          operator delete(v56);
        v19 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_95;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v36 = operator new(8 * prime);
    v37 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v36;
    if (v37)
      operator delete(v37);
    v38 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v38++) = 0;
    while (prime != v38);
    v40 = (uint64_t *)(a1 + 4);
    v39 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v39)
    {
LABEL_94:
      v19 = prime;
      goto LABEL_95;
    }
    v41 = v39[1];
    v42 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v43 = v41 & v42;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v40;
      for (i = (_QWORD *)*v39; *v39; i = (_QWORD *)*v39)
      {
        v45 = i[1] & v42;
        if (v45 == v43)
        {
          v39 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v45))
        {
          *v39 = *i;
          v46 = 8 * v45;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v46);
          **(_QWORD **)(*(_QWORD *)a1 + v46) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v39;
          v39 = i;
          v43 = v45;
        }
      }
      goto LABEL_94;
    }
    if (v41 >= prime)
      v41 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v40;
    v50 = (_QWORD *)*v39;
    if (!*v39)
      goto LABEL_94;
    while (1)
    {
      v52 = v50[1];
      if (v52 >= prime)
        v52 %= prime;
      if (v52 != v41)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v52))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v52) = v39;
          goto LABEL_99;
        }
        *v39 = *v50;
        v51 = 8 * v52;
        *v50 = **(_QWORD **)(*(_QWORD *)a1 + v51);
        **(_QWORD **)(*(_QWORD *)a1 + v51) = v50;
        v50 = v39;
      }
      v52 = v41;
LABEL_99:
      v39 = v50;
      v50 = (_QWORD *)*v50;
      v41 = v52;
      if (!v50)
        goto LABEL_94;
    }
  }
LABEL_108:
  v53 = *(_QWORD **)a1;
  v54 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v54)
  {
    *(_QWORD *)v29 = *v54;
LABEL_116:
    *v54 = v29;
    goto LABEL_117;
  }
  *(_QWORD *)v29 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v29;
  v53[v3] = a1 + 4;
  if (*(_QWORD *)v29)
  {
    v55 = *(_QWORD *)(*(_QWORD *)v29 + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v55 >= v19)
        v55 %= v19;
    }
    else
    {
      v55 &= v19 - 1;
    }
    v54 = (_QWORD *)(*(_QWORD *)a1 + 8 * v55);
    goto LABEL_116;
  }
LABEL_117:
  ++*((_QWORD *)a1 + 3);
}

void sub_19F8E1644(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::FlyoverSelectionContext::selectBestFitOctiles(uint64_t a1, uint64_t a2, float *a3, uint64_t a4)
{
  double *v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  float v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v20;
  double v21;
  double v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  float v27;
  double v28;
  uint64_t v29;
  double v31;
  double v32;
  int v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  char v54;
  _BYTE v55[24];

  if (!*(_BYTE *)(a2 + 24))
    return 0;
  if (*(unsigned __int8 *)(a2 + 1) >= 0x15u || !(_DWORD)a4 || *(unsigned __int8 *)(a2 + 24) > 1u)
    goto LABEL_19;
  if (*(_BYTE *)(a1 + 82) == 1)
    v8 = (double *)(a1 + 168);
  else
    v8 = *(double **)(a1 + 144);
  md::FlyoverMetaData::elevationBoundsForHeightTile((md::FlyoverMetaData *)v55, ***(QuadTile ****)(a1 + 136), a2, *(unsigned int *)(a2 + 36));
  md::FlyoverSelectionContext::getTileBound((uint64_t)&v49, *(_QWORD *)(a1 + 152), (unsigned __int8 *)a2, (uint64_t)v55);
  if (!v54)
    goto LABEL_34;
  v9 = v53 - v52 >= 0.0 ? (v53 - v52) * 0.5 : 0.0;
  v10 = v8[66];
  v11 = v8[65];
  v47 = v8[68];
  v48 = v8[67];
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "flyoverOctileLODMaxRefineDistance");
  v14 = v13 * 1000.0;

  v15 = v49 - v8[62];
  v16 = v50 - v8[63];
  v17 = v51 - v8[64];
  v18 = sqrt(v15 * v15 + v16 * v16 + v17 * v17);
  if (v18 <= v9 || v18 > v14)
    goto LABEL_34;
  v44 = v11;
  v45 = v10;
  v46 = v9;
  v43 = v8[46];
  v41 = v8[121];
  v42 = v8[47];
  v38 = v8[148];
  v39 = v8[147];
  v40 = v8[149];
  v20 = v8[153];
  v21 = v8[154];
  v22 = v8[155];
  v35 = v8[166];
  v36 = v8[165];
  v37 = v8[167];
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "flyoverOctileLODConstant");
  v24 = sqrt(((v36 - v20) * (v36 - v20) + (v35 - v21) * (v35 - v21) + (v37 - v22) * (v37 - v22))* ((v39 - v20) * (v39 - v20) + (v38 - v21) * (v38 - v21) + (v40 - v22) * (v40 - v22)));
  v25 = fmax(v15 * -((v44 + v44) * v48 - v47 * (v45 * -2.0))+ v16 * (v45 * -2.0 * v48 + (v44 + v44) * v47)+ v17 * -(v45 * -2.0 * v45 + 1.0 - (v44 + v44) * v44), 0.01);
  v26 = v41 * v46 / v25 * (v41 * v46 / v25) * (3.14159265 * v43 * v42);
  v28 = fmax(1.0 - v18 / v14, 0.0) * v27;

  if ((double)(a4 * a4) * 0.0785398163 * v24 / v26 >= v28 * v28)
  {
LABEL_34:
    if (*(_BYTE *)(a2 + 24))
    {
LABEL_19:
      std::__hash_table<md::FlyoverOctile,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,std::allocator<md::FlyoverOctile>>::__emplace_unique_key_args<md::FlyoverOctile,md::FlyoverOctile const&>(a3, (unsigned __int8 *)a2, a2);
      return 1;
    }
    return 0;
  }
  v49 = 0.0;
  v50 = 0.0;
  v51 = 0.0;
  md::FlyoverCommon::selectChildren(*(QuadTile ****)(a1 + 136), a2, &v49, (void **)(a1 + 88));
  v31 = v49;
  v32 = v50;
  if (*(_QWORD *)&v49 != *(_QWORD *)&v50)
  {
    v33 = 0;
    v34 = v49;
    do
    {
      v33 |= md::FlyoverSelectionContext::selectBestFitOctiles(a1, *(_QWORD *)&v34, a3, a4);
      *(_QWORD *)&v34 += 40;
    }
    while (*(_QWORD *)&v34 != *(_QWORD *)&v32);
    if ((v33 & 1) != 0)
      goto LABEL_28;
  }
  if (*(_BYTE *)(a2 + 24))
  {
    std::__hash_table<md::FlyoverOctile,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,std::allocator<md::FlyoverOctile>>::__emplace_unique_key_args<md::FlyoverOctile,md::FlyoverOctile const&>(a3, (unsigned __int8 *)a2, a2);
LABEL_28:
    v29 = 1;
    goto LABEL_30;
  }
  v29 = 0;
LABEL_30:
  if (v31 != 0.0)
    operator delete(*(void **)&v31);
  return v29;
}

void sub_19F8E19F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  void *v24;

  if (!v24)
    _Unwind_Resume(exception_object);
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<geo::QuadTile,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>>::~pair(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[7];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[5];
      v2[5] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<md::FlyoverTileDataResolverContext::resolver(void)::$_0,std::allocator<md::FlyoverTileDataResolverContext::resolver(void)::$_0>,std::unique_ptr<md::TileDependencySelectionContext> ()(unsigned short,md::MapDataType,md::TileDependencyResolvingType,gdc::TileSelection const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverTileDataResolverContext::resolver(void)::$_0,std::allocator<md::FlyoverTileDataResolverContext::resolver(void)::$_0>,std::unique_ptr<md::TileDependencySelectionContext> ()(unsigned short,md::MapDataType,md::TileDependencyResolvingType,gdc::TileSelection const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D9290;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::FlyoverTileDataResolverContext::resolver(void)::$_0,std::allocator<md::FlyoverTileDataResolverContext::resolver(void)::$_0>,std::unique_ptr<md::TileDependencySelectionContext> ()(unsigned short,md::MapDataType,md::TileDependencyResolvingType,gdc::TileSelection const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D9290;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::FlyoverTileDataResolverContext::resolver(void)::$_0,std::allocator<md::FlyoverTileDataResolverContext::resolver(void)::$_0>,std::unique_ptr<md::TileDependencySelectionContext> ()(unsigned short,md::MapDataType,md::TileDependencyResolvingType,gdc::TileSelection const&)>::operator()@<X0>(uint64_t a1@<X0>, __int16 *a2@<X1>, char *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  __int16 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *result;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *a2;
  v7 = *a3;
  v8 = operator new();
  v9 = v8;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_QWORD *)(v8 + 40) = 0;
  *(_DWORD *)(v8 + 48) = 1065353216;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)v8 = &off_1E429E7C8;
  *(_WORD *)(v8 + 80) = v6;
  *(_BYTE *)(v8 + 82) = v7;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  v10 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)(v8 + 136) = *(_OWORD *)v5;
  *(_OWORD *)(v8 + 152) = v10;
  *(_BYTE *)(v8 + 168) = *(_BYTE *)(v5 + 32);
  *(_QWORD *)(v8 + 176) = *(_QWORD *)(v5 + 40);
  *(_OWORD *)(v8 + 184) = *(_OWORD *)(v5 + 48);
  *(_OWORD *)(v8 + 200) = *(_OWORD *)(v5 + 64);
  *(_QWORD *)(v8 + 216) = *(_QWORD *)(v5 + 80);
  *(_QWORD *)(v8 + 224) = *(_QWORD *)(v5 + 88);
  *(_QWORD *)(v8 + 232) = *(_QWORD *)(v5 + 96);
  *(_QWORD *)(v8 + 240) = *(_QWORD *)(v5 + 104);
  v11 = *(_OWORD *)(v5 + 112);
  v12 = *(_OWORD *)(v5 + 128);
  v13 = *(_OWORD *)(v5 + 144);
  *(_QWORD *)(v8 + 296) = *(_QWORD *)(v5 + 160);
  *(_OWORD *)(v8 + 264) = v12;
  *(_OWORD *)(v8 + 280) = v13;
  *(_OWORD *)(v8 + 248) = v11;
  *(_OWORD *)(v8 + 304) = *(_OWORD *)(v5 + 168);
  v14 = *(_OWORD *)(v5 + 184);
  v15 = *(_OWORD *)(v5 + 200);
  v16 = *(_OWORD *)(v5 + 232);
  *(_OWORD *)(v8 + 352) = *(_OWORD *)(v5 + 216);
  *(_OWORD *)(v8 + 368) = v16;
  *(_OWORD *)(v8 + 320) = v14;
  *(_OWORD *)(v8 + 336) = v15;
  v17 = *(_OWORD *)(v5 + 248);
  v18 = *(_OWORD *)(v5 + 264);
  v19 = *(_OWORD *)(v5 + 296);
  *(_OWORD *)(v8 + 416) = *(_OWORD *)(v5 + 280);
  *(_OWORD *)(v8 + 432) = v19;
  *(_OWORD *)(v8 + 384) = v17;
  *(_OWORD *)(v8 + 400) = v18;
  v20 = *(_OWORD *)(v5 + 312);
  v21 = *(_OWORD *)(v5 + 328);
  v22 = *(_OWORD *)(v5 + 344);
  *(_QWORD *)(v8 + 496) = *(_QWORD *)(v5 + 360);
  *(_OWORD *)(v8 + 464) = v21;
  *(_OWORD *)(v8 + 480) = v22;
  *(_OWORD *)(v8 + 448) = v20;
  *(_BYTE *)(v8 + 504) = 0;
  if (*(_BYTE *)(v5 + 368))
  {
    *(_QWORD *)(v8 + 512) = *(_QWORD *)(v5 + 376);
    *(_BYTE *)(v8 + 504) = 1;
  }
  *(_BYTE *)(v8 + 520) = 0;
  if (*(_BYTE *)(v5 + 384))
  {
    *(_QWORD *)(v8 + 528) = *(_QWORD *)(v5 + 392);
    *(_BYTE *)(v8 + 520) = 1;
  }
  *(_OWORD *)(v8 + 536) = *(_OWORD *)(v5 + 400);
  *(_OWORD *)(v8 + 552) = *(_OWORD *)(v5 + 416);
  v23 = *(_OWORD *)(v5 + 432);
  v24 = *(_OWORD *)(v5 + 448);
  v25 = *(_OWORD *)(v5 + 464);
  *(_DWORD *)(v8 + 616) = *(_DWORD *)(v5 + 480);
  *(_OWORD *)(v8 + 584) = v24;
  *(_OWORD *)(v8 + 600) = v25;
  *(_OWORD *)(v8 + 568) = v23;
  *(_OWORD *)(v8 + 624) = *(_OWORD *)(v5 + 488);
  *(_QWORD *)(v8 + 640) = *(_QWORD *)(v5 + 504);
  *(_OWORD *)(v8 + 648) = *(_OWORD *)(v5 + 512);
  geo::View<double>::View(v8 + 664, (__int128 *)(v5 + 528), (double *)(v5 + 584), (__int128 *)(v5 + 712), (_WORD *)(v5 + 984), *(_DWORD *)(v5 + 988), *(double *)(v5 + 968));
  *(_OWORD *)(v9 + 1128) = *(_OWORD *)(v5 + 992);
  *(_QWORD *)(v9 + 1144) = *(_QWORD *)(v5 + 1008);
  result = memcpy((void *)(v9 + 1152), (const void *)(v5 + 1016), 0x180uLL);
  *a4 = v9;
  return result;
}

void std::__function::__func<md::FlyoverTileDataLogic::FlyoverTileDataLogic(md::World *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::FlyoverTileDataLogic::FlyoverTileDataLogic(md::World *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverTileDataLogic::FlyoverTileDataLogic(md::World *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::FlyoverTileDataLogic::FlyoverTileDataLogic(md::World *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427A188;
  return result;
}

void std::__function::__func<md::FlyoverTileDataLogic::FlyoverTileDataLogic(md::World *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::FlyoverTileDataLogic::FlyoverTileDataLogic(md::World *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427A188;
}

void std::__function::__func<md::FlyoverTileDataLogic::FlyoverTileDataLogic(md::World *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::FlyoverTileDataLogic::FlyoverTileDataLogic(md::World *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::operator()()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:", CFSTR("VKShouldFlushTileCachesNotification"), 0);

}

void sub_19F8E1E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double md::Logic<md::FlyoverTileDataLogic,md::FlyoverTileDataResolverContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  int64x2_t *v2;
  double result;
  int64x2_t v4;
  int64x2_t v5;

  v2 = (int64x2_t *)(a1 + 264);
  bzero((void *)a1, 0x578uLL);
  *(int64x2_t *)(a1 + 40) = vdupq_n_s64(0xC00921FB54442D18);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  v4 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 168) = v4;
  v5 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(int64x2_t *)(a1 + 184) = v5;
  *(int64x2_t *)(a1 + 200) = v4;
  *(int64x2_t *)(a1 + 216) = v5;
  *(int64x2_t *)(a1 + 232) = v4;
  *(int64x2_t *)(a1 + 248) = v5;
  *v2 = v4;
  v2[1] = v5;
  v2[2] = v4;
  v2[3] = v5;
  v2[4] = v4;
  v2[5] = v5;
  *(_BYTE *)(a1 + 360) = 1;
  *(_BYTE *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 496) = xmmword_19FFB4C90;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_QWORD *)(a1 + 576) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 968) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 976) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 988) = 2;
  return result;
}

void ggl::Debug::InstancedBasePipelineSetup::~InstancedBasePipelineSetup(ggl::Debug::InstancedBasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Debug::InstancedBasePipelineSetup::constantDataIsEnabled(ggl::Debug::InstancedBasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::Debug::InstancedBasePipelineSetup::textureIsEnabled(ggl::Debug::InstancedBasePipelineSetup *this)
{
  return 0;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderState>(gdc::Entity,md::ls::RenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderState>(gdc::Entity,md::ls::RenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427D938;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderState>(gdc::Entity,md::ls::RenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427D938;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderState>(gdc::Entity,md::ls::RenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::RenderState>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

unint64_t geo::packed_array<md::RenderStateStorage,geo::handle<md::RenderStateItem>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;

  v4 = a1[1];
  if (*a1 == v4)
  {
    v7 = ((a1[7] - a1[6]) >> 3) | 0x100000000;
    v9 = (uint64_t *)a1[4];
    v8 = a1[5];
    if ((unint64_t)v9 >= v8)
    {
      v11 = (uint64_t *)a1[3];
      v12 = v9 - v11;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        goto LABEL_72;
      v14 = v8 - (_QWORD)v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          goto LABEL_73;
        v16 = operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = (uint64_t *)&v16[8 * v12];
      v18 = &v16[8 * v15];
      *v17 = v7;
      v10 = v17 + 1;
      if (v9 == v11)
      {
        v11 = v9;
      }
      else
      {
        v19 = (char *)v9 - (char *)v11 - 8;
        if (v19 < 0x58)
          goto LABEL_76;
        if ((unint64_t)((char *)v11 - v16) < 0x20)
          goto LABEL_76;
        v20 = (v19 >> 3) + 1;
        v21 = &v16[8 * v12 - 16];
        v22 = v9 - 2;
        v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 4;
          v23 -= 4;
        }
        while (v23);
        v17 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        v9 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_76:
          do
          {
            v25 = *--v9;
            *--v17 = v25;
          }
          while (v9 != v11);
          v11 = (uint64_t *)a1[3];
        }
      }
      a1[3] = v17;
      a1[4] = v10;
      a1[5] = v18;
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[4] = v10;
    v6 = *(v10 - 1);
  }
  else
  {
    v5 = *(_QWORD *)(v4 - 8);
    a1[1] = v4 - 8;
    *(_DWORD *)(a1[3] + 8 * v5) = (a1[7] - a1[6]) >> 3;
    *(_DWORD *)(a1[3] + 8 * v5 + 4) = (((unint64_t)*(unsigned int *)(a1[3] + 8 * v5 + 4) << 32) + 0x100000000) >> 32;
    v6 = v5 | ((unint64_t)*(unsigned int *)(a1[3] + 8 * v5 + 4) << 32);
  }
  v27 = (char *)a1[7];
  v26 = a1[8];
  if ((unint64_t)v27 >= v26)
  {
    v29 = (char *)a1[6];
    v30 = (v27 - v29) >> 3;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 61)
      goto LABEL_72;
    v32 = v26 - (_QWORD)v29;
    if (v32 >> 2 > v31)
      v31 = v32 >> 2;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33)
    {
      if (v33 >> 61)
        goto LABEL_73;
      v34 = operator new(8 * v33);
    }
    else
    {
      v34 = 0;
    }
    v35 = &v34[8 * v30];
    *v35 = *a2;
    v28 = v35 + 1;
    if (v27 == v29)
    {
      v29 = v27;
    }
    else
    {
      v36 = v27 - v29 - 8;
      if (v36 < 0x58)
        goto LABEL_77;
      if ((unint64_t)(v29 - v34) < 0x20)
        goto LABEL_77;
      v37 = (v36 >> 3) + 1;
      v38 = &v34[8 * v30 - 16];
      v39 = v27 - 16;
      v40 = v37 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v41 = *(_OWORD *)v39;
        *(v38 - 1) = *((_OWORD *)v39 - 1);
        *v38 = v41;
        v38 -= 2;
        v39 -= 32;
        v40 -= 4;
      }
      while (v40);
      v35 -= v37 & 0x3FFFFFFFFFFFFFFCLL;
      v27 -= 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
      if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_77:
        do
        {
          v42 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          *--v35 = v42;
        }
        while (v27 != v29);
        v29 = (char *)a1[6];
      }
    }
    a1[6] = v35;
    a1[7] = v28;
    a1[8] = &v34[8 * v33];
    if (v29)
      operator delete(v29);
  }
  else
  {
    *(_QWORD *)v27 = *a2;
    v28 = v27 + 8;
  }
  a1[7] = v28;
  v44 = (char *)a1[10];
  v43 = a1[11];
  if ((unint64_t)v44 < v43)
  {
    *(_QWORD *)v44 = v6;
    v45 = v44 + 8;
    goto LABEL_71;
  }
  v46 = (char *)a1[9];
  v47 = (v44 - v46) >> 3;
  v48 = v47 + 1;
  if ((unint64_t)(v47 + 1) >> 61)
LABEL_72:
    abort();
  v49 = v43 - (_QWORD)v46;
  if (v49 >> 2 > v48)
    v48 = v49 >> 2;
  if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
    v50 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v50 = v48;
  if (v50)
  {
    if (!(v50 >> 61))
    {
      v51 = operator new(8 * v50);
      goto LABEL_62;
    }
LABEL_73:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v51 = 0;
LABEL_62:
  v52 = &v51[8 * v47];
  v53 = &v51[8 * v50];
  *v52 = v6;
  v45 = v52 + 1;
  if (v44 != v46)
  {
    v54 = v44 - v46 - 8;
    if (v54 < 0x58)
      goto LABEL_78;
    if ((unint64_t)(v46 - v51) < 0x20)
      goto LABEL_78;
    v55 = (v54 >> 3) + 1;
    v56 = &v51[8 * v47 - 16];
    v57 = v44 - 16;
    v58 = v55 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v59 = *(_OWORD *)v57;
      *(v56 - 1) = *((_OWORD *)v57 - 1);
      *v56 = v59;
      v56 -= 2;
      v57 -= 32;
      v58 -= 4;
    }
    while (v58);
    v52 -= v55 & 0x3FFFFFFFFFFFFFFCLL;
    v44 -= 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
    if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_78:
      do
      {
        v60 = *((_QWORD *)v44 - 1);
        v44 -= 8;
        *--v52 = v60;
      }
      while (v44 != v46);
    }
  }
  a1[9] = v52;
  a1[10] = v45;
  a1[11] = v53;
  if (v46)
    operator delete(v46);
LABEL_71:
  a1[10] = v45;
  return v6;
}

void std::__hash_table<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::hash<geo::handle<md::RenderStateItem>>,std::equal_to<geo::handle<md::RenderStateItem>>,true>,std::__unordered_map_equal<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::equal_to<geo::handle<md::RenderStateItem>>,std::hash<geo::handle<md::RenderStateItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::RenderStateItem>,geo::handle<md::RenderStateItem> const&,md::Counter>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == a2)
            {
              if (v12[2] == a2)
                return;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == a2)
          {
            if (v12[2] == a2)
              return;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = (char *)operator new(0x30uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v7;
  *((_QWORD *)v15 + 2) = a3;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)a4;
  *((_QWORD *)v15 + 5) = *(_QWORD *)(a4 + 16);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_35;
    if (prime < v9)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v9)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v7)
        v7 %= v9;
    }
    else
    {
      v7 &= v9 - 1;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *(_QWORD *)v15 = *v26;
LABEL_58:
    *v26 = v15;
    goto LABEL_59;
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F8E29BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StencilRefValueToUse>(gdc::Entity,md::ls::StencilRefValueToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StencilRefValueToUse>(gdc::Entity,md::ls::StencilRefValueToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427F1B0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StencilRefValueToUse>(gdc::Entity,md::ls::StencilRefValueToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427F1B0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StencilRefValueToUse>(gdc::Entity,md::ls::StencilRefValueToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  _OWORD *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::StencilRefValueToUse>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_39:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_40;
    }
    v15 = v4[10];
    v16 = (unint64_t)&v13[-v15];
    v17 = (uint64_t)&v13[-v15 + 1];
    if (v17 < 0)
      goto LABEL_45;
    v18 = v12 - v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (uint64_t)operator new(v19);
    else
      v20 = 0;
    v21 = (char *)(v20 + v16);
    v22 = (char *)(v20 + v19);
    *(_BYTE *)(v20 + v16) = v5;
    v14 = v20 + v16 + 1;
    if (v13 == (_BYTE *)v15)
    {
      v20 += v16;
      goto LABEL_37;
    }
    if (v16 >= 8 && (unint64_t)(v15 - v20) >= 0x20)
    {
      if (v16 >= 0x20)
      {
        v23 = v16 & 0xFFFFFFFFFFFFFFE0;
        v24 = (__int128 *)(v13 - 16);
        v25 = &v13[v20 - 16 - v15];
        v26 = v16 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v27 = *v24;
          *(v25 - 1) = *(v24 - 1);
          *v25 = v27;
          v25 -= 2;
          v24 -= 2;
          v26 -= 32;
        }
        while (v26);
        if (v16 == v23)
          goto LABEL_31;
        if ((v16 & 0x18) == 0)
        {
          v21 -= v23;
          v13 -= v23;
          goto LABEL_34;
        }
      }
      else
      {
        v23 = 0;
      }
      v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
      v29 = (uint64_t *)&v13[-v23 - 8];
      v30 = (char *)v29 - v15;
      do
      {
        v31 = *v29--;
        *(_QWORD *)&v30[v20] = v31;
        v30 -= 8;
        v28 += 8;
      }
      while (v28);
      if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_31:
        v13 = (_BYTE *)v15;
LABEL_37:
        v4[10] = v20;
        v4[11] = v14;
        v4[12] = (uint64_t)v22;
        if (v13)
          operator delete(v13);
        goto LABEL_39;
      }
      v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
      v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_34:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != (_BYTE *)v15);
    v13 = (_BYTE *)v4[10];
    goto LABEL_37;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_44:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_45:
      abort();
    }
    return;
  }
LABEL_40:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_44;
  }
}

void md::StandardMapEngineMode::didBecomeActive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v6;
  unint64_t v7;
  md::DaVinciGroundRenderLayer *v8;
  md::DaVinciGroundRenderLayer *v9;
  md::DaVinciGroundRenderLayer *v10;

  md::CartographicMapEngineMode::didBecomeActive(a1, a2, a3, a4);
  v6 = *(_QWORD **)(*(_QWORD *)(a3 + 856) + 40);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 856) + 48) - (_QWORD)v6;
  if (v7 < 0xF0)
    return;
  v8 = (md::DaVinciGroundRenderLayer *)v6[29];
  if (v7 < 0xF8)
  {
    v9 = 0;
    v10 = 0;
    if (!v8)
      goto LABEL_10;
    goto LABEL_9;
  }
  v9 = (md::DaVinciGroundRenderLayer *)v6[30];
  if (v7 < 0x108)
  {
    v10 = 0;
    if (!v8)
      goto LABEL_10;
    goto LABEL_9;
  }
  v10 = (md::DaVinciGroundRenderLayer *)v6[32];
  if (v8)
LABEL_9:
    md::DaVinciGroundRenderLayer::setSupportsVKM(v8, *(unsigned __int8 *)(a1 + 568));
LABEL_10:
  if (v9)
    md::DaVinciGroundRenderLayer::setSupportsVKM(v9, *(unsigned __int8 *)(a1 + 568));
  if (v10)
    md::DaVinciGroundRenderLayer::setSupportsVKM(v10, *(unsigned __int8 *)(a1 + 568));
}

uint64_t md::StandardMapEngineMode::StandardMapEngineMode(uint64_t a1, char a2, int a3, char a4)
{
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  int v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  _WORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  _QWORD *v41;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v7 = md::CartographicMapEngineMode::CartographicMapEngineMode(a1, a2);
  *(_QWORD *)v7 = &off_1E429BF10;
  *(_BYTE *)(v7 + 568) = a4;
  *(_QWORD *)(v7 + 536) = 100;
  *(_BYTE *)(v7 + 49) = 1;
  *(_DWORD *)(v7 + 52) = 21;
  v8 = (uint64_t *)(v7 + 384);
  LOWORD(v53) = 2560;
  *((_QWORD *)&v53 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(v7 + 384), (unsigned __int8 *)&v53);
  LOWORD(v53) = 5386;
  *((_QWORD *)&v53 + 1) = 0x3FD657184AE74487;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert(v8, (unsigned __int8 *)&v53);
  LOWORD(v53) = 2560;
  *((_QWORD *)&v53 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 432), (unsigned __int8 *)&v53);
  LOWORD(v53) = 5386;
  *((_QWORD *)&v53 + 1) = 0x3FE0C152382D7365;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 432), (unsigned __int8 *)&v53);
  LOWORD(v53) = 768;
  *((_QWORD *)&v53 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v53);
  LOWORD(v53) = 3843;
  *((_QWORD *)&v53 + 1) = 0x3FE38C35418A5BF6;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v53);
  LOWORD(v53) = 4111;
  *((_QWORD *)&v53 + 1) = 0x3FF0C152382D7365;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v53);
  LOWORD(v53) = 4624;
  *((_QWORD *)&v53 + 1) = 0x3FF38C35418A5BF6;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v53);
  LOWORD(v53) = 5650;
  *((_QWORD *)&v53 + 1) = 0x3FF4F1A6C638D03FLL;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v53);
  if (a3)
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v9, "daVinciCameraController") & 1) != 0)
    {
      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "daVinciCameraControllerForceMercatorZoom");

      if (v11)
        v12 = 2;
      else
        v12 = 1;
    }
    else
    {

      v12 = 2;
    }
    v14 = (_QWORD *)(a1 + 128);
    v13 = *(_QWORD *)(a1 + 128);
    *(_BYTE *)(a1 + 224) = v12;
    *(_BYTE *)(a1 + 225) = 5;
    if (v13)
    {
      while (1)
      {
        while (1)
        {
          v15 = (_QWORD *)v13;
          v16 = *(unsigned __int16 *)(v13 + 26);
          if (v16 < 9)
            break;
          v13 = *v15;
          v14 = v15;
          if (!*v15)
            goto LABEL_15;
        }
        if (v16 == 8)
          break;
        v13 = v15[1];
        if (!v13)
        {
          v14 = v15 + 1;
          goto LABEL_15;
        }
      }
    }
    else
    {
      v15 = (_QWORD *)(a1 + 128);
LABEL_15:
      v17 = operator new(0x20uLL);
      v17[13] = 8;
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = v15;
      *v14 = v17;
      v18 = **(_QWORD **)(a1 + 120);
      if (v18)
      {
        *(_QWORD *)(a1 + 120) = v18;
        v17 = (_WORD *)*v14;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 128), (uint64_t *)v17);
      ++*(_QWORD *)(a1 + 136);
    }
  }
  else
  {
    *(_WORD *)(a1 + 224) = 0;
  }
  LOBYTE(v53) = 0;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0, &v53)+ 17) = 0;
  LOBYTE(v53) = 2;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 2u, &v53)+ 17) = 0;
  LOBYTE(v53) = 51;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x33u, &v53)+ 17) = 0;
  LOBYTE(v53) = 12;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0xCu, &v53)+ 17) = 0;
  LOBYTE(v53) = 16;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x10u, &v53)+ 17) = 0;
  LOBYTE(v53) = 21;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x15u, &v53)+ 17) = 0;
  LOBYTE(v53) = 31;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x1Fu, &v53)+ 17) = 0;
  LOBYTE(v53) = 32;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x20u, &v53)+ 17) = 0;
  LOBYTE(v53) = 28;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x1Cu, &v53)+ 17) = 0;
  LOBYTE(v53) = 24;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x18u, &v53)+ 17) = 0;
  if ((a3 & 1) != 0)
  {
    LOBYTE(v53) = 1;
    v19 = std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 1u, &v53);
  }
  else
  {
    LOBYTE(v53) = 3;
    v19 = std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 3u, &v53);
  }
  *((_BYTE *)v19 + 17) = 0;
  LOBYTE(v53) = 23;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x17u, &v53)+ 17) = 1;
  LOBYTE(v53) = 13;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0xDu, &v53)+ 17) = 1;
  LOBYTE(v53) = 15;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0xFu, &v53)+ 17) = 1;
  LOBYTE(v53) = 44;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x2Cu, &v53)+ 17) = 1;
  LOBYTE(v53) = 40;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x28u, &v53)+ 17) = 1;
  LOBYTE(v53) = 18;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x12u, &v53)+ 17) = 1;
  LOBYTE(v53) = 26;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x1Au, &v53)+ 17) = 2;
  LOBYTE(v53) = 30;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x1Eu, &v53)+ 17) = 2;
  LOBYTE(v53) = 41;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x29u, &v53)+ 17) = 2;
  LOBYTE(v53) = 42;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x2Au, &v53)+ 17) = 2;
  LOBYTE(v53) = 27;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x1Bu, &v53)+ 17) = 2;
  LOBYTE(v53) = 14;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0xEu, &v53)+ 17) = 2;
  LOBYTE(v53) = 17;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x11u, &v53)+ 17) = 2;
  LOBYTE(v53) = 25;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x19u, &v53)+ 17) = 2;
  v20 = a1 + 232;
  *(_QWORD *)&v47 = 0xEA624BC935BAF297;
  *((_QWORD *)&v47 + 1) = "md::mun::MuninLogic]";
  v48 = 19;
  *(_QWORD *)&v43 = 0x8EA84A1BD3791AFALL;
  *((_QWORD *)&v43 + 1) = "md::mun::MuninContext]";
  *(_QWORD *)&v44 = 21;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 3;
  v56 = xmmword_1E42F8D08;
  v57 = unk_1E42F8D18;
  *(_QWORD *)&v58 = 20;
  v54 = xmmword_1E42F8CE8;
  v55 = unk_1E42F8CF8;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 1, (uint64_t)&v53, (uint64_t)&v50);
  *(_QWORD *)&v47 = 0xEC9B77B4222D22FFLL;
  *((_QWORD *)&v47 + 1) = "md::VenueLogic]";
  v48 = 14;
  *(_QWORD *)&v43 = 0x4927EB92E562CC46;
  *((_QWORD *)&v43 + 1) = "md::VenueLogicContext]";
  *(_QWORD *)&v44 = 21;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 3;
  v56 = xmmword_1E42F7F68;
  v57 = unk_1E42F7F78;
  *(_QWORD *)&v58 = 16;
  v54 = xmmword_1E42F7F48;
  v55 = unk_1E42F7F58;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 1, (uint64_t)&v53, (uint64_t)&v50);
  v50 = 0x79FE0BD9535D5C4DLL;
  v51 = "md::AnchorLogic]";
  v52 = 15;
  *(_QWORD *)&v53 = &v54;
  *(_QWORD *)&v47 = 0x63B6FE00C0848868;
  *((_QWORD *)&v47 + 1) = "md::AnchorContext]";
  v48 = 17;
  v49 = 1;
  *((_QWORD *)&v53 + 1) = 2;
  v54 = xmmword_1E42F87F0;
  v55 = unk_1E42F8800;
  v56 = xmmword_1E42F8810;
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 1;
  v44 = xmmword_1E42F8E88;
  *(_QWORD *)&v45 = 21;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  *(_QWORD *)&v47 = 0x85B8F2BE93EDF996;
  *((_QWORD *)&v47 + 1) = "md::AssetLogic]";
  v48 = 14;
  *(_QWORD *)&v43 = 0x88B81689974D86F3;
  *((_QWORD *)&v43 + 1) = "md::AssetContext]";
  *(_QWORD *)&v44 = 16;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 1;
  v54 = xmmword_1E42F8C70;
  *(_QWORD *)&v55 = 29;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(_QWORD *)&v47 = 0x582FBDD84553E215;
  *((_QWORD *)&v47 + 1) = "md::AssetInjectionLogic]";
  v48 = 23;
  *(_QWORD *)&v43 = 0xD77FB76AFC10A710;
  *((_QWORD *)&v43 + 1) = "md::AssetInjectionContext]";
  *(_QWORD *)&v44 = 25;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 1;
  v54 = xmmword_1E42F8C58;
  *(_QWORD *)&v55 = 16;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(_QWORD *)&v47 = 0x8E629317B3523E63;
  *((_QWORD *)&v47 + 1) = "md::CameraLogic]";
  v48 = 15;
  *(_QWORD *)&v43 = 0x1AF456233693CD46;
  *((_QWORD *)&v43 + 1) = "md::CameraContext]";
  *(_QWORD *)&v44 = 17;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 1;
  v54 = xmmword_1E42F8820;
  *(_QWORD *)&v55 = 20;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  v50 = 0x17767EADC5B287BLL;
  v51 = "md::ElevationLogic]";
  v52 = 18;
  *(_QWORD *)&v53 = &v54;
  *(_QWORD *)&v47 = 0x8BD499FBD96FBB9ELL;
  *((_QWORD *)&v47 + 1) = "md::ElevationContext]";
  v48 = 20;
  v49 = 1;
  *((_QWORD *)&v53 + 1) = 2;
  v54 = xmmword_1E42F88C8;
  v55 = unk_1E42F88D8;
  v56 = xmmword_1E42F88E8;
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 1;
  v44 = xmmword_1E42F88F8;
  *(_QWORD *)&v45 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  *(_QWORD *)&v43 = 0x701C95861FC50076;
  *((_QWORD *)&v43 + 1) = "md::GeometryLogic]";
  *(_QWORD *)&v44 = 17;
  *(_QWORD *)&v53 = 0x3070CB6B3C7F21D3;
  *((_QWORD *)&v53 + 1) = "md::GeometryContext]";
  *(_QWORD *)&v54 = 19;
  BYTE8(v54) = 1;
  *(_QWORD *)&v47 = &v48;
  *((_QWORD *)&v47 + 1) = 0;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v43, &v53, 0, (uint64_t)&v47, (uint64_t)&v50);
  v50 = 0x4AC7AB7561675F6;
  v51 = "md::GridLogic]";
  v52 = 13;
  *(_QWORD *)&v47 = 0x336A901A15BB7353;
  *((_QWORD *)&v47 + 1) = "md::GridContext]";
  v48 = 15;
  v49 = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 1;
  v54 = xmmword_1E42F8C28;
  *(_QWORD *)&v55 = 21;
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 1;
  v44 = xmmword_1E42F8B38;
  *(_QWORD *)&v45 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  *(_QWORD *)&v47 = 0xC74495586E0C32F6;
  *((_QWORD *)&v47 + 1) = "md::HikingLogic]";
  v48 = 15;
  *(_QWORD *)&v43 = 0x92F3DC114CADB853;
  *((_QWORD *)&v43 + 1) = "md::HikingContext]";
  *(_QWORD *)&v44 = 17;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 5;
  v58 = xmmword_1E42F7B08;
  v59 = *(_OWORD *)&off_1E42F7B18;
  v60 = xmmword_1E42F7B28;
  *(_QWORD *)&v61 = 21;
  v54 = xmmword_1E42F7AC8;
  v55 = unk_1E42F7AD8;
  v56 = xmmword_1E42F7AE8;
  v57 = unk_1E42F7AF8;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  v50 = 0x8B855FB229857EA1;
  v51 = "md::IdentifiedResourceLogic]";
  v52 = 27;
  *(_QWORD *)&v53 = &v54;
  *(_QWORD *)&v47 = 0x12B1E486D3040E2CLL;
  *((_QWORD *)&v47 + 1) = "md::IdentifiedResourceContext]";
  v48 = 29;
  v49 = 1;
  *((_QWORD *)&v53 + 1) = 4;
  v56 = xmmword_1E42F8A98;
  v57 = unk_1E42F8AA8;
  v58 = xmmword_1E42F8AB8;
  v59 = *(_OWORD *)&off_1E42F8AC8;
  v54 = xmmword_1E42F8A78;
  v55 = unk_1E42F8A88;
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 1;
  v44 = xmmword_1E42F8AD8;
  *(_QWORD *)&v45 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  v50 = 0x20A1ED17D78F322BLL;
  v51 = "md::LabelsLogic]";
  v52 = 15;
  *(_QWORD *)&v53 = &v54;
  *(_QWORD *)&v47 = 0xA588623CD4116DAELL;
  *((_QWORD *)&v47 + 1) = "md::LabelsContext]";
  v48 = 17;
  v49 = 1;
  *((_QWORD *)&v53 + 1) = 1;
  v54 = xmmword_1E42F8C28;
  *(_QWORD *)&v55 = 21;
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 1;
  v44 = xmmword_1E42F8C40;
  *(_QWORD *)&v45 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  *(_QWORD *)&v47 = 0x7B0BD282CA8076EELL;
  *((_QWORD *)&v47 + 1) = "md::HillshadeLogic]";
  v48 = 18;
  *(_QWORD *)&v43 = 0xE719E07499A88BEBLL;
  *((_QWORD *)&v43 + 1) = "md::HillshadeContext]";
  *(_QWORD *)&v44 = 20;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 2;
  v54 = xmmword_1E42F0450;
  v55 = unk_1E42F0460;
  v56 = xmmword_1E42F0470;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(_QWORD *)&v47 = 0x91E65CD7F1A7A7FALL;
  *((_QWORD *)&v47 + 1) = "md::LightingLogic]";
  v48 = 17;
  *(_QWORD *)&v43 = 0x41E8D6E445F4145;
  *((_QWORD *)&v43 + 1) = "md::LightingLogicContext]";
  *(_QWORD *)&v44 = 24;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 4;
  v56 = xmmword_1E42F7B60;
  v57 = unk_1E42F7B70;
  v58 = xmmword_1E42F7B80;
  v59 = *(_OWORD *)&off_1E42F7B90;
  v54 = xmmword_1E42F7B40;
  v55 = unk_1E42F7B50;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  v50 = 0x653D1F33EF15EF04;
  v51 = "md::LoadingStatusLogic]";
  v52 = 22;
  *(_QWORD *)&v53 = &v54;
  *(_QWORD *)&v47 = 0x90B6813830DCB581;
  *((_QWORD *)&v47 + 1) = "md::LoadingStatusContext]";
  v48 = 24;
  v49 = 1;
  *((_QWORD *)&v53 + 1) = 1;
  v54 = xmmword_1E42F8C58;
  *(_QWORD *)&v55 = 16;
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 1;
  v44 = xmmword_1E42F8C70;
  *(_QWORD *)&v45 = 29;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  *(_QWORD *)&v47 = 0xBDB8C71631E0AA6CLL;
  *((_QWORD *)&v47 + 1) = "md::MapZoomLevelStyleLogic]";
  v48 = 26;
  *(_QWORD *)&v43 = 0xF0AA2DB42EB710AFLL;
  *((_QWORD *)&v43 + 1) = "md::MapZoomLevelStyleLogicContext]";
  *(_QWORD *)&v44 = 33;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 2;
  v54 = xmmword_1E42F8898;
  v55 = unk_1E42F88A8;
  v56 = xmmword_1E42F88B8;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(_QWORD *)&v47 = 0xA1851987210F8D55;
  *((_QWORD *)&v47 + 1) = "md::MaterialLogic]";
  v48 = 17;
  *(_QWORD *)&v43 = 0xD2404CDD1F9A6950;
  *((_QWORD *)&v43 + 1) = "md::MaterialContext]";
  *(_QWORD *)&v44 = 19;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 5;
  v58 = xmmword_1E42F7BE0;
  v59 = *(_OWORD *)&off_1E42F7BF0;
  v60 = xmmword_1E42F7C00;
  *(_QWORD *)&v61 = 21;
  v54 = xmmword_1E42F7BA0;
  v55 = unk_1E42F7BB0;
  v56 = xmmword_1E42F7BC0;
  v57 = unk_1E42F7BD0;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(_QWORD *)&v47 = 0x88BE5DF80D25DA79;
  *((_QWORD *)&v47 + 1) = "md::MeshRenderableLogic]";
  v48 = 23;
  *(_QWORD *)&v43 = 0xF014CCE28176CA44;
  *((_QWORD *)&v43 + 1) = "md::MeshRenderableContext]";
  *(_QWORD *)&v44 = 25;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 9;
  v64 = xmmword_1E42F7D48;
  v65 = *(_OWORD *)&off_1E42F7D58;
  v66 = xmmword_1E42F7D68;
  v67 = 15;
  v60 = xmmword_1E42F7D08;
  v61 = unk_1E42F7D18;
  v62 = xmmword_1E42F7D28;
  v63 = unk_1E42F7D38;
  v56 = xmmword_1E42F7CC8;
  v57 = unk_1E42F7CD8;
  v58 = xmmword_1E42F7CE8;
  v59 = *(_OWORD *)&off_1E42F7CF8;
  v54 = xmmword_1E42F7CA8;
  v55 = unk_1E42F7CB8;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  v50 = 0xBEC1A12372CEEC00;
  v51 = "md::NavigationLogic]";
  v52 = 19;
  *(_QWORD *)&v53 = &v54;
  *(_QWORD *)&v47 = 0x1B8B241A8D896A1DLL;
  *((_QWORD *)&v47 + 1) = "md::NavigationContext]";
  v48 = 21;
  v49 = 1;
  *((_QWORD *)&v53 + 1) = 3;
  v56 = xmmword_1E42F8858;
  v57 = unk_1E42F8868;
  *(_QWORD *)&v58 = 17;
  v54 = xmmword_1E42F8838;
  v55 = unk_1E42F8848;
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 1;
  v44 = xmmword_1E42F8880;
  *(_QWORD *)&v45 = 23;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  v50 = 0x7173CF8D2BE8FE53;
  v51 = "md::RouteLineLogic]";
  v52 = 18;
  *(_QWORD *)&v53 = &v54;
  *(_QWORD *)&v47 = 0x8E4587A431F9C696;
  *((_QWORD *)&v47 + 1) = "md::RouteLineContext]";
  v48 = 20;
  v49 = 1;
  *((_QWORD *)&v53 + 1) = 4;
  v56 = xmmword_1E42F8930;
  v57 = unk_1E42F8940;
  v58 = xmmword_1E42F8950;
  v59 = *(_OWORD *)&off_1E42F8960;
  v54 = xmmword_1E42F8910;
  v55 = unk_1E42F8920;
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 2;
  v44 = xmmword_1E42F8970;
  v45 = unk_1E42F8980;
  v46 = xmmword_1E42F8990;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  *(_QWORD *)&v47 = 0x1FCDF994595CDE24;
  *((_QWORD *)&v47 + 1) = "md::PuckLocationAnimationTracingLogic]";
  v48 = 37;
  *(_QWORD *)&v43 = 0xA81ACD73F9C92AA1;
  *((_QWORD *)&v43 + 1) = "md::PuckLocationAnimationTracingContext]";
  *(_QWORD *)&v44 = 39;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 1;
  v54 = xmmword_1E42F8E88;
  *(_QWORD *)&v55 = 21;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(_QWORD *)&v47 = 0x87668FB4D087F775;
  *((_QWORD *)&v47 + 1) = "md::OverlaysLogic]";
  v48 = 17;
  *(_QWORD *)&v43 = 0xADE8F13E6C18D970;
  *((_QWORD *)&v43 + 1) = "md::OverlaysContext]";
  *(_QWORD *)&v44 = 19;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 4;
  v56 = xmmword_1E42F8CA8;
  v57 = unk_1E42F8CB8;
  v58 = xmmword_1E42F8CC8;
  v59 = *(_OWORD *)&off_1E42F8CD8;
  v54 = xmmword_1E42F8C88;
  v55 = unk_1E42F8C98;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(_QWORD *)&v47 = 0x3B36D43422893971;
  *((_QWORD *)&v47 + 1) = "md::DrapingLogic]";
  v48 = 16;
  *(_QWORD *)&v43 = 0x1B9039CBDAB12E5CLL;
  *((_QWORD *)&v43 + 1) = "md::DrapingContext]";
  *(_QWORD *)&v44 = 18;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 4;
  v56 = xmmword_1E42F7C38;
  v57 = unk_1E42F7C48;
  v58 = xmmword_1E42F7C58;
  v59 = *(_OWORD *)&off_1E42F7C68;
  v54 = xmmword_1E42F7C18;
  v55 = unk_1E42F7C28;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(_QWORD *)&v47 = 0xDEBD99099DA2C65BLL;
  *((_QWORD *)&v47 + 1) = "md::RegistryLogic]";
  v48 = 17;
  *(_QWORD *)&v43 = 0xFBD83FDA8879FF7ELL;
  *((_QWORD *)&v43 + 1) = "md::RegistryContext]";
  *(_QWORD *)&v44 = 19;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 1;
  v54 = xmmword_1E42F8C58;
  *(_QWORD *)&v55 = 16;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(_QWORD *)&v47 = 0x8B45D3D7944796A2;
  *((_QWORD *)&v47 + 1) = "md::PendingRegistryLogic]";
  v48 = 24;
  *(_QWORD *)&v43 = 0xA8300AA8F44B09FFLL;
  *((_QWORD *)&v43 + 1) = "md::PendingRegistryContext]";
  *(_QWORD *)&v44 = 26;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 1;
  v54 = xmmword_1E42F8C10;
  *(_QWORD *)&v55 = 23;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(_QWORD *)&v47 = 0x3C2657D301A7BCF4;
  *((_QWORD *)&v47 + 1) = "md::PolygonLogic]";
  v48 = 16;
  *(_QWORD *)&v43 = 0x401D4CCE847AB1D1;
  *((_QWORD *)&v43 + 1) = "md::PolygonContext]";
  *(_QWORD *)&v44 = 18;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 2;
  v54 = xmmword_1E42F7C78;
  v55 = unk_1E42F7C88;
  v56 = xmmword_1E42F7C98;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(_QWORD *)&v43 = 0x5CBBA028798243FLL;
  *((_QWORD *)&v43 + 1) = "md::RouteOverlayLogic]";
  *(_QWORD *)&v44 = 21;
  *(_QWORD *)&v53 = 0x13043386C0978CC2;
  *((_QWORD *)&v53 + 1) = "md::RouteOverlayContext]";
  *(_QWORD *)&v54 = 23;
  BYTE8(v54) = 1;
  *(_QWORD *)&v47 = &v48;
  *((_QWORD *)&v47 + 1) = 0;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v43, &v53, 0, (uint64_t)&v47, (uint64_t)&v50);
  *(_QWORD *)&v43 = 0x90C2E4CBBB63E301;
  *((_QWORD *)&v43 + 1) = "md::LayerDataLogic]";
  *(_QWORD *)&v44 = 18;
  *(_QWORD *)&v53 = 0x7851AF310F49C988;
  *((_QWORD *)&v53 + 1) = "md::LayerDataLogicContext]";
  *(_QWORD *)&v54 = 25;
  BYTE8(v54) = 1;
  *(_QWORD *)&v47 = &v48;
  *((_QWORD *)&v47 + 1) = 0;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v43, &v53, 0, (uint64_t)&v47, (uint64_t)&v50);
  *(_QWORD *)&v47 = 0xAF46DE79C836B0D8;
  *((_QWORD *)&v47 + 1) = "md::TileSelectionLogic]";
  v48 = 22;
  *(_QWORD *)&v43 = 0x64780CBD71DF7CF5;
  *((_QWORD *)&v43 + 1) = "md::TileSelectionContext]";
  *(_QWORD *)&v44 = 24;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 3;
  v56 = xmmword_1E42F8B10;
  v57 = unk_1E42F8B20;
  *(_QWORD *)&v58 = 21;
  v54 = xmmword_1E42F8AF0;
  v55 = unk_1E42F8B00;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  v21 = 0xCBF29CE484222325;
  v22 = 0x26u;
  do
    v21 = 0x100000001B3 * (v21 ^ aStdStringViewG_927[v22++]);
  while (v22 != 368);
  v50 = v21;
  v51 = "md::TileDependencyLogicImpl<md::TileDependencies<>, md::TileDependencies<md::TileDependency<md::MapDataType::Flyover, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverMetadata, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverDsm, md::FlyoverTileDataResolverContext>>>]";
  v52 = 330;
  *(_QWORD *)&v47 = 0x8677AD8BA9352C1DLL;
  *((_QWORD *)&v47 + 1) = "md::ResolvedTileSelectionContext]";
  v48 = 32;
  v49 = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 1;
  v54 = xmmword_1E42F8B38;
  *(_QWORD *)&v55 = 24;
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 1;
  v44 = xmmword_1E42F8B50;
  *(_QWORD *)&v45 = 34;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  *(_QWORD *)&v47 = 0x87BA2765F9E38E05;
  *((_QWORD *)&v47 + 1) = "md::PendingSceneLogic]";
  v48 = 21;
  *(_QWORD *)&v43 = 0x9F2276D081C2CB20;
  *((_QWORD *)&v43 + 1) = "md::PendingSceneContext]";
  *(_QWORD *)&v44 = 23;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 5;
  v58 = xmmword_1E42F8BA8;
  v59 = *(_OWORD *)&off_1E42F8BB8;
  v60 = xmmword_1E42F8BC8;
  *(_QWORD *)&v61 = 25;
  v54 = xmmword_1E42F8B68;
  v55 = unk_1E42F8B78;
  v56 = xmmword_1E42F8B88;
  v57 = unk_1E42F8B98;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  v50 = 0x2B7C4502BD3C99C6;
  v51 = "md::ResolvedSceneLogic]";
  v52 = 22;
  *(_QWORD *)&v53 = &v54;
  *(_QWORD *)&v47 = 0x99BED48DEFBBD82BLL;
  *((_QWORD *)&v47 + 1) = "md::SceneContext]";
  v48 = 16;
  v49 = 1;
  *(_QWORD *)&v43 = &v44;
  *((_QWORD *)&v43 + 1) = 1;
  v44 = xmmword_1E42F8C10;
  *(_QWORD *)&v45 = 23;
  *((_QWORD *)&v53 + 1) = 2;
  v54 = xmmword_1E42F8BE0;
  v55 = unk_1E42F8BF0;
  v56 = xmmword_1E42F8C00;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, &v50, &v47, 0, (uint64_t)&v43, (uint64_t)&v53);
  *(_QWORD *)&v47 = 0x1F3242C85D9F2F62;
  *((_QWORD *)&v47 + 1) = "md::SceneQueryLogic]";
  v48 = 19;
  *(_QWORD *)&v43 = 0xDFC317497CF9A4BFLL;
  *((_QWORD *)&v43 + 1) = "md::SceneQueryContext]";
  *(_QWORD *)&v44 = 21;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 5;
  v58 = xmmword_1E42F7E20;
  v59 = *(_OWORD *)&off_1E42F7E30;
  v60 = xmmword_1E42F7E40;
  *(_QWORD *)&v61 = 19;
  v54 = xmmword_1E42F7DE0;
  v55 = unk_1E42F7DF0;
  v56 = xmmword_1E42F7E00;
  v57 = unk_1E42F7E10;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(_QWORD *)&v43 = 0xD2443A61CED86C69;
  *((_QWORD *)&v43 + 1) = "md::SettingsLogic]";
  *(_QWORD *)&v44 = 17;
  *(_QWORD *)&v53 = 0xC97B9E962ADF4AD4;
  *((_QWORD *)&v53 + 1) = "md::SettingsContext]";
  *(_QWORD *)&v54 = 19;
  BYTE8(v54) = 1;
  *(_QWORD *)&v47 = &v48;
  *((_QWORD *)&v47 + 1) = 0;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v43, &v53, 0, (uint64_t)&v47, (uint64_t)&v50);
  *(_QWORD *)&v43 = 0x3F812BA5755E8568;
  *((_QWORD *)&v43 + 1) = "md::SharedResourcesLogic]";
  *(_QWORD *)&v44 = 24;
  *(_QWORD *)&v53 = 0xA60DDA5A69582425;
  *((_QWORD *)&v53 + 1) = "md::SharedResourcesContext]";
  *(_QWORD *)&v54 = 26;
  BYTE8(v54) = 1;
  *(_QWORD *)&v47 = &v48;
  *((_QWORD *)&v47 + 1) = 0;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v43, &v53, 0, (uint64_t)&v47, (uint64_t)&v50);
  *(_QWORD *)&v47 = 0xDAD5CEE0DC5FF509;
  *((_QWORD *)&v47 + 1) = "md::SkyLogic]";
  v48 = 12;
  *(_QWORD *)&v43 = 0x7C7EC6C7C111B0D0;
  *((_QWORD *)&v43 + 1) = "md::SkyLogicContext]";
  *(_QWORD *)&v44 = 19;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 2;
  v54 = xmmword_1E42F8898;
  v55 = unk_1E42F88A8;
  v56 = xmmword_1E42F88B8;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(_QWORD *)&v43 = 0x2FED70A4459DFCA1;
  *((_QWORD *)&v43 + 1) = "md::StyleLogic]";
  *(_QWORD *)&v44 = 14;
  *(_QWORD *)&v53 = 0xE42D19AFCA302E68;
  *((_QWORD *)&v53 + 1) = "md::StyleLogicContext]";
  *(_QWORD *)&v54 = 21;
  BYTE8(v54) = 1;
  *(_QWORD *)&v47 = &v48;
  *((_QWORD *)&v47 + 1) = 0;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v43, &v53, 0, (uint64_t)&v47, (uint64_t)&v50);
  *(_QWORD *)&v47 = 0x33D44727E59BE9E9;
  *((_QWORD *)&v47 + 1) = "md::PuckLogic]";
  v48 = 13;
  *(_QWORD *)&v43 = 0x9AEE7E062376E454;
  *((_QWORD *)&v43 + 1) = "md::PuckContext]";
  *(_QWORD *)&v44 = 15;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 9;
  v64 = xmmword_1E42F8A40;
  v65 = *(_OWORD *)&off_1E42F8A50;
  v66 = xmmword_1E42F8A60;
  v67 = 24;
  v60 = xmmword_1E42F8A00;
  v61 = unk_1E42F8A10;
  v62 = xmmword_1E42F8A20;
  v63 = unk_1E42F8A30;
  v56 = xmmword_1E42F89C0;
  v57 = unk_1E42F89D0;
  v58 = xmmword_1E42F89E0;
  v59 = *(_OWORD *)&off_1E42F89F0;
  v54 = xmmword_1E42F89A0;
  v55 = unk_1E42F89B0;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(_QWORD *)&v43 = 0x6139471CB89383CBLL;
  *((_QWORD *)&v43 + 1) = "md::NonTiledAssetLogic]";
  *(_QWORD *)&v44 = 22;
  *(_QWORD *)&v53 = 0x932EE29454ABDC4ELL;
  *((_QWORD *)&v53 + 1) = "md::NonTiledAssetContext]";
  *(_QWORD *)&v54 = 24;
  BYTE8(v54) = 1;
  *(_QWORD *)&v47 = &v48;
  *((_QWORD *)&v47 + 1) = 0;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v43, &v53, 0, (uint64_t)&v47, (uint64_t)&v50);
  *(_QWORD *)&v47 = 0x738A703709805788;
  *((_QWORD *)&v47 + 1) = "md::LocalNorthLogic]";
  v48 = 19;
  *(_QWORD *)&v43 = 0xC81F81A7CB7767BBLL;
  *((_QWORD *)&v43 + 1) = "md::LocalNorthLogicContext]";
  *(_QWORD *)&v44 = 26;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 3;
  v56 = xmmword_1E42F7E78;
  v57 = unk_1E42F7E88;
  *(_QWORD *)&v58 = 17;
  v54 = xmmword_1E42F7E58;
  v55 = unk_1E42F7E68;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(_QWORD *)&v47 = 0x652FEFC5C602CC21;
  *((_QWORD *)&v47 + 1) = "md::StandardLogic]";
  v48 = 17;
  *(_QWORD *)&v43 = 0xFFA06A69D924B0E8;
  *((_QWORD *)&v43 + 1) = "md::StandardLogicContext]";
  *(_QWORD *)&v44 = 24;
  BYTE8(v44) = 1;
  *(_QWORD *)&v53 = &v54;
  *((_QWORD *)&v53 + 1) = 2;
  v54 = xmmword_1E42F7EA0;
  v55 = unk_1E42F7EB0;
  v56 = xmmword_1E42F7EC0;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
  *(_QWORD *)&v43 = 0x41948F4CADE567A1;
  *((_QWORD *)&v43 + 1) = "md::DebugDrawLogic]";
  *(_QWORD *)&v44 = 18;
  *(_QWORD *)&v53 = 0x3619066E3FB5F2CLL;
  *((_QWORD *)&v53 + 1) = "md::DebugDrawContext]";
  *(_QWORD *)&v54 = 20;
  BYTE8(v54) = 1;
  *(_QWORD *)&v47 = &v48;
  *((_QWORD *)&v47 + 1) = 0;
  v50 = (unint64_t)&v52;
  v51 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v43, &v53, 0, (uint64_t)&v47, (uint64_t)&v50);
  if (*(_BYTE *)(a1 + 568))
  {
    *(_QWORD *)&v47 = 0xF1FE4046E5C81374;
    *((_QWORD *)&v47 + 1) = "md::CollectMapDataLogic<md::MapDataType::DaVinciBuildings>]";
    v48 = 58;
    *(_QWORD *)&v43 = 0x5B0BFF71B88387C7;
    *((_QWORD *)&v43 + 1) = "md::CollectMapDataContext<md::MapDataType::DaVinciBuildings>]";
    *(_QWORD *)&v44 = 60;
    BYTE8(v44) = 1;
    *(_QWORD *)&v53 = &v54;
    *((_QWORD *)&v53 + 1) = 1;
    v54 = xmmword_1E42F8C58;
    *(_QWORD *)&v55 = 16;
    v50 = (unint64_t)&v52;
    v51 = 0;
    gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
    *(_QWORD *)&v47 = 0xB4DD094975FB84EALL;
    *((_QWORD *)&v47 + 1) = "md::CollectMapDataLogic<md::MapDataType::InjectedFeatures>]";
    v48 = 58;
    *(_QWORD *)&v43 = 0x5A88E3C88DA0DCA1;
    *((_QWORD *)&v43 + 1) = "md::CollectMapDataContext<md::MapDataType::InjectedFeatures>]";
    *(_QWORD *)&v44 = 60;
    BYTE8(v44) = 1;
    *(_QWORD *)&v53 = &v54;
    *((_QWORD *)&v53 + 1) = 1;
    v54 = xmmword_1E42F8C58;
    *(_QWORD *)&v55 = 16;
    v50 = (unint64_t)&v52;
    v51 = 0;
    gdc::LogicExecutionGraphBuilder::addLogic(v20, (unint64_t *)&v47, &v43, 0, (uint64_t)&v53, (uint64_t)&v50);
    v50 = 0x20B829C32C58D309;
    v51 = "md::CollectRenderablesLogic<md::MapDataType::DaVinciBuildings, md::DaVinciGroundRenderable>]";
    v52 = 91;
    *(_QWORD *)&v53 = &v54;
    *(_QWORD *)&v47 = 0xF5BDE3F396AD5C40;
    *((_QWORD *)&v47 + 1) = "md::CollectRenderablesLogicContext<md::MapDataType::DaVinciBuildings>]";
    v48 = 69;
    v49 = 1;
    *((_QWORD *)&v53 + 1) = 1;
    v54 = xmmword_1E42F7F18;
    *(_QWORD *)&v55 = 19;
    *(_QWORD *)&v43 = &v44;
    *((_QWORD *)&v43 + 1) = 1;
    v44 = xmmword_1E42F7F00;
    *(_QWORD *)&v45 = 60;
    gdc::LogicExecutionGraphBuilder::addLogic(v20, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
    v50 = 0x13C9C3CF7E2D459BLL;
    v51 = "md::CollectRenderablesLogic<md::MapDataType::InjectedFeatures, md::DaVinciGroundRenderable>]";
    v52 = 91;
    *(_QWORD *)&v53 = &v54;
    *(_QWORD *)&v47 = 0x552ACF95227023D6;
    *((_QWORD *)&v47 + 1) = "md::CollectRenderablesLogicContext<md::MapDataType::InjectedFeatures>]";
    v48 = 69;
    v49 = 1;
    *((_QWORD *)&v53 + 1) = 1;
    v54 = xmmword_1E42F7F18;
    *(_QWORD *)&v55 = 19;
    *(_QWORD *)&v43 = &v44;
    *((_QWORD *)&v43 + 1) = 1;
    v44 = xmmword_1E42F7F30;
    *(_QWORD *)&v45 = 60;
    gdc::LogicExecutionGraphBuilder::addLogic(v20, &v50, &v47, 0, (uint64_t)&v53, (uint64_t)&v43);
  }
  LOWORD(v53) = 1;
  if (a3)
    v23 = 1;
  else
    v23 = 3;
  WORD1(v53) = a3;
  if (a3)
    v24 = 7;
  else
    v24 = 2;
  WORD2(v53) = 2;
  if (a3)
    v25 = 1;
  else
    v25 = 4;
  WORD3(v53) = a3;
  WORD4(v53) = 4;
  WORD5(v53) = a3;
  WORD6(v53) = 67;
  HIWORD(v53) = a3;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 1u, &v53)+ 18) = a3 << 16;
  v26 = WORD3(v53);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v53), (_WORD *)&v53 + 2)+ 18) = v26 << 16;
  v27 = WORD5(v53);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v53), (_WORD *)&v53 + 4)+ 18) = v27 << 16;
  v28 = HIWORD(v53);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v53), (_WORD *)&v53 + 6)+ 18) = v28 << 16;
  LOWORD(v53) = 18;
  WORD1(v53) = a3;
  WORD2(v53) = 19;
  WORD3(v53) = a3;
  WORD4(v53) = 28;
  WORD5(v53) = a3;
  WORD6(v53) = 27;
  HIWORD(v53) = a3;
  LOWORD(v54) = 15;
  WORD1(v54) = a3;
  WORD2(v54) = 41;
  WORD3(v54) = a3;
  WORD4(v54) = 42;
  WORD5(v54) = a3;
  WORD6(v54) = 55;
  HIWORD(v54) = a3;
  LOWORD(v55) = 56;
  WORD1(v55) = a3;
  WORD2(v55) = 62;
  WORD3(v55) = a3;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x12u, &v53)+ 18) = (a3 << 16) | 1;
  v29 = WORD3(v53);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v53), (_WORD *)&v53 + 2)+ 18) = (v29 << 16) | 1;
  v30 = WORD5(v53);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v53), (_WORD *)&v53 + 4)+ 18) = (v30 << 16) | 1;
  v31 = HIWORD(v53);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v53), (_WORD *)&v53 + 6)+ 18) = (v31 << 16) | 1;
  v32 = WORD1(v54);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v54, &v54)+ 18) = (v32 << 16) | 1;
  v33 = WORD3(v54);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v54), (_WORD *)&v54 + 2)+ 18) = (v33 << 16) | 1;
  v34 = WORD5(v54);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v54), (_WORD *)&v54 + 4)+ 18) = (v34 << 16) | 1;
  v35 = HIWORD(v54);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v54), (_WORD *)&v54 + 6)+ 18) = (v35 << 16) | 1;
  v36 = WORD1(v55);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v55, &v55)+ 18) = (v36 << 16) | 1;
  v37 = WORD3(v55);
  v38 = 0;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v55), (_WORD *)&v55 + 2)+ 18) = (v37 << 16) | 1;
  LOWORD(v53) = 6;
  if (a3)
    v39 = 6;
  else
    v39 = 3;
  WORD1(v53) = v39;
  WORD2(v53) = 26;
  WORD3(v53) = a3;
  WORD4(v53) = 66;
  WORD5(v53) = a3;
  WORD6(v53) = 73;
  HIWORD(v53) = a3;
  LOWORD(v54) = 14;
  WORD1(v54) = a3;
  WORD2(v54) = 54;
  WORD3(v54) = a3;
  WORD4(v54) = 11;
  WORD5(v54) = v24;
  WORD6(v54) = 12;
  HIWORD(v54) = v24;
  LOWORD(v55) = 71;
  WORD1(v55) = v24;
  WORD2(v55) = 72;
  WORD3(v55) = v24;
  WORD4(v55) = 40;
  WORD5(v55) = a3;
  WORD6(v55) = 35;
  HIWORD(v55) = v23;
  LOWORD(v56) = 51;
  WORD1(v56) = v25;
  WORD2(v56) = 20;
  WORD3(v56) = a3;
  WORD4(v56) = 24;
  WORD5(v56) = a3;
  WORD6(v56) = 64;
  HIWORD(v56) = a3;
  LOWORD(v57) = 65;
  WORD1(v57) = a3;
  WORD2(v57) = 69;
  WORD3(v57) = a3;
  WORD4(v57) = 68;
  WORD5(v57) = a3;
  WORD6(v57) = 70;
  HIWORD(v57) = a3;
  LOWORD(v58) = 74;
  WORD1(v58) = a3;
  do
  {
    v40 = *(unsigned __int16 *)((char *)&v53 + v38 + 2);
    v41 = std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, *(_WORD *)((char *)&v53 + v38), (__int128 *)((char *)&v53 + v38));
    v38 += 4;
    *(_DWORD *)((char *)v41 + 18) = (v40 << 16) | 2;
  }
  while (v38 != 84);
  return a1;
}

void sub_19F8E51CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  md::MapEngineMode *v3;

  *(_QWORD *)v3 = &off_1E42A1BF8;
  if (*((_BYTE *)v3 + 548))
    *((_BYTE *)v3 + 548) = 0;
  md::MapEngineMode::~MapEngineMode(v3);
  _Unwind_Resume(a1);
}

void md::TransitShieldIconLabelPart::~TransitShieldIconLabelPart(md::TransitShieldIconLabelPart *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = off_1E42A3608;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 104);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E4297AE8;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  md::IconLabelPart::~IconLabelPart(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  geo::read_write_lock *v10;
  const char *v11;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42A3608;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 104);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E4297AE8;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  md::IconLabelPart::~IconLabelPart(this);
  {
    v9 = operator new();
    *(_QWORD *)(v9 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v9 + 24) = "VectorKitLabels";
    *(_OWORD *)(v9 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v9 = &off_1E42B5668;
    *(_QWORD *)(v9 + 8) = "VectorKitLabels";
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 200) = 0u;
    *(_OWORD *)(v9 + 216) = 0u;
    *(_OWORD *)(v9 + 232) = 0u;
    *(_QWORD *)(v9 + 248) = 0;
    *(_OWORD *)(v9 + 56) = 0u;
    v10 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v9 + 56), 0);
    if ((_DWORD)v10)
      geo::read_write_lock::logFailure(v10, (uint64_t)"initialization", v11);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v9 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v9 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v9;
  }
  (*(void (**)(uint64_t, md::TransitShieldIconLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, this, 856);
}

uint64_t md::TransitShieldIconLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  std::mutex *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  float v15;
  unint64_t *v16;
  unint64_t v17;
  float v18;
  float32x2_t v20;

  v8 = *(_QWORD *)(a1 + 824);
  v9 = *(unsigned __int8 *)(a1 + 853);
  v10 = (std::mutex *)(v8 + 40);
  std::mutex::lock((std::mutex *)(v8 + 40));
  v12 = *(_QWORD **)(v8 + 24);
  v11 = *(std::__shared_weak_count **)(v8 + 32);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  std::mutex::unlock(v10);
  if (v12)
  {
    v15 = *(float *)(*v12 + 16 * v9);
    if (!v11)
      goto LABEL_12;
  }
  else
  {
    v15 = 0.0;
    if (!v11)
      goto LABEL_12;
  }
  v16 = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_12:
  v18 = *(float *)(a2 + 176) * v15;
  *(float *)(a1 + 804) = v18;
  v20 = vmla_n_f32(*a3, *(float32x2_t *)(a1 + 796), v18);
  return md::IconLabelPart::layoutForStaging(a1, a2, &v20, a4);
}

float md::TransitShieldIconLabelPart::updateForDisplay(md::TransitShieldIconLabelPart *this)
{
  float v2;
  uint64_t v3;
  char v4;
  int v5;
  char v6;
  float v7;
  float result;

  v2 = *((float *)this + 147);
  *((float *)this + 153) = v2;
  v3 = *(_QWORD *)((char *)this + 572);
  *((_DWORD *)this + 151) = *((_DWORD *)this + 145);
  *(_QWORD *)((char *)this + 596) = v3;
  *((_BYTE *)this + 617) = *((_BYTE *)this + 593);
  v4 = *((_BYTE *)this + 633) + 4 * *((_BYTE *)this + 594);
  *((_BYTE *)this + 556) = v4;
  *((_BYTE *)this + 658) = v4;
  v5 = *((unsigned __int8 *)this + 592);
  *((_BYTE *)this + 657) = v5;
  *((_BYTE *)this + 765) = v5 == 4;
  if (v5 == 4)
    v6 = 2;
  else
    v6 = 1;
  v7 = *((float *)this + 188);
  *((_BYTE *)this + 685) = v6;
  if (v2 != v7)
  {
    *((float *)this + 188) = v2;
    (*(void (**)(md::TransitShieldIconLabelPart *, uint64_t, char *, char *))(*(_QWORD *)this + 912))(this, 1, (char *)this + 640, (char *)this + 312);
  }
  result = *((float *)this + 201);
  *((float *)this + 204) = result;
  return result;
}

uint64_t md::TransitShieldIconLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5, double a6)
{
  float32x2_t v7;

  LODWORD(a6) = *(_DWORD *)(a1 + 816);
  md::IconLabelPart::layoutForDisplay(a1, a2, a3, a4, &v7, a6, *(double *)(a1 + 808), COERCE_DOUBLE(vmla_n_f32(*a5, *(float32x2_t *)(a1 + 808), *(float *)&a6)));
  return 37;
}

float md::TransitShieldIconLabelPart::setPerpendicularOffsetVector(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  float result;

  v3 = a1 + 796;
  v4 = 808;
  if (a2)
    v3 = a1 + 808;
  else
    v4 = 796;
  *(_DWORD *)(a1 + v4) = *(_DWORD *)a3;
  result = *(float *)(a3 + 4);
  *(float *)(v3 + 4) = result;
  return result;
}

uint64_t md::TransitShieldIconLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  std::mutex *v12;
  std::__shared_weak_count *v13;
  _QWORD *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int v20;

  if (a3)
  {
    v4 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 8) + 592))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(unsigned __int8 *)(a1 + 853));
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(v4 + 296);
      if (!v6)
      {
        v7 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v4, 0);
        v6 = *v7;
        *(_QWORD *)(v5 + 296) = *v7;
      }
      v8 = *(unsigned __int8 *)(v6 + 89);
      if (v8 != *(unsigned __int8 *)(a1 + 852) || v8 == 2 && *(_DWORD *)(a1 + 848) != *(_DWORD *)(v6 + 72))
        return 1;
      if (*(unsigned __int8 *)(v6 + 91) != *(unsigned __int8 *)(a1 + 784)
        || *(_DWORD *)(a1 + 788) != *(_DWORD *)(v6 + 56)
        || *(_DWORD *)(a1 + 792) != *(_DWORD *)(v6 + 60))
      {
        return 1;
      }
    }
  }
  v9 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 824) + 104));
  if ((v9 & 1) == 0)
    return 1;
  if (*(_BYTE *)(a1 + 852) != 2)
  {
    v10 = *(_QWORD *)(a1 + 824);
    v11 = *(unsigned __int8 *)(a1 + 853);
    v12 = (std::mutex *)(v10 + 40);
    std::mutex::lock((std::mutex *)(v10 + 40));
    v14 = *(_QWORD **)(v10 + 24);
    v13 = *(std::__shared_weak_count **)(v10 + 32);
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    std::mutex::unlock(v12);
    if (v14)
    {
      v20 = *(_DWORD *)(*v14 + 16 * v11 + 4);
      if (!v13)
        goto LABEL_24;
    }
    else
    {
      v20 = -16777216;
      if (!v13)
        goto LABEL_24;
    }
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_24:
    if (v20 != *(_DWORD *)(a1 + 848))
      return 1;
  }
  return 0;
}

uint64_t md::TransitShieldIconLabelPart::debugString@<X0>(md::TransitShieldIconLabelPart *this@<X0>, _BYTE *a2@<X8>)
{
  int v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  unint64_t v20;
  const void **v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[3];
  uint64_t v30;
  unint64_t v31;
  void *__p[2];
  __int128 v33;
  int v34;
  uint64_t v35[19];

  v4 = *((unsigned __int8 *)this + 784);
  v5 = "dflt";
  if (v4 == 1)
    v5 = "sm";
  if (v4 == 2)
    v6 = "lg";
  else
    v6 = v5;
  v7 = MEMORY[0x1E0DE4FE0];
  v8 = MEMORY[0x1E0DE4FE0] + 64;
  v9 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v35[0] = MEMORY[0x1E0DE4FE0] + 64;
  v27 = v10;
  *(_QWORD *)((char *)&v28[-1] + *(_QWORD *)(v10 - 24)) = v11;
  v12 = (std::ios_base *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24));
  std::ios_base::init(v12, v28);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v27 = v7 + 24;
  v35[0] = v8;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x1E0DE4FB8];
  v28[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v33 = 0u;
  v34 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v27, (uint64_t)"  Transit Shield(", 17);
  v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 80) + 32))(*((_QWORD *)this + 80));
  if (v14)
    v15 = (const char *)v14;
  else
    v15 = "";
  v16 = strlen(v15);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v27, (uint64_t)v15, v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v27, (uint64_t)")", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v27, (uint64_t)":of=", 4);
  v17 = v27;
  *(_DWORD *)((char *)v28 + *(_QWORD *)(v27 - 24)) = *(_DWORD *)((_BYTE *)v28 + *(_QWORD *)(v27 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v28[1] + *(_QWORD *)(v17 - 24)) = 2;
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v27, (uint64_t)",size=", 6);
  v18 = strlen(v6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v27, (uint64_t)v6, v18);
  if ((v34 & 0x10) != 0)
  {
    v20 = *((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1) < v31)
    {
      *((_QWORD *)&v33 + 1) = v31;
      v20 = v31;
    }
    v21 = (const void **)&v30;
  }
  else
  {
    if ((v34 & 8) == 0)
    {
      v19 = 0;
      a2[23] = 0;
      goto LABEL_24;
    }
    v21 = (const void **)v29;
    v20 = v29[2];
  }
  v22 = *v21;
  v19 = v20 - (_QWORD)*v21;
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    v25 = operator new(v23 + 1);
    *((_QWORD *)a2 + 1) = v19;
    *((_QWORD *)a2 + 2) = v24 | 0x8000000000000000;
    *(_QWORD *)a2 = v25;
    a2 = v25;
    goto LABEL_23;
  }
  a2[23] = v19;
  if (v19)
LABEL_23:
    memmove(a2, v22, v19);
LABEL_24:
  a2[v19] = 0;
  v27 = *v9;
  *(_QWORD *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24)) = v9[3];
  v28[0] = v13 + 16;
  if (SBYTE7(v33) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v35);
}

void sub_19F8E5B64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::TransitShieldIconLabelPart::populateDebugNode(md::TransitShieldIconLabelPart *this, gdc::DebugTreeNode *a2)
{
  char *v4;
  char v5;
  uint64_t v6;
  double v7;
  _QWORD v8[7];
  int v9;
  _BYTE v10[32];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15[2];

  md::ShieldIconLabelPart::populateDebugNode(this, a2);
  v4 = (char *)operator new(0x20uLL);
  *(_QWORD *)&v15[0] = v4;
  *(__int128 *)((char *)v15 + 8) = xmmword_19FFB3620;
  strcpy(v4, "TransitShieldIconLabelPart");
  gdc::DebugTreeNode::createChildNode((uint64_t)a2, v15);
  operator delete(v4);
  BYTE7(v15[1]) = 20;
  strcpy((char *)v15, "Shield Size Modifier");
  switch(*((_BYTE *)this + 784))
  {
    case 0:
      v5 = 7;
      v6 = 0x746C7561666544;
      break;
    case 1:
      v5 = 5;
      v6 = 0x6C6C616D53;
      break;
    case 2:
      v5 = 5;
      v6 = 0x656772614CLL;
      break;
    case 3:
      v5 = 6;
      v6 = 0x6C6C616D5358;
      break;
    case 4:
      v5 = 6;
      v6 = 0x656772614C58;
      break;
    case 5:
      v5 = 7;
      v6 = 0x6C6C616D535858;
      break;
    case 6:
      v5 = 7;
      v6 = 0x656772614C5858;
      break;
    case 7:
      v5 = 8;
      v6 = 0x656772614C585858;
      break;
    case 8:
      v5 = 6;
      v6 = 0x6D756964654DLL;
      break;
    case 9:
      v5 = 8;
      v6 = 0x6C6C616D53585858;
      break;
    default:
      if (*((unsigned __int8 *)this + 784) == 255)
      {
        v5 = 4;
        v6 = 1701736270;
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
      break;
  }
  v12 = 0;
  v13 = 0;
  v14 = 4;
  v11 = v6;
  HIBYTE(v13) = v5;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v15, (uint64_t)v10);
  v7 = *((float *)this + 204);
  BYTE7(v15[1]) = 6;
  strcpy((char *)v15, "Offset");
  memset(&v8[4], 0, 24);
  v9 = 2;
  *(double *)&v8[2] = v7;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v15, (uint64_t)v8);
}

uint64_t md::TransitShieldIconLabelPart::featureID(md::TransitShieldIconLabelPart *this)
{
  return *((_QWORD *)this + 105);
}

uint64_t md::TransitShieldIconLabelPart::clone(md::TransitShieldIconLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v24;

  {
    v24 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v24, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 856, 8);
  md::LabelPart::LabelPart((md::LabelPart *)v3, this);
  *(_QWORD *)v3 = off_1E428F308;
  v4 = *(_OWORD *)((char *)this + 572);
  *(_QWORD *)(v3 + 588) = *(_QWORD *)((char *)this + 588);
  *(_OWORD *)(v3 + 572) = v4;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v3 + 596) = _Q0;
  *(_DWORD *)(v3 + 612) = 1065353216;
  *(_WORD *)(v3 + 616) = 256;
  *(_BYTE *)(v3 + 618) = 0;
  *(_DWORD *)(v3 + 620) = *((_DWORD *)this + 155);
  *(_DWORD *)(v3 + 624) = 0;
  *(_BYTE *)(v3 + 628) = *((_BYTE *)this + 628);
  *(_DWORD *)(v3 + 629) = 16777217;
  *(_BYTE *)(v3 + 633) = 0;
  *(_QWORD *)v3 = off_1E428D7E0;
  *(_QWORD *)(v3 + 640) = *((_QWORD *)this + 80);
  v10 = *((_QWORD *)this + 81);
  *(_QWORD *)(v3 + 648) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *((_OWORD *)this + 41);
  v14 = *((_OWORD *)this + 42);
  *(_QWORD *)(v3 + 688) = *((_QWORD *)this + 86);
  *(_OWORD *)(v3 + 656) = v13;
  *(_OWORD *)(v3 + 672) = v14;
  *(_OWORD *)(v3 + 728) = 0u;
  *(_DWORD *)(v3 + 744) = 1065353216;
  *(_WORD *)(v3 + 764) = 0;
  *(_QWORD *)(v3 + 748) = 0;
  *(_BYTE *)(v3 + 756) = 0;
  v15 = *(_OWORD *)((char *)this + 712);
  *(_OWORD *)(v3 + 696) = *(_OWORD *)((char *)this + 696);
  *(_OWORD *)(v3 + 712) = v15;
  *(_QWORD *)v3 = off_1E4297AE8;
  *(_QWORD *)(v3 + 768) = *((_QWORD *)this + 96);
  v16 = *((_QWORD *)this + 97);
  *(_QWORD *)(v3 + 776) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_BYTE *)(v3 + 784) = *((_BYTE *)this + 784);
  *(_QWORD *)(v3 + 788) = *(_QWORD *)((char *)this + 788);
  *(_QWORD *)v3 = off_1E42A3608;
  v19 = *(_QWORD *)((char *)this + 796);
  *(_DWORD *)(v3 + 804) = *((_DWORD *)this + 201);
  *(_QWORD *)(v3 + 796) = v19;
  *(_QWORD *)(v3 + 812) = 0;
  *(_DWORD *)(v3 + 808) = 0;
  *(_QWORD *)(v3 + 824) = *((_QWORD *)this + 103);
  v20 = *((_QWORD *)this + 104);
  *(_QWORD *)(v3 + 832) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *(_QWORD *)(v3 + 840) = *((_QWORD *)this + 105);
  *(_DWORD *)(v3 + 848) = *((_DWORD *)this + 212);
  *(_BYTE *)(v3 + 852) = 0;
  *(_BYTE *)(v3 + 853) = *((_BYTE *)this + 853);
  return v3;
}

void sub_19F8E6024(mdm::Allocator *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v1, 856);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

float md::TransitShieldIconLabelPart::styleBrightness(md::TransitShieldIconLabelPart *this, const md::LabelStyle *a2)
{
  return *((float *)a2 + 27);
}

uint64_t md::TransitShieldIconLabelPart::TransitShieldIconLabelPart(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD *a6, char a7, _DWORD *a8)
{
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;

  md::IconLabelPart::IconLabelPart(a1, a2);
  *v15 = off_1E4297AE8;
  v16 = a4[1];
  v15[96] = *a4;
  v15[97] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_QWORD *)(a3 + 296);
  if (!v19)
  {
    v20 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a3, 0);
    v19 = *v20;
    *(_QWORD *)(a3 + 296) = *v20;
  }
  *(_BYTE *)(a1 + 784) = *(_BYTE *)(v19 + 91);
  *(_QWORD *)(a1 + 788) = *(_QWORD *)(v19 + 56);
  *(_BYTE *)(a1 + 557) = 1;
  *(_BYTE *)(a1 + 656) = 1;
  *(_QWORD *)a1 = off_1E42A3608;
  *(_QWORD *)(a1 + 804) = 0;
  *(_QWORD *)(a1 + 812) = 0;
  *(_QWORD *)(a1 + 796) = 0;
  v21 = a6[1];
  *(_QWORD *)(a1 + 824) = *a6;
  *(_QWORD *)(a1 + 832) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_QWORD *)(a1 + 840) = a5;
  *(_DWORD *)(a1 + 848) = *a8;
  v24 = *(_QWORD *)(a3 + 296);
  if (!v24)
  {
    v25 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a3, 0);
    v24 = *v25;
    *(_QWORD *)(a3 + 296) = *v25;
  }
  *(_BYTE *)(a1 + 852) = *(_BYTE *)(v24 + 89);
  *(_BYTE *)(a1 + 853) = a7;
  return a1;
}

void sub_19F8E6184(_Unwind_Exception *a1)
{
  md::IconLabelPart *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)*((_QWORD *)v1 + 104);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_QWORD *)v1 = v2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v1 + 97);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  md::IconLabelPart::~IconLabelPart(v1);
  _Unwind_Resume(a1);
}

void altitude::HeightFallbackRequestManager::~HeightFallbackRequestManager(altitude::HeightFallbackRequestManager *this)
{
  *(_QWORD *)this = off_1E42C2EF8;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::HeightFallbackRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::HeightFallbackRequestId,std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::HeightFallbackRequestId>,true>,std::allocator<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

{
  *(_QWORD *)this = off_1E42C2EF8;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::HeightFallbackRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::HeightFallbackRequestId,std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::HeightFallbackRequestId>,true>,std::allocator<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightFallbackRequestId,altitude::HeightFallbackArgs>::pruneRequests(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    do
    {
      v6 = (uint64_t *)v4[1];
      v7 = v4;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      v10 = v4[9];
      if (atomic_load((unsigned int *)(v10 + 128)))
        *(_DWORD *)(v10 + 180) = a2;
      pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 152));
      v12 = *(_DWORD *)(v10 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 152));
      if ((v12 & 1) != 0 && *(_BYTE *)(v10 + 176) && *(_DWORD *)(v10 + 180) != a2
        || (a2 - *(_DWORD *)(v10 + 180)) > *(_DWORD *)(v10 + 184))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v13 = (uint64_t *)v4[1];
        v14 = v4;
        if (v13)
        {
          do
          {
            v15 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v14[2];
            v9 = *v15 == (_QWORD)v14;
            v14 = v15;
          }
          while (!v9);
        }
        if (*(uint64_t **)(a1 + 64) == v4)
          *(_QWORD *)(a1 + 64) = v15;
        v16 = *(uint64_t **)(a1 + 72);
        --*(_QWORD *)(a1 + 80);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v16, v4);
        v17 = (std::__shared_weak_count *)v4[10];
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        operator delete(v4);
      }
      v4 = v8;
    }
    while (v8 != (uint64_t *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightFallbackRequestId,altitude::HeightFallbackArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    v5 = *(uint64_t **)(a1 + 64);
    while (1)
    {
      v6 = (uint64_t *)v5[1];
      if (v5[9] == a2)
        break;
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
      if (v7 == (uint64_t *)(a1 + 72))
        return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
    if (v6)
    {
      do
      {
        v9 = v6;
        v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      v10 = v5;
      do
      {
        v9 = (uint64_t *)v10[2];
        v8 = *v9 == (_QWORD)v10;
        v10 = v9;
      }
      while (!v8);
    }
    if (v4 == v5)
      *(_QWORD *)(a1 + 64) = v9;
    v11 = *(uint64_t **)(a1 + 72);
    --*(_QWORD *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v5);
    v12 = (std::__shared_weak_count *)v5[10];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v5);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightFallbackRequestId,altitude::HeightFallbackArgs>::clearRequest(uint64_t a1, unint64_t *a2)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  BOOL v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  BOOL v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(unint64_t **)(a1 + 72);
  if (v4)
  {
    v5 = (unint64_t *)(a1 + 72);
    do
    {
      v6 = bswap64(v4[4]);
      v7 = bswap64(*a2);
      if (v6 != v7)
        goto LABEL_9;
      v6 = bswap64(v4[5]);
      v7 = bswap64(a2[1]);
      if (v6 != v7)
        goto LABEL_9;
      v6 = bswap64(v4[6]);
      v7 = bswap64(a2[2]);
      if (v6 == v7
        && (v6 = bswap64(v4[7]), v7 = bswap64(a2[3]), v6 == v7)
        && (v6 = bswap64(v4[8]), v7 = bswap64(a2[4]), v6 == v7))
      {
        v8 = 0;
      }
      else
      {
LABEL_9:
        if (v6 < v7)
          v8 = -1;
        else
          v8 = 1;
      }
      v9 = v8 < 0;
      if (v8 >= 0)
        v10 = v4;
      else
        v10 = v4 + 1;
      if (!v9)
        v5 = v4;
      v4 = (unint64_t *)*v10;
    }
    while (*v10);
    if (v5 != (unint64_t *)(a1 + 72))
    {
      v11 = bswap64(*a2);
      v12 = bswap64(v5[4]);
      if (v11 != v12)
        goto LABEL_25;
      v11 = bswap64(a2[1]);
      v12 = bswap64(v5[5]);
      if (v11 != v12)
        goto LABEL_25;
      v11 = bswap64(a2[2]);
      v12 = bswap64(v5[6]);
      if (v11 == v12
        && (v11 = bswap64(a2[3]), v12 = bswap64(v5[7]), v11 == v12)
        && (v11 = bswap64(a2[4]), v12 = bswap64(v5[8]), v11 == v12))
      {
        v13 = 0;
      }
      else
      {
LABEL_25:
        v13 = v11 < v12 ? -1 : 1;
      }
      if ((v13 & 0x80000000) == 0)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v5[9] + 16))(v5[9]);
        v14 = (unint64_t *)v5[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (unint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          v16 = v5;
          do
          {
            v15 = (unint64_t *)v16[2];
            v17 = *v15 == (_QWORD)v16;
            v16 = v15;
          }
          while (!v17);
        }
        if (*(unint64_t **)(a1 + 64) == v5)
          *(_QWORD *)(a1 + 64) = v15;
        v18 = *(uint64_t **)(a1 + 72);
        --*(_QWORD *)(a1 + 80);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v18, (uint64_t *)v5);
        v19 = (std::__shared_weak_count *)v5[10];
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        operator delete(v5);
      }
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void karo::AsyncRequestManagerTemplate<altitude::HeightFallbackRequestId,altitude::HeightFallbackArgs>::createAndQueueRequest(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 64))(a2);
  v4 = a1[6];
  if (v4)
  {
    v5 = *a2;
    v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      karo::JobManager::queueJob(v4, v10);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v10);
    }
  }
}

void altitude::HeightFallbackRequestManager::createRequest(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  _QWORD *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  char *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  void **v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  _QWORD *v127;
  __int128 v128;
  uint64_t v129;

  if ((v8 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getMutex(void)::mutex, &dword_19F029000);
  }
  std::mutex::lock(&altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getMutex(void)::mutex);
  if ((v9 & 1) == 0
  {
    qword_1EE588548 = 0;
    qword_1EE588550 = 0;
    altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getPool(void)::pool = (uint64_t)&qword_1EE588548;
    *(_OWORD *)&qword_1EE588558 = xmmword_19FFB4CA0;
    qword_1EE588568 = 0;
    __cxa_atexit((void (*)(void *))geo::Pool<altitude::HeightFallbackRequest>::~Pool, &altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getPool(void)::pool, &dword_19F029000);
  }
  v10 = *(_QWORD *)(a1 + 32);
  v11 = qword_1EE588568;
  if (!qword_1EE588568)
  {
    v12 = (uint64_t *)malloc_type_malloc(qword_1EE588560, 0x160B39uLL);
    v13 = v12;
    v14 = qword_1EE588548;
    if (qword_1EE588548)
    {
      while (1)
      {
        while (1)
        {
          v16 = (uint64_t *)v14;
          v17 = *(_QWORD *)(v14 + 32);
          if ((unint64_t)v12 >= v17)
            break;
          v14 = *v16;
          v15 = v16;
          if (!*v16)
            goto LABEL_11;
        }
        if (v17 >= (unint64_t)v12)
          break;
        v14 = v16[1];
        if (!v14)
        {
          v15 = v16 + 1;
          goto LABEL_11;
        }
      }
    }
    else
    {
      v15 = &qword_1EE588548;
      v16 = &qword_1EE588548;
LABEL_11:
      v18 = (uint64_t *)operator new(0x28uLL);
      v18[4] = (uint64_t)v13;
      *v18 = 0;
      v18[1] = 0;
      v18[2] = (uint64_t)v16;
      *v15 = (uint64_t)v18;
      if (*(_QWORD *)altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getPool(void)::pool)
      {
        altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getPool(void)::pool = *(_QWORD *)altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getPool(void)::pool;
        v19 = (uint64_t *)*v15;
      }
      else
      {
        v19 = v18;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EE588548, v19);
      ++qword_1EE588550;
    }
    v11 = qword_1EE588568;
    v20 = 464 * qword_1EE588558 - 464;
    if ((v20 & 0x8000000000000000) == 0)
    {
      v21 = (uint64_t *)((char *)v13 + v20);
      do
      {
        *v21 = v11;
        v22 = v21 - 58;
        v11 = (uint64_t)v21;
        v21 = v22;
      }
      while (v22 >= v13);
      v11 = (uint64_t)(v22 + 58);
    }
  }
  qword_1EE588568 = *(_QWORD *)v11;
  v23 = a2[4];
  v25 = *a2;
  v24 = a2[1];
  v26 = *a3;
  v27 = *(_QWORD *)(a1 + 48);
  karo::Job::Job(v11, v10);
  *(_BYTE *)(v11 + 176) = 0;
  *(_QWORD *)(v11 + 180) = 0xFFFFFFFF00000000;
  *(_QWORD *)v11 = &off_1E42C5DC0;
  *(_QWORD *)(v11 + 192) = v27;
  *(_QWORD *)(v11 + 200) = v23;
  *(_QWORD *)(v11 + 208) = v25;
  *(_QWORD *)(v11 + 216) = v24;
  *(_OWORD *)(v11 + 224) = *(_OWORD *)(v26 + 392);
  *(_QWORD *)(v11 + 248) = 0;
  *(_QWORD *)(v11 + 256) = 0;
  *(_OWORD *)(v11 + 288) = 0u;
  *(_OWORD *)(v11 + 304) = 0u;
  *(_OWORD *)(v11 + 320) = 0u;
  *(_OWORD *)(v11 + 336) = 0u;
  *(_OWORD *)(v11 + 352) = 0u;
  *(_OWORD *)(v11 + 368) = 0u;
  *(_OWORD *)(v11 + 384) = 0u;
  *(_OWORD *)(v11 + 400) = 0u;
  *(_OWORD *)(v11 + 416) = 0u;
  *(_OWORD *)(v11 + 432) = 0u;
  *(_OWORD *)(v11 + 448) = 0u;
  v28 = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  *(double *)(v11 + 272) = v28;
  *(double *)(v11 + 280) = v28;
  *(double *)(v11 + 264) = v28;
  v29 = *(_QWORD **)(v26 + 328);
  if (!v29)
  {
    v30 = operator new();
    *(_DWORD *)(v30 + 8) = 0;
    *(_QWORD *)(v30 + 40) = 0;
    *(_QWORD *)(v30 + 32) = 0;
    *(_QWORD *)(v30 + 16) = 0;
    *(_QWORD *)(v30 + 24) = v30 + 32;
    *(_OWORD *)(v30 + 48) = 0u;
    *(_OWORD *)(v30 + 64) = 0u;
    *(_QWORD *)v30 = &off_1E42C5580;
    *(_OWORD *)(v30 + 80) = 0u;
    v31 = (void **)(v30 + 80);
    *(_QWORD *)(v30 + 208) = 0;
    *(_QWORD *)(v30 + 216) = 0;
    *(_OWORD *)(v30 + 96) = 0u;
    *(_OWORD *)(v30 + 112) = 0u;
    *(_OWORD *)(v30 + 128) = 0u;
    *(_OWORD *)(v30 + 144) = 0u;
    *(_OWORD *)(v30 + 160) = 0u;
    *(_OWORD *)(v30 + 176) = 0u;
    *(_OWORD *)(v30 + 185) = 0u;
    *(_DWORD *)(v30 + 224) = -1;
    *(_QWORD *)(v30 + 232) = 0;
    *(_OWORD *)(v30 + 248) = 0u;
    *(_OWORD *)(v30 + 264) = 0u;
    *(_DWORD *)(v30 + 279) = 0;
    *(_QWORD *)(v30 + 288) = 0x3FF0000000000000;
    *(_DWORD *)(v30 + 296) = 0;
    *(_WORD *)(v30 + 300) = 0;
    altitude::Tile::createTileName(&v128, (unsigned int *)(v26 + 392), (uint64_t *)(*(_QWORD *)(v26 + 288) + 40), (uint64_t *)(*(_QWORD *)(v26 + 288) + 136));
    if (*(char *)(v30 + 103) < 0)
      operator delete(*v31);
    *(_OWORD *)v31 = v128;
    *(_QWORD *)(v30 + 96) = v129;
    *(_QWORD *)(v26 + 328) = v30;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v26);
    v29 = *(_QWORD **)(v26 + 328);
  }
  v32 = v29[15];
  v33 = *(_QWORD *)(v32 + 96);
  if (*(_QWORD *)(v32 + 104) != v33)
  {
    v34 = 0;
    v35 = 0;
    do
    {
      v37 = (uint64_t *)(v33 + 16 * v34);
      v38 = *(_QWORD *)(v11 + 304);
      if (v38 > 7)
      {
        v47 = *(char **)(v11 + 448);
        if (v38 == 8)
        {
          if ((unint64_t)v47 >= *(_QWORD *)(v11 + 456))
          {
            v55 = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>((char **)(v11 + 440), *(_QWORD *)(v11 + 312), *(_QWORD *)(v11 + 320));
          }
          else
          {
            *(_QWORD *)v47 = 0;
            *((_QWORD *)v47 + 1) = 0;
            v48 = *(_QWORD *)(v11 + 312);
            v49 = *(_QWORD *)(v11 + 320);
            if (v49)
            {
              v50 = (unint64_t *)(v49 + 8);
              do
                v51 = __ldxr(v50);
              while (__stxr(v51 + 1, v50));
              v52 = (std::__shared_weak_count *)*((_QWORD *)v47 + 1);
              *(_QWORD *)v47 = v48;
              *((_QWORD *)v47 + 1) = v49;
              if (v52)
              {
                p_shared_owners = (unint64_t *)&v52->__shared_owners_;
                do
                  v54 = __ldaxr(p_shared_owners);
                while (__stlxr(v54 - 1, p_shared_owners));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
              v55 = v47 + 16;
            }
            else
            {
              *(_QWORD *)v47 = v48;
              *((_QWORD *)v47 + 1) = 0;
              v55 = v47 + 16;
            }
          }
          *(_QWORD *)(v11 + 448) = v55;
          if ((unint64_t)v55 >= *(_QWORD *)(v11 + 456))
          {
            v63 = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>((char **)(v11 + 440), *(_QWORD *)(v11 + 328), *(_QWORD *)(v11 + 336));
          }
          else
          {
            *(_QWORD *)v55 = 0;
            *((_QWORD *)v55 + 1) = 0;
            v56 = *(_QWORD *)(v11 + 328);
            v57 = *(_QWORD *)(v11 + 336);
            if (v57)
            {
              v58 = (unint64_t *)(v57 + 8);
              do
                v59 = __ldxr(v58);
              while (__stxr(v59 + 1, v58));
              v60 = (std::__shared_weak_count *)*((_QWORD *)v55 + 1);
              *(_QWORD *)v55 = v56;
              *((_QWORD *)v55 + 1) = v57;
              if (v60)
              {
                v61 = (unint64_t *)&v60->__shared_owners_;
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
            }
            else
            {
              *(_QWORD *)v55 = v56;
              *((_QWORD *)v55 + 1) = 0;
            }
            v63 = v55 + 16;
          }
          *(_QWORD *)(v11 + 448) = v63;
          if ((unint64_t)v63 >= *(_QWORD *)(v11 + 456))
          {
            v71 = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>((char **)(v11 + 440), *(_QWORD *)(v11 + 344), *(_QWORD *)(v11 + 352));
          }
          else
          {
            *(_QWORD *)v63 = 0;
            *((_QWORD *)v63 + 1) = 0;
            v64 = *(_QWORD *)(v11 + 344);
            v65 = *(_QWORD *)(v11 + 352);
            if (v65)
            {
              v66 = (unint64_t *)(v65 + 8);
              do
                v67 = __ldxr(v66);
              while (__stxr(v67 + 1, v66));
              v68 = (std::__shared_weak_count *)*((_QWORD *)v63 + 1);
              *(_QWORD *)v63 = v64;
              *((_QWORD *)v63 + 1) = v65;
              if (v68)
              {
                v69 = (unint64_t *)&v68->__shared_owners_;
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v68);
                }
              }
            }
            else
            {
              *(_QWORD *)v63 = v64;
              *((_QWORD *)v63 + 1) = 0;
            }
            v71 = v63 + 16;
          }
          *(_QWORD *)(v11 + 448) = v71;
          if ((unint64_t)v71 >= *(_QWORD *)(v11 + 456))
          {
            v79 = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>((char **)(v11 + 440), *(_QWORD *)(v11 + 360), *(_QWORD *)(v11 + 368));
          }
          else
          {
            *(_QWORD *)v71 = 0;
            *((_QWORD *)v71 + 1) = 0;
            v72 = *(_QWORD *)(v11 + 360);
            v73 = *(_QWORD *)(v11 + 368);
            if (v73)
            {
              v74 = (unint64_t *)(v73 + 8);
              do
                v75 = __ldxr(v74);
              while (__stxr(v75 + 1, v74));
              v76 = (std::__shared_weak_count *)*((_QWORD *)v71 + 1);
              *(_QWORD *)v71 = v72;
              *((_QWORD *)v71 + 1) = v73;
              if (v76)
              {
                v77 = (unint64_t *)&v76->__shared_owners_;
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
            }
            else
            {
              *(_QWORD *)v71 = v72;
              *((_QWORD *)v71 + 1) = 0;
            }
            v79 = v71 + 16;
          }
          *(_QWORD *)(v11 + 448) = v79;
          if ((unint64_t)v79 >= *(_QWORD *)(v11 + 456))
          {
            v87 = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>((char **)(v11 + 440), *(_QWORD *)(v11 + 376), *(_QWORD *)(v11 + 384));
          }
          else
          {
            *(_QWORD *)v79 = 0;
            *((_QWORD *)v79 + 1) = 0;
            v80 = *(_QWORD *)(v11 + 376);
            v81 = *(_QWORD *)(v11 + 384);
            if (v81)
            {
              v82 = (unint64_t *)(v81 + 8);
              do
                v83 = __ldxr(v82);
              while (__stxr(v83 + 1, v82));
              v84 = (std::__shared_weak_count *)*((_QWORD *)v79 + 1);
              *(_QWORD *)v79 = v80;
              *((_QWORD *)v79 + 1) = v81;
              if (v84)
              {
                v85 = (unint64_t *)&v84->__shared_owners_;
                do
                  v86 = __ldaxr(v85);
                while (__stlxr(v86 - 1, v85));
                if (!v86)
                {
                  ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                  std::__shared_weak_count::__release_weak(v84);
                }
              }
            }
            else
            {
              *(_QWORD *)v79 = v80;
              *((_QWORD *)v79 + 1) = 0;
            }
            v87 = v79 + 16;
          }
          *(_QWORD *)(v11 + 448) = v87;
          if ((unint64_t)v87 >= *(_QWORD *)(v11 + 456))
          {
            v95 = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>((char **)(v11 + 440), *(_QWORD *)(v11 + 392), *(_QWORD *)(v11 + 400));
          }
          else
          {
            *(_QWORD *)v87 = 0;
            *((_QWORD *)v87 + 1) = 0;
            v88 = *(_QWORD *)(v11 + 392);
            v89 = *(_QWORD *)(v11 + 400);
            if (v89)
            {
              v90 = (unint64_t *)(v89 + 8);
              do
                v91 = __ldxr(v90);
              while (__stxr(v91 + 1, v90));
              v92 = (std::__shared_weak_count *)*((_QWORD *)v87 + 1);
              *(_QWORD *)v87 = v88;
              *((_QWORD *)v87 + 1) = v89;
              if (v92)
              {
                v93 = (unint64_t *)&v92->__shared_owners_;
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
            }
            else
            {
              *(_QWORD *)v87 = v88;
              *((_QWORD *)v87 + 1) = 0;
            }
            v95 = v87 + 16;
          }
          *(_QWORD *)(v11 + 448) = v95;
          if ((unint64_t)v95 >= *(_QWORD *)(v11 + 456))
          {
            v103 = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>((char **)(v11 + 440), *(_QWORD *)(v11 + 408), *(_QWORD *)(v11 + 416));
          }
          else
          {
            *(_QWORD *)v95 = 0;
            *((_QWORD *)v95 + 1) = 0;
            v96 = *(_QWORD *)(v11 + 408);
            v97 = *(_QWORD *)(v11 + 416);
            if (v97)
            {
              v98 = (unint64_t *)(v97 + 8);
              do
                v99 = __ldxr(v98);
              while (__stxr(v99 + 1, v98));
              v100 = (std::__shared_weak_count *)*((_QWORD *)v95 + 1);
              *(_QWORD *)v95 = v96;
              *((_QWORD *)v95 + 1) = v97;
              if (v100)
              {
                v101 = (unint64_t *)&v100->__shared_owners_;
                do
                  v102 = __ldaxr(v101);
                while (__stlxr(v102 - 1, v101));
                if (!v102)
                {
                  ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                  std::__shared_weak_count::__release_weak(v100);
                }
              }
            }
            else
            {
              *(_QWORD *)v95 = v96;
              *((_QWORD *)v95 + 1) = 0;
            }
            v103 = v95 + 16;
          }
          *(_QWORD *)(v11 + 448) = v103;
          if ((unint64_t)v103 >= *(_QWORD *)(v11 + 456))
          {
            v47 = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>((char **)(v11 + 440), *(_QWORD *)(v11 + 424), *(_QWORD *)(v11 + 432));
          }
          else
          {
            *(_QWORD *)v103 = 0;
            *((_QWORD *)v103 + 1) = 0;
            v104 = *(_QWORD *)(v11 + 424);
            v105 = *(_QWORD *)(v11 + 432);
            if (v105)
            {
              v106 = (unint64_t *)(v105 + 8);
              do
                v107 = __ldxr(v106);
              while (__stxr(v107 + 1, v106));
              v108 = (std::__shared_weak_count *)*((_QWORD *)v103 + 1);
              *(_QWORD *)v103 = v104;
              *((_QWORD *)v103 + 1) = v105;
              if (v108)
              {
                v109 = (unint64_t *)&v108->__shared_owners_;
                do
                  v110 = __ldaxr(v109);
                while (__stlxr(v110 - 1, v109));
                if (!v110)
                {
                  ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                  std::__shared_weak_count::__release_weak(v108);
                }
              }
            }
            else
            {
              *(_QWORD *)v103 = v104;
              *((_QWORD *)v103 + 1) = 0;
            }
            v47 = v103 + 16;
          }
          *(_QWORD *)(v11 + 448) = v47;
        }
        if ((unint64_t)v47 >= *(_QWORD *)(v11 + 456))
        {
          v36 = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>((char **)(v11 + 440), *v37, v37[1]);
        }
        else
        {
          *(_QWORD *)v47 = 0;
          *((_QWORD *)v47 + 1) = 0;
          v111 = *v37;
          v112 = v37[1];
          if (v112)
          {
            v113 = (unint64_t *)(v112 + 8);
            do
              v114 = __ldxr(v113);
            while (__stxr(v114 + 1, v113));
            v115 = (std::__shared_weak_count *)*((_QWORD *)v47 + 1);
            *(_QWORD *)v47 = v111;
            *((_QWORD *)v47 + 1) = v112;
            if (v115)
            {
              v116 = (unint64_t *)&v115->__shared_owners_;
              do
                v117 = __ldaxr(v116);
              while (__stlxr(v117 - 1, v116));
              if (!v117)
              {
                ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                std::__shared_weak_count::__release_weak(v115);
              }
            }
            v36 = v47 + 16;
          }
          else
          {
            *(_QWORD *)v47 = v111;
            *((_QWORD *)v47 + 1) = 0;
            v36 = v47 + 16;
          }
        }
        *(_QWORD *)(v11 + 448) = v36;
        ++*(_QWORD *)(v11 + 304);
      }
      else
      {
        *(_QWORD *)(v11 + 304) = v38 + 1;
        v40 = *v37;
        v39 = v37[1];
        if (v39)
        {
          v41 = (unint64_t *)(v39 + 8);
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        v43 = (uint64_t *)(v11 + 304 + 16 * v38 + 8);
        v44 = (std::__shared_weak_count *)v43[1];
        *v43 = v40;
        v43[1] = v39;
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
      }
      v33 = *(_QWORD *)(v32 + 96);
      v34 = ++v35;
    }
    while (v35 < (unint64_t)((*(_QWORD *)(v32 + 104) - v33) >> 4));
    v29 = *(_QWORD **)(v26 + 328);
    if (!v29)
    {
      v118 = operator new();
      *(_DWORD *)(v118 + 8) = 0;
      *(_QWORD *)(v118 + 32) = 0;
      *(_QWORD *)(v118 + 40) = 0;
      *(_QWORD *)(v118 + 16) = 0;
      *(_QWORD *)(v118 + 24) = v118 + 32;
      *(_OWORD *)(v118 + 48) = 0u;
      *(_OWORD *)(v118 + 64) = 0u;
      *(_QWORD *)v118 = &off_1E42C5580;
      *(_OWORD *)(v118 + 80) = 0u;
      v119 = (void **)(v118 + 80);
      *(_QWORD *)(v118 + 208) = 0;
      *(_QWORD *)(v118 + 216) = 0;
      *(_OWORD *)(v118 + 96) = 0u;
      *(_OWORD *)(v118 + 112) = 0u;
      *(_OWORD *)(v118 + 128) = 0u;
      *(_OWORD *)(v118 + 144) = 0u;
      *(_OWORD *)(v118 + 160) = 0u;
      *(_OWORD *)(v118 + 176) = 0u;
      *(_OWORD *)(v118 + 185) = 0u;
      *(_DWORD *)(v118 + 224) = -1;
      *(_QWORD *)(v118 + 232) = 0;
      *(_OWORD *)(v118 + 248) = 0u;
      *(_OWORD *)(v118 + 264) = 0u;
      *(_DWORD *)(v118 + 279) = 0;
      *(_QWORD *)(v118 + 288) = 0x3FF0000000000000;
      *(_DWORD *)(v118 + 296) = 0;
      *(_WORD *)(v118 + 300) = 0;
      altitude::Tile::createTileName(&v128, (unsigned int *)(v26 + 392), (uint64_t *)(*(_QWORD *)(v26 + 288) + 40), (uint64_t *)(*(_QWORD *)(v26 + 288) + 136));
      if (*(char *)(v118 + 103) < 0)
        operator delete(*v119);
      *(_OWORD *)v119 = v128;
      *(_QWORD *)(v118 + 96) = v129;
      *(_QWORD *)(v26 + 328) = v118;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v118 + 16))(v118, v26);
      v29 = *(_QWORD **)(v26 + 328);
    }
  }
  v121 = v29[13];
  v120 = v29[14];
  if (v120)
  {
    v122 = (unint64_t *)(v120 + 8);
    do
      v123 = __ldxr(v122);
    while (__stxr(v123 + 1, v122));
  }
  v124 = *(std::__shared_weak_count **)(v11 + 296);
  *(_QWORD *)(v11 + 288) = v121;
  *(_QWORD *)(v11 + 296) = v120;
  if (v124)
  {
    v125 = (unint64_t *)&v124->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  *a4 = v11;
  v127 = (_QWORD *)operator new();
  *v127 = &off_1E42E8C20;
  v127[1] = 0;
  v127[2] = 0;
  v127[3] = v11;
  a4[1] = (uint64_t)v127;
  std::mutex::unlock(&altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getMutex(void)::mutex);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightFallbackRequestId,altitude::HeightFallbackArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unsigned int *v27;
  std::__shared_weak_count *v28;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4)
    a4 = *(_DWORD *)(a1 + 88) + 1;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v27, a1, v8, v8 + 40);
      v10 = v27;
      v11 = *(_DWORD *)(v8 + 48);
      v12 = *(_DWORD *)(v8 + 52);
      v13 = *(_BYTE *)(v8 + 56);
      v14 = atomic_load(v27 + 4);
      if (v14 != v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
      v10[45] = a4;
      v10[46] = v12;
      *((_BYTE *)v10 + 176) = v13;
      v15 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v15 >= *(_QWORD *)(a3 + 16))
      {
        v22 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v27, (uint64_t)v28);
      }
      else
      {
        *v15 = &off_1E42C2D08;
        v16 = v27;
        v15[1] = v27;
        v17 = (uint64_t)v28;
        v15[2] = v28;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          v16 = (unsigned int *)v15[1];
        }
        if (v16)
        {
          v20 = v16 + 32;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        v22 = v15 + 3;
      }
      *(_QWORD *)(a3 + 8) = v22;
      v23 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v8 += 64;
    }
    while (v8 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightFallbackRequestId,altitude::HeightFallbackArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v28;
  std::__shared_weak_count *v29;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3)
    a3 = *(_DWORD *)(a1 + 88) + 1;
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v28, a1, a2, a7);
  v16 = v28;
  v17 = atomic_load(v28 + 4);
  if (v17 != (_DWORD)a4)
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v28 + 24))(v28, a4);
  v16[45] = a3;
  v16[46] = a5;
  *((_BYTE *)v16 + 176) = a6;
  v18 = v28;
  v19 = v29;
  *a8 = &off_1E42C2D08;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v18)
  {
    v22 = v18 + 32;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v24 = v29;
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightFallbackRequestId,altitude::HeightFallbackArgs>::waitOnRequest(uint64_t a1, unint64_t *a2, unsigned int a3)
{
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v22;
  unint64_t v23;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v6 = *(unint64_t **)(a1 + 72);
  if (!v6)
    goto LABEL_35;
  v7 = (unint64_t *)(a1 + 72);
  do
  {
    v8 = bswap64(v6[4]);
    v9 = bswap64(*a2);
    if (v8 != v9)
      goto LABEL_9;
    v8 = bswap64(v6[5]);
    v9 = bswap64(a2[1]);
    if (v8 != v9)
      goto LABEL_9;
    v8 = bswap64(v6[6]);
    v9 = bswap64(a2[2]);
    if (v8 == v9
      && (v8 = bswap64(v6[7]), v9 = bswap64(a2[3]), v8 == v9)
      && (v8 = bswap64(v6[8]), v9 = bswap64(a2[4]), v8 == v9))
    {
      v10 = 0;
    }
    else
    {
LABEL_9:
      if (v8 < v9)
        v10 = -1;
      else
        v10 = 1;
    }
    v11 = v10 < 0;
    if (v10 >= 0)
      v12 = v6;
    else
      v12 = v6 + 1;
    if (!v11)
      v7 = v6;
    v6 = (unint64_t *)*v12;
  }
  while (*v12);
  if (v7 == (unint64_t *)(a1 + 72))
    goto LABEL_35;
  v13 = bswap64(*a2);
  v14 = bswap64(v7[4]);
  if (v13 != v14)
    goto LABEL_25;
  v13 = bswap64(a2[1]);
  v14 = bswap64(v7[5]);
  if (v13 != v14)
    goto LABEL_25;
  v13 = bswap64(a2[2]);
  v14 = bswap64(v7[6]);
  if (v13 == v14
    && (v13 = bswap64(a2[3]), v14 = bswap64(v7[7]), v13 == v14)
    && (v13 = bswap64(a2[4]), v14 = bswap64(v7[8]), v13 == v14))
  {
    v15 = 0;
  }
  else
  {
LABEL_25:
    v15 = v13 < v14 ? -1 : 1;
  }
  if (v15 < 0)
  {
LABEL_35:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    return 0;
  }
  else
  {
    v17 = v7[9];
    v16 = (std::__shared_weak_count *)v7[10];
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    if (v17)
    {
      karo::Job::waitToFinish((karo::Job *)v17, a3);
      pthread_mutex_lock(*(pthread_mutex_t **)(v17 + 152));
      v20 = *(_DWORD *)(v17 + 160) & 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v17 + 152));
      if (!v16)
        return v20;
    }
    else
    {
      v20 = 0;
      if (!v16)
        return v20;
    }
    v22 = (unint64_t *)&v16->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v20;
}

void karo::AsyncRequestManagerTemplate<altitude::HeightFallbackRequestId,altitude::HeightFallbackArgs>::getRequest(uint64_t a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t *v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;

  *a3 = 0;
  a3[1] = 0;
  v7 = (unint64_t *)(a1 + 72);
  v6 = *(unint64_t **)(a1 + 72);
  if (!v6)
    goto LABEL_33;
  v8 = (unint64_t *)(a1 + 72);
  do
  {
    v9 = bswap64(v6[4]);
    v10 = bswap64(*a2);
    if (v9 != v10)
      goto LABEL_9;
    v9 = bswap64(v6[5]);
    v10 = bswap64(a2[1]);
    if (v9 != v10)
      goto LABEL_9;
    v9 = bswap64(v6[6]);
    v10 = bswap64(a2[2]);
    if (v9 == v10
      && (v9 = bswap64(v6[7]), v10 = bswap64(a2[3]), v9 == v10)
      && (v9 = bswap64(v6[8]), v10 = bswap64(a2[4]), v9 == v10))
    {
      v11 = 0;
    }
    else
    {
LABEL_9:
      if (v9 < v10)
        v11 = -1;
      else
        v11 = 1;
    }
    v12 = v11 < 0;
    if (v11 >= 0)
      v13 = v6;
    else
      v13 = v6 + 1;
    if (!v12)
      v8 = v6;
    v6 = (unint64_t *)*v13;
  }
  while (*v13);
  if (v8 == v7)
    goto LABEL_33;
  v14 = bswap64(*a2);
  v15 = bswap64(v8[4]);
  if (v14 != v15)
    goto LABEL_25;
  v14 = bswap64(a2[1]);
  v15 = bswap64(v8[5]);
  if (v14 != v15)
    goto LABEL_25;
  v14 = bswap64(a2[2]);
  v15 = bswap64(v8[6]);
  if (v14 == v15
    && (v14 = bswap64(a2[3]), v15 = bswap64(v8[7]), v14 == v15)
    && (v14 = bswap64(a2[4]), v15 = bswap64(v8[8]), v14 == v15))
  {
    v16 = 0;
  }
  else
  {
LABEL_25:
    v16 = v14 < v15 ? -1 : 1;
  }
  if (v16 < 0)
  {
LABEL_33:
    (*(void (**)(unint64_t *__return_ptr, uint64_t, unint64_t *))(*(_QWORD *)a1 + 64))(&v47, a1, a2);
    v22 = v47;
    v21 = v48;
    *a3 = v47;
    a3[1] = (unint64_t)v21;
    v23 = *(unint64_t **)(a1 + 72);
    v24 = v7;
    if (v23)
    {
      while (1)
      {
        while (1)
        {
          v24 = v23;
          v25 = bswap64(*a2);
          v26 = bswap64(v24[4]);
          if (v25 == v26)
          {
            v25 = bswap64(a2[1]);
            v26 = bswap64(v24[5]);
            if (v25 == v26)
            {
              v25 = bswap64(a2[2]);
              v26 = bswap64(v24[6]);
              if (v25 == v26)
              {
                v25 = bswap64(a2[3]);
                v26 = bswap64(v24[7]);
                if (v25 == v26)
                {
                  v25 = bswap64(a2[4]);
                  v26 = bswap64(v24[8]);
                  if (v25 == v26)
                    break;
                }
              }
            }
          }
          v27 = v25 < v26 ? -1 : 1;
          if ((v27 & 0x80000000) == 0)
            break;
          v23 = (unint64_t *)*v24;
          v7 = v24;
          if (!*v24)
            goto LABEL_57;
        }
        v28 = bswap64(v24[4]);
        v29 = bswap64(*a2);
        if (v28 != v29)
          goto LABEL_51;
        v28 = bswap64(v24[5]);
        v29 = bswap64(a2[1]);
        if (v28 != v29)
          goto LABEL_51;
        v28 = bswap64(v24[6]);
        v29 = bswap64(a2[2]);
        if (v28 == v29
          && (v28 = bswap64(v24[7]), v29 = bswap64(a2[3]), v28 == v29)
          && (v28 = bswap64(v24[8]), v29 = bswap64(a2[4]), v28 == v29))
        {
          v30 = 0;
        }
        else
        {
LABEL_51:
          v30 = v28 < v29 ? -1 : 1;
        }
        if ((v30 & 0x80000000) == 0)
          break;
        v23 = (unint64_t *)v24[1];
        if (!v23)
        {
          v7 = v24 + 1;
          goto LABEL_57;
        }
      }
    }
    else
    {
LABEL_57:
      v31 = v24;
      v24 = (unint64_t *)operator new(0x58uLL);
      v32 = *((_OWORD *)a2 + 1);
      *((_OWORD *)v24 + 2) = *(_OWORD *)a2;
      *((_OWORD *)v24 + 3) = v32;
      v33 = a2[4];
      v24[9] = 0;
      v24[10] = 0;
      v24[8] = v33;
      *v24 = 0;
      v24[1] = 0;
      v24[2] = (unint64_t)v31;
      *v7 = (unint64_t)v24;
      v34 = **(_QWORD **)(a1 + 64);
      v35 = (uint64_t *)v24;
      if (v34)
      {
        *(_QWORD *)(a1 + 64) = v34;
        v35 = (uint64_t *)*v7;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v35);
      ++*(_QWORD *)(a1 + 80);
    }
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v37 = __ldxr(p_shared_owners);
      while (__stxr(v37 + 1, p_shared_owners));
    }
    v38 = (std::__shared_weak_count *)v24[10];
    v24[9] = v22;
    v24[10] = (unint64_t)v21;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = *(_QWORD *)(a1 + 48);
    if (v41)
    {
      v42 = *a3;
      v43 = (std::__shared_weak_count *)a3[1];
      v47 = v42;
      v48 = v43;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        karo::JobManager::queueJob(v41, &v47);
        do
          v46 = __ldaxr(v44);
        while (__stlxr(v46 - 1, v44));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      else
      {
        karo::JobManager::queueJob(v41, &v47);
      }
    }
  }
  else
  {
    v18 = v8[9];
    v17 = v8[10];
    if (v17)
    {
      v19 = (unint64_t *)(v17 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    *a3 = v18;
    a3[1] = v17;
  }
}

uint64_t altitude::HeightFallbackRequestManager::getHeightElement@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  double *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  double *v19;
  std::__shared_weak_count *v20;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  (*(void (**)(double **__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(&v19, a1, a2, 0);
  v7 = v19;
  v6 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (((*(uint64_t (**)(double *))(*(_QWORD *)v7 + 40))(v7) & 1) != 0)
  {
    (*(void (**)(double *))(*(_QWORD *)v7 + 48))(v7);
    v10 = *(_QWORD *)(a1 + 96);
    if (v10)
    {
      v11 = v7[35];
      v12 = (v11 - v7[34]) * 1000.0;
      gdc::Statistics::addSampleValue(v10, "HeightFallbackLoadJobTotalTime", 0x31A9D7F40000001EuLL, (v11 - v7[33]) * 1000.0);
      gdc::Statistics::addSampleValue(*(_QWORD *)(a1 + 96), "HeightFallbackLoadJobMainTime", 0xB57B579F0000001DLL, v12);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  if (!v6)
    goto LABEL_12;
  v13 = (unint64_t *)&v6->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v15 = v20;
    if (!v20)
      return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  }
  else
  {
LABEL_12:
    v15 = v20;
    if (!v20)
      return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  }
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t geo::Pool<altitude::HeightFallbackRequest>::~Pool(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (***v18)(_QWORD);
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t **v22;
  unint64_t v23;
  uint64_t **v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;

  v31 = 0;
  v32 = 0;
  v30 = &v31;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v5 = v31;
      v6 = &v31;
      v7 = &v31;
      if (v31)
      {
        while (1)
        {
          while (1)
          {
            v7 = (uint64_t **)v5;
            v8 = v5[4];
            if ((unint64_t)v2 >= v8)
              break;
            v5 = *v7;
            v6 = v7;
            if (!*v7)
              goto LABEL_13;
          }
          if (v8 >= (unint64_t)v2)
            break;
          v5 = v7[1];
          if (!v5)
          {
            v6 = v7 + 1;
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        v9 = (uint64_t *)operator new(0x28uLL);
        v9[4] = (uint64_t)v2;
        *v9 = 0;
        v9[1] = 0;
        v9[2] = (uint64_t)v7;
        *v6 = v9;
        if (*v30)
        {
          v30 = (uint64_t **)*v30;
          v4 = *v6;
        }
        else
        {
          v4 = v9;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v31, v4);
        v3 = ++v32;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD **)a1;
  v12 = (_QWORD *)(a1 + 8);
  v13 = v3 == *(_QWORD *)(a1 + 16) * v10 || v11 == v12;
  if (v13 || v10 == 0)
  {
    if (v11 == v12)
      goto LABEL_48;
    goto LABEL_50;
  }
  v15 = 1;
  do
  {
    if (v15)
    {
      v16 = 0;
      v17 = v11[4];
      do
      {
        v18 = (void (***)(_QWORD))(v17 + 464 * v16);
        v19 = v31;
        if (!v31)
          goto LABEL_29;
        v20 = &v31;
        do
        {
          v21 = v19;
          v22 = v20;
          v23 = v19[4];
          v24 = (uint64_t **)(v19 + 1);
          if (v23 >= (unint64_t)v18)
          {
            v24 = (uint64_t **)v21;
            v20 = (uint64_t **)v21;
          }
          v19 = *v24;
        }
        while (v19);
        if (v20 == &v31)
          goto LABEL_29;
        if (v23 < (unint64_t)v18)
          v21 = (uint64_t *)v22;
        if ((unint64_t)v18 < v21[4])
        {
LABEL_29:
          (**v18)(v18);
          v10 = *(_QWORD *)(a1 + 24);
        }
        ++v16;
        v15 = v10;
      }
      while (v16 < v10);
    }
    v25 = (_QWORD *)v11[1];
    if (v25)
    {
      do
      {
        v26 = v25;
        v25 = (_QWORD *)*v25;
      }
      while (v25);
    }
    else
    {
      do
      {
        v26 = (_QWORD *)v11[2];
        v13 = *v26 == (_QWORD)v11;
        v11 = v26;
      }
      while (!v13);
    }
    v11 = v26;
  }
  while (v26 != v12);
  v11 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v12)
  {
    do
    {
LABEL_50:
      free((void *)v11[4]);
      v28 = (_QWORD *)v11[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v11[2];
          v13 = *v29 == (_QWORD)v11;
          v11 = v29;
        }
        while (!v13);
      }
      v11 = v29;
    }
    while (v29 != v12);
  }
LABEL_48:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v31);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void std::__shared_ptr_pointer<altitude::HeightFallbackRequest *,altitude::util::PoolHandle<altitude::HeightFallbackRequest>::Deleter,std::allocator<altitude::HeightFallbackRequest>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<altitude::HeightFallbackRequest *,altitude::util::PoolHandle<altitude::HeightFallbackRequest>::Deleter,std::allocator<altitude::HeightFallbackRequest>>::__on_zero_shared(uint64_t a1)
{
  void (***v1)(_QWORD);
  unsigned __int8 v2;
  unsigned __int8 v3;

  v1 = *(void (****)(_QWORD))(a1 + 24);
  if ((v2 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getMutex(void)::mutex, &dword_19F029000);
  }
  std::mutex::lock(&altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getMutex(void)::mutex);
  if ((v3 & 1) == 0
  {
    qword_1EE588548 = 0;
    qword_1EE588550 = 0;
    altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getPool(void)::pool = (uint64_t)&qword_1EE588548;
    *(_OWORD *)&qword_1EE588558 = xmmword_19FFB4CA0;
    qword_1EE588568 = 0;
    __cxa_atexit((void (*)(void *))geo::Pool<altitude::HeightFallbackRequest>::~Pool, &altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getPool(void)::pool, &dword_19F029000);
  }
  if (v1 && qword_1EE588550)
  {
    (**v1)(v1);
    *v1 = (void (**)(_QWORD))qword_1EE588568;
    qword_1EE588568 = (uint64_t)v1;
  }
  std::mutex::unlock(&altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getMutex(void)::mutex);
}

void std::__tree<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::HeightFallbackRequestId,std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::HeightFallbackRequestId>,true>,std::allocator<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::HeightFallbackRequestId,std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::HeightFallbackRequestId>,true>,std::allocator<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*a1);
    std::__tree<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::HeightFallbackRequestId,std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::HeightFallbackRequestId>,true>,std::allocator<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[10];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    operator delete(a1);
  }
}

void md::MuninAvailabilityLayerDataSource::~MuninAvailabilityLayerDataSource(md::MuninAvailabilityLayerDataSource *this)
{
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::MuninAvailabilityLayerDataSource::createLayerData(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    while (*(_WORD *)v5 != 9)
    {
      v5 += 48;
      if (v5 == v6)
        goto LABEL_15;
    }
  }
  if (v5 == v6 || *(_QWORD *)(v5 + 32) != 1)
  {
LABEL_15:
    v8 = 0;
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v5 + 24);
  v8 = *(_QWORD *)(v7 + 112);
  v9 = *(std::__shared_weak_count **)(v7 + 120);
  if (!v9)
  {
LABEL_16:
    v18 = v8;
    v19 = 0;
    goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v18 = v8;
  v19 = v9;
  v12 = (unint64_t *)&v9->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_17:
  v15 = operator new(0x310uLL);
  v15[1] = 0;
  v15[2] = 0;
  *v15 = &off_1E42DC7B0;
  *a3 = md::MuninAvailabilityData::MuninAvailabilityData((uint64_t)(v15 + 3), a1, (uint64_t *)(v18 + 144));
  a3[1] = (uint64_t)v15;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_19F8E8368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::MuninAvailabilityLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void std::__shared_ptr_emplace<md::MuninAvailabilityData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC7B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MuninAvailabilityData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC7B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::MuninAvailabilityData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *md::DaVinciTrafficRenderLayer::layout(md::DaVinciTrafficRenderLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count **v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count_vtbl *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  md::DaVinciTrafficRenderLayer *v34;
  unint64_t v35;
  uint64_t v36;
  float v37;
  void *v38;
  float v39;
  BOOL v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  _DWORD *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __n128 *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  gss::Allocator *v65;
  uint64_t v66;
  void *v67;
  int v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  int v96;
  _QWORD *v97;
  int8x8_t v98;
  uint8x8_t v99;
  unint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint8x8_t v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id *v121;
  id v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  md::DaVinciTrafficLayer *v127;
  md::DaVinciTrafficLayer *v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t *v133;
  uint64_t *i;
  uint64_t v135;
  __n128 v136;
  uint64_t (***v137)();
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  BOOL v141;
  uint64_t *v142;
  uint64_t *j;
  uint64_t v144;
  __n128 v145;
  uint64_t (***v146)();
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  unint64_t v156;
  _QWORD *v157;
  unint64_t v158;
  unsigned int v159;
  BOOL v160;
  int v161;
  std::__shared_weak_count *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t *shared_owners;
  unint64_t v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t v170;
  uint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  _QWORD *result;
  uint64_t v178;
  std::__shared_weak_count **v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count *v181;
  uint64_t v182;
  _OWORD v183[5];
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  __int128 v188;
  _BYTE v189[22];
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  __int128 v199;
  _BYTE v200[22];
  unint64_t v201;
  std::__shared_weak_count *v202;
  __int128 __b;
  uint64_t (**v204)();
  std::__shared_weak_count *v205;
  _QWORD v206[3];
  _QWORD *v207;
  _QWORD v208[3];
  _QWORD *v209;
  _QWORD v210[3];
  _QWORD *v211;
  uint64_t (**v212)();
  std::__shared_weak_count *v213;
  uint64_t (***v214)();
  uint64_t v215;

  v215 = *MEMORY[0x1E0C80C00];
  v208[0] = &off_1E42D2878;
  v208[1] = a2;
  v209 = v208;
  v206[0] = &off_1E42D28C0;
  v206[1] = a2;
  v207 = v206;
  v211 = v210;
  v210[0] = &off_1E42D28C0;
  v210[1] = a2;
  std::__function::__func<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v208);
  v4 = v207;
  if (v207 == v206)
  {
    v5 = 4;
    v4 = v206;
  }
  else
  {
    if (!v207)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v209;
  if (v209 == v208)
  {
    v7 = 4;
    v6 = v208;
  }
  else
  {
    if (!v209)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = *((_QWORD *)this + 44);
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 120) = 0;
  v9 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8);
  v10 = v9[3];
  v11 = v9[4];
  if (v11 == v10)
  {
    v18 = 0;
  }
  else
  {
    v12 = 0;
    v13 = (unsigned __int8 *)*((_QWORD *)this + 48);
    while (1)
    {
      v14 = *(unsigned __int8 **)(v10 + 8 * v12);
      if (*v14 == *v13)
      {
        v15 = *((_QWORD *)v14 + 1);
        v16 = v9[15];
        if (v15 < (v9[16] - v16) >> 3)
          break;
      }
      if (++v12 >= (unint64_t)((v11 - v10) >> 3))
        goto LABEL_19;
    }
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(*(_QWORD *)(v17 + 24) + 8 * v13[1]);
      v19 = v11 - v10;
      if (v11 == v10)
        goto LABEL_27;
      goto LABEL_20;
    }
LABEL_19:
    v18 = 0;
    v19 = v11 - v10;
    if (v11 == v10)
      goto LABEL_27;
LABEL_20:
    v20 = 0;
    v21 = v19 >> 3;
    while (1)
    {
      v22 = *(unsigned __int8 **)(v10 + 8 * v20);
      if (*v22 == v13[2])
      {
        v23 = *((_QWORD *)v22 + 1);
        v24 = v9[15];
        if (v23 < (v9[16] - v24) >> 3)
          break;
      }
      if (++v20 >= v21)
        goto LABEL_27;
    }
    v25 = *(_QWORD *)(v24 + 8 * v23);
    if (v25)
    {
      v26 = *(std::__shared_weak_count **)(*(_QWORD *)(v25 + 24) + 8 * v13[3]);
      goto LABEL_28;
    }
  }
LABEL_27:
  v26 = 0;
LABEL_28:
  v27 = (std::__shared_weak_count **)operator new(0x10uLL);
  *v27 = v18;
  v27[1] = v26;
  v28 = v18[3].__vftable;
  if ((std::__shared_weak_count_vtbl *)v18[3].__shared_owners_ != v28)
    v18[3].__shared_owners_ = (uint64_t)v28;
  v18[1].__shared_owners_ = 0;
  v29 = v27[1];
  v30 = v29[3].__vftable;
  if ((std::__shared_weak_count_vtbl *)v29[3].__shared_owners_ != v30)
    v29[3].__shared_owners_ = (uint64_t)v30;
  v179 = v27;
  v29[1].__shared_owners_ = 0;
  md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v183, a2);
  v186 = 0;
  v187 = 0;
  memset_pattern16(&v188, &unk_19FFB6380, 0x10uLL);
  v189[21] = 0;
  *(_QWORD *)v189 = 0;
  *(_QWORD *)&v189[8] = 0;
  *(_DWORD *)&v189[15] = 0;
  v189[16] = **((_BYTE **)a2 + 92);
  v189[17] = 1;
  v31 = (_QWORD *)*((_QWORD *)a2 + 1);
  v32 = v31[1];
  if ((v32 & (v32 - 1)) != 0)
  {
    v35 = 0x1AF456233693CD46;
    if (v32 <= 0x1AF456233693CD46)
      v35 = 0x1AF456233693CD46 % v32;
    v34 = this;
    v33 = *(_QWORD **)(*v31 + 8 * v35);
    do
    {
      do
        v33 = (_QWORD *)*v33;
      while (v33[1] != 0x1AF456233693CD46);
    }
    while (v33[2] != 0x1AF456233693CD46);
  }
  else
  {
    v33 = *(_QWORD **)(*v31 + 8 * ((v32 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v33 = (_QWORD *)*v33;
      while (v33[1] != 0x1AF456233693CD46);
    }
    while (v33[2] != 0x1AF456233693CD46);
    v34 = this;
  }
  v36 = *(_QWORD *)(v33[5] + 32);
  v37 = fmaxf(*(float *)(v36 + 3080) + *(float *)(v36 + 3076), 1.0);
  *(float *)&v189[12] = v37;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "daVinciGlobeSplinedMaxZoom");
  v40 = v37 <= v39 && *(unsigned __int8 *)(v36 + 3776) - 1 < 3;

  BYTE8(v184) = v40;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v189[21] = objc_msgSend(v41, "showTrafficOffset");

  v42 = *((_QWORD *)v34 + 34);
  v182 = *((_QWORD *)v34 + 35);
  if (v42 == v182)
    goto LABEL_215;
  while (2)
  {
    v43 = *(_QWORD **)v42;
    *(_QWORD *)&v185 = *(_QWORD *)(*(_QWORD *)v42 + 248);
    v44 = (_QWORD *)v43[48];
    if (!v44)
      goto LABEL_47;
    v180 = v179[1];
    v181 = *v179;
    v45 = v43[27];
    v46 = v43[29];
    if ((*(_BYTE *)(v45 + 16) & 2) == 0)
    {
      v47 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v47 != -1)
      {
        *(_QWORD *)&v190 = &v204;
        v212 = (uint64_t (**)())&v190;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v212, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v48 = *(_DWORD **)(v45 + 72);
    v49 = (_QWORD *)v44[90];
    v50 = v49[1];
    v51 = (_DWORD *)v49[9];
    *v51 = *v48;
    v51[1] = v48[1];
    v51[2] = v48[2];
    v51[3] = v48[3];
    v51[4] = v48[4];
    v51[5] = v48[5];
    v51[6] = v48[6];
    v51[7] = v48[7];
    v51[8] = v48[8];
    v51[9] = v48[9];
    v51[10] = v48[10];
    v51[11] = v48[11];
    v51[12] = v48[12];
    v51[13] = v48[13];
    v51[14] = v48[14];
    v51[15] = v48[15];
    v51[16] = v48[16];
    v52 = v49[8];
    if (v52 <= v50)
      v52 = v50;
    v49[7] = 0;
    v49[8] = v52;
    v53 = *(_QWORD *)(v46 + 8);
    if ((*(_BYTE *)(v46 + 16) & 2) == 0)
    {
      v54 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v54 != -1)
      {
        *(_QWORD *)&v190 = &v204;
        v212 = (uint64_t (**)())&v190;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v212, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    if (v53)
      v55 = *(__n128 **)(v46 + 72);
    else
      v55 = 0;
    v56 = v44[92];
    v57 = *(_QWORD *)(v56 + 8);
    if (v57)
    {
      ggl::Tile::Transform::operator=(*(__n128 **)(v56 + 72), v55);
      if (v58)
      {
        v59 = *(_QWORD *)(v56 + 64);
        if (v59 <= v57)
          v59 = v57;
        *(_QWORD *)(v56 + 56) = 0;
        *(_QWORD *)(v56 + 64) = v59;
      }
    }
    else
    {
      ggl::Tile::Transform::operator=(0, v55);
    }
    v60 = (_QWORD *)*((_QWORD *)a2 + 1);
    v61 = v60[1];
    if ((v61 & (v61 - 1)) != 0)
    {
      v63 = 0xE42D19AFCA302E68;
      if (v61 <= 0xE42D19AFCA302E68)
        v63 = 0xE42D19AFCA302E68 % v61;
      v62 = *(_QWORD **)(*v60 + 8 * v63);
      do
      {
        do
          v62 = (_QWORD *)*v62;
        while (v62[1] != 0xE42D19AFCA302E68);
      }
      while (v62[2] != 0xE42D19AFCA302E68);
    }
    else
    {
      v62 = *(_QWORD **)(*v60 + 8 * ((v61 - 1) & 0xE42D19AFCA302E68));
      do
      {
        do
          v62 = (_QWORD *)*v62;
        while (v62[1] != 0xE42D19AFCA302E68);
      }
      while (v62[2] != 0xE42D19AFCA302E68);
    }
    v64 = **(_QWORD **)(v62[5] + 32);
    *(_QWORD *)((char *)&v190 + 7) = 0;
    *(_QWORD *)&v190 = 0;
    HIBYTE(v190) = 1;
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v204, v64, (gss::FeatureAttributeSet *)(v44 + 96), (gss::QueryOverrides *)&v190);
    if (!BYTE14(v190) && (_QWORD)v190)
    {
      v66 = gss::Allocator::instance(v65);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v66 + 40))(v66, v190, WORD6(v190));
    }
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    v68 = objc_msgSend(v67, "loadGreenTraffic");

    v69 = (uint64_t)v204;
    v70 = v205;
    v201 = (unint64_t)v204;
    v202 = v205;
    if (v205)
    {
      p_shared_owners = (unint64_t *)&v205->__shared_owners_;
      do
        v72 = __ldxr(p_shared_owners);
      while (__stxr(v72 + 1, p_shared_owners));
      do
        v73 = __ldxr(p_shared_owners);
      while (__stxr(v73 + 1, p_shared_owners));
    }
    md::TrafficMeshStyle::setup((int *)&__b, v69, v70, v68);
    if (!v70)
      goto LABEL_87;
    v74 = (unint64_t *)&v70->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
      v76 = v202;
      if (v202)
        goto LABEL_88;
    }
    else
    {
LABEL_87:
      v76 = v202;
      if (v202)
      {
LABEL_88:
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
    }
    v79 = (unint64_t)v204;
    v80 = v205;
    v212 = v204;
    v213 = v205;
    if (v205)
    {
      v81 = (unint64_t *)&v205->__shared_owners_;
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
      *((_QWORD *)&v190 + 1) = v80;
      do
        v83 = __ldxr(v81);
      while (__stxr(v83 + 1, v81));
    }
    else
    {
      *((_QWORD *)&v190 + 1) = 0;
    }
    *(_QWORD *)&v190 = v79;
    v191 = 0uLL;
    LOBYTE(v192) = 0;
    if (v79)
      LOBYTE(v79) = (*(uint64_t (**)(unint64_t, __int128 *))(*(_QWORD *)v79 + 48))(v79, &v191);
    LOBYTE(v192) = v79;
    if (v80)
    {
      v84 = (unint64_t *)&v80->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    md::TrafficMeshStyle::overrideSetup((int *)&__b, (uint64_t)&v190, v68, 4);
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v190);
    v193 = v183[3];
    v194 = v183[4];
    v195 = v184;
    v196 = v185;
    v190 = v183[0];
    v191 = v183[1];
    v192 = v183[2];
    v86 = v187;
    if (v187)
    {
      v87 = (unint64_t *)&v187->__shared_owners_;
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    v199 = v188;
    *(_OWORD *)v200 = *(_OWORD *)v189;
    *(_QWORD *)&v200[14] = *(_QWORD *)&v189[14];
    v90 = (unint64_t)v204;
    v89 = v205;
    if (v205)
    {
      v91 = (unint64_t *)&v205->__shared_owners_;
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
    }
    v197 = v90;
    v198 = v89;
    if (v86)
    {
      v93 = (unint64_t *)&v86->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    v199 = __b;
    BYTE9(v193) = 0;
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v95, "ribbonCrispness");
    DWORD1(v194) = v96;

    *(_WORD *)&v200[19] = 0;
    BYTE8(v196) = *((_BYTE *)v34 + 34) == 47;
    v97 = (_QWORD *)*((_QWORD *)a2 + 1);
    v98 = (int8x8_t)v97[1];
    if (!*(_QWORD *)&v98)
      goto LABEL_142;
    v99 = (uint8x8_t)vcnt_s8(v98);
    v99.i16[0] = vaddlv_u8(v99);
    if (v99.u32[0] > 1uLL)
    {
      v100 = 0xDFC317497CF9A4BFLL;
      if (*(_QWORD *)&v98 <= 0xDFC317497CF9A4BFLL)
        v100 = 0xDFC317497CF9A4BFLL % *(_QWORD *)&v98;
    }
    else
    {
      v100 = (*(_QWORD *)&v98 - 1) & 0xDFC317497CF9A4BFLL;
    }
    v101 = *(_QWORD **)(*v97 + 8 * v100);
    if (!v101)
      goto LABEL_142;
    v102 = (_QWORD *)*v101;
    if (!v102)
      goto LABEL_142;
    if (v99.u32[0] < 2uLL)
    {
      while (1)
      {
        v104 = v102[1];
        if (v104 == 0xDFC317497CF9A4BFLL)
        {
          if (v102[2] == 0xDFC317497CF9A4BFLL)
            goto LABEL_139;
        }
        else if ((v104 & (*(_QWORD *)&v98 - 1)) != v100)
        {
          goto LABEL_142;
        }
        v102 = (_QWORD *)*v102;
        if (!v102)
          goto LABEL_142;
      }
    }
    while (1)
    {
      v103 = v102[1];
      if (v103 == 0xDFC317497CF9A4BFLL)
        break;
      if (v103 >= *(_QWORD *)&v98)
        v103 %= *(_QWORD *)&v98;
      if (v103 != v100)
        goto LABEL_142;
LABEL_128:
      v102 = (_QWORD *)*v102;
      if (!v102)
        goto LABEL_142;
    }
    if (v102[2] != 0xDFC317497CF9A4BFLL)
      goto LABEL_128;
LABEL_139:
    v105 = v102[5];
    if (*(_QWORD *)(v105 + 8) != 0xDFC317497CF9A4BFLL)
    {
LABEL_142:
      LOBYTE(v106) = 0;
      goto LABEL_143;
    }
    v106 = *(_QWORD *)(v105 + 32);
    if (v106)
      LOBYTE(v106) = *(_BYTE *)(v106 + 64) != 0;
LABEL_143:
    BYTE12(v194) = v106;
    v107 = *(_QWORD *)(*((_QWORD *)v34 + 5) + 24);
    v108 = *(_QWORD *)(v107 + 160);
    if (v108
      && (v109 = *(_QWORD *)(v107 + 8),
          v110 = *(_QWORD *)(v108 + 32),
          v111 = *(_QWORD *)(v109 + 96),
          v110 < (*(_QWORD *)(v109 + 104) - v111) >> 3))
    {
      v112 = *(_QWORD *)(*(_QWORD *)(v111 + 8 * v110) + 16);
      *(_QWORD *)&v195 = v112;
      if (!*(_QWORD *)&v98)
        goto LABEL_180;
    }
    else
    {
      v112 = 0;
      *(_QWORD *)&v195 = 0;
      if (!*(_QWORD *)&v98)
        goto LABEL_180;
    }
    v113 = (uint8x8_t)vcnt_s8(v98);
    v113.i16[0] = vaddlv_u8(v113);
    if (v113.u32[0] > 1uLL)
    {
      v114 = 0xA60DDA5A69582425;
      if (*(_QWORD *)&v98 <= 0xA60DDA5A69582425)
        v114 = 0xA60DDA5A69582425 % *(_QWORD *)&v98;
    }
    else
    {
      v114 = (*(_QWORD *)&v98 - 1) & 0xA60DDA5A69582425;
    }
    v115 = *(_QWORD **)(*v97 + 8 * v114);
    if (v115)
    {
      v116 = (_QWORD *)*v115;
      if (v116)
      {
        if (v113.u32[0] < 2uLL)
        {
          v117 = *(_QWORD *)&v98 - 1;
          while (1)
          {
            v119 = v116[1];
            if (v119 == 0xA60DDA5A69582425)
            {
              if (v116[2] == 0xA60DDA5A69582425)
                goto LABEL_168;
            }
            else if ((v119 & v117) != v114)
            {
              goto LABEL_180;
            }
            v116 = (_QWORD *)*v116;
            if (!v116)
              goto LABEL_180;
          }
        }
        do
        {
          v118 = v116[1];
          if (v118 == 0xA60DDA5A69582425)
          {
            if (v116[2] == 0xA60DDA5A69582425)
            {
LABEL_168:
              v120 = v116[5];
              if (*(_QWORD *)(v120 + 8) == 0xA60DDA5A69582425)
              {
                v121 = *(id **)(v120 + 32);
                if (v121 && v112 == 0)
                {
                  v123 = *v121;
                  objc_msgSend(v123, "textureManager");
                  v124 = v213;
                  *(_QWORD *)&v195 = *v212;
                  if (v213)
                  {
                    v125 = (unint64_t *)&v213->__shared_owners_;
                    do
                      v126 = __ldaxr(v125);
                    while (__stlxr(v126 - 1, v125));
                    if (!v126)
                    {
                      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                      std::__shared_weak_count::__release_weak(v124);
                    }
                  }

                }
              }
              break;
            }
          }
          else
          {
            if (v118 >= *(_QWORD *)&v98)
              v118 %= *(_QWORD *)&v98;
            if (v118 != v114)
              break;
          }
          v116 = (_QWORD *)*v116;
        }
        while (v116);
      }
    }
LABEL_180:
    v127 = (md::DaVinciTrafficLayer *)v44[95];
    v128 = (md::DaVinciTrafficLayer *)v44[94];
    v129 = **((_BYTE **)a2 + 92);
    if (v127)
    {
      v200[16] = 0;
      v130 = *((_QWORD *)v127 + 19);
      v131 = *((_QWORD *)v34 + 47);
      if (v130)
        v132 = v130 == v131;
      else
        v132 = 0;
      if (!v132)
      {
        *((_QWORD *)v127 + 19) = v131;
        v133 = (uint64_t *)*((_QWORD *)v127 + 1);
        for (i = (uint64_t *)*((_QWORD *)v127 + 2);
              v133 != i;
              **(_QWORD **)(*(_QWORD *)(v135 + 328) + 96) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v135 + 8)
                                                                                                + 152)
                                                                                    + 128)
                                                                        + 16))
        {
          v135 = *v133++;
        }
      }
      md::DaVinciTrafficLayer::layout(v127, (const md::TrafficContext *)&v190);
      v212 = &off_1E42D4570;
      v213 = v181;
      v214 = &v212;
      md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(*((_QWORD **)v127 + 1), *((_QWORD **)v127 + 2), &v212, v136);
      v137 = v214;
      if (v214 == &v212)
      {
        v137 = &v212;
        v138 = 4;
LABEL_191:
        (*v137)[v138]();
      }
      else if (v214)
      {
        v138 = 5;
        goto LABEL_191;
      }
    }
    if (v128)
    {
      v200[16] = v129;
      v139 = *((_QWORD *)v128 + 19);
      v140 = *((_QWORD *)v34 + 47);
      if (v139)
        v141 = v139 == v140;
      else
        v141 = 0;
      if (!v141)
      {
        *((_QWORD *)v128 + 19) = v140;
        v142 = (uint64_t *)*((_QWORD *)v128 + 1);
        for (j = (uint64_t *)*((_QWORD *)v128 + 2);
              v142 != j;
              **(_QWORD **)(*(_QWORD *)(v144 + 328) + 96) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v144 + 8)
                                                                                                + 152)
                                                                                    + 128)
                                                                        + 16))
        {
          v144 = *v142++;
        }
      }
      md::DaVinciTrafficLayer::layout(v128, (const md::TrafficContext *)&v190);
      v212 = &off_1E42D4570;
      v213 = v180;
      v214 = &v212;
      md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(*((_QWORD **)v128 + 1), *((_QWORD **)v128 + 2), &v212, v145);
      v146 = v214;
      if (v214 == &v212)
      {
        v146 = &v212;
        v147 = 4;
LABEL_203:
        (*v146)[v147]();
      }
      else if (v214)
      {
        v147 = 5;
        goto LABEL_203;
      }
    }
    v148 = v198;
    if (!v198)
      goto LABEL_208;
    v149 = (unint64_t *)&v198->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
      v151 = v205;
      if (v205)
      {
LABEL_209:
        v152 = (unint64_t *)&v151->__shared_owners_;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
    }
    else
    {
LABEL_208:
      v151 = v205;
      if (v205)
        goto LABEL_209;
    }
LABEL_47:
    v42 += 8;
    if (v42 != v182)
      continue;
    break;
  }
LABEL_215:
  if ((std::__shared_weak_count_vtbl *)(*v179)[3].__shared_owners_ == (*v179)[3].__vftable)
    v154 = 0;
  else
    v154 = *((_QWORD *)v34 + 46);
  (*v179)[1].__shared_owners_ = v154;
  v155 = (_QWORD *)*((_QWORD *)a2 + 1);
  v156 = v155[1];
  if ((v156 & (v156 - 1)) != 0)
  {
    v158 = 0xE42D19AFCA302E68;
    if (v156 <= 0xE42D19AFCA302E68)
      v158 = 0xE42D19AFCA302E68 % v156;
    v157 = *(_QWORD **)(*v155 + 8 * v158);
    do
    {
      do
        v157 = (_QWORD *)*v157;
      while (v157[1] != 0xE42D19AFCA302E68);
    }
    while (v157[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    v157 = *(_QWORD **)(*v155 + 8 * ((v156 - 1) & 0xE42D19AFCA302E68));
    do
    {
      do
        v157 = (_QWORD *)*v157;
      while (v157[1] != 0xE42D19AFCA302E68);
    }
    while (v157[2] != 0xE42D19AFCA302E68);
  }
  v159 = *(_DWORD *)(*(_QWORD *)(v157[5] + 32) + 88);
  v160 = v159 > 0xA;
  v161 = (1 << v159) & 0x49E;
  if (v160 || v161 == 0)
  {
    v164 = 0;
    v163 = v179[1];
  }
  else
  {
    v163 = v179[1];
    if ((std::__shared_weak_count_vtbl *)v163[3].__shared_owners_ == v163[3].__vftable)
      v164 = 0;
    else
      v164 = *((_QWORD *)v34 + 46);
  }
  v163[1].__shared_owners_ = v164;
  v165 = (unint64_t)(*v179)[3].__vftable;
  shared_owners = (uint64_t *)(*v179)[3].__shared_owners_;
  v167 = 126 - 2 * __clz((uint64_t)((uint64_t)shared_owners - v165) >> 3);
  if (shared_owners == (uint64_t *)v165)
    v168 = 0;
  else
    v168 = v167;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v165, shared_owners, v168, 1);
  v169 = v179[1];
  v170 = (unint64_t)v169[3].__vftable;
  v171 = (uint64_t *)v169[3].__shared_owners_;
  v172 = 126 - 2 * __clz((uint64_t)((uint64_t)v171 - v170) >> 3);
  if (v171 == (uint64_t *)v170)
    v173 = 0;
  else
    v173 = v172;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v170, v171, v173, 1);
  v174 = v187;
  if (v187)
  {
    v175 = (unint64_t *)&v187->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  operator delete(v179);
  if (!v211)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v211 + 48))(v211);
  result = v211;
  if (v211 == v210)
  {
    v178 = 4;
    result = v210;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v178))();
  }
  else if (v211)
  {
    v178 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v178))();
  }
  return result;
}

void sub_19F8E9528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  void *v62;
  uint64_t v63;

  md::TrafficContext::~TrafficContext((md::TrafficContext *)&a37);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  md::TrafficContext::~TrafficContext((md::TrafficContext *)&a16);
  operator delete(__p);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v63 - 184));
  _Unwind_Resume(a1);
}

void md::DaVinciTrafficRenderLayer::updateWithContext(uint64_t a1, uint64_t **a2, md::LayoutContext *this)
{
  int v5;
  float v6;
  float v7;
  uint64_t *v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  double *v12;
  float v13;
  float v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  double v29;
  double v30;
  double v31;
  __double2 v32;
  double v33;
  __double2 v34;
  double v35;
  uint64_t *v36;
  uint64_t *v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;

  v5 = *(unsigned __int8 *)(a1 + 34);
  if (v5 == 47)
    v6 = 0.0;
  else
    v6 = 1.0;
  if (v5 == 47)
    v7 = 0.0;
  else
    v7 = 0.002;
  v8 = (uint64_t *)*((_QWORD *)this + 1);
  v9 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v9)
  {
    v12 = 0;
    v13 = MEMORY[0x10];
    v14 = MEMORY[0x14];
    goto LABEL_49;
  }
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v9 <= 0x8BD499FBD96FBB9ELL)
      v11 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v15 = *v8;
  v16 = *(_QWORD **)(v15 + 8 * v11);
  if (v16 && (v17 = (_QWORD *)*v16) != 0)
  {
    if (v10.u32[0] >= 2uLL)
    {
      while (v17[1] != 0x8BD499FBD96FBB9ELL || v17[2] != 0x8BD499FBD96FBB9ELL)
        v17 = (_QWORD *)*v17;
    }
    else
    {
      while (v17[1] != 0x8BD499FBD96FBB9ELL || v17[2] != 0x8BD499FBD96FBB9ELL)
        v17 = (_QWORD *)*v17;
    }
    v18 = *(_QWORD *)(v17[5] + 32);
    v19 = v18 + 16;
    v20 = v18 + 20;
  }
  else
  {
    v19 = 16;
    v20 = 20;
  }
  if (v10.u32[0] > 1uLL)
  {
    v21 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v9 <= 0x1AF456233693CD46uLL)
      v21 = 0x1AF456233693CD46uLL % *(_QWORD *)&v9;
  }
  else
  {
    v21 = (*(_QWORD *)&v9 - 1) & 0x1AF456233693CD46;
  }
  v13 = *(float *)v19;
  v14 = *(float *)v20;
  v22 = *(_QWORD **)(v15 + 8 * v21);
  if (!v22)
    goto LABEL_48;
  v23 = (_QWORD *)*v22;
  if (!v23)
    goto LABEL_48;
  if (v10.u32[0] < 2uLL)
  {
    v24 = *(_QWORD *)&v9 - 1;
    while (1)
    {
      v26 = v23[1];
      if (v26 == 0x1AF456233693CD46)
      {
        if (v23[2] == 0x1AF456233693CD46)
          goto LABEL_46;
      }
      else if ((v26 & v24) != v21)
      {
        goto LABEL_48;
      }
      v23 = (_QWORD *)*v23;
      if (!v23)
        goto LABEL_48;
    }
  }
  while (1)
  {
    v25 = v23[1];
    if (v25 == 0x1AF456233693CD46)
      break;
    if (v25 >= *(_QWORD *)&v9)
      v25 %= *(_QWORD *)&v9;
    if (v25 != v21)
      goto LABEL_48;
LABEL_35:
    v23 = (_QWORD *)*v23;
    if (!v23)
      goto LABEL_48;
  }
  if (v23[2] != 0x1AF456233693CD46)
    goto LABEL_35;
LABEL_46:
  v27 = v23[5];
  if (*(_QWORD *)(v27 + 8) == 0x1AF456233693CD46)
  {
    v12 = *(double **)(v27 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v12 = 0;
LABEL_49:
  md::LayoutContext::frameState(this);
  v29 = v12[64];
  if (*((unsigned __int8 *)v28 + 128) - 1 > 2)
  {
    v35 = v29 * 40075017.0;
  }
  else
  {
    v30 = sqrt(v12[62] * v12[62] + v12[63] * v12[63]);
    v31 = atan2(v12[64], v30 * 0.996647189);
    v32 = __sincos_stret(v31);
    v33 = atan2(v29 + v32.__sinval * v32.__sinval * 42841.3115 * v32.__sinval, v30 + v32.__cosval * v32.__cosval * -42697.6727 * v32.__cosval);
    v34 = __sincos_stret(v33);
    v35 = v30 / v34.__cosval + -6378137.0 / sqrt(v34.__sinval * v34.__sinval * -0.00669437999 + 1.0);
  }
  v36 = *a2;
  v37 = a2[1];
  if (*a2 != v37)
  {
    v38 = v35;
    v39 = (float)(fmaxf(v7 * v38, 1.0) + v6) * v14;
    do
    {
      v40 = *v36++;
      v41 = *(_QWORD *)(v40 + 384);
      md::BaseMapTileDataRenderable::adjustZScale(v40, v13, v14);
      v28 = md::BaseMapTileDataRenderable::adjustZOffset(*(_QWORD **)(v40 + 232), v39 * *(float *)(v41 + 624));
    }
    while (v36 != v37);
  }
  md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::updateWithContext((uint64_t)v28, a2, (uint64_t)this);
}

void std::__function::__func<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "DaVinciTrafficLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(_QWORD *result, _QWORD *a2, _QWORD *a3, __n128 a4)
{
  _QWORD *v4;
  _QWORD *i;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  void (***v17)(void);
  void (**v18)(void);
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char **v26;
  char **v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char **v43;
  char **v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v61;
  int v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _QWORD v70[3];
  _QWORD *v71;
  _BYTE v72[24];
  _BYTE *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (result != a2)
  {
    v4 = a3;
    for (i = result; i != a2; ++i)
    {
      v7 = *i;
      v8 = (_QWORD *)v4[3];
      if (v8)
      {
        if (v8 == v4)
        {
          v71 = v70;
          (*(void (**)(_QWORD *, _QWORD *))(*v4 + 24))(v4, v70);
        }
        else
        {
          v71 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
        }
      }
      else
      {
        v71 = 0;
      }
      if (!*(_BYTE *)(v7 + 272))
        goto LABEL_68;
      v10 = *(_QWORD *)(v7 + 168);
      v9 = *(_QWORD *)(v7 + 176);
      if (v9 != v10)
      {
        v11 = *(_QWORD *)(v7 + 176);
        do
        {
          v13 = *(void **)(v11 - 24);
          v11 -= 24;
          v12 = v13;
          if (v13)
          {
            *(_QWORD *)(v9 - 16) = v12;
            operator delete(v12);
          }
          v9 = v11;
        }
        while (v11 != v10);
      }
      *(_QWORD *)(v7 + 176) = v10;
      *(_QWORD *)(v7 + 152) = *(_QWORD *)(v7 + 144);
      v14 = *(_QWORD **)(v7 + 224);
      if (v14)
      {
        do
        {
          if (v14[1])
          {
            v16 = 0;
            v17 = (void (***)(void))(v14 + 2);
            do
            {
              v18 = *v17;
              v17 += 15;
              (*v18)();
              ++v16;
            }
            while (v16 < v14[1]);
          }
          v14[1] = 0;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
        v15 = *(_QWORD *)(v7 + 224);
      }
      else
      {
        v15 = 0;
      }
      *(_QWORD *)(v7 + 232) = v15;
      v19 = (uint64_t)v71;
      if (v71)
      {
        if (v71 == v70)
        {
          v73 = v72;
          (*(void (**)(_QWORD *, _BYTE *))(v70[0] + 24))(v70, v72);
          goto LABEL_30;
        }
        v19 = (*(uint64_t (**)(_QWORD *))(*v71 + 16))(v71);
      }
      v73 = (_BYTE *)v19;
LABEL_30:
      if (*(_BYTE *)(v7 + 272))
      {
        v61 = i;
        if (*(_BYTE *)(v7 + 136))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 56);
          *(_QWORD *)(v7 + 40) = v20;
          v21 = *(unsigned __int8 *)(v20 + 58) == 1;
        }
        else
        {
          v21 = 0;
        }
        v22 = *(uint64_t **)(v7 + 248);
        v23 = *(uint64_t **)(v7 + 256);
        if (v22 != v23)
        {
          v24 = 0;
          while (1)
          {
            v25 = *v22;
            if (*(_BYTE *)(*v22 + 48))
            {
              if (*(_QWORD *)(v25 + 88) != v24)
              {
                if (v24)
                {
                  v26 = ggl::Batcher::commit((__int128 **)(v7 + 144), 0xC8u, a4);
                  if (v26[1] != *v26)
                  {
                    if (*(_BYTE *)(v7 + 136))
                    {
                      v27 = v26;
                      v29 = *(_QWORD *)(v7 + 24);
                      v28 = *(_QWORD *)(v7 + 32);
                      v30 = *(_OWORD *)(v7 + 88);
                      v66 = *(_OWORD *)(v7 + 72);
                      v67 = v30;
                      v31 = *(_OWORD *)(v7 + 120);
                      v68 = *(_OWORD *)(v7 + 104);
                      v69 = v31;
                      v32 = *(_OWORD *)(v7 + 56);
                      v64 = *(_OWORD *)(v7 + 40);
                      v65 = v32;
                      v33 = *(_QWORD **)(v7 + 232);
                      v34 = v33[1];
                      if (v34 == *(_QWORD *)(v7 + 240))
                      {
                        v33 = (_QWORD *)*v33;
                        if (!v33)
                        {
                          v33 = malloc_type_malloc(120 * v34 + 16, 0xB644C221uLL);
                          *v33 = 0;
                          v33[1] = 0;
                          **(_QWORD **)(v7 + 232) = v33;
                        }
                        *(_QWORD *)(v7 + 232) = v33;
                        v34 = v33[1];
                      }
                      v35 = &v33[15 * v34];
                      v33[1] = v34 + 1;
                      v35[2] = &off_1E42B59B0;
                      v35[3] = v29;
                      v35 += 2;
                      v35[2] = v28;
                      v36 = v68;
                      v37 = v69;
                      v38 = v67;
                      *(_OWORD *)(v35 + 7) = v66;
                      v39 = v64;
                      *(_OWORD *)(v35 + 5) = v65;
                      *(_OWORD *)(v35 + 3) = v39;
                      *(_OWORD *)(v35 + 13) = v37;
                      *(_OWORD *)(v35 + 11) = v36;
                      *(_OWORD *)(v35 + 9) = v38;
                      v35[8] = v24;
                      v40 = *v27;
                      v35[11] = *v27;
                      v35[12] = (v27[1] - v40) >> 4;
                      v63 = 0;
                      *(_QWORD *)&v64 = v35;
                      if (!v73)
                        goto LABEL_72;
                      (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v73 + 48))(v73, &v63, &v64);
                    }
                  }
                }
                v25 = *v22;
                v24 = *(_QWORD *)(*v22 + 88);
              }
              v41 = 32;
              if (v21)
              {
                v42 = v25 + 32;
              }
              else
              {
                v41 = 16;
                v42 = v25 + 16;
              }
              if (*(_QWORD *)(v42 + 8) != *(_QWORD *)(v25 + v41))
                gm::MultiRange<unsigned long>::push_back((char **)(v7 + 144), (_OWORD *)v42);
            }
            if (++v22 == v23)
              goto LABEL_55;
          }
        }
        v24 = 0;
LABEL_55:
        v43 = ggl::Batcher::commit((__int128 **)(v7 + 144), 0xC8u, a4);
        v4 = a3;
        i = v61;
        if (v43[1] != *v43 && *(_BYTE *)(v7 + 136))
        {
          v44 = v43;
          v45 = *(_QWORD *)(v7 + 24);
          v46 = *(_QWORD *)(v7 + 32);
          v47 = *(_OWORD *)(v7 + 88);
          v66 = *(_OWORD *)(v7 + 72);
          v67 = v47;
          v48 = *(_OWORD *)(v7 + 120);
          v68 = *(_OWORD *)(v7 + 104);
          v69 = v48;
          v49 = *(_OWORD *)(v7 + 56);
          v64 = *(_OWORD *)(v7 + 40);
          v65 = v49;
          v50 = *(_QWORD **)(v7 + 232);
          v51 = v50[1];
          if (v51 == *(_QWORD *)(v7 + 240))
          {
            v50 = (_QWORD *)*v50;
            if (!v50)
            {
              v50 = malloc_type_malloc(120 * v51 + 16, 0xB644C221uLL);
              *v50 = 0;
              v50[1] = 0;
              **(_QWORD **)(v7 + 232) = v50;
            }
            *(_QWORD *)(v7 + 232) = v50;
            v51 = v50[1];
          }
          v52 = &v50[15 * v51];
          v50[1] = v51 + 1;
          v52[2] = &off_1E42B59B0;
          v52[3] = v45;
          v52 += 2;
          v52[2] = v46;
          v53 = v68;
          v54 = v69;
          v55 = v67;
          *(_OWORD *)(v52 + 7) = v66;
          v56 = v64;
          *(_OWORD *)(v52 + 5) = v65;
          *(_OWORD *)(v52 + 3) = v56;
          *(_OWORD *)(v52 + 13) = v54;
          *(_OWORD *)(v52 + 11) = v53;
          *(_OWORD *)(v52 + 9) = v55;
          v52[8] = v24;
          v57 = *v44;
          v52[11] = *v44;
          v52[12] = (v44[1] - v57) >> 4;
          v63 = 0;
          *(_QWORD *)&v64 = v52;
          if (!v73)
          {
LABEL_72:
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
          }
          (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v73 + 48))(v73, &v63, &v64);
          v4 = a3;
          i = v61;
        }
      }
      v58 = v73;
      if (v73 == v72)
      {
        v58 = v72;
        v59 = 4;
      }
      else
      {
        if (!v73)
          goto LABEL_68;
        v59 = 5;
      }
      (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_68:
      result = v71;
      if (v71 == v70)
      {
        result = v70;
        v6 = 4;
      }
      else
      {
        if (!v71)
          continue;
        v6 = 5;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
    }
  }
  return result;
}

void sub_19F8EA0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char *a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33)
{
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v35 = a33;
  if (a33 == (_QWORD *)(v33 - 136))
  {
    v36 = 4;
    v35 = (_QWORD *)(v33 - 136);
  }
  else
  {
    if (!a33)
      goto LABEL_6;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_6:
  v37 = a29;
  if (a29 == &a26)
  {
    v38 = 4;
    v37 = &a26;
  }
  else
  {
    if (!a29)
      _Unwind_Resume(exception_object);
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4570;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4570;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, ggl::RenderItem **a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(a1 + 8), *a3);
}

void std::__function::__func<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D28C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D28C0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "DaVinciTrafficLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2878;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2878;
  a2[1] = v2;
  return result;
}

uint64_t md::DaVinciTrafficRenderLayer::DaVinciTrafficRenderLayer(uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9;
  __int16 v10;
  id v11;
  const RenderTargetFormat *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  _DWORD *v17;
  VKSharedResources *v18;
  _WORD *v19;
  _WORD *v20;
  __int128 v21;
  _DWORD *v22;
  md::CartographicTiledRenderResources *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  int v28;
  int v29;
  int *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v9 = a4;
  if (a2 == 47)
    v10 = 53;
  else
    v10 = 52;
  v11 = *(id *)(a3 + 104);
  v12 = (const RenderTargetFormat *)objc_msgSend(v11, "format");
  if (v9)
  {
    objc_msgSend(v9, "standardCommandBufferSelector");
    v13 = v38;
  }
  else
  {
    v13 = 0;
    v38 = 0;
    v39 = 0;
  }
  v37 = a5;
  v14 = *(unsigned __int16 **)(v13 + 8);
  if (a2 == 47)
  {
    v15 = v14[34];
    v16 = v14[108];
  }
  else
  {
    v15 = v14[33];
    v16 = v14[107];
  }
  v17 = operator new(4uLL);
  *v17 = v15 | (v16 << 16);
  v18 = (VKSharedResources *)v9;
  v19 = operator new(2uLL);
  *v19 = v10;
  v20 = v19 + 1;
  *(_QWORD *)&v21 = v19;
  *((_QWORD *)&v21 + 1) = v19 + 1;
  v36 = v21;
  *(_QWORD *)a1 = off_1E428C468;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v22 = operator new(4uLL);
  *(_QWORD *)(a1 + 8) = v22;
  *v22++ = *v17;
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)(a1 + 24) = v22;
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 248) = xmmword_19FFB4CB0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 320) = v36;
  *(_QWORD *)(a1 + 336) = v20;
  *(_DWORD *)(a1 + 344) = 2;
  *(_QWORD *)a1 = off_1E42A9D98;
  *(_QWORD *)(a1 + 352) = 0;
  v23 = (md::CartographicTiledRenderResources *)operator new();
  md::CartographicTiledRenderResources::CartographicTiledRenderResources(v23, v18, v12);
  *(_QWORD *)(a1 + 352) = v23;

  operator delete(v17);
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }

  *(_QWORD *)a1 = &off_1E42A1CA0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = v37;
  if (v9)
  {
    -[VKSharedResources standardCommandBufferSelector](v18, "standardCommandBufferSelector");
    v26 = v38;
  }
  else
  {
    v26 = 0;
    v39 = 0;
  }
  v27 = *(unsigned __int16 **)(v26 + 8);
  if (a2 == 47)
  {
    v28 = v27[34];
    v29 = v27[108];
  }
  else
  {
    v28 = v27[33];
    v29 = v27[107];
  }
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  v30 = (int *)operator new(4uLL);
  *(_QWORD *)(a1 + 384) = v30;
  *v30++ = v28 | (v29 << 16);
  *(_QWORD *)(a1 + 392) = v30;
  *(_QWORD *)(a1 + 400) = v30;
  if (v39)
  {
    v31 = (unint64_t *)&v39->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v33 = operator new();
  *(_BYTE *)v33 = 0;
  *(_QWORD *)(v33 + 12) = 0;
  *(_QWORD *)(v33 + 4) = 0;
  *(_BYTE *)(v33 + 20) = 0;
  *(_DWORD *)(v33 + 24) = 1065353216;
  *(_BYTE *)(v33 + 28) = 0;
  *(_DWORD *)(v33 + 32) = 0;
  v34 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v33;
  if (v34)
  {
    MEMORY[0x1A1AF4E00](v34, 0x1000C4049ECCB0CLL);
    v33 = *(_QWORD *)(a1 + 368);
  }
  *(_BYTE *)v33 = 8;
  *(_QWORD *)(v33 + 12) = 0;
  *(_QWORD *)(v33 + 4) = 0;

  return a1;
}

void sub_19F8EA738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _QWORD *v12;
  uint64_t v14;

  v14 = v12[46];
  v12[46] = 0;
  if (v14)
    MEMORY[0x1A1AF4E00](v14, 0x1000C4049ECCB0CLL);
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::~CartographicTiledVectorRenderLayer(v12);

  _Unwind_Resume(a1);
}

void ggl::LandmarkDepth::BuildingPipelineSetup::~BuildingPipelineSetup(ggl::LandmarkDepth::BuildingPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::LandmarkDepth::BuildingPipelineSetup::constantDataIsEnabled(ggl::LandmarkDepth::BuildingPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::LandmarkDepth::BuildingPipelineSetup::textureIsEnabled(ggl::LandmarkDepth::BuildingPipelineSetup *this)
{
  return 0;
}

void md::TiledGEOResourceFetcher::cancelResources(uint64_t a1, uint64_t a2)
{
  void *v4;
  unsigned __int8 *i;
  uint64_t v6;
  NSObject *v7;
  std::string *p_p;
  void *v9;
  id v10;
  std::string __p;
  uint8_t buf[4];
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  md::TiledGEOResourceFetcher::getTileLoader((id *)a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
  {
    v14 = 0;
    v15 = 0;
    v14 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)a1 + 144))(a1, *(_QWORD *)(a1 + 608), (uint64_t *)i + 2);
    v15 = v6;
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
    v7 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      gdc::ResourceKey::keysInt32Str(&__p, i + 16);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v13 = p_p;
      _os_log_impl(&dword_19F029000, v7, OS_LOG_TYPE_DEBUG, "TiledGEOResourceFetcher canceling resource: %s", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    if (i[16])
      v9 = *(void **)(a1 + 488);
    else
      v9 = *(void **)(a1 + 464);
    v10 = v9;
    objc_msgSend(v4, "cancelKey:forClient:", &v14, v10);

  }
}

void sub_19F8EAB2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  int v4;

  if (v4)

  else
  _Unwind_Resume(a1);
}

void md::TiledGEOResourceFetcher::cancelAllResources(id *this)
{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_DEBUG, "TiledGEOResourceFetcher Canceling all resources", v4, 2u);
  }

  md::TiledGEOResourceFetcher::getTileLoader(this);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "cancelAllForClientSynchronous:", this[58]);
  objc_msgSend(v3, "cancelAllForClientSynchronous:", this[61]);

}

void sub_19F8EAC18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::TiledGEOResourceFetcher::expireResource(md::TiledGEOResourceFetcher *this, const gdc::ResourceKey *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[7];

  v7[6] = *MEMORY[0x1E0C80C00];
  v3 = (*(uint64_t (**)(md::TiledGEOResourceFetcher *, _QWORD, const gdc::ResourceKey *))(*(_QWORD *)this
                                                                                                  + 144))(this, *((_QWORD *)this + 76), a2);
  v5 = v4;
  md::TiledGEOResourceFetcher::getTileLoader((id *)this);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZN2md23TiledGEOResourceFetcher14expireResourceERKN3gdc11ResourceKeyE_block_invoke;
  v7[3] = &__block_descriptor_48_e723_B24__0r___GEOTileKey_b7b1_____GEOStandardTileKey_b40b6b26b26b14b4b4___GEOGloriaQuadIDTileKey_b6b64b14b4______b10b10b12_I____GEORegionalResourceKey_b32b8b6b8b8b1b57___GEOSputnikMetadataKey_b32b24b14b8b42___GEOFlyoverKey_b6b26b26b8b24b14b8b8___GEOTransitLineSelectionKey_b6b25b25b64___GEOPolygonSelectionKey_b6b25b25b64___GEORoadSelectionKey_b6b25b25b64___GEOContourLinesKey_b6b26b26b4b8b50___GEOTileOverlayKey_b6b26b26b8b32b16b6___GEOIdentifiedResourceKey_QCCb1b39___GEOMuninMeshKey_b64b32b16b5b3___GEOVisualLocalizationTrackKey_SCb16b6b26b26b22___GEOVisualLocalizationMetadataKey_b6b9b25b6b26b26b22___GEOVisualLocalizationDataKey_QCb5b21b21b1___GEOS2TileKey_b6b26b26b3b14b4b4b37___GEOLiveTileKey_b6b26b26b14b4b4b4b36___8d16l;
  v7[4] = v3;
  v7[5] = v5;
  objc_msgSend(v6, "expireTilesWithPredicate:", v7);

}

void sub_19F8EACEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::TiledGEOResourceFetcher::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  char *v8;
  void *v9;
  const std::string::value_type *v10;
  char *v11;
  void *v12;
  const std::string::value_type *v13;
  __CFString *v14;
  __CFString *v15;
  const std::string::value_type *v16;
  void *v17;
  const std::string::value_type *v18;
  _BYTE v19[32];
  std::string v20;
  int v21;
  _BYTE v22[32];
  std::string v23;
  int v24;
  _BYTE v25[32];
  std::string v26;
  int v27;
  _BYTE v28[32];
  std::string __p;
  int v30;
  _BYTE v31[16];
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD v37[7];
  int v38;
  _QWORD v39[7];
  int v40;
  _BYTE v41[24];

  gdc::ResourceFetcher::createDebugNode((_QWORD *)a1, a2, a3);
  v41[23] = 12;
  strcpy(v41, "Preload Only");
  v5 = *(unsigned __int8 *)(a1 + 552);
  v40 = 0;
  memset(&v39[4], 0, 24);
  v39[0] = v5;
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v41, (uint64_t)v39);
  v6 = *(unsigned __int8 *)(a1 + 553);
  v41[23] = 12;
  strcpy(v41, "Require Wifi");
  v38 = 0;
  memset(&v37[4], 0, 24);
  v37[0] = v6;
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v41, (uint64_t)v37);
  v7 = *(float *)(a1 + 8);
  v41[23] = 13;
  strcpy(v41, "Content Scale");
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v36 = 2;
  v32 = v7;
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v41, (uint64_t)v31);
  v8 = (char *)operator new(0x20uLL);
  *(_QWORD *)v41 = v8;
  *(_OWORD *)&v41[8] = xmmword_19FFB34A0;
  strcpy(v8, "Tile Loader Client Identifier");
  v9 = *(void **)(a1 + 464);
  if (v9)
  {
    v10 = (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v9), "UTF8String");
    memset(&__p, 0, sizeof(__p));
    v30 = 4;
    if (v10)
    {
      std::string::__assign_external(&__p, v10);
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
      qmemcpy(&__p, "<null>", 6);
    }
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    v30 = 4;
    std::string::__assign_external(&__p, "null");
  }
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v41, (uint64_t)v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v9)

  operator delete(v8);
  v11 = (char *)operator new(0x30uLL);
  *(_QWORD *)v41 = v11;
  *(_OWORD *)&v41[8] = xmmword_19FFB3BF0;
  strcpy(v11, "Preliminary Tile Loader Client Identifier");
  v12 = *(void **)(a1 + 488);
  if (v12)
  {
    v13 = (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v12), "UTF8String");
    memset(&v26, 0, sizeof(v26));
    v27 = 4;
    if (v13)
    {
      std::string::__assign_external(&v26, v13);
    }
    else
    {
      *((_BYTE *)&v26.__r_.__value_.__s + 23) = 6;
      qmemcpy(&v26, "<null>", 6);
    }
  }
  else
  {
    memset(&v26, 0, sizeof(v26));
    v27 = 4;
    std::string::__assign_external(&v26, "null");
  }
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v41, (uint64_t)v25);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (v12)

  operator delete(v11);
  v41[23] = 10;
  strcpy(v41, "Tile Style");
  v14 = CFSTR("RASTER_STANDARD");
  switch(*(_DWORD *)(a1 + 556))
  {
    case 0:
      break;
    case 1:
      v14 = CFSTR("VECTOR_STANDARD");
      break;
    case 2:
      v14 = CFSTR("VECTOR_TRAFFIC_SEGMENTS_FOR_RASTER");
      break;
    case 3:
      v14 = CFSTR("VECTOR_TRAFFIC_INCIDENTS_FOR_RASTER");
      break;
    case 4:
      v14 = CFSTR("VECTOR_TRAFFIC_SEGMENTS_AND_INCIDENTS_FOR_RASTER");
      break;
    case 5:
      v14 = CFSTR("RASTER_STANDARD_BACKGROUND");
      break;
    case 6:
      v14 = CFSTR("RASTER_HYBRID");
      break;
    case 7:
      v14 = CFSTR("RASTER_SATELLITE");
      break;
    case 8:
      v14 = CFSTR("RASTER_TERRAIN");
      break;
    case 0xB:
      v14 = CFSTR("VECTOR_BUILDINGS");
      break;
    case 0xC:
      v14 = CFSTR("VECTOR_TRAFFIC");
      break;
    case 0xD:
      v14 = CFSTR("VECTOR_POI");
      break;
    case 0xE:
      v14 = CFSTR("SPUTNIK_METADATA");
      break;
    case 0xF:
      v14 = CFSTR("SPUTNIK_C3M");
      break;
    case 0x10:
      v14 = CFSTR("SPUTNIK_DSM");
      break;
    case 0x11:
      v14 = CFSTR("SPUTNIK_DSM_GLOBAL");
      break;
    case 0x12:
      v14 = CFSTR("VECTOR_REALISTIC");
      break;
    case 0x13:
      v14 = CFSTR("VECTOR_LEGACY_REALISTIC");
      break;
    case 0x14:
      v14 = CFSTR("VECTOR_ROADS");
      break;
    case 0x15:
      v14 = CFSTR("RASTER_VEGETATION");
      break;
    case 0x16:
      v14 = CFSTR("VECTOR_TRAFFIC_SKELETON");
      break;
    case 0x17:
      v14 = CFSTR("RASTER_COASTLINE_MASK");
      break;
    case 0x18:
      v14 = CFSTR("RASTER_HILLSHADE");
      break;
    case 0x19:
      v14 = CFSTR("VECTOR_TRAFFIC_WITH_GREEN");
      break;
    case 0x1A:
      v14 = CFSTR("VECTOR_TRAFFIC_STATIC");
      break;
    case 0x1B:
      v14 = CFSTR("RASTER_COASTLINE_DROP_MASK");
      break;
    case 0x1C:
      v14 = CFSTR("VECTOR_TRAFFIC_SKELETON_WITH_HISTORICAL");
      break;
    case 0x1D:
      v14 = CFSTR("VECTOR_SPEED_PROFILES");
      break;
    case 0x1E:
      v14 = CFSTR("VECTOR_VENUES");
      break;
    case 0x1F:
      v14 = CFSTR("RASTER_DOWN_SAMPLED");
      break;
    case 0x20:
      v14 = CFSTR("RASTER_COLOR_BALANCED");
      break;
    case 0x21:
      v14 = CFSTR("RASTER_SATELLITE_NIGHT");
      break;
    case 0x22:
      v14 = CFSTR("SPUTNIK_VECTOR_BORDER");
      break;
    case 0x23:
      v14 = CFSTR("RASTER_SATELLITE_DIGITIZE");
      break;
    case 0x24:
      v14 = CFSTR("RASTER_HILLSHADE_PARKS");
      break;
    case 0x25:
      v14 = CFSTR("VECTOR_TRANSIT");
      break;
    case 0x26:
      v14 = CFSTR("RASTER_STANDARD_BASE");
      break;
    case 0x27:
      v14 = CFSTR("RASTER_STANDARD_LABELS");
      break;
    case 0x28:
      v14 = CFSTR("RASTER_HYBRID_ROADS");
      break;
    case 0x29:
      v14 = CFSTR("RASTER_HYBRID_LABELS");
      break;
    case 0x2A:
      v14 = CFSTR("FLYOVER_C3M_MESH");
      break;
    case 0x2B:
      v14 = CFSTR("FLYOVER_C3M_JPEG_TEXTURE");
      break;
    case 0x2C:
      v14 = CFSTR("FLYOVER_C3M_ASTC_TEXTURE");
      break;
    case 0x2D:
      v14 = CFSTR("RASTER_SATELLITE_ASTC");
      break;
    case 0x2E:
      v14 = CFSTR("RASTER_HYBRID_ROADS_AND_LABELS");
      break;
    case 0x2F:
      v14 = CFSTR("VECTOR_TRANSIT_SELECTION");
      break;
    case 0x30:
      v14 = CFSTR("VECTOR_COVERAGE");
      break;
    case 0x34:
      v14 = CFSTR("FLYOVER_METADATA");
      break;
    case 0x35:
      v14 = CFSTR("VECTOR_ROAD_NETWORK");
      break;
    case 0x36:
      v14 = CFSTR("VECTOR_LAND_COVER");
      break;
    case 0x37:
      v14 = CFSTR("VECTOR_DEBUG");
      break;
    case 0x38:
      v14 = CFSTR("VECTOR_STREET_POI");
      break;
    case 0x39:
      v14 = CFSTR("MUNIN_METADATA");
      break;
    case 0x3A:
      v14 = CFSTR("VECTOR_SPR_MERCATOR");
      break;
    case 0x3B:
      v14 = CFSTR("VECTOR_SPR_MODELS");
      break;
    case 0x3C:
      v14 = CFSTR("VECTOR_SPR_MATERIALS");
      break;
    case 0x3D:
      v14 = CFSTR("VECTOR_SPR_METADATA");
      break;
    case 0x3E:
      v14 = CFSTR("VECTOR_TRACKS");
      break;
    case 0x3F:
      v14 = CFSTR("VECTOR_RESERVED_2");
      break;
    case 0x40:
      v14 = CFSTR("VECTOR_STREET_LANDMARKS");
      break;
    case 0x41:
      v14 = CFSTR("COARSE_LOCATION_POLYGONS");
      break;
    case 0x42:
      v14 = CFSTR("VECTOR_SPR_ROADS");
      break;
    case 0x43:
      v14 = CFSTR("VECTOR_SPR_STANDARD");
      break;
    case 0x44:
      v14 = CFSTR("VECTOR_POI_V2");
      break;
    case 0x45:
      v14 = CFSTR("VECTOR_POLYGON_SELECTION");
      break;
    case 0x46:
      v14 = CFSTR("VL_METADATA");
      break;
    case 0x47:
      v14 = CFSTR("VL_DATA");
      break;
    case 0x48:
      v14 = CFSTR("PROACTIVE_APP_CLIP");
      break;
    case 0x49:
      v14 = CFSTR("VECTOR_BUILDINGS_V2");
      break;
    case 0x4A:
      v14 = CFSTR("POI_BUSYNESS");
      break;
    case 0x4B:
      v14 = CFSTR("POI_DP_BUSYNESS");
      break;
    case 0x4C:
      v14 = CFSTR("SMART_INTERFACE_SELECTION");
      break;
    case 0x4D:
      v14 = CFSTR("VECTOR_ASSETS");
      break;
    case 0x4E:
      v14 = CFSTR("SPR_ASSET_METADATA");
      break;
    case 0x4F:
      v14 = CFSTR("VECTOR_SPR_POLAR");
      break;
    case 0x50:
      v14 = CFSTR("SMART_DATA_MODE");
      break;
    case 0x51:
      v14 = CFSTR("CELLULAR_PERFORMANCE_SCORE");
      break;
    case 0x52:
      v14 = CFSTR("VECTOR_SPR_MODELS_OCCLUSION");
      break;
    case 0x53:
      v14 = CFSTR("VECTOR_TOPOGRAPHIC");
      break;
    case 0x54:
      v14 = CFSTR("VECTOR_POI_V2_UPDATE");
      break;
    case 0x55:
      v14 = CFSTR("VECTOR_LIVE_DATA_UPDATES");
      break;
    case 0x56:
      v14 = CFSTR("VECTOR_TRAFFIC_V2");
      break;
    case 0x57:
      v14 = CFSTR("VECTOR_ROAD_SELECTION");
      break;
    case 0x58:
      v14 = CFSTR("VECTOR_REGION_METADATA");
      break;
    case 0x59:
      v14 = CFSTR("RAY_TRACING");
      break;
    case 0x5A:
      v14 = CFSTR("VECTOR_CONTOURS");
      break;
    case 0x5B:
      v14 = CFSTR("RASTER_SATELLITE_POLAR");
      break;
    case 0x5C:
      v14 = CFSTR("VMAP4_ELEVATION");
      break;
    case 0x5D:
      v14 = CFSTR("VMAP4_ELEVATION_POLAR");
      break;
    case 0x5E:
      v14 = CFSTR("CELLULAR_COVERAGE_PLMN");
      break;
    case 0x5F:
      v14 = CFSTR("RASTER_SATELLITE_POLAR_NIGHT");
      break;
    case 0x60:
      v14 = CFSTR("UNUSED_96");
      break;
    case 0x61:
      v14 = CFSTR("UNUSED_97");
      break;
    case 0x62:
      v14 = CFSTR("UNUSED_98");
      break;
    case 0x63:
      v14 = CFSTR("UNUSED_99");
      break;
    case 0x64:
      v14 = CFSTR("UNUSED_100");
      break;
    case 0x65:
      v14 = CFSTR("UNUSED_101");
      break;
    case 0x66:
      v14 = CFSTR("UNUSED_102");
      break;
    case 0x67:
      v14 = CFSTR("UNUSED_103");
      break;
    case 0x68:
      v14 = CFSTR("UNUSED_104");
      break;
    case 0x69:
      v14 = CFSTR("UNUSED_105");
      break;
    case 0x6A:
      v14 = CFSTR("UNUSED_106");
      break;
    case 0x6B:
      v14 = CFSTR("UNUSED_107");
      break;
    case 0x6C:
      v14 = CFSTR("UNUSED_108");
      break;
    case 0x6D:
      v14 = CFSTR("UNUSED_109");
      break;
    case 0x6E:
      v14 = CFSTR("UNUSED_110");
      break;
    case 0x6F:
      v14 = CFSTR("UNUSED_111");
      break;
    case 0x70:
      v14 = CFSTR("UNUSED_112");
      break;
    case 0x71:
      v14 = CFSTR("UNUSED_113");
      break;
    case 0x72:
      v14 = CFSTR("UNUSED_114");
      break;
    case 0x73:
      v14 = CFSTR("UNUSED_115");
      break;
    case 0x74:
      v14 = CFSTR("UNUSED_116");
      break;
    case 0x75:
      v14 = CFSTR("UNUSED_117");
      break;
    case 0x76:
      v14 = CFSTR("UNUSED_118");
      break;
    case 0x77:
      v14 = CFSTR("UNUSED_119");
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), *(unsigned int *)(a1 + 556));
      v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
  }
  v15 = objc_retainAutorelease(v14);
  v16 = (const std::string::value_type *)-[__CFString UTF8String](v15, "UTF8String");
  memset(&v23, 0, sizeof(v23));
  v24 = 4;
  if (v16)
  {
    std::string::__assign_external(&v23, v16);
  }
  else
  {
    *((_BYTE *)&v23.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v23, "<null>");
  }
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v41, (uint64_t)v22);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);

  v17 = *(void **)(a1 + 608);
  v41[23] = 8;
  strcpy(v41, "Tile Set");
  if (v17)
  {
    objc_msgSend(v17, "description");
    v15 = (__CFString *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v18 = (const std::string::value_type *)-[__CFString UTF8String](v15, "UTF8String");
    memset(&v20, 0, sizeof(v20));
    v21 = 4;
    if (v18)
    {
      std::string::__assign_external(&v20, v18);
    }
    else
    {
      *((_BYTE *)&v20.__r_.__value_.__s + 23) = 6;
      qmemcpy(&v20, "<null>", 6);
    }
  }
  else
  {
    memset(&v20, 0, sizeof(v20));
    v21 = 4;
    std::string::__assign_external(&v20, "null");
  }
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v41, (uint64_t)v19);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v17)
  {

    if ((v41[23] & 0x80000000) != 0)
      operator delete(*(void **)v41);
  }
}

void sub_19F8EB728(_Unwind_Exception *a1)
{
  gdc::DebugTreeNode *v1;

  gdc::DebugTreeNode::~DebugTreeNode(v1);
  _Unwind_Resume(a1);
}

void *md::TiledGEOResourceFetcher::tileSetInfo@<X0>(md::TiledGEOResourceFetcher *this@<X0>, uint64_t a2@<X8>)
{
  void *result;
  uint64_t v5;
  char v6;

  result = (void *)*((_QWORD *)this + 76);
  if (result)
  {
    v5 = objc_msgSend(result, "style");
    result = (void *)objc_msgSend(*((id *)this + 76), "version");
    *(_QWORD *)(a2 + 4) = result | (unint64_t)(v5 << 32);
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  *(_BYTE *)a2 = v6;
  return result;
}

float *md::TiledGEOResourceFetcher::setContentScale(float *this, float a2)
{
  if (this[2] != a2)
  {
    this[2] = a2;
    return (float *)(*(uint64_t (**)(float *))(*(_QWORD *)this + 104))(this);
  }
  return this;
}

void ___ZNK2md23TiledGEOResourceFetcher13getTileLoaderEv_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  v2 = objc_alloc_init(MEMORY[0x1E0D275D8]);
  objc_msgSend(v2, "setServerProxyClass:", objc_opt_class());
  objc_msgSend(v2, "setDiskCacheLocation:", 0);
  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0D275D0]), "initWithConfiguration:", v2);
  v1 = (void *)md::TiledGEOResourceFetcher::getTileLoader(void)const::loader;
  md::TiledGEOResourceFetcher::getTileLoader(void)const::loader = v0;

  objc_msgSend((id)md::TiledGEOResourceFetcher::getTileLoader(void)const::loader, "registerTileLoader:", objc_opt_class());
}

void sub_19F8EB884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZN2md23TiledGEOResourceFetcher14expireResourceERKN3gdc11ResourceKeyE_block_invoke()
{
  return GEOTileKeyEquals();
}

void ___ZN2md23TiledGEOResourceFetcher14fetchResourcesERKNSt3__113unordered_mapIN3gdc11ResourceKeyEyNS3_15ResourceKeyHashENS1_8equal_toIS4_EENS1_9allocatorINS1_4pairIKS4_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke_13(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  std::__shared_weak_count *v16;
  id v17;
  _BYTE *v18;
  char *size;
  char *v20;
  std::string::size_type v21;
  unint64_t v22;
  __int128 *v23;
  _OWORD *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  void *v33;
  void *v34;
  char v35;
  unint64_t v36;
  void *v37;
  void *v38;
  unsigned int v39;
  unsigned int v40;
  void *v41;
  void *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  NSObject *v47;
  os_signpost_id_t v48;
  NSObject *v49;
  std::string *v50;
  uint64_t v51;
  void *v52;
  NSObject *v53;
  std::string *v54;
  uint64_t v55;
  NSObject *v56;
  NSObject *v57;
  uint64_t v58;
  os_signpost_id_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  int v66;
  uint64_t v67;
  uint64_t (***v68)();
  uint64_t v69;
  NSObject *v70;
  std::string *v71;
  uint64_t v72;
  id v73;
  const void *v74;
  void *v75;
  unint64_t v76;
  size_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  const void *v82;
  void *v83;
  unint64_t v84;
  std::string::size_type v85;
  std::string *p_p;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  NSObject *v91;
  std::__shared_weak_count *v92;
  unint64_t *p_shared_owners;
  unint64_t v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  uint64_t v97;
  id v98;
  void *v99;
  id v100;
  void *v101;
  std::string __p;
  _QWORD *v103;
  std::__shared_weak_count *v104;
  char v105;
  std::string::size_type v106;
  __int128 v107;
  _BYTE *v108;
  std::string::size_type v109;
  _BYTE v110[16];
  _QWORD v111[3];
  __int128 v112;
  id v113;
  uint8_t __dst[32];
  _QWORD v115[3];
  _QWORD *v116;
  uint64_t (**v117)();
  uint64_t v118;
  uint64_t (***v119)();
  std::string buf;
  std::string *p_buf;
  std::string v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a5;
  v12 = a6;
  v97 = *(_QWORD *)(a1 + 40);
  v99 = v10;
  if (v10)
  {
    objc_msgSend(v10, "decodedRepresentation");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (v13)
    {
      v98 = v13;
    }
    else
    {
      v113 = v11;
      objc_msgSend(v10, "readDataWithError:", &v113);
      v98 = (id)objc_claimAutoreleasedReturnValue();
      v15 = v113;

      v11 = v15;
    }

  }
  else
  {
    v98 = 0;
  }
  v101 = v11;
  v16 = (std::__shared_weak_count *)operator new(0x38uLL);
  v16->__shared_owners_ = 0;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE110;
  v17 = v98;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B0670;
  v16[1].__shared_owners_ = (uint64_t)&off_1E42B5310;
  v16[1].__shared_weak_owners_ = (uint64_t)v17;
  v100 = v17;
  v103 = &v16[1].__vftable;
  v104 = v16;
  gdc::ResourceKey::ResourceKey((uint64_t)&buf, 0xFFFF, a2, 0x10uLL, 0, 2147483646);
  v105 = 1;
  v18 = v110;
  size = (char *)buf.__r_.__value_.__l.__size_;
  v106 = buf.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v107 = v110;
  v108 = v110;
  v109 = v122.__r_.__value_.__r.__words[0];
  if ((std::string *)buf.__r_.__value_.__l.__size_ != p_buf)
  {
    v107 = *(_OWORD *)&buf.__r_.__value_.__r.__words[1];
    goto LABEL_24;
  }
  v20 = (char *)buf.__r_.__value_.__r.__words[2];
  v21 = buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_;
  *((_QWORD *)&v107 + 1) = &v110[buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_];
  if (buf.__r_.__value_.__r.__words[2] != buf.__r_.__value_.__l.__size_)
  {
    if (v21 < 8 || (unint64_t)&v103 - buf.__r_.__value_.__l.__size_ + 64 < 0x20)
      goto LABEL_23;
    if (v21 >= 0x20)
    {
      v22 = v21 & 0xFFFFFFFFFFFFFFE0;
      v23 = (__int128 *)(buf.__r_.__value_.__l.__size_ + 16);
      v24 = v111;
      v25 = v21 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v26 = *v23;
        *(v24 - 1) = *(v23 - 1);
        *v24 = v26;
        v23 += 2;
        v24 += 2;
        v25 -= 32;
      }
      while (v25);
      if (v21 == v22)
        goto LABEL_24;
      if ((v21 & 0x18) == 0)
      {
        size += v22;
        v18 = &v110[v22];
        do
        {
LABEL_23:
          v32 = *size++;
          *v18++ = v32;
        }
        while (size != v20);
        goto LABEL_24;
      }
    }
    else
    {
      v22 = 0;
    }
    v27 = v21 & 0xFFFFFFFFFFFFFFF8;
    v18 = &v110[v21 & 0xFFFFFFFFFFFFFFF8];
    v28 = v22 - (v21 & 0xFFFFFFFFFFFFFFF8);
    v29 = (uint64_t *)&size[v22];
    v30 = (_QWORD **)((char *)&v103 + v22 + 64);
    do
    {
      v31 = *v29++;
      *v30++ = v31;
      v28 += 8;
    }
    while (v28);
    if (v21 != v27)
    {
      size += v27;
      goto LABEL_23;
    }
  }
LABEL_24:
  v111[2] = v123;
  v112 = v124;
  objc_msgSend(v12, "objectForKey:", *MEMORY[0x1E0D26BF0]);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = v33;
  if (v33)
  {
    v35 = objc_msgSend(v33, "unsignedIntValue");
    v36 = 0x2040302010002uLL >> (8 * (v35 + 1));
    if ((v35 + 1) >= 7u)
      LOBYTE(v36) = 0;
    v96 = v36;
  }
  else
  {
    v96 = 0;
  }

  objc_msgSend(v12, "objectForKey:", *MEMORY[0x1E0D26BF8]);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = v37;
  if (v37)
  {
    v39 = objc_msgSend(v37, "unsignedIntValue");
    v40 = 0x30102u >> (8 * v39);
    if (v39 >= 3)
      LOBYTE(v40) = 0;
    v95 = v40;
  }
  else
  {
    v95 = 0;
  }

  objc_msgSend(v12, "objectForKey:", *MEMORY[0x1E0D26BE8]);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = v41;
  if (v41)
  {
    v43 = objc_msgSend(v41, "unsignedIntValue");
    v44 = (1000 * v43) & 0xFFFFFF00;
    v45 = (1000 * v43) & 0xF8;
  }
  else
  {
    v45 = 0;
    v44 = 0;
  }

  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v46 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v47 = v46;
  v48 = *(_QWORD *)(a1 + 128);
  if (v48 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v46))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v47, OS_SIGNPOST_INTERVAL_END, v48, "ResourceFetch", (const char *)&unk_1A0189141, (uint8_t *)&buf, 2u);
  }

  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v49 = (id)GEOGetVectorKitResourceLoadingLog_log;
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
  {
    gdc::ResourceKey::keysInt32Str(&buf, (unsigned __int8 *)(a1 + 48));
    v50 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    v51 = *(_QWORD *)(a1 + 144);
    *(_DWORD *)__dst = 136315394;
    *(_QWORD *)&__dst[4] = v50;
    *(_WORD *)&__dst[12] = 2048;
    *(_QWORD *)&__dst[14] = v51;
    _os_log_impl(&dword_19F029000, v49, OS_LOG_TYPE_DEBUG, "TiledGEOResourceFetcher done fetching preliminary resource: %s, %llu", __dst, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }

  if (!v100)
  {
    v63 = v101;
    if (!v101)
      goto LABEL_116;
    if (objc_msgSend(v101, "code") == -2)
    {
      objc_msgSend(v101, "domain");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      GEOErrorDomain();
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      v66 = objc_msgSend(v64, "isEqualToString:", v65);

      v63 = v101;
      if (v66)
      {
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v97 + 120))(v97, *(_QWORD *)(a1 + 144), a1 + 48);
        goto LABEL_114;
      }
    }
    objc_msgSend(v63, "domain");
    v73 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v74 = (const void *)objc_msgSend(v73, "UTF8String");
    objc_msgSend(v101, "domain");
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    v76 = objc_msgSend(v75, "lengthOfBytesUsingEncoding:", 4);
    v77 = v76;
    if (v76 > 0x7FFFFFFFFFFFFFF7)
      abort();
    if (v76 >= 0x17)
    {
      v79 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v76 | 7) != 0x17)
        v79 = v76 | 7;
      v80 = v79 + 1;
      v78 = operator new(v79 + 1);
      *(_QWORD *)&__dst[8] = v77;
      *(_QWORD *)&__dst[16] = v80 | 0x8000000000000000;
      *(_QWORD *)__dst = v78;
    }
    else
    {
      __dst[23] = v76;
      v78 = __dst;
      if (!v76)
      {
LABEL_96:
        v78[v77] = 0;

        objc_msgSend(v101, "description");
        v81 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v82 = (const void *)objc_msgSend(v81, "UTF8String");
        objc_msgSend(v101, "description");
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        v84 = objc_msgSend(v83, "lengthOfBytesUsingEncoding:", 4);
        v85 = v84;
        if (v84 > 0x7FFFFFFFFFFFFFF7)
          abort();
        if (v84 >= 0x17)
        {
          v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v84 | 7) != 0x17)
            v87 = v84 | 7;
          v88 = v87 + 1;
          p_p = (std::string *)operator new(v87 + 1);
          __p.__r_.__value_.__l.__size_ = v85;
          __p.__r_.__value_.__r.__words[2] = v88 | 0x8000000000000000;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
        }
        else
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = v84;
          p_p = &__p;
          if (!v84)
          {
LABEL_104:
            p_p->__r_.__value_.__s.__data_[v85] = 0;

            buf.__r_.__value_.__r.__words[0] = objc_msgSend(v101, "code");
            v89 = (char)__dst[23];
            if ((char)__dst[23] < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&buf.__r_.__value_.__r.__words[1], *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
            }
            else
            {
              *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = *(_OWORD *)__dst;
              p_buf = *(std::string **)&__dst[16];
            }
            v90 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v122, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            else
              v122 = __p;
            (*(void (**)(uint64_t, _QWORD, uint64_t, std::string *))(*(_QWORD *)v97 + 112))(v97, *(_QWORD *)(a1 + 144), a1 + 48, &buf);
            if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v122.__r_.__value_.__l.__data_);
              if ((SHIBYTE(p_buf) & 0x80000000) == 0)
              {
LABEL_112:
                if ((v90 & 0x80000000) == 0)
                  goto LABEL_113;
                goto LABEL_128;
              }
            }
            else if ((SHIBYTE(p_buf) & 0x80000000) == 0)
            {
              goto LABEL_112;
            }
            operator delete((void *)buf.__r_.__value_.__l.__size_);
            if ((v90 & 0x80000000) == 0)
            {
LABEL_113:
              if ((v89 & 0x80000000) == 0)
                goto LABEL_114;
              goto LABEL_129;
            }
LABEL_128:
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((v89 & 0x80000000) == 0)
            {
LABEL_114:
              v91 = *(NSObject **)(a1 + 32);
              if (!v91)
                goto LABEL_116;
LABEL_115:
              dispatch_semaphore_signal(v91);
              goto LABEL_116;
            }
LABEL_129:
            operator delete(*(void **)__dst);
            v91 = *(NSObject **)(a1 + 32);
            if (!v91)
              goto LABEL_116;
            goto LABEL_115;
          }
        }
        memmove(p_p, v82, v85);
        goto LABEL_104;
      }
    }
    memmove(v78, v74, v77);
    goto LABEL_96;
  }
  objc_msgSend(MEMORY[0x1E0D273F0], "sharedReachability");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v52, "reportTileLoadSuccess:", v12);

  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v53 = (id)GEOGetVectorKitResourceLoadingLog_log;
  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
  {
    gdc::ResourceKey::keysInt32Str(&buf, (unsigned __int8 *)(a1 + 48));
    v54 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    v55 = *(_QWORD *)(a1 + 144);
    *(_DWORD *)__dst = 136315394;
    *(_QWORD *)&__dst[4] = v54;
    *(_WORD *)&__dst[12] = 2048;
    *(_QWORD *)&__dst[14] = v55;
    _os_log_impl(&dword_19F029000, v53, OS_LOG_TYPE_DEBUG, "TiledGEOResourceFetcher creating preliminary resource: %s, %llu", __dst, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }

  v117 = &off_1E42DA010;
  v118 = a1 + 48;
  v119 = &v117;
  v115[0] = &off_1E42DA058;
  v115[1] = a1 + 48;
  v116 = v115;
  p_buf = &buf;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E42DA058;
  buf.__r_.__value_.__l.__size_ = a1 + 48;
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v56 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v57 = v56;
  v58 = v118;
  v59 = *(_QWORD *)(v118 + 80);
  if (v59 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v56))
  {
    v60 = *(_QWORD *)(v58 + 88);
    *(_DWORD *)__dst = 134217984;
    *(_QWORD *)&__dst[4] = v60;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v57, OS_SIGNPOST_INTERVAL_BEGIN, v59, "CreateResource", "parent_signpost=%llu", __dst, 0xCu);
  }

  v61 = v116;
  if (v116 == v115)
  {
    v62 = 4;
    v61 = v115;
  }
  else
  {
    if (!v116)
      goto LABEL_73;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_73:
  v67 = v44 | v45;
  v68 = v119;
  if (v119 == &v117)
  {
    v69 = 4;
    v68 = &v117;
    goto LABEL_77;
  }
  if (v119)
  {
    v69 = 5;
LABEL_77:
    (*v68)[v69]();
  }
  if (!v42)
    v67 = *(_QWORD *)(a1 + 152);
  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD **))(*(_QWORD *)v97 + 128))(v97, *(_QWORD *)(a1 + 144), a1 + 48, v96, v95, v67, 0, &v103);
  v70 = *(NSObject **)(a1 + 32);
  if (v70)
    dispatch_semaphore_signal(v70);
  if (!p_buf)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  (*(void (**)(std::string *))(p_buf->__r_.__value_.__r.__words[0] + 48))(p_buf);
  v71 = p_buf;
  if (p_buf == &buf)
  {
    v72 = 4;
    v71 = &buf;
    goto LABEL_87;
  }
  if (p_buf)
  {
    v72 = 5;
LABEL_87:
    (*(void (**)(void))(v71->__r_.__value_.__r.__words[0] + 8 * v72))();
  }
LABEL_116:
  if (v105)
  {
    if ((_BYTE *)v107 != v108)
      free((void *)v107);
    v105 = 0;
  }
  v92 = v104;
  if (v104)
  {
    p_shared_owners = (unint64_t *)&v104->__shared_owners_;
    do
      v94 = __ldaxr(p_shared_owners);
    while (__stlxr(v94 - 1, p_shared_owners));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }

}

void sub_19F8EC33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  void *v43;
  void *v44;
  uint64_t v45;

  if (*(char *)(v45 - 177) < 0)
    operator delete(*(void **)(v45 - 200));
  operator delete(v43);
  if (a43 < 0)
    operator delete(__p);
  gdc::RawResourceSourceData::~RawResourceSourceData((gdc::RawResourceSourceData *)&a22);

  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb0_E3__3NSA_ISO_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb0_E3__3NSA_ISO_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42DA058;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb0_E3__3NSA_ISO_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42DA058;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb0_E3__3NSA_ISO_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    v6 = *(_QWORD *)(v4 + 88);
    v7 = 134217984;
    v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v5, "CreateResource", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }

}

void _ZNSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb0_E3__2NSA_ISO_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb0_E3__2NSA_ISO_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42DA010;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb0_E3__2NSA_ISO_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42DA010;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb0_E3__2NSA_ISO_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    v6 = *(_QWORD *)(v4 + 88);
    v7 = 134217984;
    v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v5, "CreateResource", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }

}

void _ZNSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__1NSA_ISO_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__1NSA_ISO_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42DA0E8;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__0NSA_ISO_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__0NSA_ISO_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42DA0A0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__0NSA_ISO_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42DA0A0;
  a2[1] = v2;
  return result;
}

uint64_t std::pair<GEOActiveTileSet * {__strong},std::vector<md::TiledGEOResourceFetcher::TileSetRegion>>::~pair(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }

  return a1;
}

void md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(id *this)
{
  void *v2;
  id v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *this = off_1E429F988;
  md::TiledGEOResourceFetcher::getTileLoader(this);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "cancelAllForClient:", this[58]);
  objc_msgSend(v2, "closeForClient:", this[58]);
  objc_msgSend(v2, "closeForClient:", this[61]);

  if (*((_BYTE *)this + 592))
    *((_BYTE *)this + 592) = 0;
  v3 = this[71];
  if (v3)
  {
    this[72] = v3;
    operator delete(v3);
  }

  this[66] = &off_1E42B4B10;
  this[63] = &off_1E42B5090;

  this[60] = &off_1E42B5490;
  this[57] = &off_1E42B5490;

  v4 = (std::__shared_weak_count *)this[56];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  gdc::ResourceFetcher::~ResourceFetcher((gdc::ResourceFetcher *)this);
}

void sub_19F8EC978(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  if (*(_BYTE *)(v1 + 592))
    *(_BYTE *)(v1 + 592) = 0;
  std::pair<GEOActiveTileSet * {__strong},std::vector<md::TiledGEOResourceFetcher::TileSetRegion>>::~pair(v1 + 560);
  *(_QWORD *)(v1 + 528) = &off_1E42B4B10;

  *(_QWORD *)(v1 + 504) = &off_1E42B5090;
  *(_QWORD *)(v1 + 480) = &off_1E42B5490;

  *(_QWORD *)(v1 + 456) = &off_1E42B5490;
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 440);
  gdc::ResourceFetcher::~ResourceFetcher((gdc::ResourceFetcher *)v1);
  _Unwind_Resume(a1);
}

void md::VenueLogic::~VenueLogic(md::VenueLogic *this)
{
  md::VenueLogic::~VenueLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  md::VenueLogic *v5;
  uint64_t v6;
  md::VenueLogic *v7;
  uint64_t v8;
  md::VenueLogic *v9;
  uint64_t v10;
  md::VenueLogic *v11;
  uint64_t v12;
  md::VenueLogic *v13;
  uint64_t v14;
  md::VenueLogic *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  *(_QWORD *)this = &off_1E428BCF0;
  v2 = (char *)this + 888;
  v3 = (char *)*((_QWORD *)this + 114);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (md::VenueLogic *)*((_QWORD *)this + 110);
  if (v5 == (md::VenueLogic *)((char *)this + 856))
  {
    v6 = 4;
    v5 = (md::VenueLogic *)((char *)this + 856);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = (md::VenueLogic *)*((_QWORD *)this + 106);
  if (v7 == (md::VenueLogic *)((char *)this + 824))
  {
    v8 = 4;
    v7 = (md::VenueLogic *)((char *)this + 824);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  v9 = (md::VenueLogic *)*((_QWORD *)this + 102);
  if (v9 == (md::VenueLogic *)((char *)this + 792))
  {
    v10 = 4;
    v9 = (md::VenueLogic *)((char *)this + 792);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_21:
  v11 = (md::VenueLogic *)*((_QWORD *)this + 98);
  if (v11 == (md::VenueLogic *)((char *)this + 760))
  {
    v12 = 4;
    v11 = (md::VenueLogic *)((char *)this + 760);
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_26:
  v13 = (md::VenueLogic *)*((_QWORD *)this + 94);
  if (v13 == (md::VenueLogic *)((char *)this + 728))
  {
    v14 = 4;
    v13 = (md::VenueLogic *)((char *)this + 728);
  }
  else
  {
    if (!v13)
      goto LABEL_31;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_31:
  v15 = (md::VenueLogic *)*((_QWORD *)this + 90);
  if (v15 == (md::VenueLogic *)((char *)this + 696))
  {
    v16 = 4;
    v15 = (md::VenueLogic *)((char *)this + 696);
  }
  else
  {
    if (!v15)
      goto LABEL_36;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_36:
  *((_QWORD *)this + 83) = &off_1E42B4C90;

  *((_QWORD *)this + 80) = &off_1E42B4C90;
  v17 = (_QWORD *)*((_QWORD *)this + 77);
  if (v17)
  {
    do
    {
      v22 = (_QWORD *)*v17;
      v23 = (void *)v17[3];
      if (v23)
      {
        v17[4] = v23;
        operator delete(v23);
      }
      operator delete(v17);
      v17 = v22;
    }
    while (v22);
  }
  v18 = (void *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v18)
    operator delete(v18);
  md::VenueLogicContext::~VenueLogicContext((md::VenueLogic *)((char *)this + 208));
  v19 = *((_QWORD *)this + 23);
  if (v19)
  {
    v20 = *((_QWORD *)this + 24);
    v21 = (void *)*((_QWORD *)this + 23);
    if (v20 != v19)
    {
      do
      {
        v24 = *(std::__shared_weak_count **)(v20 - 8);
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v20 -= 16;
      }
      while (v20 != v19);
      v21 = (void *)*((_QWORD *)this + 23);
    }
    *((_QWORD *)this + 24) = v19;
    operator delete(v21);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 120));
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

uint64_t md::VenueLogic::didBecomeInactive(md::VenueLogic *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  *(_OWORD *)((char *)this + 568) = 0u;
  result = *((_QWORD *)this + 90);
  if (result)
  {
    v2 = 0;
    v3 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)result + 48))(result, &v3, &v2);
  }
  return result;
}

void md::Logic<md::VenueLogic,md::VenueLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  const void *v22;
  int64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  char v44;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v26, a1);
  v5 = operator new();
  v6 = v5;
  v7 = v26;
  v8 = v27;
  v26 = 0;
  v27 = 0;
  *(_QWORD *)v5 = v7;
  *(_QWORD *)(v5 + 8) = v8;
  v10 = v28;
  v9 = v29;
  *(_QWORD *)(v5 + 16) = v28;
  *(_QWORD *)(v5 + 24) = v9;
  *(_DWORD *)(v5 + 32) = v30;
  if (v9)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v11 >= v8)
        v11 %= v8;
    }
    else
    {
      v11 &= v8 - 1;
    }
    *(_QWORD *)(v7 + 8 * v11) = v5 + 16;
    v28 = 0;
    v29 = 0;
  }
  v12 = v33;
  v13 = v34;
  *(_QWORD *)(v5 + 56) = v33;
  v14 = v31;
  v15 = v32;
  *(_QWORD *)(v5 + 40) = v31;
  v31 = 0;
  v32 = 0;
  *(_QWORD *)(v5 + 48) = v15;
  *(_QWORD *)(v5 + 64) = v13;
  *(_DWORD *)(v5 + 72) = v35;
  if (v13)
  {
    v16 = *(_QWORD *)(v12 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v16 >= v15)
        v16 %= v15;
    }
    else
    {
      v16 &= v15 - 1;
    }
    *(_QWORD *)(v14 + 8 * v16) = v5 + 56;
    v33 = 0;
    v34 = 0;
  }
  v18 = v38;
  v17 = v39;
  *(_QWORD *)(v5 + 96) = v38;
  v19 = v36;
  v20 = v37;
  *(_QWORD *)(v5 + 80) = v36;
  v36 = 0;
  v37 = 0;
  *(_QWORD *)(v5 + 88) = v20;
  *(_QWORD *)(v5 + 104) = v17;
  *(_DWORD *)(v5 + 112) = v40;
  if (v17)
  {
    v21 = *(_QWORD *)(v18 + 8);
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v21 >= v20)
        v21 %= v20;
    }
    else
    {
      v21 &= v20 - 1;
    }
    *(_QWORD *)(v19 + 8 * v21) = v5 + 96;
    v38 = 0;
    v39 = 0;
  }
  *(_QWORD *)(v5 + 120) = 0;
  *(_QWORD *)(v5 + 128) = 0;
  *(_QWORD *)(v5 + 136) = 0;
  v22 = v41;
  v23 = v42 - v41;
  if (v42 != v41)
  {
    if (v23 < 0)
      abort();
    v24 = (char *)operator new(v42 - v41);
    *(_QWORD *)(v6 + 120) = v24;
    *(_QWORD *)(v6 + 128) = v24;
    v25 = &v24[8 * (v23 >> 3)];
    *(_QWORD *)(v6 + 136) = v25;
    memcpy(v24, v22, v23);
    *(_QWORD *)(v6 + 128) = v25;
  }
  *(_QWORD *)(v6 + 272) = 0;
  *(_QWORD *)(v6 + 280) = v43;
  *(_BYTE *)(v6 + 288) = 0;
  *(_DWORD *)(v6 + 292) = 1065353216;
  *(_BYTE *)(v6 + 296) = v44;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_DWORD *)(v6 + 336) = 1065353216;
  *(_QWORD *)(v6 + 344) = 0;
  *(_BYTE *)(v6 + 352) = 0;
  v44 = 0;
  v4[2] = "md::VenueLogicContext]";
  v4[3] = 21;
  v4[4] = v6;
  *v4 = &off_1E42B0F00;
  v4[1] = 0x4927EB92E562CC46;
  *a2 = v4;
  md::VenueLogicContext::~VenueLogicContext((md::VenueLogicContext *)&v26);
}

void sub_19F8ECCF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  md::VenueLogicContext::~VenueLogicContext((md::VenueLogicContext *)va);
  MEMORY[0x1A1AF4E00](v2, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::VenueLogic,md::VenueLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x4927EB92E562CC46)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::SceneContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::VenueLogic,md::VenueLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x4927EB92E562CC46)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::SceneContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::VenueLogic,md::VenueLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x4927EB92E562CC46)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::SceneContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::VenueLogic,md::VenueLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x4927EB92E562CC46)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::SceneContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::VenueLogic,md::VenueLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[4];

  if (*(_QWORD *)(a3 + 8) == 0x4927EB92E562CC46 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::SceneContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

double md::Logic<md::VenueLogic,md::VenueLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 292) = 1065353216;
  *(_BYTE *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_QWORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  return result;
}

uint64_t md::Logic<md::VenueLogic,md::VenueLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::VenueLogic::runBeforeLayout(uint64_t a1, int8x8_t **a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  _WORD *v13;
  _WORD *v14;
  uint64_t *v15;
  _WORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  char *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t **v61;
  uint64_t v62;
  unint64_t **v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint8x8_t v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  float v76;
  float v77;
  _BOOL8 v78;
  unint64_t v79;
  unint64_t v80;
  size_t v81;
  unint64_t v82;
  uint8x8_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  char *v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;
  uint8x8_t v99;
  void **v100;
  void *v101;
  unint64_t v102;
  uint64_t v103;
  float v104;
  float v105;
  _BOOL8 v106;
  unint64_t v107;
  unint64_t v108;
  size_t prime;
  void *v110;
  void *v111;
  uint64_t v112;
  _QWORD *v113;
  size_t v114;
  size_t v115;
  size_t v116;
  _QWORD *i;
  size_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint8x8_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  size_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  int64_t v146;
  char *v147;
  BOOL v148;
  char *v149;
  size_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  unint64_t v160;
  uint64_t v161;
  __int128 *v162;
  _OWORD *v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  char *v167;
  unint64_t v168;
  __int128 *v169;
  _OWORD *v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  _BYTE *v175;
  uint64_t v176;
  uint64_t v177;
  _OWORD *v178;
  __int128 *v179;
  uint64_t v180;
  __int128 v181;
  uint64_t v182;
  void *v183;
  long double v184;
  long double v185;
  float64x2_t v186;
  int8x8_t *v190;
  float v191;
  float v192;
  float v193;
  VKTimedAnimation *v194;
  void *v195;
  void *v196;
  uint64_t v197;
  void *v198;
  id v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int8x8_t v204;
  uint8x8_t v205;
  unint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  int8x8_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  __n128 v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  double v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  double v229;
  _QWORD *v230;
  _BYTE *v231;
  int8x8_t v232;
  unint64_t v233;
  uint8x8_t v234;
  unint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  _QWORD *v243;
  _QWORD *v244;
  uint64_t v245;
  _BYTE *v246;
  _BYTE *v247;
  int64_t v248;
  char *v249;
  char *v250;
  unint64_t v251;
  double v252;
  uint64_t v253;
  double v254;
  double v255;
  float v256;
  double v257;
  double v258;
  double v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __n128 v263;
  __int128 v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t j;
  _QWORD *v269;
  unint64_t v270;
  int8x8_t v271;
  uint8x8_t v272;
  unint64_t v273;
  _QWORD *v274;
  _QWORD *v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unsigned __int16 *v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v284;
  void **v285;
  char *v286;
  unint64_t v287;
  uint64_t v288;
  float v289;
  _BOOL8 v290;
  unint64_t v291;
  unint64_t v292;
  size_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  unint64_t v298;
  unint64_t v299;
  char *v300;
  double v301;
  uint64_t v302;
  _QWORD *v303;
  int v304;
  double v305;
  uint64_t v306;
  unint64_t v307;
  _QWORD *v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  char *v312;
  unint64_t v313;
  _QWORD *v314;
  unint64_t v315;
  unint64_t v316;
  char *v317;
  char *v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  double *v331;
  double v332;
  double v333;
  double v334;
  unint64_t v335;
  unint64_t v336;
  uint64_t v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  uint64_t v343;
  double v344;
  double v345;
  void *v346;
  _QWORD *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t **v353;
  _QWORD *v354;
  uint64_t *v355;
  unint64_t **v356;
  uint64_t v357;
  _QWORD *v358;
  _QWORD *v359;
  uint64_t v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  _QWORD *v365;
  uint64_t v366;
  _QWORD *v367;
  _QWORD *v368;
  __int128 v369;
  _QWORD *v370;
  __int128 v371;
  uint64_t *v372;
  _BYTE v373[32];
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  _BYTE v380[24];
  __int128 v381;
  unint64_t v382;
  __int128 v383;
  __int128 v384;
  uint64_t v385;
  __int128 v386;
  __int128 v387;
  uint64_t v388;
  float64x2_t v389;
  id v390[8];
  _QWORD v391[3];
  _QWORD *v392;
  _QWORD v393[3];
  _QWORD *v394;
  _QWORD v395[3];
  _QWORD *v396;
  uint64_t v397;

  v349 = a4;
  v397 = *MEMORY[0x1E0C80C00];
  v393[0] = &off_1E42C8AF8;
  v393[1] = a2;
  v394 = v393;
  v391[0] = &off_1E42C8B40;
  v391[1] = a2;
  v392 = v391;
  v396 = v395;
  v395[0] = &off_1E42C8B40;
  v395[1] = a2;
  _ZNSt3__110__function6__funcIZN2md10VenueLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17VenueLogicContextEE3__0NS_9allocatorISL_EEFvvEEclEv((uint64_t)v393);
  v6 = v392;
  if (v392 == v391)
  {
    v7 = 4;
    v6 = v391;
  }
  else
  {
    if (!v392)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v7))(v6);
LABEL_6:
  v8 = v394;
  if (v394 == v393)
  {
    v9 = 4;
    v8 = v393;
    goto LABEL_10;
  }
  if (v394)
  {
    v9 = 5;
LABEL_10:
    (*(void (**)(_QWORD *))(*v8 + 8 * v9))(v8);
  }
  v10 = *a3;
  v351 = a3[1];
  v11 = *(_QWORD *)a3[2];
  if ((v12 & 1) == 0
  {
    qword_1ECE2F300 = 0;
    qword_1ECE2F2F8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
  }
  v366 = a1;
  v13 = *(_WORD **)(v11 + 48);
  v14 = *(_WORD **)(v11 + 56);
  v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v13 != v14)
  {
    v16 = *(_WORD **)(v11 + 48);
    while (*v16 != 6)
    {
      v16 += 16;
      if (v16 == v14)
        goto LABEL_23;
    }
    if (v16 == v14)
    {
      v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v13 != 6)
      {
        v13 += 16;
        if (v13 == v14)
        {
          v13 = *(_WORD **)(v11 + 56);
          break;
        }
      }
      v15 = (uint64_t *)(v13 + 4);
    }
  }
LABEL_23:
  v17 = *(char **)(v366 + 184);
  v18 = *(_QWORD *)(v366 + 192);
  if ((char *)v18 == v17)
  {
    v19 = v366;
  }
  else
  {
    do
    {
      v20 = *(std::__shared_weak_count **)(v18 - 8);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v18 -= 16;
    }
    while ((char *)v18 != v17);
    v19 = v366;
    v18 = *(_QWORD *)(v366 + 184);
  }
  v357 = v10;
  *(_QWORD *)(v19 + 192) = v17;
  v23 = v15[2];
  if (v23 > (*(_QWORD *)(v19 + 200) - v18) >> 4)
  {
    if (v23 >> 60)
LABEL_621:
      abort();
    v24 = (char *)operator new(16 * v23);
    v25 = &v24[16 * v23];
    v26 = &v17[(_QWORD)v24 - v18];
    if (v17 == (char *)v18)
    {
      *(_QWORD *)(v366 + 184) = v26;
      *(_QWORD *)(v366 + 192) = v26;
      *(_QWORD *)(v366 + 200) = v25;
    }
    else
    {
      v27 = &v17[(_QWORD)v24 - v18];
      do
      {
        v28 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v27 - 1) = v28;
        v27 -= 16;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
      }
      while (v17 != (char *)v18);
      v17 = *(char **)(v366 + 184);
      v18 = *(_QWORD *)(v366 + 192);
      *(_QWORD *)(v366 + 184) = v27;
      *(_QWORD *)(v366 + 192) = v26;
      *(_QWORD *)(v366 + 200) = v25;
      while ((char *)v18 != v17)
      {
        v29 = *(std::__shared_weak_count **)(v18 - 8);
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v18 -= 16;
      }
    }
    if (v17)
      operator delete(v17);
  }
  v34 = (uint64_t *)*v15;
  v32 = v15 + 1;
  v33 = v34;
  if (v34 != v32)
  {
    do
    {
      v35 = v33[4];
      if (v35)
      {
        v18 = *(_QWORD *)(v35 + 800);
        v36 = *(_OWORD **)(v35 + 808);
        while ((_OWORD *)v18 != v36)
        {
          v37 = *(_OWORD *)v18;
          *(_OWORD *)v380 = v37;
          if (*((_QWORD *)&v37 + 1))
          {
            v38 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
          }
          v41 = *(char **)(v366 + 192);
          v40 = *(_QWORD *)(v366 + 200);
          if ((unint64_t)v41 >= v40)
          {
            v43 = *(char **)(v366 + 184);
            v44 = (v41 - v43) >> 4;
            v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 60)
              abort();
            v369 = v37;
            v46 = v40 - (_QWORD)v43;
            if (v46 >> 3 > v45)
              v45 = v46 >> 3;
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
              v47 = 0xFFFFFFFFFFFFFFFLL;
            else
              v47 = v45;
            if (v47 >> 60)
LABEL_620:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v48 = (char *)operator new(16 * v47);
            v49 = &v48[16 * v44];
            *(_OWORD *)v49 = v369;
            v42 = v49 + 16;
            v50 = &v48[16 * v47];
            *(_OWORD *)v380 = 0uLL;
            if (v41 == v43)
            {
              *(_QWORD *)(v366 + 184) = v49;
              *(_QWORD *)(v366 + 192) = v42;
              *(_QWORD *)(v366 + 200) = v50;
            }
            else
            {
              do
              {
                v51 = *((_OWORD *)v41 - 1);
                v41 -= 16;
                *((_OWORD *)v49 - 1) = v51;
                v49 -= 16;
                *(_QWORD *)v41 = 0;
                *((_QWORD *)v41 + 1) = 0;
              }
              while (v41 != v43);
              v41 = *(char **)(v366 + 184);
              v52 = *(char **)(v366 + 192);
              *(_QWORD *)(v366 + 184) = v49;
              *(_QWORD *)(v366 + 192) = v42;
              *(_QWORD *)(v366 + 200) = v50;
              while (v52 != v41)
              {
                v53 = (std::__shared_weak_count *)*((_QWORD *)v52 - 1);
                if (v53)
                {
                  v54 = (unint64_t *)&v53->__shared_owners_;
                  do
                    v55 = __ldaxr(v54);
                  while (__stlxr(v55 - 1, v54));
                  if (!v55)
                  {
                    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                    std::__shared_weak_count::__release_weak(v53);
                  }
                }
                v52 -= 16;
              }
            }
            if (v41)
              operator delete(v41);
          }
          else
          {
            *(_OWORD *)v41 = v37;
            *(_OWORD *)v380 = 0uLL;
            v42 = v41 + 16;
          }
          *(_QWORD *)(v366 + 192) = v42;
          if (*(_QWORD *)&v380[8])
          {
            v56 = (unint64_t *)(*(_QWORD *)&v380[8] + 8);
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)&v380[8] + 16))(*(_QWORD *)&v380[8]);
              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v380[8]);
            }
          }
          v18 += 16;
        }
      }
      v58 = (uint64_t *)v33[1];
      if (v58)
      {
        do
        {
          v59 = v58;
          v58 = (uint64_t *)*v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          v59 = (uint64_t *)v33[2];
          _ZF = *v59 == (_QWORD)v33;
          v33 = v59;
        }
        while (!_ZF);
      }
      v33 = v59;
    }
    while (v59 != v32);
  }
  v60 = v366;
  v61 = *(unint64_t ***)(v366 + 184);
  v353 = *(unint64_t ***)(v366 + 192);
  v62 = v10;
  if (v61 != v353)
  {
    v354 = (_QWORD *)(v366 + 224);
    v355 = (uint64_t *)(v366 + 208);
    v367 = (_QWORD *)(v366 + 616);
    while (1)
    {
      v63 = v61;
      v64 = *v61;
      v65 = *v64;
      *(_QWORD *)v373 = *v64;
      *(_QWORD *)&v373[8] = v64;
      v356 = v63;
      v66 = (std::__shared_weak_count *)v63[1];
      *(_QWORD *)&v373[16] = v66;
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = *(_QWORD *)(v366 + 216);
      if (!v69)
        break;
      v70 = (uint8x8_t)vcnt_s8((int8x8_t)v69);
      v70.i16[0] = vaddlv_u8(v70);
      if (v70.u32[0] > 1uLL)
      {
        v18 = v65;
        if (v65 >= v69)
          v18 = v65 % v69;
      }
      else
      {
        v18 = (v69 - 1) & v65;
      }
      v71 = *(_QWORD **)(*v355 + 8 * v18);
      if (!v71)
        break;
      v72 = (_QWORD *)*v71;
      if (!v72)
        break;
      if (v70.u32[0] < 2uLL)
      {
        while (1)
        {
          v74 = v72[1];
          if (v74 == v65)
          {
            if (v72[2] == v65)
              goto LABEL_136;
          }
          else if ((v74 & (v69 - 1)) != v18)
          {
            goto LABEL_117;
          }
          v72 = (_QWORD *)*v72;
          if (!v72)
            goto LABEL_117;
        }
      }
      while (1)
      {
        v73 = v72[1];
        if (v73 == v65)
          break;
        if (v73 >= v69)
          v73 %= v69;
        if (v73 != v18)
          goto LABEL_117;
LABEL_107:
        v72 = (_QWORD *)*v72;
        if (!v72)
          goto LABEL_117;
      }
      if (v72[2] != v65)
        goto LABEL_107;
LABEL_136:
      v60 = v366;
      if (v66)
      {
        v85 = (unint64_t *)&v66->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
LABEL_160:
      v90 = (_QWORD *)(*v356)[2];
      v358 = (_QWORD *)(*v356)[3];
      if (v90 != v358)
      {
        do
        {
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long>(v366 + 288, v90[4], v90[4]);
          v91 = *v90;
          v92 = v90[1];
          v359 = v90;
          v360 = v92;
          while (v91 != v92)
          {
            v362 = v91;
            v94 = *(_QWORD **)(v91 + 144);
            v93 = *(_QWORD **)(v91 + 152);
            v370 = v93;
            while (v94 != v93)
            {
              v96 = (char *)v94[2];
              v95 = (char *)v94[3];
              if (v95 == v96)
                goto LABEL_167;
              v97 = v94[1];
              if (!v97)
                goto LABEL_167;
              v98 = *(_QWORD *)(v60 + 608);
              if (v98)
              {
                v99 = (uint8x8_t)vcnt_s8((int8x8_t)v98);
                v99.i16[0] = vaddlv_u8(v99);
                if (v99.u32[0] > 1uLL)
                {
                  v18 = v94[1];
                  if (v97 >= v98)
                    v18 = v97 % v98;
                }
                else
                {
                  v18 = (v98 - 1) & v97;
                }
                v100 = *(void ***)(*(_QWORD *)(v60 + 600) + 8 * v18);
                if (v100)
                {
                  v101 = *v100;
                  if (*v100)
                  {
                    if (v99.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v103 = *((_QWORD *)v101 + 1);
                        if (v103 == v97)
                        {
                          if (*((_QWORD *)v101 + 2) == v97)
                            goto LABEL_251;
                        }
                        else if ((v103 & (v98 - 1)) != v18)
                        {
                          goto LABEL_191;
                        }
                        v101 = *(void **)v101;
                        if (!v101)
                          goto LABEL_191;
                      }
                    }
                    do
                    {
                      v102 = *((_QWORD *)v101 + 1);
                      if (v102 == v97)
                      {
                        if (*((_QWORD *)v101 + 2) == v97)
                          goto LABEL_251;
                      }
                      else
                      {
                        if (v102 >= v98)
                          v102 %= v98;
                        if (v102 != v18)
                          break;
                      }
                      v101 = *(void **)v101;
                    }
                    while (v101);
                  }
                }
              }
LABEL_191:
              v101 = operator new(0x30uLL);
              *(_QWORD *)v380 = v101;
              *(_QWORD *)&v380[8] = v366 + 616;
              *(_QWORD *)v101 = 0;
              *((_QWORD *)v101 + 1) = v97;
              *((_QWORD *)v101 + 2) = v97;
              *((_QWORD *)v101 + 3) = 0;
              *((_QWORD *)v101 + 4) = 0;
              *((_QWORD *)v101 + 5) = 0;
              v380[16] = 1;
              v104 = (float)(unint64_t)(*(_QWORD *)(v60 + 624) + 1);
              v105 = *(float *)(v60 + 632);
              if (!v98 || (float)(v105 * (float)v98) < v104)
              {
                v106 = (v98 & (v98 - 1)) != 0;
                if (v98 < 3)
                  v106 = 1;
                v107 = v106 | (2 * v98);
                v108 = vcvtps_u32_f32(v104 / v105);
                if (v107 <= v108)
                  prime = v108;
                else
                  prime = v107;
                if (prime == 1)
                {
                  prime = 2;
                }
                else if ((prime & (prime - 1)) != 0)
                {
                  prime = std::__next_prime(prime);
                  v98 = *(_QWORD *)(v60 + 608);
                }
                if (prime <= v98)
                {
                  if (prime < v98)
                  {
                    v121 = vcvtps_u32_f32((float)*(unint64_t *)(v60 + 624) / *(float *)(v60 + 632));
                    if (v98 < 3
                      || (v122 = (uint8x8_t)vcnt_s8((int8x8_t)v98), v122.i16[0] = vaddlv_u8(v122), v122.u32[0] > 1uLL))
                    {
                      v121 = std::__next_prime(v121);
                    }
                    else
                    {
                      v123 = 1 << -(char)__clz(v121 - 1);
                      if (v121 >= 2)
                        v121 = v123;
                    }
                    if (prime <= v121)
                      prime = v121;
                    if (prime >= v98)
                    {
                      v98 = *(_QWORD *)(v60 + 608);
                    }
                    else
                    {
                      if (prime)
                        goto LABEL_203;
                      v183 = *(void **)(v60 + 600);
                      *(_QWORD *)(v60 + 600) = 0;
                      if (v183)
                        operator delete(v183);
                      v98 = 0;
                      *(_QWORD *)(v60 + 608) = 0;
                    }
                  }
LABEL_228:
                  if ((v98 & (v98 - 1)) != 0)
                  {
                    if (v97 >= v98)
                      v18 = v97 % v98;
                    else
                      v18 = v97;
                  }
                  else
                  {
                    v18 = (v98 - 1) & v97;
                  }
                  goto LABEL_241;
                }
LABEL_203:
                if (prime >> 61)
                  goto LABEL_620;
                v110 = operator new(8 * prime);
                v111 = *(void **)(v60 + 600);
                *(_QWORD *)(v60 + 600) = v110;
                if (v111)
                  operator delete(v111);
                v112 = 0;
                *(_QWORD *)(v60 + 608) = prime;
                do
                  *(_QWORD *)(*(_QWORD *)(v60 + 600) + 8 * v112++) = 0;
                while (prime != v112);
                v113 = (_QWORD *)*v367;
                if (!*v367)
                  goto LABEL_227;
                v114 = v113[1];
                v115 = prime - 1;
                if ((prime & (prime - 1)) == 0)
                {
                  v116 = v114 & v115;
                  *(_QWORD *)(*(_QWORD *)(v60 + 600) + 8 * v116) = v367;
                  for (i = (_QWORD *)*v113; *v113; i = (_QWORD *)*v113)
                  {
                    v118 = i[1] & v115;
                    if (v118 == v116)
                    {
                      v113 = i;
                    }
                    else
                    {
                      v119 = *(_QWORD *)(v60 + 600);
                      if (*(_QWORD *)(v119 + 8 * v118))
                      {
                        *v113 = *i;
                        v120 = 8 * v118;
                        *i = **(_QWORD **)(*(_QWORD *)(v60 + 600) + v120);
                        **(_QWORD **)(*(_QWORD *)(v60 + 600) + v120) = i;
                      }
                      else
                      {
                        *(_QWORD *)(v119 + 8 * v118) = v113;
                        v113 = i;
                        v116 = v118;
                      }
                    }
                  }
                  goto LABEL_227;
                }
                if (v114 >= prime)
                  v114 %= prime;
                *(_QWORD *)(*(_QWORD *)(v60 + 600) + 8 * v114) = v367;
                v124 = (_QWORD *)*v113;
                if (!*v113)
                {
LABEL_227:
                  v98 = prime;
                  goto LABEL_228;
                }
                while (2)
                {
                  v126 = v124[1];
                  if (v126 >= prime)
                    v126 %= prime;
                  if (v126 != v114)
                  {
                    v127 = *(_QWORD *)(v60 + 600);
                    if (!*(_QWORD *)(v127 + 8 * v126))
                    {
                      *(_QWORD *)(v127 + 8 * v126) = v113;
LABEL_232:
                      v113 = v124;
                      v124 = (_QWORD *)*v124;
                      v114 = v126;
                      if (!v124)
                        goto LABEL_227;
                      continue;
                    }
                    *v113 = *v124;
                    v125 = 8 * v126;
                    *v124 = **(_QWORD **)(*(_QWORD *)(v60 + 600) + v125);
                    **(_QWORD **)(*(_QWORD *)(v60 + 600) + v125) = v124;
                    v124 = v113;
                  }
                  break;
                }
                v126 = v114;
                goto LABEL_232;
              }
LABEL_241:
              v128 = *(_QWORD *)(v60 + 600);
              v129 = *(_QWORD **)(v128 + 8 * v18);
              if (v129)
              {
                *(_QWORD *)v101 = *v129;
LABEL_249:
                *v129 = v101;
                goto LABEL_250;
              }
              *(_QWORD *)v101 = *v367;
              *v367 = v101;
              *(_QWORD *)(v128 + 8 * v18) = v367;
              if (*(_QWORD *)v101)
              {
                v130 = *(_QWORD *)(*(_QWORD *)v101 + 8);
                if ((v98 & (v98 - 1)) != 0)
                {
                  if (v130 >= v98)
                    v130 %= v98;
                }
                else
                {
                  v130 &= v98 - 1;
                }
                v129 = (_QWORD *)(*(_QWORD *)(v60 + 600) + 8 * v130);
                goto LABEL_249;
              }
LABEL_250:
              ++*(_QWORD *)(v60 + 624);
              v96 = (char *)v94[2];
              v95 = (char *)v94[3];
LABEL_251:
              v131 = v95 - v96;
              if (v95 - v96 < 1)
                goto LABEL_167;
              v18 = v131 >> 3;
              v133 = *((_QWORD *)v101 + 3);
              v132 = (char *)*((_QWORD *)v101 + 4);
              v134 = (unint64_t)&v132[-v133];
              v135 = (uint64_t)&v132[-v133] >> 3;
              v136 = (char *)(v133 + ((unint64_t)&v132[-v133] & 0xFFFFFFFFFFFFFFF8));
              v137 = *((_QWORD *)v101 + 5);
              if (v131 >> 3 > (v137 - (uint64_t)v132) >> 3)
              {
                v138 = v135 + v18;
                if ((unint64_t)(v135 + v18) >> 61)
                  goto LABEL_621;
                v139 = v137 - v133;
                if (v139 >> 2 > v138)
                  v138 = v139 >> 2;
                _CF = (unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8;
                v141 = 0x1FFFFFFFFFFFFFFFLL;
                if (!_CF)
                  v141 = v138;
                v364 = v141;
                if (v141)
                {
                  if (v141 >> 61)
                    goto LABEL_620;
                  v142 = operator new(8 * v141);
                  v136 = (char *)(v133 + ((unint64_t)&v132[-v133] & 0xFFFFFFFFFFFFFFF8));
                  v135 = (uint64_t)&v132[-v133] >> 3;
                }
                else
                {
                  v142 = 0;
                }
                v157 = &v142[8 * v135];
                v158 = &v157[8 * v18];
                if ((unint64_t)(v131 - 8) >= 0x38)
                {
                  if ((unint64_t)(&v142[v134 & 0xFFFFFFFFFFFFFFF8] - v96) >= 0x20)
                  {
                    v160 = ((unint64_t)(v131 - 8) >> 3) + 1;
                    v161 = 8 * (v160 & 0x3FFFFFFFFFFFFFFCLL);
                    v159 = &v157[v161];
                    v162 = (__int128 *)(v96 + 16);
                    v163 = &v142[8 * v135 + 16];
                    v164 = v160 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v165 = *v162;
                      *(v163 - 1) = *(v162 - 1);
                      *v163 = v165;
                      v162 += 2;
                      v163 += 2;
                      v164 -= 4;
                    }
                    while (v164);
                    if (v160 == (v160 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_283:
                      if ((char *)v133 != v132)
                      {
                        if (v134 - 8 >= 0x68)
                        {
                          v167 = v136;
                          if (v133
                             + (v134 & 0xFFFFFFFFFFFFFFF8)
                             - (unint64_t)&v142[v134 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
                          {
                            v168 = ((v134 - 8) >> 3) + 1;
                            v167 = &v136[-8 * (v168 & 0x3FFFFFFFFFFFFFFCLL)];
                            v169 = (__int128 *)(v133 + 8 * v135 - 16);
                            v170 = &v142[8 * v135 - 16];
                            v171 = v168 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v172 = *v169;
                              *(v170 - 1) = *(v169 - 1);
                              *v170 = v172;
                              v169 -= 2;
                              v170 -= 2;
                              v171 -= 4;
                            }
                            while (v171);
                            v157 -= 8 * (v168 & 0x3FFFFFFFFFFFFFFCLL);
                            if (v168 == (v168 & 0x3FFFFFFFFFFFFFFCLL))
                              goto LABEL_291;
                          }
                        }
                        else
                        {
                          v167 = v136;
                        }
                        do
                        {
                          v173 = *((_QWORD *)v167 - 1);
                          v167 -= 8;
                          *((_QWORD *)v157 - 1) = v173;
                          v157 -= 8;
                        }
                        while (v167 != (char *)v133);
                      }
LABEL_291:
                      v174 = v132 - v136;
                      if (v132 != v136)
                      {
                        v175 = v142;
                        memmove(v158, v136, v132 - v136);
                        v142 = v175;
                      }
                      *((_QWORD *)v101 + 3) = v157;
                      *((_QWORD *)v101 + 4) = &v158[v174];
                      *((_QWORD *)v101 + 5) = &v142[8 * v364];
                      v60 = v366;
                      if (v133)
                        operator delete((void *)v133);
                      goto LABEL_167;
                    }
                    v96 += v161;
                  }
                  else
                  {
                    v159 = &v142[8 * v135];
                  }
                }
                else
                {
                  v159 = &v142[8 * v135];
                }
                do
                {
                  v166 = *(_QWORD *)v96;
                  v96 += 8;
                  *(_QWORD *)v159 = v166;
                  v159 += 8;
                }
                while (v159 != v158);
                goto LABEL_283;
              }
              v143 = v132 - v136;
              v144 = (v132 - v136) >> 3;
              if (v144 >= v18)
              {
                v145 = &v96[8 * v18];
                v147 = (char *)*((_QWORD *)v101 + 4);
                v60 = v366;
LABEL_268:
                v149 = &v136[8 * v18];
                v150 = v147 - v149;
                v151 = (v147 - v149) >> 3;
                v152 = &v147[-8 * v18];
                v153 = v147;
                if (v152 < v132)
                {
                  v154 = (v134 & 0xFFFFFFFFFFFFFFF8) + v150;
                  v155 = v133 + v154 + 8;
                  if ((unint64_t)v132 > v155)
                    v155 = (unint64_t)v132;
                  v156 = v155 + ~v133 - v154;
                  if (v156 > 0x57)
                  {
                    v153 = v147;
                    if ((unint64_t)&v149[-(v134 & 0xFFFFFFFFFFFFFFF8) - v133] >= 0x20)
                    {
                      v176 = (v156 >> 3) + 1;
                      v177 = 8 * (v176 & 0x3FFFFFFFFFFFFFFCLL);
                      v152 += v177;
                      v178 = v147 + 16;
                      v179 = (__int128 *)(v133 + 8 * v151 + 8 * v135 + 16);
                      v180 = v176 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v181 = *v179;
                        *(v178 - 1) = *(v179 - 1);
                        *v178 = v181;
                        v178 += 2;
                        v179 += 2;
                        v180 -= 4;
                      }
                      while (v180);
                      v153 = &v147[v177];
                      if (v176 == (v176 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_300;
                    }
                  }
                  else
                  {
                    v153 = v147;
                  }
                  do
                  {
                    v182 = *(_QWORD *)v152;
                    v152 += 8;
                    *(_QWORD *)v153 = v182;
                    v153 += 8;
                  }
                  while (v152 < v132);
                }
LABEL_300:
                *((_QWORD *)v101 + 4) = v153;
                if (v147 != v149)
                {
                  v18 = (uint64_t)v136;
                  memmove(&v147[-8 * v151], v136, v150);
                  v136 = (char *)v18;
                }
                if (v145 != v96)
                  memmove(v136, v96, v145 - v96);
                goto LABEL_167;
              }
              v145 = &v96[8 * v144];
              v146 = v95 - v145;
              if (v95 != v145)
              {
                v361 = &v96[8 * v144];
                memmove(*((void **)v101 + 4), v361, v95 - v145);
                v135 = (uint64_t)&v132[-v133] >> 3;
                v145 = v361;
                v136 = (char *)(v133 + ((unint64_t)&v132[-v133] & 0xFFFFFFFFFFFFFFF8));
              }
              v147 = &v132[v146];
              *((_QWORD *)v101 + 4) = &v132[v146];
              v148 = v143 < 1;
              v60 = v366;
              if (!v148)
                goto LABEL_268;
LABEL_167:
              v94 += 5;
              v93 = v370;
            }
            v91 = v362 + 184;
            v92 = v360;
          }
          v90 = v359 + 15;
          v62 = v357;
        }
        while (v359 + 15 != v358);
      }
      v61 = v356 + 2;
      if (v356 + 2 == v353)
        goto LABEL_313;
    }
LABEL_117:
    v75 = (char *)operator new(0x28uLL);
    *(_QWORD *)v380 = v75;
    *(_QWORD *)&v380[8] = v366 + 224;
    *(_QWORD *)v75 = 0;
    *((_QWORD *)v75 + 1) = v65;
    *((_QWORD *)v75 + 2) = v65;
    *(_OWORD *)(v75 + 24) = *(_OWORD *)&v373[8];
    *(_QWORD *)&v373[8] = 0;
    *(_QWORD *)&v373[16] = 0;
    v380[16] = 1;
    v76 = (float)(unint64_t)(*(_QWORD *)(v366 + 232) + 1);
    v77 = *(float *)(v366 + 240);
    if (!v69 || (float)(v77 * (float)v69) < v76)
    {
      v78 = (v69 & (v69 - 1)) != 0;
      if (v69 < 3)
        v78 = 1;
      v79 = v78 | (2 * v69);
      v80 = vcvtps_u32_f32(v76 / v77);
      if (v79 <= v80)
        v81 = v80;
      else
        v81 = v79;
      if (v81 == 1)
      {
        v81 = 2;
      }
      else if ((v81 & (v81 - 1)) != 0)
      {
        v81 = std::__next_prime(v81);
        v69 = *(_QWORD *)(v366 + 216);
      }
      if (v81 > v69)
        goto LABEL_129;
      if (v81 < v69)
      {
        v82 = vcvtps_u32_f32((float)*(unint64_t *)(v366 + 232) / *(float *)(v366 + 240));
        if (v69 < 3 || (v83 = (uint8x8_t)vcnt_s8((int8x8_t)v69), v83.i16[0] = vaddlv_u8(v83), v83.u32[0] > 1uLL))
        {
          v82 = std::__next_prime(v82);
        }
        else
        {
          v84 = 1 << -(char)__clz(v82 - 1);
          if (v82 >= 2)
            v82 = v84;
        }
        if (v81 <= v82)
          v81 = v82;
        if (v81 < v69)
LABEL_129:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v355, v81);
      }
      v69 = *(_QWORD *)(v366 + 216);
      if ((v69 & (v69 - 1)) != 0)
      {
        if (v65 >= v69)
          v18 = v65 % v69;
        else
          v18 = v65;
      }
      else
      {
        v18 = (v69 - 1) & v65;
      }
    }
    v87 = *v355;
    v88 = *(_QWORD **)(*v355 + 8 * v18);
    v60 = v366;
    if (v88)
    {
      *(_QWORD *)v75 = *v88;
    }
    else
    {
      *(_QWORD *)v75 = *v354;
      *v354 = v75;
      *(_QWORD *)(v87 + 8 * v18) = v354;
      if (!*(_QWORD *)v75)
      {
LABEL_159:
        ++*(_QWORD *)(v366 + 232);
        goto LABEL_160;
      }
      v89 = *(_QWORD *)(*(_QWORD *)v75 + 8);
      if ((v69 & (v69 - 1)) != 0)
      {
        if (v89 >= v69)
          v89 %= v69;
      }
      else
      {
        v89 &= v69 - 1;
      }
      v88 = (_QWORD *)(*v355 + 8 * v89);
    }
    *v88 = v75;
    goto LABEL_159;
  }
LABEL_313:
  v371 = *(_OWORD *)(v62 + 16);
  v184 = tan(*(double *)(v62 + 8) * 0.5 + 0.785398163);
  v185 = log(v184);
  *(_QWORD *)&v186.f64[0] = v371;
  v186.f64[1] = v185;
  __asm { FMOV            V1.2D, #0.5 }
  v389 = vmlaq_f64(_Q1, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v186);
  v190 = a2[1];
  md::LayoutContext::zoomAtCentrePoint(v190);
  if (v191 <= 17.5 || *(_BYTE *)(v60 + 688))
  {
    if (v191 >= 17.3 || !*(_BYTE *)(v60 + 688))
      goto LABEL_323;
    *(_BYTE *)(v60 + 688) = 0;
    v192 = 0.0;
  }
  else
  {
    *(_BYTE *)(v60 + 688) = 1;
    v192 = 1.0;
  }
  v193 = *(float *)(v60 + 492);
  objc_msgSend(*(id *)(v60 + 672), "stop", v349);
  v194 = -[VKTimedAnimation initWithDuration:]([VKTimedAnimation alloc], "initWithDuration:", (float)(vabds_f32(v192, v193) * 0.3));
  v195 = *(void **)(v60 + 672);
  *(_QWORD *)(v60 + 672) = v194;

  v196 = *(void **)(v60 + 672);
  v197 = MEMORY[0x1E0C809B0];
  *(_QWORD *)v380 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&v380[8] = 3221225472;
  *(_QWORD *)&v380[16] = ___ZN2md10VenueLogic22_runExtrusionAnimationEv_block_invoke;
  *(_QWORD *)&v381 = &__block_descriptor_48_e8_v12__0f8l;
  *((_QWORD *)&v381 + 1) = v60;
  v382 = __PAIR64__(LODWORD(v192), LODWORD(v193));
  objc_msgSend(v196, "setStepHandler:", v380);
  v198 = *(void **)(v60 + 672);
  *(_QWORD *)v373 = v197;
  *(_QWORD *)&v373[8] = 3221225472;
  *(_QWORD *)&v373[16] = ___ZN2md10VenueLogic22_runExtrusionAnimationEv_block_invoke_2;
  *(_QWORD *)&v373[24] = &__block_descriptor_44_e8_v12__0B8l;
  *(_QWORD *)&v374 = v60;
  *((float *)&v374 + 2) = v192;
  objc_msgSend(v198, "setCompletionHandler:", v373);
  if (*(_QWORD *)(v60 + 816))
  {
    v199 = *(id *)(v60 + 672);
    v390[0] = v199;
    v200 = *(_QWORD *)(v60 + 816);
    if (!v200)
    {
LABEL_627:
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
    (*(void (**)(uint64_t, id *))(*(_QWORD *)v200 + 48))(v200, v390);

    v60 = v366;
  }
  v190 = a2[1];
LABEL_323:
  v201 = v60;
  v202 = *(_QWORD *)(v60 + 568);
  v203 = *(_QWORD *)(v201 + 576);
  v204 = v190[1];
  if (!*(_QWORD *)&v204)
    goto LABEL_347;
  v205 = (uint8x8_t)vcnt_s8(v204);
  v205.i16[0] = vaddlv_u8(v205);
  if (v205.u32[0] > 1uLL)
  {
    v206 = 0xC97B9E962ADF4AD4;
    if (*(_QWORD *)&v204 <= 0xC97B9E962ADF4AD4)
      v206 = 0xC97B9E962ADF4AD4 % *(_QWORD *)&v204;
  }
  else
  {
    v206 = (*(_QWORD *)&v204 - 1) & 0xC97B9E962ADF4AD4;
  }
  v207 = *(_QWORD **)(*(_QWORD *)v190 + 8 * v206);
  if (!v207)
    goto LABEL_346;
  v208 = (_QWORD *)*v207;
  if (!v208)
    goto LABEL_346;
  if (v205.u32[0] < 2uLL)
  {
    v209 = *(_QWORD *)&v204 - 1;
    while (1)
    {
      v211 = v208[1];
      if (v211 == 0xC97B9E962ADF4AD4)
      {
        if (v208[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_344;
      }
      else if ((v211 & v209) != v206)
      {
        goto LABEL_346;
      }
      v208 = (_QWORD *)*v208;
      if (!v208)
        goto LABEL_346;
    }
  }
  while (1)
  {
    v210 = v208[1];
    if (v210 == 0xC97B9E962ADF4AD4)
      break;
    if (v210 >= *(_QWORD *)&v204)
      v210 %= *(_QWORD *)&v204;
    if (v210 != v206)
      goto LABEL_346;
LABEL_333:
    v208 = (_QWORD *)*v208;
    if (!v208)
      goto LABEL_346;
  }
  if (v208[2] != 0xC97B9E962ADF4AD4)
    goto LABEL_333;
LABEL_344:
  v212 = (int8x8_t *)v208[5];
  if (*(_QWORD *)&v212[1] == 0xC97B9E962ADF4AD4)
  {
    v204 = v212[4];
    goto LABEL_347;
  }
LABEL_346:
  v204 = 0;
LABEL_347:
  LOBYTE(v213) = *(_BYTE *)v351;
  if (*(_BYTE *)v351)
  {
    v214 = **(_QWORD **)&v204;
    v215 = *(_QWORD *)(*(_QWORD *)&v204 + 8);
    if (v214 != v215)
    {
      while (*(_BYTE *)v214 != 21)
      {
        v214 += 16;
        if (v214 == v215)
          goto LABEL_355;
      }
    }
    if (v214 == v215)
    {
LABEL_355:
      LOBYTE(v213) = 0;
    }
    else
    {
      v213 = *(_QWORD *)(v214 + 8);
      if (v213)
      {
        md::LayoutContext::frameState((md::LayoutContext *)a2);
        LOBYTE(v213) = *(unsigned __int8 *)(v216 + 128) - 1 < 3;
      }
    }
  }
  *(_BYTE *)(v366 + 496) = v213;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v349);
  v217 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(v366 + 560) = objc_msgSend(v217, "daVinciShowStackingVenues");

  v363 = v366 + 208;
  v218 = *(_QWORD *)(v366 + 912);
  if (v218 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v218 + 48))(v218))
  {
    v225 = *(_QWORD *)(v366 + 568);
    *(_QWORD *)(v366 + 480) = v225;
    goto LABEL_380;
  }
  md::LayoutContext::zoomAtCentrePoint(a2[1]);
  if (v219.n128_f32[0] > 0.0 && (float)(16.0 - *(float *)(v366 + 692)) > v219.n128_f32[0])
  {
LABEL_372:
    v220 = 0;
    v221 = 0;
    v226 = (_QWORD *)v366;
    *(_QWORD *)(v366 + 568) = 0;
    goto LABEL_375;
  }
  v219.n128_f64[0] = md::VenueLogicContext::venuesInProximityToWorldPoint((uint64_t *)v380, v363, &v389, v219);
  if (*(_QWORD *)&v380[8] == *(_QWORD *)v380)
  {
    if (*(_QWORD *)&v380[8])
      operator delete(*(void **)&v380[8]);
    goto LABEL_372;
  }
  v220 = **(_QWORD **)v380;
  operator delete(*(void **)v380);
  *(_QWORD *)(v366 + 568) = v220;
  if (v220)
  {
    v221 = *(_QWORD *)(v220 + 16);
    v222 = *(_QWORD *)(v220 + 24);
    if (v221 != v222)
    {
      v219.n128_f64[0] = geo::ConvexHull2<double>::distanceSquaredTo(*(float64x2_t **)(v221 + 80), *(float64x2_t **)(v221 + 88), &v389);
      v223 = v221 + 120;
      if (v221 + 120 != v222)
      {
        v224 = v219.n128_f64[0];
        do
        {
          v219.n128_f64[0] = geo::ConvexHull2<double>::distanceSquaredTo(*(float64x2_t **)(v223 + 80), *(float64x2_t **)(v223 + 88), &v389);
          if (v219.n128_f64[0] < v224)
            v221 = v223;
          v224 = fmin(v219.n128_f64[0], v224);
          v223 += 120;
        }
        while (v223 != v222);
      }
    }
  }
  else
  {
    v221 = 0;
  }
  v226 = (_QWORD *)v366;
LABEL_375:
  v226[72] = v221;
  v226[60] = v220;
  v227 = v226[90];
  if (v227)
  {
    if (v202 != v220 || (v225 = v202, v203 != v221))
    {
      *(_QWORD *)v380 = v220;
      *(_QWORD *)v373 = v221;
      (*(void (**)(uint64_t, _BYTE *, _BYTE *, __n128))(*(_QWORD *)v227 + 48))(v227, v380, v373, v219);
      v225 = *(_QWORD *)(v366 + 568);
    }
  }
  else
  {
    v225 = v220;
  }
LABEL_380:
  v228 = *(_QWORD *)(v366 + 752);
  if (v228)
  {
    if (v202 != v225)
    {
      *(_QWORD *)v380 = v225;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v228 + 48))(v228, v380);
      v202 = *(_QWORD *)(v366 + 568);
    }
    if (v202)
    {
LABEL_384:
      v229 = sqrt(geo::ConvexHull2<double>::distanceSquaredTo(*(float64x2_t **)(v202 + 64), *(float64x2_t **)(v202 + 72), &v389));
      goto LABEL_387;
    }
  }
  else
  {
    v202 = v225;
    if (v225)
      goto LABEL_384;
  }
  v229 = 1.79769313e308;
LABEL_387:
  v230 = (_QWORD *)v366;
  *(double *)(v366 + 584) = v229;
  v231 = *(_BYTE **)(v366 + 328);
  *(_QWORD *)(v366 + 336) = v231;
  v232 = *(int8x8_t *)(v366 + 608);
  if (!*(_QWORD *)&v232)
    goto LABEL_433;
  v233 = *(_QWORD *)(v366 + 592);
  v234 = (uint8x8_t)vcnt_s8(v232);
  v234.i16[0] = vaddlv_u8(v234);
  if (v234.u32[0] > 1uLL)
  {
    v235 = *(_QWORD *)(v366 + 592);
    if (v233 >= *(_QWORD *)&v232)
      v235 = v233 % *(_QWORD *)&v232;
  }
  else
  {
    v235 = (*(_QWORD *)&v232 - 1) & v233;
  }
  v236 = *(_QWORD *)(v366 + 600);
  v237 = *(_QWORD **)(v236 + 8 * v235);
  if (!v237)
    goto LABEL_433;
  v238 = (_QWORD *)*v237;
  if (!*v237)
    goto LABEL_433;
  v239 = *(_QWORD *)&v232 - 1;
  if (v234.u32[0] < 2uLL)
  {
    while (1)
    {
      v240 = v238[1];
      if (v233 == v240)
      {
        if (v238[2] == v233)
          goto LABEL_408;
      }
      else if ((v240 & v239) != v235)
      {
        goto LABEL_433;
      }
      v238 = (_QWORD *)*v238;
      if (!v238)
        goto LABEL_433;
    }
  }
  while (2)
  {
    v241 = v238[1];
    if (v233 != v241)
    {
      if (v241 >= *(_QWORD *)&v232)
        v241 %= *(_QWORD *)&v232;
      if (v241 != v235)
        goto LABEL_433;
      goto LABEL_402;
    }
    if (v238[2] != v233)
    {
LABEL_402:
      v238 = (_QWORD *)*v238;
      if (!v238)
        goto LABEL_433;
      continue;
    }
    break;
  }
LABEL_408:
  if (v234.u32[0] > 1uLL)
  {
    v242 = *(_QWORD *)(v366 + 592);
    if (v233 >= *(_QWORD *)&v232)
      v242 = v233 % *(_QWORD *)&v232;
  }
  else
  {
    v242 = v239 & v233;
  }
  v243 = *(_QWORD **)(v236 + 8 * v242);
  if (!v243 || (v244 = (_QWORD *)*v243) == 0)
LABEL_624:
    abort();
  if (v234.u32[0] < 2uLL)
  {
    while (1)
    {
      v245 = v244[1];
      if (v245 == v233)
      {
        if (v244[2] == v233)
          goto LABEL_420;
      }
      else if ((v245 & v239) != v242)
      {
        goto LABEL_624;
      }
      v244 = (_QWORD *)*v244;
      if (!v244)
        goto LABEL_624;
    }
  }
  while (1)
  {
    v251 = v244[1];
    if (v251 == v233)
      break;
    if (v251 >= *(_QWORD *)&v232)
      v251 %= *(_QWORD *)&v232;
    if (v251 != v242)
      goto LABEL_624;
LABEL_424:
    v244 = (_QWORD *)*v244;
    if (!v244)
      goto LABEL_624;
  }
  if (v244[2] != v233)
    goto LABEL_424;
LABEL_420:
  v247 = (_BYTE *)v244[3];
  v246 = (_BYTE *)v244[4];
  v248 = v246 - v247;
  if (v246 == v247)
  {
    v250 = 0;
    v249 = 0;
    goto LABEL_431;
  }
  if (v248 < 0)
    goto LABEL_624;
  v249 = (char *)operator new(v246 - v247);
  v250 = &v249[8 * (v248 >> 3)];
  memcpy(v249, v247, v248);
LABEL_431:
  std::vector<unsigned long long>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>((char **)(v366 + 328), v231, v249, v250, (v250 - v249) >> 3);
  if (v249)
    operator delete(v249);
LABEL_433:
  md::LayoutContext::frameState((md::LayoutContext *)a2);
  v252 = COERCE_DOUBLE(v380);
  if (*(unsigned __int8 *)(v253 + 128) - 1 > 2)
  {
    v254 = fmax(*(double *)(v62 + 40) * 0.0333333333, 0.0);
    if (v254 <= 1.0)
      v255 = 1.0 - v254;
    else
      v255 = 0.0;
    *(float *)&v255 = v255;
    (*((void (**)(double))VKAnimationCurveEaseIn + 2))(v255);
    v257 = *(double *)(v62 + 3112);
    v258 = *(double *)(v62 + 3120);
    v259 = v256 * 0.305730681 / sqrt(v257 * v257 + v258 * v258);
    *(_OWORD *)&v380[8] = 0u;
    v381 = 0u;
    *(_QWORD *)v380 = 0x3FF0000000000000;
    v382 = 0x3FF0000000000000;
    v383 = 0uLL;
    *(double *)&v384 = v259 * v257;
    *((double *)&v384 + 1) = v259 * v258;
  }
  else
  {
    *(_OWORD *)&v380[8] = 0u;
    v381 = 0u;
    *(_QWORD *)v380 = 0x3FF0000000000000;
    v382 = 0x3FF0000000000000;
    v383 = 0u;
    v384 = 0u;
  }
  v386 = 0u;
  v387 = 0u;
  v385 = 0x3FF0000000000000;
  v388 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>((double *)v373, (double *)(v62 + 808), (double *)v380);
  v260 = *(_OWORD *)&v373[16];
  *(_OWORD *)(v366 + 352) = *(_OWORD *)v373;
  *(_OWORD *)(v366 + 368) = v260;
  v261 = v375;
  *(_OWORD *)(v366 + 384) = v374;
  *(_OWORD *)(v366 + 400) = v261;
  v262 = v377;
  *(_OWORD *)(v366 + 416) = v376;
  *(_OWORD *)(v366 + 432) = v262;
  v263.n128_u64[1] = *((_QWORD *)&v378 + 1);
  v264 = v379;
  *(_OWORD *)(v366 + 448) = v378;
  *(_OWORD *)(v366 + 464) = v264;
  *(float *)(v366 + 500) = *(float *)(v351 + 20) * *(float *)(v351 + 16);
  v265 = *(uint64_t **)(v366 + 480);
  if (v265)
  {
    v266 = *v265;
    if (*v265 != *(_QWORD *)(v366 + 552) && *(_QWORD *)(v366 + 536))
    {
      v252 = *(double *)(v366 + 528);
      if (v252 != 0.0)
      {
        do
        {
          v345 = **(double **)&v252;
          v346 = *(void **)(*(_QWORD *)&v252 + 24);
          if (v346)
          {
            *(_QWORD *)(*(_QWORD *)&v252 + 32) = v346;
            operator delete(v346);
          }
          operator delete(*(void **)&v252);
          v252 = v345;
        }
        while (v345 != 0.0);
      }
      *(_QWORD *)(v366 + 528) = 0;
      v267 = *(_QWORD *)(v366 + 520);
      if (v267)
      {
        for (j = 0; j != v267; ++j)
          *(_QWORD *)(*(_QWORD *)(v366 + 512) + 8 * j) = 0;
      }
      *(_QWORD *)(v366 + 536) = 0;
      v265 = *(uint64_t **)(v366 + 480);
      v266 = *v265;
    }
    *(_QWORD *)(v366 + 552) = v266;
    v269 = (_QWORD *)v265[2];
    v365 = (_QWORD *)v265[3];
    if (v269 != v365)
    {
      v368 = (_QWORD *)(v366 + 528);
      v372 = (uint64_t *)(v366 + 512);
      do
      {
        v270 = v269[3];
        v271 = (int8x8_t)v230[32];
        if (!*(_QWORD *)&v271)
          goto LABEL_470;
        v272 = (uint8x8_t)vcnt_s8(v271);
        v272.i16[0] = vaddlv_u8(v272);
        if (v272.u32[0] > 1uLL)
        {
          v273 = v269[3];
          if (v270 >= *(_QWORD *)&v271)
            v273 = v270 % *(_QWORD *)&v271;
        }
        else
        {
          v273 = (*(_QWORD *)&v271 - 1) & v270;
        }
        v274 = *(_QWORD **)(v230[31] + 8 * v273);
        if (!v274 || (v275 = (_QWORD *)*v274) == 0)
        {
LABEL_470:
          v279 = (unsigned __int16 *)(v269 + 7);
          goto LABEL_471;
        }
        if (v272.u32[0] < 2uLL)
        {
          v276 = *(_QWORD *)&v271 - 1;
          while (1)
          {
            v278 = v275[1];
            if (v270 == v278)
            {
              if (v275[2] == v270)
                goto LABEL_518;
            }
            else if ((v278 & v276) != v273)
            {
              goto LABEL_470;
            }
            v275 = (_QWORD *)*v275;
            if (!v275)
              goto LABEL_470;
          }
        }
        while (1)
        {
          v277 = v275[1];
          if (v270 == v277)
            break;
          if (v277 >= *(_QWORD *)&v271)
            v277 %= *(_QWORD *)&v271;
          if (v277 != v273)
            goto LABEL_470;
LABEL_460:
          v275 = (_QWORD *)*v275;
          if (!v275)
            goto LABEL_470;
        }
        if (v275[2] != v270)
          goto LABEL_460;
LABEL_518:
        v279 = (unsigned __int16 *)(v275 + 3);
LABEL_471:
        v280 = *v279;
        v281 = v269[1];
        if (*v269 != v281)
        {
          v282 = *v269 + 184;
          do
          {
            _ZF = *(unsigned __int16 *)(v282 - 176) == v280 || v282 == v281;
            v282 += 184;
          }
          while (!_ZF);
        }
        v284 = v230[65];
        if (!v284)
          goto LABEL_499;
        v263.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v284);
        v263.n128_u16[0] = vaddlv_u8((uint8x8_t)v263.n128_u64[0]);
        if (v263.n128_u32[0] > 1uLL)
        {
          v252 = *((double *)v269 + 3);
          if (v270 >= v284)
            *(_QWORD *)&v252 = v270 % v284;
        }
        else
        {
          *(_QWORD *)&v252 = (v284 - 1) & v270;
        }
        v285 = *(void ***)(*v372 + 8 * *(_QWORD *)&v252);
        if (!v285 || (v286 = (char *)*v285) == 0)
        {
LABEL_499:
          v286 = (char *)operator new(0x38uLL);
          *(_QWORD *)v373 = v286;
          *(_QWORD *)&v373[8] = v366 + 528;
          *(_QWORD *)v286 = 0;
          *((double *)v286 + 1) = *(double *)&v270;
          *((double *)v286 + 2) = *(double *)&v270;
          v263.n128_u32[1] = 0;
          v263.n128_u64[1] = 0;
          *(_OWORD *)(v286 + 24) = 0u;
          *(_OWORD *)(v286 + 40) = 0u;
          v373[16] = 1;
          v263.n128_f32[0] = (float)(unint64_t)(*(_QWORD *)(v366 + 536) + 1);
          v289 = *(float *)(v366 + 544);
          if (!v284 || (float)(v289 * (float)v284) < v263.n128_f32[0])
          {
            v290 = (v284 & (v284 - 1)) != 0;
            if (v284 < 3)
              v290 = 1;
            v291 = v290 | (2 * v284);
            v263.n128_f32[0] = v263.n128_f32[0] / v289;
            v292 = vcvtps_u32_f32(v263.n128_f32[0]);
            if (v291 <= v292)
              v293 = v292;
            else
              v293 = v291;
            if (v293 == 1)
            {
              v293 = 2;
            }
            else if ((v293 & (v293 - 1)) != 0)
            {
              v293 = std::__next_prime(v293);
              v284 = *(_QWORD *)(v366 + 520);
            }
            if (v293 > v284)
              goto LABEL_511;
            if (v293 < v284)
            {
              v294 = vcvtps_u32_f32((float)*(unint64_t *)(v366 + 536) / *(float *)(v366 + 544));
              if (v284 < 3
                || (v263.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v284),
                    v263.n128_u16[0] = vaddlv_u8((uint8x8_t)v263.n128_u64[0]),
                    v263.n128_u32[0] > 1uLL))
              {
                v294 = std::__next_prime(v294);
              }
              else
              {
                v295 = 1 << -(char)__clz(v294 - 1);
                if (v294 >= 2)
                  v294 = v295;
              }
              if (v293 <= v294)
                v293 = v294;
              if (v293 < v284)
LABEL_511:
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v372, v293);
            }
            v284 = *(_QWORD *)(v366 + 520);
            if ((v284 & (v284 - 1)) != 0)
            {
              if (v270 >= v284)
                *(_QWORD *)&v252 = v270 % v284;
              else
                v252 = *(double *)&v270;
            }
            else
            {
              *(_QWORD *)&v252 = (v284 - 1) & v270;
            }
          }
          v296 = *v372;
          v297 = *(_QWORD **)(*v372 + 8 * *(_QWORD *)&v252);
          if (v297)
          {
            *(_QWORD *)v286 = *v297;
            goto LABEL_536;
          }
          *(_QWORD *)v286 = *v368;
          *v368 = v286;
          *(_QWORD *)(v296 + 8 * *(_QWORD *)&v252) = v368;
          if (*(_QWORD *)v286)
          {
            v298 = *(_QWORD *)(*(_QWORD *)v286 + 8);
            if ((v284 & (v284 - 1)) != 0)
            {
              if (v298 >= v284)
                v298 %= v284;
            }
            else
            {
              v298 &= v284 - 1;
            }
            v297 = (_QWORD *)(*v372 + 8 * v298);
LABEL_536:
            *v297 = v286;
          }
          v230 = (_QWORD *)v366;
          ++*(_QWORD *)(v366 + 536);
          goto LABEL_538;
        }
        if (v263.n128_u32[0] < 2uLL)
        {
          while (1)
          {
            v288 = *((_QWORD *)v286 + 1);
            if (v288 == v270)
            {
              if (*((_QWORD *)v286 + 2) == v270)
                goto LABEL_498;
            }
            else if ((v288 & (v284 - 1)) != *(_QWORD *)&v252)
            {
              goto LABEL_499;
            }
            v286 = *(char **)v286;
            if (!v286)
              goto LABEL_499;
          }
        }
        while (2)
        {
          v287 = *((_QWORD *)v286 + 1);
          if (v287 != v270)
          {
            if (v287 >= v284)
              v287 %= v284;
            if (v287 != *(_QWORD *)&v252)
              goto LABEL_499;
LABEL_488:
            v286 = *(char **)v286;
            if (!v286)
              goto LABEL_499;
            continue;
          }
          break;
        }
        if (*((_QWORD *)v286 + 2) != v270)
          goto LABEL_488;
LABEL_498:
        v230 = (_QWORD *)v366;
LABEL_538:
        v252 = *((double *)v286 + 3);
        if (*(_QWORD *)&v252 != *((_QWORD *)v286 + 4) && *((unsigned __int16 *)v286 + 24) == v280)
          goto LABEL_449;
        *((_WORD *)v286 + 24) = v280;
        *((double *)v286 + 4) = v252;
        v299 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v269[1] - *v269) >> 3);
        if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v286 + 5) - *(_QWORD *)&v252) >> 3) < v299)
        {
          if (v299 > 0x492492492492492)
LABEL_623:
            abort();
          v300 = (char *)operator new(0x42C8590B21642C88 * ((uint64_t)(v269[1] - *v269) >> 3));
          *((_QWORD *)v286 + 3) = v300;
          *((_QWORD *)v286 + 4) = v300;
          *((_QWORD *)v286 + 5) = &v300[56 * v299];
          if (v252 != 0.0)
            operator delete(*(void **)&v252);
        }
        v301 = *(double *)v269;
        v302 = v269[1];
        while (2)
        {
          if (*(_QWORD *)&v301 != v302)
          {
            v304 = *(__int16 *)(*(_QWORD *)&v301 + 8);
            if (v304 <= (__int16)v280)
            {
              v263.n128_f64[0] = (double)(v304 & ~(v304 >> 31));
              v305 = v263.n128_f64[0] * 3.0;
              if (*(_BYTE *)(*(_QWORD *)&v301 + 168))
              {
                v306 = *(_QWORD *)(*(_QWORD *)&v301 + 176);
                v252 = *((double *)v286 + 4);
                v307 = *((_QWORD *)v286 + 5);
                if (*(_QWORD *)&v252 >= v307)
                {
                  v308 = (_QWORD *)*((_QWORD *)v286 + 3);
                  v309 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&v252 - (_QWORD)v308) >> 3) + 1;
                  if (v309 > 0x492492492492492)
                    goto LABEL_623;
                  v310 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v307 - (_QWORD)v308) >> 3);
                  if (2 * v310 > v309)
                    v309 = 2 * v310;
                  if (v310 >= 0x249249249249249)
                    v311 = 0x492492492492492;
                  else
                    v311 = v309;
                  if (v311)
                  {
                    if (v311 > 0x492492492492492)
                      goto LABEL_620;
                    v312 = (char *)operator new(56 * v311);
                  }
                  else
                  {
                    v312 = 0;
                  }
                  v317 = &v312[8 * ((uint64_t)(*(_QWORD *)&v252 - (_QWORD)v308) >> 3)];
                  *(double *)v317 = v305;
                  *((_QWORD *)v317 + 1) = 0x3FF0000000000000;
                  *((double *)v317 + 2) = v305;
                  *((_QWORD *)v317 + 3) = 0;
                  *((_WORD *)v317 + 16) = v304;
                  *((_QWORD *)v317 + 5) = v306;
                  *((_QWORD *)v317 + 6) = 1;
                  v318 = v317;
                  if (*(_QWORD **)&v252 != v308)
                  {
                    do
                    {
                      v263 = *(__n128 *)(*(_QWORD *)&v252 - 56);
                      v319 = *(_OWORD *)(*(_QWORD *)&v252 - 40);
                      v320 = *(_OWORD *)(*(_QWORD *)&v252 - 24);
                      *((_QWORD *)v318 - 1) = *(_QWORD *)(*(_QWORD *)&v252 - 8);
                      *(_OWORD *)(v318 - 24) = v320;
                      *(_OWORD *)(v318 - 40) = v319;
                      *(__n128 *)(v318 - 56) = v263;
                      v318 -= 56;
                      *(_QWORD *)&v252 -= 56;
                    }
                    while (*(_QWORD **)&v252 != v308);
                    goto LABEL_579;
                  }
                  goto LABEL_580;
                }
                **(double **)&v252 = v305;
                *(_QWORD *)(*(_QWORD *)&v252 + 8) = 0x3FF0000000000000;
                *(double *)(*(_QWORD *)&v252 + 16) = v305;
                *(_QWORD *)(*(_QWORD *)&v252 + 24) = 0;
                *(_WORD *)(*(_QWORD *)&v252 + 32) = v304;
                *(_QWORD *)(*(_QWORD *)&v252 + 40) = v306;
                v303 = (_QWORD *)(*(_QWORD *)&v252 + 56);
                *(_QWORD *)(*(_QWORD *)&v252 + 48) = 1;
              }
              else
              {
                v252 = *((double *)v286 + 4);
                v313 = *((_QWORD *)v286 + 5);
                if (*(_QWORD *)&v252 >= v313)
                {
                  v314 = (_QWORD *)*((_QWORD *)v286 + 3);
                  v315 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&v252 - (_QWORD)v314) >> 3) + 1;
                  if (v315 > 0x492492492492492)
                    goto LABEL_623;
                  v316 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v313 - (_QWORD)v314) >> 3);
                  if (2 * v316 > v315)
                    v315 = 2 * v316;
                  if (v316 >= 0x249249249249249)
                    v311 = 0x492492492492492;
                  else
                    v311 = v315;
                  if (v311)
                  {
                    if (v311 > 0x492492492492492)
                      goto LABEL_620;
                    v312 = (char *)operator new(56 * v311);
                  }
                  else
                  {
                    v312 = 0;
                  }
                  v317 = &v312[8 * ((uint64_t)(*(_QWORD *)&v252 - (_QWORD)v314) >> 3)];
                  *(double *)v317 = v305;
                  *((_QWORD *)v317 + 1) = 0x3FF0000000000000;
                  *((double *)v317 + 2) = v305;
                  *((_QWORD *)v317 + 3) = 0;
                  *((_WORD *)v317 + 16) = v304;
                  v317[40] = 0;
                  v317[48] = 0;
                  v318 = v317;
                  if (*(_QWORD **)&v252 != v314)
                  {
                    do
                    {
                      v263 = *(__n128 *)(*(_QWORD *)&v252 - 56);
                      v321 = *(_OWORD *)(*(_QWORD *)&v252 - 40);
                      v322 = *(_OWORD *)(*(_QWORD *)&v252 - 24);
                      *((_QWORD *)v318 - 1) = *(_QWORD *)(*(_QWORD *)&v252 - 8);
                      *(_OWORD *)(v318 - 24) = v322;
                      *(_OWORD *)(v318 - 40) = v321;
                      *(__n128 *)(v318 - 56) = v263;
                      v318 -= 56;
                      *(_QWORD *)&v252 -= 56;
                    }
                    while (*(_QWORD **)&v252 != v314);
LABEL_579:
                    v252 = *((double *)v286 + 3);
                  }
LABEL_580:
                  v303 = v317 + 56;
                  *((_QWORD *)v286 + 3) = v318;
                  *((_QWORD *)v286 + 4) = v317 + 56;
                  *((_QWORD *)v286 + 5) = &v312[56 * v311];
                  if (v252 != 0.0)
                    operator delete(*(void **)&v252);
                }
                else
                {
                  **(double **)&v252 = v305;
                  *(_QWORD *)(*(_QWORD *)&v252 + 8) = 0x3FF0000000000000;
                  *(double *)(*(_QWORD *)&v252 + 16) = v305;
                  *(_QWORD *)(*(_QWORD *)&v252 + 24) = 0;
                  *(_WORD *)(*(_QWORD *)&v252 + 32) = v304;
                  *(_BYTE *)(*(_QWORD *)&v252 + 40) = 0;
                  v303 = (_QWORD *)(*(_QWORD *)&v252 + 56);
                  *(_BYTE *)(*(_QWORD *)&v252 + 48) = 0;
                }
              }
              *((_QWORD *)v286 + 4) = v303;
            }
            *(_QWORD *)&v301 += 184;
            continue;
          }
          break;
        }
        v323 = *((_QWORD *)v286 + 3);
        v324 = *((_QWORD *)v286 + 4);
        v325 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v324 - v323) >> 3));
        if (v324 == v323)
          v326 = 0;
        else
          v326 = v325;
        v263 = std::__introsort<std::_ClassicAlgPolicy,md::VenueLogic::updateVenueLevelScales(void)::$_0 &,md::VenueLevelScale *,false>(v323, v324, v326, 1, v263);
        v328 = *((_QWORD *)v286 + 3);
        v327 = *((_QWORD *)v286 + 4);
        if (v327 != v328)
        {
          v329 = (unint64_t)((uint64_t)(v327 - v328) / 56) <= 1 ? 1 : (uint64_t)(v327 - v328) / 56;
          *(_QWORD *)(v328 + 8) = 0x3FF0000000000000;
          if ((unint64_t)((uint64_t)(v327 - v328) / 56) >= 2)
          {
            v330 = v329 - 1;
            v331 = (double *)(v328 + 56);
            v332 = 60.0;
            do
            {
              v333 = v332 * 0.0333333333;
              if (v332 * 0.0333333333 > 1.0)
                v333 = 1.0;
              if (v332 <= 0.0)
                v333 = 0.0;
              if ((__int16)v280 < 11)
                v333 = 1.0;
              v331[1] = v333;
              v334 = (*(v331 - 7) - *v331) * v333;
              v331[3] = v334;
              v332 = v332 - v334;
              v331 += 7;
              --v330;
            }
            while (v330);
          }
        }
        v230 = (_QWORD *)v366;
        if (v328 != v327)
        {
          v335 = v327 - 56;
          if (v327 - 56 > v328)
          {
            v336 = v328 + 56;
            do
            {
              v337 = *(_QWORD *)(v336 - 8);
              v263 = *(__n128 *)(v336 - 24);
              v338 = *(_OWORD *)(v336 - 40);
              v339 = *(_OWORD *)(v336 - 56);
              v341 = *(_OWORD *)(v335 + 16);
              v340 = *(_OWORD *)(v335 + 32);
              v342 = *(_QWORD *)(v335 + 48);
              *(_OWORD *)(v336 - 56) = *(_OWORD *)v335;
              *(_QWORD *)(v336 - 8) = v342;
              *(_OWORD *)(v336 - 24) = v340;
              *(_OWORD *)(v336 - 40) = v341;
              *(_OWORD *)v335 = v339;
              *(_OWORD *)(v335 + 16) = v338;
              *(__n128 *)(v335 + 32) = v263;
              *(_QWORD *)(v335 + 48) = v337;
              v335 -= 56;
              _CF = v336 >= v335;
              v336 += 56;
            }
            while (!_CF);
            v327 = *((_QWORD *)v286 + 4);
          }
        }
        v343 = *((_QWORD *)v286 + 3);
        if (v343 != v327)
        {
          v344 = 0.0;
          do
          {
            if (*(__int16 *)(v343 + 32) >= 1)
              *(double *)(v343 + 16) = v344;
            v344 = *(double *)(v343 + 24) + v344;
            v343 += 56;
          }
          while (v343 != v327);
        }
LABEL_449:
        v269 += 15;
      }
      while (v269 != v365);
    }
  }
  md::VenueLogicContext::operator=(v350, v363);
  if (!v396)
    goto LABEL_627;
  (*(void (**)(_QWORD *))(*v396 + 48))(v396);
  v347 = v396;
  if (v396 == v395)
  {
    v348 = 4;
    v347 = v395;
LABEL_618:
    (*(void (**)(void))(*v347 + 8 * v348))();
  }
  else if (v396)
  {
    v348 = 5;
    goto LABEL_618;
  }
}

void sub_19F8EF33C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  if (v1)
    operator delete(v1);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v2 - 184));
  _Unwind_Resume(a1);
}

void md::Logic<md::VenueLogic,md::VenueLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void _ZNSt3__110__function6__funcIZN2md10VenueLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17VenueLogicContextEE3__0NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "VenueLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

double md::VenueLogicContext::venuesInProximityToWorldPoint(uint64_t *a1, uint64_t a2, float64x2_t *a3, __n128 a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  char v12;
  char v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  double *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD **)(a2 + 16);
  if (v4)
  {
    v6 = a2;
    v7 = a1;
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v4[3];
      v11 = sqrt(geo::ConvexHull2<double>::distanceSquaredTo(*(float64x2_t **)(v10 + 64), *(float64x2_t **)(v10 + 72), a3));
      a4.n128_u64[0] = 0x3ED0000000000000;
      if (v11 < 0.00000381469727)
      {
        v12 = geo::containsPoint<double>(*(_QWORD *)(v10 + 40), *(_QWORD *)(v10 + 48), a3->f64[0], a3->f64[1]);
        v13 = v12;
        v14 = v10 == *(_QWORD *)(v6 + 272);
        v15 = v7[2];
        if (v8 < v15)
        {
          *(_QWORD *)v8 = v10;
          *(_BYTE *)(v8 + 8) = v12;
          *(_BYTE *)(v8 + 9) = v14;
          *(double *)(v8 + 16) = v11;
          v8 += 24;
        }
        else
        {
          v16 = v6;
          v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)v9) >> 3) + 1;
          if (v17 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v9) >> 3);
          if (2 * v18 > v17)
            v17 = 2 * v18;
          if (v18 >= 0x555555555555555)
            v19 = 0xAAAAAAAAAAAAAAALL;
          else
            v19 = v17;
          if (v19 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v20 = (char *)operator new(24 * v19);
          v21 = (double *)&v20[8 * ((uint64_t)(v8 - (_QWORD)v9) >> 3)];
          *(_QWORD *)v21 = v10;
          *((_BYTE *)v21 + 8) = v13;
          *((_BYTE *)v21 + 9) = v14;
          v21[2] = v11;
          if ((char *)v8 == v9)
          {
            v23 = &v20[8 * ((uint64_t)(v8 - (_QWORD)v9) >> 3)];
          }
          else
          {
            v22 = &v20[8 * ((uint64_t)(v8 - (_QWORD)v9) >> 3)];
            do
            {
              a4 = *(__n128 *)(v8 - 24);
              v23 = v22 - 24;
              *((_QWORD *)v22 - 1) = *(_QWORD *)(v8 - 8);
              *(__n128 *)(v22 - 24) = a4;
              v8 -= 24;
              v22 -= 24;
            }
            while ((char *)v8 != v9);
          }
          v24 = &v20[24 * v19];
          v8 = (unint64_t)(v21 + 3);
          v7 = a1;
          *a1 = (uint64_t)v23;
          a1[1] = (uint64_t)(v21 + 3);
          a1[2] = (uint64_t)v24;
          if (v9)
            operator delete(v9);
          v9 = v23;
          v6 = v16;
        }
        v7[1] = v8;
      }
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    v25 = *v7;
  }
  else
  {
    v8 = 0;
    v25 = 0;
  }
  v26 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v25) >> 3));
  if (v8 == v25)
    v27 = 0;
  else
    v27 = v26;
  return std::__introsort<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *,false>(v25, v8, v27, 1, a4.n128_f64[0]);
}

void sub_19F8EF864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v11;

  v11 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

double geo::ConvexHull2<double>::distanceSquaredTo(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3)
{
  uint64_t v3;
  float64x2_t v4;
  double result;
  uint64_t v6;
  double v7;
  double v8;
  char v9;
  double *v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  double *f64;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;

  v3 = a2 - a1;
  if (!v3)
    return INFINITY;
  if (v3 == 1)
  {
    v4 = vsubq_f64(*a3, *a1);
    return vaddvq_f64(vmulq_f64(v4, v4));
  }
  if (a2 == a1)
    return 0.0;
  v6 = 0;
  v7 = a3->f64[0];
  v8 = a3->f64[1];
  v9 = 1;
  result = 1.79769313e308;
LABEL_8:
  v10 = &a1[v6].f64[1];
  v11 = v6;
  do
  {
    v13 = *(v10 - 1);
    v12 = *v10;
    v6 = v11 + 1;
    if (v3 - 1 == v11)
      v14 = 0;
    else
      v14 = v11 + 1;
    f64 = a1[v14].f64;
    v16 = f64[1];
    v17 = *f64 - v13;
    v18 = v16 - v12;
    if (-((v7 - v13) * (v16 - v12) - (v8 - v12) * v17) < 0.0)
    {
      v19 = ((v7 - v13) * v17 + (v8 - v12) * v18) / (v17 * v17 + v18 * v18);
      if (v19 >= 0.0)
      {
        if (v19 > 1.0)
        {
          v22 = (*f64 - v7) * (*f64 - v7) + (v16 - v8) * (v16 - v8);
          goto LABEL_21;
        }
        v20 = v13 - v7 + v19 * v17;
        v21 = v12 - v8 + v19 * v18;
      }
      else
      {
        v20 = v13 - v7;
        v21 = v12 - v8;
      }
      v22 = v20 * v20 + v21 * v21;
LABEL_21:
      v9 = 0;
      result = fmin(result, v22);
      if (v6 != v3)
        goto LABEL_8;
      return result;
    }
    v10 += 2;
    v11 = v6;
  }
  while (v3 != v6);
  if ((v9 & 1) == 0)
    return result;
  return 0.0;
}

void std::vector<unsigned long long>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(char **a1, _BYTE *a2, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5;
  char *v7;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  uint64_t *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  _OWORD *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  __int128 *v59;
  _OWORD *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  size_t v65;
  unint64_t v67;

  v5 = a5 - 1;
  if (a5 < 1)
    return;
  v7 = __src;
  v9 = a1;
  v11 = (unint64_t)*a1;
  v10 = (unint64_t)a1[1];
  v12 = a2 - *a1;
  v13 = v12 >> 3;
  v14 = &(*a1)[v12 & 0xFFFFFFFFFFFFFFF8];
  v15 = a1[2];
  if (a5 > (uint64_t)&v15[-v10] >> 3)
  {
    v16 = a5 + ((uint64_t)(v10 - v11) >> 3);
    if (v16 >> 61)
      abort();
    v17 = (uint64_t)&v15[-v11];
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = (unint64_t)&(*a1)[v12 & 0xFFFFFFFFFFFFFFF8];
      v20 = v18;
      v21 = operator new(8 * v18);
      v18 = v20;
      v14 = (char *)v19;
      v13 = v12 >> 3;
      v9 = a1;
    }
    else
    {
      v21 = 0;
    }
    v46 = &v21[8 * v13];
    v47 = &v46[8 * a5];
    v48 = v46;
    if ((v5 & 0x1FFFFFFFFFFFFFFFuLL) >= 7)
    {
      v48 = &v21[8 * v13];
      if ((unint64_t)(&v21[v12 & 0xFFFFFFFFFFFFFFF8] - v7) >= 0x20)
      {
        v49 = (v5 & 0x1FFFFFFFFFFFFFFFLL) + 1;
        v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
        v48 = &v46[v50];
        v51 = (__int128 *)(v7 + 16);
        v52 = &v21[8 * v13 + 16];
        v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v54 = *v51;
          *(v52 - 1) = *(v51 - 1);
          *v52 = v54;
          v51 += 2;
          v52 += 2;
          v53 -= 4;
        }
        while (v53);
        if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_42:
          if ((_BYTE *)v11 != a2)
          {
            if ((unint64_t)(v12 - 8) >= 0x68)
            {
              v56 = v14;
              if ((v12 & 0xFFFFFFFFFFFFFFF8) + v11 - (unint64_t)&v21[v12 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
              {
                v57 = ((unint64_t)(v12 - 8) >> 3) + 1;
                v56 = &v14[-8 * (v57 & 0x3FFFFFFFFFFFFFFCLL)];
                v58 = 8 * v13 - 16;
                v59 = (__int128 *)(v11 + v58);
                v60 = &v21[v58];
                v61 = v57 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v62 = *v59;
                  *(v60 - 1) = *(v59 - 1);
                  *v60 = v62;
                  v59 -= 2;
                  v60 -= 2;
                  v61 -= 4;
                }
                while (v61);
                v46 -= 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
                if (v57 == (v57 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_50;
              }
            }
            else
            {
              v56 = v14;
            }
            do
            {
              v63 = *((_QWORD *)v56 - 1);
              v56 -= 8;
              *((_QWORD *)v46 - 1) = v63;
              v46 -= 8;
            }
            while (v56 != (char *)v11);
          }
LABEL_50:
          v64 = &v21[8 * v18];
          v65 = v10 - (_QWORD)v14;
          if (v65)
            memmove(v47, v14, v65);
          *v9 = v46;
          v9[1] = &v47[v65];
          v9[2] = v64;
          if (v11)
            operator delete((void *)v11);
          return;
        }
        v7 += v50;
      }
    }
    do
    {
      v55 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v48 = v55;
      v48 += 8;
    }
    while (v48 != v47);
    goto LABEL_42;
  }
  v22 = v10 - (_QWORD)v14;
  v23 = (uint64_t)(v10 - (_QWORD)v14) >> 3;
  if (v23 >= a5)
  {
    v24 = &__src[8 * a5];
    v26 = (unint64_t)a1[1];
LABEL_18:
    v27 = &v14[8 * a5];
    v28 = v26 - (_QWORD)v27;
    v29 = (uint64_t)(v26 - (_QWORD)v27) >> 3;
    v30 = (uint64_t *)(v26 - 8 * a5);
    v31 = (char *)v26;
    if ((unint64_t)v30 < v10)
    {
      v32 = (v12 & 0xFFFFFFFFFFFFFFF8) + v28;
      v33 = (char *)(v32 + v11);
      v34 = v32 + v11 + 8;
      if (v10 > v34)
        v34 = v10;
      v35 = v34 + ~v11 - v32;
      v36 = v26 - (_QWORD)v33;
      v37 = v35 >= 0x58 && v36 > 0x1F;
      v31 = (char *)v26;
      if (!v37)
        goto LABEL_59;
      v38 = (v35 >> 3) + 1;
      v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      v30 = (uint64_t *)((char *)v30 + v39);
      v40 = (_OWORD *)(v26 + 16);
      v41 = (__int128 *)(8 * v29 + 8 * v13 + v11 + 16);
      v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v43 = *v41;
        *(v40 - 1) = *(v41 - 1);
        *v40 = v43;
        v40 += 2;
        v41 += 2;
        v42 -= 4;
      }
      while (v42);
      v31 = (char *)(v26 + v39);
      if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_59:
        do
        {
          v44 = *v30++;
          *(_QWORD *)v31 = v44;
          v31 += 8;
        }
        while ((unint64_t)v30 < v10);
      }
    }
    v9[1] = v31;
    if ((char *)v26 != v27)
    {
      v45 = v14;
      memmove((void *)(v26 - 8 * v29), v14, v28);
      v14 = v45;
    }
    if (v24 != v7)
      memmove(v14, v7, v24 - v7);
    return;
  }
  v24 = &__src[8 * v23];
  v25 = a4 - v24;
  if (a4 != v24)
  {
    v67 = (unint64_t)&(*a1)[v12 & 0xFFFFFFFFFFFFFFF8];
    memmove(a1[1], &__src[8 * v23], a4 - v24);
    v13 = v12 >> 3;
    v14 = (char *)v67;
  }
  v26 = v10 + v25;
  v9[1] = (char *)(v10 + v25);
  if (v22 >= 1)
    goto LABEL_18;
}

uint64_t md::VenueLogicContext::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t j;
  uint64_t *v17;
  uint64_t *v18;
  _OWORD *v19;
  uint64_t *v20;
  char *v21;
  _BYTE *v22;
  char *v23;
  size_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char **v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  char *v47;
  void *v48;
  char *v49;
  __int128 v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t k;
  uint64_t *v54;
  size_t v55;
  uint64_t *v56;
  char *v57;
  _BYTE *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  void **v67;
  _BYTE *v68;
  unint64_t v69;
  char *v70;
  void *v71;
  uint64_t *v72;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  int64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v83;
  size_t __n;

  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v4 = *(_QWORD **)(a2 + 16);
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
      goto LABEL_6;
    for (i = 0; i != v5; ++i)
      *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    v7 = *(_QWORD **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    if (v7)
    {
      while (v4)
      {
        v34 = v4[3];
        v7[2] = v4[2];
        v35 = v4[4];
        if (v35)
        {
          v36 = (unint64_t *)(v35 + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        v38 = (std::__shared_weak_count *)v7[4];
        v7[3] = v34;
        v7[4] = v35;
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v33 = (_QWORD *)*v7;
        std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__node_insert_multi(a1, v7);
        v4 = (_QWORD *)*v4;
        v7 = v33;
        if (!v33)
          goto LABEL_6;
      }
      do
      {
        v41 = v7;
        v7 = (_QWORD *)*v7;
        v42 = (std::__shared_weak_count *)v41[4];
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        operator delete(v41);
      }
      while (v7);
    }
    else
    {
LABEL_6:
      while (v4)
      {
        v8 = operator new(0x28uLL);
        *v8 = 0;
        v8[1] = 0;
        v9 = v4[2];
        v10 = v4[3];
        v8[2] = v9;
        v8[3] = v10;
        v11 = v4[4];
        v8[4] = v11;
        if (v11)
        {
          v12 = (unint64_t *)(v11 + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        v8[1] = v9;
        std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__node_insert_multi(a1, v8);
        v4 = (_QWORD *)*v4;
      }
    }
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    v14 = *(uint64_t **)(a2 + 56);
    v15 = *(_QWORD *)(a1 + 48);
    if (!v15)
      goto LABEL_17;
    for (j = 0; j != v15; ++j)
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * j) = 0;
    v17 = *(uint64_t **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    if (v17)
    {
      while (v14)
      {
        v17[2] = v14[2];
        *((_WORD *)v17 + 12) = *((_WORD *)v14 + 12);
        v18 = (uint64_t *)*v17;
        std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__node_insert_multi(a1 + 40, v17);
        v14 = (uint64_t *)*v14;
        v17 = v18;
        if (!v18)
          goto LABEL_17;
      }
      do
      {
        v20 = (uint64_t *)*v17;
        operator delete(v17);
        v17 = v20;
      }
      while (v20);
    }
    else
    {
LABEL_17:
      while (v14)
      {
        v19 = operator new(0x20uLL);
        *(_QWORD *)v19 = 0;
        v19[1] = *((_OWORD *)v14 + 1);
        *((_QWORD *)v19 + 1) = *((_QWORD *)v19 + 2);
        std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__node_insert_multi(a1 + 40, v19);
        v14 = (uint64_t *)*v14;
      }
    }
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>((_QWORD *)(a1 + 80), *(_QWORD **)(a2 + 96));
    v21 = *(char **)(a1 + 120);
    v23 = *(char **)(a2 + 120);
    v22 = *(_BYTE **)(a2 + 128);
    v24 = v22 - v23;
    v25 = (v22 - v23) >> 3;
    v26 = *(_QWORD *)(a1 + 136);
    if (v25 > (v26 - (uint64_t)v21) >> 3)
    {
      if (v21)
      {
        *(_QWORD *)(a1 + 128) = v21;
        operator delete(v21);
        v26 = 0;
        *(_QWORD *)(a1 + 120) = 0;
        *(_QWORD *)(a1 + 128) = 0;
        *(_QWORD *)(a1 + 136) = 0;
      }
      if ((v24 & 0x8000000000000000) != 0)
        goto LABEL_100;
      v27 = v26 >> 2;
      if (v26 >> 2 <= v25)
        v27 = (v22 - v23) >> 3;
      v28 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8;
      v29 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v28)
        v29 = v27;
      if (v29 >> 61)
LABEL_100:
        abort();
      v30 = 8 * v29;
      v31 = (char *)operator new(8 * v29);
      v21 = v31;
      *(_QWORD *)(a1 + 128) = v31;
      v32 = (char **)(a1 + 128);
      *(_QWORD *)(a1 + 120) = v31;
      *(_QWORD *)(a1 + 136) = &v31[v30];
      if (v22 != v23)
        memcpy(v31, v23, v22 - v23);
      goto LABEL_56;
    }
    v32 = (char **)(a1 + 128);
    v45 = *(_BYTE **)(a1 + 128);
    v46 = (v45 - v21) >> 3;
    if (v46 >= v25)
    {
      if (v22 == v23)
      {
LABEL_56:
        *v32 = &v21[v24];
        goto LABEL_57;
      }
      v48 = *(void **)(a1 + 120);
      v49 = *(char **)(a2 + 120);
    }
    else
    {
      v47 = &v23[8 * v46];
      if (v45 != v21)
      {
        memmove(*(void **)(a1 + 120), *(const void **)(a2 + 120), v45 - v21);
        v21 = *v32;
      }
      v24 = v22 - v47;
      if (v22 == v47)
        goto LABEL_56;
      v48 = v21;
      v49 = v47;
    }
    memmove(v48, v49, v24);
    goto LABEL_56;
  }
LABEL_57:
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  v50 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 281) = *(_OWORD *)(a2 + 281);
  *(_OWORD *)(a1 + 272) = v50;
  v83 = a2;
  if (a1 == a2)
    goto LABEL_98;
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 336);
  v51 = *(uint64_t **)(a2 + 320);
  v52 = *(_QWORD *)(a1 + 312);
  if (!v52)
    goto LABEL_93;
  for (k = 0; k != v52; ++k)
    *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * k) = 0;
  v54 = *(uint64_t **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  if (!v54)
  {
LABEL_93:
    while (v51)
    {
      v74 = operator new(0x38uLL);
      *v74 = 0;
      v74[1] = 0;
      v75 = v51[2];
      v74[3] = 0;
      v74[2] = v75;
      v74[4] = 0;
      v74[5] = 0;
      v77 = (_BYTE *)v51[3];
      v76 = (_BYTE *)v51[4];
      v78 = v76 - v77;
      if (v76 != v77)
      {
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v78 >> 3)) > 0x492492492492492)
          abort();
        v79 = (char *)operator new(v78);
        v74[3] = v79;
        v74[4] = v79;
        v80 = &v79[8 * (v78 >> 3)];
        v74[5] = v80;
        memcpy(v79, v77, v78);
        v74[4] = v80;
      }
      *((_WORD *)v74 + 24) = *((_WORD *)v51 + 24);
      v74[1] = v75;
      std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__node_insert_multi(a1 + 304, v74);
      v51 = (uint64_t *)*v51;
    }
    goto LABEL_98;
  }
  while (v51)
  {
    v54[2] = v51[2];
    if (v54 == v51)
      goto LABEL_65;
    v57 = (char *)v54[3];
    v59 = (char *)v51[3];
    v58 = (_BYTE *)v51[4];
    __n = v58 - v59;
    v60 = 0x6DB6DB6DB6DB6DB7 * ((v58 - v59) >> 3);
    v61 = v54[5];
    if (0x6DB6DB6DB6DB6DB7 * ((v61 - (uint64_t)v57) >> 3) < v60)
    {
      if (v57)
      {
        v54[4] = (uint64_t)v57;
        operator delete(v57);
        v61 = 0;
        v54[3] = 0;
        v54[4] = 0;
        v54[5] = 0;
      }
      if (v60 > 0x492492492492492)
        goto LABEL_100;
      v62 = 0x6DB6DB6DB6DB6DB7 * (v61 >> 3);
      v63 = 2 * v62;
      if (2 * v62 <= v60)
        v63 = 0x6DB6DB6DB6DB6DB7 * ((v58 - v59) >> 3);
      v64 = v62 >= 0x249249249249249 ? 0x492492492492492 : v63;
      if (v64 > 0x492492492492492)
        goto LABEL_100;
      v65 = 56 * v64;
      v66 = (char *)operator new(56 * v64);
      v57 = v66;
      v54[4] = (uint64_t)v66;
      v67 = (void **)(v54 + 4);
      v54[3] = (uint64_t)v66;
      v54[5] = (uint64_t)&v66[v65];
      if (v58 == v59)
      {
        v55 = v58 - v59;
      }
      else
      {
        v55 = v58 - v59;
        memcpy(v66, v59, __n);
      }
      goto LABEL_64;
    }
    v67 = (void **)(v54 + 4);
    v68 = (_BYTE *)v54[4];
    v69 = 0x6DB6DB6DB6DB6DB7 * ((v68 - v57) >> 3);
    if (v69 < v60)
    {
      if (v68 != v57)
      {
        memmove(v57, v59, v68 - v57);
        v57 = (char *)*v67;
      }
      v70 = &v59[56 * v69];
      v55 = v58 - v70;
      if (!v55)
        goto LABEL_64;
      v71 = v57;
      goto LABEL_87;
    }
    if (v58 != v59)
    {
      v71 = (void *)v54[3];
      v70 = (char *)v51[3];
      v55 = v58 - v59;
LABEL_87:
      memmove(v71, v70, v55);
      goto LABEL_64;
    }
    v55 = v58 - v59;
LABEL_64:
    *v67 = &v57[v55];
LABEL_65:
    *((_WORD *)v54 + 24) = *((_WORD *)v51 + 24);
    v56 = (uint64_t *)*v54;
    std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__node_insert_multi(a1 + 304, v54);
    v51 = (uint64_t *)*v51;
    v54 = v56;
    if (!v56)
      goto LABEL_93;
  }
  do
  {
    v72 = (uint64_t *)*v54;
    v73 = (void *)v54[3];
    if (v73)
    {
      v54[4] = (uint64_t)v73;
      operator delete(v73);
    }
    operator delete(v54);
    v54 = v72;
  }
  while (v72);
LABEL_98:
  v81 = *(_QWORD *)(v83 + 344);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(v83 + 352);
  *(_QWORD *)(a1 + 344) = v81;
  return a1;
}

void sub_19F8F04BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,md::VenueLogic::updateVenueLevelScales(void)::$_0 &,md::VenueLevelScale *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  __n128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  __n128 v23;
  __int128 v24;
  __int128 v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __n128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __n128 v41;
  __int128 v42;
  __int128 v43;
  __int128 *v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __n128 v68;
  __int128 v69;
  __int128 v70;
  int v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 *v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  int v111;
  int v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  BOOL v125;
  unint64_t v126;
  unint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  int v134;
  int v135;
  __int128 *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  BOOL v140;
  __n128 v141;
  int v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  int v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  int v153;
  int v154;
  __int128 *v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __n128 *v159;
  int v160;
  int v161;
  __n128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __n128 *v166;
  __n128 *v167;
  __n128 *v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  __int128 v175;
  __n128 v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  __n128 v180;
  __int128 v181;
  __int128 v182;
  char *v183;
  BOOL v185;
  uint64_t v186;
  _OWORD *v187;
  uint64_t v188;
  _OWORD *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  __int128 v193;
  int64_t v194;
  int64_t v195;
  uint64_t v196;
  unint64_t v197;
  int v198;
  int v199;
  unint64_t v200;
  int v201;
  unint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int v209;
  int64_t v210;
  uint64_t v211;
  unint64_t v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  int v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  int v238;
  __int128 v239;
  int v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;
  __int128 v245;
  __int128 v246;
  _BYTE v247[22];
  _BYTE v248[22];
  _BYTE v249[22];
  __int128 v250;
  __int128 v251;
  _BYTE v252[22];
  _BYTE v253[22];
  __int128 v254;
  _BYTE v255[22];
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __n128 v277;
  __n128 v278;
  __int128 v279;
  __int128 v280;
  __n128 v281;
  __n128 v282;
  __int128 v283;
  __n128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogic::updateVenueLevelScales(void)::$_0 &,md::VenueLevelScale *>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __n128 result)
{
  int v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v5 = *((__int16 *)a2 + 16);
  v6 = *((__int16 *)a3 + 16);
  if (v5 <= *((__int16 *)a1 + 16))
  {
    if (v6 > v5)
    {
      v13 = *((_QWORD *)a2 + 6);
      v14 = a2[1];
      result = (__n128)a2[2];
      v15 = *a2;
      v17 = a3[1];
      v16 = a3[2];
      v18 = *a3;
      *((_QWORD *)a2 + 6) = *((_QWORD *)a3 + 6);
      a2[1] = v17;
      a2[2] = v16;
      *a2 = v18;
      *a3 = v15;
      a3[1] = v14;
      a3[2] = (__int128)result;
      *((_QWORD *)a3 + 6) = v13;
      if (*((__int16 *)a2 + 16) > *((__int16 *)a1 + 16))
      {
        v19 = *((_QWORD *)a1 + 6);
        v20 = a1[1];
        result = (__n128)a1[2];
        v21 = *a1;
        v23 = a2[1];
        v22 = a2[2];
        v24 = *a2;
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        a1[1] = v23;
        a1[2] = v22;
        *a1 = v24;
        *a2 = v21;
        a2[1] = v20;
        a2[2] = (__int128)result;
        *((_QWORD *)a2 + 6) = v19;
      }
    }
  }
  else
  {
    if (v6 > v5)
    {
      v7 = *((_QWORD *)a1 + 6);
      v8 = a1[1];
      result = (__n128)a1[2];
      v9 = *a1;
      v11 = a3[1];
      v10 = a3[2];
      v12 = *a3;
      *((_QWORD *)a1 + 6) = *((_QWORD *)a3 + 6);
      a1[1] = v11;
      a1[2] = v10;
      *a1 = v12;
LABEL_9:
      *a3 = v9;
      a3[1] = v8;
      a3[2] = (__int128)result;
      *((_QWORD *)a3 + 6) = v7;
      goto LABEL_10;
    }
    v25 = *((_QWORD *)a1 + 6);
    v26 = a1[1];
    result = (__n128)a1[2];
    v27 = *a1;
    v29 = a2[1];
    v28 = a2[2];
    v30 = *a2;
    *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
    a1[1] = v29;
    a1[2] = v28;
    *a1 = v30;
    *a2 = v27;
    a2[1] = v26;
    a2[2] = (__int128)result;
    *((_QWORD *)a2 + 6) = v25;
    if (*((__int16 *)a3 + 16) > *((__int16 *)a2 + 16))
    {
      v7 = *((_QWORD *)a2 + 6);
      v8 = a2[1];
      result = (__n128)a2[2];
      v9 = *a2;
      v32 = a3[1];
      v31 = a3[2];
      v33 = *a3;
      *((_QWORD *)a2 + 6) = *((_QWORD *)a3 + 6);
      a2[1] = v32;
      a2[2] = v31;
      *a2 = v33;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*((__int16 *)a4 + 16) > *((__int16 *)a3 + 16))
  {
    v34 = *((_QWORD *)a3 + 6);
    v35 = a3[1];
    result = (__n128)a3[2];
    v36 = *a3;
    v38 = a4[1];
    v37 = a4[2];
    v39 = *a4;
    *((_QWORD *)a3 + 6) = *((_QWORD *)a4 + 6);
    a3[1] = v38;
    a3[2] = v37;
    *a3 = v39;
    *a4 = v36;
    a4[1] = v35;
    a4[2] = (__int128)result;
    *((_QWORD *)a4 + 6) = v34;
    if (*((__int16 *)a3 + 16) > *((__int16 *)a2 + 16))
    {
      v40 = *((_QWORD *)a2 + 6);
      v41 = a2[1];
      result = (__n128)a2[2];
      v42 = *a2;
      v44 = a3[1];
      v43 = a3[2];
      v45 = *a3;
      *((_QWORD *)a2 + 6) = *((_QWORD *)a3 + 6);
      a2[1] = v44;
      a2[2] = v43;
      *a2 = v45;
      *a3 = v42;
      a3[1] = v41;
      a3[2] = (__int128)result;
      *((_QWORD *)a3 + 6) = v40;
      if (*((__int16 *)a2 + 16) > *((__int16 *)a1 + 16))
      {
        v46 = *((_QWORD *)a1 + 6);
        v47 = a1[1];
        result = (__n128)a1[2];
        v48 = *a1;
        v50 = a2[1];
        v49 = a2[2];
        v51 = *a2;
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        a1[1] = v50;
        a1[2] = v49;
        *a1 = v51;
        *a2 = v48;
        a2[1] = v47;
        a2[2] = (__int128)result;
        *((_QWORD *)a2 + 6) = v46;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogic::updateVenueLevelScales(void)::$_0 &,md::VenueLevelScale *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 *v14;
  __int128 *v15;
  int v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 *v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  _BYTE v112[22];
  __int128 v113;
  __int128 v114;

  v5 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(__int16 *)(a2 - 24) > *(__int16 *)(a1 + 32))
      {
        v7 = *(_QWORD *)(a1 + 48);
        v9 = *(_OWORD *)(a1 + 16);
        v8 = *(_OWORD *)(a1 + 32);
        v10 = *(_OWORD *)a1;
        v11 = *(_OWORD *)(a2 - 40);
        v12 = *(_OWORD *)(a2 - 24);
        v13 = *(_OWORD *)(a2 - 56);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 16) = v11;
        *(_OWORD *)(a1 + 32) = v12;
        *(_OWORD *)a1 = v13;
        *(_OWORD *)(a2 - 56) = v10;
        *(_OWORD *)(a2 - 40) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      v14 = (__int128 *)(a1 + 56);
      v15 = (__int128 *)(a2 - 56);
      v16 = *(__int16 *)(a1 + 88);
      v17 = *(__int16 *)(a2 - 24);
      if (v16 <= *(__int16 *)(a1 + 32))
      {
        if (v17 > v16)
        {
          v60 = *(_QWORD *)(a1 + 104);
          v62 = *(_OWORD *)(a1 + 72);
          v61 = *(_OWORD *)(a1 + 88);
          v63 = *v14;
          v65 = *(_OWORD *)(a2 - 40);
          v64 = *(_OWORD *)(a2 - 24);
          v66 = *v15;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(a1 + 72) = v65;
          *(_OWORD *)(a1 + 88) = v64;
          *v14 = v66;
          *v15 = v63;
          *(_OWORD *)(a2 - 40) = v62;
          *(_OWORD *)(a2 - 24) = v61;
          *(_QWORD *)(a2 - 8) = v60;
          if (*(__int16 *)(a1 + 88) > *(__int16 *)(a1 + 32))
          {
            v67 = *(_QWORD *)(a1 + 48);
            v69 = *(_OWORD *)(a1 + 16);
            v68 = *(_OWORD *)(a1 + 32);
            v70 = *(_OWORD *)a1;
            v71 = *(_OWORD *)(a1 + 72);
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v71;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
            *v14 = v70;
            *(_OWORD *)(a1 + 72) = v69;
            *(_OWORD *)(a1 + 88) = v68;
            *(_QWORD *)(a1 + 104) = v67;
          }
        }
      }
      else if (v17 <= v16)
      {
        v82 = *(_QWORD *)(a1 + 48);
        v84 = *(_OWORD *)(a1 + 16);
        v83 = *(_OWORD *)(a1 + 32);
        v85 = *(_OWORD *)a1;
        v86 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)a1 = *v14;
        *(_OWORD *)(a1 + 16) = v86;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
        *v14 = v85;
        *(_OWORD *)(a1 + 72) = v84;
        *(_OWORD *)(a1 + 88) = v83;
        *(_QWORD *)(a1 + 104) = v82;
        if (*(__int16 *)(a2 - 24) > *(__int16 *)(a1 + 88))
        {
          v87 = *(_QWORD *)(a1 + 104);
          v89 = *(_OWORD *)(a1 + 72);
          v88 = *(_OWORD *)(a1 + 88);
          v90 = *v14;
          v92 = *(_OWORD *)(a2 - 40);
          v91 = *(_OWORD *)(a2 - 24);
          v93 = *v15;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(a1 + 72) = v92;
          *(_OWORD *)(a1 + 88) = v91;
          *v14 = v93;
          *v15 = v90;
          *(_OWORD *)(a2 - 40) = v89;
          *(_OWORD *)(a2 - 24) = v88;
          *(_QWORD *)(a2 - 8) = v87;
        }
      }
      else
      {
        v18 = *(_QWORD *)(a1 + 48);
        v20 = *(_OWORD *)(a1 + 16);
        v19 = *(_OWORD *)(a1 + 32);
        v21 = *(_OWORD *)a1;
        v23 = *(_OWORD *)(a2 - 40);
        v22 = *(_OWORD *)(a2 - 24);
        v24 = *v15;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 16) = v23;
        *(_OWORD *)(a1 + 32) = v22;
        *(_OWORD *)a1 = v24;
        *v15 = v21;
        *(_OWORD *)(a2 - 40) = v20;
        *(_OWORD *)(a2 - 24) = v19;
        *(_QWORD *)(a2 - 8) = v18;
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogic::updateVenueLevelScales(void)::$_0 &,md::VenueLevelScale *>((__int128 *)a1, (__int128 *)(a1 + 56), (__int128 *)(a1 + 112), (__int128 *)(a2 - 56), a3);
      return 1;
    case 5:
      v35 = (__int128 *)(a1 + 56);
      v36 = (__int128 *)(a1 + 112);
      v37 = (__int128 *)(a1 + 168);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogic::updateVenueLevelScales(void)::$_0 &,md::VenueLevelScale *>((__int128 *)a1, (__int128 *)(a1 + 56), (__int128 *)(a1 + 112), (__int128 *)(a1 + 168), a3);
      if (*(__int16 *)(a2 - 24) <= *(__int16 *)(a1 + 200))
        return 1;
      v38 = *(_QWORD *)(a1 + 216);
      v40 = *(_OWORD *)(a1 + 184);
      v39 = *(_OWORD *)(a1 + 200);
      v41 = *v37;
      v42 = *(_OWORD *)(a2 - 40);
      v43 = *(_OWORD *)(a2 - 24);
      v44 = *(_OWORD *)(a2 - 56);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)(a1 + 184) = v42;
      *(_OWORD *)(a1 + 200) = v43;
      *v37 = v44;
      *(_OWORD *)(a2 - 56) = v41;
      *(_OWORD *)(a2 - 40) = v40;
      *(_OWORD *)(a2 - 24) = v39;
      *(_QWORD *)(a2 - 8) = v38;
      if (*(__int16 *)(a1 + 200) <= *(__int16 *)(a1 + 144))
        return 1;
      v45 = *(_QWORD *)(a1 + 160);
      v47 = *(_OWORD *)(a1 + 128);
      v46 = *(_OWORD *)(a1 + 144);
      v48 = *v36;
      v49 = *(_OWORD *)(a1 + 184);
      *v36 = *v37;
      *(_OWORD *)(a1 + 128) = v49;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 216);
      *v37 = v48;
      *(_OWORD *)(a1 + 184) = v47;
      *(_OWORD *)(a1 + 200) = v46;
      *(_QWORD *)(a1 + 216) = v45;
      if (*(__int16 *)(a1 + 144) <= *(__int16 *)(a1 + 88))
        return 1;
      v50 = *(_QWORD *)(a1 + 104);
      v52 = *(_OWORD *)(a1 + 72);
      v51 = *(_OWORD *)(a1 + 88);
      v53 = *v35;
      v54 = *(_OWORD *)(a1 + 128);
      *v35 = *v36;
      *(_OWORD *)(a1 + 72) = v54;
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 160);
      *v36 = v53;
      *(_OWORD *)(a1 + 128) = v52;
      *(_OWORD *)(a1 + 144) = v51;
      *(_QWORD *)(a1 + 160) = v50;
      if (*(__int16 *)(a1 + 88) <= *(__int16 *)(a1 + 32))
        return 1;
      v55 = *(_QWORD *)(a1 + 48);
      v57 = *(_OWORD *)(a1 + 16);
      v56 = *(_OWORD *)(a1 + 32);
      v58 = *(_OWORD *)a1;
      v59 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)a1 = *v35;
      *(_OWORD *)(a1 + 16) = v59;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
      *v35 = v58;
      *(_OWORD *)(a1 + 72) = v57;
      *(_OWORD *)(a1 + 88) = v56;
      result = 1;
      *(_QWORD *)(a1 + 104) = v55;
      return result;
    default:
      v25 = a1 + 112;
      v26 = (__int128 *)(a1 + 56);
      v27 = *(__int16 *)(a1 + 88);
      v28 = *(__int16 *)(a1 + 32);
      v29 = *(__int16 *)(a1 + 144);
      if (v27 <= v28)
      {
        if (v29 > v27)
        {
          v72 = *(_QWORD *)(a1 + 104);
          v74 = *(_OWORD *)(a1 + 72);
          v73 = *(_OWORD *)(a1 + 88);
          v75 = *v26;
          v76 = *(_OWORD *)(a1 + 128);
          *v26 = *(_OWORD *)v25;
          *(_OWORD *)(a1 + 72) = v76;
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 160);
          *(_OWORD *)v25 = v75;
          *(_OWORD *)(a1 + 128) = v74;
          *(_OWORD *)(a1 + 144) = v73;
          *(_QWORD *)(a1 + 160) = v72;
          if (*(__int16 *)(a1 + 88) > v28)
          {
            v77 = *(_QWORD *)(a1 + 48);
            v79 = *(_OWORD *)(a1 + 16);
            v78 = *(_OWORD *)(a1 + 32);
            v80 = *(_OWORD *)a1;
            v81 = *(_OWORD *)(a1 + 72);
            *(_OWORD *)a1 = *v26;
            *(_OWORD *)(a1 + 16) = v81;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
            *v26 = v80;
            *(_OWORD *)(a1 + 72) = v79;
            *(_OWORD *)(a1 + 88) = v78;
            *(_QWORD *)(a1 + 104) = v77;
          }
        }
      }
      else if (v29 <= v27)
      {
        v94 = *(_QWORD *)(a1 + 48);
        v96 = *(_OWORD *)(a1 + 16);
        v95 = *(_OWORD *)(a1 + 32);
        v97 = *(_OWORD *)a1;
        v98 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)a1 = *v26;
        *(_OWORD *)(a1 + 16) = v98;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
        *v26 = v97;
        *(_OWORD *)(a1 + 72) = v96;
        *(_OWORD *)(a1 + 88) = v95;
        *(_QWORD *)(a1 + 104) = v94;
        if (v29 > *(__int16 *)(a1 + 88))
        {
          v99 = *(_QWORD *)(a1 + 104);
          v101 = *(_OWORD *)(a1 + 72);
          v100 = *(_OWORD *)(a1 + 88);
          v102 = *v26;
          v103 = *(_OWORD *)(a1 + 128);
          *v26 = *(_OWORD *)v25;
          *(_OWORD *)(a1 + 72) = v103;
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 160);
          *(_OWORD *)v25 = v102;
          *(_OWORD *)(a1 + 128) = v101;
          *(_OWORD *)(a1 + 144) = v100;
          *(_QWORD *)(a1 + 160) = v99;
        }
      }
      else
      {
        v30 = *(_QWORD *)(a1 + 48);
        v32 = *(_OWORD *)(a1 + 16);
        v31 = *(_OWORD *)(a1 + 32);
        v33 = *(_OWORD *)a1;
        v34 = *(_OWORD *)(a1 + 128);
        *(_OWORD *)a1 = *(_OWORD *)v25;
        *(_OWORD *)(a1 + 16) = v34;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 160);
        *(_OWORD *)v25 = v33;
        *(_OWORD *)(a1 + 128) = v32;
        *(_OWORD *)(a1 + 144) = v31;
        *(_QWORD *)(a1 + 160) = v30;
      }
      v104 = a1 + 168;
      if (a1 + 168 == a2)
        return 1;
      v105 = 0;
      v106 = 0;
      break;
  }
  while (1)
  {
    v108 = *(__int16 *)(v104 + 32);
    if (v108 > *(__int16 *)(v25 + 32))
    {
      v113 = *(_OWORD *)v104;
      v114 = *(_OWORD *)(v104 + 16);
      *(_OWORD *)v112 = *(_OWORD *)(v104 + 34);
      *(_QWORD *)&v112[14] = *(_QWORD *)(v104 + 48);
      v109 = v105;
      do
      {
        v110 = a1 + v109;
        v111 = *(_OWORD *)(a1 + v109 + 128);
        *(_OWORD *)(v110 + 168) = *(_OWORD *)(a1 + v109 + 112);
        *(_OWORD *)(v110 + 184) = v111;
        *(_OWORD *)(v110 + 200) = *(_OWORD *)(a1 + v109 + 144);
        *(_QWORD *)(v110 + 216) = *(_QWORD *)(a1 + v109 + 160);
        if (v109 == -112)
        {
          v107 = a1;
          goto LABEL_29;
        }
        v109 -= 56;
      }
      while (v108 > *(__int16 *)(v110 + 88));
      v107 = a1 + v109 + 168;
LABEL_29:
      *(_OWORD *)v107 = v113;
      *(_OWORD *)(v107 + 16) = v114;
      *(_WORD *)(v107 + 32) = v108;
      *(_OWORD *)(v107 + 34) = *(_OWORD *)v112;
      *(_QWORD *)(v107 + 48) = *(_QWORD *)&v112[14];
      if (++v106 == 8)
        return v104 + 56 == a2;
    }
    v25 = v104;
    v105 += 56;
    v104 += 56;
    if (v104 == a2)
      return 1;
  }
}

uint64_t geo::containsPoint<double>(uint64_t a1, uint64_t a2, double a3, double a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v17;
  double *v19;
  double v20;
  double v22;
  BOOL v25;
  BOOL v26;
  double v27;

  v4 = 0;
  v5 = a2 - a1;
  if (a2 != a1)
  {
    v6 = 0;
    v7 = v5 >> 4;
    v8 = (v5 >> 4) - 1;
    if ((unint64_t)(v5 >> 4) <= 1)
      v9 = 1;
    else
      v9 = v5 >> 4;
    v10 = (double *)(a1 + 8);
    LODWORD(v5) = 1;
    do
    {
      v11 = v8 == v6 ? 0 : v6 + 1;
      v12 = *(v10 - 1);
      v13 = vabdd_f64(v12, a3);
      v14 = fabs(v12 + a3) * 2.22044605e-14;
      v15 = *v10;
      if (v13 <= v14 || v13 <= 2.22507386e-308)
      {
        v17 = vabdd_f64(v15, a4);
        if (v17 <= fabs(v15 + a4) * 2.22044605e-14 || v17 <= 2.22507386e-308)
          break;
      }
      v19 = (double *)(a1 + 16 * v11);
      v20 = v19[1];
      if (v15 == v20 && v15 == a4)
      {
        v22 = *v19;
        if (v12 <= a3 && v22 >= a3)
          break;
        if (v22 <= a3 && v12 >= a3)
          break;
      }
      v25 = v15 > a4 || v20 <= a4;
      if (!v25 || (v20 <= a4 ? (v26 = v15 <= a4) : (v26 = 1), !v26))
      {
        if (v12 != *v19)
        {
          v12 = (*v19 - v12) * (a4 - v15) / (v20 - v15) + v12;
          v14 = fabs(v12 + a3) * 2.22044605e-14;
        }
        v27 = vabdd_f64(a3, v12);
        if (v27 <= v14 || v27 < 2.22507386e-308)
          return (v5 | v4) & 1;
        if (v12 < a3)
          ++v4;
      }
      LODWORD(v5) = ++v6 < v7;
      v10 += 2;
    }
    while (v9 != v6);
  }
  return (v5 | v4) & 1;
}

double std::__introsort<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4, double result)
{
  __n128 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double *v16;
  double *v17;
  uint64_t v18;
  int v19;
  int v20;
  double v21;
  int v22;
  double v23;
  unint64_t j;
  int v25;
  uint64_t v26;
  unint64_t k;
  int v28;
  BOOL v29;
  int v30;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  BOOL v36;
  double v37;
  int v38;
  BOOL v39;
  unsigned __int8 *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unsigned __int8 *v45;
  unsigned __int8 *i;
  __n128 v47;
  unint64_t v48;
  unsigned __int8 *v49;
  int v50;
  unint64_t v51;
  int v52;
  __int128 v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  BOOL v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  int v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  int64_t v73;
  unint64_t v74;
  int64_t v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  double v82;
  uint64_t v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int64_t v90;
  uint64_t v92;
  unint64_t v93;
  __n128 v94;
  __n128 *v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  int v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  __int128 v108;
  unint64_t v109;
  __int128 v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  unsigned __int8 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  __n128 v123;
  int v124;
  int v125;
  int v126;
  __int16 v127;
  __int16 v128;
  __int16 v129;
  __int128 v130;
  __int128 v131;
  __n128 v132;
  int v133;
  int v134;
  __n128 v135;
  int v136;
  __n128 v137;
  __int16 v138;
  __int16 v139;
  __int16 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

double *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>(double *result, double *a2, double *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  if (a2 != result)
  {
    v3 = *((unsigned __int8 *)a2 + 8);
    if (v3 == *((unsigned __int8 *)result + 8))
    {
      if (*((unsigned __int8 *)a2 + 9) == *((unsigned __int8 *)result + 9))
      {
        if (a2[2] >= result[2])
          goto LABEL_5;
LABEL_11:
        if (a3 == a2)
          goto LABEL_30;
        if (*((unsigned __int8 *)a3 + 8) == v3)
        {
          if (*((unsigned __int8 *)a3 + 9) == *((unsigned __int8 *)a2 + 9))
          {
            if (a3[2] >= a2[2])
              goto LABEL_15;
LABEL_28:
            v13 = *((_QWORD *)result + 2);
            v14 = *(_OWORD *)result;
            v15 = *((_QWORD *)a3 + 2);
            *(_OWORD *)result = *(_OWORD *)a3;
            *((_QWORD *)result + 2) = v15;
            goto LABEL_33;
          }
          if (*((_BYTE *)a3 + 9))
            goto LABEL_28;
        }
        else if (*((_BYTE *)a3 + 8))
        {
          goto LABEL_28;
        }
LABEL_15:
        v5 = *((_QWORD *)result + 2);
        v6 = *(_OWORD *)result;
        v7 = *((_QWORD *)a2 + 2);
        *(_OWORD *)result = *(_OWORD *)a2;
        *((_QWORD *)result + 2) = v7;
        *(_OWORD *)a2 = v6;
        *((_QWORD *)a2 + 2) = v5;
        v8 = *((unsigned __int8 *)a3 + 8);
        if (v8 == *((unsigned __int8 *)a2 + 8)
          && (v8 = *((unsigned __int8 *)a3 + 9), v8 == *((unsigned __int8 *)a2 + 9)))
        {
          if (a3[2] >= a2[2])
            return result;
        }
        else if (!v8)
        {
          return result;
        }
        v13 = *((_QWORD *)a2 + 2);
        v14 = *(_OWORD *)a2;
        v19 = *((_QWORD *)a3 + 2);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((_QWORD *)a2 + 2) = v19;
LABEL_33:
        *(_OWORD *)a3 = v14;
        *((_QWORD *)a3 + 2) = v13;
        return result;
      }
      if (*((_BYTE *)a2 + 9))
        goto LABEL_11;
    }
    else if (*((_BYTE *)a2 + 8))
    {
      goto LABEL_11;
    }
  }
LABEL_5:
  if (a3 == a2)
    return result;
  v4 = *((unsigned __int8 *)a3 + 8);
  if (v4 == *((unsigned __int8 *)a2 + 8) && (v4 = *((unsigned __int8 *)a3 + 9), v4 == *((unsigned __int8 *)a2 + 9)))
  {
    if (a3[2] >= a2[2])
      return result;
  }
  else if (!v4)
  {
    return result;
  }
  v9 = *((_QWORD *)a2 + 2);
  v10 = *(_OWORD *)a2;
  v11 = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *((_QWORD *)a2 + 2) = v11;
  *(_OWORD *)a3 = v10;
  *((_QWORD *)a3 + 2) = v9;
  if (a2 != result)
  {
    v12 = *((unsigned __int8 *)a2 + 8);
    if (v12 == *((unsigned __int8 *)result + 8))
    {
      v12 = *((unsigned __int8 *)a2 + 9);
      if (v12 == *((unsigned __int8 *)result + 9))
      {
        if (a2[2] < result[2])
          goto LABEL_30;
        return result;
      }
    }
    if (!v12)
      return result;
LABEL_30:
    v16 = *((_QWORD *)result + 2);
    v17 = *(_OWORD *)result;
    v18 = *((_QWORD *)a2 + 2);
    *(_OWORD *)result = *(_OWORD *)a2;
    *((_QWORD *)result + 2) = v18;
    *(_OWORD *)a2 = v17;
    *((_QWORD *)a2 + 2) = v16;
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>((double *)a1, (double *)a2, (double *)a3);
  if (a4 != a3)
  {
    v9 = *(unsigned __int8 *)(a4 + 8);
    if (v9 == *(unsigned __int8 *)(a3 + 8) && (v9 = *(unsigned __int8 *)(a4 + 9), v9 == *(unsigned __int8 *)(a3 + 9)))
    {
      result.n128_u64[0] = *(_QWORD *)(a4 + 16);
      if (result.n128_f64[0] >= *(double *)(a3 + 16))
        return result;
    }
    else if (!v9)
    {
      return result;
    }
    v10 = *(_QWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v11 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v11;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v10;
    if (a3 == a2)
      return result;
    v12 = *(unsigned __int8 *)(a3 + 8);
    if (v12 == *(unsigned __int8 *)(a2 + 8)
      && (v12 = *(unsigned __int8 *)(a3 + 9), v12 == *(unsigned __int8 *)(a2 + 9)))
    {
      result.n128_u64[0] = *(_QWORD *)(a3 + 16);
      if (result.n128_f64[0] >= *(double *)(a2 + 16))
        return result;
    }
    else if (!v12)
    {
      return result;
    }
    v13 = *(_QWORD *)(a2 + 16);
    result = *(__n128 *)a2;
    v14 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_QWORD *)(a2 + 16) = v14;
    *(__n128 *)a3 = result;
    *(_QWORD *)(a3 + 16) = v13;
    if (a2 == a1)
      return result;
    v15 = *(unsigned __int8 *)(a2 + 8);
    if (v15 == *(unsigned __int8 *)(a1 + 8)
      && (v15 = *(unsigned __int8 *)(a2 + 9), v15 == *(unsigned __int8 *)(a1 + 9)))
    {
      result.n128_u64[0] = *(_QWORD *)(a2 + 16);
      if (result.n128_f64[0] >= *(double *)(a1 + 16))
        return result;
    }
    else if (!v15)
    {
      return result;
    }
    v16 = *(_QWORD *)(a1 + 16);
    result = *(__n128 *)a1;
    v17 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v17;
    *(__n128 *)a2 = result;
    *(_QWORD *)(a2 + 16) = v16;
  }
  return result;
}

__n128 std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *,0>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;
  int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;

  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  if (a5 != a4)
  {
    v11 = a5->n128_u8[8];
    if (v11 == a4->n128_u8[8] && (v11 = a5->n128_u8[9], v11 == a4->n128_u8[9]))
    {
      result.n128_u64[0] = a5[1].n128_u64[0];
      if (result.n128_f64[0] >= a4[1].n128_f64[0])
        return result;
    }
    else if (!v11)
    {
      return result;
    }
    v12 = a4[1].n128_u64[0];
    result = *a4;
    v13 = a5[1].n128_u64[0];
    *a4 = *a5;
    a4[1].n128_u64[0] = v13;
    *a5 = result;
    a5[1].n128_u64[0] = v12;
    if (a4 == a3)
      return result;
    v14 = a4->n128_u8[8];
    if (v14 == a3->n128_u8[8] && (v14 = a4->n128_u8[9], v14 == a3->n128_u8[9]))
    {
      result.n128_u64[0] = a4[1].n128_u64[0];
      if (result.n128_f64[0] >= a3[1].n128_f64[0])
        return result;
    }
    else if (!v14)
    {
      return result;
    }
    v15 = a3[1].n128_u64[0];
    result = *a3;
    v16 = a4[1].n128_u64[0];
    *a3 = *a4;
    a3[1].n128_u64[0] = v16;
    *a4 = result;
    a4[1].n128_u64[0] = v15;
    if (a3 == a2)
      return result;
    v17 = a3->n128_u8[8];
    if (v17 == a2->n128_u8[8] && (v17 = a3->n128_u8[9], v17 == a2->n128_u8[9]))
    {
      result.n128_u64[0] = a3[1].n128_u64[0];
      if (result.n128_f64[0] >= a2[1].n128_f64[0])
        return result;
    }
    else if (!v17)
    {
      return result;
    }
    v18 = a2[1].n128_u64[0];
    result = *a2;
    v19 = a3[1].n128_u64[0];
    *a2 = *a3;
    a2[1].n128_u64[0] = v19;
    *a3 = result;
    a3[1].n128_u64[0] = v18;
    if (a2 == a1)
      return result;
    v20 = a2->n128_u8[8];
    if (v20 == a1->n128_u8[8] && (v20 = a2->n128_u8[9], v20 == a1->n128_u8[9]))
    {
      result.n128_u64[0] = a2[1].n128_u64[0];
      if (result.n128_f64[0] >= a1[1].n128_f64[0])
        return result;
    }
    else if (!v20)
    {
      return result;
    }
    v21 = a1[1].n128_u64[0];
    result = *a1;
    v22 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v22;
    *a2 = result;
    a2[1].n128_u64[0] = v21;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  __int16 v28;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (_OWORD *)(a2 - 24);
      if (a2 - 24 == a1)
        return result;
      v7 = *(unsigned __int8 *)(a2 - 16);
      if (v7 == *(unsigned __int8 *)(a1 + 8)
        && (v7 = *(unsigned __int8 *)(a2 - 15), v7 == *(unsigned __int8 *)(a1 + 9)))
      {
        if (*(double *)(a2 - 8) >= *(double *)(a1 + 16))
          return result;
      }
      else if (!v7)
      {
        return result;
      }
      v24 = *(_QWORD *)(a1 + 16);
      v25 = *(_OWORD *)a1;
      v26 = *(_QWORD *)(a2 - 8);
      *(_OWORD *)a1 = *v6;
      *(_QWORD *)(a1 + 16) = v26;
      *v6 = v25;
      *(_QWORD *)(a2 - 8) = v24;
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>((double *)a1, (double *)(a1 + 24), (double *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *,0>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      v8 = a1 + 48;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>((double *)a1, (double *)(a1 + 24), (double *)(a1 + 48));
      v9 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v13 = *(unsigned __int8 *)(v9 + 8);
    if (v13 == *(unsigned __int8 *)(v8 + 8))
      break;
    if (*(_BYTE *)(v9 + 8))
    {
      v14 = *(unsigned __int8 *)(v9 + 9);
      goto LABEL_20;
    }
LABEL_11:
    v8 = v9;
    v10 += 24;
    v9 += 24;
    if (v9 == a2)
      return 1;
  }
  v14 = *(unsigned __int8 *)(v9 + 9);
  if (v14 == *(unsigned __int8 *)(v8 + 9))
  {
    if (*(double *)(v9 + 16) < *(double *)(v8 + 16))
      goto LABEL_20;
    goto LABEL_11;
  }
  if (!*(_BYTE *)(v9 + 9))
    goto LABEL_11;
  v14 = 1;
LABEL_20:
  v15 = *(_QWORD *)v9;
  v27 = *(_DWORD *)(v9 + 10);
  v28 = *(_WORD *)(v9 + 14);
  v16 = *(double *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v8 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v8;
  v12 = a1;
  if (v8 != a1)
  {
    v17 = v10;
    if (v13)
    {
      if (v14)
      {
        while (1)
        {
          v19 = a1 + v17;
          if (*(_BYTE *)(a1 + v17 + 32))
          {
            if (v14 == *(unsigned __int8 *)(v19 + 33))
            {
              v20 = a1 + v17;
              if (v16 >= *(double *)(a1 + v17 + 40))
                break;
            }
          }
          *(_OWORD *)(v19 + 48) = *(_OWORD *)(v19 + 24);
          *(_QWORD *)(v19 + 64) = *(_QWORD *)(v19 + 40);
          v17 -= 24;
          if (v17 == -48)
            goto LABEL_9;
        }
      }
      else
      {
        v18 = v10;
        while (1)
        {
          v21 = a1 + v18;
          if (*(_BYTE *)(a1 + v18 + 32))
          {
            if (*(_BYTE *)(v21 + 33))
              goto LABEL_45;
            v20 = a1 + v18;
            if (v16 >= *(double *)(a1 + v18 + 40))
              break;
          }
          v8 -= 24;
          *(_OWORD *)(v21 + 48) = *(_OWORD *)(v21 + 24);
          *(_QWORD *)(v21 + 64) = *(_QWORD *)(v21 + 40);
          v18 -= 24;
          if (v18 == -48)
            goto LABEL_9;
        }
      }
LABEL_44:
      v12 = v20 + 48;
    }
    else
    {
      if (v14)
      {
        while (1)
        {
          v23 = a1 + v17;
          if (*(_BYTE *)(a1 + v17 + 32))
            break;
          if (v14 == *(unsigned __int8 *)(v23 + 33))
          {
            v20 = a1 + v17;
            if (v16 >= *(double *)(a1 + v17 + 40))
              goto LABEL_44;
          }
          v8 -= 24;
          *(_OWORD *)(v23 + 48) = *(_OWORD *)(v23 + 24);
          *(_QWORD *)(v23 + 64) = *(_QWORD *)(v23 + 40);
          v17 -= 24;
          if (v17 == -48)
          {
LABEL_9:
            v12 = a1;
            goto LABEL_10;
          }
        }
      }
      else
      {
        while (1)
        {
          v22 = a1 + v17;
          if (*(_BYTE *)(a1 + v17 + 32) || *(_BYTE *)(v22 + 33))
            break;
          v20 = a1 + v17;
          if (v16 >= *(double *)(a1 + v17 + 40))
            goto LABEL_44;
          v8 -= 24;
          *(_OWORD *)(v22 + 48) = *(_OWORD *)(v22 + 24);
          *(_QWORD *)(v22 + 64) = *(_QWORD *)(v22 + 40);
          v17 -= 24;
          if (v17 == -48)
            goto LABEL_9;
        }
      }
LABEL_45:
      v12 = v8;
    }
  }
LABEL_10:
  *(_QWORD *)v12 = v15;
  *(_BYTE *)(v12 + 8) = v13;
  *(_BYTE *)(v12 + 9) = v14;
  *(_DWORD *)(v12 + 10) = v27;
  *(_WORD *)(v12 + 14) = v28;
  *(double *)(v12 + 16) = v16;
  if (++v11 != 8)
    goto LABEL_11;
  return v9 + 24 == a2;
}

